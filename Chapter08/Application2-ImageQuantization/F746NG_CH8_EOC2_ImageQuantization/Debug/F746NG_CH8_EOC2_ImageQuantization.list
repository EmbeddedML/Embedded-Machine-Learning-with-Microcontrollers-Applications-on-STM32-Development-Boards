
F746NG_CH8_EOC2_ImageQuantization.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .qspi         00000000  90000000  90000000  000200f8  2**0
                  CONTENTS
  1 .sdram_data   00070800  c0000000  c0000000  00030000  2**2
                  ALLOC
  2 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .text         000085fc  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       00000498  080087c4  080087c4  000187c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM.extab    00000000  08008c5c  08008c5c  000200f8  2**0
                  CONTENTS
  6 .ARM          00000008  08008c5c  08008c5c  00018c5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .preinit_array 00000000  08008c64  08008c64  000200f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  8 .init_array   00000004  08008c64  08008c64  00018c64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .fini_array   00000004  08008c68  08008c68  00018c68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .data         000000f8  20000000  08008c6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000334  200000f8  08008d64  000200f8  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  2000042c  08008d64  0002042c  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000200f8  2**0
                  CONTENTS, READONLY
 14 .debug_info   00015efd  00000000  00000000  00020128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002ff7  00000000  00000000  00036025  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000f60  00000000  00000000  00039020  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028997  00000000  00000000  00039f80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016509  00000000  00000000  00062917  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f3e84  00000000  00000000  00078e20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0016cca4  2**0
                  CONTENTS, READONLY
 21 .debug_ranges 00000df0  00000000  00000000  0016ccf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  0000401c  00000000  00000000  0016dae8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	200000f8 	.word	0x200000f8
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080087ac 	.word	0x080087ac

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	200000fc 	.word	0x200000fc
 8000204:	080087ac 	.word	0x080087ac

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	; 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__gedf2>:
 80009a4:	f04f 3cff 	mov.w	ip, #4294967295
 80009a8:	e006      	b.n	80009b8 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__ledf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	e002      	b.n	80009b8 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__cmpdf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c8:	bf18      	it	ne
 80009ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ce:	d01b      	beq.n	8000a08 <__cmpdf2+0x54>
 80009d0:	b001      	add	sp, #4
 80009d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009d6:	bf0c      	ite	eq
 80009d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009dc:	ea91 0f03 	teqne	r1, r3
 80009e0:	bf02      	ittt	eq
 80009e2:	ea90 0f02 	teqeq	r0, r2
 80009e6:	2000      	moveq	r0, #0
 80009e8:	4770      	bxeq	lr
 80009ea:	f110 0f00 	cmn.w	r0, #0
 80009ee:	ea91 0f03 	teq	r1, r3
 80009f2:	bf58      	it	pl
 80009f4:	4299      	cmppl	r1, r3
 80009f6:	bf08      	it	eq
 80009f8:	4290      	cmpeq	r0, r2
 80009fa:	bf2c      	ite	cs
 80009fc:	17d8      	asrcs	r0, r3, #31
 80009fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a02:	f040 0001 	orr.w	r0, r0, #1
 8000a06:	4770      	bx	lr
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__cmpdf2+0x64>
 8000a12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a16:	d107      	bne.n	8000a28 <__cmpdf2+0x74>
 8000a18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d1d6      	bne.n	80009d0 <__cmpdf2+0x1c>
 8000a22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a26:	d0d3      	beq.n	80009d0 <__cmpdf2+0x1c>
 8000a28:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop

08000a30 <__aeabi_cdrcmple>:
 8000a30:	4684      	mov	ip, r0
 8000a32:	4610      	mov	r0, r2
 8000a34:	4662      	mov	r2, ip
 8000a36:	468c      	mov	ip, r1
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4663      	mov	r3, ip
 8000a3c:	e000      	b.n	8000a40 <__aeabi_cdcmpeq>
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdcmpeq>:
 8000a40:	b501      	push	{r0, lr}
 8000a42:	f7ff ffb7 	bl	80009b4 <__cmpdf2>
 8000a46:	2800      	cmp	r0, #0
 8000a48:	bf48      	it	mi
 8000a4a:	f110 0f00 	cmnmi.w	r0, #0
 8000a4e:	bd01      	pop	{r0, pc}

08000a50 <__aeabi_dcmpeq>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff fff4 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a58:	bf0c      	ite	eq
 8000a5a:	2001      	moveq	r0, #1
 8000a5c:	2000      	movne	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmplt>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffea 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a6c:	bf34      	ite	cc
 8000a6e:	2001      	movcc	r0, #1
 8000a70:	2000      	movcs	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmple>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffe0 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a80:	bf94      	ite	ls
 8000a82:	2001      	movls	r0, #1
 8000a84:	2000      	movhi	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpge>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffce 	bl	8000a30 <__aeabi_cdrcmple>
 8000a94:	bf94      	ite	ls
 8000a96:	2001      	movls	r0, #1
 8000a98:	2000      	movhi	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmpgt>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffc4 	bl	8000a30 <__aeabi_cdrcmple>
 8000aa8:	bf34      	ite	cc
 8000aaa:	2001      	movcc	r0, #1
 8000aac:	2000      	movcs	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpun>:
 8000ab4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000abc:	d102      	bne.n	8000ac4 <__aeabi_dcmpun+0x10>
 8000abe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ac2:	d10a      	bne.n	8000ada <__aeabi_dcmpun+0x26>
 8000ac4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x20>
 8000ace:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ad2:	d102      	bne.n	8000ada <__aeabi_dcmpun+0x26>
 8000ad4:	f04f 0000 	mov.w	r0, #0
 8000ad8:	4770      	bx	lr
 8000ada:	f04f 0001 	mov.w	r0, #1
 8000ade:	4770      	bx	lr

08000ae0 <__aeabi_d2f>:
 8000ae0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ae8:	bf24      	itt	cs
 8000aea:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aee:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000af2:	d90d      	bls.n	8000b10 <__aeabi_d2f+0x30>
 8000af4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000af8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000afc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b00:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b04:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b08:	bf08      	it	eq
 8000b0a:	f020 0001 	biceq.w	r0, r0, #1
 8000b0e:	4770      	bx	lr
 8000b10:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b14:	d121      	bne.n	8000b5a <__aeabi_d2f+0x7a>
 8000b16:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b1a:	bfbc      	itt	lt
 8000b1c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b20:	4770      	bxlt	lr
 8000b22:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b26:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b2a:	f1c2 0218 	rsb	r2, r2, #24
 8000b2e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b32:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b36:	fa20 f002 	lsr.w	r0, r0, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	f040 0001 	orrne.w	r0, r0, #1
 8000b40:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b44:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b48:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b4c:	ea40 000c 	orr.w	r0, r0, ip
 8000b50:	fa23 f302 	lsr.w	r3, r3, r2
 8000b54:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b58:	e7cc      	b.n	8000af4 <__aeabi_d2f+0x14>
 8000b5a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b5e:	d107      	bne.n	8000b70 <__aeabi_d2f+0x90>
 8000b60:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b64:	bf1e      	ittt	ne
 8000b66:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b6a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b6e:	4770      	bxne	lr
 8000b70:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b74:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b78:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop

08000b80 <__aeabi_uldivmod>:
 8000b80:	b953      	cbnz	r3, 8000b98 <__aeabi_uldivmod+0x18>
 8000b82:	b94a      	cbnz	r2, 8000b98 <__aeabi_uldivmod+0x18>
 8000b84:	2900      	cmp	r1, #0
 8000b86:	bf08      	it	eq
 8000b88:	2800      	cmpeq	r0, #0
 8000b8a:	bf1c      	itt	ne
 8000b8c:	f04f 31ff 	movne.w	r1, #4294967295
 8000b90:	f04f 30ff 	movne.w	r0, #4294967295
 8000b94:	f000 b96e 	b.w	8000e74 <__aeabi_idiv0>
 8000b98:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b9c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ba0:	f000 f806 	bl	8000bb0 <__udivmoddi4>
 8000ba4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ba8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bac:	b004      	add	sp, #16
 8000bae:	4770      	bx	lr

08000bb0 <__udivmoddi4>:
 8000bb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bb4:	9d08      	ldr	r5, [sp, #32]
 8000bb6:	4604      	mov	r4, r0
 8000bb8:	468c      	mov	ip, r1
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	f040 8083 	bne.w	8000cc6 <__udivmoddi4+0x116>
 8000bc0:	428a      	cmp	r2, r1
 8000bc2:	4617      	mov	r7, r2
 8000bc4:	d947      	bls.n	8000c56 <__udivmoddi4+0xa6>
 8000bc6:	fab2 f282 	clz	r2, r2
 8000bca:	b142      	cbz	r2, 8000bde <__udivmoddi4+0x2e>
 8000bcc:	f1c2 0020 	rsb	r0, r2, #32
 8000bd0:	fa24 f000 	lsr.w	r0, r4, r0
 8000bd4:	4091      	lsls	r1, r2
 8000bd6:	4097      	lsls	r7, r2
 8000bd8:	ea40 0c01 	orr.w	ip, r0, r1
 8000bdc:	4094      	lsls	r4, r2
 8000bde:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000be2:	0c23      	lsrs	r3, r4, #16
 8000be4:	fbbc f6f8 	udiv	r6, ip, r8
 8000be8:	fa1f fe87 	uxth.w	lr, r7
 8000bec:	fb08 c116 	mls	r1, r8, r6, ip
 8000bf0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bf4:	fb06 f10e 	mul.w	r1, r6, lr
 8000bf8:	4299      	cmp	r1, r3
 8000bfa:	d909      	bls.n	8000c10 <__udivmoddi4+0x60>
 8000bfc:	18fb      	adds	r3, r7, r3
 8000bfe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c02:	f080 8119 	bcs.w	8000e38 <__udivmoddi4+0x288>
 8000c06:	4299      	cmp	r1, r3
 8000c08:	f240 8116 	bls.w	8000e38 <__udivmoddi4+0x288>
 8000c0c:	3e02      	subs	r6, #2
 8000c0e:	443b      	add	r3, r7
 8000c10:	1a5b      	subs	r3, r3, r1
 8000c12:	b2a4      	uxth	r4, r4
 8000c14:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c18:	fb08 3310 	mls	r3, r8, r0, r3
 8000c1c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c20:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c24:	45a6      	cmp	lr, r4
 8000c26:	d909      	bls.n	8000c3c <__udivmoddi4+0x8c>
 8000c28:	193c      	adds	r4, r7, r4
 8000c2a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c2e:	f080 8105 	bcs.w	8000e3c <__udivmoddi4+0x28c>
 8000c32:	45a6      	cmp	lr, r4
 8000c34:	f240 8102 	bls.w	8000e3c <__udivmoddi4+0x28c>
 8000c38:	3802      	subs	r0, #2
 8000c3a:	443c      	add	r4, r7
 8000c3c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c40:	eba4 040e 	sub.w	r4, r4, lr
 8000c44:	2600      	movs	r6, #0
 8000c46:	b11d      	cbz	r5, 8000c50 <__udivmoddi4+0xa0>
 8000c48:	40d4      	lsrs	r4, r2
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	e9c5 4300 	strd	r4, r3, [r5]
 8000c50:	4631      	mov	r1, r6
 8000c52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c56:	b902      	cbnz	r2, 8000c5a <__udivmoddi4+0xaa>
 8000c58:	deff      	udf	#255	; 0xff
 8000c5a:	fab2 f282 	clz	r2, r2
 8000c5e:	2a00      	cmp	r2, #0
 8000c60:	d150      	bne.n	8000d04 <__udivmoddi4+0x154>
 8000c62:	1bcb      	subs	r3, r1, r7
 8000c64:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c68:	fa1f f887 	uxth.w	r8, r7
 8000c6c:	2601      	movs	r6, #1
 8000c6e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c72:	0c21      	lsrs	r1, r4, #16
 8000c74:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c78:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c7c:	fb08 f30c 	mul.w	r3, r8, ip
 8000c80:	428b      	cmp	r3, r1
 8000c82:	d907      	bls.n	8000c94 <__udivmoddi4+0xe4>
 8000c84:	1879      	adds	r1, r7, r1
 8000c86:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c8a:	d202      	bcs.n	8000c92 <__udivmoddi4+0xe2>
 8000c8c:	428b      	cmp	r3, r1
 8000c8e:	f200 80e9 	bhi.w	8000e64 <__udivmoddi4+0x2b4>
 8000c92:	4684      	mov	ip, r0
 8000c94:	1ac9      	subs	r1, r1, r3
 8000c96:	b2a3      	uxth	r3, r4
 8000c98:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c9c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ca0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ca4:	fb08 f800 	mul.w	r8, r8, r0
 8000ca8:	45a0      	cmp	r8, r4
 8000caa:	d907      	bls.n	8000cbc <__udivmoddi4+0x10c>
 8000cac:	193c      	adds	r4, r7, r4
 8000cae:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cb2:	d202      	bcs.n	8000cba <__udivmoddi4+0x10a>
 8000cb4:	45a0      	cmp	r8, r4
 8000cb6:	f200 80d9 	bhi.w	8000e6c <__udivmoddi4+0x2bc>
 8000cba:	4618      	mov	r0, r3
 8000cbc:	eba4 0408 	sub.w	r4, r4, r8
 8000cc0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cc4:	e7bf      	b.n	8000c46 <__udivmoddi4+0x96>
 8000cc6:	428b      	cmp	r3, r1
 8000cc8:	d909      	bls.n	8000cde <__udivmoddi4+0x12e>
 8000cca:	2d00      	cmp	r5, #0
 8000ccc:	f000 80b1 	beq.w	8000e32 <__udivmoddi4+0x282>
 8000cd0:	2600      	movs	r6, #0
 8000cd2:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd6:	4630      	mov	r0, r6
 8000cd8:	4631      	mov	r1, r6
 8000cda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cde:	fab3 f683 	clz	r6, r3
 8000ce2:	2e00      	cmp	r6, #0
 8000ce4:	d14a      	bne.n	8000d7c <__udivmoddi4+0x1cc>
 8000ce6:	428b      	cmp	r3, r1
 8000ce8:	d302      	bcc.n	8000cf0 <__udivmoddi4+0x140>
 8000cea:	4282      	cmp	r2, r0
 8000cec:	f200 80b8 	bhi.w	8000e60 <__udivmoddi4+0x2b0>
 8000cf0:	1a84      	subs	r4, r0, r2
 8000cf2:	eb61 0103 	sbc.w	r1, r1, r3
 8000cf6:	2001      	movs	r0, #1
 8000cf8:	468c      	mov	ip, r1
 8000cfa:	2d00      	cmp	r5, #0
 8000cfc:	d0a8      	beq.n	8000c50 <__udivmoddi4+0xa0>
 8000cfe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d02:	e7a5      	b.n	8000c50 <__udivmoddi4+0xa0>
 8000d04:	f1c2 0320 	rsb	r3, r2, #32
 8000d08:	fa20 f603 	lsr.w	r6, r0, r3
 8000d0c:	4097      	lsls	r7, r2
 8000d0e:	fa01 f002 	lsl.w	r0, r1, r2
 8000d12:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d16:	40d9      	lsrs	r1, r3
 8000d18:	4330      	orrs	r0, r6
 8000d1a:	0c03      	lsrs	r3, r0, #16
 8000d1c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d20:	fa1f f887 	uxth.w	r8, r7
 8000d24:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d28:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d2c:	fb06 f108 	mul.w	r1, r6, r8
 8000d30:	4299      	cmp	r1, r3
 8000d32:	fa04 f402 	lsl.w	r4, r4, r2
 8000d36:	d909      	bls.n	8000d4c <__udivmoddi4+0x19c>
 8000d38:	18fb      	adds	r3, r7, r3
 8000d3a:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d3e:	f080 808d 	bcs.w	8000e5c <__udivmoddi4+0x2ac>
 8000d42:	4299      	cmp	r1, r3
 8000d44:	f240 808a 	bls.w	8000e5c <__udivmoddi4+0x2ac>
 8000d48:	3e02      	subs	r6, #2
 8000d4a:	443b      	add	r3, r7
 8000d4c:	1a5b      	subs	r3, r3, r1
 8000d4e:	b281      	uxth	r1, r0
 8000d50:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d54:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d58:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d5c:	fb00 f308 	mul.w	r3, r0, r8
 8000d60:	428b      	cmp	r3, r1
 8000d62:	d907      	bls.n	8000d74 <__udivmoddi4+0x1c4>
 8000d64:	1879      	adds	r1, r7, r1
 8000d66:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d6a:	d273      	bcs.n	8000e54 <__udivmoddi4+0x2a4>
 8000d6c:	428b      	cmp	r3, r1
 8000d6e:	d971      	bls.n	8000e54 <__udivmoddi4+0x2a4>
 8000d70:	3802      	subs	r0, #2
 8000d72:	4439      	add	r1, r7
 8000d74:	1acb      	subs	r3, r1, r3
 8000d76:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d7a:	e778      	b.n	8000c6e <__udivmoddi4+0xbe>
 8000d7c:	f1c6 0c20 	rsb	ip, r6, #32
 8000d80:	fa03 f406 	lsl.w	r4, r3, r6
 8000d84:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d88:	431c      	orrs	r4, r3
 8000d8a:	fa20 f70c 	lsr.w	r7, r0, ip
 8000d8e:	fa01 f306 	lsl.w	r3, r1, r6
 8000d92:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000d96:	fa21 f10c 	lsr.w	r1, r1, ip
 8000d9a:	431f      	orrs	r7, r3
 8000d9c:	0c3b      	lsrs	r3, r7, #16
 8000d9e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000da2:	fa1f f884 	uxth.w	r8, r4
 8000da6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000daa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dae:	fb09 fa08 	mul.w	sl, r9, r8
 8000db2:	458a      	cmp	sl, r1
 8000db4:	fa02 f206 	lsl.w	r2, r2, r6
 8000db8:	fa00 f306 	lsl.w	r3, r0, r6
 8000dbc:	d908      	bls.n	8000dd0 <__udivmoddi4+0x220>
 8000dbe:	1861      	adds	r1, r4, r1
 8000dc0:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dc4:	d248      	bcs.n	8000e58 <__udivmoddi4+0x2a8>
 8000dc6:	458a      	cmp	sl, r1
 8000dc8:	d946      	bls.n	8000e58 <__udivmoddi4+0x2a8>
 8000dca:	f1a9 0902 	sub.w	r9, r9, #2
 8000dce:	4421      	add	r1, r4
 8000dd0:	eba1 010a 	sub.w	r1, r1, sl
 8000dd4:	b2bf      	uxth	r7, r7
 8000dd6:	fbb1 f0fe 	udiv	r0, r1, lr
 8000dda:	fb0e 1110 	mls	r1, lr, r0, r1
 8000dde:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000de2:	fb00 f808 	mul.w	r8, r0, r8
 8000de6:	45b8      	cmp	r8, r7
 8000de8:	d907      	bls.n	8000dfa <__udivmoddi4+0x24a>
 8000dea:	19e7      	adds	r7, r4, r7
 8000dec:	f100 31ff 	add.w	r1, r0, #4294967295
 8000df0:	d22e      	bcs.n	8000e50 <__udivmoddi4+0x2a0>
 8000df2:	45b8      	cmp	r8, r7
 8000df4:	d92c      	bls.n	8000e50 <__udivmoddi4+0x2a0>
 8000df6:	3802      	subs	r0, #2
 8000df8:	4427      	add	r7, r4
 8000dfa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dfe:	eba7 0708 	sub.w	r7, r7, r8
 8000e02:	fba0 8902 	umull	r8, r9, r0, r2
 8000e06:	454f      	cmp	r7, r9
 8000e08:	46c6      	mov	lr, r8
 8000e0a:	4649      	mov	r1, r9
 8000e0c:	d31a      	bcc.n	8000e44 <__udivmoddi4+0x294>
 8000e0e:	d017      	beq.n	8000e40 <__udivmoddi4+0x290>
 8000e10:	b15d      	cbz	r5, 8000e2a <__udivmoddi4+0x27a>
 8000e12:	ebb3 020e 	subs.w	r2, r3, lr
 8000e16:	eb67 0701 	sbc.w	r7, r7, r1
 8000e1a:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e1e:	40f2      	lsrs	r2, r6
 8000e20:	ea4c 0202 	orr.w	r2, ip, r2
 8000e24:	40f7      	lsrs	r7, r6
 8000e26:	e9c5 2700 	strd	r2, r7, [r5]
 8000e2a:	2600      	movs	r6, #0
 8000e2c:	4631      	mov	r1, r6
 8000e2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e32:	462e      	mov	r6, r5
 8000e34:	4628      	mov	r0, r5
 8000e36:	e70b      	b.n	8000c50 <__udivmoddi4+0xa0>
 8000e38:	4606      	mov	r6, r0
 8000e3a:	e6e9      	b.n	8000c10 <__udivmoddi4+0x60>
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	e6fd      	b.n	8000c3c <__udivmoddi4+0x8c>
 8000e40:	4543      	cmp	r3, r8
 8000e42:	d2e5      	bcs.n	8000e10 <__udivmoddi4+0x260>
 8000e44:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e48:	eb69 0104 	sbc.w	r1, r9, r4
 8000e4c:	3801      	subs	r0, #1
 8000e4e:	e7df      	b.n	8000e10 <__udivmoddi4+0x260>
 8000e50:	4608      	mov	r0, r1
 8000e52:	e7d2      	b.n	8000dfa <__udivmoddi4+0x24a>
 8000e54:	4660      	mov	r0, ip
 8000e56:	e78d      	b.n	8000d74 <__udivmoddi4+0x1c4>
 8000e58:	4681      	mov	r9, r0
 8000e5a:	e7b9      	b.n	8000dd0 <__udivmoddi4+0x220>
 8000e5c:	4666      	mov	r6, ip
 8000e5e:	e775      	b.n	8000d4c <__udivmoddi4+0x19c>
 8000e60:	4630      	mov	r0, r6
 8000e62:	e74a      	b.n	8000cfa <__udivmoddi4+0x14a>
 8000e64:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e68:	4439      	add	r1, r7
 8000e6a:	e713      	b.n	8000c94 <__udivmoddi4+0xe4>
 8000e6c:	3802      	subs	r0, #2
 8000e6e:	443c      	add	r4, r7
 8000e70:	e724      	b.n	8000cbc <__udivmoddi4+0x10c>
 8000e72:	bf00      	nop

08000e74 <__aeabi_idiv0>:
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop

08000e78 <kmeans_clus_predict>:
#include "kmeans_clus_inference.h"

static float euclid_distance(float *sample, float *target);

int8_t kmeans_clus_predict(float *input, float *output, bool online)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b08c      	sub	sp, #48	; 0x30
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	60f8      	str	r0, [r7, #12]
 8000e80:	60b9      	str	r1, [r7, #8]
 8000e82:	4613      	mov	r3, r2
 8000e84:	71fb      	strb	r3, [r7, #7]
    float min_distance = FLT_MAX;
 8000e86:	4b41      	ldr	r3, [pc, #260]	; (8000f8c <kmeans_clus_predict+0x114>)
 8000e88:	62fb      	str	r3, [r7, #44]	; 0x2c
    int cluster_idx = -1;
 8000e8a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e8e:	62bb      	str	r3, [r7, #40]	; 0x28
    for (int i = 0; i < NUM_CLUSTERS; i++)
 8000e90:	2300      	movs	r3, #0
 8000e92:	627b      	str	r3, [r7, #36]	; 0x24
 8000e94:	e01c      	b.n	8000ed0 <kmeans_clus_predict+0x58>
    {
        float cur_dist = euclid_distance(input, centroids[i]);
 8000e96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e98:	4613      	mov	r3, r2
 8000e9a:	005b      	lsls	r3, r3, #1
 8000e9c:	4413      	add	r3, r2
 8000e9e:	009b      	lsls	r3, r3, #2
 8000ea0:	4a3b      	ldr	r2, [pc, #236]	; (8000f90 <kmeans_clus_predict+0x118>)
 8000ea2:	4413      	add	r3, r2
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	68f8      	ldr	r0, [r7, #12]
 8000ea8:	f000 f876 	bl	8000f98 <euclid_distance>
 8000eac:	ed87 0a05 	vstr	s0, [r7, #20]
        if (cur_dist < min_distance)
 8000eb0:	ed97 7a05 	vldr	s14, [r7, #20]
 8000eb4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000eb8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000ebc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ec0:	d503      	bpl.n	8000eca <kmeans_clus_predict+0x52>
        {
            min_distance = cur_dist;
 8000ec2:	697b      	ldr	r3, [r7, #20]
 8000ec4:	62fb      	str	r3, [r7, #44]	; 0x2c
            cluster_idx = i;
 8000ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ec8:	62bb      	str	r3, [r7, #40]	; 0x28
    for (int i = 0; i < NUM_CLUSTERS; i++)
 8000eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ecc:	3301      	adds	r3, #1
 8000ece:	627b      	str	r3, [r7, #36]	; 0x24
 8000ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ed2:	2b07      	cmp	r3, #7
 8000ed4:	dddf      	ble.n	8000e96 <kmeans_clus_predict+0x1e>
        }
    }

	if(online)
 8000ed6:	79fb      	ldrb	r3, [r7, #7]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d04a      	beq.n	8000f72 <kmeans_clus_predict+0xfa>
	{
		int num_samples = num_samples_per_cluster[cluster_idx];
 8000edc:	4a2d      	ldr	r2, [pc, #180]	; (8000f94 <kmeans_clus_predict+0x11c>)
 8000ede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ee0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ee4:	61fb      	str	r3, [r7, #28]
		for(int i=0; i < NUM_FEATURES; i++)
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	623b      	str	r3, [r7, #32]
 8000eea:	e036      	b.n	8000f5a <kmeans_clus_predict+0xe2>
		{
			float sum_feature = centroids[cluster_idx][i] * num_samples_per_cluster[cluster_idx];
 8000eec:	4928      	ldr	r1, [pc, #160]	; (8000f90 <kmeans_clus_predict+0x118>)
 8000eee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000ef0:	4613      	mov	r3, r2
 8000ef2:	005b      	lsls	r3, r3, #1
 8000ef4:	4413      	add	r3, r2
 8000ef6:	6a3a      	ldr	r2, [r7, #32]
 8000ef8:	4413      	add	r3, r2
 8000efa:	009b      	lsls	r3, r3, #2
 8000efc:	440b      	add	r3, r1
 8000efe:	ed93 7a00 	vldr	s14, [r3]
 8000f02:	4a24      	ldr	r2, [pc, #144]	; (8000f94 <kmeans_clus_predict+0x11c>)
 8000f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f0a:	ee07 3a90 	vmov	s15, r3
 8000f0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f16:	edc7 7a06 	vstr	s15, [r7, #24]
			centroids[cluster_idx][i] = (input[i] + sum_feature) / (num_samples + 1);
 8000f1a:	6a3b      	ldr	r3, [r7, #32]
 8000f1c:	009b      	lsls	r3, r3, #2
 8000f1e:	68fa      	ldr	r2, [r7, #12]
 8000f20:	4413      	add	r3, r2
 8000f22:	ed93 7a00 	vldr	s14, [r3]
 8000f26:	edd7 7a06 	vldr	s15, [r7, #24]
 8000f2a:	ee77 6a27 	vadd.f32	s13, s14, s15
 8000f2e:	69fb      	ldr	r3, [r7, #28]
 8000f30:	3301      	adds	r3, #1
 8000f32:	ee07 3a90 	vmov	s15, r3
 8000f36:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f3a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f3e:	4914      	ldr	r1, [pc, #80]	; (8000f90 <kmeans_clus_predict+0x118>)
 8000f40:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000f42:	4613      	mov	r3, r2
 8000f44:	005b      	lsls	r3, r3, #1
 8000f46:	4413      	add	r3, r2
 8000f48:	6a3a      	ldr	r2, [r7, #32]
 8000f4a:	4413      	add	r3, r2
 8000f4c:	009b      	lsls	r3, r3, #2
 8000f4e:	440b      	add	r3, r1
 8000f50:	edc3 7a00 	vstr	s15, [r3]
		for(int i=0; i < NUM_FEATURES; i++)
 8000f54:	6a3b      	ldr	r3, [r7, #32]
 8000f56:	3301      	adds	r3, #1
 8000f58:	623b      	str	r3, [r7, #32]
 8000f5a:	6a3b      	ldr	r3, [r7, #32]
 8000f5c:	2b02      	cmp	r3, #2
 8000f5e:	ddc5      	ble.n	8000eec <kmeans_clus_predict+0x74>
		}
		num_samples_per_cluster[cluster_idx]++;
 8000f60:	4a0c      	ldr	r2, [pc, #48]	; (8000f94 <kmeans_clus_predict+0x11c>)
 8000f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f68:	1c5a      	adds	r2, r3, #1
 8000f6a:	490a      	ldr	r1, [pc, #40]	; (8000f94 <kmeans_clus_predict+0x11c>)
 8000f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}
	*output = cluster_idx;
 8000f72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f74:	ee07 3a90 	vmov	s15, r3
 8000f78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f7c:	68bb      	ldr	r3, [r7, #8]
 8000f7e:	edc3 7a00 	vstr	s15, [r3]
    return 0;
 8000f82:	2300      	movs	r3, #0
}
 8000f84:	4618      	mov	r0, r3
 8000f86:	3730      	adds	r7, #48	; 0x30
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	7f7fffff 	.word	0x7f7fffff
 8000f90:	20000020 	.word	0x20000020
 8000f94:	20000000 	.word	0x20000000

08000f98 <euclid_distance>:

static float euclid_distance(float *sample, float *target)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b086      	sub	sp, #24
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
 8000fa0:	6039      	str	r1, [r7, #0]
    float dist = 0;
 8000fa2:	f04f 0300 	mov.w	r3, #0
 8000fa6:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < NUM_FEATURES; i++)
 8000fa8:	2300      	movs	r3, #0
 8000faa:	613b      	str	r3, [r7, #16]
 8000fac:	e01c      	b.n	8000fe8 <euclid_distance+0x50>
    {
        float diff = sample[i] - target[i];
 8000fae:	693b      	ldr	r3, [r7, #16]
 8000fb0:	009b      	lsls	r3, r3, #2
 8000fb2:	687a      	ldr	r2, [r7, #4]
 8000fb4:	4413      	add	r3, r2
 8000fb6:	ed93 7a00 	vldr	s14, [r3]
 8000fba:	693b      	ldr	r3, [r7, #16]
 8000fbc:	009b      	lsls	r3, r3, #2
 8000fbe:	683a      	ldr	r2, [r7, #0]
 8000fc0:	4413      	add	r3, r2
 8000fc2:	edd3 7a00 	vldr	s15, [r3]
 8000fc6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fca:	edc7 7a03 	vstr	s15, [r7, #12]
        dist += diff * diff;
 8000fce:	edd7 7a03 	vldr	s15, [r7, #12]
 8000fd2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000fd6:	ed97 7a05 	vldr	s14, [r7, #20]
 8000fda:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fde:	edc7 7a05 	vstr	s15, [r7, #20]
    for (int i = 0; i < NUM_FEATURES; i++)
 8000fe2:	693b      	ldr	r3, [r7, #16]
 8000fe4:	3301      	adds	r3, #1
 8000fe6:	613b      	str	r3, [r7, #16]
 8000fe8:	693b      	ldr	r3, [r7, #16]
 8000fea:	2b02      	cmp	r3, #2
 8000fec:	dddf      	ble.n	8000fae <euclid_distance+0x16>
    }
    return sqrt(dist);
 8000fee:	6978      	ldr	r0, [r7, #20]
 8000ff0:	f7ff fa6e 	bl	80004d0 <__aeabi_f2d>
 8000ff4:	4602      	mov	r2, r0
 8000ff6:	460b      	mov	r3, r1
 8000ff8:	ec43 2b10 	vmov	d0, r2, r3
 8000ffc:	f007 faee 	bl	80085dc <sqrt>
 8001000:	ec53 2b10 	vmov	r2, r3, d0
 8001004:	4610      	mov	r0, r2
 8001006:	4619      	mov	r1, r3
 8001008:	f7ff fd6a 	bl	8000ae0 <__aeabi_d2f>
 800100c:	4603      	mov	r3, r0
 800100e:	ee07 3a90 	vmov	s15, r3
}
 8001012:	eeb0 0a67 	vmov.f32	s0, s15
 8001016:	3718      	adds	r7, #24
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}

0800101c <LIB_IMAGE_InitStruct>:
  * @param width   width of the image
  * @param format  Choose IMAGE_FORMAT_GRAYSCALE, IMAGE_FORMAT_RGB565, or IMAGE_FORMAT_RGB888
  * @retval 0 if successfully initialized
  */
int8_t LIB_IMAGE_InitStruct(IMAGE_HandleTypeDef * img, uint8_t *pImg, uint16_t height, uint16_t width, IMAGE_Format format)
{
 800101c:	b480      	push	{r7}
 800101e:	b085      	sub	sp, #20
 8001020:	af00      	add	r7, sp, #0
 8001022:	60f8      	str	r0, [r7, #12]
 8001024:	60b9      	str	r1, [r7, #8]
 8001026:	4611      	mov	r1, r2
 8001028:	461a      	mov	r2, r3
 800102a:	460b      	mov	r3, r1
 800102c:	80fb      	strh	r3, [r7, #6]
 800102e:	4613      	mov	r3, r2
 8001030:	80bb      	strh	r3, [r7, #4]
	__LIB_IMAGE_CHECK_PARAM(img);
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d102      	bne.n	800103e <LIB_IMAGE_InitStruct+0x22>
 8001038:	f04f 33ff 	mov.w	r3, #4294967295
 800103c:	e031      	b.n	80010a2 <LIB_IMAGE_InitStruct+0x86>
	__LIB_IMAGE_CHECK_PARAM(pImg);
 800103e:	68bb      	ldr	r3, [r7, #8]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d102      	bne.n	800104a <LIB_IMAGE_InitStruct+0x2e>
 8001044:	f04f 33ff 	mov.w	r3, #4294967295
 8001048:	e02b      	b.n	80010a2 <LIB_IMAGE_InitStruct+0x86>
	__LIB_IMAGE_CHECK_PARAM(format);
 800104a:	7e3b      	ldrb	r3, [r7, #24]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d102      	bne.n	8001056 <LIB_IMAGE_InitStruct+0x3a>
 8001050:	f04f 33ff 	mov.w	r3, #4294967295
 8001054:	e025      	b.n	80010a2 <LIB_IMAGE_InitStruct+0x86>
	__LIB_IMAGE_CHECK_PARAM(width);
 8001056:	88bb      	ldrh	r3, [r7, #4]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d102      	bne.n	8001062 <LIB_IMAGE_InitStruct+0x46>
 800105c:	f04f 33ff 	mov.w	r3, #4294967295
 8001060:	e01f      	b.n	80010a2 <LIB_IMAGE_InitStruct+0x86>
	__LIB_IMAGE_CHECK_PARAM(height);
 8001062:	88fb      	ldrh	r3, [r7, #6]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d102      	bne.n	800106e <LIB_IMAGE_InitStruct+0x52>
 8001068:	f04f 33ff 	mov.w	r3, #4294967295
 800106c:	e019      	b.n	80010a2 <LIB_IMAGE_InitStruct+0x86>
	img->format = format;
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	7e3a      	ldrb	r2, [r7, #24]
 8001072:	721a      	strb	r2, [r3, #8]
	img->height = height;
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	88fa      	ldrh	r2, [r7, #6]
 8001078:	80da      	strh	r2, [r3, #6]
	img->width 	= width;
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	88ba      	ldrh	r2, [r7, #4]
 800107e:	809a      	strh	r2, [r3, #4]
	img->pData 	= pImg;
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	68ba      	ldr	r2, [r7, #8]
 8001084:	601a      	str	r2, [r3, #0]
	img->size 	= (uint32_t)img->format * (uint32_t)img->height * (uint32_t)img->width;
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	7a1b      	ldrb	r3, [r3, #8]
 800108a:	461a      	mov	r2, r3
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	88db      	ldrh	r3, [r3, #6]
 8001090:	fb03 f302 	mul.w	r3, r3, r2
 8001094:	68fa      	ldr	r2, [r7, #12]
 8001096:	8892      	ldrh	r2, [r2, #4]
 8001098:	fb02 f203 	mul.w	r2, r2, r3
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	60da      	str	r2, [r3, #12]
	return IMAGE_OK;
 80010a0:	2300      	movs	r3, #0
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	3714      	adds	r7, #20
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr

080010ae <LIB_MPU_Init>:
 */

#include "lib_mpu.h"

void LIB_MPU_Init(void)
{
 80010ae:	b580      	push	{r7, lr}
 80010b0:	b084      	sub	sp, #16
 80010b2:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80010b4:	463b      	mov	r3, r7
 80010b6:	2200      	movs	r2, #0
 80010b8:	601a      	str	r2, [r3, #0]
 80010ba:	605a      	str	r2, [r3, #4]
 80010bc:	609a      	str	r2, [r3, #8]
 80010be:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80010c0:	f002 fb12 	bl	80036e8 <HAL_MPU_Disable>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80010c4:	2301      	movs	r3, #1
 80010c6:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80010c8:	2300      	movs	r3, #0
 80010ca:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0xC0000000;
 80010cc:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 80010d0:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_8MB;
 80010d2:	2316      	movs	r3, #22
 80010d4:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 80010d6:	2300      	movs	r3, #0
 80010d8:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80010da:	2300      	movs	r3, #0
 80010dc:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 80010de:	2303      	movs	r3, #3
 80010e0:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 80010e2:	2300      	movs	r3, #0
 80010e4:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 80010e6:	2300      	movs	r3, #0
 80010e8:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 80010ea:	2301      	movs	r3, #1
 80010ec:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 80010ee:	2301      	movs	r3, #1
 80010f0:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80010f2:	463b      	mov	r3, r7
 80010f4:	4618      	mov	r0, r3
 80010f6:	f002 fb2f 	bl	8003758 <HAL_MPU_ConfigRegion>

  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80010fa:	2004      	movs	r0, #4
 80010fc:	f002 fb0c 	bl	8003718 <HAL_MPU_Enable>
}
 8001100:	bf00      	nop
 8001102:	3710      	adds	r7, #16
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}

08001108 <LIB_OV5640_Init>:
  * @param  resolution from LIB_OV5640_Resolution enum
  * @param  format	from LIB_OV5640_Format enum
  * @retval 0 if successfully initialized
  */
int8_t LIB_OV5640_Init(LIB_OV5640_Resolution resolution, LIB_OV5640_Format format)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	4603      	mov	r3, r0
 8001110:	460a      	mov	r2, r1
 8001112:	71fb      	strb	r3, [r7, #7]
 8001114:	4613      	mov	r3, r2
 8001116:	71bb      	strb	r3, [r7, #6]
	LIB_DMA_Init();
 8001118:	f000 f87a 	bl	8001210 <LIB_DMA_Init>
	LIB_DCMI_MspInit(&__hdcmi);
 800111c:	4812      	ldr	r0, [pc, #72]	; (8001168 <LIB_OV5640_Init+0x60>)
 800111e:	f000 f8d1 	bl	80012c4 <LIB_DCMI_MspInit>
	LIB_DCMI_Init();
 8001122:	f000 f89d 	bl	8001260 <LIB_DCMI_Init>
	LIB_I2C_MspInit(&hi2c1);
 8001126:	4811      	ldr	r0, [pc, #68]	; (800116c <LIB_OV5640_Init+0x64>)
 8001128:	f000 f9ea 	bl	8001500 <LIB_I2C_MspInit>
	LIB_I2C1_Init();
 800112c:	f000 f9be 	bl	80014ac <LIB_I2C1_Init>
	ov5640.IO.WriteReg = __OV5640_WriteReg_Func;
 8001130:	4b0f      	ldr	r3, [pc, #60]	; (8001170 <LIB_OV5640_Init+0x68>)
 8001132:	4a10      	ldr	r2, [pc, #64]	; (8001174 <LIB_OV5640_Init+0x6c>)
 8001134:	60da      	str	r2, [r3, #12]
	ov5640.IO.ReadReg  = __OV5640_ReadReg_Func;
 8001136:	4b0e      	ldr	r3, [pc, #56]	; (8001170 <LIB_OV5640_Init+0x68>)
 8001138:	4a0f      	ldr	r2, [pc, #60]	; (8001178 <LIB_OV5640_Init+0x70>)
 800113a:	611a      	str	r2, [r3, #16]
	ov5640.IO.GetTick  = __OV5640_GetTick_Func;
 800113c:	4b0c      	ldr	r3, [pc, #48]	; (8001170 <LIB_OV5640_Init+0x68>)
 800113e:	4a0f      	ldr	r2, [pc, #60]	; (800117c <LIB_OV5640_Init+0x74>)
 8001140:	615a      	str	r2, [r3, #20]
	ov5640.IO.Address  = 0x78U;
 8001142:	4b0b      	ldr	r3, [pc, #44]	; (8001170 <LIB_OV5640_Init+0x68>)
 8001144:	2278      	movs	r2, #120	; 0x78
 8001146:	811a      	strh	r2, [r3, #8]
	OV5640_RegisterBusIO(&ov5640, &ov5640.IO);
 8001148:	4909      	ldr	r1, [pc, #36]	; (8001170 <LIB_OV5640_Init+0x68>)
 800114a:	4809      	ldr	r0, [pc, #36]	; (8001170 <LIB_OV5640_Init+0x68>)
 800114c:	f001 f918 	bl	8002380 <OV5640_RegisterBusIO>
	return OV5640_Init(&ov5640, resolution, format);
 8001150:	79fb      	ldrb	r3, [r7, #7]
 8001152:	79ba      	ldrb	r2, [r7, #6]
 8001154:	4619      	mov	r1, r3
 8001156:	4806      	ldr	r0, [pc, #24]	; (8001170 <LIB_OV5640_Init+0x68>)
 8001158:	f001 f954 	bl	8002404 <OV5640_Init>
 800115c:	4603      	mov	r3, r0
 800115e:	b25b      	sxtb	r3, r3
}
 8001160:	4618      	mov	r0, r3
 8001162:	3708      	adds	r7, #8
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	2000027c 	.word	0x2000027c
 800116c:	200001d0 	.word	0x200001d0
 8001170:	20000114 	.word	0x20000114
 8001174:	08001605 	.word	0x08001605
 8001178:	080015c5 	.word	0x080015c5
 800117c:	08001645 	.word	0x08001645

08001180 <LIB_OV5640_CaptureSnapshot>:
  * @param  img pointer to image object
  * @param  timeout max time allowed in ms to capture one shot
  * @retval 0 if successfully captured
  */
int8_t LIB_OV5640_CaptureSnapshot(IMAGE_HandleTypeDef * img, uint32_t timeout)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b086      	sub	sp, #24
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
 8001188:	6039      	str	r1, [r7, #0]
	int8_t status = OV5640_ERROR;
 800118a:	23ff      	movs	r3, #255	; 0xff
 800118c:	75fb      	strb	r3, [r7, #23]
	uint32_t currentFrameCount = ov5640FrameCount, currentTick;
 800118e:	4b15      	ldr	r3, [pc, #84]	; (80011e4 <LIB_OV5640_CaptureSnapshot+0x64>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	613b      	str	r3, [r7, #16]
	HAL_DCMI_Start_DMA(&__hdcmi, DCMI_MODE_CONTINUOUS, (uint32_t)img->pData, img->size);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	461a      	mov	r2, r3
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	68db      	ldr	r3, [r3, #12]
 800119e:	2100      	movs	r1, #0
 80011a0:	4811      	ldr	r0, [pc, #68]	; (80011e8 <LIB_OV5640_CaptureSnapshot+0x68>)
 80011a2:	f002 fb97 	bl	80038d4 <HAL_DCMI_Start_DMA>
	currentTick = HAL_GetTick();
 80011a6:	f002 f95d 	bl	8003464 <HAL_GetTick>
 80011aa:	60f8      	str	r0, [r7, #12]
	while((HAL_GetTick() - currentTick) < timeout)
 80011ac:	e008      	b.n	80011c0 <LIB_OV5640_CaptureSnapshot+0x40>
	{
		if ((ov5640FrameCount - currentFrameCount) > 4)
 80011ae:	4b0d      	ldr	r3, [pc, #52]	; (80011e4 <LIB_OV5640_CaptureSnapshot+0x64>)
 80011b0:	681a      	ldr	r2, [r3, #0]
 80011b2:	693b      	ldr	r3, [r7, #16]
 80011b4:	1ad3      	subs	r3, r2, r3
 80011b6:	2b04      	cmp	r3, #4
 80011b8:	d902      	bls.n	80011c0 <LIB_OV5640_CaptureSnapshot+0x40>
		{
			status = OV5640_OK;
 80011ba:	2300      	movs	r3, #0
 80011bc:	75fb      	strb	r3, [r7, #23]
			break;
 80011be:	e007      	b.n	80011d0 <LIB_OV5640_CaptureSnapshot+0x50>
	while((HAL_GetTick() - currentTick) < timeout)
 80011c0:	f002 f950 	bl	8003464 <HAL_GetTick>
 80011c4:	4602      	mov	r2, r0
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	1ad3      	subs	r3, r2, r3
 80011ca:	683a      	ldr	r2, [r7, #0]
 80011cc:	429a      	cmp	r2, r3
 80011ce:	d8ee      	bhi.n	80011ae <LIB_OV5640_CaptureSnapshot+0x2e>
		}
	}
	HAL_DCMI_Stop(&__hdcmi);
 80011d0:	4805      	ldr	r0, [pc, #20]	; (80011e8 <LIB_OV5640_CaptureSnapshot+0x68>)
 80011d2:	f002 fc2d 	bl	8003a30 <HAL_DCMI_Stop>
	return status;
 80011d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80011da:	4618      	mov	r0, r3
 80011dc:	3718      	adds	r7, #24
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	2000013c 	.word	0x2000013c
 80011e8:	2000027c 	.word	0x2000027c

080011ec <HAL_DCMI_FrameEventCallback>:
{
	return ov5640FrameCount;
}

void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *__hdcmi)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b083      	sub	sp, #12
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
	ov5640FrameCount++;
 80011f4:	4b05      	ldr	r3, [pc, #20]	; (800120c <HAL_DCMI_FrameEventCallback+0x20>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	3301      	adds	r3, #1
 80011fa:	4a04      	ldr	r2, [pc, #16]	; (800120c <HAL_DCMI_FrameEventCallback+0x20>)
 80011fc:	6013      	str	r3, [r2, #0]
}
 80011fe:	bf00      	nop
 8001200:	370c      	adds	r7, #12
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr
 800120a:	bf00      	nop
 800120c:	2000013c 	.word	0x2000013c

08001210 <LIB_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void LIB_DMA_Init(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001216:	4b0c      	ldr	r3, [pc, #48]	; (8001248 <LIB_DMA_Init+0x38>)
 8001218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121a:	4a0b      	ldr	r2, [pc, #44]	; (8001248 <LIB_DMA_Init+0x38>)
 800121c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001220:	6313      	str	r3, [r2, #48]	; 0x30
 8001222:	4b09      	ldr	r3, [pc, #36]	; (8001248 <LIB_DMA_Init+0x38>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001226:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800122a:	607b      	str	r3, [r7, #4]
 800122c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 15, 0);
 800122e:	2200      	movs	r2, #0
 8001230:	210f      	movs	r1, #15
 8001232:	2039      	movs	r0, #57	; 0x39
 8001234:	f002 fa21 	bl	800367a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001238:	2039      	movs	r0, #57	; 0x39
 800123a:	f002 fa3a 	bl	80036b2 <HAL_NVIC_EnableIRQ>

}
 800123e:	bf00      	nop
 8001240:	3708      	adds	r7, #8
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	40023800 	.word	0x40023800

0800124c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
    HAL_DMA_IRQHandler(&__hdma_dcmi);
 8001250:	4802      	ldr	r0, [pc, #8]	; (800125c <DMA2_Stream1_IRQHandler+0x10>)
 8001252:	f002 ffa3 	bl	800419c <HAL_DMA_IRQHandler>
}
 8001256:	bf00      	nop
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	2000021c 	.word	0x2000021c

08001260 <LIB_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static int8_t LIB_DCMI_Init(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
    __hdcmi.Instance = DCMI;
 8001264:	4b15      	ldr	r3, [pc, #84]	; (80012bc <LIB_DCMI_Init+0x5c>)
 8001266:	4a16      	ldr	r2, [pc, #88]	; (80012c0 <LIB_DCMI_Init+0x60>)
 8001268:	601a      	str	r2, [r3, #0]
    __hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 800126a:	4b14      	ldr	r3, [pc, #80]	; (80012bc <LIB_DCMI_Init+0x5c>)
 800126c:	2200      	movs	r2, #0
 800126e:	605a      	str	r2, [r3, #4]
    __hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_RISING;
 8001270:	4b12      	ldr	r3, [pc, #72]	; (80012bc <LIB_DCMI_Init+0x5c>)
 8001272:	2220      	movs	r2, #32
 8001274:	609a      	str	r2, [r3, #8]
    __hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_HIGH;
 8001276:	4b11      	ldr	r3, [pc, #68]	; (80012bc <LIB_DCMI_Init+0x5c>)
 8001278:	2280      	movs	r2, #128	; 0x80
 800127a:	60da      	str	r2, [r3, #12]
    __hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_HIGH;
 800127c:	4b0f      	ldr	r3, [pc, #60]	; (80012bc <LIB_DCMI_Init+0x5c>)
 800127e:	2240      	movs	r2, #64	; 0x40
 8001280:	611a      	str	r2, [r3, #16]
    __hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8001282:	4b0e      	ldr	r3, [pc, #56]	; (80012bc <LIB_DCMI_Init+0x5c>)
 8001284:	2200      	movs	r2, #0
 8001286:	615a      	str	r2, [r3, #20]
    __hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8001288:	4b0c      	ldr	r3, [pc, #48]	; (80012bc <LIB_DCMI_Init+0x5c>)
 800128a:	2200      	movs	r2, #0
 800128c:	619a      	str	r2, [r3, #24]
    __hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 800128e:	4b0b      	ldr	r3, [pc, #44]	; (80012bc <LIB_DCMI_Init+0x5c>)
 8001290:	2200      	movs	r2, #0
 8001292:	621a      	str	r2, [r3, #32]
    __hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8001294:	4b09      	ldr	r3, [pc, #36]	; (80012bc <LIB_DCMI_Init+0x5c>)
 8001296:	2200      	movs	r2, #0
 8001298:	625a      	str	r2, [r3, #36]	; 0x24
    __hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 800129a:	4b08      	ldr	r3, [pc, #32]	; (80012bc <LIB_DCMI_Init+0x5c>)
 800129c:	2200      	movs	r2, #0
 800129e:	629a      	str	r2, [r3, #40]	; 0x28
    __hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 80012a0:	4b06      	ldr	r3, [pc, #24]	; (80012bc <LIB_DCMI_Init+0x5c>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	62da      	str	r2, [r3, #44]	; 0x2c
    __hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 80012a6:	4b05      	ldr	r3, [pc, #20]	; (80012bc <LIB_DCMI_Init+0x5c>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	631a      	str	r2, [r3, #48]	; 0x30
    return HAL_DCMI_Init(&__hdcmi);
 80012ac:	4803      	ldr	r0, [pc, #12]	; (80012bc <LIB_DCMI_Init+0x5c>)
 80012ae:	f002 fa97 	bl	80037e0 <HAL_DCMI_Init>
 80012b2:	4603      	mov	r3, r0
 80012b4:	b25b      	sxtb	r3, r3
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	2000027c 	.word	0x2000027c
 80012c0:	50050000 	.word	0x50050000

080012c4 <LIB_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param __hdcmi: DCMI handle pointer
* @retval None
*/
static void LIB_DCMI_MspInit(DCMI_HandleTypeDef* __hdcmi)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b08e      	sub	sp, #56	; 0x38
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012d0:	2200      	movs	r2, #0
 80012d2:	601a      	str	r2, [r3, #0]
 80012d4:	605a      	str	r2, [r3, #4]
 80012d6:	609a      	str	r2, [r3, #8]
 80012d8:	60da      	str	r2, [r3, #12]
 80012da:	611a      	str	r2, [r3, #16]
	/* Peripheral clock enable */
	__HAL_RCC_DCMI_CLK_ENABLE();
 80012dc:	4b6b      	ldr	r3, [pc, #428]	; (800148c <LIB_DCMI_MspInit+0x1c8>)
 80012de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012e0:	4a6a      	ldr	r2, [pc, #424]	; (800148c <LIB_DCMI_MspInit+0x1c8>)
 80012e2:	f043 0301 	orr.w	r3, r3, #1
 80012e6:	6353      	str	r3, [r2, #52]	; 0x34
 80012e8:	4b68      	ldr	r3, [pc, #416]	; (800148c <LIB_DCMI_MspInit+0x1c8>)
 80012ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012ec:	f003 0301 	and.w	r3, r3, #1
 80012f0:	623b      	str	r3, [r7, #32]
 80012f2:	6a3b      	ldr	r3, [r7, #32]

	__HAL_RCC_GPIOE_CLK_ENABLE();
 80012f4:	4b65      	ldr	r3, [pc, #404]	; (800148c <LIB_DCMI_MspInit+0x1c8>)
 80012f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f8:	4a64      	ldr	r2, [pc, #400]	; (800148c <LIB_DCMI_MspInit+0x1c8>)
 80012fa:	f043 0310 	orr.w	r3, r3, #16
 80012fe:	6313      	str	r3, [r2, #48]	; 0x30
 8001300:	4b62      	ldr	r3, [pc, #392]	; (800148c <LIB_DCMI_MspInit+0x1c8>)
 8001302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001304:	f003 0310 	and.w	r3, r3, #16
 8001308:	61fb      	str	r3, [r7, #28]
 800130a:	69fb      	ldr	r3, [r7, #28]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800130c:	4b5f      	ldr	r3, [pc, #380]	; (800148c <LIB_DCMI_MspInit+0x1c8>)
 800130e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001310:	4a5e      	ldr	r2, [pc, #376]	; (800148c <LIB_DCMI_MspInit+0x1c8>)
 8001312:	f043 0308 	orr.w	r3, r3, #8
 8001316:	6313      	str	r3, [r2, #48]	; 0x30
 8001318:	4b5c      	ldr	r3, [pc, #368]	; (800148c <LIB_DCMI_MspInit+0x1c8>)
 800131a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131c:	f003 0308 	and.w	r3, r3, #8
 8001320:	61bb      	str	r3, [r7, #24]
 8001322:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8001324:	4b59      	ldr	r3, [pc, #356]	; (800148c <LIB_DCMI_MspInit+0x1c8>)
 8001326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001328:	4a58      	ldr	r2, [pc, #352]	; (800148c <LIB_DCMI_MspInit+0x1c8>)
 800132a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800132e:	6313      	str	r3, [r2, #48]	; 0x30
 8001330:	4b56      	ldr	r3, [pc, #344]	; (800148c <LIB_DCMI_MspInit+0x1c8>)
 8001332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001334:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001338:	617b      	str	r3, [r7, #20]
 800133a:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800133c:	4b53      	ldr	r3, [pc, #332]	; (800148c <LIB_DCMI_MspInit+0x1c8>)
 800133e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001340:	4a52      	ldr	r2, [pc, #328]	; (800148c <LIB_DCMI_MspInit+0x1c8>)
 8001342:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001346:	6313      	str	r3, [r2, #48]	; 0x30
 8001348:	4b50      	ldr	r3, [pc, #320]	; (800148c <LIB_DCMI_MspInit+0x1c8>)
 800134a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001350:	613b      	str	r3, [r7, #16]
 8001352:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001354:	4b4d      	ldr	r3, [pc, #308]	; (800148c <LIB_DCMI_MspInit+0x1c8>)
 8001356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001358:	4a4c      	ldr	r2, [pc, #304]	; (800148c <LIB_DCMI_MspInit+0x1c8>)
 800135a:	f043 0301 	orr.w	r3, r3, #1
 800135e:	6313      	str	r3, [r2, #48]	; 0x30
 8001360:	4b4a      	ldr	r3, [pc, #296]	; (800148c <LIB_DCMI_MspInit+0x1c8>)
 8001362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001364:	f003 0301 	and.w	r3, r3, #1
 8001368:	60fb      	str	r3, [r7, #12]
 800136a:	68fb      	ldr	r3, [r7, #12]

	GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 800136c:	2360      	movs	r3, #96	; 0x60
 800136e:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001370:	2302      	movs	r3, #2
 8001372:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001374:	2300      	movs	r3, #0
 8001376:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001378:	2300      	movs	r3, #0
 800137a:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800137c:	230d      	movs	r3, #13
 800137e:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001380:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001384:	4619      	mov	r1, r3
 8001386:	4842      	ldr	r0, [pc, #264]	; (8001490 <LIB_DCMI_MspInit+0x1cc>)
 8001388:	f004 fae8 	bl	800595c <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = DCMI_D5_Pin;
 800138c:	2308      	movs	r3, #8
 800138e:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001390:	2302      	movs	r3, #2
 8001392:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001394:	2300      	movs	r3, #0
 8001396:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001398:	2300      	movs	r3, #0
 800139a:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800139c:	230d      	movs	r3, #13
 800139e:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 80013a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013a4:	4619      	mov	r1, r3
 80013a6:	483b      	ldr	r0, [pc, #236]	; (8001494 <LIB_DCMI_MspInit+0x1d0>)
 80013a8:	f004 fad8 	bl	800595c <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 80013ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013b0:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013b2:	2302      	movs	r3, #2
 80013b4:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b6:	2300      	movs	r3, #0
 80013b8:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ba:	2300      	movs	r3, #0
 80013bc:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80013be:	230d      	movs	r3, #13
 80013c0:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 80013c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013c6:	4619      	mov	r1, r3
 80013c8:	4833      	ldr	r0, [pc, #204]	; (8001498 <LIB_DCMI_MspInit+0x1d4>)
 80013ca:	f004 fac7 	bl	800595c <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 80013ce:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 80013d2:	627b      	str	r3, [r7, #36]	; 0x24
							|DCMI_D1_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d4:	2302      	movs	r3, #2
 80013d6:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d8:	2300      	movs	r3, #0
 80013da:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013dc:	2300      	movs	r3, #0
 80013de:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80013e0:	230d      	movs	r3, #13
 80013e2:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80013e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013e8:	4619      	mov	r1, r3
 80013ea:	482c      	ldr	r0, [pc, #176]	; (800149c <LIB_DCMI_MspInit+0x1d8>)
 80013ec:	f004 fab6 	bl	800595c <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 80013f0:	2350      	movs	r3, #80	; 0x50
 80013f2:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f4:	2302      	movs	r3, #2
 80013f6:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f8:	2300      	movs	r3, #0
 80013fa:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013fc:	2300      	movs	r3, #0
 80013fe:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001400:	230d      	movs	r3, #13
 8001402:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001404:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001408:	4619      	mov	r1, r3
 800140a:	4825      	ldr	r0, [pc, #148]	; (80014a0 <LIB_DCMI_MspInit+0x1dc>)
 800140c:	f004 faa6 	bl	800595c <HAL_GPIO_Init>

	/* DCMI DMA Init */
	/* DCMI Init */
	__hdma_dcmi.Instance = DMA2_Stream1;
 8001410:	4b24      	ldr	r3, [pc, #144]	; (80014a4 <LIB_DCMI_MspInit+0x1e0>)
 8001412:	4a25      	ldr	r2, [pc, #148]	; (80014a8 <LIB_DCMI_MspInit+0x1e4>)
 8001414:	601a      	str	r2, [r3, #0]
	__hdma_dcmi.Init.Channel = DMA_CHANNEL_1;
 8001416:	4b23      	ldr	r3, [pc, #140]	; (80014a4 <LIB_DCMI_MspInit+0x1e0>)
 8001418:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800141c:	605a      	str	r2, [r3, #4]
	__hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800141e:	4b21      	ldr	r3, [pc, #132]	; (80014a4 <LIB_DCMI_MspInit+0x1e0>)
 8001420:	2200      	movs	r2, #0
 8001422:	609a      	str	r2, [r3, #8]
	__hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 8001424:	4b1f      	ldr	r3, [pc, #124]	; (80014a4 <LIB_DCMI_MspInit+0x1e0>)
 8001426:	2200      	movs	r2, #0
 8001428:	60da      	str	r2, [r3, #12]
	__hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 800142a:	4b1e      	ldr	r3, [pc, #120]	; (80014a4 <LIB_DCMI_MspInit+0x1e0>)
 800142c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001430:	611a      	str	r2, [r3, #16]
	__hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001432:	4b1c      	ldr	r3, [pc, #112]	; (80014a4 <LIB_DCMI_MspInit+0x1e0>)
 8001434:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001438:	615a      	str	r2, [r3, #20]
	__hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800143a:	4b1a      	ldr	r3, [pc, #104]	; (80014a4 <LIB_DCMI_MspInit+0x1e0>)
 800143c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001440:	619a      	str	r2, [r3, #24]
	__hdma_dcmi.Init.Mode = DMA_CIRCULAR;
 8001442:	4b18      	ldr	r3, [pc, #96]	; (80014a4 <LIB_DCMI_MspInit+0x1e0>)
 8001444:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001448:	61da      	str	r2, [r3, #28]
	__hdma_dcmi.Init.Priority = DMA_PRIORITY_HIGH;
 800144a:	4b16      	ldr	r3, [pc, #88]	; (80014a4 <LIB_DCMI_MspInit+0x1e0>)
 800144c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001450:	621a      	str	r2, [r3, #32]
	__hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001452:	4b14      	ldr	r3, [pc, #80]	; (80014a4 <LIB_DCMI_MspInit+0x1e0>)
 8001454:	2200      	movs	r2, #0
 8001456:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_DMA_Init(&__hdma_dcmi) != HAL_OK)
 8001458:	4812      	ldr	r0, [pc, #72]	; (80014a4 <LIB_DCMI_MspInit+0x1e0>)
 800145a:	f002 fca1 	bl	8003da0 <HAL_DMA_Init>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d10e      	bne.n	8001482 <LIB_DCMI_MspInit+0x1be>
	{
		return;
	}

	__HAL_LINKDMA(__hdcmi,DMA_Handle,__hdma_dcmi);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	4a0f      	ldr	r2, [pc, #60]	; (80014a4 <LIB_DCMI_MspInit+0x1e0>)
 8001468:	649a      	str	r2, [r3, #72]	; 0x48
 800146a:	4a0e      	ldr	r2, [pc, #56]	; (80014a4 <LIB_DCMI_MspInit+0x1e0>)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6393      	str	r3, [r2, #56]	; 0x38

	/* DCMI interrupt Init */
	HAL_NVIC_SetPriority(DCMI_IRQn, 15, 0);
 8001470:	2200      	movs	r2, #0
 8001472:	210f      	movs	r1, #15
 8001474:	204e      	movs	r0, #78	; 0x4e
 8001476:	f002 f900 	bl	800367a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DCMI_IRQn);
 800147a:	204e      	movs	r0, #78	; 0x4e
 800147c:	f002 f919 	bl	80036b2 <HAL_NVIC_EnableIRQ>
 8001480:	e000      	b.n	8001484 <LIB_DCMI_MspInit+0x1c0>
		return;
 8001482:	bf00      	nop

}
 8001484:	3738      	adds	r7, #56	; 0x38
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	40023800 	.word	0x40023800
 8001490:	40021000 	.word	0x40021000
 8001494:	40020c00 	.word	0x40020c00
 8001498:	40021800 	.word	0x40021800
 800149c:	40021c00 	.word	0x40021c00
 80014a0:	40020000 	.word	0x40020000
 80014a4:	2000021c 	.word	0x2000021c
 80014a8:	40026428 	.word	0x40026428

080014ac <LIB_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static int8_t LIB_I2C1_Init(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0
	hi2c1.Instance = I2C1;
 80014b0:	4b10      	ldr	r3, [pc, #64]	; (80014f4 <LIB_I2C1_Init+0x48>)
 80014b2:	4a11      	ldr	r2, [pc, #68]	; (80014f8 <LIB_I2C1_Init+0x4c>)
 80014b4:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x00A0A3F7;
 80014b6:	4b0f      	ldr	r3, [pc, #60]	; (80014f4 <LIB_I2C1_Init+0x48>)
 80014b8:	4a10      	ldr	r2, [pc, #64]	; (80014fc <LIB_I2C1_Init+0x50>)
 80014ba:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 80014bc:	4b0d      	ldr	r3, [pc, #52]	; (80014f4 <LIB_I2C1_Init+0x48>)
 80014be:	2200      	movs	r2, #0
 80014c0:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014c2:	4b0c      	ldr	r3, [pc, #48]	; (80014f4 <LIB_I2C1_Init+0x48>)
 80014c4:	2201      	movs	r2, #1
 80014c6:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014c8:	4b0a      	ldr	r3, [pc, #40]	; (80014f4 <LIB_I2C1_Init+0x48>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 80014ce:	4b09      	ldr	r3, [pc, #36]	; (80014f4 <LIB_I2C1_Init+0x48>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80014d4:	4b07      	ldr	r3, [pc, #28]	; (80014f4 <LIB_I2C1_Init+0x48>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014da:	4b06      	ldr	r3, [pc, #24]	; (80014f4 <LIB_I2C1_Init+0x48>)
 80014dc:	2200      	movs	r2, #0
 80014de:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014e0:	4b04      	ldr	r3, [pc, #16]	; (80014f4 <LIB_I2C1_Init+0x48>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	621a      	str	r2, [r3, #32]
	return HAL_I2C_Init(&hi2c1);
 80014e6:	4803      	ldr	r0, [pc, #12]	; (80014f4 <LIB_I2C1_Init+0x48>)
 80014e8:	f004 fbfe 	bl	8005ce8 <HAL_I2C_Init>
 80014ec:	4603      	mov	r3, r0
 80014ee:	b25b      	sxtb	r3, r3
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	200001d0 	.word	0x200001d0
 80014f8:	40005400 	.word	0x40005400
 80014fc:	00a0a3f7 	.word	0x00a0a3f7

08001500 <LIB_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
static void LIB_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b0aa      	sub	sp, #168	; 0xa8
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001508:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800150c:	2200      	movs	r2, #0
 800150e:	601a      	str	r2, [r3, #0]
 8001510:	605a      	str	r2, [r3, #4]
 8001512:	609a      	str	r2, [r3, #8]
 8001514:	60da      	str	r2, [r3, #12]
 8001516:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001518:	f107 0310 	add.w	r3, r7, #16
 800151c:	2284      	movs	r2, #132	; 0x84
 800151e:	2100      	movs	r1, #0
 8001520:	4618      	mov	r0, r3
 8001522:	f007 f853 	bl	80085cc <memset>
	/** Initializes the peripherals clock
	*/
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001526:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800152a:	613b      	str	r3, [r7, #16]
	PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800152c:	2300      	movs	r3, #0
 800152e:	677b      	str	r3, [r7, #116]	; 0x74
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001530:	f107 0310 	add.w	r3, r7, #16
 8001534:	4618      	mov	r0, r3
 8001536:	f005 fdbf 	bl	80070b8 <HAL_RCCEx_PeriphCLKConfig>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d12e      	bne.n	800159e <LIB_I2C_MspInit+0x9e>
	{
	  return;
	}

	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001540:	4b19      	ldr	r3, [pc, #100]	; (80015a8 <LIB_I2C_MspInit+0xa8>)
 8001542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001544:	4a18      	ldr	r2, [pc, #96]	; (80015a8 <LIB_I2C_MspInit+0xa8>)
 8001546:	f043 0302 	orr.w	r3, r3, #2
 800154a:	6313      	str	r3, [r2, #48]	; 0x30
 800154c:	4b16      	ldr	r3, [pc, #88]	; (80015a8 <LIB_I2C_MspInit+0xa8>)
 800154e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001550:	f003 0302 	and.w	r3, r3, #2
 8001554:	60fb      	str	r3, [r7, #12]
 8001556:	68fb      	ldr	r3, [r7, #12]
	/**I2C1 GPIO Configuration
	PB8     ------> I2C1_SCL
	PB9     ------> I2C1_SDA
	*/
	GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001558:	f44f 7340 	mov.w	r3, #768	; 0x300
 800155c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001560:	2312      	movs	r3, #18
 8001562:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001566:	2300      	movs	r3, #0
 8001568:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800156c:	2300      	movs	r3, #0
 800156e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001572:	2304      	movs	r3, #4
 8001574:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001578:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800157c:	4619      	mov	r1, r3
 800157e:	480b      	ldr	r0, [pc, #44]	; (80015ac <LIB_I2C_MspInit+0xac>)
 8001580:	f004 f9ec 	bl	800595c <HAL_GPIO_Init>

	/* Peripheral clock enable */
	__HAL_RCC_I2C1_CLK_ENABLE();
 8001584:	4b08      	ldr	r3, [pc, #32]	; (80015a8 <LIB_I2C_MspInit+0xa8>)
 8001586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001588:	4a07      	ldr	r2, [pc, #28]	; (80015a8 <LIB_I2C_MspInit+0xa8>)
 800158a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800158e:	6413      	str	r3, [r2, #64]	; 0x40
 8001590:	4b05      	ldr	r3, [pc, #20]	; (80015a8 <LIB_I2C_MspInit+0xa8>)
 8001592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001594:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001598:	60bb      	str	r3, [r7, #8]
 800159a:	68bb      	ldr	r3, [r7, #8]
 800159c:	e000      	b.n	80015a0 <LIB_I2C_MspInit+0xa0>
	  return;
 800159e:	bf00      	nop

}
 80015a0:	37a8      	adds	r7, #168	; 0xa8
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	40023800 	.word	0x40023800
 80015ac:	40020400 	.word	0x40020400

080015b0 <DCMI_IRQHandler>:

/**
  * @brief This function handles DCMI global interrupt.
  */
void DCMI_IRQHandler(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0
    HAL_DCMI_IRQHandler(&__hdcmi);
 80015b4:	4802      	ldr	r0, [pc, #8]	; (80015c0 <DCMI_IRQHandler+0x10>)
 80015b6:	f002 fa99 	bl	8003aec <HAL_DCMI_IRQHandler>
}
 80015ba:	bf00      	nop
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	2000027c 	.word	0x2000027c

080015c4 <__OV5640_ReadReg_Func>:
/**
  * @brief  reads OV5640 registers.
  * @retval 0 if successfully read.
  */
static int32_t __OV5640_ReadReg_Func(uint16_t devAddr, uint16_t Reg, uint8_t* pData, uint16_t Length)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b088      	sub	sp, #32
 80015c8:	af04      	add	r7, sp, #16
 80015ca:	60ba      	str	r2, [r7, #8]
 80015cc:	461a      	mov	r2, r3
 80015ce:	4603      	mov	r3, r0
 80015d0:	81fb      	strh	r3, [r7, #14]
 80015d2:	460b      	mov	r3, r1
 80015d4:	81bb      	strh	r3, [r7, #12]
 80015d6:	4613      	mov	r3, r2
 80015d8:	80fb      	strh	r3, [r7, #6]
	return HAL_I2C_Mem_Read(&hi2c1, devAddr , Reg, I2C_MEMADD_SIZE_16BIT, pData, Length, 1000);
 80015da:	89ba      	ldrh	r2, [r7, #12]
 80015dc:	89f9      	ldrh	r1, [r7, #14]
 80015de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015e2:	9302      	str	r3, [sp, #8]
 80015e4:	88fb      	ldrh	r3, [r7, #6]
 80015e6:	9301      	str	r3, [sp, #4]
 80015e8:	68bb      	ldr	r3, [r7, #8]
 80015ea:	9300      	str	r3, [sp, #0]
 80015ec:	2302      	movs	r3, #2
 80015ee:	4804      	ldr	r0, [pc, #16]	; (8001600 <__OV5640_ReadReg_Func+0x3c>)
 80015f0:	f004 fd28 	bl	8006044 <HAL_I2C_Mem_Read>
 80015f4:	4603      	mov	r3, r0
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	3710      	adds	r7, #16
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	200001d0 	.word	0x200001d0

08001604 <__OV5640_WriteReg_Func>:
/**
  * @brief  writes to OV5640 registers.
  * @retval 0 if successfully written.
  */
static int32_t __OV5640_WriteReg_Func(uint16_t devAddr, uint16_t Reg, uint8_t* pData, uint16_t Length)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b088      	sub	sp, #32
 8001608:	af04      	add	r7, sp, #16
 800160a:	60ba      	str	r2, [r7, #8]
 800160c:	461a      	mov	r2, r3
 800160e:	4603      	mov	r3, r0
 8001610:	81fb      	strh	r3, [r7, #14]
 8001612:	460b      	mov	r3, r1
 8001614:	81bb      	strh	r3, [r7, #12]
 8001616:	4613      	mov	r3, r2
 8001618:	80fb      	strh	r3, [r7, #6]
	return HAL_I2C_Mem_Write(&hi2c1, devAddr, Reg, I2C_MEMADD_SIZE_16BIT, pData, Length, 1000);
 800161a:	89ba      	ldrh	r2, [r7, #12]
 800161c:	89f9      	ldrh	r1, [r7, #14]
 800161e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001622:	9302      	str	r3, [sp, #8]
 8001624:	88fb      	ldrh	r3, [r7, #6]
 8001626:	9301      	str	r3, [sp, #4]
 8001628:	68bb      	ldr	r3, [r7, #8]
 800162a:	9300      	str	r3, [sp, #0]
 800162c:	2302      	movs	r3, #2
 800162e:	4804      	ldr	r0, [pc, #16]	; (8001640 <__OV5640_WriteReg_Func+0x3c>)
 8001630:	f004 fbf4 	bl	8005e1c <HAL_I2C_Mem_Write>
 8001634:	4603      	mov	r3, r0
}
 8001636:	4618      	mov	r0, r3
 8001638:	3710      	adds	r7, #16
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	200001d0 	.word	0x200001d0

08001644 <__OV5640_GetTick_Func>:
/**
  * @brief  returns the current tick value.
  * @retval the current tick value.
  */
static int32_t __OV5640_GetTick_Func(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
	return (int32_t)HAL_GetTick();
 8001648:	f001 ff0c 	bl	8003464 <HAL_GetTick>
 800164c:	4603      	mov	r3, r0
}
 800164e:	4618      	mov	r0, r3
 8001650:	bd80      	pop	{r7, pc}
	...

08001654 <LIB_SERIAL_IMG_Transmit>:
  * @brief Transmits an image with its required information
  * @param img Pointer to image structure
  * @retval 0 if successfully transmitted
  */
int8_t LIB_SERIAL_IMG_Transmit(IMAGE_HandleTypeDef * img)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b088      	sub	sp, #32
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
	uint8_t __header[3] = "STW", __count = 0;
 800165c:	4a34      	ldr	r2, [pc, #208]	; (8001730 <LIB_SERIAL_IMG_Transmit+0xdc>)
 800165e:	f107 030c 	add.w	r3, r7, #12
 8001662:	6812      	ldr	r2, [r2, #0]
 8001664:	4611      	mov	r1, r2
 8001666:	8019      	strh	r1, [r3, #0]
 8001668:	3302      	adds	r3, #2
 800166a:	0c12      	lsrs	r2, r2, #16
 800166c:	701a      	strb	r2, [r3, #0]
 800166e:	2300      	movs	r3, #0
 8001670:	77fb      	strb	r3, [r7, #31]
	uint16_t __quotient = 0, __remainder = 0;
 8001672:	2300      	movs	r3, #0
 8001674:	82fb      	strh	r3, [r7, #22]
 8001676:	2300      	movs	r3, #0
 8001678:	82bb      	strh	r3, [r7, #20]
	uint16_t divisor = UINT16_MAX;
 800167a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800167e:	827b      	strh	r3, [r7, #18]
	uint8_t * __pData = img->pData;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	61bb      	str	r3, [r7, #24]

	__quotient 	= img->size / divisor;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	68da      	ldr	r2, [r3, #12]
 800168a:	8a7b      	ldrh	r3, [r7, #18]
 800168c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001690:	82fb      	strh	r3, [r7, #22]
	__remainder = img->size % divisor;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	68db      	ldr	r3, [r3, #12]
 8001696:	8a7a      	ldrh	r2, [r7, #18]
 8001698:	fbb3 f1f2 	udiv	r1, r3, r2
 800169c:	fb02 f201 	mul.w	r2, r2, r1
 80016a0:	1a9b      	subs	r3, r3, r2
 80016a2:	82bb      	strh	r3, [r7, #20]

	HAL_UART_Transmit(&__huart, __header, 3, 10);
 80016a4:	f107 010c 	add.w	r1, r7, #12
 80016a8:	230a      	movs	r3, #10
 80016aa:	2203      	movs	r2, #3
 80016ac:	4821      	ldr	r0, [pc, #132]	; (8001734 <LIB_SERIAL_IMG_Transmit+0xe0>)
 80016ae:	f006 f9d2 	bl	8007a56 <HAL_UART_Transmit>
	HAL_UART_Transmit(&__huart, (uint8_t*)&img->height, 2, 10);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	1d99      	adds	r1, r3, #6
 80016b6:	230a      	movs	r3, #10
 80016b8:	2202      	movs	r2, #2
 80016ba:	481e      	ldr	r0, [pc, #120]	; (8001734 <LIB_SERIAL_IMG_Transmit+0xe0>)
 80016bc:	f006 f9cb 	bl	8007a56 <HAL_UART_Transmit>
	HAL_UART_Transmit(&__huart, (uint8_t*)&img->width,  2, 10);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	1d19      	adds	r1, r3, #4
 80016c4:	230a      	movs	r3, #10
 80016c6:	2202      	movs	r2, #2
 80016c8:	481a      	ldr	r0, [pc, #104]	; (8001734 <LIB_SERIAL_IMG_Transmit+0xe0>)
 80016ca:	f006 f9c4 	bl	8007a56 <HAL_UART_Transmit>
	HAL_UART_Transmit(&__huart, (uint8_t*)&img->format, 1, 10);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	f103 0108 	add.w	r1, r3, #8
 80016d4:	230a      	movs	r3, #10
 80016d6:	2201      	movs	r2, #1
 80016d8:	4816      	ldr	r0, [pc, #88]	; (8001734 <LIB_SERIAL_IMG_Transmit+0xe0>)
 80016da:	f006 f9bc 	bl	8007a56 <HAL_UART_Transmit>
	while(__count < __quotient)
 80016de:	e00f      	b.n	8001700 <LIB_SERIAL_IMG_Transmit+0xac>
	{
		HAL_UART_Transmit(&__huart, __pData, UINT16_MAX, 1000);
 80016e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016e8:	69b9      	ldr	r1, [r7, #24]
 80016ea:	4812      	ldr	r0, [pc, #72]	; (8001734 <LIB_SERIAL_IMG_Transmit+0xe0>)
 80016ec:	f006 f9b3 	bl	8007a56 <HAL_UART_Transmit>
		__count++;
 80016f0:	7ffb      	ldrb	r3, [r7, #31]
 80016f2:	3301      	adds	r3, #1
 80016f4:	77fb      	strb	r3, [r7, #31]
		__pData += UINT16_MAX;
 80016f6:	69ba      	ldr	r2, [r7, #24]
 80016f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80016fc:	4413      	add	r3, r2
 80016fe:	61bb      	str	r3, [r7, #24]
	while(__count < __quotient)
 8001700:	7ffb      	ldrb	r3, [r7, #31]
 8001702:	b29b      	uxth	r3, r3
 8001704:	8afa      	ldrh	r2, [r7, #22]
 8001706:	429a      	cmp	r2, r3
 8001708:	d8ea      	bhi.n	80016e0 <LIB_SERIAL_IMG_Transmit+0x8c>
	}
	if (__remainder)
 800170a:	8abb      	ldrh	r3, [r7, #20]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d006      	beq.n	800171e <LIB_SERIAL_IMG_Transmit+0xca>
	{
		HAL_UART_Transmit(&__huart, __pData, __remainder, 1000);
 8001710:	8aba      	ldrh	r2, [r7, #20]
 8001712:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001716:	69b9      	ldr	r1, [r7, #24]
 8001718:	4806      	ldr	r0, [pc, #24]	; (8001734 <LIB_SERIAL_IMG_Transmit+0xe0>)
 800171a:	f006 f99c 	bl	8007a56 <HAL_UART_Transmit>
	}
	HAL_Delay(1);
 800171e:	2001      	movs	r0, #1
 8001720:	f001 feac 	bl	800347c <HAL_Delay>
	return SERIAL_OK;
 8001724:	2300      	movs	r3, #0
}
 8001726:	4618      	mov	r0, r3
 8001728:	3720      	adds	r7, #32
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	080087c4 	.word	0x080087c4
 8001734:	2000031c 	.word	0x2000031c

08001738 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800173c:	f3bf 8f4f 	dsb	sy
}
 8001740:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001742:	f3bf 8f6f 	isb	sy
}
 8001746:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001748:	4b0d      	ldr	r3, [pc, #52]	; (8001780 <SCB_EnableICache+0x48>)
 800174a:	2200      	movs	r2, #0
 800174c:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001750:	f3bf 8f4f 	dsb	sy
}
 8001754:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001756:	f3bf 8f6f 	isb	sy
}
 800175a:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800175c:	4b08      	ldr	r3, [pc, #32]	; (8001780 <SCB_EnableICache+0x48>)
 800175e:	695b      	ldr	r3, [r3, #20]
 8001760:	4a07      	ldr	r2, [pc, #28]	; (8001780 <SCB_EnableICache+0x48>)
 8001762:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001766:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001768:	f3bf 8f4f 	dsb	sy
}
 800176c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800176e:	f3bf 8f6f 	isb	sy
}
 8001772:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8001774:	bf00      	nop
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr
 800177e:	bf00      	nop
 8001780:	e000ed00 	.word	0xe000ed00

08001784 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8001784:	b480      	push	{r7}
 8001786:	b085      	sub	sp, #20
 8001788:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800178a:	4b1f      	ldr	r3, [pc, #124]	; (8001808 <SCB_EnableDCache+0x84>)
 800178c:	2200      	movs	r2, #0
 800178e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001792:	f3bf 8f4f 	dsb	sy
}
 8001796:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001798:	4b1b      	ldr	r3, [pc, #108]	; (8001808 <SCB_EnableDCache+0x84>)
 800179a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800179e:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	0b5b      	lsrs	r3, r3, #13
 80017a4:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80017a8:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	08db      	lsrs	r3, r3, #3
 80017ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80017b2:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	015a      	lsls	r2, r3, #5
 80017b8:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80017bc:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80017be:	68ba      	ldr	r2, [r7, #8]
 80017c0:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80017c2:	4911      	ldr	r1, [pc, #68]	; (8001808 <SCB_EnableDCache+0x84>)
 80017c4:	4313      	orrs	r3, r2
 80017c6:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80017ca:	68bb      	ldr	r3, [r7, #8]
 80017cc:	1e5a      	subs	r2, r3, #1
 80017ce:	60ba      	str	r2, [r7, #8]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d1ef      	bne.n	80017b4 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	1e5a      	subs	r2, r3, #1
 80017d8:	60fa      	str	r2, [r7, #12]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d1e5      	bne.n	80017aa <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 80017de:	f3bf 8f4f 	dsb	sy
}
 80017e2:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80017e4:	4b08      	ldr	r3, [pc, #32]	; (8001808 <SCB_EnableDCache+0x84>)
 80017e6:	695b      	ldr	r3, [r3, #20]
 80017e8:	4a07      	ldr	r2, [pc, #28]	; (8001808 <SCB_EnableDCache+0x84>)
 80017ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017ee:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80017f0:	f3bf 8f4f 	dsb	sy
}
 80017f4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80017f6:	f3bf 8f6f 	isb	sy
}
 80017fa:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 80017fc:	bf00      	nop
 80017fe:	3714      	adds	r7, #20
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr
 8001808:	e000ed00 	.word	0xe000ed00

0800180c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b08a      	sub	sp, #40	; 0x28
 8001810:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8001812:	f7ff ff91 	bl	8001738 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8001816:	f7ff ffb5 	bl	8001784 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800181a:	f001 fdd1 	bl	80033c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800181e:	f000 f8d7 	bl	80019d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001822:	f000 f9ef 	bl	8001c04 <MX_GPIO_Init>
  MX_DCMI_Init();
 8001826:	f000 f93b 	bl	8001aa0 <MX_DCMI_Init>
  MX_FMC_Init();
 800182a:	f000 f99d 	bl	8001b68 <MX_FMC_Init>
  MX_USART1_UART_Init();
 800182e:	f000 f96b 	bl	8001b08 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  LIB_MPU_Init();
 8001832:	f7ff fc3c 	bl	80010ae <LIB_MPU_Init>
  LIB_IMAGE_InitStruct(&img, (uint8_t*)pImage, IMAGE_RESOLUTION_QVGA_HEIGHT, IMAGE_RESOLUTION_QVGA_WIDTH, IMAGE_FORMAT_RGB888);
 8001836:	2303      	movs	r3, #3
 8001838:	9300      	str	r3, [sp, #0]
 800183a:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800183e:	22f0      	movs	r2, #240	; 0xf0
 8001840:	495e      	ldr	r1, [pc, #376]	; (80019bc <main+0x1b0>)
 8001842:	485f      	ldr	r0, [pc, #380]	; (80019c0 <main+0x1b4>)
 8001844:	f7ff fbea 	bl	800101c <LIB_IMAGE_InitStruct>
  LIB_IMAGE_InitStruct(&img_q, (uint8_t*)pImageQuantized, IMAGE_RESOLUTION_QVGA_HEIGHT, IMAGE_RESOLUTION_QVGA_WIDTH, IMAGE_FORMAT_RGB888);
 8001848:	2303      	movs	r3, #3
 800184a:	9300      	str	r3, [sp, #0]
 800184c:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001850:	22f0      	movs	r2, #240	; 0xf0
 8001852:	495c      	ldr	r1, [pc, #368]	; (80019c4 <main+0x1b8>)
 8001854:	485c      	ldr	r0, [pc, #368]	; (80019c8 <main+0x1bc>)
 8001856:	f7ff fbe1 	bl	800101c <LIB_IMAGE_InitStruct>
  BSP_SDRAM_Init();
 800185a:	f001 fbfb 	bl	8003054 <BSP_SDRAM_Init>
  LIB_OV5640_Init(OV5640_RESOLUTION_R320x240, OV5640_FORMAT_RGB888);
 800185e:	2101      	movs	r1, #1
 8001860:	2001      	movs	r0, #1
 8001862:	f7ff fc51 	bl	8001108 <LIB_OV5640_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	if (!LIB_OV5640_CaptureSnapshot(&img, 5000))
 8001866:	f241 3188 	movw	r1, #5000	; 0x1388
 800186a:	4855      	ldr	r0, [pc, #340]	; (80019c0 <main+0x1b4>)
 800186c:	f7ff fc88 	bl	8001180 <LIB_OV5640_CaptureSnapshot>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d1f7      	bne.n	8001866 <main+0x5a>
	{

		// Transmit Image to PC
		LIB_SERIAL_IMG_Transmit(&img);
 8001876:	4852      	ldr	r0, [pc, #328]	; (80019c0 <main+0x1b4>)
 8001878:	f7ff feec 	bl	8001654 <LIB_SERIAL_IMG_Transmit>

		uint32_t i;
		for (i = 0; i < img.height * img.width * img.format; i = i + 3)
 800187c:	2300      	movs	r3, #0
 800187e:	61fb      	str	r3, [r7, #28]
 8001880:	e084      	b.n	800198c <main+0x180>
		{
			float rgb[3] = {img.pData[i], img.pData[i + 1], img.pData[i + 2]};
 8001882:	4b4f      	ldr	r3, [pc, #316]	; (80019c0 <main+0x1b4>)
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	69fb      	ldr	r3, [r7, #28]
 8001888:	4413      	add	r3, r2
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	ee07 3a90 	vmov	s15, r3
 8001890:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001894:	edc7 7a04 	vstr	s15, [r7, #16]
 8001898:	4b49      	ldr	r3, [pc, #292]	; (80019c0 <main+0x1b4>)
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	69fb      	ldr	r3, [r7, #28]
 800189e:	3301      	adds	r3, #1
 80018a0:	4413      	add	r3, r2
 80018a2:	781b      	ldrb	r3, [r3, #0]
 80018a4:	ee07 3a90 	vmov	s15, r3
 80018a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80018ac:	edc7 7a05 	vstr	s15, [r7, #20]
 80018b0:	4b43      	ldr	r3, [pc, #268]	; (80019c0 <main+0x1b4>)
 80018b2:	681a      	ldr	r2, [r3, #0]
 80018b4:	69fb      	ldr	r3, [r7, #28]
 80018b6:	3302      	adds	r3, #2
 80018b8:	4413      	add	r3, r2
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	ee07 3a90 	vmov	s15, r3
 80018c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80018c4:	edc7 7a06 	vstr	s15, [r7, #24]
			float cluster_idx = {0};
 80018c8:	f04f 0300 	mov.w	r3, #0
 80018cc:	60fb      	str	r3, [r7, #12]
			kmeans_clus_predict(rgb, &cluster_idx, 0);
 80018ce:	f107 010c 	add.w	r1, r7, #12
 80018d2:	f107 0310 	add.w	r3, r7, #16
 80018d6:	2200      	movs	r2, #0
 80018d8:	4618      	mov	r0, r3
 80018da:	f7ff facd 	bl	8000e78 <kmeans_clus_predict>
			pImageQuantized[i + 0] = (uint8_t)centroids[(uint8_t)cluster_idx][0];
 80018de:	edd7 7a03 	vldr	s15, [r7, #12]
 80018e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80018e6:	edc7 7a01 	vstr	s15, [r7, #4]
 80018ea:	793b      	ldrb	r3, [r7, #4]
 80018ec:	b2db      	uxtb	r3, r3
 80018ee:	4619      	mov	r1, r3
 80018f0:	4a36      	ldr	r2, [pc, #216]	; (80019cc <main+0x1c0>)
 80018f2:	460b      	mov	r3, r1
 80018f4:	005b      	lsls	r3, r3, #1
 80018f6:	440b      	add	r3, r1
 80018f8:	009b      	lsls	r3, r3, #2
 80018fa:	4413      	add	r3, r2
 80018fc:	edd3 7a00 	vldr	s15, [r3]
 8001900:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001904:	edc7 7a01 	vstr	s15, [r7, #4]
 8001908:	793b      	ldrb	r3, [r7, #4]
 800190a:	b2d9      	uxtb	r1, r3
 800190c:	4a2d      	ldr	r2, [pc, #180]	; (80019c4 <main+0x1b8>)
 800190e:	69fb      	ldr	r3, [r7, #28]
 8001910:	4413      	add	r3, r2
 8001912:	460a      	mov	r2, r1
 8001914:	701a      	strb	r2, [r3, #0]
			pImageQuantized[i + 1] = (uint8_t)centroids[(uint8_t)cluster_idx][1];
 8001916:	edd7 7a03 	vldr	s15, [r7, #12]
 800191a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800191e:	edc7 7a01 	vstr	s15, [r7, #4]
 8001922:	793b      	ldrb	r3, [r7, #4]
 8001924:	b2db      	uxtb	r3, r3
 8001926:	4619      	mov	r1, r3
 8001928:	4a28      	ldr	r2, [pc, #160]	; (80019cc <main+0x1c0>)
 800192a:	460b      	mov	r3, r1
 800192c:	005b      	lsls	r3, r3, #1
 800192e:	440b      	add	r3, r1
 8001930:	009b      	lsls	r3, r3, #2
 8001932:	4413      	add	r3, r2
 8001934:	3304      	adds	r3, #4
 8001936:	edd3 7a00 	vldr	s15, [r3]
 800193a:	69fb      	ldr	r3, [r7, #28]
 800193c:	3301      	adds	r3, #1
 800193e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001942:	edc7 7a01 	vstr	s15, [r7, #4]
 8001946:	793a      	ldrb	r2, [r7, #4]
 8001948:	b2d1      	uxtb	r1, r2
 800194a:	4a1e      	ldr	r2, [pc, #120]	; (80019c4 <main+0x1b8>)
 800194c:	54d1      	strb	r1, [r2, r3]
			pImageQuantized[i + 2] = (uint8_t)centroids[(uint8_t)cluster_idx][2];
 800194e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001952:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001956:	edc7 7a01 	vstr	s15, [r7, #4]
 800195a:	793b      	ldrb	r3, [r7, #4]
 800195c:	b2db      	uxtb	r3, r3
 800195e:	4619      	mov	r1, r3
 8001960:	4a1a      	ldr	r2, [pc, #104]	; (80019cc <main+0x1c0>)
 8001962:	460b      	mov	r3, r1
 8001964:	005b      	lsls	r3, r3, #1
 8001966:	440b      	add	r3, r1
 8001968:	009b      	lsls	r3, r3, #2
 800196a:	4413      	add	r3, r2
 800196c:	3308      	adds	r3, #8
 800196e:	edd3 7a00 	vldr	s15, [r3]
 8001972:	69fb      	ldr	r3, [r7, #28]
 8001974:	3302      	adds	r3, #2
 8001976:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800197a:	edc7 7a01 	vstr	s15, [r7, #4]
 800197e:	793a      	ldrb	r2, [r7, #4]
 8001980:	b2d1      	uxtb	r1, r2
 8001982:	4a10      	ldr	r2, [pc, #64]	; (80019c4 <main+0x1b8>)
 8001984:	54d1      	strb	r1, [r2, r3]
		for (i = 0; i < img.height * img.width * img.format; i = i + 3)
 8001986:	69fb      	ldr	r3, [r7, #28]
 8001988:	3303      	adds	r3, #3
 800198a:	61fb      	str	r3, [r7, #28]
 800198c:	4b0c      	ldr	r3, [pc, #48]	; (80019c0 <main+0x1b4>)
 800198e:	88db      	ldrh	r3, [r3, #6]
 8001990:	461a      	mov	r2, r3
 8001992:	4b0b      	ldr	r3, [pc, #44]	; (80019c0 <main+0x1b4>)
 8001994:	889b      	ldrh	r3, [r3, #4]
 8001996:	fb03 f302 	mul.w	r3, r3, r2
 800199a:	4a09      	ldr	r2, [pc, #36]	; (80019c0 <main+0x1b4>)
 800199c:	7a12      	ldrb	r2, [r2, #8]
 800199e:	fb02 f303 	mul.w	r3, r2, r3
 80019a2:	461a      	mov	r2, r3
 80019a4:	69fb      	ldr	r3, [r7, #28]
 80019a6:	4293      	cmp	r3, r2
 80019a8:	f4ff af6b 	bcc.w	8001882 <main+0x76>
		}

		// Transmit Quantized Image to PC
		LIB_SERIAL_IMG_Transmit(&img_q);
 80019ac:	4806      	ldr	r0, [pc, #24]	; (80019c8 <main+0x1bc>)
 80019ae:	f7ff fe51 	bl	8001654 <LIB_SERIAL_IMG_Transmit>
		HAL_Delay(1000);
 80019b2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80019b6:	f001 fd61 	bl	800347c <HAL_Delay>
	if (!LIB_OV5640_CaptureSnapshot(&img, 5000))
 80019ba:	e754      	b.n	8001866 <main+0x5a>
 80019bc:	c0000000 	.word	0xc0000000
 80019c0:	200003a0 	.word	0x200003a0
 80019c4:	c0038400 	.word	0xc0038400
 80019c8:	200003b0 	.word	0x200003b0
 80019cc:	20000020 	.word	0x20000020

080019d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b094      	sub	sp, #80	; 0x50
 80019d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019d6:	f107 0320 	add.w	r3, r7, #32
 80019da:	2230      	movs	r2, #48	; 0x30
 80019dc:	2100      	movs	r1, #0
 80019de:	4618      	mov	r0, r3
 80019e0:	f006 fdf4 	bl	80085cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019e4:	f107 030c 	add.w	r3, r7, #12
 80019e8:	2200      	movs	r2, #0
 80019ea:	601a      	str	r2, [r3, #0]
 80019ec:	605a      	str	r2, [r3, #4]
 80019ee:	609a      	str	r2, [r3, #8]
 80019f0:	60da      	str	r2, [r3, #12]
 80019f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80019f4:	4b28      	ldr	r3, [pc, #160]	; (8001a98 <SystemClock_Config+0xc8>)
 80019f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f8:	4a27      	ldr	r2, [pc, #156]	; (8001a98 <SystemClock_Config+0xc8>)
 80019fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019fe:	6413      	str	r3, [r2, #64]	; 0x40
 8001a00:	4b25      	ldr	r3, [pc, #148]	; (8001a98 <SystemClock_Config+0xc8>)
 8001a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a08:	60bb      	str	r3, [r7, #8]
 8001a0a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001a0c:	4b23      	ldr	r3, [pc, #140]	; (8001a9c <SystemClock_Config+0xcc>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001a14:	4a21      	ldr	r2, [pc, #132]	; (8001a9c <SystemClock_Config+0xcc>)
 8001a16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a1a:	6013      	str	r3, [r2, #0]
 8001a1c:	4b1f      	ldr	r3, [pc, #124]	; (8001a9c <SystemClock_Config+0xcc>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001a24:	607b      	str	r3, [r7, #4]
 8001a26:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001a28:	2302      	movs	r3, #2
 8001a2a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a30:	2310      	movs	r3, #16
 8001a32:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a34:	2302      	movs	r3, #2
 8001a36:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 10;
 8001a3c:	230a      	movs	r3, #10
 8001a3e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 210;
 8001a40:	23d2      	movs	r3, #210	; 0xd2
 8001a42:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a44:	2302      	movs	r3, #2
 8001a46:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001a48:	2302      	movs	r3, #2
 8001a4a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a4c:	f107 0320 	add.w	r3, r7, #32
 8001a50:	4618      	mov	r0, r3
 8001a52:	f004 feb7 	bl	80067c4 <HAL_RCC_OscConfig>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d001      	beq.n	8001a60 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001a5c:	f000 fc8a 	bl	8002374 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a60:	230f      	movs	r3, #15
 8001a62:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a64:	2302      	movs	r3, #2
 8001a66:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001a6c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001a70:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001a72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a76:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001a78:	f107 030c 	add.w	r3, r7, #12
 8001a7c:	2105      	movs	r1, #5
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f005 f944 	bl	8006d0c <HAL_RCC_ClockConfig>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d001      	beq.n	8001a8e <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8001a8a:	f000 fc73 	bl	8002374 <Error_Handler>
  }
}
 8001a8e:	bf00      	nop
 8001a90:	3750      	adds	r7, #80	; 0x50
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	40023800 	.word	0x40023800
 8001a9c:	40007000 	.word	0x40007000

08001aa0 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8001aa4:	4b16      	ldr	r3, [pc, #88]	; (8001b00 <MX_DCMI_Init+0x60>)
 8001aa6:	4a17      	ldr	r2, [pc, #92]	; (8001b04 <MX_DCMI_Init+0x64>)
 8001aa8:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8001aaa:	4b15      	ldr	r3, [pc, #84]	; (8001b00 <MX_DCMI_Init+0x60>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 8001ab0:	4b13      	ldr	r3, [pc, #76]	; (8001b00 <MX_DCMI_Init+0x60>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 8001ab6:	4b12      	ldr	r3, [pc, #72]	; (8001b00 <MX_DCMI_Init+0x60>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8001abc:	4b10      	ldr	r3, [pc, #64]	; (8001b00 <MX_DCMI_Init+0x60>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8001ac2:	4b0f      	ldr	r3, [pc, #60]	; (8001b00 <MX_DCMI_Init+0x60>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8001ac8:	4b0d      	ldr	r3, [pc, #52]	; (8001b00 <MX_DCMI_Init+0x60>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8001ace:	4b0c      	ldr	r3, [pc, #48]	; (8001b00 <MX_DCMI_Init+0x60>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8001ad4:	4b0a      	ldr	r3, [pc, #40]	; (8001b00 <MX_DCMI_Init+0x60>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8001ada:	4b09      	ldr	r3, [pc, #36]	; (8001b00 <MX_DCMI_Init+0x60>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8001ae0:	4b07      	ldr	r3, [pc, #28]	; (8001b00 <MX_DCMI_Init+0x60>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8001ae6:	4b06      	ldr	r3, [pc, #24]	; (8001b00 <MX_DCMI_Init+0x60>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8001aec:	4804      	ldr	r0, [pc, #16]	; (8001b00 <MX_DCMI_Init+0x60>)
 8001aee:	f001 fe77 	bl	80037e0 <HAL_DCMI_Init>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d001      	beq.n	8001afc <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8001af8:	f000 fc3c 	bl	8002374 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8001afc:	bf00      	nop
 8001afe:	bd80      	pop	{r7, pc}
 8001b00:	200002cc 	.word	0x200002cc
 8001b04:	50050000 	.word	0x50050000

08001b08 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001b0c:	4b13      	ldr	r3, [pc, #76]	; (8001b5c <MX_USART1_UART_Init+0x54>)
 8001b0e:	4a14      	ldr	r2, [pc, #80]	; (8001b60 <MX_USART1_UART_Init+0x58>)
 8001b10:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 2000000;
 8001b12:	4b12      	ldr	r3, [pc, #72]	; (8001b5c <MX_USART1_UART_Init+0x54>)
 8001b14:	4a13      	ldr	r2, [pc, #76]	; (8001b64 <MX_USART1_UART_Init+0x5c>)
 8001b16:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b18:	4b10      	ldr	r3, [pc, #64]	; (8001b5c <MX_USART1_UART_Init+0x54>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001b1e:	4b0f      	ldr	r3, [pc, #60]	; (8001b5c <MX_USART1_UART_Init+0x54>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001b24:	4b0d      	ldr	r3, [pc, #52]	; (8001b5c <MX_USART1_UART_Init+0x54>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001b2a:	4b0c      	ldr	r3, [pc, #48]	; (8001b5c <MX_USART1_UART_Init+0x54>)
 8001b2c:	220c      	movs	r2, #12
 8001b2e:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b30:	4b0a      	ldr	r3, [pc, #40]	; (8001b5c <MX_USART1_UART_Init+0x54>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b36:	4b09      	ldr	r3, [pc, #36]	; (8001b5c <MX_USART1_UART_Init+0x54>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b3c:	4b07      	ldr	r3, [pc, #28]	; (8001b5c <MX_USART1_UART_Init+0x54>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b42:	4b06      	ldr	r3, [pc, #24]	; (8001b5c <MX_USART1_UART_Init+0x54>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001b48:	4804      	ldr	r0, [pc, #16]	; (8001b5c <MX_USART1_UART_Init+0x54>)
 8001b4a:	f005 ff36 	bl	80079ba <HAL_UART_Init>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d001      	beq.n	8001b58 <MX_USART1_UART_Init+0x50>
  {
    Error_Handler();
 8001b54:	f000 fc0e 	bl	8002374 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001b58:	bf00      	nop
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	2000031c 	.word	0x2000031c
 8001b60:	40011000 	.word	0x40011000
 8001b64:	001e8480 	.word	0x001e8480

08001b68 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b088      	sub	sp, #32
 8001b6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8001b6e:	1d3b      	adds	r3, r7, #4
 8001b70:	2200      	movs	r2, #0
 8001b72:	601a      	str	r2, [r3, #0]
 8001b74:	605a      	str	r2, [r3, #4]
 8001b76:	609a      	str	r2, [r3, #8]
 8001b78:	60da      	str	r2, [r3, #12]
 8001b7a:	611a      	str	r2, [r3, #16]
 8001b7c:	615a      	str	r2, [r3, #20]
 8001b7e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001b80:	4b1e      	ldr	r3, [pc, #120]	; (8001bfc <MX_FMC_Init+0x94>)
 8001b82:	4a1f      	ldr	r2, [pc, #124]	; (8001c00 <MX_FMC_Init+0x98>)
 8001b84:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8001b86:	4b1d      	ldr	r3, [pc, #116]	; (8001bfc <MX_FMC_Init+0x94>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001b8c:	4b1b      	ldr	r3, [pc, #108]	; (8001bfc <MX_FMC_Init+0x94>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8001b92:	4b1a      	ldr	r3, [pc, #104]	; (8001bfc <MX_FMC_Init+0x94>)
 8001b94:	2204      	movs	r2, #4
 8001b96:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8001b98:	4b18      	ldr	r3, [pc, #96]	; (8001bfc <MX_FMC_Init+0x94>)
 8001b9a:	2210      	movs	r2, #16
 8001b9c:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001b9e:	4b17      	ldr	r3, [pc, #92]	; (8001bfc <MX_FMC_Init+0x94>)
 8001ba0:	2240      	movs	r2, #64	; 0x40
 8001ba2:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 8001ba4:	4b15      	ldr	r3, [pc, #84]	; (8001bfc <MX_FMC_Init+0x94>)
 8001ba6:	2280      	movs	r2, #128	; 0x80
 8001ba8:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001baa:	4b14      	ldr	r3, [pc, #80]	; (8001bfc <MX_FMC_Init+0x94>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 8001bb0:	4b12      	ldr	r3, [pc, #72]	; (8001bfc <MX_FMC_Init+0x94>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8001bb6:	4b11      	ldr	r3, [pc, #68]	; (8001bfc <MX_FMC_Init+0x94>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8001bbc:	4b0f      	ldr	r3, [pc, #60]	; (8001bfc <MX_FMC_Init+0x94>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 8001bc2:	2310      	movs	r3, #16
 8001bc4:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 8001bc6:	2310      	movs	r3, #16
 8001bc8:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 8001bca:	2310      	movs	r3, #16
 8001bcc:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 8001bce:	2310      	movs	r3, #16
 8001bd0:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 8001bd2:	2310      	movs	r3, #16
 8001bd4:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 8001bd6:	2310      	movs	r3, #16
 8001bd8:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 8001bda:	2310      	movs	r3, #16
 8001bdc:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001bde:	1d3b      	adds	r3, r7, #4
 8001be0:	4619      	mov	r1, r3
 8001be2:	4806      	ldr	r0, [pc, #24]	; (8001bfc <MX_FMC_Init+0x94>)
 8001be4:	f005 fe58 	bl	8007898 <HAL_SDRAM_Init>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d001      	beq.n	8001bf2 <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 8001bee:	f000 fbc1 	bl	8002374 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8001bf2:	bf00      	nop
 8001bf4:	3720      	adds	r7, #32
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	200003c0 	.word	0x200003c0
 8001c00:	a0000140 	.word	0xa0000140

08001c04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b090      	sub	sp, #64	; 0x40
 8001c08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c0a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c0e:	2200      	movs	r2, #0
 8001c10:	601a      	str	r2, [r3, #0]
 8001c12:	605a      	str	r2, [r3, #4]
 8001c14:	609a      	str	r2, [r3, #8]
 8001c16:	60da      	str	r2, [r3, #12]
 8001c18:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c1a:	4bad      	ldr	r3, [pc, #692]	; (8001ed0 <MX_GPIO_Init+0x2cc>)
 8001c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1e:	4aac      	ldr	r2, [pc, #688]	; (8001ed0 <MX_GPIO_Init+0x2cc>)
 8001c20:	f043 0310 	orr.w	r3, r3, #16
 8001c24:	6313      	str	r3, [r2, #48]	; 0x30
 8001c26:	4baa      	ldr	r3, [pc, #680]	; (8001ed0 <MX_GPIO_Init+0x2cc>)
 8001c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2a:	f003 0310 	and.w	r3, r3, #16
 8001c2e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001c32:	4ba7      	ldr	r3, [pc, #668]	; (8001ed0 <MX_GPIO_Init+0x2cc>)
 8001c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c36:	4aa6      	ldr	r2, [pc, #664]	; (8001ed0 <MX_GPIO_Init+0x2cc>)
 8001c38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c3e:	4ba4      	ldr	r3, [pc, #656]	; (8001ed0 <MX_GPIO_Init+0x2cc>)
 8001c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c46:	627b      	str	r3, [r7, #36]	; 0x24
 8001c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c4a:	4ba1      	ldr	r3, [pc, #644]	; (8001ed0 <MX_GPIO_Init+0x2cc>)
 8001c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4e:	4aa0      	ldr	r2, [pc, #640]	; (8001ed0 <MX_GPIO_Init+0x2cc>)
 8001c50:	f043 0302 	orr.w	r3, r3, #2
 8001c54:	6313      	str	r3, [r2, #48]	; 0x30
 8001c56:	4b9e      	ldr	r3, [pc, #632]	; (8001ed0 <MX_GPIO_Init+0x2cc>)
 8001c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c5a:	f003 0302 	and.w	r3, r3, #2
 8001c5e:	623b      	str	r3, [r7, #32]
 8001c60:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c62:	4b9b      	ldr	r3, [pc, #620]	; (8001ed0 <MX_GPIO_Init+0x2cc>)
 8001c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c66:	4a9a      	ldr	r2, [pc, #616]	; (8001ed0 <MX_GPIO_Init+0x2cc>)
 8001c68:	f043 0308 	orr.w	r3, r3, #8
 8001c6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c6e:	4b98      	ldr	r3, [pc, #608]	; (8001ed0 <MX_GPIO_Init+0x2cc>)
 8001c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c72:	f003 0308 	and.w	r3, r3, #8
 8001c76:	61fb      	str	r3, [r7, #28]
 8001c78:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c7a:	4b95      	ldr	r3, [pc, #596]	; (8001ed0 <MX_GPIO_Init+0x2cc>)
 8001c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c7e:	4a94      	ldr	r2, [pc, #592]	; (8001ed0 <MX_GPIO_Init+0x2cc>)
 8001c80:	f043 0304 	orr.w	r3, r3, #4
 8001c84:	6313      	str	r3, [r2, #48]	; 0x30
 8001c86:	4b92      	ldr	r3, [pc, #584]	; (8001ed0 <MX_GPIO_Init+0x2cc>)
 8001c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8a:	f003 0304 	and.w	r3, r3, #4
 8001c8e:	61bb      	str	r3, [r7, #24]
 8001c90:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c92:	4b8f      	ldr	r3, [pc, #572]	; (8001ed0 <MX_GPIO_Init+0x2cc>)
 8001c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c96:	4a8e      	ldr	r2, [pc, #568]	; (8001ed0 <MX_GPIO_Init+0x2cc>)
 8001c98:	f043 0301 	orr.w	r3, r3, #1
 8001c9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c9e:	4b8c      	ldr	r3, [pc, #560]	; (8001ed0 <MX_GPIO_Init+0x2cc>)
 8001ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca2:	f003 0301 	and.w	r3, r3, #1
 8001ca6:	617b      	str	r3, [r7, #20]
 8001ca8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001caa:	4b89      	ldr	r3, [pc, #548]	; (8001ed0 <MX_GPIO_Init+0x2cc>)
 8001cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cae:	4a88      	ldr	r2, [pc, #544]	; (8001ed0 <MX_GPIO_Init+0x2cc>)
 8001cb0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001cb4:	6313      	str	r3, [r2, #48]	; 0x30
 8001cb6:	4b86      	ldr	r3, [pc, #536]	; (8001ed0 <MX_GPIO_Init+0x2cc>)
 8001cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001cbe:	613b      	str	r3, [r7, #16]
 8001cc0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001cc2:	4b83      	ldr	r3, [pc, #524]	; (8001ed0 <MX_GPIO_Init+0x2cc>)
 8001cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc6:	4a82      	ldr	r2, [pc, #520]	; (8001ed0 <MX_GPIO_Init+0x2cc>)
 8001cc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ccc:	6313      	str	r3, [r2, #48]	; 0x30
 8001cce:	4b80      	ldr	r3, [pc, #512]	; (8001ed0 <MX_GPIO_Init+0x2cc>)
 8001cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cd6:	60fb      	str	r3, [r7, #12]
 8001cd8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001cda:	4b7d      	ldr	r3, [pc, #500]	; (8001ed0 <MX_GPIO_Init+0x2cc>)
 8001cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cde:	4a7c      	ldr	r2, [pc, #496]	; (8001ed0 <MX_GPIO_Init+0x2cc>)
 8001ce0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ce4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ce6:	4b7a      	ldr	r3, [pc, #488]	; (8001ed0 <MX_GPIO_Init+0x2cc>)
 8001ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cee:	60bb      	str	r3, [r7, #8]
 8001cf0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001cf2:	4b77      	ldr	r3, [pc, #476]	; (8001ed0 <MX_GPIO_Init+0x2cc>)
 8001cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf6:	4a76      	ldr	r2, [pc, #472]	; (8001ed0 <MX_GPIO_Init+0x2cc>)
 8001cf8:	f043 0320 	orr.w	r3, r3, #32
 8001cfc:	6313      	str	r3, [r2, #48]	; 0x30
 8001cfe:	4b74      	ldr	r3, [pc, #464]	; (8001ed0 <MX_GPIO_Init+0x2cc>)
 8001d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d02:	f003 0320 	and.w	r3, r3, #32
 8001d06:	607b      	str	r3, [r7, #4]
 8001d08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d0a:	4b71      	ldr	r3, [pc, #452]	; (8001ed0 <MX_GPIO_Init+0x2cc>)
 8001d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d0e:	4a70      	ldr	r2, [pc, #448]	; (8001ed0 <MX_GPIO_Init+0x2cc>)
 8001d10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d14:	6313      	str	r3, [r2, #48]	; 0x30
 8001d16:	4b6e      	ldr	r3, [pc, #440]	; (8001ed0 <MX_GPIO_Init+0x2cc>)
 8001d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d1e:	603b      	str	r3, [r7, #0]
 8001d20:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001d22:	2201      	movs	r2, #1
 8001d24:	2120      	movs	r1, #32
 8001d26:	486b      	ldr	r0, [pc, #428]	; (8001ed4 <MX_GPIO_Init+0x2d0>)
 8001d28:	f003 ffc4 	bl	8005cb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin, GPIO_PIN_RESET);
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	f241 010c 	movw	r1, #4108	; 0x100c
 8001d32:	4869      	ldr	r0, [pc, #420]	; (8001ed8 <MX_GPIO_Init+0x2d4>)
 8001d34:	f003 ffbe 	bl	8005cb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 8001d38:	2200      	movs	r2, #0
 8001d3a:	2108      	movs	r1, #8
 8001d3c:	4867      	ldr	r0, [pc, #412]	; (8001edc <MX_GPIO_Init+0x2d8>)
 8001d3e:	f003 ffb9 	bl	8005cb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8001d42:	2200      	movs	r2, #0
 8001d44:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d48:	4865      	ldr	r0, [pc, #404]	; (8001ee0 <MX_GPIO_Init+0x2dc>)
 8001d4a:	f003 ffb3 	bl	8005cb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8001d4e:	2200      	movs	r2, #0
 8001d50:	21c8      	movs	r1, #200	; 0xc8
 8001d52:	4864      	ldr	r0, [pc, #400]	; (8001ee4 <MX_GPIO_Init+0x2e0>)
 8001d54:	f003 ffae 	bl	8005cb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LCD_B0_Pin */
  GPIO_InitStruct.Pin = LCD_B0_Pin;
 8001d58:	2310      	movs	r3, #16
 8001d5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d5c:	2302      	movs	r3, #2
 8001d5e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d60:	2300      	movs	r3, #0
 8001d62:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d64:	2300      	movs	r3, #0
 8001d66:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001d68:	230e      	movs	r3, #14
 8001d6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8001d6c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d70:	4619      	mov	r1, r3
 8001d72:	485d      	ldr	r0, [pc, #372]	; (8001ee8 <MX_GPIO_Init+0x2e4>)
 8001d74:	f003 fdf2 	bl	800595c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8001d78:	2308      	movs	r3, #8
 8001d7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d80:	2300      	movs	r3, #0
 8001d82:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001d84:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d88:	4619      	mov	r1, r3
 8001d8a:	4857      	ldr	r0, [pc, #348]	; (8001ee8 <MX_GPIO_Init+0x2e4>)
 8001d8c:	f003 fde6 	bl	800595c <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_D2_Pin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8001d90:	2304      	movs	r3, #4
 8001d92:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d94:	2302      	movs	r3, #2
 8001d96:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d9c:	2303      	movs	r3, #3
 8001d9e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001da0:	2309      	movs	r3, #9
 8001da2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8001da4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001da8:	4619      	mov	r1, r3
 8001daa:	484f      	ldr	r0, [pc, #316]	; (8001ee8 <MX_GPIO_Init+0x2e4>)
 8001dac:	f003 fdd6 	bl	800595c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8001db0:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8001db4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001db6:	2302      	movs	r3, #2
 8001db8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dbe:	2303      	movs	r3, #3
 8001dc0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001dc2:	230b      	movs	r3, #11
 8001dc4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001dc6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001dca:	4619      	mov	r1, r3
 8001dcc:	4845      	ldr	r0, [pc, #276]	; (8001ee4 <MX_GPIO_Init+0x2e0>)
 8001dce:	f003 fdc5 	bl	800595c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8001dd2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001dd8:	2312      	movs	r3, #18
 8001dda:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001de0:	2300      	movs	r3, #0
 8001de2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001de4:	2304      	movs	r3, #4
 8001de6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001de8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001dec:	4619      	mov	r1, r3
 8001dee:	483f      	ldr	r0, [pc, #252]	; (8001eec <MX_GPIO_Init+0x2e8>)
 8001df0:	f003 fdb4 	bl	800595c <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 8001df4:	f643 4323 	movw	r3, #15395	; 0x3c23
 8001df8:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dfa:	2302      	movs	r3, #2
 8001dfc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e02:	2303      	movs	r3, #3
 8001e04:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001e06:	230a      	movs	r3, #10
 8001e08:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e0a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e0e:	4619      	mov	r1, r3
 8001e10:	4836      	ldr	r0, [pc, #216]	; (8001eec <MX_GPIO_Init+0x2e8>)
 8001e12:	f003 fda3 	bl	800595c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 8001e16:	2310      	movs	r3, #16
 8001e18:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e1a:	2302      	movs	r3, #2
 8001e1c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e22:	2300      	movs	r3, #0
 8001e24:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001e26:	2302      	movs	r3, #2
 8001e28:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8001e2a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e2e:	4619      	mov	r1, r3
 8001e30:	482e      	ldr	r0, [pc, #184]	; (8001eec <MX_GPIO_Init+0x2e8>)
 8001e32:	f003 fd93 	bl	800595c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_RX0_Pin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8001e36:	2380      	movs	r3, #128	; 0x80
 8001e38:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e3a:	2302      	movs	r3, #2
 8001e3c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e42:	2300      	movs	r3, #0
 8001e44:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8001e46:	2308      	movs	r3, #8
 8001e48:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8001e4a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e4e:	4619      	mov	r1, r3
 8001e50:	4820      	ldr	r0, [pc, #128]	; (8001ed4 <MX_GPIO_Init+0x2d0>)
 8001e52:	f003 fd83 	bl	800595c <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC_CK_Pin SDMMC_D3_Pin SDMMC_D2_Pin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8001e56:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001e5a:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e5c:	2302      	movs	r3, #2
 8001e5e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e60:	2300      	movs	r3, #0
 8001e62:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e64:	2303      	movs	r3, #3
 8001e66:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001e68:	230c      	movs	r3, #12
 8001e6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e6c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e70:	4619      	mov	r1, r3
 8001e72:	481f      	ldr	r0, [pc, #124]	; (8001ef0 <MX_GPIO_Init+0x2ec>)
 8001e74:	f003 fd72 	bl	800595c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D9_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8001e78:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e7e:	2302      	movs	r3, #2
 8001e80:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e82:	2300      	movs	r3, #0
 8001e84:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e86:	2300      	movs	r3, #0
 8001e88:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8001e8e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e92:	4619      	mov	r1, r3
 8001e94:	4817      	ldr	r0, [pc, #92]	; (8001ef4 <MX_GPIO_Init+0x2f0>)
 8001e96:	f003 fd61 	bl	800595c <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_NCS_Pin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8001e9a:	2340      	movs	r3, #64	; 0x40
 8001e9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e9e:	2302      	movs	r3, #2
 8001ea0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001eaa:	230a      	movs	r3, #10
 8001eac:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8001eae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	480d      	ldr	r0, [pc, #52]	; (8001eec <MX_GPIO_Init+0x2e8>)
 8001eb6:	f003 fd51 	bl	800595c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_B1_Pin LCD_B2_Pin LCD_B3_Pin LCD_G4_Pin
                           LCD_G1_Pin LCD_G3_Pin LCD_G0_Pin LCD_G2_Pin
                           LCD_R7_Pin LCD_R5_Pin LCD_R6_Pin LCD_R4_Pin
                           LCD_R3_Pin LCD_R1_Pin LCD_R2_Pin */
  GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8001eba:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8001ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ec0:	2302      	movs	r3, #2
 8001ec2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001ecc:	230e      	movs	r3, #14
 8001ece:	e013      	b.n	8001ef8 <MX_GPIO_Init+0x2f4>
 8001ed0:	40023800 	.word	0x40023800
 8001ed4:	40020c00 	.word	0x40020c00
 8001ed8:	40022000 	.word	0x40022000
 8001edc:	40022800 	.word	0x40022800
 8001ee0:	40021c00 	.word	0x40021c00
 8001ee4:	40021800 	.word	0x40021800
 8001ee8:	40021000 	.word	0x40021000
 8001eec:	40020400 	.word	0x40020400
 8001ef0:	40020800 	.word	0x40020800
 8001ef4:	40020000 	.word	0x40020000
 8001ef8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001efa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001efe:	4619      	mov	r1, r3
 8001f00:	48bc      	ldr	r0, [pc, #752]	; (80021f4 <MX_GPIO_Init+0x5f0>)
 8001f02:	f003 fd2b 	bl	800595c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8001f06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f10:	2300      	movs	r3, #0
 8001f12:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001f14:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f18:	4619      	mov	r1, r3
 8001f1a:	48b6      	ldr	r0, [pc, #728]	; (80021f4 <MX_GPIO_Init+0x5f0>)
 8001f1c:	f003 fd1e 	bl	800595c <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8001f20:	2340      	movs	r3, #64	; 0x40
 8001f22:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001f24:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001f28:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8001f2e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f32:	4619      	mov	r1, r3
 8001f34:	48b0      	ldr	r0, [pc, #704]	; (80021f8 <MX_GPIO_Init+0x5f4>)
 8001f36:	f003 fd11 	bl	800595c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8001f3a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001f3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f40:	2302      	movs	r3, #2
 8001f42:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f44:	2300      	movs	r3, #0
 8001f46:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f48:	2303      	movs	r3, #3
 8001f4a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001f4c:	230a      	movs	r3, #10
 8001f4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f50:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f54:	4619      	mov	r1, r3
 8001f56:	48a9      	ldr	r0, [pc, #676]	; (80021fc <MX_GPIO_Init+0x5f8>)
 8001f58:	f003 fd00 	bl	800595c <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI2_MCLKA_Pin SAI2_SCKA_Pin SAI2_FSA_Pin SAI2_SDA_Pin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8001f5c:	23f0      	movs	r3, #240	; 0xf0
 8001f5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f60:	2302      	movs	r3, #2
 8001f62:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f64:	2300      	movs	r3, #0
 8001f66:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8001f6c:	230a      	movs	r3, #10
 8001f6e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001f70:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f74:	4619      	mov	r1, r3
 8001f76:	48a2      	ldr	r0, [pc, #648]	; (8002200 <MX_GPIO_Init+0x5fc>)
 8001f78:	f003 fcf0 	bl	800595c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DE_Pin LCD_B7_Pin LCD_B6_Pin LCD_B5_Pin
                           LCD_G6_Pin LCD_G7_Pin LCD_G5_Pin */
  GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8001f7c:	23f7      	movs	r3, #247	; 0xf7
 8001f7e:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f80:	2302      	movs	r3, #2
 8001f82:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f84:	2300      	movs	r3, #0
 8001f86:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001f8c:	230e      	movs	r3, #14
 8001f8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8001f90:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f94:	4619      	mov	r1, r3
 8001f96:	489b      	ldr	r0, [pc, #620]	; (8002204 <MX_GPIO_Init+0x600>)
 8001f98:	f003 fce0 	bl	800595c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_B4_Pin */
  GPIO_InitStruct.Pin = LCD_B4_Pin;
 8001f9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fa0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fa2:	2302      	movs	r3, #2
 8001fa4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001faa:	2300      	movs	r3, #0
 8001fac:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001fae:	2309      	movs	r3, #9
 8001fb0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8001fb2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001fb6:	4619      	mov	r1, r3
 8001fb8:	4893      	ldr	r0, [pc, #588]	; (8002208 <MX_GPIO_Init+0x604>)
 8001fba:	f003 fccf 	bl	800595c <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI2_SDB_Pin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8001fbe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001fc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fc4:	2302      	movs	r3, #2
 8001fc6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8001fd0:	230a      	movs	r3, #10
 8001fd2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8001fd4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001fd8:	4619      	mov	r1, r3
 8001fda:	488b      	ldr	r0, [pc, #556]	; (8002208 <MX_GPIO_Init+0x604>)
 8001fdc:	f003 fcbe 	bl	800595c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001fe0:	2320      	movs	r3, #32
 8001fe2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fec:	2300      	movs	r3, #0
 8001fee:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001ff0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	4880      	ldr	r0, [pc, #512]	; (80021f8 <MX_GPIO_Init+0x5f4>)
 8001ff8:	f003 fcb0 	bl	800595c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 8001ffc:	f241 030c 	movw	r3, #4108	; 0x100c
 8002000:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002002:	2301      	movs	r3, #1
 8002004:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002006:	2300      	movs	r3, #0
 8002008:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800200a:	2300      	movs	r3, #0
 800200c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800200e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002012:	4619      	mov	r1, r3
 8002014:	487a      	ldr	r0, [pc, #488]	; (8002200 <MX_GPIO_Init+0x5fc>)
 8002016:	f003 fca1 	bl	800595c <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 800201a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800201e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002020:	2300      	movs	r3, #0
 8002022:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002024:	2300      	movs	r3, #0
 8002026:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8002028:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800202c:	4619      	mov	r1, r3
 800202e:	4877      	ldr	r0, [pc, #476]	; (800220c <MX_GPIO_Init+0x608>)
 8002030:	f003 fc94 	bl	800595c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_HSYNC_Pin LCD_VSYNC_Pin LCD_R0_Pin LCD_CLK_Pin */
  GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8002034:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8002038:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800203a:	2302      	movs	r3, #2
 800203c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800203e:	2300      	movs	r3, #0
 8002040:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002042:	2300      	movs	r3, #0
 8002044:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002046:	230e      	movs	r3, #14
 8002048:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800204a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800204e:	4619      	mov	r1, r3
 8002050:	486b      	ldr	r0, [pc, #428]	; (8002200 <MX_GPIO_Init+0x5fc>)
 8002052:	f003 fc83 	bl	800595c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8002056:	2308      	movs	r3, #8
 8002058:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800205a:	2301      	movs	r3, #1
 800205c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800205e:	2300      	movs	r3, #0
 8002060:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002062:	2300      	movs	r3, #0
 8002064:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8002066:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800206a:	4619      	mov	r1, r3
 800206c:	4865      	ldr	r0, [pc, #404]	; (8002204 <MX_GPIO_Init+0x600>)
 800206e:	f003 fc75 	bl	800595c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8002072:	2310      	movs	r3, #16
 8002074:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002076:	2300      	movs	r3, #0
 8002078:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800207a:	2300      	movs	r3, #0
 800207c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800207e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002082:	4619      	mov	r1, r3
 8002084:	485c      	ldr	r0, [pc, #368]	; (80021f8 <MX_GPIO_Init+0x5f4>)
 8002086:	f003 fc69 	bl	800595c <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC_D0_Pin */
  GPIO_InitStruct.Pin = SDMMC_D0_Pin;
 800208a:	2304      	movs	r3, #4
 800208c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800208e:	2302      	movs	r3, #2
 8002090:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002092:	2300      	movs	r3, #0
 8002094:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002096:	2303      	movs	r3, #3
 8002098:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800209a:	230c      	movs	r3, #12
 800209c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SDMMC_D0_GPIO_Port, &GPIO_InitStruct);
 800209e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80020a2:	4619      	mov	r1, r3
 80020a4:	4854      	ldr	r0, [pc, #336]	; (80021f8 <MX_GPIO_Init+0x5f4>)
 80020a6:	f003 fc59 	bl	800595c <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 80020aa:	f248 0304 	movw	r3, #32772	; 0x8004
 80020ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020b0:	2300      	movs	r3, #0
 80020b2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b4:	2300      	movs	r3, #0
 80020b6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80020b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80020bc:	4619      	mov	r1, r3
 80020be:	4854      	ldr	r0, [pc, #336]	; (8002210 <MX_GPIO_Init+0x60c>)
 80020c0:	f003 fc4c 	bl	800595c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_SCK_D13_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 80020c4:	2302      	movs	r3, #2
 80020c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020c8:	2302      	movs	r3, #2
 80020ca:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020cc:	2300      	movs	r3, #0
 80020ce:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020d0:	2300      	movs	r3, #0
 80020d2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80020d4:	2305      	movs	r3, #5
 80020d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 80020d8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80020dc:	4619      	mov	r1, r3
 80020de:	4848      	ldr	r0, [pc, #288]	; (8002200 <MX_GPIO_Init+0x5fc>)
 80020e0:	f003 fc3c 	bl	800595c <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 80020e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80020e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020ea:	2301      	movs	r3, #1
 80020ec:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ee:	2300      	movs	r3, #0
 80020f0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020f2:	2300      	movs	r3, #0
 80020f4:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80020f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80020fa:	4619      	mov	r1, r3
 80020fc:	4844      	ldr	r0, [pc, #272]	; (8002210 <MX_GPIO_Init+0x60c>)
 80020fe:	f003 fc2d 	bl	800595c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_CS_D5_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8002102:	2301      	movs	r3, #1
 8002104:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002106:	2302      	movs	r3, #2
 8002108:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800210a:	2300      	movs	r3, #0
 800210c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800210e:	2300      	movs	r3, #0
 8002110:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002112:	2302      	movs	r3, #2
 8002114:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8002116:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800211a:	4619      	mov	r1, r3
 800211c:	4838      	ldr	r0, [pc, #224]	; (8002200 <MX_GPIO_Init+0x5fc>)
 800211e:	f003 fc1d 	bl	800595c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D10_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8002122:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002126:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002128:	2302      	movs	r3, #2
 800212a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800212c:	2300      	movs	r3, #0
 800212e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002130:	2300      	movs	r3, #0
 8002132:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002134:	2301      	movs	r3, #1
 8002136:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8002138:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800213c:	4619      	mov	r1, r3
 800213e:	482f      	ldr	r0, [pc, #188]	; (80021fc <MX_GPIO_Init+0x5f8>)
 8002140:	f003 fc0c 	bl	800595c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8002144:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002148:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800214a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800214e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002150:	2300      	movs	r3, #0
 8002152:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8002154:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002158:	4619      	mov	r1, r3
 800215a:	4829      	ldr	r0, [pc, #164]	; (8002200 <MX_GPIO_Init+0x5fc>)
 800215c:	f003 fbfe 	bl	800595c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_RX_D0_Pin ARDUINO_TX_D1_Pin */
  GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8002160:	23c0      	movs	r3, #192	; 0xc0
 8002162:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002164:	2302      	movs	r3, #2
 8002166:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002168:	2300      	movs	r3, #0
 800216a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800216c:	2303      	movs	r3, #3
 800216e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002170:	2308      	movs	r3, #8
 8002172:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002174:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002178:	4619      	mov	r1, r3
 800217a:	4824      	ldr	r0, [pc, #144]	; (800220c <MX_GPIO_Init+0x608>)
 800217c:	f003 fbee 	bl	800595c <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8002180:	2310      	movs	r3, #16
 8002182:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002184:	2302      	movs	r3, #2
 8002186:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002188:	2300      	movs	r3, #0
 800218a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800218c:	2303      	movs	r3, #3
 800218e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002190:	230a      	movs	r3, #10
 8002192:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8002194:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002198:	4619      	mov	r1, r3
 800219a:	481d      	ldr	r0, [pc, #116]	; (8002210 <MX_GPIO_Init+0x60c>)
 800219c:	f003 fbde 	bl	800595c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 80021a0:	23c8      	movs	r3, #200	; 0xc8
 80021a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021a4:	2301      	movs	r3, #1
 80021a6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a8:	2300      	movs	r3, #0
 80021aa:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ac:	2300      	movs	r3, #0
 80021ae:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80021b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80021b4:	4619      	mov	r1, r3
 80021b6:	4814      	ldr	r0, [pc, #80]	; (8002208 <MX_GPIO_Init+0x604>)
 80021b8:	f003 fbd0 	bl	800595c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_A4_Pin ARDUINO_A5_Pin ARDUINO_A1_Pin ARDUINO_A2_Pin
                           ARDUINO_A3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 80021bc:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 80021c0:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ARDUINO_A3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80021c2:	2303      	movs	r3, #3
 80021c4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c6:	2300      	movs	r3, #0
 80021c8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80021ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80021ce:	4619      	mov	r1, r3
 80021d0:	4810      	ldr	r0, [pc, #64]	; (8002214 <MX_GPIO_Init+0x610>)
 80021d2:	f003 fbc3 	bl	800595c <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 80021d6:	2305      	movs	r3, #5
 80021d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021da:	2302      	movs	r3, #2
 80021dc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021de:	2300      	movs	r3, #0
 80021e0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021e2:	2303      	movs	r3, #3
 80021e4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80021e6:	230a      	movs	r3, #10
 80021e8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80021ee:	4619      	mov	r1, r3
 80021f0:	e012      	b.n	8002218 <MX_GPIO_Init+0x614>
 80021f2:	bf00      	nop
 80021f4:	40022400 	.word	0x40022400
 80021f8:	40020c00 	.word	0x40020c00
 80021fc:	40020000 	.word	0x40020000
 8002200:	40022000 	.word	0x40022000
 8002204:	40022800 	.word	0x40022800
 8002208:	40021800 	.word	0x40021800
 800220c:	40020800 	.word	0x40020800
 8002210:	40021c00 	.word	0x40021c00
 8002214:	40021400 	.word	0x40021400
 8002218:	4850      	ldr	r0, [pc, #320]	; (800235c <MX_GPIO_Init+0x758>)
 800221a:	f003 fb9f 	bl	800595c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800221e:	2332      	movs	r3, #50	; 0x32
 8002220:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002222:	2302      	movs	r3, #2
 8002224:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002226:	2300      	movs	r3, #0
 8002228:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800222a:	2303      	movs	r3, #3
 800222c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800222e:	230b      	movs	r3, #11
 8002230:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002232:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002236:	4619      	mov	r1, r3
 8002238:	4848      	ldr	r0, [pc, #288]	; (800235c <MX_GPIO_Init+0x758>)
 800223a:	f003 fb8f 	bl	800595c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800223e:	2304      	movs	r3, #4
 8002240:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002242:	2302      	movs	r3, #2
 8002244:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002246:	2300      	movs	r3, #0
 8002248:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800224a:	2303      	movs	r3, #3
 800224c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800224e:	2309      	movs	r3, #9
 8002250:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002252:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002256:	4619      	mov	r1, r3
 8002258:	4841      	ldr	r0, [pc, #260]	; (8002360 <MX_GPIO_Init+0x75c>)
 800225a:	f003 fb7f 	bl	800595c <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 800225e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002262:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002264:	2302      	movs	r3, #2
 8002266:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002268:	2300      	movs	r3, #0
 800226a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800226c:	2303      	movs	r3, #3
 800226e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002270:	2309      	movs	r3, #9
 8002272:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002274:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002278:	4619      	mov	r1, r3
 800227a:	483a      	ldr	r0, [pc, #232]	; (8002364 <MX_GPIO_Init+0x760>)
 800227c:	f003 fb6e 	bl	800595c <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8002280:	2304      	movs	r3, #4
 8002282:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002284:	2300      	movs	r3, #0
 8002286:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002288:	2300      	movs	r3, #0
 800228a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 800228c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002290:	4619      	mov	r1, r3
 8002292:	4835      	ldr	r0, [pc, #212]	; (8002368 <MX_GPIO_Init+0x764>)
 8002294:	f003 fb62 	bl	800595c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8002298:	2386      	movs	r3, #134	; 0x86
 800229a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800229c:	2302      	movs	r3, #2
 800229e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a0:	2300      	movs	r3, #0
 80022a2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022a4:	2303      	movs	r3, #3
 80022a6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80022a8:	230b      	movs	r3, #11
 80022aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022ac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80022b0:	4619      	mov	r1, r3
 80022b2:	482e      	ldr	r0, [pc, #184]	; (800236c <MX_GPIO_Init+0x768>)
 80022b4:	f003 fb52 	bl	800595c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_A0_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 80022b8:	2301      	movs	r3, #1
 80022ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80022bc:	2303      	movs	r3, #3
 80022be:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c0:	2300      	movs	r3, #0
 80022c2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 80022c4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80022c8:	4619      	mov	r1, r3
 80022ca:	4828      	ldr	r0, [pc, #160]	; (800236c <MX_GPIO_Init+0x768>)
 80022cc:	f003 fb46 	bl	800595c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_SCL_Pin LCD_SDA_Pin */
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 80022d0:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80022d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80022d6:	2312      	movs	r3, #18
 80022d8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022da:	2300      	movs	r3, #0
 80022dc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022de:	2303      	movs	r3, #3
 80022e0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80022e2:	2304      	movs	r3, #4
 80022e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80022e6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80022ea:	4619      	mov	r1, r3
 80022ec:	4820      	ldr	r0, [pc, #128]	; (8002370 <MX_GPIO_Init+0x76c>)
 80022ee:	f003 fb35 	bl	800595c <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 80022f2:	2328      	movs	r3, #40	; 0x28
 80022f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022f6:	2302      	movs	r3, #2
 80022f8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022fa:	2300      	movs	r3, #0
 80022fc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022fe:	2303      	movs	r3, #3
 8002300:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002302:	230a      	movs	r3, #10
 8002304:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002306:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800230a:	4619      	mov	r1, r3
 800230c:	4817      	ldr	r0, [pc, #92]	; (800236c <MX_GPIO_Init+0x768>)
 800230e:	f003 fb25 	bl	800595c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D6_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8002312:	2340      	movs	r3, #64	; 0x40
 8002314:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002316:	2302      	movs	r3, #2
 8002318:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800231a:	2300      	movs	r3, #0
 800231c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800231e:	2300      	movs	r3, #0
 8002320:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8002322:	2309      	movs	r3, #9
 8002324:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8002326:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800232a:	4619      	mov	r1, r3
 800232c:	4810      	ldr	r0, [pc, #64]	; (8002370 <MX_GPIO_Init+0x76c>)
 800232e:	f003 fb15 	bl	800595c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8002332:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002336:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002338:	2302      	movs	r3, #2
 800233a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800233c:	2300      	movs	r3, #0
 800233e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002340:	2300      	movs	r3, #0
 8002342:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002344:	2305      	movs	r3, #5
 8002346:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002348:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800234c:	4619      	mov	r1, r3
 800234e:	4804      	ldr	r0, [pc, #16]	; (8002360 <MX_GPIO_Init+0x75c>)
 8002350:	f003 fb04 	bl	800595c <HAL_GPIO_Init>

}
 8002354:	bf00      	nop
 8002356:	3740      	adds	r7, #64	; 0x40
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}
 800235c:	40020800 	.word	0x40020800
 8002360:	40020400 	.word	0x40020400
 8002364:	40020c00 	.word	0x40020c00
 8002368:	40021800 	.word	0x40021800
 800236c:	40020000 	.word	0x40020000
 8002370:	40021c00 	.word	0x40021c00

08002374 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002374:	b480      	push	{r7}
 8002376:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002378:	b672      	cpsid	i
}
 800237a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800237c:	e7fe      	b.n	800237c <Error_Handler+0x8>
	...

08002380 <OV5640_RegisterBusIO>:
  * @brief  Register component IO bus
  * @param  Component object pointer
  * @retval Component status
  */
int32_t OV5640_RegisterBusIO(OV5640_Object_t *pObj, OV5640_IO_t *pIO)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b084      	sub	sp, #16
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
 8002388:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d103      	bne.n	8002398 <OV5640_RegisterBusIO+0x18>
  {
    ret = OV5640_ERROR;
 8002390:	f04f 33ff 	mov.w	r3, #4294967295
 8002394:	60fb      	str	r3, [r7, #12]
 8002396:	e02c      	b.n	80023f2 <OV5640_RegisterBusIO+0x72>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	685a      	ldr	r2, [r3, #4]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	891a      	ldrh	r2, [r3, #8]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	68da      	ldr	r2, [r3, #12]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	691a      	ldr	r2, [r3, #16]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	695a      	ldr	r2, [r3, #20]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	615a      	str	r2, [r3, #20]

    pObj->Ctx.ReadReg  = OV5640_ReadRegWrap;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	4a0c      	ldr	r2, [pc, #48]	; (80023fc <OV5640_RegisterBusIO+0x7c>)
 80023cc:	61da      	str	r2, [r3, #28]
    pObj->Ctx.WriteReg = OV5640_WriteRegWrap;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	4a0b      	ldr	r2, [pc, #44]	; (8002400 <OV5640_RegisterBusIO+0x80>)
 80023d2:	619a      	str	r2, [r3, #24]
    pObj->Ctx.handle   = pObj;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	687a      	ldr	r2, [r7, #4]
 80023d8:	621a      	str	r2, [r3, #32]

    if (pObj->IO.Init != NULL)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d004      	beq.n	80023ec <OV5640_RegisterBusIO+0x6c>
    {
      ret = pObj->IO.Init();
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4798      	blx	r3
 80023e8:	60f8      	str	r0, [r7, #12]
 80023ea:	e002      	b.n	80023f2 <OV5640_RegisterBusIO+0x72>
    }
    else
    {
      ret = OV5640_ERROR;
 80023ec:	f04f 33ff 	mov.w	r3, #4294967295
 80023f0:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80023f2:	68fb      	ldr	r3, [r7, #12]
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	3710      	adds	r7, #16
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}
 80023fc:	08002acd 	.word	0x08002acd
 8002400:	08002aff 	.word	0x08002aff

08002404 <OV5640_Init>:
  * @param  Resolution  Camera resolution
  * @param  PixelFormat pixel format to be configured
  * @retval Component status
  */
int32_t OV5640_Init(OV5640_Object_t *pObj, uint32_t Resolution, uint32_t PixelFormat)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b088      	sub	sp, #32
 8002408:	af00      	add	r7, sp, #0
 800240a:	60f8      	str	r0, [r7, #12]
 800240c:	60b9      	str	r1, [r7, #8]
 800240e:	607a      	str	r2, [r7, #4]
  uint32_t index;
  int32_t ret = OV5640_OK;
 8002410:	2300      	movs	r3, #0
 8002412:	61bb      	str	r3, [r7, #24]
    {OV5640_AEC_CTRL1F, 0x14},
    {OV5640_SYSTEM_CTROL0, 0x02},
  };
  uint8_t tmp;

  if (pObj->IsInitialized == 0U)
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800241a:	2b00      	cmp	r3, #0
 800241c:	d165      	bne.n	80024ea <OV5640_Init+0xe6>
  {
    /* Check if resolution is supported */
    if ((Resolution > OV5640_R800x480) ||
 800241e:	68bb      	ldr	r3, [r7, #8]
 8002420:	2b04      	cmp	r3, #4
 8002422:	d80e      	bhi.n	8002442 <OV5640_Init+0x3e>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d00f      	beq.n	800244a <OV5640_Init+0x46>
        ((PixelFormat != OV5640_RGB565) && (PixelFormat != OV5640_YUV422) &&
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2b02      	cmp	r3, #2
 800242e:	d00c      	beq.n	800244a <OV5640_Init+0x46>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2b01      	cmp	r3, #1
 8002434:	d009      	beq.n	800244a <OV5640_Init+0x46>
         (PixelFormat != OV5640_RGB888) && (PixelFormat != OV5640_Y8) &&
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2b07      	cmp	r3, #7
 800243a:	d006      	beq.n	800244a <OV5640_Init+0x46>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2b08      	cmp	r3, #8
 8002440:	d003      	beq.n	800244a <OV5640_Init+0x46>
         (PixelFormat != OV5640_JPEG)))
    {
      ret = OV5640_ERROR;
 8002442:	f04f 33ff 	mov.w	r3, #4294967295
 8002446:	61bb      	str	r3, [r7, #24]
 8002448:	e04f      	b.n	80024ea <OV5640_Init+0xe6>
    }
    else
    {
      /* Set common parameters for all resolutions */
      for (index = 0; index < (sizeof(OV5640_Common) / 4U) ; index++)
 800244a:	2300      	movs	r3, #0
 800244c:	61fb      	str	r3, [r7, #28]
 800244e:	e01f      	b.n	8002490 <OV5640_Init+0x8c>
      {
        if (ret != OV5640_ERROR)
 8002450:	69bb      	ldr	r3, [r7, #24]
 8002452:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002456:	d018      	beq.n	800248a <OV5640_Init+0x86>
        {
          tmp = (uint8_t)OV5640_Common[index][1];
 8002458:	4a26      	ldr	r2, [pc, #152]	; (80024f4 <OV5640_Init+0xf0>)
 800245a:	69fb      	ldr	r3, [r7, #28]
 800245c:	009b      	lsls	r3, r3, #2
 800245e:	4413      	add	r3, r2
 8002460:	885b      	ldrh	r3, [r3, #2]
 8002462:	b2db      	uxtb	r3, r3
 8002464:	75fb      	strb	r3, [r7, #23]

          if (ov5640_write_reg(&pObj->Ctx, OV5640_Common[index][0], &tmp, 1) != OV5640_OK)
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	f103 0018 	add.w	r0, r3, #24
 800246c:	4a21      	ldr	r2, [pc, #132]	; (80024f4 <OV5640_Init+0xf0>)
 800246e:	69fb      	ldr	r3, [r7, #28]
 8002470:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8002474:	f107 0217 	add.w	r2, r7, #23
 8002478:	2301      	movs	r3, #1
 800247a:	f000 fb70 	bl	8002b5e <ov5640_write_reg>
 800247e:	4603      	mov	r3, r0
 8002480:	2b00      	cmp	r3, #0
 8002482:	d002      	beq.n	800248a <OV5640_Init+0x86>
          {
            ret = OV5640_ERROR;
 8002484:	f04f 33ff 	mov.w	r3, #4294967295
 8002488:	61bb      	str	r3, [r7, #24]
      for (index = 0; index < (sizeof(OV5640_Common) / 4U) ; index++)
 800248a:	69fb      	ldr	r3, [r7, #28]
 800248c:	3301      	adds	r3, #1
 800248e:	61fb      	str	r3, [r7, #28]
 8002490:	69fb      	ldr	r3, [r7, #28]
 8002492:	2bfd      	cmp	r3, #253	; 0xfd
 8002494:	d9dc      	bls.n	8002450 <OV5640_Init+0x4c>
          }
        }
      }

      if (ret == OV5640_OK)
 8002496:	69bb      	ldr	r3, [r7, #24]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d126      	bne.n	80024ea <OV5640_Init+0xe6>
      {
        /* Set specific parameters for each resolution */
        if (OV5640_SetResolution(pObj, Resolution) != OV5640_OK)
 800249c:	68b9      	ldr	r1, [r7, #8]
 800249e:	68f8      	ldr	r0, [r7, #12]
 80024a0:	f000 f9be 	bl	8002820 <OV5640_SetResolution>
 80024a4:	4603      	mov	r3, r0
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d003      	beq.n	80024b2 <OV5640_Init+0xae>
        {
          ret = OV5640_ERROR;
 80024aa:	f04f 33ff 	mov.w	r3, #4294967295
 80024ae:	61bb      	str	r3, [r7, #24]
 80024b0:	e01b      	b.n	80024ea <OV5640_Init+0xe6>
        }/* Set specific parameters for each pixel format */
        else if (OV5640_SetPixelFormat(pObj, PixelFormat) != OV5640_OK)
 80024b2:	6879      	ldr	r1, [r7, #4]
 80024b4:	68f8      	ldr	r0, [r7, #12]
 80024b6:	f000 f81f 	bl	80024f8 <OV5640_SetPixelFormat>
 80024ba:	4603      	mov	r3, r0
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d003      	beq.n	80024c8 <OV5640_Init+0xc4>
        {
          ret = OV5640_ERROR;
 80024c0:	f04f 33ff 	mov.w	r3, #4294967295
 80024c4:	61bb      	str	r3, [r7, #24]
 80024c6:	e010      	b.n	80024ea <OV5640_Init+0xe6>
        }/* Set PixelClock, Href and VSync Polarity */
        else if (OV5640_SetPolarities(pObj, OV5640_POLARITY_PCLK_HIGH, OV5640_POLARITY_HREF_HIGH,
 80024c8:	2300      	movs	r3, #0
 80024ca:	2201      	movs	r2, #1
 80024cc:	2101      	movs	r1, #1
 80024ce:	68f8      	ldr	r0, [r7, #12]
 80024d0:	f000 fa9c 	bl	8002a0c <OV5640_SetPolarities>
 80024d4:	4603      	mov	r3, r0
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d003      	beq.n	80024e2 <OV5640_Init+0xde>
                                      OV5640_POLARITY_VSYNC_HIGH) != OV5640_OK)
        {
          ret = OV5640_ERROR;
 80024da:	f04f 33ff 	mov.w	r3, #4294967295
 80024de:	61bb      	str	r3, [r7, #24]
 80024e0:	e003      	b.n	80024ea <OV5640_Init+0xe6>
        }
        else
        {
          pObj->IsInitialized = 1U;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	2201      	movs	r2, #1
 80024e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }
      }
    }
  }

  return ret;
 80024ea:	69bb      	ldr	r3, [r7, #24]
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	3720      	adds	r7, #32
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}
 80024f4:	080087cc 	.word	0x080087cc

080024f8 <OV5640_SetPixelFormat>:
  * @param  pObj  pointer to component object
  * @param  PixelFormat pixel format to be configured
  * @retval Component status
  */
int32_t OV5640_SetPixelFormat(OV5640_Object_t *pObj, uint32_t PixelFormat)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b086      	sub	sp, #24
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
 8002500:	6039      	str	r1, [r7, #0]
  int32_t ret = OV5640_OK;
 8002502:	2300      	movs	r3, #0
 8002504:	617b      	str	r3, [r7, #20]
    {OV5640_FORMAT_CTRL00, 0x30},
    {OV5640_FORMAT_MUX_CTRL, 0x00},
  };

  /* Check if PixelFormat is supported */
  if ((PixelFormat != OV5640_RGB565) && (PixelFormat != OV5640_YUV422) &&
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d00f      	beq.n	800252c <OV5640_SetPixelFormat+0x34>
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	2b02      	cmp	r3, #2
 8002510:	d00c      	beq.n	800252c <OV5640_SetPixelFormat+0x34>
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	2b01      	cmp	r3, #1
 8002516:	d009      	beq.n	800252c <OV5640_SetPixelFormat+0x34>
      (PixelFormat != OV5640_RGB888) && (PixelFormat != OV5640_Y8) &&
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	2b07      	cmp	r3, #7
 800251c:	d006      	beq.n	800252c <OV5640_SetPixelFormat+0x34>
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	2b08      	cmp	r3, #8
 8002522:	d003      	beq.n	800252c <OV5640_SetPixelFormat+0x34>
      (PixelFormat != OV5640_JPEG))
  {
    /* Pixel format not supported */
    ret = OV5640_ERROR;
 8002524:	f04f 33ff 	mov.w	r3, #4294967295
 8002528:	617b      	str	r3, [r7, #20]
 800252a:	e16a      	b.n	8002802 <OV5640_SetPixelFormat+0x30a>
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	3b01      	subs	r3, #1
 8002530:	2b07      	cmp	r3, #7
 8002532:	f200 80c3 	bhi.w	80026bc <OV5640_SetPixelFormat+0x1c4>
 8002536:	a201      	add	r2, pc, #4	; (adr r2, 800253c <OV5640_SetPixelFormat+0x44>)
 8002538:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800253c:	080025b5 	.word	0x080025b5
 8002540:	0800255d 	.word	0x0800255d
 8002544:	080026bd 	.word	0x080026bd
 8002548:	080026bd 	.word	0x080026bd
 800254c:	080026bd 	.word	0x080026bd
 8002550:	080026bd 	.word	0x080026bd
 8002554:	0800260d 	.word	0x0800260d
 8002558:	08002665 	.word	0x08002665
  {
    /* Set specific parameters for each PixelFormat */
    switch (PixelFormat)
    {
      case OV5640_YUV422:
        for (index = 0; index < (sizeof(OV5640_PF_YUV422) / 4U); index++)
 800255c:	2300      	movs	r3, #0
 800255e:	613b      	str	r3, [r7, #16]
 8002560:	e024      	b.n	80025ac <OV5640_SetPixelFormat+0xb4>
        {
          if (ret != OV5640_ERROR)
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002568:	d01d      	beq.n	80025a6 <OV5640_SetPixelFormat+0xae>
          {
            tmp = (uint8_t)OV5640_PF_YUV422[index][1];
 800256a:	4aa8      	ldr	r2, [pc, #672]	; (800280c <OV5640_SetPixelFormat+0x314>)
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	009b      	lsls	r3, r3, #2
 8002570:	4413      	add	r3, r2
 8002572:	885b      	ldrh	r3, [r3, #2]
 8002574:	b2db      	uxtb	r3, r3
 8002576:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_YUV422[index][0], &tmp, 1) != OV5640_OK)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	f103 0018 	add.w	r0, r3, #24
 800257e:	4aa3      	ldr	r2, [pc, #652]	; (800280c <OV5640_SetPixelFormat+0x314>)
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8002586:	f107 020f 	add.w	r2, r7, #15
 800258a:	2301      	movs	r3, #1
 800258c:	f000 fae7 	bl	8002b5e <ov5640_write_reg>
 8002590:	4603      	mov	r3, r0
 8002592:	2b00      	cmp	r3, #0
 8002594:	d003      	beq.n	800259e <OV5640_SetPixelFormat+0xa6>
            {
              ret = OV5640_ERROR;
 8002596:	f04f 33ff 	mov.w	r3, #4294967295
 800259a:	617b      	str	r3, [r7, #20]
 800259c:	e003      	b.n	80025a6 <OV5640_SetPixelFormat+0xae>
            }
            else
            {
              (void)OV5640_Delay(pObj, 1);
 800259e:	2101      	movs	r1, #1
 80025a0:	6878      	ldr	r0, [r7, #4]
 80025a2:	f000 fa79 	bl	8002a98 <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_YUV422) / 4U); index++)
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	3301      	adds	r3, #1
 80025aa:	613b      	str	r3, [r7, #16]
 80025ac:	693b      	ldr	r3, [r7, #16]
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	d9d7      	bls.n	8002562 <OV5640_SetPixelFormat+0x6a>
            }
          }
        }
        break;
 80025b2:	e0af      	b.n	8002714 <OV5640_SetPixelFormat+0x21c>

      case OV5640_RGB888:
        for (index = 0; index < (sizeof(OV5640_PF_RGB888) / 4U); index++)
 80025b4:	2300      	movs	r3, #0
 80025b6:	613b      	str	r3, [r7, #16]
 80025b8:	e024      	b.n	8002604 <OV5640_SetPixelFormat+0x10c>
        {
          if (ret != OV5640_ERROR)
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025c0:	d01d      	beq.n	80025fe <OV5640_SetPixelFormat+0x106>
          {
            tmp = (uint8_t)OV5640_PF_RGB888[index][1];
 80025c2:	4a93      	ldr	r2, [pc, #588]	; (8002810 <OV5640_SetPixelFormat+0x318>)
 80025c4:	693b      	ldr	r3, [r7, #16]
 80025c6:	009b      	lsls	r3, r3, #2
 80025c8:	4413      	add	r3, r2
 80025ca:	885b      	ldrh	r3, [r3, #2]
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_RGB888[index][0], &tmp, 1) != OV5640_OK)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	f103 0018 	add.w	r0, r3, #24
 80025d6:	4a8e      	ldr	r2, [pc, #568]	; (8002810 <OV5640_SetPixelFormat+0x318>)
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 80025de:	f107 020f 	add.w	r2, r7, #15
 80025e2:	2301      	movs	r3, #1
 80025e4:	f000 fabb 	bl	8002b5e <ov5640_write_reg>
 80025e8:	4603      	mov	r3, r0
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d003      	beq.n	80025f6 <OV5640_SetPixelFormat+0xfe>
            {
              ret = OV5640_ERROR;
 80025ee:	f04f 33ff 	mov.w	r3, #4294967295
 80025f2:	617b      	str	r3, [r7, #20]
 80025f4:	e003      	b.n	80025fe <OV5640_SetPixelFormat+0x106>
            }
            else
            {
              (void)OV5640_Delay(pObj, 1);
 80025f6:	2101      	movs	r1, #1
 80025f8:	6878      	ldr	r0, [r7, #4]
 80025fa:	f000 fa4d 	bl	8002a98 <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_RGB888) / 4U); index++)
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	3301      	adds	r3, #1
 8002602:	613b      	str	r3, [r7, #16]
 8002604:	693b      	ldr	r3, [r7, #16]
 8002606:	2b01      	cmp	r3, #1
 8002608:	d9d7      	bls.n	80025ba <OV5640_SetPixelFormat+0xc2>
            }
          }
        }
        break;
 800260a:	e083      	b.n	8002714 <OV5640_SetPixelFormat+0x21c>

      case OV5640_Y8:
        for (index = 0; index < (sizeof(OV5640_PF_Y8) / 4U); index++)
 800260c:	2300      	movs	r3, #0
 800260e:	613b      	str	r3, [r7, #16]
 8002610:	e024      	b.n	800265c <OV5640_SetPixelFormat+0x164>
        {
          if (ret != OV5640_ERROR)
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002618:	d01d      	beq.n	8002656 <OV5640_SetPixelFormat+0x15e>
          {
            tmp = (uint8_t)OV5640_PF_Y8[index][1];
 800261a:	4a7e      	ldr	r2, [pc, #504]	; (8002814 <OV5640_SetPixelFormat+0x31c>)
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	009b      	lsls	r3, r3, #2
 8002620:	4413      	add	r3, r2
 8002622:	885b      	ldrh	r3, [r3, #2]
 8002624:	b2db      	uxtb	r3, r3
 8002626:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_Y8[index][0], &tmp, 1) != OV5640_OK)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	f103 0018 	add.w	r0, r3, #24
 800262e:	4a79      	ldr	r2, [pc, #484]	; (8002814 <OV5640_SetPixelFormat+0x31c>)
 8002630:	693b      	ldr	r3, [r7, #16]
 8002632:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8002636:	f107 020f 	add.w	r2, r7, #15
 800263a:	2301      	movs	r3, #1
 800263c:	f000 fa8f 	bl	8002b5e <ov5640_write_reg>
 8002640:	4603      	mov	r3, r0
 8002642:	2b00      	cmp	r3, #0
 8002644:	d003      	beq.n	800264e <OV5640_SetPixelFormat+0x156>
            {
              ret = OV5640_ERROR;
 8002646:	f04f 33ff 	mov.w	r3, #4294967295
 800264a:	617b      	str	r3, [r7, #20]
 800264c:	e003      	b.n	8002656 <OV5640_SetPixelFormat+0x15e>
            }
            else
            {
              (void)OV5640_Delay(pObj, 1);
 800264e:	2101      	movs	r1, #1
 8002650:	6878      	ldr	r0, [r7, #4]
 8002652:	f000 fa21 	bl	8002a98 <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_Y8) / 4U); index++)
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	3301      	adds	r3, #1
 800265a:	613b      	str	r3, [r7, #16]
 800265c:	693b      	ldr	r3, [r7, #16]
 800265e:	2b01      	cmp	r3, #1
 8002660:	d9d7      	bls.n	8002612 <OV5640_SetPixelFormat+0x11a>
            }
          }
        }
        break;
 8002662:	e057      	b.n	8002714 <OV5640_SetPixelFormat+0x21c>

      case OV5640_JPEG:
        for (index = 0; index < (sizeof(OV5640_PF_JPEG) / 4U); index++)
 8002664:	2300      	movs	r3, #0
 8002666:	613b      	str	r3, [r7, #16]
 8002668:	e024      	b.n	80026b4 <OV5640_SetPixelFormat+0x1bc>
        {
          if (ret != OV5640_ERROR)
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002670:	d01d      	beq.n	80026ae <OV5640_SetPixelFormat+0x1b6>
          {
            tmp = (uint8_t)OV5640_PF_JPEG[index][1];
 8002672:	4a69      	ldr	r2, [pc, #420]	; (8002818 <OV5640_SetPixelFormat+0x320>)
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	009b      	lsls	r3, r3, #2
 8002678:	4413      	add	r3, r2
 800267a:	885b      	ldrh	r3, [r3, #2]
 800267c:	b2db      	uxtb	r3, r3
 800267e:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_JPEG[index][0], &tmp, 1) != OV5640_OK)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	f103 0018 	add.w	r0, r3, #24
 8002686:	4a64      	ldr	r2, [pc, #400]	; (8002818 <OV5640_SetPixelFormat+0x320>)
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 800268e:	f107 020f 	add.w	r2, r7, #15
 8002692:	2301      	movs	r3, #1
 8002694:	f000 fa63 	bl	8002b5e <ov5640_write_reg>
 8002698:	4603      	mov	r3, r0
 800269a:	2b00      	cmp	r3, #0
 800269c:	d003      	beq.n	80026a6 <OV5640_SetPixelFormat+0x1ae>
            {
              ret = OV5640_ERROR;
 800269e:	f04f 33ff 	mov.w	r3, #4294967295
 80026a2:	617b      	str	r3, [r7, #20]
 80026a4:	e003      	b.n	80026ae <OV5640_SetPixelFormat+0x1b6>
            }
            else
            {
              (void)OV5640_Delay(pObj, 1);
 80026a6:	2101      	movs	r1, #1
 80026a8:	6878      	ldr	r0, [r7, #4]
 80026aa:	f000 f9f5 	bl	8002a98 <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_JPEG) / 4U); index++)
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	3301      	adds	r3, #1
 80026b2:	613b      	str	r3, [r7, #16]
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	d9d7      	bls.n	800266a <OV5640_SetPixelFormat+0x172>
            }
          }
        }
        break;
 80026ba:	e02b      	b.n	8002714 <OV5640_SetPixelFormat+0x21c>

      case OV5640_RGB565:
      default:
        for (index = 0; index < (sizeof(OV5640_PF_RGB565) / 4U); index++)
 80026bc:	2300      	movs	r3, #0
 80026be:	613b      	str	r3, [r7, #16]
 80026c0:	e024      	b.n	800270c <OV5640_SetPixelFormat+0x214>
        {
          if (ret != OV5640_ERROR)
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026c8:	d01d      	beq.n	8002706 <OV5640_SetPixelFormat+0x20e>
          {
            tmp = (uint8_t)OV5640_PF_RGB565[index][1];
 80026ca:	4a54      	ldr	r2, [pc, #336]	; (800281c <OV5640_SetPixelFormat+0x324>)
 80026cc:	693b      	ldr	r3, [r7, #16]
 80026ce:	009b      	lsls	r3, r3, #2
 80026d0:	4413      	add	r3, r2
 80026d2:	885b      	ldrh	r3, [r3, #2]
 80026d4:	b2db      	uxtb	r3, r3
 80026d6:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_RGB565[index][0], &tmp, 1) != OV5640_OK)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	f103 0018 	add.w	r0, r3, #24
 80026de:	4a4f      	ldr	r2, [pc, #316]	; (800281c <OV5640_SetPixelFormat+0x324>)
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 80026e6:	f107 020f 	add.w	r2, r7, #15
 80026ea:	2301      	movs	r3, #1
 80026ec:	f000 fa37 	bl	8002b5e <ov5640_write_reg>
 80026f0:	4603      	mov	r3, r0
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d003      	beq.n	80026fe <OV5640_SetPixelFormat+0x206>
            {
              ret = OV5640_ERROR;
 80026f6:	f04f 33ff 	mov.w	r3, #4294967295
 80026fa:	617b      	str	r3, [r7, #20]
 80026fc:	e003      	b.n	8002706 <OV5640_SetPixelFormat+0x20e>
            }
            else
            {
              (void)OV5640_Delay(pObj, 1);
 80026fe:	2101      	movs	r1, #1
 8002700:	6878      	ldr	r0, [r7, #4]
 8002702:	f000 f9c9 	bl	8002a98 <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_RGB565) / 4U); index++)
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	3301      	adds	r3, #1
 800270a:	613b      	str	r3, [r7, #16]
 800270c:	693b      	ldr	r3, [r7, #16]
 800270e:	2b01      	cmp	r3, #1
 8002710:	d9d7      	bls.n	80026c2 <OV5640_SetPixelFormat+0x1ca>
            }
          }
        }
        break;
 8002712:	bf00      	nop

    }

    if (PixelFormat == OV5640_JPEG)
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	2b08      	cmp	r3, #8
 8002718:	d173      	bne.n	8002802 <OV5640_SetPixelFormat+0x30a>
    {
      if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp, 1) != OV5640_OK)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	f103 0018 	add.w	r0, r3, #24
 8002720:	f107 020f 	add.w	r2, r7, #15
 8002724:	2301      	movs	r3, #1
 8002726:	f643 0121 	movw	r1, #14369	; 0x3821
 800272a:	f000 fa01 	bl	8002b30 <ov5640_read_reg>
 800272e:	4603      	mov	r3, r0
 8002730:	2b00      	cmp	r3, #0
 8002732:	d003      	beq.n	800273c <OV5640_SetPixelFormat+0x244>
      {
        ret = OV5640_ERROR;
 8002734:	f04f 33ff 	mov.w	r3, #4294967295
 8002738:	617b      	str	r3, [r7, #20]
 800273a:	e062      	b.n	8002802 <OV5640_SetPixelFormat+0x30a>
      }
      else
      {
        tmp |= (1 << 5);
 800273c:	7bfb      	ldrb	r3, [r7, #15]
 800273e:	f043 0320 	orr.w	r3, r3, #32
 8002742:	b2db      	uxtb	r3, r3
 8002744:	73fb      	strb	r3, [r7, #15]
        if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp, 1) != OV5640_OK)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	f103 0018 	add.w	r0, r3, #24
 800274c:	f107 020f 	add.w	r2, r7, #15
 8002750:	2301      	movs	r3, #1
 8002752:	f643 0121 	movw	r1, #14369	; 0x3821
 8002756:	f000 fa02 	bl	8002b5e <ov5640_write_reg>
 800275a:	4603      	mov	r3, r0
 800275c:	2b00      	cmp	r3, #0
 800275e:	d003      	beq.n	8002768 <OV5640_SetPixelFormat+0x270>
        {
          ret = OV5640_ERROR;
 8002760:	f04f 33ff 	mov.w	r3, #4294967295
 8002764:	617b      	str	r3, [r7, #20]
 8002766:	e04c      	b.n	8002802 <OV5640_SetPixelFormat+0x30a>
        }
        else
        {
          if (ov5640_read_reg(&pObj->Ctx, OV5640_SYSREM_RESET02, &tmp, 1) != OV5640_OK)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	f103 0018 	add.w	r0, r3, #24
 800276e:	f107 020f 	add.w	r2, r7, #15
 8002772:	2301      	movs	r3, #1
 8002774:	f243 0102 	movw	r1, #12290	; 0x3002
 8002778:	f000 f9da 	bl	8002b30 <ov5640_read_reg>
 800277c:	4603      	mov	r3, r0
 800277e:	2b00      	cmp	r3, #0
 8002780:	d003      	beq.n	800278a <OV5640_SetPixelFormat+0x292>
          {
            ret = OV5640_ERROR;
 8002782:	f04f 33ff 	mov.w	r3, #4294967295
 8002786:	617b      	str	r3, [r7, #20]
 8002788:	e03b      	b.n	8002802 <OV5640_SetPixelFormat+0x30a>
          }
          else
          {
            tmp &= ~((1 << 4) | (1 << 3) | (1 << 2));
 800278a:	7bfb      	ldrb	r3, [r7, #15]
 800278c:	f023 031c 	bic.w	r3, r3, #28
 8002790:	b2db      	uxtb	r3, r3
 8002792:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_SYSREM_RESET02, &tmp, 1) != OV5640_OK)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	f103 0018 	add.w	r0, r3, #24
 800279a:	f107 020f 	add.w	r2, r7, #15
 800279e:	2301      	movs	r3, #1
 80027a0:	f243 0102 	movw	r1, #12290	; 0x3002
 80027a4:	f000 f9db 	bl	8002b5e <ov5640_write_reg>
 80027a8:	4603      	mov	r3, r0
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d003      	beq.n	80027b6 <OV5640_SetPixelFormat+0x2be>
            {
              ret = OV5640_ERROR;
 80027ae:	f04f 33ff 	mov.w	r3, #4294967295
 80027b2:	617b      	str	r3, [r7, #20]
 80027b4:	e025      	b.n	8002802 <OV5640_SetPixelFormat+0x30a>
            }
            else
            {
              if (ov5640_read_reg(&pObj->Ctx, OV5640_CLOCK_ENABLE02, &tmp, 1) != OV5640_OK)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	f103 0018 	add.w	r0, r3, #24
 80027bc:	f107 020f 	add.w	r2, r7, #15
 80027c0:	2301      	movs	r3, #1
 80027c2:	f243 0106 	movw	r1, #12294	; 0x3006
 80027c6:	f000 f9b3 	bl	8002b30 <ov5640_read_reg>
 80027ca:	4603      	mov	r3, r0
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d003      	beq.n	80027d8 <OV5640_SetPixelFormat+0x2e0>
              {
                ret = OV5640_ERROR;
 80027d0:	f04f 33ff 	mov.w	r3, #4294967295
 80027d4:	617b      	str	r3, [r7, #20]
 80027d6:	e014      	b.n	8002802 <OV5640_SetPixelFormat+0x30a>
              }
              else
              {
                tmp |= ((1 << 5) | (1 << 3));
 80027d8:	7bfb      	ldrb	r3, [r7, #15]
 80027da:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 80027de:	b2db      	uxtb	r3, r3
 80027e0:	73fb      	strb	r3, [r7, #15]
                if (ov5640_write_reg(&pObj->Ctx, OV5640_CLOCK_ENABLE02, &tmp, 1) != OV5640_OK)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	f103 0018 	add.w	r0, r3, #24
 80027e8:	f107 020f 	add.w	r2, r7, #15
 80027ec:	2301      	movs	r3, #1
 80027ee:	f243 0106 	movw	r1, #12294	; 0x3006
 80027f2:	f000 f9b4 	bl	8002b5e <ov5640_write_reg>
 80027f6:	4603      	mov	r3, r0
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d002      	beq.n	8002802 <OV5640_SetPixelFormat+0x30a>
                {
                  ret = OV5640_ERROR;
 80027fc:	f04f 33ff 	mov.w	r3, #4294967295
 8002800:	617b      	str	r3, [r7, #20]
          }
        }
      }
    }
  }
  return ret;
 8002802:	697b      	ldr	r3, [r7, #20]
}
 8002804:	4618      	mov	r0, r3
 8002806:	3718      	adds	r7, #24
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}
 800280c:	08008bc4 	.word	0x08008bc4
 8002810:	08008bcc 	.word	0x08008bcc
 8002814:	08008bd4 	.word	0x08008bd4
 8002818:	08008bdc 	.word	0x08008bdc
 800281c:	08008be4 	.word	0x08008be4

08002820 <OV5640_SetResolution>:
  * @param  pObj  pointer to component object
  * @param  Resolution  Camera resolution
  * @retval Component status
  */
int32_t OV5640_SetResolution(OV5640_Object_t *pObj, uint32_t Resolution)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b086      	sub	sp, #24
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
 8002828:	6039      	str	r1, [r7, #0]
  int32_t ret = OV5640_OK;
 800282a:	2300      	movs	r3, #0
 800282c:	617b      	str	r3, [r7, #20]
    {OV5640_TIMING_DVPVO_HIGH, 0x00},
    {OV5640_TIMING_DVPVO_LOW, 0x78},
  };

  /* Check if resolution is supported */
  if (Resolution > OV5640_R800x480)
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	2b04      	cmp	r3, #4
 8002832:	d903      	bls.n	800283c <OV5640_SetResolution+0x1c>
  {
    ret = OV5640_ERROR;
 8002834:	f04f 33ff 	mov.w	r3, #4294967295
 8002838:	617b      	str	r3, [r7, #20]
 800283a:	e0d8      	b.n	80029ee <OV5640_SetResolution+0x1ce>
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	2b04      	cmp	r3, #4
 8002840:	f200 80d1 	bhi.w	80029e6 <OV5640_SetResolution+0x1c6>
 8002844:	a201      	add	r2, pc, #4	; (adr r2, 800284c <OV5640_SetResolution+0x2c>)
 8002846:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800284a:	bf00      	nop
 800284c:	08002861 	.word	0x08002861
 8002850:	080028af 	.word	0x080028af
 8002854:	080028fd 	.word	0x080028fd
 8002858:	0800294b 	.word	0x0800294b
 800285c:	08002999 	.word	0x08002999
  {
    /* Initialize OV5640 */
    switch (Resolution)
    {
      case OV5640_R160x120:
        for (index = 0; index < (sizeof(OV5640_QQVGA) / 4U); index++)
 8002860:	2300      	movs	r3, #0
 8002862:	613b      	str	r3, [r7, #16]
 8002864:	e01f      	b.n	80028a6 <OV5640_SetResolution+0x86>
        {
          if (ret != OV5640_ERROR)
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	f1b3 3fff 	cmp.w	r3, #4294967295
 800286c:	d018      	beq.n	80028a0 <OV5640_SetResolution+0x80>
          {
            tmp = (uint8_t)OV5640_QQVGA[index][1];
 800286e:	4a62      	ldr	r2, [pc, #392]	; (80029f8 <OV5640_SetResolution+0x1d8>)
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	009b      	lsls	r3, r3, #2
 8002874:	4413      	add	r3, r2
 8002876:	885b      	ldrh	r3, [r3, #2]
 8002878:	b2db      	uxtb	r3, r3
 800287a:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_QQVGA[index][0], &tmp, 1) != OV5640_OK)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	f103 0018 	add.w	r0, r3, #24
 8002882:	4a5d      	ldr	r2, [pc, #372]	; (80029f8 <OV5640_SetResolution+0x1d8>)
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 800288a:	f107 020f 	add.w	r2, r7, #15
 800288e:	2301      	movs	r3, #1
 8002890:	f000 f965 	bl	8002b5e <ov5640_write_reg>
 8002894:	4603      	mov	r3, r0
 8002896:	2b00      	cmp	r3, #0
 8002898:	d002      	beq.n	80028a0 <OV5640_SetResolution+0x80>
            {
              ret = OV5640_ERROR;
 800289a:	f04f 33ff 	mov.w	r3, #4294967295
 800289e:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_QQVGA) / 4U); index++)
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	3301      	adds	r3, #1
 80028a4:	613b      	str	r3, [r7, #16]
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	2b03      	cmp	r3, #3
 80028aa:	d9dc      	bls.n	8002866 <OV5640_SetResolution+0x46>
            }
          }
        }
        break;
 80028ac:	e09f      	b.n	80029ee <OV5640_SetResolution+0x1ce>
      case OV5640_R320x240:
        for (index = 0; index < (sizeof(OV5640_QVGA) / 4U); index++)
 80028ae:	2300      	movs	r3, #0
 80028b0:	613b      	str	r3, [r7, #16]
 80028b2:	e01f      	b.n	80028f4 <OV5640_SetResolution+0xd4>
        {
          if (ret != OV5640_ERROR)
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028ba:	d018      	beq.n	80028ee <OV5640_SetResolution+0xce>
          {
            tmp = (uint8_t)OV5640_QVGA[index][1];
 80028bc:	4a4f      	ldr	r2, [pc, #316]	; (80029fc <OV5640_SetResolution+0x1dc>)
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	009b      	lsls	r3, r3, #2
 80028c2:	4413      	add	r3, r2
 80028c4:	885b      	ldrh	r3, [r3, #2]
 80028c6:	b2db      	uxtb	r3, r3
 80028c8:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_QVGA[index][0], &tmp, 1) != OV5640_OK)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	f103 0018 	add.w	r0, r3, #24
 80028d0:	4a4a      	ldr	r2, [pc, #296]	; (80029fc <OV5640_SetResolution+0x1dc>)
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 80028d8:	f107 020f 	add.w	r2, r7, #15
 80028dc:	2301      	movs	r3, #1
 80028de:	f000 f93e 	bl	8002b5e <ov5640_write_reg>
 80028e2:	4603      	mov	r3, r0
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d002      	beq.n	80028ee <OV5640_SetResolution+0xce>
            {
              ret = OV5640_ERROR;
 80028e8:	f04f 33ff 	mov.w	r3, #4294967295
 80028ec:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_QVGA) / 4U); index++)
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	3301      	adds	r3, #1
 80028f2:	613b      	str	r3, [r7, #16]
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	2b03      	cmp	r3, #3
 80028f8:	d9dc      	bls.n	80028b4 <OV5640_SetResolution+0x94>
            }
          }
        }
        break;
 80028fa:	e078      	b.n	80029ee <OV5640_SetResolution+0x1ce>
      case OV5640_R480x272:
        for (index = 0; index < (sizeof(OV5640_480x272) / 4U); index++)
 80028fc:	2300      	movs	r3, #0
 80028fe:	613b      	str	r3, [r7, #16]
 8002900:	e01f      	b.n	8002942 <OV5640_SetResolution+0x122>
        {
          if (ret != OV5640_ERROR)
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002908:	d018      	beq.n	800293c <OV5640_SetResolution+0x11c>
          {
            tmp = (uint8_t)OV5640_480x272[index][1];
 800290a:	4a3d      	ldr	r2, [pc, #244]	; (8002a00 <OV5640_SetResolution+0x1e0>)
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	009b      	lsls	r3, r3, #2
 8002910:	4413      	add	r3, r2
 8002912:	885b      	ldrh	r3, [r3, #2]
 8002914:	b2db      	uxtb	r3, r3
 8002916:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_480x272[index][0], &tmp, 1) != OV5640_OK)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	f103 0018 	add.w	r0, r3, #24
 800291e:	4a38      	ldr	r2, [pc, #224]	; (8002a00 <OV5640_SetResolution+0x1e0>)
 8002920:	693b      	ldr	r3, [r7, #16]
 8002922:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8002926:	f107 020f 	add.w	r2, r7, #15
 800292a:	2301      	movs	r3, #1
 800292c:	f000 f917 	bl	8002b5e <ov5640_write_reg>
 8002930:	4603      	mov	r3, r0
 8002932:	2b00      	cmp	r3, #0
 8002934:	d002      	beq.n	800293c <OV5640_SetResolution+0x11c>
            {
              ret = OV5640_ERROR;
 8002936:	f04f 33ff 	mov.w	r3, #4294967295
 800293a:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_480x272) / 4U); index++)
 800293c:	693b      	ldr	r3, [r7, #16]
 800293e:	3301      	adds	r3, #1
 8002940:	613b      	str	r3, [r7, #16]
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	2b03      	cmp	r3, #3
 8002946:	d9dc      	bls.n	8002902 <OV5640_SetResolution+0xe2>
            }
          }
        }
        break;
 8002948:	e051      	b.n	80029ee <OV5640_SetResolution+0x1ce>
      case OV5640_R640x480:
        for (index = 0; index < (sizeof(OV5640_VGA) / 4U); index++)
 800294a:	2300      	movs	r3, #0
 800294c:	613b      	str	r3, [r7, #16]
 800294e:	e01f      	b.n	8002990 <OV5640_SetResolution+0x170>
        {
          if (ret != OV5640_ERROR)
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002956:	d018      	beq.n	800298a <OV5640_SetResolution+0x16a>
          {
            tmp = (uint8_t)OV5640_VGA[index][1];
 8002958:	4a2a      	ldr	r2, [pc, #168]	; (8002a04 <OV5640_SetResolution+0x1e4>)
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	009b      	lsls	r3, r3, #2
 800295e:	4413      	add	r3, r2
 8002960:	885b      	ldrh	r3, [r3, #2]
 8002962:	b2db      	uxtb	r3, r3
 8002964:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_VGA[index][0], &tmp, 1) != OV5640_OK)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	f103 0018 	add.w	r0, r3, #24
 800296c:	4a25      	ldr	r2, [pc, #148]	; (8002a04 <OV5640_SetResolution+0x1e4>)
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8002974:	f107 020f 	add.w	r2, r7, #15
 8002978:	2301      	movs	r3, #1
 800297a:	f000 f8f0 	bl	8002b5e <ov5640_write_reg>
 800297e:	4603      	mov	r3, r0
 8002980:	2b00      	cmp	r3, #0
 8002982:	d002      	beq.n	800298a <OV5640_SetResolution+0x16a>
            {
              ret = OV5640_ERROR;
 8002984:	f04f 33ff 	mov.w	r3, #4294967295
 8002988:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_VGA) / 4U); index++)
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	3301      	adds	r3, #1
 800298e:	613b      	str	r3, [r7, #16]
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	2b03      	cmp	r3, #3
 8002994:	d9dc      	bls.n	8002950 <OV5640_SetResolution+0x130>
            }
          }
        }
        break;
 8002996:	e02a      	b.n	80029ee <OV5640_SetResolution+0x1ce>
      case OV5640_R800x480:
        for (index = 0; index < (sizeof(OV5640_WVGA) / 4U); index++)
 8002998:	2300      	movs	r3, #0
 800299a:	613b      	str	r3, [r7, #16]
 800299c:	e01f      	b.n	80029de <OV5640_SetResolution+0x1be>
        {
          if (ret != OV5640_ERROR)
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029a4:	d018      	beq.n	80029d8 <OV5640_SetResolution+0x1b8>
          {
            tmp = (uint8_t)OV5640_WVGA[index][1];
 80029a6:	4a18      	ldr	r2, [pc, #96]	; (8002a08 <OV5640_SetResolution+0x1e8>)
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	009b      	lsls	r3, r3, #2
 80029ac:	4413      	add	r3, r2
 80029ae:	885b      	ldrh	r3, [r3, #2]
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_WVGA[index][0], &tmp, 1) != OV5640_OK)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	f103 0018 	add.w	r0, r3, #24
 80029ba:	4a13      	ldr	r2, [pc, #76]	; (8002a08 <OV5640_SetResolution+0x1e8>)
 80029bc:	693b      	ldr	r3, [r7, #16]
 80029be:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 80029c2:	f107 020f 	add.w	r2, r7, #15
 80029c6:	2301      	movs	r3, #1
 80029c8:	f000 f8c9 	bl	8002b5e <ov5640_write_reg>
 80029cc:	4603      	mov	r3, r0
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d002      	beq.n	80029d8 <OV5640_SetResolution+0x1b8>
            {
              ret = OV5640_ERROR;
 80029d2:	f04f 33ff 	mov.w	r3, #4294967295
 80029d6:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_WVGA) / 4U); index++)
 80029d8:	693b      	ldr	r3, [r7, #16]
 80029da:	3301      	adds	r3, #1
 80029dc:	613b      	str	r3, [r7, #16]
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	2b03      	cmp	r3, #3
 80029e2:	d9dc      	bls.n	800299e <OV5640_SetResolution+0x17e>
            }
          }
        }
        break;
 80029e4:	e003      	b.n	80029ee <OV5640_SetResolution+0x1ce>
      default:
        ret = OV5640_ERROR;
 80029e6:	f04f 33ff 	mov.w	r3, #4294967295
 80029ea:	617b      	str	r3, [r7, #20]
        break;
 80029ec:	bf00      	nop
    }
  }

  return ret;
 80029ee:	697b      	ldr	r3, [r7, #20]
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	3718      	adds	r7, #24
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}
 80029f8:	08008bec 	.word	0x08008bec
 80029fc:	08008bfc 	.word	0x08008bfc
 8002a00:	08008c0c 	.word	0x08008c0c
 8002a04:	08008c1c 	.word	0x08008c1c
 8002a08:	08008c2c 	.word	0x08008c2c

08002a0c <OV5640_SetPolarities>:
  * @param  VsyncPolarity Polarity of the Vsync
  * @retval Component status
  */
int32_t OV5640_SetPolarities(OV5640_Object_t *pObj, uint32_t PclkPolarity, uint32_t HrefPolarity,
                             uint32_t VsyncPolarity)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b086      	sub	sp, #24
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	60f8      	str	r0, [r7, #12]
 8002a14:	60b9      	str	r1, [r7, #8]
 8002a16:	607a      	str	r2, [r7, #4]
 8002a18:	603b      	str	r3, [r7, #0]
  uint8_t tmp;
  int32_t ret = OV5640_OK;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	617b      	str	r3, [r7, #20]

  if ((pObj == NULL) || ((PclkPolarity != OV5640_POLARITY_PCLK_LOW) && (PclkPolarity != OV5640_POLARITY_PCLK_HIGH)) ||
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d011      	beq.n	8002a48 <OV5640_SetPolarities+0x3c>
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d002      	beq.n	8002a30 <OV5640_SetPolarities+0x24>
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	d10b      	bne.n	8002a48 <OV5640_SetPolarities+0x3c>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d002      	beq.n	8002a3c <OV5640_SetPolarities+0x30>
      ((HrefPolarity != OV5640_POLARITY_HREF_LOW) && (HrefPolarity != OV5640_POLARITY_HREF_HIGH)) ||
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	d105      	bne.n	8002a48 <OV5640_SetPolarities+0x3c>
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	2b01      	cmp	r3, #1
 8002a40:	d006      	beq.n	8002a50 <OV5640_SetPolarities+0x44>
      ((VsyncPolarity != OV5640_POLARITY_VSYNC_LOW) && (VsyncPolarity != OV5640_POLARITY_VSYNC_HIGH)))
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d003      	beq.n	8002a50 <OV5640_SetPolarities+0x44>
  {
    ret = OV5640_ERROR;
 8002a48:	f04f 33ff 	mov.w	r3, #4294967295
 8002a4c:	617b      	str	r3, [r7, #20]
 8002a4e:	e01e      	b.n	8002a8e <OV5640_SetPolarities+0x82>
  }
  else
  {
    tmp = (uint8_t)(PclkPolarity << 5U) | (HrefPolarity << 1U) | VsyncPolarity;
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	b2db      	uxtb	r3, r3
 8002a54:	015b      	lsls	r3, r3, #5
 8002a56:	b2da      	uxtb	r2, r3
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	b2db      	uxtb	r3, r3
 8002a5c:	005b      	lsls	r3, r3, #1
 8002a5e:	b2db      	uxtb	r3, r3
 8002a60:	4313      	orrs	r3, r2
 8002a62:	b2da      	uxtb	r2, r3
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	b2db      	uxtb	r3, r3
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	b2db      	uxtb	r3, r3
 8002a6c:	74fb      	strb	r3, [r7, #19]

    if (ov5640_write_reg(&pObj->Ctx, OV5640_POLARITY_CTRL, &tmp, 1) != OV5640_OK)
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	f103 0018 	add.w	r0, r3, #24
 8002a74:	f107 0213 	add.w	r2, r7, #19
 8002a78:	2301      	movs	r3, #1
 8002a7a:	f244 7140 	movw	r1, #18240	; 0x4740
 8002a7e:	f000 f86e 	bl	8002b5e <ov5640_write_reg>
 8002a82:	4603      	mov	r3, r0
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d002      	beq.n	8002a8e <OV5640_SetPolarities+0x82>
    {
      ret = OV5640_ERROR;
 8002a88:	f04f 33ff 	mov.w	r3, #4294967295
 8002a8c:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8002a8e:	697b      	ldr	r3, [r7, #20]
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	3718      	adds	r7, #24
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}

08002a98 <OV5640_Delay>:
  * @param pObj   pointer to component object
  * @param Delay  specifies the delay time length, in milliseconds
  * @retval OV5640_OK
  */
static int32_t OV5640_Delay(OV5640_Object_t *pObj, uint32_t Delay)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b084      	sub	sp, #16
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
 8002aa0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  tickstart = pObj->IO.GetTick();
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	695b      	ldr	r3, [r3, #20]
 8002aa6:	4798      	blx	r3
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	60fb      	str	r3, [r7, #12]
  while ((pObj->IO.GetTick() - tickstart) < Delay)
 8002aac:	bf00      	nop
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	695b      	ldr	r3, [r3, #20]
 8002ab2:	4798      	blx	r3
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	461a      	mov	r2, r3
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	1ad3      	subs	r3, r2, r3
 8002abc:	683a      	ldr	r2, [r7, #0]
 8002abe:	429a      	cmp	r2, r3
 8002ac0:	d8f5      	bhi.n	8002aae <OV5640_Delay+0x16>
  {
  }
  return OV5640_OK;
 8002ac2:	2300      	movs	r3, #0
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	3710      	adds	r7, #16
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}

08002acc <OV5640_ReadRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OV5640_ReadRegWrap(void *handle, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8002acc:	b590      	push	{r4, r7, lr}
 8002ace:	b087      	sub	sp, #28
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	60f8      	str	r0, [r7, #12]
 8002ad4:	607a      	str	r2, [r7, #4]
 8002ad6:	461a      	mov	r2, r3
 8002ad8:	460b      	mov	r3, r1
 8002ada:	817b      	strh	r3, [r7, #10]
 8002adc:	4613      	mov	r3, r2
 8002ade:	813b      	strh	r3, [r7, #8]
  OV5640_Object_t *pObj = (OV5640_Object_t *)handle;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	691c      	ldr	r4, [r3, #16]
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	8918      	ldrh	r0, [r3, #8]
 8002aec:	893b      	ldrh	r3, [r7, #8]
 8002aee:	8979      	ldrh	r1, [r7, #10]
 8002af0:	687a      	ldr	r2, [r7, #4]
 8002af2:	47a0      	blx	r4
 8002af4:	4603      	mov	r3, r0
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	371c      	adds	r7, #28
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd90      	pop	{r4, r7, pc}

08002afe <OV5640_WriteRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OV5640_WriteRegWrap(void *handle, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8002afe:	b590      	push	{r4, r7, lr}
 8002b00:	b087      	sub	sp, #28
 8002b02:	af00      	add	r7, sp, #0
 8002b04:	60f8      	str	r0, [r7, #12]
 8002b06:	607a      	str	r2, [r7, #4]
 8002b08:	461a      	mov	r2, r3
 8002b0a:	460b      	mov	r3, r1
 8002b0c:	817b      	strh	r3, [r7, #10]
 8002b0e:	4613      	mov	r3, r2
 8002b10:	813b      	strh	r3, [r7, #8]
  OV5640_Object_t *pObj = (OV5640_Object_t *)handle;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	68dc      	ldr	r4, [r3, #12]
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	8918      	ldrh	r0, [r3, #8]
 8002b1e:	893b      	ldrh	r3, [r7, #8]
 8002b20:	8979      	ldrh	r1, [r7, #10]
 8002b22:	687a      	ldr	r2, [r7, #4]
 8002b24:	47a0      	blx	r4
 8002b26:	4603      	mov	r3, r0
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	371c      	adds	r7, #28
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd90      	pop	{r4, r7, pc}

08002b30 <ov5640_read_reg>:
  * @param  pdata Pointer to data buffer
  * @param  length Number of data to read
  * @retval Component status
  */
int32_t ov5640_read_reg(ov5640_ctx_t *ctx, uint16_t reg, uint8_t *pdata, uint16_t length)
{
 8002b30:	b590      	push	{r4, r7, lr}
 8002b32:	b085      	sub	sp, #20
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	60f8      	str	r0, [r7, #12]
 8002b38:	607a      	str	r2, [r7, #4]
 8002b3a:	461a      	mov	r2, r3
 8002b3c:	460b      	mov	r3, r1
 8002b3e:	817b      	strh	r3, [r7, #10]
 8002b40:	4613      	mov	r3, r2
 8002b42:	813b      	strh	r3, [r7, #8]
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	685c      	ldr	r4, [r3, #4]
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	6898      	ldr	r0, [r3, #8]
 8002b4c:	893b      	ldrh	r3, [r7, #8]
 8002b4e:	8979      	ldrh	r1, [r7, #10]
 8002b50:	687a      	ldr	r2, [r7, #4]
 8002b52:	47a0      	blx	r4
 8002b54:	4603      	mov	r3, r0
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	3714      	adds	r7, #20
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd90      	pop	{r4, r7, pc}

08002b5e <ov5640_write_reg>:
  * @param  pdata Pointer to data buffer
  * @param  length Number of data to write
  * @retval Component status
  */
int32_t ov5640_write_reg(ov5640_ctx_t *ctx, uint16_t reg, uint8_t *data, uint16_t length)
{
 8002b5e:	b590      	push	{r4, r7, lr}
 8002b60:	b085      	sub	sp, #20
 8002b62:	af00      	add	r7, sp, #0
 8002b64:	60f8      	str	r0, [r7, #12]
 8002b66:	607a      	str	r2, [r7, #4]
 8002b68:	461a      	mov	r2, r3
 8002b6a:	460b      	mov	r3, r1
 8002b6c:	817b      	strh	r3, [r7, #10]
 8002b6e:	4613      	mov	r3, r2
 8002b70:	813b      	strh	r3, [r7, #8]
  return ctx->WriteReg(ctx->handle, reg, data, length);
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681c      	ldr	r4, [r3, #0]
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	6898      	ldr	r0, [r3, #8]
 8002b7a:	893b      	ldrh	r3, [r7, #8]
 8002b7c:	8979      	ldrh	r1, [r7, #10]
 8002b7e:	687a      	ldr	r2, [r7, #4]
 8002b80:	47a0      	blx	r4
 8002b82:	4603      	mov	r3, r0
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	3714      	adds	r7, #20
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd90      	pop	{r4, r7, pc}

08002b8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b083      	sub	sp, #12
 8002b90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002b92:	4b0f      	ldr	r3, [pc, #60]	; (8002bd0 <HAL_MspInit+0x44>)
 8002b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b96:	4a0e      	ldr	r2, [pc, #56]	; (8002bd0 <HAL_MspInit+0x44>)
 8002b98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b9c:	6413      	str	r3, [r2, #64]	; 0x40
 8002b9e:	4b0c      	ldr	r3, [pc, #48]	; (8002bd0 <HAL_MspInit+0x44>)
 8002ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ba6:	607b      	str	r3, [r7, #4]
 8002ba8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002baa:	4b09      	ldr	r3, [pc, #36]	; (8002bd0 <HAL_MspInit+0x44>)
 8002bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bae:	4a08      	ldr	r2, [pc, #32]	; (8002bd0 <HAL_MspInit+0x44>)
 8002bb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002bb4:	6453      	str	r3, [r2, #68]	; 0x44
 8002bb6:	4b06      	ldr	r3, [pc, #24]	; (8002bd0 <HAL_MspInit+0x44>)
 8002bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bbe:	603b      	str	r3, [r7, #0]
 8002bc0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002bc2:	bf00      	nop
 8002bc4:	370c      	adds	r7, #12
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bcc:	4770      	bx	lr
 8002bce:	bf00      	nop
 8002bd0:	40023800 	.word	0x40023800

08002bd4 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b08e      	sub	sp, #56	; 0x38
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bdc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002be0:	2200      	movs	r2, #0
 8002be2:	601a      	str	r2, [r3, #0]
 8002be4:	605a      	str	r2, [r3, #4]
 8002be6:	609a      	str	r2, [r3, #8]
 8002be8:	60da      	str	r2, [r3, #12]
 8002bea:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a50      	ldr	r2, [pc, #320]	; (8002d34 <HAL_DCMI_MspInit+0x160>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	f040 809a 	bne.w	8002d2c <HAL_DCMI_MspInit+0x158>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8002bf8:	4b4f      	ldr	r3, [pc, #316]	; (8002d38 <HAL_DCMI_MspInit+0x164>)
 8002bfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bfc:	4a4e      	ldr	r2, [pc, #312]	; (8002d38 <HAL_DCMI_MspInit+0x164>)
 8002bfe:	f043 0301 	orr.w	r3, r3, #1
 8002c02:	6353      	str	r3, [r2, #52]	; 0x34
 8002c04:	4b4c      	ldr	r3, [pc, #304]	; (8002d38 <HAL_DCMI_MspInit+0x164>)
 8002c06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c08:	f003 0301 	and.w	r3, r3, #1
 8002c0c:	623b      	str	r3, [r7, #32]
 8002c0e:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002c10:	4b49      	ldr	r3, [pc, #292]	; (8002d38 <HAL_DCMI_MspInit+0x164>)
 8002c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c14:	4a48      	ldr	r2, [pc, #288]	; (8002d38 <HAL_DCMI_MspInit+0x164>)
 8002c16:	f043 0310 	orr.w	r3, r3, #16
 8002c1a:	6313      	str	r3, [r2, #48]	; 0x30
 8002c1c:	4b46      	ldr	r3, [pc, #280]	; (8002d38 <HAL_DCMI_MspInit+0x164>)
 8002c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c20:	f003 0310 	and.w	r3, r3, #16
 8002c24:	61fb      	str	r3, [r7, #28]
 8002c26:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c28:	4b43      	ldr	r3, [pc, #268]	; (8002d38 <HAL_DCMI_MspInit+0x164>)
 8002c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c2c:	4a42      	ldr	r2, [pc, #264]	; (8002d38 <HAL_DCMI_MspInit+0x164>)
 8002c2e:	f043 0308 	orr.w	r3, r3, #8
 8002c32:	6313      	str	r3, [r2, #48]	; 0x30
 8002c34:	4b40      	ldr	r3, [pc, #256]	; (8002d38 <HAL_DCMI_MspInit+0x164>)
 8002c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c38:	f003 0308 	and.w	r3, r3, #8
 8002c3c:	61bb      	str	r3, [r7, #24]
 8002c3e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002c40:	4b3d      	ldr	r3, [pc, #244]	; (8002d38 <HAL_DCMI_MspInit+0x164>)
 8002c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c44:	4a3c      	ldr	r2, [pc, #240]	; (8002d38 <HAL_DCMI_MspInit+0x164>)
 8002c46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c4a:	6313      	str	r3, [r2, #48]	; 0x30
 8002c4c:	4b3a      	ldr	r3, [pc, #232]	; (8002d38 <HAL_DCMI_MspInit+0x164>)
 8002c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c54:	617b      	str	r3, [r7, #20]
 8002c56:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002c58:	4b37      	ldr	r3, [pc, #220]	; (8002d38 <HAL_DCMI_MspInit+0x164>)
 8002c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c5c:	4a36      	ldr	r2, [pc, #216]	; (8002d38 <HAL_DCMI_MspInit+0x164>)
 8002c5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c62:	6313      	str	r3, [r2, #48]	; 0x30
 8002c64:	4b34      	ldr	r3, [pc, #208]	; (8002d38 <HAL_DCMI_MspInit+0x164>)
 8002c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c6c:	613b      	str	r3, [r7, #16]
 8002c6e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c70:	4b31      	ldr	r3, [pc, #196]	; (8002d38 <HAL_DCMI_MspInit+0x164>)
 8002c72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c74:	4a30      	ldr	r2, [pc, #192]	; (8002d38 <HAL_DCMI_MspInit+0x164>)
 8002c76:	f043 0301 	orr.w	r3, r3, #1
 8002c7a:	6313      	str	r3, [r2, #48]	; 0x30
 8002c7c:	4b2e      	ldr	r3, [pc, #184]	; (8002d38 <HAL_DCMI_MspInit+0x164>)
 8002c7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c80:	f003 0301 	and.w	r3, r3, #1
 8002c84:	60fb      	str	r3, [r7, #12]
 8002c86:	68fb      	ldr	r3, [r7, #12]
    PH9     ------> DCMI_D0
    PH11     ------> DCMI_D2
    PA6     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1
    */
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8002c88:	2360      	movs	r3, #96	; 0x60
 8002c8a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c8c:	2302      	movs	r3, #2
 8002c8e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c90:	2300      	movs	r3, #0
 8002c92:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c94:	2300      	movs	r3, #0
 8002c96:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002c98:	230d      	movs	r3, #13
 8002c9a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002c9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ca0:	4619      	mov	r1, r3
 8002ca2:	4826      	ldr	r0, [pc, #152]	; (8002d3c <HAL_DCMI_MspInit+0x168>)
 8002ca4:	f002 fe5a 	bl	800595c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8002ca8:	2308      	movs	r3, #8
 8002caa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cac:	2302      	movs	r3, #2
 8002cae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002cb8:	230d      	movs	r3, #13
 8002cba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8002cbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002cc0:	4619      	mov	r1, r3
 8002cc2:	481f      	ldr	r0, [pc, #124]	; (8002d40 <HAL_DCMI_MspInit+0x16c>)
 8002cc4:	f002 fe4a 	bl	800595c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8002cc8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ccc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cce:	2302      	movs	r3, #2
 8002cd0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002cda:	230d      	movs	r3, #13
 8002cdc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8002cde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ce2:	4619      	mov	r1, r3
 8002ce4:	4817      	ldr	r0, [pc, #92]	; (8002d44 <HAL_DCMI_MspInit+0x170>)
 8002ce6:	f002 fe39 	bl	800595c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8002cea:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 8002cee:	627b      	str	r3, [r7, #36]	; 0x24
                          |DCMI_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cf0:	2302      	movs	r3, #2
 8002cf2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002cfc:	230d      	movs	r3, #13
 8002cfe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002d00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d04:	4619      	mov	r1, r3
 8002d06:	4810      	ldr	r0, [pc, #64]	; (8002d48 <HAL_DCMI_MspInit+0x174>)
 8002d08:	f002 fe28 	bl	800595c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8002d0c:	2350      	movs	r3, #80	; 0x50
 8002d0e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d10:	2302      	movs	r3, #2
 8002d12:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d14:	2300      	movs	r3, #0
 8002d16:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002d1c:	230d      	movs	r3, #13
 8002d1e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d24:	4619      	mov	r1, r3
 8002d26:	4809      	ldr	r0, [pc, #36]	; (8002d4c <HAL_DCMI_MspInit+0x178>)
 8002d28:	f002 fe18 	bl	800595c <HAL_GPIO_Init>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 8002d2c:	bf00      	nop
 8002d2e:	3738      	adds	r7, #56	; 0x38
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}
 8002d34:	50050000 	.word	0x50050000
 8002d38:	40023800 	.word	0x40023800
 8002d3c:	40021000 	.word	0x40021000
 8002d40:	40020c00 	.word	0x40020c00
 8002d44:	40021800 	.word	0x40021800
 8002d48:	40021c00 	.word	0x40021c00
 8002d4c:	40020000 	.word	0x40020000

08002d50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b0ac      	sub	sp, #176	; 0xb0
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d58:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	601a      	str	r2, [r3, #0]
 8002d60:	605a      	str	r2, [r3, #4]
 8002d62:	609a      	str	r2, [r3, #8]
 8002d64:	60da      	str	r2, [r3, #12]
 8002d66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002d68:	f107 0318 	add.w	r3, r7, #24
 8002d6c:	2284      	movs	r2, #132	; 0x84
 8002d6e:	2100      	movs	r1, #0
 8002d70:	4618      	mov	r0, r3
 8002d72:	f005 fc2b 	bl	80085cc <memset>
  if(huart->Instance==USART1)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a32      	ldr	r2, [pc, #200]	; (8002e44 <HAL_UART_MspInit+0xf4>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d15c      	bne.n	8002e3a <HAL_UART_MspInit+0xea>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002d80:	2340      	movs	r3, #64	; 0x40
 8002d82:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002d84:	2300      	movs	r3, #0
 8002d86:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002d88:	f107 0318 	add.w	r3, r7, #24
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f004 f993 	bl	80070b8 <HAL_RCCEx_PeriphCLKConfig>
 8002d92:	4603      	mov	r3, r0
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d001      	beq.n	8002d9c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002d98:	f7ff faec 	bl	8002374 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002d9c:	4b2a      	ldr	r3, [pc, #168]	; (8002e48 <HAL_UART_MspInit+0xf8>)
 8002d9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002da0:	4a29      	ldr	r2, [pc, #164]	; (8002e48 <HAL_UART_MspInit+0xf8>)
 8002da2:	f043 0310 	orr.w	r3, r3, #16
 8002da6:	6453      	str	r3, [r2, #68]	; 0x44
 8002da8:	4b27      	ldr	r3, [pc, #156]	; (8002e48 <HAL_UART_MspInit+0xf8>)
 8002daa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dac:	f003 0310 	and.w	r3, r3, #16
 8002db0:	617b      	str	r3, [r7, #20]
 8002db2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002db4:	4b24      	ldr	r3, [pc, #144]	; (8002e48 <HAL_UART_MspInit+0xf8>)
 8002db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db8:	4a23      	ldr	r2, [pc, #140]	; (8002e48 <HAL_UART_MspInit+0xf8>)
 8002dba:	f043 0302 	orr.w	r3, r3, #2
 8002dbe:	6313      	str	r3, [r2, #48]	; 0x30
 8002dc0:	4b21      	ldr	r3, [pc, #132]	; (8002e48 <HAL_UART_MspInit+0xf8>)
 8002dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc4:	f003 0302 	and.w	r3, r3, #2
 8002dc8:	613b      	str	r3, [r7, #16]
 8002dca:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dcc:	4b1e      	ldr	r3, [pc, #120]	; (8002e48 <HAL_UART_MspInit+0xf8>)
 8002dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd0:	4a1d      	ldr	r2, [pc, #116]	; (8002e48 <HAL_UART_MspInit+0xf8>)
 8002dd2:	f043 0301 	orr.w	r3, r3, #1
 8002dd6:	6313      	str	r3, [r2, #48]	; 0x30
 8002dd8:	4b1b      	ldr	r3, [pc, #108]	; (8002e48 <HAL_UART_MspInit+0xf8>)
 8002dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ddc:	f003 0301 	and.w	r3, r3, #1
 8002de0:	60fb      	str	r3, [r7, #12]
 8002de2:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8002de4:	2380      	movs	r3, #128	; 0x80
 8002de6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dea:	2302      	movs	r3, #2
 8002dec:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002df0:	2300      	movs	r3, #0
 8002df2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002df6:	2300      	movs	r3, #0
 8002df8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002dfc:	2307      	movs	r3, #7
 8002dfe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8002e02:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002e06:	4619      	mov	r1, r3
 8002e08:	4810      	ldr	r0, [pc, #64]	; (8002e4c <HAL_UART_MspInit+0xfc>)
 8002e0a:	f002 fda7 	bl	800595c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8002e0e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e12:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e16:	2302      	movs	r3, #2
 8002e18:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e22:	2300      	movs	r3, #0
 8002e24:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002e28:	2307      	movs	r3, #7
 8002e2a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8002e2e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002e32:	4619      	mov	r1, r3
 8002e34:	4806      	ldr	r0, [pc, #24]	; (8002e50 <HAL_UART_MspInit+0x100>)
 8002e36:	f002 fd91 	bl	800595c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002e3a:	bf00      	nop
 8002e3c:	37b0      	adds	r7, #176	; 0xb0
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}
 8002e42:	bf00      	nop
 8002e44:	40011000 	.word	0x40011000
 8002e48:	40023800 	.word	0x40023800
 8002e4c:	40020400 	.word	0x40020400
 8002e50:	40020000 	.word	0x40020000

08002e54 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b086      	sub	sp, #24
 8002e58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8002e5a:	1d3b      	adds	r3, r7, #4
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	601a      	str	r2, [r3, #0]
 8002e60:	605a      	str	r2, [r3, #4]
 8002e62:	609a      	str	r2, [r3, #8]
 8002e64:	60da      	str	r2, [r3, #12]
 8002e66:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8002e68:	4b3a      	ldr	r3, [pc, #232]	; (8002f54 <HAL_FMC_MspInit+0x100>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d16d      	bne.n	8002f4c <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 8002e70:	4b38      	ldr	r3, [pc, #224]	; (8002f54 <HAL_FMC_MspInit+0x100>)
 8002e72:	2201      	movs	r2, #1
 8002e74:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002e76:	4b38      	ldr	r3, [pc, #224]	; (8002f58 <HAL_FMC_MspInit+0x104>)
 8002e78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e7a:	4a37      	ldr	r2, [pc, #220]	; (8002f58 <HAL_FMC_MspInit+0x104>)
 8002e7c:	f043 0301 	orr.w	r3, r3, #1
 8002e80:	6393      	str	r3, [r2, #56]	; 0x38
 8002e82:	4b35      	ldr	r3, [pc, #212]	; (8002f58 <HAL_FMC_MspInit+0x104>)
 8002e84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e86:	f003 0301 	and.w	r3, r3, #1
 8002e8a:	603b      	str	r3, [r7, #0]
 8002e8c:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8002e8e:	f64f 7383 	movw	r3, #65411	; 0xff83
 8002e92:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e94:	2302      	movs	r3, #2
 8002e96:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e9c:	2303      	movs	r3, #3
 8002e9e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002ea0:	230c      	movs	r3, #12
 8002ea2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002ea4:	1d3b      	adds	r3, r7, #4
 8002ea6:	4619      	mov	r1, r3
 8002ea8:	482c      	ldr	r0, [pc, #176]	; (8002f5c <HAL_FMC_MspInit+0x108>)
 8002eaa:	f002 fd57 	bl	800595c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8002eae:	f248 1333 	movw	r3, #33075	; 0x8133
 8002eb2:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eb4:	2302      	movs	r3, #2
 8002eb6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ebc:	2303      	movs	r3, #3
 8002ebe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002ec0:	230c      	movs	r3, #12
 8002ec2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002ec4:	1d3b      	adds	r3, r7, #4
 8002ec6:	4619      	mov	r1, r3
 8002ec8:	4825      	ldr	r0, [pc, #148]	; (8002f60 <HAL_FMC_MspInit+0x10c>)
 8002eca:	f002 fd47 	bl	800595c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8002ece:	f24c 7303 	movw	r3, #50947	; 0xc703
 8002ed2:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ed4:	2302      	movs	r3, #2
 8002ed6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002edc:	2303      	movs	r3, #3
 8002ede:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002ee0:	230c      	movs	r3, #12
 8002ee2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ee4:	1d3b      	adds	r3, r7, #4
 8002ee6:	4619      	mov	r1, r3
 8002ee8:	481e      	ldr	r0, [pc, #120]	; (8002f64 <HAL_FMC_MspInit+0x110>)
 8002eea:	f002 fd37 	bl	800595c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8002eee:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8002ef2:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ef4:	2302      	movs	r3, #2
 8002ef6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002efc:	2303      	movs	r3, #3
 8002efe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002f00:	230c      	movs	r3, #12
 8002f02:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002f04:	1d3b      	adds	r3, r7, #4
 8002f06:	4619      	mov	r1, r3
 8002f08:	4817      	ldr	r0, [pc, #92]	; (8002f68 <HAL_FMC_MspInit+0x114>)
 8002f0a:	f002 fd27 	bl	800595c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8002f0e:	2328      	movs	r3, #40	; 0x28
 8002f10:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f12:	2302      	movs	r3, #2
 8002f14:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f16:	2300      	movs	r3, #0
 8002f18:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f1a:	2303      	movs	r3, #3
 8002f1c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002f1e:	230c      	movs	r3, #12
 8002f20:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002f22:	1d3b      	adds	r3, r7, #4
 8002f24:	4619      	mov	r1, r3
 8002f26:	4811      	ldr	r0, [pc, #68]	; (8002f6c <HAL_FMC_MspInit+0x118>)
 8002f28:	f002 fd18 	bl	800595c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8002f2c:	2308      	movs	r3, #8
 8002f2e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f30:	2302      	movs	r3, #2
 8002f32:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f34:	2300      	movs	r3, #0
 8002f36:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f38:	2303      	movs	r3, #3
 8002f3a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002f3c:	230c      	movs	r3, #12
 8002f3e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8002f40:	1d3b      	adds	r3, r7, #4
 8002f42:	4619      	mov	r1, r3
 8002f44:	480a      	ldr	r0, [pc, #40]	; (8002f70 <HAL_FMC_MspInit+0x11c>)
 8002f46:	f002 fd09 	bl	800595c <HAL_GPIO_Init>
 8002f4a:	e000      	b.n	8002f4e <HAL_FMC_MspInit+0xfa>
    return;
 8002f4c:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8002f4e:	3718      	adds	r7, #24
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd80      	pop	{r7, pc}
 8002f54:	20000140 	.word	0x20000140
 8002f58:	40023800 	.word	0x40023800
 8002f5c:	40021000 	.word	0x40021000
 8002f60:	40021800 	.word	0x40021800
 8002f64:	40020c00 	.word	0x40020c00
 8002f68:	40021400 	.word	0x40021400
 8002f6c:	40021c00 	.word	0x40021c00
 8002f70:	40020800 	.word	0x40020800

08002f74 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b082      	sub	sp, #8
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8002f7c:	f7ff ff6a 	bl	8002e54 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8002f80:	bf00      	nop
 8002f82:	3708      	adds	r7, #8
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}

08002f88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002f8c:	e7fe      	b.n	8002f8c <NMI_Handler+0x4>

08002f8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f8e:	b480      	push	{r7}
 8002f90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f92:	e7fe      	b.n	8002f92 <HardFault_Handler+0x4>

08002f94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002f94:	b480      	push	{r7}
 8002f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002f98:	e7fe      	b.n	8002f98 <MemManage_Handler+0x4>

08002f9a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002f9a:	b480      	push	{r7}
 8002f9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002f9e:	e7fe      	b.n	8002f9e <BusFault_Handler+0x4>

08002fa0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002fa4:	e7fe      	b.n	8002fa4 <UsageFault_Handler+0x4>

08002fa6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002fa6:	b480      	push	{r7}
 8002fa8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002faa:	bf00      	nop
 8002fac:	46bd      	mov	sp, r7
 8002fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb2:	4770      	bx	lr

08002fb4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002fb8:	bf00      	nop
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc0:	4770      	bx	lr

08002fc2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002fc2:	b480      	push	{r7}
 8002fc4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002fc6:	bf00      	nop
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fce:	4770      	bx	lr

08002fd0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002fd4:	f000 fa32 	bl	800343c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002fd8:	bf00      	nop
 8002fda:	bd80      	pop	{r7, pc}

08002fdc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002fe0:	4b06      	ldr	r3, [pc, #24]	; (8002ffc <SystemInit+0x20>)
 8002fe2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fe6:	4a05      	ldr	r2, [pc, #20]	; (8002ffc <SystemInit+0x20>)
 8002fe8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002fec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002ff0:	bf00      	nop
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff8:	4770      	bx	lr
 8002ffa:	bf00      	nop
 8002ffc:	e000ed00 	.word	0xe000ed00

08003000 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003000:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003038 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003004:	480d      	ldr	r0, [pc, #52]	; (800303c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003006:	490e      	ldr	r1, [pc, #56]	; (8003040 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003008:	4a0e      	ldr	r2, [pc, #56]	; (8003044 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800300a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800300c:	e002      	b.n	8003014 <LoopCopyDataInit>

0800300e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800300e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003010:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003012:	3304      	adds	r3, #4

08003014 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003014:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003016:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003018:	d3f9      	bcc.n	800300e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800301a:	4a0b      	ldr	r2, [pc, #44]	; (8003048 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800301c:	4c0b      	ldr	r4, [pc, #44]	; (800304c <LoopFillZerobss+0x26>)
  movs r3, #0
 800301e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003020:	e001      	b.n	8003026 <LoopFillZerobss>

08003022 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003022:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003024:	3204      	adds	r2, #4

08003026 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003026:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003028:	d3fb      	bcc.n	8003022 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800302a:	f7ff ffd7 	bl	8002fdc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800302e:	f005 faa9 	bl	8008584 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003032:	f7fe fbeb 	bl	800180c <main>
  bx  lr    
 8003036:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003038:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800303c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003040:	200000f8 	.word	0x200000f8
  ldr r2, =_sidata
 8003044:	08008c6c 	.word	0x08008c6c
  ldr r2, =_sbss
 8003048:	200000f8 	.word	0x200000f8
  ldr r4, =_ebss
 800304c:	2000042c 	.word	0x2000042c

08003050 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003050:	e7fe      	b.n	8003050 <ADC_IRQHandler>
	...

08003054 <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 8003054:	b580      	push	{r7, lr}
 8003056:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8003058:	4b29      	ldr	r3, [pc, #164]	; (8003100 <BSP_SDRAM_Init+0xac>)
 800305a:	4a2a      	ldr	r2, [pc, #168]	; (8003104 <BSP_SDRAM_Init+0xb0>)
 800305c:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 800305e:	4b2a      	ldr	r3, [pc, #168]	; (8003108 <BSP_SDRAM_Init+0xb4>)
 8003060:	2202      	movs	r2, #2
 8003062:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 8003064:	4b28      	ldr	r3, [pc, #160]	; (8003108 <BSP_SDRAM_Init+0xb4>)
 8003066:	2207      	movs	r2, #7
 8003068:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 800306a:	4b27      	ldr	r3, [pc, #156]	; (8003108 <BSP_SDRAM_Init+0xb4>)
 800306c:	2204      	movs	r2, #4
 800306e:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 8003070:	4b25      	ldr	r3, [pc, #148]	; (8003108 <BSP_SDRAM_Init+0xb4>)
 8003072:	2207      	movs	r2, #7
 8003074:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 8003076:	4b24      	ldr	r3, [pc, #144]	; (8003108 <BSP_SDRAM_Init+0xb4>)
 8003078:	2202      	movs	r2, #2
 800307a:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 800307c:	4b22      	ldr	r3, [pc, #136]	; (8003108 <BSP_SDRAM_Init+0xb4>)
 800307e:	2202      	movs	r2, #2
 8003080:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 8003082:	4b21      	ldr	r3, [pc, #132]	; (8003108 <BSP_SDRAM_Init+0xb4>)
 8003084:	2202      	movs	r2, #2
 8003086:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8003088:	4b1d      	ldr	r3, [pc, #116]	; (8003100 <BSP_SDRAM_Init+0xac>)
 800308a:	2200      	movs	r2, #0
 800308c:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800308e:	4b1c      	ldr	r3, [pc, #112]	; (8003100 <BSP_SDRAM_Init+0xac>)
 8003090:	2200      	movs	r2, #0
 8003092:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8003094:	4b1a      	ldr	r3, [pc, #104]	; (8003100 <BSP_SDRAM_Init+0xac>)
 8003096:	2204      	movs	r2, #4
 8003098:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 800309a:	4b19      	ldr	r3, [pc, #100]	; (8003100 <BSP_SDRAM_Init+0xac>)
 800309c:	2210      	movs	r2, #16
 800309e:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80030a0:	4b17      	ldr	r3, [pc, #92]	; (8003100 <BSP_SDRAM_Init+0xac>)
 80030a2:	2240      	movs	r2, #64	; 0x40
 80030a4:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 80030a6:	4b16      	ldr	r3, [pc, #88]	; (8003100 <BSP_SDRAM_Init+0xac>)
 80030a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80030ac:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80030ae:	4b14      	ldr	r3, [pc, #80]	; (8003100 <BSP_SDRAM_Init+0xac>)
 80030b0:	2200      	movs	r2, #0
 80030b2:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 80030b4:	4b12      	ldr	r3, [pc, #72]	; (8003100 <BSP_SDRAM_Init+0xac>)
 80030b6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80030ba:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 80030bc:	4b10      	ldr	r3, [pc, #64]	; (8003100 <BSP_SDRAM_Init+0xac>)
 80030be:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80030c2:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 80030c4:	4b0e      	ldr	r3, [pc, #56]	; (8003100 <BSP_SDRAM_Init+0xac>)
 80030c6:	2200      	movs	r2, #0
 80030c8:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 80030ca:	2100      	movs	r1, #0
 80030cc:	480c      	ldr	r0, [pc, #48]	; (8003100 <BSP_SDRAM_Init+0xac>)
 80030ce:	f000 f87f 	bl	80031d0 <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 80030d2:	490d      	ldr	r1, [pc, #52]	; (8003108 <BSP_SDRAM_Init+0xb4>)
 80030d4:	480a      	ldr	r0, [pc, #40]	; (8003100 <BSP_SDRAM_Init+0xac>)
 80030d6:	f004 fbdf 	bl	8007898 <HAL_SDRAM_Init>
 80030da:	4603      	mov	r3, r0
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d003      	beq.n	80030e8 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 80030e0:	4b0a      	ldr	r3, [pc, #40]	; (800310c <BSP_SDRAM_Init+0xb8>)
 80030e2:	2201      	movs	r2, #1
 80030e4:	701a      	strb	r2, [r3, #0]
 80030e6:	e002      	b.n	80030ee <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 80030e8:	4b08      	ldr	r3, [pc, #32]	; (800310c <BSP_SDRAM_Init+0xb8>)
 80030ea:	2200      	movs	r2, #0
 80030ec:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 80030ee:	f240 6003 	movw	r0, #1539	; 0x603
 80030f2:	f000 f80d 	bl	8003110 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 80030f6:	4b05      	ldr	r3, [pc, #20]	; (800310c <BSP_SDRAM_Init+0xb8>)
 80030f8:	781b      	ldrb	r3, [r3, #0]
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	bd80      	pop	{r7, pc}
 80030fe:	bf00      	nop
 8003100:	200003f4 	.word	0x200003f4
 8003104:	a0000140 	.word	0xa0000140
 8003108:	20000144 	.word	0x20000144
 800310c:	20000084 	.word	0x20000084

08003110 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b084      	sub	sp, #16
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8003118:	2300      	movs	r3, #0
 800311a:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 800311c:	4b2a      	ldr	r3, [pc, #168]	; (80031c8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800311e:	2201      	movs	r2, #1
 8003120:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003122:	4b29      	ldr	r3, [pc, #164]	; (80031c8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003124:	2210      	movs	r2, #16
 8003126:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8003128:	4b27      	ldr	r3, [pc, #156]	; (80031c8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800312a:	2201      	movs	r2, #1
 800312c:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800312e:	4b26      	ldr	r3, [pc, #152]	; (80031c8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003130:	2200      	movs	r2, #0
 8003132:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003134:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003138:	4923      	ldr	r1, [pc, #140]	; (80031c8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800313a:	4824      	ldr	r0, [pc, #144]	; (80031cc <BSP_SDRAM_Initialization_sequence+0xbc>)
 800313c:	f004 fbe0 	bl	8007900 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8003140:	2001      	movs	r0, #1
 8003142:	f000 f99b 	bl	800347c <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8003146:	4b20      	ldr	r3, [pc, #128]	; (80031c8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003148:	2202      	movs	r2, #2
 800314a:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800314c:	4b1e      	ldr	r3, [pc, #120]	; (80031c8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800314e:	2210      	movs	r2, #16
 8003150:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8003152:	4b1d      	ldr	r3, [pc, #116]	; (80031c8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003154:	2201      	movs	r2, #1
 8003156:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8003158:	4b1b      	ldr	r3, [pc, #108]	; (80031c8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800315a:	2200      	movs	r2, #0
 800315c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 800315e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003162:	4919      	ldr	r1, [pc, #100]	; (80031c8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003164:	4819      	ldr	r0, [pc, #100]	; (80031cc <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003166:	f004 fbcb 	bl	8007900 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800316a:	4b17      	ldr	r3, [pc, #92]	; (80031c8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800316c:	2203      	movs	r2, #3
 800316e:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003170:	4b15      	ldr	r3, [pc, #84]	; (80031c8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003172:	2210      	movs	r2, #16
 8003174:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 8003176:	4b14      	ldr	r3, [pc, #80]	; (80031c8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003178:	2208      	movs	r2, #8
 800317a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800317c:	4b12      	ldr	r3, [pc, #72]	; (80031c8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800317e:	2200      	movs	r2, #0
 8003180:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003182:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003186:	4910      	ldr	r1, [pc, #64]	; (80031c8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003188:	4810      	ldr	r0, [pc, #64]	; (80031cc <BSP_SDRAM_Initialization_sequence+0xbc>)
 800318a:	f004 fbb9 	bl	8007900 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 800318e:	f44f 7308 	mov.w	r3, #544	; 0x220
 8003192:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8003194:	4b0c      	ldr	r3, [pc, #48]	; (80031c8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003196:	2204      	movs	r2, #4
 8003198:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800319a:	4b0b      	ldr	r3, [pc, #44]	; (80031c8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800319c:	2210      	movs	r2, #16
 800319e:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80031a0:	4b09      	ldr	r3, [pc, #36]	; (80031c8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80031a2:	2201      	movs	r2, #1
 80031a4:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	4a07      	ldr	r2, [pc, #28]	; (80031c8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80031aa:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80031ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80031b0:	4905      	ldr	r1, [pc, #20]	; (80031c8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80031b2:	4806      	ldr	r0, [pc, #24]	; (80031cc <BSP_SDRAM_Initialization_sequence+0xbc>)
 80031b4:	f004 fba4 	bl	8007900 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 80031b8:	6879      	ldr	r1, [r7, #4]
 80031ba:	4804      	ldr	r0, [pc, #16]	; (80031cc <BSP_SDRAM_Initialization_sequence+0xbc>)
 80031bc:	f004 fbd5 	bl	800796a <HAL_SDRAM_ProgramRefreshRate>
}
 80031c0:	bf00      	nop
 80031c2:	3710      	adds	r7, #16
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bd80      	pop	{r7, pc}
 80031c8:	20000160 	.word	0x20000160
 80031cc:	200003f4 	.word	0x200003f4

080031d0 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b090      	sub	sp, #64	; 0x40
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
 80031d8:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 80031da:	4b70      	ldr	r3, [pc, #448]	; (800339c <BSP_SDRAM_MspInit+0x1cc>)
 80031dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031de:	4a6f      	ldr	r2, [pc, #444]	; (800339c <BSP_SDRAM_MspInit+0x1cc>)
 80031e0:	f043 0301 	orr.w	r3, r3, #1
 80031e4:	6393      	str	r3, [r2, #56]	; 0x38
 80031e6:	4b6d      	ldr	r3, [pc, #436]	; (800339c <BSP_SDRAM_MspInit+0x1cc>)
 80031e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ea:	f003 0301 	and.w	r3, r3, #1
 80031ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80031f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 80031f2:	4b6a      	ldr	r3, [pc, #424]	; (800339c <BSP_SDRAM_MspInit+0x1cc>)
 80031f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031f6:	4a69      	ldr	r2, [pc, #420]	; (800339c <BSP_SDRAM_MspInit+0x1cc>)
 80031f8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80031fc:	6313      	str	r3, [r2, #48]	; 0x30
 80031fe:	4b67      	ldr	r3, [pc, #412]	; (800339c <BSP_SDRAM_MspInit+0x1cc>)
 8003200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003202:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003206:	627b      	str	r3, [r7, #36]	; 0x24
 8003208:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800320a:	4b64      	ldr	r3, [pc, #400]	; (800339c <BSP_SDRAM_MspInit+0x1cc>)
 800320c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800320e:	4a63      	ldr	r2, [pc, #396]	; (800339c <BSP_SDRAM_MspInit+0x1cc>)
 8003210:	f043 0304 	orr.w	r3, r3, #4
 8003214:	6313      	str	r3, [r2, #48]	; 0x30
 8003216:	4b61      	ldr	r3, [pc, #388]	; (800339c <BSP_SDRAM_MspInit+0x1cc>)
 8003218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800321a:	f003 0304 	and.w	r3, r3, #4
 800321e:	623b      	str	r3, [r7, #32]
 8003220:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003222:	4b5e      	ldr	r3, [pc, #376]	; (800339c <BSP_SDRAM_MspInit+0x1cc>)
 8003224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003226:	4a5d      	ldr	r2, [pc, #372]	; (800339c <BSP_SDRAM_MspInit+0x1cc>)
 8003228:	f043 0308 	orr.w	r3, r3, #8
 800322c:	6313      	str	r3, [r2, #48]	; 0x30
 800322e:	4b5b      	ldr	r3, [pc, #364]	; (800339c <BSP_SDRAM_MspInit+0x1cc>)
 8003230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003232:	f003 0308 	and.w	r3, r3, #8
 8003236:	61fb      	str	r3, [r7, #28]
 8003238:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800323a:	4b58      	ldr	r3, [pc, #352]	; (800339c <BSP_SDRAM_MspInit+0x1cc>)
 800323c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800323e:	4a57      	ldr	r2, [pc, #348]	; (800339c <BSP_SDRAM_MspInit+0x1cc>)
 8003240:	f043 0310 	orr.w	r3, r3, #16
 8003244:	6313      	str	r3, [r2, #48]	; 0x30
 8003246:	4b55      	ldr	r3, [pc, #340]	; (800339c <BSP_SDRAM_MspInit+0x1cc>)
 8003248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800324a:	f003 0310 	and.w	r3, r3, #16
 800324e:	61bb      	str	r3, [r7, #24]
 8003250:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003252:	4b52      	ldr	r3, [pc, #328]	; (800339c <BSP_SDRAM_MspInit+0x1cc>)
 8003254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003256:	4a51      	ldr	r2, [pc, #324]	; (800339c <BSP_SDRAM_MspInit+0x1cc>)
 8003258:	f043 0320 	orr.w	r3, r3, #32
 800325c:	6313      	str	r3, [r2, #48]	; 0x30
 800325e:	4b4f      	ldr	r3, [pc, #316]	; (800339c <BSP_SDRAM_MspInit+0x1cc>)
 8003260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003262:	f003 0320 	and.w	r3, r3, #32
 8003266:	617b      	str	r3, [r7, #20]
 8003268:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800326a:	4b4c      	ldr	r3, [pc, #304]	; (800339c <BSP_SDRAM_MspInit+0x1cc>)
 800326c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800326e:	4a4b      	ldr	r2, [pc, #300]	; (800339c <BSP_SDRAM_MspInit+0x1cc>)
 8003270:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003274:	6313      	str	r3, [r2, #48]	; 0x30
 8003276:	4b49      	ldr	r3, [pc, #292]	; (800339c <BSP_SDRAM_MspInit+0x1cc>)
 8003278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800327a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800327e:	613b      	str	r3, [r7, #16]
 8003280:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003282:	4b46      	ldr	r3, [pc, #280]	; (800339c <BSP_SDRAM_MspInit+0x1cc>)
 8003284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003286:	4a45      	ldr	r2, [pc, #276]	; (800339c <BSP_SDRAM_MspInit+0x1cc>)
 8003288:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800328c:	6313      	str	r3, [r2, #48]	; 0x30
 800328e:	4b43      	ldr	r3, [pc, #268]	; (800339c <BSP_SDRAM_MspInit+0x1cc>)
 8003290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003292:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003296:	60fb      	str	r3, [r7, #12]
 8003298:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800329a:	2302      	movs	r3, #2
 800329c:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800329e:	2301      	movs	r3, #1
 80032a0:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 80032a2:	2302      	movs	r3, #2
 80032a4:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 80032a6:	230c      	movs	r3, #12
 80032a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 80032aa:	2308      	movs	r3, #8
 80032ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 80032ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80032b2:	4619      	mov	r1, r3
 80032b4:	483a      	ldr	r0, [pc, #232]	; (80033a0 <BSP_SDRAM_MspInit+0x1d0>)
 80032b6:	f002 fb51 	bl	800595c <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 80032ba:	f24c 7303 	movw	r3, #50947	; 0xc703
 80032be:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 80032c0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80032c4:	4619      	mov	r1, r3
 80032c6:	4837      	ldr	r0, [pc, #220]	; (80033a4 <BSP_SDRAM_MspInit+0x1d4>)
 80032c8:	f002 fb48 	bl	800595c <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 80032cc:	f64f 7383 	movw	r3, #65411	; 0xff83
 80032d0:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80032d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80032d6:	4619      	mov	r1, r3
 80032d8:	4833      	ldr	r0, [pc, #204]	; (80033a8 <BSP_SDRAM_MspInit+0x1d8>)
 80032da:	f002 fb3f 	bl	800595c <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 80032de:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80032e2:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 80032e4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80032e8:	4619      	mov	r1, r3
 80032ea:	4830      	ldr	r0, [pc, #192]	; (80033ac <BSP_SDRAM_MspInit+0x1dc>)
 80032ec:	f002 fb36 	bl	800595c <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 80032f0:	f248 1333 	movw	r3, #33075	; 0x8133
 80032f4:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80032f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80032fa:	4619      	mov	r1, r3
 80032fc:	482c      	ldr	r0, [pc, #176]	; (80033b0 <BSP_SDRAM_MspInit+0x1e0>)
 80032fe:	f002 fb2d 	bl	800595c <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 8003302:	2328      	movs	r3, #40	; 0x28
 8003304:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8003306:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800330a:	4619      	mov	r1, r3
 800330c:	4829      	ldr	r0, [pc, #164]	; (80033b4 <BSP_SDRAM_MspInit+0x1e4>)
 800330e:	f002 fb25 	bl	800595c <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8003312:	4b29      	ldr	r3, [pc, #164]	; (80033b8 <BSP_SDRAM_MspInit+0x1e8>)
 8003314:	2200      	movs	r2, #0
 8003316:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8003318:	4b27      	ldr	r3, [pc, #156]	; (80033b8 <BSP_SDRAM_MspInit+0x1e8>)
 800331a:	2280      	movs	r2, #128	; 0x80
 800331c:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 800331e:	4b26      	ldr	r3, [pc, #152]	; (80033b8 <BSP_SDRAM_MspInit+0x1e8>)
 8003320:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003324:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8003326:	4b24      	ldr	r3, [pc, #144]	; (80033b8 <BSP_SDRAM_MspInit+0x1e8>)
 8003328:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800332c:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800332e:	4b22      	ldr	r3, [pc, #136]	; (80033b8 <BSP_SDRAM_MspInit+0x1e8>)
 8003330:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003334:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8003336:	4b20      	ldr	r3, [pc, #128]	; (80033b8 <BSP_SDRAM_MspInit+0x1e8>)
 8003338:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800333c:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 800333e:	4b1e      	ldr	r3, [pc, #120]	; (80033b8 <BSP_SDRAM_MspInit+0x1e8>)
 8003340:	2200      	movs	r2, #0
 8003342:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8003344:	4b1c      	ldr	r3, [pc, #112]	; (80033b8 <BSP_SDRAM_MspInit+0x1e8>)
 8003346:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800334a:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 800334c:	4b1a      	ldr	r3, [pc, #104]	; (80033b8 <BSP_SDRAM_MspInit+0x1e8>)
 800334e:	2200      	movs	r2, #0
 8003350:	625a      	str	r2, [r3, #36]	; 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8003352:	4b19      	ldr	r3, [pc, #100]	; (80033b8 <BSP_SDRAM_MspInit+0x1e8>)
 8003354:	2203      	movs	r2, #3
 8003356:	629a      	str	r2, [r3, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8003358:	4b17      	ldr	r3, [pc, #92]	; (80033b8 <BSP_SDRAM_MspInit+0x1e8>)
 800335a:	2200      	movs	r2, #0
 800335c:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 800335e:	4b16      	ldr	r3, [pc, #88]	; (80033b8 <BSP_SDRAM_MspInit+0x1e8>)
 8003360:	2200      	movs	r2, #0
 8003362:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 8003364:	4b14      	ldr	r3, [pc, #80]	; (80033b8 <BSP_SDRAM_MspInit+0x1e8>)
 8003366:	4a15      	ldr	r2, [pc, #84]	; (80033bc <BSP_SDRAM_MspInit+0x1ec>)
 8003368:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	4a12      	ldr	r2, [pc, #72]	; (80033b8 <BSP_SDRAM_MspInit+0x1e8>)
 800336e:	631a      	str	r2, [r3, #48]	; 0x30
 8003370:	4a11      	ldr	r2, [pc, #68]	; (80033b8 <BSP_SDRAM_MspInit+0x1e8>)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 8003376:	4810      	ldr	r0, [pc, #64]	; (80033b8 <BSP_SDRAM_MspInit+0x1e8>)
 8003378:	f000 fdc0 	bl	8003efc <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 800337c:	480e      	ldr	r0, [pc, #56]	; (80033b8 <BSP_SDRAM_MspInit+0x1e8>)
 800337e:	f000 fd0f 	bl	8003da0 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8003382:	2200      	movs	r2, #0
 8003384:	210f      	movs	r1, #15
 8003386:	2038      	movs	r0, #56	; 0x38
 8003388:	f000 f977 	bl	800367a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 800338c:	2038      	movs	r0, #56	; 0x38
 800338e:	f000 f990 	bl	80036b2 <HAL_NVIC_EnableIRQ>
}
 8003392:	bf00      	nop
 8003394:	3740      	adds	r7, #64	; 0x40
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}
 800339a:	bf00      	nop
 800339c:	40023800 	.word	0x40023800
 80033a0:	40020800 	.word	0x40020800
 80033a4:	40020c00 	.word	0x40020c00
 80033a8:	40021000 	.word	0x40021000
 80033ac:	40021400 	.word	0x40021400
 80033b0:	40021800 	.word	0x40021800
 80033b4:	40021c00 	.word	0x40021c00
 80033b8:	20000170 	.word	0x20000170
 80033bc:	40026410 	.word	0x40026410

080033c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80033c4:	2003      	movs	r0, #3
 80033c6:	f000 f94d 	bl	8003664 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80033ca:	2000      	movs	r0, #0
 80033cc:	f000 f806 	bl	80033dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80033d0:	f7ff fbdc 	bl	8002b8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80033d4:	2300      	movs	r3, #0
}
 80033d6:	4618      	mov	r0, r3
 80033d8:	bd80      	pop	{r7, pc}
	...

080033dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b082      	sub	sp, #8
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80033e4:	4b12      	ldr	r3, [pc, #72]	; (8003430 <HAL_InitTick+0x54>)
 80033e6:	681a      	ldr	r2, [r3, #0]
 80033e8:	4b12      	ldr	r3, [pc, #72]	; (8003434 <HAL_InitTick+0x58>)
 80033ea:	781b      	ldrb	r3, [r3, #0]
 80033ec:	4619      	mov	r1, r3
 80033ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80033f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80033f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80033fa:	4618      	mov	r0, r3
 80033fc:	f000 f967 	bl	80036ce <HAL_SYSTICK_Config>
 8003400:	4603      	mov	r3, r0
 8003402:	2b00      	cmp	r3, #0
 8003404:	d001      	beq.n	800340a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	e00e      	b.n	8003428 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2b0f      	cmp	r3, #15
 800340e:	d80a      	bhi.n	8003426 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003410:	2200      	movs	r2, #0
 8003412:	6879      	ldr	r1, [r7, #4]
 8003414:	f04f 30ff 	mov.w	r0, #4294967295
 8003418:	f000 f92f 	bl	800367a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800341c:	4a06      	ldr	r2, [pc, #24]	; (8003438 <HAL_InitTick+0x5c>)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003422:	2300      	movs	r3, #0
 8003424:	e000      	b.n	8003428 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003426:	2301      	movs	r3, #1
}
 8003428:	4618      	mov	r0, r3
 800342a:	3708      	adds	r7, #8
 800342c:	46bd      	mov	sp, r7
 800342e:	bd80      	pop	{r7, pc}
 8003430:	20000080 	.word	0x20000080
 8003434:	2000008c 	.word	0x2000008c
 8003438:	20000088 	.word	0x20000088

0800343c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800343c:	b480      	push	{r7}
 800343e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003440:	4b06      	ldr	r3, [pc, #24]	; (800345c <HAL_IncTick+0x20>)
 8003442:	781b      	ldrb	r3, [r3, #0]
 8003444:	461a      	mov	r2, r3
 8003446:	4b06      	ldr	r3, [pc, #24]	; (8003460 <HAL_IncTick+0x24>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4413      	add	r3, r2
 800344c:	4a04      	ldr	r2, [pc, #16]	; (8003460 <HAL_IncTick+0x24>)
 800344e:	6013      	str	r3, [r2, #0]
}
 8003450:	bf00      	nop
 8003452:	46bd      	mov	sp, r7
 8003454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003458:	4770      	bx	lr
 800345a:	bf00      	nop
 800345c:	2000008c 	.word	0x2000008c
 8003460:	20000428 	.word	0x20000428

08003464 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003464:	b480      	push	{r7}
 8003466:	af00      	add	r7, sp, #0
  return uwTick;
 8003468:	4b03      	ldr	r3, [pc, #12]	; (8003478 <HAL_GetTick+0x14>)
 800346a:	681b      	ldr	r3, [r3, #0]
}
 800346c:	4618      	mov	r0, r3
 800346e:	46bd      	mov	sp, r7
 8003470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003474:	4770      	bx	lr
 8003476:	bf00      	nop
 8003478:	20000428 	.word	0x20000428

0800347c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b084      	sub	sp, #16
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003484:	f7ff ffee 	bl	8003464 <HAL_GetTick>
 8003488:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003494:	d005      	beq.n	80034a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003496:	4b0a      	ldr	r3, [pc, #40]	; (80034c0 <HAL_Delay+0x44>)
 8003498:	781b      	ldrb	r3, [r3, #0]
 800349a:	461a      	mov	r2, r3
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	4413      	add	r3, r2
 80034a0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80034a2:	bf00      	nop
 80034a4:	f7ff ffde 	bl	8003464 <HAL_GetTick>
 80034a8:	4602      	mov	r2, r0
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	1ad3      	subs	r3, r2, r3
 80034ae:	68fa      	ldr	r2, [r7, #12]
 80034b0:	429a      	cmp	r2, r3
 80034b2:	d8f7      	bhi.n	80034a4 <HAL_Delay+0x28>
  {
  }
}
 80034b4:	bf00      	nop
 80034b6:	bf00      	nop
 80034b8:	3710      	adds	r7, #16
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}
 80034be:	bf00      	nop
 80034c0:	2000008c 	.word	0x2000008c

080034c4 <__NVIC_SetPriorityGrouping>:
{
 80034c4:	b480      	push	{r7}
 80034c6:	b085      	sub	sp, #20
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	f003 0307 	and.w	r3, r3, #7
 80034d2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80034d4:	4b0b      	ldr	r3, [pc, #44]	; (8003504 <__NVIC_SetPriorityGrouping+0x40>)
 80034d6:	68db      	ldr	r3, [r3, #12]
 80034d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80034da:	68ba      	ldr	r2, [r7, #8]
 80034dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80034e0:	4013      	ands	r3, r2
 80034e2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80034ec:	4b06      	ldr	r3, [pc, #24]	; (8003508 <__NVIC_SetPriorityGrouping+0x44>)
 80034ee:	4313      	orrs	r3, r2
 80034f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80034f2:	4a04      	ldr	r2, [pc, #16]	; (8003504 <__NVIC_SetPriorityGrouping+0x40>)
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	60d3      	str	r3, [r2, #12]
}
 80034f8:	bf00      	nop
 80034fa:	3714      	adds	r7, #20
 80034fc:	46bd      	mov	sp, r7
 80034fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003502:	4770      	bx	lr
 8003504:	e000ed00 	.word	0xe000ed00
 8003508:	05fa0000 	.word	0x05fa0000

0800350c <__NVIC_GetPriorityGrouping>:
{
 800350c:	b480      	push	{r7}
 800350e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003510:	4b04      	ldr	r3, [pc, #16]	; (8003524 <__NVIC_GetPriorityGrouping+0x18>)
 8003512:	68db      	ldr	r3, [r3, #12]
 8003514:	0a1b      	lsrs	r3, r3, #8
 8003516:	f003 0307 	and.w	r3, r3, #7
}
 800351a:	4618      	mov	r0, r3
 800351c:	46bd      	mov	sp, r7
 800351e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003522:	4770      	bx	lr
 8003524:	e000ed00 	.word	0xe000ed00

08003528 <__NVIC_EnableIRQ>:
{
 8003528:	b480      	push	{r7}
 800352a:	b083      	sub	sp, #12
 800352c:	af00      	add	r7, sp, #0
 800352e:	4603      	mov	r3, r0
 8003530:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003532:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003536:	2b00      	cmp	r3, #0
 8003538:	db0b      	blt.n	8003552 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800353a:	79fb      	ldrb	r3, [r7, #7]
 800353c:	f003 021f 	and.w	r2, r3, #31
 8003540:	4907      	ldr	r1, [pc, #28]	; (8003560 <__NVIC_EnableIRQ+0x38>)
 8003542:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003546:	095b      	lsrs	r3, r3, #5
 8003548:	2001      	movs	r0, #1
 800354a:	fa00 f202 	lsl.w	r2, r0, r2
 800354e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003552:	bf00      	nop
 8003554:	370c      	adds	r7, #12
 8003556:	46bd      	mov	sp, r7
 8003558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355c:	4770      	bx	lr
 800355e:	bf00      	nop
 8003560:	e000e100 	.word	0xe000e100

08003564 <__NVIC_SetPriority>:
{
 8003564:	b480      	push	{r7}
 8003566:	b083      	sub	sp, #12
 8003568:	af00      	add	r7, sp, #0
 800356a:	4603      	mov	r3, r0
 800356c:	6039      	str	r1, [r7, #0]
 800356e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003570:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003574:	2b00      	cmp	r3, #0
 8003576:	db0a      	blt.n	800358e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	b2da      	uxtb	r2, r3
 800357c:	490c      	ldr	r1, [pc, #48]	; (80035b0 <__NVIC_SetPriority+0x4c>)
 800357e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003582:	0112      	lsls	r2, r2, #4
 8003584:	b2d2      	uxtb	r2, r2
 8003586:	440b      	add	r3, r1
 8003588:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800358c:	e00a      	b.n	80035a4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	b2da      	uxtb	r2, r3
 8003592:	4908      	ldr	r1, [pc, #32]	; (80035b4 <__NVIC_SetPriority+0x50>)
 8003594:	79fb      	ldrb	r3, [r7, #7]
 8003596:	f003 030f 	and.w	r3, r3, #15
 800359a:	3b04      	subs	r3, #4
 800359c:	0112      	lsls	r2, r2, #4
 800359e:	b2d2      	uxtb	r2, r2
 80035a0:	440b      	add	r3, r1
 80035a2:	761a      	strb	r2, [r3, #24]
}
 80035a4:	bf00      	nop
 80035a6:	370c      	adds	r7, #12
 80035a8:	46bd      	mov	sp, r7
 80035aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ae:	4770      	bx	lr
 80035b0:	e000e100 	.word	0xe000e100
 80035b4:	e000ed00 	.word	0xe000ed00

080035b8 <NVIC_EncodePriority>:
{
 80035b8:	b480      	push	{r7}
 80035ba:	b089      	sub	sp, #36	; 0x24
 80035bc:	af00      	add	r7, sp, #0
 80035be:	60f8      	str	r0, [r7, #12]
 80035c0:	60b9      	str	r1, [r7, #8]
 80035c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	f003 0307 	and.w	r3, r3, #7
 80035ca:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80035cc:	69fb      	ldr	r3, [r7, #28]
 80035ce:	f1c3 0307 	rsb	r3, r3, #7
 80035d2:	2b04      	cmp	r3, #4
 80035d4:	bf28      	it	cs
 80035d6:	2304      	movcs	r3, #4
 80035d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035da:	69fb      	ldr	r3, [r7, #28]
 80035dc:	3304      	adds	r3, #4
 80035de:	2b06      	cmp	r3, #6
 80035e0:	d902      	bls.n	80035e8 <NVIC_EncodePriority+0x30>
 80035e2:	69fb      	ldr	r3, [r7, #28]
 80035e4:	3b03      	subs	r3, #3
 80035e6:	e000      	b.n	80035ea <NVIC_EncodePriority+0x32>
 80035e8:	2300      	movs	r3, #0
 80035ea:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035ec:	f04f 32ff 	mov.w	r2, #4294967295
 80035f0:	69bb      	ldr	r3, [r7, #24]
 80035f2:	fa02 f303 	lsl.w	r3, r2, r3
 80035f6:	43da      	mvns	r2, r3
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	401a      	ands	r2, r3
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003600:	f04f 31ff 	mov.w	r1, #4294967295
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	fa01 f303 	lsl.w	r3, r1, r3
 800360a:	43d9      	mvns	r1, r3
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003610:	4313      	orrs	r3, r2
}
 8003612:	4618      	mov	r0, r3
 8003614:	3724      	adds	r7, #36	; 0x24
 8003616:	46bd      	mov	sp, r7
 8003618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361c:	4770      	bx	lr
	...

08003620 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b082      	sub	sp, #8
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	3b01      	subs	r3, #1
 800362c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003630:	d301      	bcc.n	8003636 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003632:	2301      	movs	r3, #1
 8003634:	e00f      	b.n	8003656 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003636:	4a0a      	ldr	r2, [pc, #40]	; (8003660 <SysTick_Config+0x40>)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	3b01      	subs	r3, #1
 800363c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800363e:	210f      	movs	r1, #15
 8003640:	f04f 30ff 	mov.w	r0, #4294967295
 8003644:	f7ff ff8e 	bl	8003564 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003648:	4b05      	ldr	r3, [pc, #20]	; (8003660 <SysTick_Config+0x40>)
 800364a:	2200      	movs	r2, #0
 800364c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800364e:	4b04      	ldr	r3, [pc, #16]	; (8003660 <SysTick_Config+0x40>)
 8003650:	2207      	movs	r2, #7
 8003652:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003654:	2300      	movs	r3, #0
}
 8003656:	4618      	mov	r0, r3
 8003658:	3708      	adds	r7, #8
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}
 800365e:	bf00      	nop
 8003660:	e000e010 	.word	0xe000e010

08003664 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b082      	sub	sp, #8
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800366c:	6878      	ldr	r0, [r7, #4]
 800366e:	f7ff ff29 	bl	80034c4 <__NVIC_SetPriorityGrouping>
}
 8003672:	bf00      	nop
 8003674:	3708      	adds	r7, #8
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}

0800367a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800367a:	b580      	push	{r7, lr}
 800367c:	b086      	sub	sp, #24
 800367e:	af00      	add	r7, sp, #0
 8003680:	4603      	mov	r3, r0
 8003682:	60b9      	str	r1, [r7, #8]
 8003684:	607a      	str	r2, [r7, #4]
 8003686:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003688:	2300      	movs	r3, #0
 800368a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800368c:	f7ff ff3e 	bl	800350c <__NVIC_GetPriorityGrouping>
 8003690:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003692:	687a      	ldr	r2, [r7, #4]
 8003694:	68b9      	ldr	r1, [r7, #8]
 8003696:	6978      	ldr	r0, [r7, #20]
 8003698:	f7ff ff8e 	bl	80035b8 <NVIC_EncodePriority>
 800369c:	4602      	mov	r2, r0
 800369e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036a2:	4611      	mov	r1, r2
 80036a4:	4618      	mov	r0, r3
 80036a6:	f7ff ff5d 	bl	8003564 <__NVIC_SetPriority>
}
 80036aa:	bf00      	nop
 80036ac:	3718      	adds	r7, #24
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}

080036b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036b2:	b580      	push	{r7, lr}
 80036b4:	b082      	sub	sp, #8
 80036b6:	af00      	add	r7, sp, #0
 80036b8:	4603      	mov	r3, r0
 80036ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80036bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036c0:	4618      	mov	r0, r3
 80036c2:	f7ff ff31 	bl	8003528 <__NVIC_EnableIRQ>
}
 80036c6:	bf00      	nop
 80036c8:	3708      	adds	r7, #8
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}

080036ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80036ce:	b580      	push	{r7, lr}
 80036d0:	b082      	sub	sp, #8
 80036d2:	af00      	add	r7, sp, #0
 80036d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80036d6:	6878      	ldr	r0, [r7, #4]
 80036d8:	f7ff ffa2 	bl	8003620 <SysTick_Config>
 80036dc:	4603      	mov	r3, r0
}
 80036de:	4618      	mov	r0, r3
 80036e0:	3708      	adds	r7, #8
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}
	...

080036e8 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80036e8:	b480      	push	{r7}
 80036ea:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80036ec:	f3bf 8f5f 	dmb	sy
}
 80036f0:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80036f2:	4b07      	ldr	r3, [pc, #28]	; (8003710 <HAL_MPU_Disable+0x28>)
 80036f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f6:	4a06      	ldr	r2, [pc, #24]	; (8003710 <HAL_MPU_Disable+0x28>)
 80036f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036fc:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80036fe:	4b05      	ldr	r3, [pc, #20]	; (8003714 <HAL_MPU_Disable+0x2c>)
 8003700:	2200      	movs	r2, #0
 8003702:	605a      	str	r2, [r3, #4]
}
 8003704:	bf00      	nop
 8003706:	46bd      	mov	sp, r7
 8003708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370c:	4770      	bx	lr
 800370e:	bf00      	nop
 8003710:	e000ed00 	.word	0xe000ed00
 8003714:	e000ed90 	.word	0xe000ed90

08003718 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8003718:	b480      	push	{r7}
 800371a:	b083      	sub	sp, #12
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8003720:	4a0b      	ldr	r2, [pc, #44]	; (8003750 <HAL_MPU_Enable+0x38>)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	f043 0301 	orr.w	r3, r3, #1
 8003728:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800372a:	4b0a      	ldr	r3, [pc, #40]	; (8003754 <HAL_MPU_Enable+0x3c>)
 800372c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800372e:	4a09      	ldr	r2, [pc, #36]	; (8003754 <HAL_MPU_Enable+0x3c>)
 8003730:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003734:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8003736:	f3bf 8f4f 	dsb	sy
}
 800373a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800373c:	f3bf 8f6f 	isb	sy
}
 8003740:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8003742:	bf00      	nop
 8003744:	370c      	adds	r7, #12
 8003746:	46bd      	mov	sp, r7
 8003748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374c:	4770      	bx	lr
 800374e:	bf00      	nop
 8003750:	e000ed90 	.word	0xe000ed90
 8003754:	e000ed00 	.word	0xe000ed00

08003758 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8003758:	b480      	push	{r7}
 800375a:	b083      	sub	sp, #12
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	785a      	ldrb	r2, [r3, #1]
 8003764:	4b1d      	ldr	r3, [pc, #116]	; (80037dc <HAL_MPU_ConfigRegion+0x84>)
 8003766:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != RESET)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	781b      	ldrb	r3, [r3, #0]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d029      	beq.n	80037c4 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 8003770:	4a1a      	ldr	r2, [pc, #104]	; (80037dc <HAL_MPU_ConfigRegion+0x84>)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	7b1b      	ldrb	r3, [r3, #12]
 800377c:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	7adb      	ldrb	r3, [r3, #11]
 8003782:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003784:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	7a9b      	ldrb	r3, [r3, #10]
 800378a:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800378c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	7b5b      	ldrb	r3, [r3, #13]
 8003792:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003794:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	7b9b      	ldrb	r3, [r3, #14]
 800379a:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800379c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	7bdb      	ldrb	r3, [r3, #15]
 80037a2:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80037a4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	7a5b      	ldrb	r3, [r3, #9]
 80037aa:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80037ac:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	7a1b      	ldrb	r3, [r3, #8]
 80037b2:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80037b4:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80037b6:	687a      	ldr	r2, [r7, #4]
 80037b8:	7812      	ldrb	r2, [r2, #0]
 80037ba:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80037bc:	4a07      	ldr	r2, [pc, #28]	; (80037dc <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80037be:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80037c0:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 80037c2:	e005      	b.n	80037d0 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 80037c4:	4b05      	ldr	r3, [pc, #20]	; (80037dc <HAL_MPU_ConfigRegion+0x84>)
 80037c6:	2200      	movs	r2, #0
 80037c8:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 80037ca:	4b04      	ldr	r3, [pc, #16]	; (80037dc <HAL_MPU_ConfigRegion+0x84>)
 80037cc:	2200      	movs	r2, #0
 80037ce:	611a      	str	r2, [r3, #16]
}
 80037d0:	bf00      	nop
 80037d2:	370c      	adds	r7, #12
 80037d4:	46bd      	mov	sp, r7
 80037d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037da:	4770      	bx	lr
 80037dc:	e000ed90 	.word	0xe000ed90

080037e0 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b082      	sub	sp, #8
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d101      	bne.n	80037f2 <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	e069      	b.n	80038c6 <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80037f8:	b2db      	uxtb	r3, r3
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d102      	bne.n	8003804 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f7ff f9e8 	bl	8002bd4 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2202      	movs	r2, #2
 8003808:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

#ifdef DCMI_CR_BSM
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	699b      	ldr	r3, [r3, #24]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d002      	beq.n	800381a <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2200      	movs	r2, #0
 8003818:	625a      	str	r2, [r3, #36]	; 0x24
  }
#endif
  /* Configures the HS, VS, DE and PC polarity */
#ifdef DCMI_CR_BSM
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	6819      	ldr	r1, [r3, #0]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681a      	ldr	r2, [r3, #0]
 8003824:	4b2a      	ldr	r3, [pc, #168]	; (80038d0 <HAL_DCMI_Init+0xf0>)
 8003826:	400b      	ands	r3, r1
 8003828:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	6819      	ldr	r1, [r3, #0]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	685a      	ldr	r2, [r3, #4]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	695b      	ldr	r3, [r3, #20]
 8003838:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 800383e:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	691b      	ldr	r3, [r3, #16]
 8003844:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 800384a:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	699b      	ldr	r3, [r3, #24]
 8003850:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8003856:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800385c:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8003862:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003868:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 800386e:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	430a      	orrs	r2, r1
 8003876:	601a      	str	r2, [r3, #0]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
                                    hdcmi->Init.JPEGMode);
#endif

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	2b10      	cmp	r3, #16
 800387e:	d112      	bne.n	80038a6 <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	7f1b      	ldrb	r3, [r3, #28]
 8003884:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	7f5b      	ldrb	r3, [r3, #29]
 800388a:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 800388c:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	7f9b      	ldrb	r3, [r3, #30]
 8003892:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8003894:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	7fdb      	ldrb	r3, [r3, #31]
 800389c:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 80038a2:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80038a4:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	68da      	ldr	r2, [r3, #12]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f042 021e 	orr.w	r2, r2, #30
 80038b4:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2200      	movs	r2, #0
 80038ba:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2201      	movs	r2, #1
 80038c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80038c4:	2300      	movs	r3, #0
}
 80038c6:	4618      	mov	r0, r3
 80038c8:	3708      	adds	r7, #8
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}
 80038ce:	bf00      	nop
 80038d0:	ffe0f007 	.word	0xffe0f007

080038d4 <HAL_DCMI_Start_DMA>:
  * @param  pData     The destination memory Buffer address (LCD Frame buffer).
  * @param  Length    The length of capture to be transferred.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Start_DMA(DCMI_HandleTypeDef *hdcmi, uint32_t DCMI_Mode, uint32_t pData, uint32_t Length)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b088      	sub	sp, #32
 80038d8:	af02      	add	r7, sp, #8
 80038da:	60f8      	str	r0, [r7, #12]
 80038dc:	60b9      	str	r1, [r7, #8]
 80038de:	607a      	str	r2, [r7, #4]
 80038e0:	603b      	str	r3, [r7, #0]
  /* Initialize the second memory address */
  uint32_t SecondMemAddress = 0;
 80038e2:	2300      	movs	r3, #0
 80038e4:	617b      	str	r3, [r7, #20]

  /* Check function parameters */
  assert_param(IS_DCMI_CAPTURE_MODE(DCMI_Mode));

  /* Process Locked */
  __HAL_LOCK(hdcmi);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80038ec:	2b01      	cmp	r3, #1
 80038ee:	d101      	bne.n	80038f4 <HAL_DCMI_Start_DMA+0x20>
 80038f0:	2302      	movs	r3, #2
 80038f2:	e095      	b.n	8003a20 <HAL_DCMI_Start_DMA+0x14c>
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	2201      	movs	r2, #1
 80038f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	2202      	movs	r2, #2
 8003900:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Enable DCMI by setting DCMIEN bit */
  __HAL_DCMI_ENABLE(hdcmi);
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	681a      	ldr	r2, [r3, #0]
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003912:	601a      	str	r2, [r3, #0]

  /* Configure the DCMI Mode */
  hdcmi->Instance->CR &= ~(DCMI_CR_CM);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	681a      	ldr	r2, [r3, #0]
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f022 0202 	bic.w	r2, r2, #2
 8003922:	601a      	str	r2, [r3, #0]
  hdcmi->Instance->CR |= (uint32_t)(DCMI_Mode);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	6819      	ldr	r1, [r3, #0]
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	68ba      	ldr	r2, [r7, #8]
 8003930:	430a      	orrs	r2, r1
 8003932:	601a      	str	r2, [r3, #0]

  /* Set the DMA memory0 conversion complete callback */
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003938:	4a3b      	ldr	r2, [pc, #236]	; (8003a28 <HAL_DCMI_Start_DMA+0x154>)
 800393a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003940:	4a3a      	ldr	r2, [pc, #232]	; (8003a2c <HAL_DCMI_Start_DMA+0x158>)
 8003942:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the dma abort callback */
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003948:	2200      	movs	r2, #0
 800394a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset transfer counters value */
  hdcmi->XferCount = 0;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	2200      	movs	r2, #0
 8003950:	639a      	str	r2, [r3, #56]	; 0x38
  hdcmi->XferTransferNumber = 0;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	2200      	movs	r2, #0
 8003956:	641a      	str	r2, [r3, #64]	; 0x40
  hdcmi->XferSize = 0;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	2200      	movs	r2, #0
 800395c:	63da      	str	r2, [r3, #60]	; 0x3c
  hdcmi->pBuffPtr = 0;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	2200      	movs	r2, #0
 8003962:	645a      	str	r2, [r3, #68]	; 0x44

  if (Length <= 0xFFFFU)
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800396a:	d20e      	bcs.n	800398a <HAL_DCMI_Start_DMA+0xb6>
  {
    /* Enable the DMA Stream */
    if (HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, Length) != HAL_OK)
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	3328      	adds	r3, #40	; 0x28
 8003976:	4619      	mov	r1, r3
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	687a      	ldr	r2, [r7, #4]
 800397c:	f000 fb1c 	bl	8003fb8 <HAL_DMA_Start_IT>
 8003980:	4603      	mov	r3, r0
 8003982:	2b00      	cmp	r3, #0
 8003984:	d03f      	beq.n	8003a06 <HAL_DCMI_Start_DMA+0x132>
    {
      return HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	e04a      	b.n	8003a20 <HAL_DCMI_Start_DMA+0x14c>
    }
  }
  else /* DCMI_DOUBLE_BUFFER Mode */
  {
    /* Set the DMA memory1 conversion complete callback */
    hdcmi->DMA_Handle->XferM1CpltCallback = DCMI_DMAXferCplt;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800398e:	4a26      	ldr	r2, [pc, #152]	; (8003a28 <HAL_DCMI_Start_DMA+0x154>)
 8003990:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize transfer parameters */
    hdcmi->XferCount = 1;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	2201      	movs	r2, #1
 8003996:	639a      	str	r2, [r3, #56]	; 0x38
    hdcmi->XferSize = Length;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	683a      	ldr	r2, [r7, #0]
 800399c:	63da      	str	r2, [r3, #60]	; 0x3c
    hdcmi->pBuffPtr = pData;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	687a      	ldr	r2, [r7, #4]
 80039a2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Get the number of buffer */
    while (hdcmi->XferSize > 0xFFFFU)
 80039a4:	e009      	b.n	80039ba <HAL_DCMI_Start_DMA+0xe6>
    {
      hdcmi->XferSize = (hdcmi->XferSize / 2U);
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039aa:	085a      	lsrs	r2, r3, #1
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	63da      	str	r2, [r3, #60]	; 0x3c
      hdcmi->XferCount = hdcmi->XferCount * 2U;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039b4:	005a      	lsls	r2, r3, #1
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	639a      	str	r2, [r3, #56]	; 0x38
    while (hdcmi->XferSize > 0xFFFFU)
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039c2:	d2f0      	bcs.n	80039a6 <HAL_DCMI_Start_DMA+0xd2>
    }

    /* Update DCMI counter  and transfer number*/
    hdcmi->XferCount = (hdcmi->XferCount - 2U);
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039c8:	1e9a      	subs	r2, r3, #2
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	639a      	str	r2, [r3, #56]	; 0x38
    hdcmi->XferTransferNumber = hdcmi->XferCount;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Update second memory address */
    SecondMemAddress = (uint32_t)(pData + (4 * hdcmi->XferSize));
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039da:	009b      	lsls	r3, r3, #2
 80039dc:	687a      	ldr	r2, [r7, #4]
 80039de:	4413      	add	r3, r2
 80039e0:	617b      	str	r3, [r7, #20]

    /* Start DMA multi buffer transfer */
    if (HAL_DMAEx_MultiBufferStart_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, SecondMemAddress, hdcmi->XferSize) != HAL_OK)
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	3328      	adds	r3, #40	; 0x28
 80039ec:	4619      	mov	r1, r3
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039f2:	9300      	str	r3, [sp, #0]
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	687a      	ldr	r2, [r7, #4]
 80039f8:	f000 fe3a 	bl	8004670 <HAL_DMAEx_MultiBufferStart_IT>
 80039fc:	4603      	mov	r3, r0
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d001      	beq.n	8003a06 <HAL_DCMI_Start_DMA+0x132>
    {
      return HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	e00c      	b.n	8003a20 <HAL_DCMI_Start_DMA+0x14c>
    }
  }

  /* Enable Capture */
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	681a      	ldr	r2, [r3, #0]
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f042 0201 	orr.w	r2, r2, #1
 8003a14:	601a      	str	r2, [r3, #0]

  /* Release Lock */
  __HAL_UNLOCK(hdcmi);
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Return function status */
  return HAL_OK;
 8003a1e:	2300      	movs	r3, #0
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	3718      	adds	r7, #24
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bd80      	pop	{r7, pc}
 8003a28:	08003c3d 	.word	0x08003c3d
 8003a2c:	08003d67 	.word	0x08003d67

08003a30 <HAL_DCMI_Stop>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Stop(DCMI_HandleTypeDef *hdcmi)
{
 8003a30:	b590      	push	{r4, r7, lr}
 8003a32:	b085      	sub	sp, #20
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  register uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
 8003a38:	4b2a      	ldr	r3, [pc, #168]	; (8003ae4 <HAL_DCMI_Stop+0xb4>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a2a      	ldr	r2, [pc, #168]	; (8003ae8 <HAL_DCMI_Stop+0xb8>)
 8003a3e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a42:	0a5b      	lsrs	r3, r3, #9
 8003a44:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003a48:	fb02 f403 	mul.w	r4, r2, r3
  HAL_StatusTypeDef status = HAL_OK;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	73fb      	strb	r3, [r7, #15]

  /* Process locked */
  __HAL_LOCK(hdcmi);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003a56:	2b01      	cmp	r3, #1
 8003a58:	d101      	bne.n	8003a5e <HAL_DCMI_Stop+0x2e>
 8003a5a:	2302      	movs	r3, #2
 8003a5c:	e03d      	b.n	8003ada <HAL_DCMI_Stop+0xaa>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2201      	movs	r2, #1
 8003a62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2202      	movs	r2, #2
 8003a6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Disable Capture */
  hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	681a      	ldr	r2, [r3, #0]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f022 0201 	bic.w	r2, r2, #1
 8003a7c:	601a      	str	r2, [r3, #0]

  /* Check if the DCMI capture effectively disabled */
  do
  {
    if (count-- == 0U)
 8003a7e:	4623      	mov	r3, r4
 8003a80:	1e5c      	subs	r4, r3, #1
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d108      	bne.n	8003a98 <HAL_DCMI_Stop+0x68>
    {
      /* Update error code */
      hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a8a:	f043 0220 	orr.w	r2, r3, #32
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	64da      	str	r2, [r3, #76]	; 0x4c

      status = HAL_TIMEOUT;
 8003a92:	2303      	movs	r3, #3
 8003a94:	73fb      	strb	r3, [r7, #15]
      break;
 8003a96:	e006      	b.n	8003aa6 <HAL_DCMI_Stop+0x76>
    }
  }
  while ((hdcmi->Instance->CR & DCMI_CR_CAPTURE) != 0U);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f003 0301 	and.w	r3, r3, #1
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d1eb      	bne.n	8003a7e <HAL_DCMI_Stop+0x4e>

  /* Disable the DCMI */
  __HAL_DCMI_DISABLE(hdcmi);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	681a      	ldr	r2, [r3, #0]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003ab4:	601a      	str	r2, [r3, #0]

  /* Disable the DMA */
  (void)HAL_DMA_Abort(hdcmi->DMA_Handle);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003aba:	4618      	mov	r0, r3
 8003abc:	f000 fadc 	bl	8004078 <HAL_DMA_Abort>

  /* Update error code */
  hdcmi->ErrorCode |= HAL_DCMI_ERROR_NONE;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Change DCMI state */
  hdcmi->State = HAL_DCMI_STATE_READY;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2201      	movs	r2, #1
 8003acc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Return function status */
  return status;
 8003ad8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ada:	4618      	mov	r0, r3
 8003adc:	3714      	adds	r7, #20
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bd90      	pop	{r4, r7, pc}
 8003ae2:	bf00      	nop
 8003ae4:	20000080 	.word	0x20000080
 8003ae8:	10624dd3 	.word	0x10624dd3

08003aec <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b084      	sub	sp, #16
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	691b      	ldr	r3, [r3, #16]
 8003afa:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if ((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	f003 0304 	and.w	r3, r3, #4
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d016      	beq.n	8003b34 <HAL_DCMI_IRQHandler+0x48>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	2204      	movs	r2, #4
 8003b0c:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b12:	f043 0202 	orr.w	r2, r3, #2
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2204      	movs	r2, #4
 8003b1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b26:	4a35      	ldr	r2, [pc, #212]	; (8003bfc <HAL_DCMI_IRQHandler+0x110>)
 8003b28:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f000 fb12 	bl	8004158 <HAL_DMA_Abort_IT>
  }
  /* Overflow interrupt management ********************************************/
  if ((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	f003 0302 	and.w	r3, r3, #2
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d01e      	beq.n	8003b7c <HAL_DCMI_IRQHandler+0x90>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	2202      	movs	r2, #2
 8003b44:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b4a:	f043 0201 	orr.w	r2, r3, #1
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2204      	movs	r2, #4
 8003b56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b5e:	4a27      	ldr	r2, [pc, #156]	; (8003bfc <HAL_DCMI_IRQHandler+0x110>)
 8003b60:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    if (HAL_DMA_Abort_IT(hdcmi->DMA_Handle) != HAL_OK)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b66:	4618      	mov	r0, r3
 8003b68:	f000 faf6 	bl	8004158 <HAL_DMA_Abort_IT>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d004      	beq.n	8003b7c <HAL_DCMI_IRQHandler+0x90>
    {
      DCMI_DMAError(hdcmi->DMA_Handle);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b76:	4618      	mov	r0, r3
 8003b78:	f000 f8f5 	bl	8003d66 <DCMI_DMAError>
    }
  }
  /* Line Interrupt management ************************************************/
  if ((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	f003 0310 	and.w	r3, r3, #16
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d006      	beq.n	8003b94 <HAL_DCMI_IRQHandler+0xa8>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	2210      	movs	r2, #16
 8003b8c:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else
    HAL_DCMI_LineEventCallback(hdcmi);
 8003b8e:	6878      	ldr	r0, [r7, #4]
 8003b90:	f000 f840 	bl	8003c14 <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* VSYNC interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	f003 0308 	and.w	r3, r3, #8
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d006      	beq.n	8003bac <HAL_DCMI_IRQHandler+0xc0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	2208      	movs	r2, #8
 8003ba4:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else
    HAL_DCMI_VsyncEventCallback(hdcmi);
 8003ba6:	6878      	ldr	r0, [r7, #4]
 8003ba8:	f000 f83e 	bl	8003c28 <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* FRAME interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	f003 0301 	and.w	r3, r3, #1
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d01d      	beq.n	8003bf2 <HAL_DCMI_IRQHandler+0x106>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f003 0302 	and.w	r3, r3, #2
 8003bc0:	2b02      	cmp	r3, #2
 8003bc2:	d107      	bne.n	8003bd4 <HAL_DCMI_IRQHandler+0xe8>
    {
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	68da      	ldr	r2, [r3, #12]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f022 021e 	bic.w	r2, r2, #30
 8003bd2:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	68da      	ldr	r2, [r3, #12]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f022 0201 	bic.w	r2, r2, #1
 8003be2:	60da      	str	r2, [r3, #12]

    /* Clear the End of Frame flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	2201      	movs	r2, #1
 8003bea:	615a      	str	r2, [r3, #20]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else
    HAL_DCMI_FrameEventCallback(hdcmi);
 8003bec:	6878      	ldr	r0, [r7, #4]
 8003bee:	f7fd fafd 	bl	80011ec <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
}
 8003bf2:	bf00      	nop
 8003bf4:	3710      	adds	r7, #16
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}
 8003bfa:	bf00      	nop
 8003bfc:	08003d67 	.word	0x08003d67

08003c00 <HAL_DCMI_ErrorCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b083      	sub	sp, #12
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 8003c08:	bf00      	nop
 8003c0a:	370c      	adds	r7, #12
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c12:	4770      	bx	lr

08003c14 <HAL_DCMI_LineEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b083      	sub	sp, #12
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_LineEventCallback could be implemented in the user file
   */
}
 8003c1c:	bf00      	nop
 8003c1e:	370c      	adds	r7, #12
 8003c20:	46bd      	mov	sp, r7
 8003c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c26:	4770      	bx	lr

08003c28 <HAL_DCMI_VsyncEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b083      	sub	sp, #12
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_VsyncEventCallback could be implemented in the user file
   */
}
 8003c30:	bf00      	nop
 8003c32:	370c      	adds	r7, #12
 8003c34:	46bd      	mov	sp, r7
 8003c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3a:	4770      	bx	lr

08003c3c <DCMI_DMAXferCplt>:
* @param  hdma pointer to a DMA_HandleTypeDef structure that contains
*                the configuration information for the specified DMA module.
* @retval None
*/
static void DCMI_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b084      	sub	sp, #16
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 8003c44:	2300      	movs	r3, #0
 8003c46:	60fb      	str	r3, [r7, #12]

  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c4c:	60bb      	str	r3, [r7, #8]

  if (hdcmi->XferCount != 0)
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d043      	beq.n	8003cde <DCMI_DMAXferCplt+0xa2>
  {
    /* Update memory 0 address location */
    tmp = ((hdcmi->DMA_Handle->Instance->CR) & DMA_SxCR_CT);
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c62:	60fb      	str	r3, [r7, #12]
    if (((hdcmi->XferCount % 2) == 0) && (tmp != 0))
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c68:	f003 0301 	and.w	r3, r3, #1
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d118      	bne.n	8003ca2 <DCMI_DMAXferCplt+0x66>
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d015      	beq.n	8003ca2 <DCMI_DMAXferCplt+0x66>
    {
      tmp = hdcmi->DMA_Handle->Instance->M0AR;
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	68db      	ldr	r3, [r3, #12]
 8003c7e:	60fb      	str	r3, [r7, #12]
      HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8 * hdcmi->XferSize)), MEMORY0);
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c88:	00da      	lsls	r2, r3, #3
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	4413      	add	r3, r2
 8003c8e:	2200      	movs	r2, #0
 8003c90:	4619      	mov	r1, r3
 8003c92:	f001 fe23 	bl	80058dc <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c9a:	1e5a      	subs	r2, r3, #1
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	639a      	str	r2, [r3, #56]	; 0x38
 8003ca0:	e044      	b.n	8003d2c <DCMI_DMAXferCplt+0xf0>
    }
    /* Update memory 1 address location */
    else if ((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) == 0)
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d13c      	bne.n	8003d2c <DCMI_DMAXferCplt+0xf0>
    {
      tmp = hdcmi->DMA_Handle->Instance->M1AR;
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	691b      	ldr	r3, [r3, #16]
 8003cba:	60fb      	str	r3, [r7, #12]
      HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8 * hdcmi->XferSize)), MEMORY1);
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cc4:	00da      	lsls	r2, r3, #3
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	4413      	add	r3, r2
 8003cca:	2201      	movs	r2, #1
 8003ccc:	4619      	mov	r1, r3
 8003cce:	f001 fe05 	bl	80058dc <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cd6:	1e5a      	subs	r2, r3, #1
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	639a      	str	r2, [r3, #56]	; 0x38
 8003cdc:	e026      	b.n	8003d2c <DCMI_DMAXferCplt+0xf0>
    }
  }
  /* Update memory 0 address location */
  else if ((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) != 0)
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d006      	beq.n	8003cfc <DCMI_DMAXferCplt+0xc0>
  {
    hdcmi->DMA_Handle->Instance->M0AR = hdcmi->pBuffPtr;
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	68ba      	ldr	r2, [r7, #8]
 8003cf6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003cf8:	60da      	str	r2, [r3, #12]
 8003cfa:	e017      	b.n	8003d2c <DCMI_DMAXferCplt+0xf0>
  }
  /* Update memory 1 address location */
  else if ((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) == 0)
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d10f      	bne.n	8003d2c <DCMI_DMAXferCplt+0xf0>
  {
    tmp = hdcmi->pBuffPtr;
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d10:	60fb      	str	r3, [r7, #12]
    hdcmi->DMA_Handle->Instance->M1AR = (tmp + (4 * hdcmi->XferSize));
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d16:	0099      	lsls	r1, r3, #2
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	68fa      	ldr	r2, [r7, #12]
 8003d20:	440a      	add	r2, r1
 8003d22:	611a      	str	r2, [r3, #16]
    hdcmi->XferCount = hdcmi->XferTransferNumber;
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Check if the frame is transferred */
  if (hdcmi->XferCount == hdcmi->XferTransferNumber)
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d34:	429a      	cmp	r2, r3
 8003d36:	d112      	bne.n	8003d5e <DCMI_DMAXferCplt+0x122>
  {
    /* Enable the Frame interrupt */
    __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	68da      	ldr	r2, [r3, #12]
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f042 0201 	orr.w	r2, r2, #1
 8003d46:	60da      	str	r2, [r3, #12]

    /* When snapshot mode, set dcmi state to ready */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f003 0302 	and.w	r3, r3, #2
 8003d52:	2b02      	cmp	r3, #2
 8003d54:	d103      	bne.n	8003d5e <DCMI_DMAXferCplt+0x122>
    {
      hdcmi->State = HAL_DCMI_STATE_READY;
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	2201      	movs	r2, #1
 8003d5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }
  }
}
 8003d5e:	bf00      	nop
 8003d60:	3710      	adds	r7, #16
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}

08003d66 <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 8003d66:	b580      	push	{r7, lr}
 8003d68:	b084      	sub	sp, #16
 8003d6a:	af00      	add	r7, sp, #0
 8003d6c:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d72:	60fb      	str	r3, [r7, #12]

  if (hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d7a:	2b02      	cmp	r3, #2
 8003d7c:	d009      	beq.n	8003d92 <DCMI_DMAError+0x2c>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	2201      	movs	r2, #1
 8003d82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set DCMI Error Code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d8a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	64da      	str	r2, [r3, #76]	; 0x4c
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
  /*Call registered DCMI error callback*/
  hdcmi->ErrorCallback(hdcmi);
#else
  HAL_DCMI_ErrorCallback(hdcmi);
 8003d92:	68f8      	ldr	r0, [r7, #12]
 8003d94:	f7ff ff34 	bl	8003c00 <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */

}
 8003d98:	bf00      	nop
 8003d9a:	3710      	adds	r7, #16
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bd80      	pop	{r7, pc}

08003da0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b086      	sub	sp, #24
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003da8:	2300      	movs	r3, #0
 8003daa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003dac:	f7ff fb5a 	bl	8003464 <HAL_GetTick>
 8003db0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d101      	bne.n	8003dbc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003db8:	2301      	movs	r3, #1
 8003dba:	e099      	b.n	8003ef0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2202      	movs	r2, #2
 8003dc0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	681a      	ldr	r2, [r3, #0]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f022 0201 	bic.w	r2, r2, #1
 8003dda:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ddc:	e00f      	b.n	8003dfe <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003dde:	f7ff fb41 	bl	8003464 <HAL_GetTick>
 8003de2:	4602      	mov	r2, r0
 8003de4:	693b      	ldr	r3, [r7, #16]
 8003de6:	1ad3      	subs	r3, r2, r3
 8003de8:	2b05      	cmp	r3, #5
 8003dea:	d908      	bls.n	8003dfe <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2220      	movs	r2, #32
 8003df0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2203      	movs	r2, #3
 8003df6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003dfa:	2303      	movs	r3, #3
 8003dfc:	e078      	b.n	8003ef0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f003 0301 	and.w	r3, r3, #1
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d1e8      	bne.n	8003dde <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003e14:	697a      	ldr	r2, [r7, #20]
 8003e16:	4b38      	ldr	r3, [pc, #224]	; (8003ef8 <HAL_DMA_Init+0x158>)
 8003e18:	4013      	ands	r3, r2
 8003e1a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	685a      	ldr	r2, [r3, #4]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	689b      	ldr	r3, [r3, #8]
 8003e24:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003e2a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	691b      	ldr	r3, [r3, #16]
 8003e30:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e36:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	699b      	ldr	r3, [r3, #24]
 8003e3c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e42:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6a1b      	ldr	r3, [r3, #32]
 8003e48:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003e4a:	697a      	ldr	r2, [r7, #20]
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e54:	2b04      	cmp	r3, #4
 8003e56:	d107      	bne.n	8003e68 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e60:	4313      	orrs	r3, r2
 8003e62:	697a      	ldr	r2, [r7, #20]
 8003e64:	4313      	orrs	r3, r2
 8003e66:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	697a      	ldr	r2, [r7, #20]
 8003e6e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	695b      	ldr	r3, [r3, #20]
 8003e76:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	f023 0307 	bic.w	r3, r3, #7
 8003e7e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e84:	697a      	ldr	r2, [r7, #20]
 8003e86:	4313      	orrs	r3, r2
 8003e88:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e8e:	2b04      	cmp	r3, #4
 8003e90:	d117      	bne.n	8003ec2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e96:	697a      	ldr	r2, [r7, #20]
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d00e      	beq.n	8003ec2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003ea4:	6878      	ldr	r0, [r7, #4]
 8003ea6:	f000 fb67 	bl	8004578 <DMA_CheckFifoParam>
 8003eaa:	4603      	mov	r3, r0
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d008      	beq.n	8003ec2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2240      	movs	r2, #64	; 0x40
 8003eb4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2201      	movs	r2, #1
 8003eba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	e016      	b.n	8003ef0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	697a      	ldr	r2, [r7, #20]
 8003ec8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	f000 fb1e 	bl	800450c <DMA_CalcBaseAndBitshift>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ed8:	223f      	movs	r2, #63	; 0x3f
 8003eda:	409a      	lsls	r2, r3
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2201      	movs	r2, #1
 8003eea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003eee:	2300      	movs	r3, #0
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	3718      	adds	r7, #24
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bd80      	pop	{r7, pc}
 8003ef8:	f010803f 	.word	0xf010803f

08003efc <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b084      	sub	sp, #16
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d101      	bne.n	8003f0e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	e050      	b.n	8003fb0 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003f14:	b2db      	uxtb	r3, r3
 8003f16:	2b02      	cmp	r3, #2
 8003f18:	d101      	bne.n	8003f1e <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8003f1a:	2302      	movs	r3, #2
 8003f1c:	e048      	b.n	8003fb0 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	681a      	ldr	r2, [r3, #0]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f022 0201 	bic.w	r2, r2, #1
 8003f2c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	2200      	movs	r2, #0
 8003f34:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	2200      	movs	r2, #0
 8003f44:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	2200      	movs	r2, #0
 8003f54:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	2221      	movs	r2, #33	; 0x21
 8003f5c:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003f5e:	6878      	ldr	r0, [r7, #4]
 8003f60:	f000 fad4 	bl	800450c <DMA_CalcBaseAndBitshift>
 8003f64:	4603      	mov	r3, r0
 8003f66:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f6c:	223f      	movs	r2, #63	; 0x3f
 8003f6e:	409a      	lsls	r2, r3
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2200      	movs	r2, #0
 8003f78:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2200      	movs	r2, #0
 8003f84:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2200      	movs	r2, #0
 8003f90:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2200      	movs	r2, #0
 8003f96:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003fae:	2300      	movs	r3, #0
}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	3710      	adds	r7, #16
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bd80      	pop	{r7, pc}

08003fb8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b086      	sub	sp, #24
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	60f8      	str	r0, [r7, #12]
 8003fc0:	60b9      	str	r1, [r7, #8]
 8003fc2:	607a      	str	r2, [r7, #4]
 8003fc4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fce:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003fd6:	2b01      	cmp	r3, #1
 8003fd8:	d101      	bne.n	8003fde <HAL_DMA_Start_IT+0x26>
 8003fda:	2302      	movs	r3, #2
 8003fdc:	e048      	b.n	8004070 <HAL_DMA_Start_IT+0xb8>
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	2201      	movs	r2, #1
 8003fe2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003fec:	b2db      	uxtb	r3, r3
 8003fee:	2b01      	cmp	r3, #1
 8003ff0:	d137      	bne.n	8004062 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	2202      	movs	r2, #2
 8003ff6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	687a      	ldr	r2, [r7, #4]
 8004004:	68b9      	ldr	r1, [r7, #8]
 8004006:	68f8      	ldr	r0, [r7, #12]
 8004008:	f000 fa52 	bl	80044b0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004010:	223f      	movs	r2, #63	; 0x3f
 8004012:	409a      	lsls	r2, r3
 8004014:	693b      	ldr	r3, [r7, #16]
 8004016:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	681a      	ldr	r2, [r3, #0]
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f042 0216 	orr.w	r2, r2, #22
 8004026:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	695a      	ldr	r2, [r3, #20]
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004036:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800403c:	2b00      	cmp	r3, #0
 800403e:	d007      	beq.n	8004050 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	681a      	ldr	r2, [r3, #0]
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f042 0208 	orr.w	r2, r2, #8
 800404e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	681a      	ldr	r2, [r3, #0]
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f042 0201 	orr.w	r2, r2, #1
 800405e:	601a      	str	r2, [r3, #0]
 8004060:	e005      	b.n	800406e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	2200      	movs	r2, #0
 8004066:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800406a:	2302      	movs	r3, #2
 800406c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800406e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004070:	4618      	mov	r0, r3
 8004072:	3718      	adds	r7, #24
 8004074:	46bd      	mov	sp, r7
 8004076:	bd80      	pop	{r7, pc}

08004078 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b084      	sub	sp, #16
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004084:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004086:	f7ff f9ed 	bl	8003464 <HAL_GetTick>
 800408a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004092:	b2db      	uxtb	r3, r3
 8004094:	2b02      	cmp	r3, #2
 8004096:	d008      	beq.n	80040aa <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2280      	movs	r2, #128	; 0x80
 800409c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2200      	movs	r2, #0
 80040a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80040a6:	2301      	movs	r3, #1
 80040a8:	e052      	b.n	8004150 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	681a      	ldr	r2, [r3, #0]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f022 0216 	bic.w	r2, r2, #22
 80040b8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	695a      	ldr	r2, [r3, #20]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80040c8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d103      	bne.n	80040da <HAL_DMA_Abort+0x62>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d007      	beq.n	80040ea <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	681a      	ldr	r2, [r3, #0]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f022 0208 	bic.w	r2, r2, #8
 80040e8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	681a      	ldr	r2, [r3, #0]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f022 0201 	bic.w	r2, r2, #1
 80040f8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80040fa:	e013      	b.n	8004124 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80040fc:	f7ff f9b2 	bl	8003464 <HAL_GetTick>
 8004100:	4602      	mov	r2, r0
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	1ad3      	subs	r3, r2, r3
 8004106:	2b05      	cmp	r3, #5
 8004108:	d90c      	bls.n	8004124 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2220      	movs	r2, #32
 800410e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2203      	movs	r2, #3
 8004114:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2200      	movs	r2, #0
 800411c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8004120:	2303      	movs	r3, #3
 8004122:	e015      	b.n	8004150 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f003 0301 	and.w	r3, r3, #1
 800412e:	2b00      	cmp	r3, #0
 8004130:	d1e4      	bne.n	80040fc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004136:	223f      	movs	r2, #63	; 0x3f
 8004138:	409a      	lsls	r2, r3
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2201      	movs	r2, #1
 8004142:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2200      	movs	r2, #0
 800414a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 800414e:	2300      	movs	r3, #0
}
 8004150:	4618      	mov	r0, r3
 8004152:	3710      	adds	r7, #16
 8004154:	46bd      	mov	sp, r7
 8004156:	bd80      	pop	{r7, pc}

08004158 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004158:	b480      	push	{r7}
 800415a:	b083      	sub	sp, #12
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004166:	b2db      	uxtb	r3, r3
 8004168:	2b02      	cmp	r3, #2
 800416a:	d004      	beq.n	8004176 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2280      	movs	r2, #128	; 0x80
 8004170:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004172:	2301      	movs	r3, #1
 8004174:	e00c      	b.n	8004190 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2205      	movs	r2, #5
 800417a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f022 0201 	bic.w	r2, r2, #1
 800418c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800418e:	2300      	movs	r3, #0
}
 8004190:	4618      	mov	r0, r3
 8004192:	370c      	adds	r7, #12
 8004194:	46bd      	mov	sp, r7
 8004196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419a:	4770      	bx	lr

0800419c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b086      	sub	sp, #24
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80041a4:	2300      	movs	r3, #0
 80041a6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80041a8:	4b92      	ldr	r3, [pc, #584]	; (80043f4 <HAL_DMA_IRQHandler+0x258>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a92      	ldr	r2, [pc, #584]	; (80043f8 <HAL_DMA_IRQHandler+0x25c>)
 80041ae:	fba2 2303 	umull	r2, r3, r2, r3
 80041b2:	0a9b      	lsrs	r3, r3, #10
 80041b4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041ba:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80041bc:	693b      	ldr	r3, [r7, #16]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041c6:	2208      	movs	r2, #8
 80041c8:	409a      	lsls	r2, r3
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	4013      	ands	r3, r2
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d01a      	beq.n	8004208 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f003 0304 	and.w	r3, r3, #4
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d013      	beq.n	8004208 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	681a      	ldr	r2, [r3, #0]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f022 0204 	bic.w	r2, r2, #4
 80041ee:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041f4:	2208      	movs	r2, #8
 80041f6:	409a      	lsls	r2, r3
 80041f8:	693b      	ldr	r3, [r7, #16]
 80041fa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004200:	f043 0201 	orr.w	r2, r3, #1
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800420c:	2201      	movs	r2, #1
 800420e:	409a      	lsls	r2, r3
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	4013      	ands	r3, r2
 8004214:	2b00      	cmp	r3, #0
 8004216:	d012      	beq.n	800423e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	695b      	ldr	r3, [r3, #20]
 800421e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004222:	2b00      	cmp	r3, #0
 8004224:	d00b      	beq.n	800423e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800422a:	2201      	movs	r2, #1
 800422c:	409a      	lsls	r2, r3
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004236:	f043 0202 	orr.w	r2, r3, #2
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004242:	2204      	movs	r2, #4
 8004244:	409a      	lsls	r2, r3
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	4013      	ands	r3, r2
 800424a:	2b00      	cmp	r3, #0
 800424c:	d012      	beq.n	8004274 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f003 0302 	and.w	r3, r3, #2
 8004258:	2b00      	cmp	r3, #0
 800425a:	d00b      	beq.n	8004274 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004260:	2204      	movs	r2, #4
 8004262:	409a      	lsls	r2, r3
 8004264:	693b      	ldr	r3, [r7, #16]
 8004266:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800426c:	f043 0204 	orr.w	r2, r3, #4
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004278:	2210      	movs	r2, #16
 800427a:	409a      	lsls	r2, r3
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	4013      	ands	r3, r2
 8004280:	2b00      	cmp	r3, #0
 8004282:	d043      	beq.n	800430c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f003 0308 	and.w	r3, r3, #8
 800428e:	2b00      	cmp	r3, #0
 8004290:	d03c      	beq.n	800430c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004296:	2210      	movs	r2, #16
 8004298:	409a      	lsls	r2, r3
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d018      	beq.n	80042de <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d108      	bne.n	80042cc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d024      	beq.n	800430c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042c6:	6878      	ldr	r0, [r7, #4]
 80042c8:	4798      	blx	r3
 80042ca:	e01f      	b.n	800430c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d01b      	beq.n	800430c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042d8:	6878      	ldr	r0, [r7, #4]
 80042da:	4798      	blx	r3
 80042dc:	e016      	b.n	800430c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d107      	bne.n	80042fc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	681a      	ldr	r2, [r3, #0]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f022 0208 	bic.w	r2, r2, #8
 80042fa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004300:	2b00      	cmp	r3, #0
 8004302:	d003      	beq.n	800430c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004308:	6878      	ldr	r0, [r7, #4]
 800430a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004310:	2220      	movs	r2, #32
 8004312:	409a      	lsls	r2, r3
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	4013      	ands	r3, r2
 8004318:	2b00      	cmp	r3, #0
 800431a:	f000 808e 	beq.w	800443a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f003 0310 	and.w	r3, r3, #16
 8004328:	2b00      	cmp	r3, #0
 800432a:	f000 8086 	beq.w	800443a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004332:	2220      	movs	r2, #32
 8004334:	409a      	lsls	r2, r3
 8004336:	693b      	ldr	r3, [r7, #16]
 8004338:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004340:	b2db      	uxtb	r3, r3
 8004342:	2b05      	cmp	r3, #5
 8004344:	d136      	bne.n	80043b4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	681a      	ldr	r2, [r3, #0]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f022 0216 	bic.w	r2, r2, #22
 8004354:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	695a      	ldr	r2, [r3, #20]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004364:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800436a:	2b00      	cmp	r3, #0
 800436c:	d103      	bne.n	8004376 <HAL_DMA_IRQHandler+0x1da>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004372:	2b00      	cmp	r3, #0
 8004374:	d007      	beq.n	8004386 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	681a      	ldr	r2, [r3, #0]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f022 0208 	bic.w	r2, r2, #8
 8004384:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800438a:	223f      	movs	r2, #63	; 0x3f
 800438c:	409a      	lsls	r2, r3
 800438e:	693b      	ldr	r3, [r7, #16]
 8004390:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2201      	movs	r2, #1
 8004396:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2200      	movs	r2, #0
 800439e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d07d      	beq.n	80044a6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043ae:	6878      	ldr	r0, [r7, #4]
 80043b0:	4798      	blx	r3
        }
        return;
 80043b2:	e078      	b.n	80044a6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d01c      	beq.n	80043fc <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d108      	bne.n	80043e2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d030      	beq.n	800443a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043dc:	6878      	ldr	r0, [r7, #4]
 80043de:	4798      	blx	r3
 80043e0:	e02b      	b.n	800443a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d027      	beq.n	800443a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	4798      	blx	r3
 80043f2:	e022      	b.n	800443a <HAL_DMA_IRQHandler+0x29e>
 80043f4:	20000080 	.word	0x20000080
 80043f8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004406:	2b00      	cmp	r3, #0
 8004408:	d10f      	bne.n	800442a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	681a      	ldr	r2, [r3, #0]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f022 0210 	bic.w	r2, r2, #16
 8004418:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2201      	movs	r2, #1
 800441e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2200      	movs	r2, #0
 8004426:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800442e:	2b00      	cmp	r3, #0
 8004430:	d003      	beq.n	800443a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004436:	6878      	ldr	r0, [r7, #4]
 8004438:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800443e:	2b00      	cmp	r3, #0
 8004440:	d032      	beq.n	80044a8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004446:	f003 0301 	and.w	r3, r3, #1
 800444a:	2b00      	cmp	r3, #0
 800444c:	d022      	beq.n	8004494 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2205      	movs	r2, #5
 8004452:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	681a      	ldr	r2, [r3, #0]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f022 0201 	bic.w	r2, r2, #1
 8004464:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004466:	68bb      	ldr	r3, [r7, #8]
 8004468:	3301      	adds	r3, #1
 800446a:	60bb      	str	r3, [r7, #8]
 800446c:	697a      	ldr	r2, [r7, #20]
 800446e:	429a      	cmp	r2, r3
 8004470:	d307      	bcc.n	8004482 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f003 0301 	and.w	r3, r3, #1
 800447c:	2b00      	cmp	r3, #0
 800447e:	d1f2      	bne.n	8004466 <HAL_DMA_IRQHandler+0x2ca>
 8004480:	e000      	b.n	8004484 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8004482:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2201      	movs	r2, #1
 8004488:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2200      	movs	r2, #0
 8004490:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004498:	2b00      	cmp	r3, #0
 800449a:	d005      	beq.n	80044a8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044a0:	6878      	ldr	r0, [r7, #4]
 80044a2:	4798      	blx	r3
 80044a4:	e000      	b.n	80044a8 <HAL_DMA_IRQHandler+0x30c>
        return;
 80044a6:	bf00      	nop
    }
  }
}
 80044a8:	3718      	adds	r7, #24
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd80      	pop	{r7, pc}
 80044ae:	bf00      	nop

080044b0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b085      	sub	sp, #20
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	60f8      	str	r0, [r7, #12]
 80044b8:	60b9      	str	r1, [r7, #8]
 80044ba:	607a      	str	r2, [r7, #4]
 80044bc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	681a      	ldr	r2, [r3, #0]
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80044cc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	683a      	ldr	r2, [r7, #0]
 80044d4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	689b      	ldr	r3, [r3, #8]
 80044da:	2b40      	cmp	r3, #64	; 0x40
 80044dc:	d108      	bne.n	80044f0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	687a      	ldr	r2, [r7, #4]
 80044e4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	68ba      	ldr	r2, [r7, #8]
 80044ec:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80044ee:	e007      	b.n	8004500 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	68ba      	ldr	r2, [r7, #8]
 80044f6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	687a      	ldr	r2, [r7, #4]
 80044fe:	60da      	str	r2, [r3, #12]
}
 8004500:	bf00      	nop
 8004502:	3714      	adds	r7, #20
 8004504:	46bd      	mov	sp, r7
 8004506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450a:	4770      	bx	lr

0800450c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800450c:	b480      	push	{r7}
 800450e:	b085      	sub	sp, #20
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	b2db      	uxtb	r3, r3
 800451a:	3b10      	subs	r3, #16
 800451c:	4a13      	ldr	r2, [pc, #76]	; (800456c <DMA_CalcBaseAndBitshift+0x60>)
 800451e:	fba2 2303 	umull	r2, r3, r2, r3
 8004522:	091b      	lsrs	r3, r3, #4
 8004524:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004526:	4a12      	ldr	r2, [pc, #72]	; (8004570 <DMA_CalcBaseAndBitshift+0x64>)
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	4413      	add	r3, r2
 800452c:	781b      	ldrb	r3, [r3, #0]
 800452e:	461a      	mov	r2, r3
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	2b03      	cmp	r3, #3
 8004538:	d908      	bls.n	800454c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	461a      	mov	r2, r3
 8004540:	4b0c      	ldr	r3, [pc, #48]	; (8004574 <DMA_CalcBaseAndBitshift+0x68>)
 8004542:	4013      	ands	r3, r2
 8004544:	1d1a      	adds	r2, r3, #4
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	659a      	str	r2, [r3, #88]	; 0x58
 800454a:	e006      	b.n	800455a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	461a      	mov	r2, r3
 8004552:	4b08      	ldr	r3, [pc, #32]	; (8004574 <DMA_CalcBaseAndBitshift+0x68>)
 8004554:	4013      	ands	r3, r2
 8004556:	687a      	ldr	r2, [r7, #4]
 8004558:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800455e:	4618      	mov	r0, r3
 8004560:	3714      	adds	r7, #20
 8004562:	46bd      	mov	sp, r7
 8004564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004568:	4770      	bx	lr
 800456a:	bf00      	nop
 800456c:	aaaaaaab 	.word	0xaaaaaaab
 8004570:	08008c54 	.word	0x08008c54
 8004574:	fffffc00 	.word	0xfffffc00

08004578 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004578:	b480      	push	{r7}
 800457a:	b085      	sub	sp, #20
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004580:	2300      	movs	r3, #0
 8004582:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004588:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	699b      	ldr	r3, [r3, #24]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d11f      	bne.n	80045d2 <DMA_CheckFifoParam+0x5a>
 8004592:	68bb      	ldr	r3, [r7, #8]
 8004594:	2b03      	cmp	r3, #3
 8004596:	d856      	bhi.n	8004646 <DMA_CheckFifoParam+0xce>
 8004598:	a201      	add	r2, pc, #4	; (adr r2, 80045a0 <DMA_CheckFifoParam+0x28>)
 800459a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800459e:	bf00      	nop
 80045a0:	080045b1 	.word	0x080045b1
 80045a4:	080045c3 	.word	0x080045c3
 80045a8:	080045b1 	.word	0x080045b1
 80045ac:	08004647 	.word	0x08004647
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d046      	beq.n	800464a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80045bc:	2301      	movs	r3, #1
 80045be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045c0:	e043      	b.n	800464a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045c6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80045ca:	d140      	bne.n	800464e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80045cc:	2301      	movs	r3, #1
 80045ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045d0:	e03d      	b.n	800464e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	699b      	ldr	r3, [r3, #24]
 80045d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045da:	d121      	bne.n	8004620 <DMA_CheckFifoParam+0xa8>
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	2b03      	cmp	r3, #3
 80045e0:	d837      	bhi.n	8004652 <DMA_CheckFifoParam+0xda>
 80045e2:	a201      	add	r2, pc, #4	; (adr r2, 80045e8 <DMA_CheckFifoParam+0x70>)
 80045e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045e8:	080045f9 	.word	0x080045f9
 80045ec:	080045ff 	.word	0x080045ff
 80045f0:	080045f9 	.word	0x080045f9
 80045f4:	08004611 	.word	0x08004611
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80045f8:	2301      	movs	r3, #1
 80045fa:	73fb      	strb	r3, [r7, #15]
      break;
 80045fc:	e030      	b.n	8004660 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004602:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004606:	2b00      	cmp	r3, #0
 8004608:	d025      	beq.n	8004656 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800460a:	2301      	movs	r3, #1
 800460c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800460e:	e022      	b.n	8004656 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004614:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004618:	d11f      	bne.n	800465a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800461e:	e01c      	b.n	800465a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	2b02      	cmp	r3, #2
 8004624:	d903      	bls.n	800462e <DMA_CheckFifoParam+0xb6>
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	2b03      	cmp	r3, #3
 800462a:	d003      	beq.n	8004634 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800462c:	e018      	b.n	8004660 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800462e:	2301      	movs	r3, #1
 8004630:	73fb      	strb	r3, [r7, #15]
      break;
 8004632:	e015      	b.n	8004660 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004638:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800463c:	2b00      	cmp	r3, #0
 800463e:	d00e      	beq.n	800465e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004640:	2301      	movs	r3, #1
 8004642:	73fb      	strb	r3, [r7, #15]
      break;
 8004644:	e00b      	b.n	800465e <DMA_CheckFifoParam+0xe6>
      break;
 8004646:	bf00      	nop
 8004648:	e00a      	b.n	8004660 <DMA_CheckFifoParam+0xe8>
      break;
 800464a:	bf00      	nop
 800464c:	e008      	b.n	8004660 <DMA_CheckFifoParam+0xe8>
      break;
 800464e:	bf00      	nop
 8004650:	e006      	b.n	8004660 <DMA_CheckFifoParam+0xe8>
      break;
 8004652:	bf00      	nop
 8004654:	e004      	b.n	8004660 <DMA_CheckFifoParam+0xe8>
      break;
 8004656:	bf00      	nop
 8004658:	e002      	b.n	8004660 <DMA_CheckFifoParam+0xe8>
      break;   
 800465a:	bf00      	nop
 800465c:	e000      	b.n	8004660 <DMA_CheckFifoParam+0xe8>
      break;
 800465e:	bf00      	nop
    }
  } 
  
  return status; 
 8004660:	7bfb      	ldrb	r3, [r7, #15]
}
 8004662:	4618      	mov	r0, r3
 8004664:	3714      	adds	r7, #20
 8004666:	46bd      	mov	sp, r7
 8004668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466c:	4770      	bx	lr
 800466e:	bf00      	nop

08004670 <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress The second memory Buffer address in case of multi buffer Transfer  
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b086      	sub	sp, #24
 8004674:	af00      	add	r7, sp, #0
 8004676:	60f8      	str	r0, [r7, #12]
 8004678:	60b9      	str	r1, [r7, #8]
 800467a:	607a      	str	r2, [r7, #4]
 800467c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800467e:	2300      	movs	r3, #0
 8004680:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Memory-to-memory transfer not supported in double buffering mode */
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	689b      	ldr	r3, [r3, #8]
 8004686:	2b80      	cmp	r3, #128	; 0x80
 8004688:	d106      	bne.n	8004698 <HAL_DMAEx_MultiBufferStart_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004690:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004692:	2301      	movs	r3, #1
 8004694:	f001 b901 	b.w	800589a <HAL_DMAEx_MultiBufferStart_IT+0x122a>
  }
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800469e:	2b01      	cmp	r3, #1
 80046a0:	d102      	bne.n	80046a8 <HAL_DMAEx_MultiBufferStart_IT+0x38>
 80046a2:	2302      	movs	r3, #2
 80046a4:	f001 b8f9 	b.w	800589a <HAL_DMAEx_MultiBufferStart_IT+0x122a>
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	2201      	movs	r2, #1
 80046ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80046b6:	b2db      	uxtb	r3, r3
 80046b8:	2b01      	cmp	r3, #1
 80046ba:	f041 80e7 	bne.w	800588c <HAL_DMAEx_MultiBufferStart_IT+0x121c>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	2202      	movs	r2, #2
 80046c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	2200      	movs	r2, #0
 80046ca:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Enable the Double buffer mode */
    hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	681a      	ldr	r2, [r3, #0]
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80046da:	601a      	str	r2, [r3, #0]
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M1AR = SecondMemAddress;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	683a      	ldr	r2, [r7, #0]
 80046e2:	611a      	str	r2, [r3, #16]
    
    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength); 
 80046e4:	6a3b      	ldr	r3, [r7, #32]
 80046e6:	687a      	ldr	r2, [r7, #4]
 80046e8:	68b9      	ldr	r1, [r7, #8]
 80046ea:	68f8      	ldr	r0, [r7, #12]
 80046ec:	f001 f910 	bl	8005910 <DMA_MultiBufferSetConfig>
    
    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	461a      	mov	r2, r3
 80046f6:	4b99      	ldr	r3, [pc, #612]	; (800495c <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 80046f8:	429a      	cmp	r2, r3
 80046fa:	d960      	bls.n	80047be <HAL_DMAEx_MultiBufferStart_IT+0x14e>
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a97      	ldr	r2, [pc, #604]	; (8004960 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d057      	beq.n	80047b6 <HAL_DMAEx_MultiBufferStart_IT+0x146>
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4a96      	ldr	r2, [pc, #600]	; (8004964 <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d050      	beq.n	80047b2 <HAL_DMAEx_MultiBufferStart_IT+0x142>
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a94      	ldr	r2, [pc, #592]	; (8004968 <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d049      	beq.n	80047ae <HAL_DMAEx_MultiBufferStart_IT+0x13e>
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a93      	ldr	r2, [pc, #588]	; (800496c <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d042      	beq.n	80047aa <HAL_DMAEx_MultiBufferStart_IT+0x13a>
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a91      	ldr	r2, [pc, #580]	; (8004970 <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d03a      	beq.n	80047a4 <HAL_DMAEx_MultiBufferStart_IT+0x134>
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4a90      	ldr	r2, [pc, #576]	; (8004974 <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d032      	beq.n	800479e <HAL_DMAEx_MultiBufferStart_IT+0x12e>
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a8e      	ldr	r2, [pc, #568]	; (8004978 <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d02a      	beq.n	8004798 <HAL_DMAEx_MultiBufferStart_IT+0x128>
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a8d      	ldr	r2, [pc, #564]	; (800497c <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d022      	beq.n	8004792 <HAL_DMAEx_MultiBufferStart_IT+0x122>
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a8b      	ldr	r2, [pc, #556]	; (8004980 <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d01a      	beq.n	800478c <HAL_DMAEx_MultiBufferStart_IT+0x11c>
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a8a      	ldr	r2, [pc, #552]	; (8004984 <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d012      	beq.n	8004786 <HAL_DMAEx_MultiBufferStart_IT+0x116>
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a88      	ldr	r2, [pc, #544]	; (8004988 <HAL_DMAEx_MultiBufferStart_IT+0x318>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d00a      	beq.n	8004780 <HAL_DMAEx_MultiBufferStart_IT+0x110>
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a87      	ldr	r2, [pc, #540]	; (800498c <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d102      	bne.n	800477a <HAL_DMAEx_MultiBufferStart_IT+0x10a>
 8004774:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004778:	e01e      	b.n	80047b8 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 800477a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800477e:	e01b      	b.n	80047b8 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 8004780:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004784:	e018      	b.n	80047b8 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 8004786:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800478a:	e015      	b.n	80047b8 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 800478c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004790:	e012      	b.n	80047b8 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 8004792:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004796:	e00f      	b.n	80047b8 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 8004798:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800479c:	e00c      	b.n	80047b8 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 800479e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80047a2:	e009      	b.n	80047b8 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 80047a4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80047a8:	e006      	b.n	80047b8 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 80047aa:	2320      	movs	r3, #32
 80047ac:	e004      	b.n	80047b8 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 80047ae:	2320      	movs	r3, #32
 80047b0:	e002      	b.n	80047b8 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 80047b2:	2320      	movs	r3, #32
 80047b4:	e000      	b.n	80047b8 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 80047b6:	2320      	movs	r3, #32
 80047b8:	4a75      	ldr	r2, [pc, #468]	; (8004990 <HAL_DMAEx_MultiBufferStart_IT+0x320>)
 80047ba:	60d3      	str	r3, [r2, #12]
 80047bc:	e150      	b.n	8004a60 <HAL_DMAEx_MultiBufferStart_IT+0x3f0>
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	461a      	mov	r2, r3
 80047c4:	4b73      	ldr	r3, [pc, #460]	; (8004994 <HAL_DMAEx_MultiBufferStart_IT+0x324>)
 80047c6:	429a      	cmp	r2, r3
 80047c8:	d960      	bls.n	800488c <HAL_DMAEx_MultiBufferStart_IT+0x21c>
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a64      	ldr	r2, [pc, #400]	; (8004960 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d057      	beq.n	8004884 <HAL_DMAEx_MultiBufferStart_IT+0x214>
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a62      	ldr	r2, [pc, #392]	; (8004964 <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d050      	beq.n	8004880 <HAL_DMAEx_MultiBufferStart_IT+0x210>
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a61      	ldr	r2, [pc, #388]	; (8004968 <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d049      	beq.n	800487c <HAL_DMAEx_MultiBufferStart_IT+0x20c>
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a5f      	ldr	r2, [pc, #380]	; (800496c <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d042      	beq.n	8004878 <HAL_DMAEx_MultiBufferStart_IT+0x208>
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a5e      	ldr	r2, [pc, #376]	; (8004970 <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d03a      	beq.n	8004872 <HAL_DMAEx_MultiBufferStart_IT+0x202>
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a5c      	ldr	r2, [pc, #368]	; (8004974 <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d032      	beq.n	800486c <HAL_DMAEx_MultiBufferStart_IT+0x1fc>
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a5b      	ldr	r2, [pc, #364]	; (8004978 <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d02a      	beq.n	8004866 <HAL_DMAEx_MultiBufferStart_IT+0x1f6>
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a59      	ldr	r2, [pc, #356]	; (800497c <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d022      	beq.n	8004860 <HAL_DMAEx_MultiBufferStart_IT+0x1f0>
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4a58      	ldr	r2, [pc, #352]	; (8004980 <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d01a      	beq.n	800485a <HAL_DMAEx_MultiBufferStart_IT+0x1ea>
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4a56      	ldr	r2, [pc, #344]	; (8004984 <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d012      	beq.n	8004854 <HAL_DMAEx_MultiBufferStart_IT+0x1e4>
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4a55      	ldr	r2, [pc, #340]	; (8004988 <HAL_DMAEx_MultiBufferStart_IT+0x318>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d00a      	beq.n	800484e <HAL_DMAEx_MultiBufferStart_IT+0x1de>
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4a53      	ldr	r2, [pc, #332]	; (800498c <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d102      	bne.n	8004848 <HAL_DMAEx_MultiBufferStart_IT+0x1d8>
 8004842:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004846:	e01e      	b.n	8004886 <HAL_DMAEx_MultiBufferStart_IT+0x216>
 8004848:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800484c:	e01b      	b.n	8004886 <HAL_DMAEx_MultiBufferStart_IT+0x216>
 800484e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004852:	e018      	b.n	8004886 <HAL_DMAEx_MultiBufferStart_IT+0x216>
 8004854:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004858:	e015      	b.n	8004886 <HAL_DMAEx_MultiBufferStart_IT+0x216>
 800485a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800485e:	e012      	b.n	8004886 <HAL_DMAEx_MultiBufferStart_IT+0x216>
 8004860:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004864:	e00f      	b.n	8004886 <HAL_DMAEx_MultiBufferStart_IT+0x216>
 8004866:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800486a:	e00c      	b.n	8004886 <HAL_DMAEx_MultiBufferStart_IT+0x216>
 800486c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004870:	e009      	b.n	8004886 <HAL_DMAEx_MultiBufferStart_IT+0x216>
 8004872:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004876:	e006      	b.n	8004886 <HAL_DMAEx_MultiBufferStart_IT+0x216>
 8004878:	2320      	movs	r3, #32
 800487a:	e004      	b.n	8004886 <HAL_DMAEx_MultiBufferStart_IT+0x216>
 800487c:	2320      	movs	r3, #32
 800487e:	e002      	b.n	8004886 <HAL_DMAEx_MultiBufferStart_IT+0x216>
 8004880:	2320      	movs	r3, #32
 8004882:	e000      	b.n	8004886 <HAL_DMAEx_MultiBufferStart_IT+0x216>
 8004884:	2320      	movs	r3, #32
 8004886:	4a42      	ldr	r2, [pc, #264]	; (8004990 <HAL_DMAEx_MultiBufferStart_IT+0x320>)
 8004888:	6093      	str	r3, [r2, #8]
 800488a:	e0e9      	b.n	8004a60 <HAL_DMAEx_MultiBufferStart_IT+0x3f0>
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	461a      	mov	r2, r3
 8004892:	4b41      	ldr	r3, [pc, #260]	; (8004998 <HAL_DMAEx_MultiBufferStart_IT+0x328>)
 8004894:	429a      	cmp	r2, r3
 8004896:	f240 8083 	bls.w	80049a0 <HAL_DMAEx_MultiBufferStart_IT+0x330>
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a30      	ldr	r2, [pc, #192]	; (8004960 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d057      	beq.n	8004954 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a2e      	ldr	r2, [pc, #184]	; (8004964 <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d050      	beq.n	8004950 <HAL_DMAEx_MultiBufferStart_IT+0x2e0>
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4a2d      	ldr	r2, [pc, #180]	; (8004968 <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d049      	beq.n	800494c <HAL_DMAEx_MultiBufferStart_IT+0x2dc>
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4a2b      	ldr	r2, [pc, #172]	; (800496c <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d042      	beq.n	8004948 <HAL_DMAEx_MultiBufferStart_IT+0x2d8>
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4a2a      	ldr	r2, [pc, #168]	; (8004970 <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d03a      	beq.n	8004942 <HAL_DMAEx_MultiBufferStart_IT+0x2d2>
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4a28      	ldr	r2, [pc, #160]	; (8004974 <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d032      	beq.n	800493c <HAL_DMAEx_MultiBufferStart_IT+0x2cc>
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4a27      	ldr	r2, [pc, #156]	; (8004978 <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d02a      	beq.n	8004936 <HAL_DMAEx_MultiBufferStart_IT+0x2c6>
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4a25      	ldr	r2, [pc, #148]	; (800497c <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d022      	beq.n	8004930 <HAL_DMAEx_MultiBufferStart_IT+0x2c0>
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4a24      	ldr	r2, [pc, #144]	; (8004980 <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d01a      	beq.n	800492a <HAL_DMAEx_MultiBufferStart_IT+0x2ba>
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4a22      	ldr	r2, [pc, #136]	; (8004984 <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d012      	beq.n	8004924 <HAL_DMAEx_MultiBufferStart_IT+0x2b4>
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4a21      	ldr	r2, [pc, #132]	; (8004988 <HAL_DMAEx_MultiBufferStart_IT+0x318>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d00a      	beq.n	800491e <HAL_DMAEx_MultiBufferStart_IT+0x2ae>
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a1f      	ldr	r2, [pc, #124]	; (800498c <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d102      	bne.n	8004918 <HAL_DMAEx_MultiBufferStart_IT+0x2a8>
 8004912:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004916:	e01e      	b.n	8004956 <HAL_DMAEx_MultiBufferStart_IT+0x2e6>
 8004918:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800491c:	e01b      	b.n	8004956 <HAL_DMAEx_MultiBufferStart_IT+0x2e6>
 800491e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004922:	e018      	b.n	8004956 <HAL_DMAEx_MultiBufferStart_IT+0x2e6>
 8004924:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004928:	e015      	b.n	8004956 <HAL_DMAEx_MultiBufferStart_IT+0x2e6>
 800492a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800492e:	e012      	b.n	8004956 <HAL_DMAEx_MultiBufferStart_IT+0x2e6>
 8004930:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004934:	e00f      	b.n	8004956 <HAL_DMAEx_MultiBufferStart_IT+0x2e6>
 8004936:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800493a:	e00c      	b.n	8004956 <HAL_DMAEx_MultiBufferStart_IT+0x2e6>
 800493c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004940:	e009      	b.n	8004956 <HAL_DMAEx_MultiBufferStart_IT+0x2e6>
 8004942:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004946:	e006      	b.n	8004956 <HAL_DMAEx_MultiBufferStart_IT+0x2e6>
 8004948:	2320      	movs	r3, #32
 800494a:	e004      	b.n	8004956 <HAL_DMAEx_MultiBufferStart_IT+0x2e6>
 800494c:	2320      	movs	r3, #32
 800494e:	e002      	b.n	8004956 <HAL_DMAEx_MultiBufferStart_IT+0x2e6>
 8004950:	2320      	movs	r3, #32
 8004952:	e000      	b.n	8004956 <HAL_DMAEx_MultiBufferStart_IT+0x2e6>
 8004954:	2320      	movs	r3, #32
 8004956:	4a11      	ldr	r2, [pc, #68]	; (800499c <HAL_DMAEx_MultiBufferStart_IT+0x32c>)
 8004958:	60d3      	str	r3, [r2, #12]
 800495a:	e081      	b.n	8004a60 <HAL_DMAEx_MultiBufferStart_IT+0x3f0>
 800495c:	40026458 	.word	0x40026458
 8004960:	40026010 	.word	0x40026010
 8004964:	40026410 	.word	0x40026410
 8004968:	40026070 	.word	0x40026070
 800496c:	40026470 	.word	0x40026470
 8004970:	40026028 	.word	0x40026028
 8004974:	40026428 	.word	0x40026428
 8004978:	40026088 	.word	0x40026088
 800497c:	40026488 	.word	0x40026488
 8004980:	40026040 	.word	0x40026040
 8004984:	40026440 	.word	0x40026440
 8004988:	400260a0 	.word	0x400260a0
 800498c:	400264a0 	.word	0x400264a0
 8004990:	40026400 	.word	0x40026400
 8004994:	400260b8 	.word	0x400260b8
 8004998:	40026058 	.word	0x40026058
 800499c:	40026000 	.word	0x40026000
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a96      	ldr	r2, [pc, #600]	; (8004c00 <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d057      	beq.n	8004a5a <HAL_DMAEx_MultiBufferStart_IT+0x3ea>
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a95      	ldr	r2, [pc, #596]	; (8004c04 <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d050      	beq.n	8004a56 <HAL_DMAEx_MultiBufferStart_IT+0x3e6>
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a93      	ldr	r2, [pc, #588]	; (8004c08 <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d049      	beq.n	8004a52 <HAL_DMAEx_MultiBufferStart_IT+0x3e2>
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a92      	ldr	r2, [pc, #584]	; (8004c0c <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d042      	beq.n	8004a4e <HAL_DMAEx_MultiBufferStart_IT+0x3de>
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a90      	ldr	r2, [pc, #576]	; (8004c10 <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d03a      	beq.n	8004a48 <HAL_DMAEx_MultiBufferStart_IT+0x3d8>
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4a8f      	ldr	r2, [pc, #572]	; (8004c14 <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d032      	beq.n	8004a42 <HAL_DMAEx_MultiBufferStart_IT+0x3d2>
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a8d      	ldr	r2, [pc, #564]	; (8004c18 <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d02a      	beq.n	8004a3c <HAL_DMAEx_MultiBufferStart_IT+0x3cc>
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a8c      	ldr	r2, [pc, #560]	; (8004c1c <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d022      	beq.n	8004a36 <HAL_DMAEx_MultiBufferStart_IT+0x3c6>
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a8a      	ldr	r2, [pc, #552]	; (8004c20 <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d01a      	beq.n	8004a30 <HAL_DMAEx_MultiBufferStart_IT+0x3c0>
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4a89      	ldr	r2, [pc, #548]	; (8004c24 <HAL_DMAEx_MultiBufferStart_IT+0x5b4>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d012      	beq.n	8004a2a <HAL_DMAEx_MultiBufferStart_IT+0x3ba>
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a87      	ldr	r2, [pc, #540]	; (8004c28 <HAL_DMAEx_MultiBufferStart_IT+0x5b8>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d00a      	beq.n	8004a24 <HAL_DMAEx_MultiBufferStart_IT+0x3b4>
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4a86      	ldr	r2, [pc, #536]	; (8004c2c <HAL_DMAEx_MultiBufferStart_IT+0x5bc>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d102      	bne.n	8004a1e <HAL_DMAEx_MultiBufferStart_IT+0x3ae>
 8004a18:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004a1c:	e01e      	b.n	8004a5c <HAL_DMAEx_MultiBufferStart_IT+0x3ec>
 8004a1e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004a22:	e01b      	b.n	8004a5c <HAL_DMAEx_MultiBufferStart_IT+0x3ec>
 8004a24:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004a28:	e018      	b.n	8004a5c <HAL_DMAEx_MultiBufferStart_IT+0x3ec>
 8004a2a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004a2e:	e015      	b.n	8004a5c <HAL_DMAEx_MultiBufferStart_IT+0x3ec>
 8004a30:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004a34:	e012      	b.n	8004a5c <HAL_DMAEx_MultiBufferStart_IT+0x3ec>
 8004a36:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004a3a:	e00f      	b.n	8004a5c <HAL_DMAEx_MultiBufferStart_IT+0x3ec>
 8004a3c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004a40:	e00c      	b.n	8004a5c <HAL_DMAEx_MultiBufferStart_IT+0x3ec>
 8004a42:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004a46:	e009      	b.n	8004a5c <HAL_DMAEx_MultiBufferStart_IT+0x3ec>
 8004a48:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004a4c:	e006      	b.n	8004a5c <HAL_DMAEx_MultiBufferStart_IT+0x3ec>
 8004a4e:	2320      	movs	r3, #32
 8004a50:	e004      	b.n	8004a5c <HAL_DMAEx_MultiBufferStart_IT+0x3ec>
 8004a52:	2320      	movs	r3, #32
 8004a54:	e002      	b.n	8004a5c <HAL_DMAEx_MultiBufferStart_IT+0x3ec>
 8004a56:	2320      	movs	r3, #32
 8004a58:	e000      	b.n	8004a5c <HAL_DMAEx_MultiBufferStart_IT+0x3ec>
 8004a5a:	2320      	movs	r3, #32
 8004a5c:	4a74      	ldr	r2, [pc, #464]	; (8004c30 <HAL_DMAEx_MultiBufferStart_IT+0x5c0>)
 8004a5e:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	461a      	mov	r2, r3
 8004a66:	4b73      	ldr	r3, [pc, #460]	; (8004c34 <HAL_DMAEx_MultiBufferStart_IT+0x5c4>)
 8004a68:	429a      	cmp	r2, r3
 8004a6a:	d960      	bls.n	8004b2e <HAL_DMAEx_MultiBufferStart_IT+0x4be>
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a63      	ldr	r2, [pc, #396]	; (8004c00 <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d057      	beq.n	8004b26 <HAL_DMAEx_MultiBufferStart_IT+0x4b6>
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a62      	ldr	r2, [pc, #392]	; (8004c04 <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d050      	beq.n	8004b22 <HAL_DMAEx_MultiBufferStart_IT+0x4b2>
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a60      	ldr	r2, [pc, #384]	; (8004c08 <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d049      	beq.n	8004b1e <HAL_DMAEx_MultiBufferStart_IT+0x4ae>
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4a5f      	ldr	r2, [pc, #380]	; (8004c0c <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d042      	beq.n	8004b1a <HAL_DMAEx_MultiBufferStart_IT+0x4aa>
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4a5d      	ldr	r2, [pc, #372]	; (8004c10 <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d03a      	beq.n	8004b14 <HAL_DMAEx_MultiBufferStart_IT+0x4a4>
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a5c      	ldr	r2, [pc, #368]	; (8004c14 <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d032      	beq.n	8004b0e <HAL_DMAEx_MultiBufferStart_IT+0x49e>
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a5a      	ldr	r2, [pc, #360]	; (8004c18 <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d02a      	beq.n	8004b08 <HAL_DMAEx_MultiBufferStart_IT+0x498>
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4a59      	ldr	r2, [pc, #356]	; (8004c1c <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d022      	beq.n	8004b02 <HAL_DMAEx_MultiBufferStart_IT+0x492>
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a57      	ldr	r2, [pc, #348]	; (8004c20 <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d01a      	beq.n	8004afc <HAL_DMAEx_MultiBufferStart_IT+0x48c>
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a56      	ldr	r2, [pc, #344]	; (8004c24 <HAL_DMAEx_MultiBufferStart_IT+0x5b4>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d012      	beq.n	8004af6 <HAL_DMAEx_MultiBufferStart_IT+0x486>
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4a54      	ldr	r2, [pc, #336]	; (8004c28 <HAL_DMAEx_MultiBufferStart_IT+0x5b8>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d00a      	beq.n	8004af0 <HAL_DMAEx_MultiBufferStart_IT+0x480>
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4a53      	ldr	r2, [pc, #332]	; (8004c2c <HAL_DMAEx_MultiBufferStart_IT+0x5bc>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d102      	bne.n	8004aea <HAL_DMAEx_MultiBufferStart_IT+0x47a>
 8004ae4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004ae8:	e01e      	b.n	8004b28 <HAL_DMAEx_MultiBufferStart_IT+0x4b8>
 8004aea:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004aee:	e01b      	b.n	8004b28 <HAL_DMAEx_MultiBufferStart_IT+0x4b8>
 8004af0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004af4:	e018      	b.n	8004b28 <HAL_DMAEx_MultiBufferStart_IT+0x4b8>
 8004af6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004afa:	e015      	b.n	8004b28 <HAL_DMAEx_MultiBufferStart_IT+0x4b8>
 8004afc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004b00:	e012      	b.n	8004b28 <HAL_DMAEx_MultiBufferStart_IT+0x4b8>
 8004b02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b06:	e00f      	b.n	8004b28 <HAL_DMAEx_MultiBufferStart_IT+0x4b8>
 8004b08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b0c:	e00c      	b.n	8004b28 <HAL_DMAEx_MultiBufferStart_IT+0x4b8>
 8004b0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b12:	e009      	b.n	8004b28 <HAL_DMAEx_MultiBufferStart_IT+0x4b8>
 8004b14:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b18:	e006      	b.n	8004b28 <HAL_DMAEx_MultiBufferStart_IT+0x4b8>
 8004b1a:	2310      	movs	r3, #16
 8004b1c:	e004      	b.n	8004b28 <HAL_DMAEx_MultiBufferStart_IT+0x4b8>
 8004b1e:	2310      	movs	r3, #16
 8004b20:	e002      	b.n	8004b28 <HAL_DMAEx_MultiBufferStart_IT+0x4b8>
 8004b22:	2310      	movs	r3, #16
 8004b24:	e000      	b.n	8004b28 <HAL_DMAEx_MultiBufferStart_IT+0x4b8>
 8004b26:	2310      	movs	r3, #16
 8004b28:	4a43      	ldr	r2, [pc, #268]	; (8004c38 <HAL_DMAEx_MultiBufferStart_IT+0x5c8>)
 8004b2a:	60d3      	str	r3, [r2, #12]
 8004b2c:	e14f      	b.n	8004dce <HAL_DMAEx_MultiBufferStart_IT+0x75e>
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	461a      	mov	r2, r3
 8004b34:	4b41      	ldr	r3, [pc, #260]	; (8004c3c <HAL_DMAEx_MultiBufferStart_IT+0x5cc>)
 8004b36:	429a      	cmp	r2, r3
 8004b38:	f240 8082 	bls.w	8004c40 <HAL_DMAEx_MultiBufferStart_IT+0x5d0>
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a2f      	ldr	r2, [pc, #188]	; (8004c00 <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d057      	beq.n	8004bf6 <HAL_DMAEx_MultiBufferStart_IT+0x586>
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a2e      	ldr	r2, [pc, #184]	; (8004c04 <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d050      	beq.n	8004bf2 <HAL_DMAEx_MultiBufferStart_IT+0x582>
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4a2c      	ldr	r2, [pc, #176]	; (8004c08 <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d049      	beq.n	8004bee <HAL_DMAEx_MultiBufferStart_IT+0x57e>
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4a2b      	ldr	r2, [pc, #172]	; (8004c0c <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d042      	beq.n	8004bea <HAL_DMAEx_MultiBufferStart_IT+0x57a>
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4a29      	ldr	r2, [pc, #164]	; (8004c10 <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d03a      	beq.n	8004be4 <HAL_DMAEx_MultiBufferStart_IT+0x574>
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4a28      	ldr	r2, [pc, #160]	; (8004c14 <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d032      	beq.n	8004bde <HAL_DMAEx_MultiBufferStart_IT+0x56e>
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a26      	ldr	r2, [pc, #152]	; (8004c18 <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d02a      	beq.n	8004bd8 <HAL_DMAEx_MultiBufferStart_IT+0x568>
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a25      	ldr	r2, [pc, #148]	; (8004c1c <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d022      	beq.n	8004bd2 <HAL_DMAEx_MultiBufferStart_IT+0x562>
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a23      	ldr	r2, [pc, #140]	; (8004c20 <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d01a      	beq.n	8004bcc <HAL_DMAEx_MultiBufferStart_IT+0x55c>
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4a22      	ldr	r2, [pc, #136]	; (8004c24 <HAL_DMAEx_MultiBufferStart_IT+0x5b4>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d012      	beq.n	8004bc6 <HAL_DMAEx_MultiBufferStart_IT+0x556>
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a20      	ldr	r2, [pc, #128]	; (8004c28 <HAL_DMAEx_MultiBufferStart_IT+0x5b8>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d00a      	beq.n	8004bc0 <HAL_DMAEx_MultiBufferStart_IT+0x550>
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4a1f      	ldr	r2, [pc, #124]	; (8004c2c <HAL_DMAEx_MultiBufferStart_IT+0x5bc>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d102      	bne.n	8004bba <HAL_DMAEx_MultiBufferStart_IT+0x54a>
 8004bb4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004bb8:	e01e      	b.n	8004bf8 <HAL_DMAEx_MultiBufferStart_IT+0x588>
 8004bba:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004bbe:	e01b      	b.n	8004bf8 <HAL_DMAEx_MultiBufferStart_IT+0x588>
 8004bc0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004bc4:	e018      	b.n	8004bf8 <HAL_DMAEx_MultiBufferStart_IT+0x588>
 8004bc6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004bca:	e015      	b.n	8004bf8 <HAL_DMAEx_MultiBufferStart_IT+0x588>
 8004bcc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004bd0:	e012      	b.n	8004bf8 <HAL_DMAEx_MultiBufferStart_IT+0x588>
 8004bd2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004bd6:	e00f      	b.n	8004bf8 <HAL_DMAEx_MultiBufferStart_IT+0x588>
 8004bd8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004bdc:	e00c      	b.n	8004bf8 <HAL_DMAEx_MultiBufferStart_IT+0x588>
 8004bde:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004be2:	e009      	b.n	8004bf8 <HAL_DMAEx_MultiBufferStart_IT+0x588>
 8004be4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004be8:	e006      	b.n	8004bf8 <HAL_DMAEx_MultiBufferStart_IT+0x588>
 8004bea:	2310      	movs	r3, #16
 8004bec:	e004      	b.n	8004bf8 <HAL_DMAEx_MultiBufferStart_IT+0x588>
 8004bee:	2310      	movs	r3, #16
 8004bf0:	e002      	b.n	8004bf8 <HAL_DMAEx_MultiBufferStart_IT+0x588>
 8004bf2:	2310      	movs	r3, #16
 8004bf4:	e000      	b.n	8004bf8 <HAL_DMAEx_MultiBufferStart_IT+0x588>
 8004bf6:	2310      	movs	r3, #16
 8004bf8:	4a0f      	ldr	r2, [pc, #60]	; (8004c38 <HAL_DMAEx_MultiBufferStart_IT+0x5c8>)
 8004bfa:	6093      	str	r3, [r2, #8]
 8004bfc:	e0e7      	b.n	8004dce <HAL_DMAEx_MultiBufferStart_IT+0x75e>
 8004bfe:	bf00      	nop
 8004c00:	40026010 	.word	0x40026010
 8004c04:	40026410 	.word	0x40026410
 8004c08:	40026070 	.word	0x40026070
 8004c0c:	40026470 	.word	0x40026470
 8004c10:	40026028 	.word	0x40026028
 8004c14:	40026428 	.word	0x40026428
 8004c18:	40026088 	.word	0x40026088
 8004c1c:	40026488 	.word	0x40026488
 8004c20:	40026040 	.word	0x40026040
 8004c24:	40026440 	.word	0x40026440
 8004c28:	400260a0 	.word	0x400260a0
 8004c2c:	400264a0 	.word	0x400264a0
 8004c30:	40026000 	.word	0x40026000
 8004c34:	40026458 	.word	0x40026458
 8004c38:	40026400 	.word	0x40026400
 8004c3c:	400260b8 	.word	0x400260b8
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	461a      	mov	r2, r3
 8004c46:	4b96      	ldr	r3, [pc, #600]	; (8004ea0 <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 8004c48:	429a      	cmp	r2, r3
 8004c4a:	d960      	bls.n	8004d0e <HAL_DMAEx_MultiBufferStart_IT+0x69e>
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4a94      	ldr	r2, [pc, #592]	; (8004ea4 <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d057      	beq.n	8004d06 <HAL_DMAEx_MultiBufferStart_IT+0x696>
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4a93      	ldr	r2, [pc, #588]	; (8004ea8 <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d050      	beq.n	8004d02 <HAL_DMAEx_MultiBufferStart_IT+0x692>
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4a91      	ldr	r2, [pc, #580]	; (8004eac <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d049      	beq.n	8004cfe <HAL_DMAEx_MultiBufferStart_IT+0x68e>
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4a90      	ldr	r2, [pc, #576]	; (8004eb0 <HAL_DMAEx_MultiBufferStart_IT+0x840>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d042      	beq.n	8004cfa <HAL_DMAEx_MultiBufferStart_IT+0x68a>
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4a8e      	ldr	r2, [pc, #568]	; (8004eb4 <HAL_DMAEx_MultiBufferStart_IT+0x844>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d03a      	beq.n	8004cf4 <HAL_DMAEx_MultiBufferStart_IT+0x684>
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4a8d      	ldr	r2, [pc, #564]	; (8004eb8 <HAL_DMAEx_MultiBufferStart_IT+0x848>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d032      	beq.n	8004cee <HAL_DMAEx_MultiBufferStart_IT+0x67e>
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a8b      	ldr	r2, [pc, #556]	; (8004ebc <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d02a      	beq.n	8004ce8 <HAL_DMAEx_MultiBufferStart_IT+0x678>
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4a8a      	ldr	r2, [pc, #552]	; (8004ec0 <HAL_DMAEx_MultiBufferStart_IT+0x850>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d022      	beq.n	8004ce2 <HAL_DMAEx_MultiBufferStart_IT+0x672>
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a88      	ldr	r2, [pc, #544]	; (8004ec4 <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d01a      	beq.n	8004cdc <HAL_DMAEx_MultiBufferStart_IT+0x66c>
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4a87      	ldr	r2, [pc, #540]	; (8004ec8 <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d012      	beq.n	8004cd6 <HAL_DMAEx_MultiBufferStart_IT+0x666>
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4a85      	ldr	r2, [pc, #532]	; (8004ecc <HAL_DMAEx_MultiBufferStart_IT+0x85c>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d00a      	beq.n	8004cd0 <HAL_DMAEx_MultiBufferStart_IT+0x660>
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4a84      	ldr	r2, [pc, #528]	; (8004ed0 <HAL_DMAEx_MultiBufferStart_IT+0x860>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d102      	bne.n	8004cca <HAL_DMAEx_MultiBufferStart_IT+0x65a>
 8004cc4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004cc8:	e01e      	b.n	8004d08 <HAL_DMAEx_MultiBufferStart_IT+0x698>
 8004cca:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004cce:	e01b      	b.n	8004d08 <HAL_DMAEx_MultiBufferStart_IT+0x698>
 8004cd0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004cd4:	e018      	b.n	8004d08 <HAL_DMAEx_MultiBufferStart_IT+0x698>
 8004cd6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004cda:	e015      	b.n	8004d08 <HAL_DMAEx_MultiBufferStart_IT+0x698>
 8004cdc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004ce0:	e012      	b.n	8004d08 <HAL_DMAEx_MultiBufferStart_IT+0x698>
 8004ce2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004ce6:	e00f      	b.n	8004d08 <HAL_DMAEx_MultiBufferStart_IT+0x698>
 8004ce8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004cec:	e00c      	b.n	8004d08 <HAL_DMAEx_MultiBufferStart_IT+0x698>
 8004cee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004cf2:	e009      	b.n	8004d08 <HAL_DMAEx_MultiBufferStart_IT+0x698>
 8004cf4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004cf8:	e006      	b.n	8004d08 <HAL_DMAEx_MultiBufferStart_IT+0x698>
 8004cfa:	2310      	movs	r3, #16
 8004cfc:	e004      	b.n	8004d08 <HAL_DMAEx_MultiBufferStart_IT+0x698>
 8004cfe:	2310      	movs	r3, #16
 8004d00:	e002      	b.n	8004d08 <HAL_DMAEx_MultiBufferStart_IT+0x698>
 8004d02:	2310      	movs	r3, #16
 8004d04:	e000      	b.n	8004d08 <HAL_DMAEx_MultiBufferStart_IT+0x698>
 8004d06:	2310      	movs	r3, #16
 8004d08:	4a72      	ldr	r2, [pc, #456]	; (8004ed4 <HAL_DMAEx_MultiBufferStart_IT+0x864>)
 8004d0a:	60d3      	str	r3, [r2, #12]
 8004d0c:	e05f      	b.n	8004dce <HAL_DMAEx_MultiBufferStart_IT+0x75e>
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4a64      	ldr	r2, [pc, #400]	; (8004ea4 <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d057      	beq.n	8004dc8 <HAL_DMAEx_MultiBufferStart_IT+0x758>
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a62      	ldr	r2, [pc, #392]	; (8004ea8 <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d050      	beq.n	8004dc4 <HAL_DMAEx_MultiBufferStart_IT+0x754>
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a61      	ldr	r2, [pc, #388]	; (8004eac <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d049      	beq.n	8004dc0 <HAL_DMAEx_MultiBufferStart_IT+0x750>
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a5f      	ldr	r2, [pc, #380]	; (8004eb0 <HAL_DMAEx_MultiBufferStart_IT+0x840>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d042      	beq.n	8004dbc <HAL_DMAEx_MultiBufferStart_IT+0x74c>
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a5e      	ldr	r2, [pc, #376]	; (8004eb4 <HAL_DMAEx_MultiBufferStart_IT+0x844>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d03a      	beq.n	8004db6 <HAL_DMAEx_MultiBufferStart_IT+0x746>
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a5c      	ldr	r2, [pc, #368]	; (8004eb8 <HAL_DMAEx_MultiBufferStart_IT+0x848>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d032      	beq.n	8004db0 <HAL_DMAEx_MultiBufferStart_IT+0x740>
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4a5b      	ldr	r2, [pc, #364]	; (8004ebc <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d02a      	beq.n	8004daa <HAL_DMAEx_MultiBufferStart_IT+0x73a>
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4a59      	ldr	r2, [pc, #356]	; (8004ec0 <HAL_DMAEx_MultiBufferStart_IT+0x850>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d022      	beq.n	8004da4 <HAL_DMAEx_MultiBufferStart_IT+0x734>
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4a58      	ldr	r2, [pc, #352]	; (8004ec4 <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d01a      	beq.n	8004d9e <HAL_DMAEx_MultiBufferStart_IT+0x72e>
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a56      	ldr	r2, [pc, #344]	; (8004ec8 <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d012      	beq.n	8004d98 <HAL_DMAEx_MultiBufferStart_IT+0x728>
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4a55      	ldr	r2, [pc, #340]	; (8004ecc <HAL_DMAEx_MultiBufferStart_IT+0x85c>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d00a      	beq.n	8004d92 <HAL_DMAEx_MultiBufferStart_IT+0x722>
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a53      	ldr	r2, [pc, #332]	; (8004ed0 <HAL_DMAEx_MultiBufferStart_IT+0x860>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d102      	bne.n	8004d8c <HAL_DMAEx_MultiBufferStart_IT+0x71c>
 8004d86:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004d8a:	e01e      	b.n	8004dca <HAL_DMAEx_MultiBufferStart_IT+0x75a>
 8004d8c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004d90:	e01b      	b.n	8004dca <HAL_DMAEx_MultiBufferStart_IT+0x75a>
 8004d92:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004d96:	e018      	b.n	8004dca <HAL_DMAEx_MultiBufferStart_IT+0x75a>
 8004d98:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004d9c:	e015      	b.n	8004dca <HAL_DMAEx_MultiBufferStart_IT+0x75a>
 8004d9e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004da2:	e012      	b.n	8004dca <HAL_DMAEx_MultiBufferStart_IT+0x75a>
 8004da4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004da8:	e00f      	b.n	8004dca <HAL_DMAEx_MultiBufferStart_IT+0x75a>
 8004daa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004dae:	e00c      	b.n	8004dca <HAL_DMAEx_MultiBufferStart_IT+0x75a>
 8004db0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004db4:	e009      	b.n	8004dca <HAL_DMAEx_MultiBufferStart_IT+0x75a>
 8004db6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004dba:	e006      	b.n	8004dca <HAL_DMAEx_MultiBufferStart_IT+0x75a>
 8004dbc:	2310      	movs	r3, #16
 8004dbe:	e004      	b.n	8004dca <HAL_DMAEx_MultiBufferStart_IT+0x75a>
 8004dc0:	2310      	movs	r3, #16
 8004dc2:	e002      	b.n	8004dca <HAL_DMAEx_MultiBufferStart_IT+0x75a>
 8004dc4:	2310      	movs	r3, #16
 8004dc6:	e000      	b.n	8004dca <HAL_DMAEx_MultiBufferStart_IT+0x75a>
 8004dc8:	2310      	movs	r3, #16
 8004dca:	4a42      	ldr	r2, [pc, #264]	; (8004ed4 <HAL_DMAEx_MultiBufferStart_IT+0x864>)
 8004dcc:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	461a      	mov	r2, r3
 8004dd4:	4b40      	ldr	r3, [pc, #256]	; (8004ed8 <HAL_DMAEx_MultiBufferStart_IT+0x868>)
 8004dd6:	429a      	cmp	r2, r3
 8004dd8:	f240 8082 	bls.w	8004ee0 <HAL_DMAEx_MultiBufferStart_IT+0x870>
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4a30      	ldr	r2, [pc, #192]	; (8004ea4 <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d057      	beq.n	8004e96 <HAL_DMAEx_MultiBufferStart_IT+0x826>
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a2f      	ldr	r2, [pc, #188]	; (8004ea8 <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d050      	beq.n	8004e92 <HAL_DMAEx_MultiBufferStart_IT+0x822>
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4a2d      	ldr	r2, [pc, #180]	; (8004eac <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d049      	beq.n	8004e8e <HAL_DMAEx_MultiBufferStart_IT+0x81e>
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4a2c      	ldr	r2, [pc, #176]	; (8004eb0 <HAL_DMAEx_MultiBufferStart_IT+0x840>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d042      	beq.n	8004e8a <HAL_DMAEx_MultiBufferStart_IT+0x81a>
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4a2a      	ldr	r2, [pc, #168]	; (8004eb4 <HAL_DMAEx_MultiBufferStart_IT+0x844>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d03a      	beq.n	8004e84 <HAL_DMAEx_MultiBufferStart_IT+0x814>
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4a29      	ldr	r2, [pc, #164]	; (8004eb8 <HAL_DMAEx_MultiBufferStart_IT+0x848>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d032      	beq.n	8004e7e <HAL_DMAEx_MultiBufferStart_IT+0x80e>
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4a27      	ldr	r2, [pc, #156]	; (8004ebc <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d02a      	beq.n	8004e78 <HAL_DMAEx_MultiBufferStart_IT+0x808>
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4a26      	ldr	r2, [pc, #152]	; (8004ec0 <HAL_DMAEx_MultiBufferStart_IT+0x850>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d022      	beq.n	8004e72 <HAL_DMAEx_MultiBufferStart_IT+0x802>
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a24      	ldr	r2, [pc, #144]	; (8004ec4 <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d01a      	beq.n	8004e6c <HAL_DMAEx_MultiBufferStart_IT+0x7fc>
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a23      	ldr	r2, [pc, #140]	; (8004ec8 <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d012      	beq.n	8004e66 <HAL_DMAEx_MultiBufferStart_IT+0x7f6>
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a21      	ldr	r2, [pc, #132]	; (8004ecc <HAL_DMAEx_MultiBufferStart_IT+0x85c>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d00a      	beq.n	8004e60 <HAL_DMAEx_MultiBufferStart_IT+0x7f0>
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4a20      	ldr	r2, [pc, #128]	; (8004ed0 <HAL_DMAEx_MultiBufferStart_IT+0x860>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d102      	bne.n	8004e5a <HAL_DMAEx_MultiBufferStart_IT+0x7ea>
 8004e54:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004e58:	e01e      	b.n	8004e98 <HAL_DMAEx_MultiBufferStart_IT+0x828>
 8004e5a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004e5e:	e01b      	b.n	8004e98 <HAL_DMAEx_MultiBufferStart_IT+0x828>
 8004e60:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004e64:	e018      	b.n	8004e98 <HAL_DMAEx_MultiBufferStart_IT+0x828>
 8004e66:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004e6a:	e015      	b.n	8004e98 <HAL_DMAEx_MultiBufferStart_IT+0x828>
 8004e6c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004e70:	e012      	b.n	8004e98 <HAL_DMAEx_MultiBufferStart_IT+0x828>
 8004e72:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004e76:	e00f      	b.n	8004e98 <HAL_DMAEx_MultiBufferStart_IT+0x828>
 8004e78:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004e7c:	e00c      	b.n	8004e98 <HAL_DMAEx_MultiBufferStart_IT+0x828>
 8004e7e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004e82:	e009      	b.n	8004e98 <HAL_DMAEx_MultiBufferStart_IT+0x828>
 8004e84:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004e88:	e006      	b.n	8004e98 <HAL_DMAEx_MultiBufferStart_IT+0x828>
 8004e8a:	2308      	movs	r3, #8
 8004e8c:	e004      	b.n	8004e98 <HAL_DMAEx_MultiBufferStart_IT+0x828>
 8004e8e:	2308      	movs	r3, #8
 8004e90:	e002      	b.n	8004e98 <HAL_DMAEx_MultiBufferStart_IT+0x828>
 8004e92:	2308      	movs	r3, #8
 8004e94:	e000      	b.n	8004e98 <HAL_DMAEx_MultiBufferStart_IT+0x828>
 8004e96:	2308      	movs	r3, #8
 8004e98:	4a10      	ldr	r2, [pc, #64]	; (8004edc <HAL_DMAEx_MultiBufferStart_IT+0x86c>)
 8004e9a:	60d3      	str	r3, [r2, #12]
 8004e9c:	e16f      	b.n	800517e <HAL_DMAEx_MultiBufferStart_IT+0xb0e>
 8004e9e:	bf00      	nop
 8004ea0:	40026058 	.word	0x40026058
 8004ea4:	40026010 	.word	0x40026010
 8004ea8:	40026410 	.word	0x40026410
 8004eac:	40026070 	.word	0x40026070
 8004eb0:	40026470 	.word	0x40026470
 8004eb4:	40026028 	.word	0x40026028
 8004eb8:	40026428 	.word	0x40026428
 8004ebc:	40026088 	.word	0x40026088
 8004ec0:	40026488 	.word	0x40026488
 8004ec4:	40026040 	.word	0x40026040
 8004ec8:	40026440 	.word	0x40026440
 8004ecc:	400260a0 	.word	0x400260a0
 8004ed0:	400264a0 	.word	0x400264a0
 8004ed4:	40026000 	.word	0x40026000
 8004ed8:	40026458 	.word	0x40026458
 8004edc:	40026400 	.word	0x40026400
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	461a      	mov	r2, r3
 8004ee6:	4b94      	ldr	r3, [pc, #592]	; (8005138 <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 8004ee8:	429a      	cmp	r2, r3
 8004eea:	d960      	bls.n	8004fae <HAL_DMAEx_MultiBufferStart_IT+0x93e>
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a92      	ldr	r2, [pc, #584]	; (800513c <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d057      	beq.n	8004fa6 <HAL_DMAEx_MultiBufferStart_IT+0x936>
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a91      	ldr	r2, [pc, #580]	; (8005140 <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d050      	beq.n	8004fa2 <HAL_DMAEx_MultiBufferStart_IT+0x932>
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4a8f      	ldr	r2, [pc, #572]	; (8005144 <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d049      	beq.n	8004f9e <HAL_DMAEx_MultiBufferStart_IT+0x92e>
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4a8e      	ldr	r2, [pc, #568]	; (8005148 <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d042      	beq.n	8004f9a <HAL_DMAEx_MultiBufferStart_IT+0x92a>
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4a8c      	ldr	r2, [pc, #560]	; (800514c <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d03a      	beq.n	8004f94 <HAL_DMAEx_MultiBufferStart_IT+0x924>
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4a8b      	ldr	r2, [pc, #556]	; (8005150 <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d032      	beq.n	8004f8e <HAL_DMAEx_MultiBufferStart_IT+0x91e>
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a89      	ldr	r2, [pc, #548]	; (8005154 <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d02a      	beq.n	8004f88 <HAL_DMAEx_MultiBufferStart_IT+0x918>
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4a88      	ldr	r2, [pc, #544]	; (8005158 <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d022      	beq.n	8004f82 <HAL_DMAEx_MultiBufferStart_IT+0x912>
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a86      	ldr	r2, [pc, #536]	; (800515c <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d01a      	beq.n	8004f7c <HAL_DMAEx_MultiBufferStart_IT+0x90c>
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4a85      	ldr	r2, [pc, #532]	; (8005160 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d012      	beq.n	8004f76 <HAL_DMAEx_MultiBufferStart_IT+0x906>
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4a83      	ldr	r2, [pc, #524]	; (8005164 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d00a      	beq.n	8004f70 <HAL_DMAEx_MultiBufferStart_IT+0x900>
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4a82      	ldr	r2, [pc, #520]	; (8005168 <HAL_DMAEx_MultiBufferStart_IT+0xaf8>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d102      	bne.n	8004f6a <HAL_DMAEx_MultiBufferStart_IT+0x8fa>
 8004f64:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004f68:	e01e      	b.n	8004fa8 <HAL_DMAEx_MultiBufferStart_IT+0x938>
 8004f6a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004f6e:	e01b      	b.n	8004fa8 <HAL_DMAEx_MultiBufferStart_IT+0x938>
 8004f70:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004f74:	e018      	b.n	8004fa8 <HAL_DMAEx_MultiBufferStart_IT+0x938>
 8004f76:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004f7a:	e015      	b.n	8004fa8 <HAL_DMAEx_MultiBufferStart_IT+0x938>
 8004f7c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004f80:	e012      	b.n	8004fa8 <HAL_DMAEx_MultiBufferStart_IT+0x938>
 8004f82:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004f86:	e00f      	b.n	8004fa8 <HAL_DMAEx_MultiBufferStart_IT+0x938>
 8004f88:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004f8c:	e00c      	b.n	8004fa8 <HAL_DMAEx_MultiBufferStart_IT+0x938>
 8004f8e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004f92:	e009      	b.n	8004fa8 <HAL_DMAEx_MultiBufferStart_IT+0x938>
 8004f94:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004f98:	e006      	b.n	8004fa8 <HAL_DMAEx_MultiBufferStart_IT+0x938>
 8004f9a:	2308      	movs	r3, #8
 8004f9c:	e004      	b.n	8004fa8 <HAL_DMAEx_MultiBufferStart_IT+0x938>
 8004f9e:	2308      	movs	r3, #8
 8004fa0:	e002      	b.n	8004fa8 <HAL_DMAEx_MultiBufferStart_IT+0x938>
 8004fa2:	2308      	movs	r3, #8
 8004fa4:	e000      	b.n	8004fa8 <HAL_DMAEx_MultiBufferStart_IT+0x938>
 8004fa6:	2308      	movs	r3, #8
 8004fa8:	4a70      	ldr	r2, [pc, #448]	; (800516c <HAL_DMAEx_MultiBufferStart_IT+0xafc>)
 8004faa:	6093      	str	r3, [r2, #8]
 8004fac:	e0e7      	b.n	800517e <HAL_DMAEx_MultiBufferStart_IT+0xb0e>
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	461a      	mov	r2, r3
 8004fb4:	4b6e      	ldr	r3, [pc, #440]	; (8005170 <HAL_DMAEx_MultiBufferStart_IT+0xb00>)
 8004fb6:	429a      	cmp	r2, r3
 8004fb8:	d960      	bls.n	800507c <HAL_DMAEx_MultiBufferStart_IT+0xa0c>
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4a5f      	ldr	r2, [pc, #380]	; (800513c <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d057      	beq.n	8005074 <HAL_DMAEx_MultiBufferStart_IT+0xa04>
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4a5d      	ldr	r2, [pc, #372]	; (8005140 <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d050      	beq.n	8005070 <HAL_DMAEx_MultiBufferStart_IT+0xa00>
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4a5c      	ldr	r2, [pc, #368]	; (8005144 <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d049      	beq.n	800506c <HAL_DMAEx_MultiBufferStart_IT+0x9fc>
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4a5a      	ldr	r2, [pc, #360]	; (8005148 <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d042      	beq.n	8005068 <HAL_DMAEx_MultiBufferStart_IT+0x9f8>
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4a59      	ldr	r2, [pc, #356]	; (800514c <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d03a      	beq.n	8005062 <HAL_DMAEx_MultiBufferStart_IT+0x9f2>
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4a57      	ldr	r2, [pc, #348]	; (8005150 <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d032      	beq.n	800505c <HAL_DMAEx_MultiBufferStart_IT+0x9ec>
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4a56      	ldr	r2, [pc, #344]	; (8005154 <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d02a      	beq.n	8005056 <HAL_DMAEx_MultiBufferStart_IT+0x9e6>
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4a54      	ldr	r2, [pc, #336]	; (8005158 <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d022      	beq.n	8005050 <HAL_DMAEx_MultiBufferStart_IT+0x9e0>
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4a53      	ldr	r2, [pc, #332]	; (800515c <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d01a      	beq.n	800504a <HAL_DMAEx_MultiBufferStart_IT+0x9da>
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4a51      	ldr	r2, [pc, #324]	; (8005160 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d012      	beq.n	8005044 <HAL_DMAEx_MultiBufferStart_IT+0x9d4>
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4a50      	ldr	r2, [pc, #320]	; (8005164 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d00a      	beq.n	800503e <HAL_DMAEx_MultiBufferStart_IT+0x9ce>
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4a4e      	ldr	r2, [pc, #312]	; (8005168 <HAL_DMAEx_MultiBufferStart_IT+0xaf8>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d102      	bne.n	8005038 <HAL_DMAEx_MultiBufferStart_IT+0x9c8>
 8005032:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8005036:	e01e      	b.n	8005076 <HAL_DMAEx_MultiBufferStart_IT+0xa06>
 8005038:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800503c:	e01b      	b.n	8005076 <HAL_DMAEx_MultiBufferStart_IT+0xa06>
 800503e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8005042:	e018      	b.n	8005076 <HAL_DMAEx_MultiBufferStart_IT+0xa06>
 8005044:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8005048:	e015      	b.n	8005076 <HAL_DMAEx_MultiBufferStart_IT+0xa06>
 800504a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800504e:	e012      	b.n	8005076 <HAL_DMAEx_MultiBufferStart_IT+0xa06>
 8005050:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005054:	e00f      	b.n	8005076 <HAL_DMAEx_MultiBufferStart_IT+0xa06>
 8005056:	f44f 7300 	mov.w	r3, #512	; 0x200
 800505a:	e00c      	b.n	8005076 <HAL_DMAEx_MultiBufferStart_IT+0xa06>
 800505c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005060:	e009      	b.n	8005076 <HAL_DMAEx_MultiBufferStart_IT+0xa06>
 8005062:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005066:	e006      	b.n	8005076 <HAL_DMAEx_MultiBufferStart_IT+0xa06>
 8005068:	2308      	movs	r3, #8
 800506a:	e004      	b.n	8005076 <HAL_DMAEx_MultiBufferStart_IT+0xa06>
 800506c:	2308      	movs	r3, #8
 800506e:	e002      	b.n	8005076 <HAL_DMAEx_MultiBufferStart_IT+0xa06>
 8005070:	2308      	movs	r3, #8
 8005072:	e000      	b.n	8005076 <HAL_DMAEx_MultiBufferStart_IT+0xa06>
 8005074:	2308      	movs	r3, #8
 8005076:	4a3f      	ldr	r2, [pc, #252]	; (8005174 <HAL_DMAEx_MultiBufferStart_IT+0xb04>)
 8005078:	60d3      	str	r3, [r2, #12]
 800507a:	e080      	b.n	800517e <HAL_DMAEx_MultiBufferStart_IT+0xb0e>
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a2e      	ldr	r2, [pc, #184]	; (800513c <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d078      	beq.n	8005178 <HAL_DMAEx_MultiBufferStart_IT+0xb08>
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4a2d      	ldr	r2, [pc, #180]	; (8005140 <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d050      	beq.n	8005132 <HAL_DMAEx_MultiBufferStart_IT+0xac2>
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a2b      	ldr	r2, [pc, #172]	; (8005144 <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d049      	beq.n	800512e <HAL_DMAEx_MultiBufferStart_IT+0xabe>
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4a2a      	ldr	r2, [pc, #168]	; (8005148 <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d042      	beq.n	800512a <HAL_DMAEx_MultiBufferStart_IT+0xaba>
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a28      	ldr	r2, [pc, #160]	; (800514c <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d03a      	beq.n	8005124 <HAL_DMAEx_MultiBufferStart_IT+0xab4>
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4a27      	ldr	r2, [pc, #156]	; (8005150 <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d032      	beq.n	800511e <HAL_DMAEx_MultiBufferStart_IT+0xaae>
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a25      	ldr	r2, [pc, #148]	; (8005154 <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d02a      	beq.n	8005118 <HAL_DMAEx_MultiBufferStart_IT+0xaa8>
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4a24      	ldr	r2, [pc, #144]	; (8005158 <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d022      	beq.n	8005112 <HAL_DMAEx_MultiBufferStart_IT+0xaa2>
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4a22      	ldr	r2, [pc, #136]	; (800515c <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d01a      	beq.n	800510c <HAL_DMAEx_MultiBufferStart_IT+0xa9c>
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4a21      	ldr	r2, [pc, #132]	; (8005160 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d012      	beq.n	8005106 <HAL_DMAEx_MultiBufferStart_IT+0xa96>
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a1f      	ldr	r2, [pc, #124]	; (8005164 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d00a      	beq.n	8005100 <HAL_DMAEx_MultiBufferStart_IT+0xa90>
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4a1e      	ldr	r2, [pc, #120]	; (8005168 <HAL_DMAEx_MultiBufferStart_IT+0xaf8>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d102      	bne.n	80050fa <HAL_DMAEx_MultiBufferStart_IT+0xa8a>
 80050f4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80050f8:	e03f      	b.n	800517a <HAL_DMAEx_MultiBufferStart_IT+0xb0a>
 80050fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80050fe:	e03c      	b.n	800517a <HAL_DMAEx_MultiBufferStart_IT+0xb0a>
 8005100:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8005104:	e039      	b.n	800517a <HAL_DMAEx_MultiBufferStart_IT+0xb0a>
 8005106:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800510a:	e036      	b.n	800517a <HAL_DMAEx_MultiBufferStart_IT+0xb0a>
 800510c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8005110:	e033      	b.n	800517a <HAL_DMAEx_MultiBufferStart_IT+0xb0a>
 8005112:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005116:	e030      	b.n	800517a <HAL_DMAEx_MultiBufferStart_IT+0xb0a>
 8005118:	f44f 7300 	mov.w	r3, #512	; 0x200
 800511c:	e02d      	b.n	800517a <HAL_DMAEx_MultiBufferStart_IT+0xb0a>
 800511e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005122:	e02a      	b.n	800517a <HAL_DMAEx_MultiBufferStart_IT+0xb0a>
 8005124:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005128:	e027      	b.n	800517a <HAL_DMAEx_MultiBufferStart_IT+0xb0a>
 800512a:	2308      	movs	r3, #8
 800512c:	e025      	b.n	800517a <HAL_DMAEx_MultiBufferStart_IT+0xb0a>
 800512e:	2308      	movs	r3, #8
 8005130:	e023      	b.n	800517a <HAL_DMAEx_MultiBufferStart_IT+0xb0a>
 8005132:	2308      	movs	r3, #8
 8005134:	e021      	b.n	800517a <HAL_DMAEx_MultiBufferStart_IT+0xb0a>
 8005136:	bf00      	nop
 8005138:	400260b8 	.word	0x400260b8
 800513c:	40026010 	.word	0x40026010
 8005140:	40026410 	.word	0x40026410
 8005144:	40026070 	.word	0x40026070
 8005148:	40026470 	.word	0x40026470
 800514c:	40026028 	.word	0x40026028
 8005150:	40026428 	.word	0x40026428
 8005154:	40026088 	.word	0x40026088
 8005158:	40026488 	.word	0x40026488
 800515c:	40026040 	.word	0x40026040
 8005160:	40026440 	.word	0x40026440
 8005164:	400260a0 	.word	0x400260a0
 8005168:	400264a0 	.word	0x400264a0
 800516c:	40026400 	.word	0x40026400
 8005170:	40026058 	.word	0x40026058
 8005174:	40026000 	.word	0x40026000
 8005178:	2308      	movs	r3, #8
 800517a:	4a9a      	ldr	r2, [pc, #616]	; (80053e4 <HAL_DMAEx_MultiBufferStart_IT+0xd74>)
 800517c:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	461a      	mov	r2, r3
 8005184:	4b98      	ldr	r3, [pc, #608]	; (80053e8 <HAL_DMAEx_MultiBufferStart_IT+0xd78>)
 8005186:	429a      	cmp	r2, r3
 8005188:	d960      	bls.n	800524c <HAL_DMAEx_MultiBufferStart_IT+0xbdc>
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	4a97      	ldr	r2, [pc, #604]	; (80053ec <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d057      	beq.n	8005244 <HAL_DMAEx_MultiBufferStart_IT+0xbd4>
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4a95      	ldr	r2, [pc, #596]	; (80053f0 <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d050      	beq.n	8005240 <HAL_DMAEx_MultiBufferStart_IT+0xbd0>
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	4a94      	ldr	r2, [pc, #592]	; (80053f4 <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d049      	beq.n	800523c <HAL_DMAEx_MultiBufferStart_IT+0xbcc>
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4a92      	ldr	r2, [pc, #584]	; (80053f8 <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d042      	beq.n	8005238 <HAL_DMAEx_MultiBufferStart_IT+0xbc8>
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4a91      	ldr	r2, [pc, #580]	; (80053fc <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d03a      	beq.n	8005232 <HAL_DMAEx_MultiBufferStart_IT+0xbc2>
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4a8f      	ldr	r2, [pc, #572]	; (8005400 <HAL_DMAEx_MultiBufferStart_IT+0xd90>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d032      	beq.n	800522c <HAL_DMAEx_MultiBufferStart_IT+0xbbc>
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4a8e      	ldr	r2, [pc, #568]	; (8005404 <HAL_DMAEx_MultiBufferStart_IT+0xd94>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d02a      	beq.n	8005226 <HAL_DMAEx_MultiBufferStart_IT+0xbb6>
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4a8c      	ldr	r2, [pc, #560]	; (8005408 <HAL_DMAEx_MultiBufferStart_IT+0xd98>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d022      	beq.n	8005220 <HAL_DMAEx_MultiBufferStart_IT+0xbb0>
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	4a8b      	ldr	r2, [pc, #556]	; (800540c <HAL_DMAEx_MultiBufferStart_IT+0xd9c>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d01a      	beq.n	800521a <HAL_DMAEx_MultiBufferStart_IT+0xbaa>
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4a89      	ldr	r2, [pc, #548]	; (8005410 <HAL_DMAEx_MultiBufferStart_IT+0xda0>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d012      	beq.n	8005214 <HAL_DMAEx_MultiBufferStart_IT+0xba4>
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4a88      	ldr	r2, [pc, #544]	; (8005414 <HAL_DMAEx_MultiBufferStart_IT+0xda4>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d00a      	beq.n	800520e <HAL_DMAEx_MultiBufferStart_IT+0xb9e>
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4a86      	ldr	r2, [pc, #536]	; (8005418 <HAL_DMAEx_MultiBufferStart_IT+0xda8>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d102      	bne.n	8005208 <HAL_DMAEx_MultiBufferStart_IT+0xb98>
 8005202:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005206:	e01e      	b.n	8005246 <HAL_DMAEx_MultiBufferStart_IT+0xbd6>
 8005208:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800520c:	e01b      	b.n	8005246 <HAL_DMAEx_MultiBufferStart_IT+0xbd6>
 800520e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005212:	e018      	b.n	8005246 <HAL_DMAEx_MultiBufferStart_IT+0xbd6>
 8005214:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005218:	e015      	b.n	8005246 <HAL_DMAEx_MultiBufferStart_IT+0xbd6>
 800521a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800521e:	e012      	b.n	8005246 <HAL_DMAEx_MultiBufferStart_IT+0xbd6>
 8005220:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005224:	e00f      	b.n	8005246 <HAL_DMAEx_MultiBufferStart_IT+0xbd6>
 8005226:	f44f 7380 	mov.w	r3, #256	; 0x100
 800522a:	e00c      	b.n	8005246 <HAL_DMAEx_MultiBufferStart_IT+0xbd6>
 800522c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005230:	e009      	b.n	8005246 <HAL_DMAEx_MultiBufferStart_IT+0xbd6>
 8005232:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005236:	e006      	b.n	8005246 <HAL_DMAEx_MultiBufferStart_IT+0xbd6>
 8005238:	2304      	movs	r3, #4
 800523a:	e004      	b.n	8005246 <HAL_DMAEx_MultiBufferStart_IT+0xbd6>
 800523c:	2304      	movs	r3, #4
 800523e:	e002      	b.n	8005246 <HAL_DMAEx_MultiBufferStart_IT+0xbd6>
 8005240:	2304      	movs	r3, #4
 8005242:	e000      	b.n	8005246 <HAL_DMAEx_MultiBufferStart_IT+0xbd6>
 8005244:	2304      	movs	r3, #4
 8005246:	4a75      	ldr	r2, [pc, #468]	; (800541c <HAL_DMAEx_MultiBufferStart_IT+0xdac>)
 8005248:	60d3      	str	r3, [r2, #12]
 800524a:	e151      	b.n	80054f0 <HAL_DMAEx_MultiBufferStart_IT+0xe80>
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	461a      	mov	r2, r3
 8005252:	4b73      	ldr	r3, [pc, #460]	; (8005420 <HAL_DMAEx_MultiBufferStart_IT+0xdb0>)
 8005254:	429a      	cmp	r2, r3
 8005256:	d960      	bls.n	800531a <HAL_DMAEx_MultiBufferStart_IT+0xcaa>
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4a63      	ldr	r2, [pc, #396]	; (80053ec <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d057      	beq.n	8005312 <HAL_DMAEx_MultiBufferStart_IT+0xca2>
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4a62      	ldr	r2, [pc, #392]	; (80053f0 <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
 8005268:	4293      	cmp	r3, r2
 800526a:	d050      	beq.n	800530e <HAL_DMAEx_MultiBufferStart_IT+0xc9e>
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4a60      	ldr	r2, [pc, #384]	; (80053f4 <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d049      	beq.n	800530a <HAL_DMAEx_MultiBufferStart_IT+0xc9a>
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	4a5f      	ldr	r2, [pc, #380]	; (80053f8 <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d042      	beq.n	8005306 <HAL_DMAEx_MultiBufferStart_IT+0xc96>
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4a5d      	ldr	r2, [pc, #372]	; (80053fc <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d03a      	beq.n	8005300 <HAL_DMAEx_MultiBufferStart_IT+0xc90>
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4a5c      	ldr	r2, [pc, #368]	; (8005400 <HAL_DMAEx_MultiBufferStart_IT+0xd90>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d032      	beq.n	80052fa <HAL_DMAEx_MultiBufferStart_IT+0xc8a>
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4a5a      	ldr	r2, [pc, #360]	; (8005404 <HAL_DMAEx_MultiBufferStart_IT+0xd94>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d02a      	beq.n	80052f4 <HAL_DMAEx_MultiBufferStart_IT+0xc84>
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4a59      	ldr	r2, [pc, #356]	; (8005408 <HAL_DMAEx_MultiBufferStart_IT+0xd98>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d022      	beq.n	80052ee <HAL_DMAEx_MultiBufferStart_IT+0xc7e>
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4a57      	ldr	r2, [pc, #348]	; (800540c <HAL_DMAEx_MultiBufferStart_IT+0xd9c>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d01a      	beq.n	80052e8 <HAL_DMAEx_MultiBufferStart_IT+0xc78>
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4a56      	ldr	r2, [pc, #344]	; (8005410 <HAL_DMAEx_MultiBufferStart_IT+0xda0>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d012      	beq.n	80052e2 <HAL_DMAEx_MultiBufferStart_IT+0xc72>
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4a54      	ldr	r2, [pc, #336]	; (8005414 <HAL_DMAEx_MultiBufferStart_IT+0xda4>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d00a      	beq.n	80052dc <HAL_DMAEx_MultiBufferStart_IT+0xc6c>
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4a53      	ldr	r2, [pc, #332]	; (8005418 <HAL_DMAEx_MultiBufferStart_IT+0xda8>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d102      	bne.n	80052d6 <HAL_DMAEx_MultiBufferStart_IT+0xc66>
 80052d0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80052d4:	e01e      	b.n	8005314 <HAL_DMAEx_MultiBufferStart_IT+0xca4>
 80052d6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80052da:	e01b      	b.n	8005314 <HAL_DMAEx_MultiBufferStart_IT+0xca4>
 80052dc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80052e0:	e018      	b.n	8005314 <HAL_DMAEx_MultiBufferStart_IT+0xca4>
 80052e2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80052e6:	e015      	b.n	8005314 <HAL_DMAEx_MultiBufferStart_IT+0xca4>
 80052e8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80052ec:	e012      	b.n	8005314 <HAL_DMAEx_MultiBufferStart_IT+0xca4>
 80052ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80052f2:	e00f      	b.n	8005314 <HAL_DMAEx_MultiBufferStart_IT+0xca4>
 80052f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80052f8:	e00c      	b.n	8005314 <HAL_DMAEx_MultiBufferStart_IT+0xca4>
 80052fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80052fe:	e009      	b.n	8005314 <HAL_DMAEx_MultiBufferStart_IT+0xca4>
 8005300:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005304:	e006      	b.n	8005314 <HAL_DMAEx_MultiBufferStart_IT+0xca4>
 8005306:	2304      	movs	r3, #4
 8005308:	e004      	b.n	8005314 <HAL_DMAEx_MultiBufferStart_IT+0xca4>
 800530a:	2304      	movs	r3, #4
 800530c:	e002      	b.n	8005314 <HAL_DMAEx_MultiBufferStart_IT+0xca4>
 800530e:	2304      	movs	r3, #4
 8005310:	e000      	b.n	8005314 <HAL_DMAEx_MultiBufferStart_IT+0xca4>
 8005312:	2304      	movs	r3, #4
 8005314:	4a41      	ldr	r2, [pc, #260]	; (800541c <HAL_DMAEx_MultiBufferStart_IT+0xdac>)
 8005316:	6093      	str	r3, [r2, #8]
 8005318:	e0ea      	b.n	80054f0 <HAL_DMAEx_MultiBufferStart_IT+0xe80>
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	461a      	mov	r2, r3
 8005320:	4b40      	ldr	r3, [pc, #256]	; (8005424 <HAL_DMAEx_MultiBufferStart_IT+0xdb4>)
 8005322:	429a      	cmp	r2, r3
 8005324:	f240 8084 	bls.w	8005430 <HAL_DMAEx_MultiBufferStart_IT+0xdc0>
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4a2f      	ldr	r2, [pc, #188]	; (80053ec <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d07a      	beq.n	8005428 <HAL_DMAEx_MultiBufferStart_IT+0xdb8>
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4a2e      	ldr	r2, [pc, #184]	; (80053f0 <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d050      	beq.n	80053de <HAL_DMAEx_MultiBufferStart_IT+0xd6e>
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a2c      	ldr	r2, [pc, #176]	; (80053f4 <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d049      	beq.n	80053da <HAL_DMAEx_MultiBufferStart_IT+0xd6a>
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4a2b      	ldr	r2, [pc, #172]	; (80053f8 <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d042      	beq.n	80053d6 <HAL_DMAEx_MultiBufferStart_IT+0xd66>
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a29      	ldr	r2, [pc, #164]	; (80053fc <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d03a      	beq.n	80053d0 <HAL_DMAEx_MultiBufferStart_IT+0xd60>
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4a28      	ldr	r2, [pc, #160]	; (8005400 <HAL_DMAEx_MultiBufferStart_IT+0xd90>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d032      	beq.n	80053ca <HAL_DMAEx_MultiBufferStart_IT+0xd5a>
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a26      	ldr	r2, [pc, #152]	; (8005404 <HAL_DMAEx_MultiBufferStart_IT+0xd94>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d02a      	beq.n	80053c4 <HAL_DMAEx_MultiBufferStart_IT+0xd54>
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4a25      	ldr	r2, [pc, #148]	; (8005408 <HAL_DMAEx_MultiBufferStart_IT+0xd98>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d022      	beq.n	80053be <HAL_DMAEx_MultiBufferStart_IT+0xd4e>
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a23      	ldr	r2, [pc, #140]	; (800540c <HAL_DMAEx_MultiBufferStart_IT+0xd9c>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d01a      	beq.n	80053b8 <HAL_DMAEx_MultiBufferStart_IT+0xd48>
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a22      	ldr	r2, [pc, #136]	; (8005410 <HAL_DMAEx_MultiBufferStart_IT+0xda0>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d012      	beq.n	80053b2 <HAL_DMAEx_MultiBufferStart_IT+0xd42>
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a20      	ldr	r2, [pc, #128]	; (8005414 <HAL_DMAEx_MultiBufferStart_IT+0xda4>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d00a      	beq.n	80053ac <HAL_DMAEx_MultiBufferStart_IT+0xd3c>
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4a1f      	ldr	r2, [pc, #124]	; (8005418 <HAL_DMAEx_MultiBufferStart_IT+0xda8>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d102      	bne.n	80053a6 <HAL_DMAEx_MultiBufferStart_IT+0xd36>
 80053a0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80053a4:	e041      	b.n	800542a <HAL_DMAEx_MultiBufferStart_IT+0xdba>
 80053a6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80053aa:	e03e      	b.n	800542a <HAL_DMAEx_MultiBufferStart_IT+0xdba>
 80053ac:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80053b0:	e03b      	b.n	800542a <HAL_DMAEx_MultiBufferStart_IT+0xdba>
 80053b2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80053b6:	e038      	b.n	800542a <HAL_DMAEx_MultiBufferStart_IT+0xdba>
 80053b8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80053bc:	e035      	b.n	800542a <HAL_DMAEx_MultiBufferStart_IT+0xdba>
 80053be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80053c2:	e032      	b.n	800542a <HAL_DMAEx_MultiBufferStart_IT+0xdba>
 80053c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80053c8:	e02f      	b.n	800542a <HAL_DMAEx_MultiBufferStart_IT+0xdba>
 80053ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80053ce:	e02c      	b.n	800542a <HAL_DMAEx_MultiBufferStart_IT+0xdba>
 80053d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80053d4:	e029      	b.n	800542a <HAL_DMAEx_MultiBufferStart_IT+0xdba>
 80053d6:	2304      	movs	r3, #4
 80053d8:	e027      	b.n	800542a <HAL_DMAEx_MultiBufferStart_IT+0xdba>
 80053da:	2304      	movs	r3, #4
 80053dc:	e025      	b.n	800542a <HAL_DMAEx_MultiBufferStart_IT+0xdba>
 80053de:	2304      	movs	r3, #4
 80053e0:	e023      	b.n	800542a <HAL_DMAEx_MultiBufferStart_IT+0xdba>
 80053e2:	bf00      	nop
 80053e4:	40026000 	.word	0x40026000
 80053e8:	40026458 	.word	0x40026458
 80053ec:	40026010 	.word	0x40026010
 80053f0:	40026410 	.word	0x40026410
 80053f4:	40026070 	.word	0x40026070
 80053f8:	40026470 	.word	0x40026470
 80053fc:	40026028 	.word	0x40026028
 8005400:	40026428 	.word	0x40026428
 8005404:	40026088 	.word	0x40026088
 8005408:	40026488 	.word	0x40026488
 800540c:	40026040 	.word	0x40026040
 8005410:	40026440 	.word	0x40026440
 8005414:	400260a0 	.word	0x400260a0
 8005418:	400264a0 	.word	0x400264a0
 800541c:	40026400 	.word	0x40026400
 8005420:	400260b8 	.word	0x400260b8
 8005424:	40026058 	.word	0x40026058
 8005428:	2304      	movs	r3, #4
 800542a:	4a94      	ldr	r2, [pc, #592]	; (800567c <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 800542c:	60d3      	str	r3, [r2, #12]
 800542e:	e05f      	b.n	80054f0 <HAL_DMAEx_MultiBufferStart_IT+0xe80>
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4a92      	ldr	r2, [pc, #584]	; (8005680 <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d057      	beq.n	80054ea <HAL_DMAEx_MultiBufferStart_IT+0xe7a>
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4a91      	ldr	r2, [pc, #580]	; (8005684 <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d050      	beq.n	80054e6 <HAL_DMAEx_MultiBufferStart_IT+0xe76>
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4a8f      	ldr	r2, [pc, #572]	; (8005688 <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d049      	beq.n	80054e2 <HAL_DMAEx_MultiBufferStart_IT+0xe72>
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4a8e      	ldr	r2, [pc, #568]	; (800568c <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d042      	beq.n	80054de <HAL_DMAEx_MultiBufferStart_IT+0xe6e>
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4a8c      	ldr	r2, [pc, #560]	; (8005690 <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d03a      	beq.n	80054d8 <HAL_DMAEx_MultiBufferStart_IT+0xe68>
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	4a8b      	ldr	r2, [pc, #556]	; (8005694 <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d032      	beq.n	80054d2 <HAL_DMAEx_MultiBufferStart_IT+0xe62>
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a89      	ldr	r2, [pc, #548]	; (8005698 <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d02a      	beq.n	80054cc <HAL_DMAEx_MultiBufferStart_IT+0xe5c>
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4a88      	ldr	r2, [pc, #544]	; (800569c <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d022      	beq.n	80054c6 <HAL_DMAEx_MultiBufferStart_IT+0xe56>
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	4a86      	ldr	r2, [pc, #536]	; (80056a0 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d01a      	beq.n	80054c0 <HAL_DMAEx_MultiBufferStart_IT+0xe50>
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	4a85      	ldr	r2, [pc, #532]	; (80056a4 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d012      	beq.n	80054ba <HAL_DMAEx_MultiBufferStart_IT+0xe4a>
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4a83      	ldr	r2, [pc, #524]	; (80056a8 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d00a      	beq.n	80054b4 <HAL_DMAEx_MultiBufferStart_IT+0xe44>
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4a82      	ldr	r2, [pc, #520]	; (80056ac <HAL_DMAEx_MultiBufferStart_IT+0x103c>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d102      	bne.n	80054ae <HAL_DMAEx_MultiBufferStart_IT+0xe3e>
 80054a8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80054ac:	e01e      	b.n	80054ec <HAL_DMAEx_MultiBufferStart_IT+0xe7c>
 80054ae:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80054b2:	e01b      	b.n	80054ec <HAL_DMAEx_MultiBufferStart_IT+0xe7c>
 80054b4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80054b8:	e018      	b.n	80054ec <HAL_DMAEx_MultiBufferStart_IT+0xe7c>
 80054ba:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80054be:	e015      	b.n	80054ec <HAL_DMAEx_MultiBufferStart_IT+0xe7c>
 80054c0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80054c4:	e012      	b.n	80054ec <HAL_DMAEx_MultiBufferStart_IT+0xe7c>
 80054c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80054ca:	e00f      	b.n	80054ec <HAL_DMAEx_MultiBufferStart_IT+0xe7c>
 80054cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80054d0:	e00c      	b.n	80054ec <HAL_DMAEx_MultiBufferStart_IT+0xe7c>
 80054d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80054d6:	e009      	b.n	80054ec <HAL_DMAEx_MultiBufferStart_IT+0xe7c>
 80054d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80054dc:	e006      	b.n	80054ec <HAL_DMAEx_MultiBufferStart_IT+0xe7c>
 80054de:	2304      	movs	r3, #4
 80054e0:	e004      	b.n	80054ec <HAL_DMAEx_MultiBufferStart_IT+0xe7c>
 80054e2:	2304      	movs	r3, #4
 80054e4:	e002      	b.n	80054ec <HAL_DMAEx_MultiBufferStart_IT+0xe7c>
 80054e6:	2304      	movs	r3, #4
 80054e8:	e000      	b.n	80054ec <HAL_DMAEx_MultiBufferStart_IT+0xe7c>
 80054ea:	2304      	movs	r3, #4
 80054ec:	4a63      	ldr	r2, [pc, #396]	; (800567c <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 80054ee:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	461a      	mov	r2, r3
 80054f6:	4b6e      	ldr	r3, [pc, #440]	; (80056b0 <HAL_DMAEx_MultiBufferStart_IT+0x1040>)
 80054f8:	429a      	cmp	r2, r3
 80054fa:	d95c      	bls.n	80055b6 <HAL_DMAEx_MultiBufferStart_IT+0xf46>
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4a5f      	ldr	r2, [pc, #380]	; (8005680 <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d053      	beq.n	80055ae <HAL_DMAEx_MultiBufferStart_IT+0xf3e>
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4a5e      	ldr	r2, [pc, #376]	; (8005684 <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d04c      	beq.n	80055aa <HAL_DMAEx_MultiBufferStart_IT+0xf3a>
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a5c      	ldr	r2, [pc, #368]	; (8005688 <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d045      	beq.n	80055a6 <HAL_DMAEx_MultiBufferStart_IT+0xf36>
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a5b      	ldr	r2, [pc, #364]	; (800568c <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d03e      	beq.n	80055a2 <HAL_DMAEx_MultiBufferStart_IT+0xf32>
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a59      	ldr	r2, [pc, #356]	; (8005690 <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d037      	beq.n	800559e <HAL_DMAEx_MultiBufferStart_IT+0xf2e>
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4a58      	ldr	r2, [pc, #352]	; (8005694 <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d030      	beq.n	800559a <HAL_DMAEx_MultiBufferStart_IT+0xf2a>
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4a56      	ldr	r2, [pc, #344]	; (8005698 <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d029      	beq.n	8005596 <HAL_DMAEx_MultiBufferStart_IT+0xf26>
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4a55      	ldr	r2, [pc, #340]	; (800569c <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d022      	beq.n	8005592 <HAL_DMAEx_MultiBufferStart_IT+0xf22>
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4a53      	ldr	r2, [pc, #332]	; (80056a0 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d01a      	beq.n	800558c <HAL_DMAEx_MultiBufferStart_IT+0xf1c>
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4a52      	ldr	r2, [pc, #328]	; (80056a4 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d012      	beq.n	8005586 <HAL_DMAEx_MultiBufferStart_IT+0xf16>
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	4a50      	ldr	r2, [pc, #320]	; (80056a8 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d00a      	beq.n	8005580 <HAL_DMAEx_MultiBufferStart_IT+0xf10>
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4a4f      	ldr	r2, [pc, #316]	; (80056ac <HAL_DMAEx_MultiBufferStart_IT+0x103c>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d102      	bne.n	800557a <HAL_DMAEx_MultiBufferStart_IT+0xf0a>
 8005574:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005578:	e01a      	b.n	80055b0 <HAL_DMAEx_MultiBufferStart_IT+0xf40>
 800557a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800557e:	e017      	b.n	80055b0 <HAL_DMAEx_MultiBufferStart_IT+0xf40>
 8005580:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005584:	e014      	b.n	80055b0 <HAL_DMAEx_MultiBufferStart_IT+0xf40>
 8005586:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800558a:	e011      	b.n	80055b0 <HAL_DMAEx_MultiBufferStart_IT+0xf40>
 800558c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005590:	e00e      	b.n	80055b0 <HAL_DMAEx_MultiBufferStart_IT+0xf40>
 8005592:	2340      	movs	r3, #64	; 0x40
 8005594:	e00c      	b.n	80055b0 <HAL_DMAEx_MultiBufferStart_IT+0xf40>
 8005596:	2340      	movs	r3, #64	; 0x40
 8005598:	e00a      	b.n	80055b0 <HAL_DMAEx_MultiBufferStart_IT+0xf40>
 800559a:	2340      	movs	r3, #64	; 0x40
 800559c:	e008      	b.n	80055b0 <HAL_DMAEx_MultiBufferStart_IT+0xf40>
 800559e:	2340      	movs	r3, #64	; 0x40
 80055a0:	e006      	b.n	80055b0 <HAL_DMAEx_MultiBufferStart_IT+0xf40>
 80055a2:	2301      	movs	r3, #1
 80055a4:	e004      	b.n	80055b0 <HAL_DMAEx_MultiBufferStart_IT+0xf40>
 80055a6:	2301      	movs	r3, #1
 80055a8:	e002      	b.n	80055b0 <HAL_DMAEx_MultiBufferStart_IT+0xf40>
 80055aa:	2301      	movs	r3, #1
 80055ac:	e000      	b.n	80055b0 <HAL_DMAEx_MultiBufferStart_IT+0xf40>
 80055ae:	2301      	movs	r3, #1
 80055b0:	4a40      	ldr	r2, [pc, #256]	; (80056b4 <HAL_DMAEx_MultiBufferStart_IT+0x1044>)
 80055b2:	60d3      	str	r3, [r2, #12]
 80055b4:	e141      	b.n	800583a <HAL_DMAEx_MultiBufferStart_IT+0x11ca>
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	461a      	mov	r2, r3
 80055bc:	4b3e      	ldr	r3, [pc, #248]	; (80056b8 <HAL_DMAEx_MultiBufferStart_IT+0x1048>)
 80055be:	429a      	cmp	r2, r3
 80055c0:	d97c      	bls.n	80056bc <HAL_DMAEx_MultiBufferStart_IT+0x104c>
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4a2e      	ldr	r2, [pc, #184]	; (8005680 <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d053      	beq.n	8005674 <HAL_DMAEx_MultiBufferStart_IT+0x1004>
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	4a2c      	ldr	r2, [pc, #176]	; (8005684 <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d04c      	beq.n	8005670 <HAL_DMAEx_MultiBufferStart_IT+0x1000>
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	4a2b      	ldr	r2, [pc, #172]	; (8005688 <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	d045      	beq.n	800566c <HAL_DMAEx_MultiBufferStart_IT+0xffc>
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	4a29      	ldr	r2, [pc, #164]	; (800568c <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d03e      	beq.n	8005668 <HAL_DMAEx_MultiBufferStart_IT+0xff8>
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	4a28      	ldr	r2, [pc, #160]	; (8005690 <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d037      	beq.n	8005664 <HAL_DMAEx_MultiBufferStart_IT+0xff4>
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	4a26      	ldr	r2, [pc, #152]	; (8005694 <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d030      	beq.n	8005660 <HAL_DMAEx_MultiBufferStart_IT+0xff0>
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	4a25      	ldr	r2, [pc, #148]	; (8005698 <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d029      	beq.n	800565c <HAL_DMAEx_MultiBufferStart_IT+0xfec>
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	4a23      	ldr	r2, [pc, #140]	; (800569c <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d022      	beq.n	8005658 <HAL_DMAEx_MultiBufferStart_IT+0xfe8>
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4a22      	ldr	r2, [pc, #136]	; (80056a0 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 8005618:	4293      	cmp	r3, r2
 800561a:	d01a      	beq.n	8005652 <HAL_DMAEx_MultiBufferStart_IT+0xfe2>
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	4a20      	ldr	r2, [pc, #128]	; (80056a4 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d012      	beq.n	800564c <HAL_DMAEx_MultiBufferStart_IT+0xfdc>
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	4a1f      	ldr	r2, [pc, #124]	; (80056a8 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d00a      	beq.n	8005646 <HAL_DMAEx_MultiBufferStart_IT+0xfd6>
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	4a1d      	ldr	r2, [pc, #116]	; (80056ac <HAL_DMAEx_MultiBufferStart_IT+0x103c>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d102      	bne.n	8005640 <HAL_DMAEx_MultiBufferStart_IT+0xfd0>
 800563a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800563e:	e01a      	b.n	8005676 <HAL_DMAEx_MultiBufferStart_IT+0x1006>
 8005640:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005644:	e017      	b.n	8005676 <HAL_DMAEx_MultiBufferStart_IT+0x1006>
 8005646:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800564a:	e014      	b.n	8005676 <HAL_DMAEx_MultiBufferStart_IT+0x1006>
 800564c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005650:	e011      	b.n	8005676 <HAL_DMAEx_MultiBufferStart_IT+0x1006>
 8005652:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005656:	e00e      	b.n	8005676 <HAL_DMAEx_MultiBufferStart_IT+0x1006>
 8005658:	2340      	movs	r3, #64	; 0x40
 800565a:	e00c      	b.n	8005676 <HAL_DMAEx_MultiBufferStart_IT+0x1006>
 800565c:	2340      	movs	r3, #64	; 0x40
 800565e:	e00a      	b.n	8005676 <HAL_DMAEx_MultiBufferStart_IT+0x1006>
 8005660:	2340      	movs	r3, #64	; 0x40
 8005662:	e008      	b.n	8005676 <HAL_DMAEx_MultiBufferStart_IT+0x1006>
 8005664:	2340      	movs	r3, #64	; 0x40
 8005666:	e006      	b.n	8005676 <HAL_DMAEx_MultiBufferStart_IT+0x1006>
 8005668:	2301      	movs	r3, #1
 800566a:	e004      	b.n	8005676 <HAL_DMAEx_MultiBufferStart_IT+0x1006>
 800566c:	2301      	movs	r3, #1
 800566e:	e002      	b.n	8005676 <HAL_DMAEx_MultiBufferStart_IT+0x1006>
 8005670:	2301      	movs	r3, #1
 8005672:	e000      	b.n	8005676 <HAL_DMAEx_MultiBufferStart_IT+0x1006>
 8005674:	2301      	movs	r3, #1
 8005676:	4a0f      	ldr	r2, [pc, #60]	; (80056b4 <HAL_DMAEx_MultiBufferStart_IT+0x1044>)
 8005678:	6093      	str	r3, [r2, #8]
 800567a:	e0de      	b.n	800583a <HAL_DMAEx_MultiBufferStart_IT+0x11ca>
 800567c:	40026000 	.word	0x40026000
 8005680:	40026010 	.word	0x40026010
 8005684:	40026410 	.word	0x40026410
 8005688:	40026070 	.word	0x40026070
 800568c:	40026470 	.word	0x40026470
 8005690:	40026028 	.word	0x40026028
 8005694:	40026428 	.word	0x40026428
 8005698:	40026088 	.word	0x40026088
 800569c:	40026488 	.word	0x40026488
 80056a0:	40026040 	.word	0x40026040
 80056a4:	40026440 	.word	0x40026440
 80056a8:	400260a0 	.word	0x400260a0
 80056ac:	400264a0 	.word	0x400264a0
 80056b0:	40026458 	.word	0x40026458
 80056b4:	40026400 	.word	0x40026400
 80056b8:	400260b8 	.word	0x400260b8
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	461a      	mov	r2, r3
 80056c2:	4b78      	ldr	r3, [pc, #480]	; (80058a4 <HAL_DMAEx_MultiBufferStart_IT+0x1234>)
 80056c4:	429a      	cmp	r2, r3
 80056c6:	d95c      	bls.n	8005782 <HAL_DMAEx_MultiBufferStart_IT+0x1112>
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4a76      	ldr	r2, [pc, #472]	; (80058a8 <HAL_DMAEx_MultiBufferStart_IT+0x1238>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d053      	beq.n	800577a <HAL_DMAEx_MultiBufferStart_IT+0x110a>
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4a75      	ldr	r2, [pc, #468]	; (80058ac <HAL_DMAEx_MultiBufferStart_IT+0x123c>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d04c      	beq.n	8005776 <HAL_DMAEx_MultiBufferStart_IT+0x1106>
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4a73      	ldr	r2, [pc, #460]	; (80058b0 <HAL_DMAEx_MultiBufferStart_IT+0x1240>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d045      	beq.n	8005772 <HAL_DMAEx_MultiBufferStart_IT+0x1102>
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4a72      	ldr	r2, [pc, #456]	; (80058b4 <HAL_DMAEx_MultiBufferStart_IT+0x1244>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d03e      	beq.n	800576e <HAL_DMAEx_MultiBufferStart_IT+0x10fe>
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	4a70      	ldr	r2, [pc, #448]	; (80058b8 <HAL_DMAEx_MultiBufferStart_IT+0x1248>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d037      	beq.n	800576a <HAL_DMAEx_MultiBufferStart_IT+0x10fa>
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4a6f      	ldr	r2, [pc, #444]	; (80058bc <HAL_DMAEx_MultiBufferStart_IT+0x124c>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d030      	beq.n	8005766 <HAL_DMAEx_MultiBufferStart_IT+0x10f6>
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	4a6d      	ldr	r2, [pc, #436]	; (80058c0 <HAL_DMAEx_MultiBufferStart_IT+0x1250>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d029      	beq.n	8005762 <HAL_DMAEx_MultiBufferStart_IT+0x10f2>
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4a6c      	ldr	r2, [pc, #432]	; (80058c4 <HAL_DMAEx_MultiBufferStart_IT+0x1254>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d022      	beq.n	800575e <HAL_DMAEx_MultiBufferStart_IT+0x10ee>
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4a6a      	ldr	r2, [pc, #424]	; (80058c8 <HAL_DMAEx_MultiBufferStart_IT+0x1258>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d01a      	beq.n	8005758 <HAL_DMAEx_MultiBufferStart_IT+0x10e8>
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	4a69      	ldr	r2, [pc, #420]	; (80058cc <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d012      	beq.n	8005752 <HAL_DMAEx_MultiBufferStart_IT+0x10e2>
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	4a67      	ldr	r2, [pc, #412]	; (80058d0 <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d00a      	beq.n	800574c <HAL_DMAEx_MultiBufferStart_IT+0x10dc>
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	4a66      	ldr	r2, [pc, #408]	; (80058d4 <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 800573c:	4293      	cmp	r3, r2
 800573e:	d102      	bne.n	8005746 <HAL_DMAEx_MultiBufferStart_IT+0x10d6>
 8005740:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005744:	e01a      	b.n	800577c <HAL_DMAEx_MultiBufferStart_IT+0x110c>
 8005746:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800574a:	e017      	b.n	800577c <HAL_DMAEx_MultiBufferStart_IT+0x110c>
 800574c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005750:	e014      	b.n	800577c <HAL_DMAEx_MultiBufferStart_IT+0x110c>
 8005752:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005756:	e011      	b.n	800577c <HAL_DMAEx_MultiBufferStart_IT+0x110c>
 8005758:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800575c:	e00e      	b.n	800577c <HAL_DMAEx_MultiBufferStart_IT+0x110c>
 800575e:	2340      	movs	r3, #64	; 0x40
 8005760:	e00c      	b.n	800577c <HAL_DMAEx_MultiBufferStart_IT+0x110c>
 8005762:	2340      	movs	r3, #64	; 0x40
 8005764:	e00a      	b.n	800577c <HAL_DMAEx_MultiBufferStart_IT+0x110c>
 8005766:	2340      	movs	r3, #64	; 0x40
 8005768:	e008      	b.n	800577c <HAL_DMAEx_MultiBufferStart_IT+0x110c>
 800576a:	2340      	movs	r3, #64	; 0x40
 800576c:	e006      	b.n	800577c <HAL_DMAEx_MultiBufferStart_IT+0x110c>
 800576e:	2301      	movs	r3, #1
 8005770:	e004      	b.n	800577c <HAL_DMAEx_MultiBufferStart_IT+0x110c>
 8005772:	2301      	movs	r3, #1
 8005774:	e002      	b.n	800577c <HAL_DMAEx_MultiBufferStart_IT+0x110c>
 8005776:	2301      	movs	r3, #1
 8005778:	e000      	b.n	800577c <HAL_DMAEx_MultiBufferStart_IT+0x110c>
 800577a:	2301      	movs	r3, #1
 800577c:	4a56      	ldr	r2, [pc, #344]	; (80058d8 <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 800577e:	60d3      	str	r3, [r2, #12]
 8005780:	e05b      	b.n	800583a <HAL_DMAEx_MultiBufferStart_IT+0x11ca>
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	4a48      	ldr	r2, [pc, #288]	; (80058a8 <HAL_DMAEx_MultiBufferStart_IT+0x1238>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d053      	beq.n	8005834 <HAL_DMAEx_MultiBufferStart_IT+0x11c4>
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4a46      	ldr	r2, [pc, #280]	; (80058ac <HAL_DMAEx_MultiBufferStart_IT+0x123c>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d04c      	beq.n	8005830 <HAL_DMAEx_MultiBufferStart_IT+0x11c0>
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	4a45      	ldr	r2, [pc, #276]	; (80058b0 <HAL_DMAEx_MultiBufferStart_IT+0x1240>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d045      	beq.n	800582c <HAL_DMAEx_MultiBufferStart_IT+0x11bc>
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4a43      	ldr	r2, [pc, #268]	; (80058b4 <HAL_DMAEx_MultiBufferStart_IT+0x1244>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d03e      	beq.n	8005828 <HAL_DMAEx_MultiBufferStart_IT+0x11b8>
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	4a42      	ldr	r2, [pc, #264]	; (80058b8 <HAL_DMAEx_MultiBufferStart_IT+0x1248>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d037      	beq.n	8005824 <HAL_DMAEx_MultiBufferStart_IT+0x11b4>
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4a40      	ldr	r2, [pc, #256]	; (80058bc <HAL_DMAEx_MultiBufferStart_IT+0x124c>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d030      	beq.n	8005820 <HAL_DMAEx_MultiBufferStart_IT+0x11b0>
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4a3f      	ldr	r2, [pc, #252]	; (80058c0 <HAL_DMAEx_MultiBufferStart_IT+0x1250>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d029      	beq.n	800581c <HAL_DMAEx_MultiBufferStart_IT+0x11ac>
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4a3d      	ldr	r2, [pc, #244]	; (80058c4 <HAL_DMAEx_MultiBufferStart_IT+0x1254>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d022      	beq.n	8005818 <HAL_DMAEx_MultiBufferStart_IT+0x11a8>
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4a3c      	ldr	r2, [pc, #240]	; (80058c8 <HAL_DMAEx_MultiBufferStart_IT+0x1258>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d01a      	beq.n	8005812 <HAL_DMAEx_MultiBufferStart_IT+0x11a2>
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4a3a      	ldr	r2, [pc, #232]	; (80058cc <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d012      	beq.n	800580c <HAL_DMAEx_MultiBufferStart_IT+0x119c>
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4a39      	ldr	r2, [pc, #228]	; (80058d0 <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d00a      	beq.n	8005806 <HAL_DMAEx_MultiBufferStart_IT+0x1196>
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4a37      	ldr	r2, [pc, #220]	; (80058d4 <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d102      	bne.n	8005800 <HAL_DMAEx_MultiBufferStart_IT+0x1190>
 80057fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80057fe:	e01a      	b.n	8005836 <HAL_DMAEx_MultiBufferStart_IT+0x11c6>
 8005800:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005804:	e017      	b.n	8005836 <HAL_DMAEx_MultiBufferStart_IT+0x11c6>
 8005806:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800580a:	e014      	b.n	8005836 <HAL_DMAEx_MultiBufferStart_IT+0x11c6>
 800580c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005810:	e011      	b.n	8005836 <HAL_DMAEx_MultiBufferStart_IT+0x11c6>
 8005812:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005816:	e00e      	b.n	8005836 <HAL_DMAEx_MultiBufferStart_IT+0x11c6>
 8005818:	2340      	movs	r3, #64	; 0x40
 800581a:	e00c      	b.n	8005836 <HAL_DMAEx_MultiBufferStart_IT+0x11c6>
 800581c:	2340      	movs	r3, #64	; 0x40
 800581e:	e00a      	b.n	8005836 <HAL_DMAEx_MultiBufferStart_IT+0x11c6>
 8005820:	2340      	movs	r3, #64	; 0x40
 8005822:	e008      	b.n	8005836 <HAL_DMAEx_MultiBufferStart_IT+0x11c6>
 8005824:	2340      	movs	r3, #64	; 0x40
 8005826:	e006      	b.n	8005836 <HAL_DMAEx_MultiBufferStart_IT+0x11c6>
 8005828:	2301      	movs	r3, #1
 800582a:	e004      	b.n	8005836 <HAL_DMAEx_MultiBufferStart_IT+0x11c6>
 800582c:	2301      	movs	r3, #1
 800582e:	e002      	b.n	8005836 <HAL_DMAEx_MultiBufferStart_IT+0x11c6>
 8005830:	2301      	movs	r3, #1
 8005832:	e000      	b.n	8005836 <HAL_DMAEx_MultiBufferStart_IT+0x11c6>
 8005834:	2301      	movs	r3, #1
 8005836:	4a28      	ldr	r2, [pc, #160]	; (80058d8 <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 8005838:	6093      	str	r3, [r2, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	681a      	ldr	r2, [r3, #0]
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f042 0216 	orr.w	r2, r2, #22
 8005848:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	695a      	ldr	r2, [r3, #20]
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005858:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800585e:	2b00      	cmp	r3, #0
 8005860:	d103      	bne.n	800586a <HAL_DMAEx_MultiBufferStart_IT+0x11fa>
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005866:	2b00      	cmp	r3, #0
 8005868:	d007      	beq.n	800587a <HAL_DMAEx_MultiBufferStart_IT+0x120a>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	681a      	ldr	r2, [r3, #0]
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f042 0208 	orr.w	r2, r2, #8
 8005878:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma); 
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	681a      	ldr	r2, [r3, #0]
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f042 0201 	orr.w	r2, r2, #1
 8005888:	601a      	str	r2, [r3, #0]
 800588a:	e005      	b.n	8005898 <HAL_DMAEx_MultiBufferStart_IT+0x1228>
  }
  else
  {     
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	2200      	movs	r2, #0
 8005890:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005894:	2302      	movs	r3, #2
 8005896:	75fb      	strb	r3, [r7, #23]
  }  
  return status; 
 8005898:	7dfb      	ldrb	r3, [r7, #23]
}
 800589a:	4618      	mov	r0, r3
 800589c:	3718      	adds	r7, #24
 800589e:	46bd      	mov	sp, r7
 80058a0:	bd80      	pop	{r7, pc}
 80058a2:	bf00      	nop
 80058a4:	40026058 	.word	0x40026058
 80058a8:	40026010 	.word	0x40026010
 80058ac:	40026410 	.word	0x40026410
 80058b0:	40026070 	.word	0x40026070
 80058b4:	40026470 	.word	0x40026470
 80058b8:	40026028 	.word	0x40026028
 80058bc:	40026428 	.word	0x40026428
 80058c0:	40026088 	.word	0x40026088
 80058c4:	40026488 	.word	0x40026488
 80058c8:	40026040 	.word	0x40026040
 80058cc:	40026440 	.word	0x40026440
 80058d0:	400260a0 	.word	0x400260a0
 80058d4:	400264a0 	.word	0x400264a0
 80058d8:	40026000 	.word	0x40026000

080058dc <HAL_DMAEx_ChangeMemory>:
  *         MEMORY1 and the MEMORY1 address can be changed only when the current 
  *         transfer use MEMORY0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ChangeMemory(DMA_HandleTypeDef *hdma, uint32_t Address, HAL_DMA_MemoryTypeDef memory)
{
 80058dc:	b480      	push	{r7}
 80058de:	b085      	sub	sp, #20
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	60f8      	str	r0, [r7, #12]
 80058e4:	60b9      	str	r1, [r7, #8]
 80058e6:	4613      	mov	r3, r2
 80058e8:	71fb      	strb	r3, [r7, #7]
  if(memory == MEMORY0)
 80058ea:	79fb      	ldrb	r3, [r7, #7]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d104      	bne.n	80058fa <HAL_DMAEx_ChangeMemory+0x1e>
  {
    /* change the memory0 address */
    hdma->Instance->M0AR = Address;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	68ba      	ldr	r2, [r7, #8]
 80058f6:	60da      	str	r2, [r3, #12]
 80058f8:	e003      	b.n	8005902 <HAL_DMAEx_ChangeMemory+0x26>
  }
  else
  {
    /* change the memory1 address */
    hdma->Instance->M1AR = Address;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	68ba      	ldr	r2, [r7, #8]
 8005900:	611a      	str	r2, [r3, #16]
  }
  
  return HAL_OK;
 8005902:	2300      	movs	r3, #0
}
 8005904:	4618      	mov	r0, r3
 8005906:	3714      	adds	r7, #20
 8005908:	46bd      	mov	sp, r7
 800590a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590e:	4770      	bx	lr

08005910 <DMA_MultiBufferSetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005910:	b480      	push	{r7}
 8005912:	b085      	sub	sp, #20
 8005914:	af00      	add	r7, sp, #0
 8005916:	60f8      	str	r0, [r7, #12]
 8005918:	60b9      	str	r1, [r7, #8]
 800591a:	607a      	str	r2, [r7, #4]
 800591c:	603b      	str	r3, [r7, #0]
  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	683a      	ldr	r2, [r7, #0]
 8005924:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	689b      	ldr	r3, [r3, #8]
 800592a:	2b40      	cmp	r3, #64	; 0x40
 800592c:	d108      	bne.n	8005940 <DMA_MultiBufferSetConfig+0x30>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	687a      	ldr	r2, [r7, #4]
 8005934:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	68ba      	ldr	r2, [r7, #8]
 800593c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800593e:	e007      	b.n	8005950 <DMA_MultiBufferSetConfig+0x40>
    hdma->Instance->PAR = SrcAddress;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	68ba      	ldr	r2, [r7, #8]
 8005946:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	687a      	ldr	r2, [r7, #4]
 800594e:	60da      	str	r2, [r3, #12]
}
 8005950:	bf00      	nop
 8005952:	3714      	adds	r7, #20
 8005954:	46bd      	mov	sp, r7
 8005956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595a:	4770      	bx	lr

0800595c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800595c:	b480      	push	{r7}
 800595e:	b089      	sub	sp, #36	; 0x24
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
 8005964:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8005966:	2300      	movs	r3, #0
 8005968:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800596a:	2300      	movs	r3, #0
 800596c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800596e:	2300      	movs	r3, #0
 8005970:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8005972:	2300      	movs	r3, #0
 8005974:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8005976:	2300      	movs	r3, #0
 8005978:	61fb      	str	r3, [r7, #28]
 800597a:	e175      	b.n	8005c68 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800597c:	2201      	movs	r2, #1
 800597e:	69fb      	ldr	r3, [r7, #28]
 8005980:	fa02 f303 	lsl.w	r3, r2, r3
 8005984:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	697a      	ldr	r2, [r7, #20]
 800598c:	4013      	ands	r3, r2
 800598e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005990:	693a      	ldr	r2, [r7, #16]
 8005992:	697b      	ldr	r3, [r7, #20]
 8005994:	429a      	cmp	r2, r3
 8005996:	f040 8164 	bne.w	8005c62 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	685b      	ldr	r3, [r3, #4]
 800599e:	f003 0303 	and.w	r3, r3, #3
 80059a2:	2b01      	cmp	r3, #1
 80059a4:	d005      	beq.n	80059b2 <HAL_GPIO_Init+0x56>
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	685b      	ldr	r3, [r3, #4]
 80059aa:	f003 0303 	and.w	r3, r3, #3
 80059ae:	2b02      	cmp	r3, #2
 80059b0:	d130      	bne.n	8005a14 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	689b      	ldr	r3, [r3, #8]
 80059b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80059b8:	69fb      	ldr	r3, [r7, #28]
 80059ba:	005b      	lsls	r3, r3, #1
 80059bc:	2203      	movs	r2, #3
 80059be:	fa02 f303 	lsl.w	r3, r2, r3
 80059c2:	43db      	mvns	r3, r3
 80059c4:	69ba      	ldr	r2, [r7, #24]
 80059c6:	4013      	ands	r3, r2
 80059c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	68da      	ldr	r2, [r3, #12]
 80059ce:	69fb      	ldr	r3, [r7, #28]
 80059d0:	005b      	lsls	r3, r3, #1
 80059d2:	fa02 f303 	lsl.w	r3, r2, r3
 80059d6:	69ba      	ldr	r2, [r7, #24]
 80059d8:	4313      	orrs	r3, r2
 80059da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	69ba      	ldr	r2, [r7, #24]
 80059e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	685b      	ldr	r3, [r3, #4]
 80059e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80059e8:	2201      	movs	r2, #1
 80059ea:	69fb      	ldr	r3, [r7, #28]
 80059ec:	fa02 f303 	lsl.w	r3, r2, r3
 80059f0:	43db      	mvns	r3, r3
 80059f2:	69ba      	ldr	r2, [r7, #24]
 80059f4:	4013      	ands	r3, r2
 80059f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	685b      	ldr	r3, [r3, #4]
 80059fc:	091b      	lsrs	r3, r3, #4
 80059fe:	f003 0201 	and.w	r2, r3, #1
 8005a02:	69fb      	ldr	r3, [r7, #28]
 8005a04:	fa02 f303 	lsl.w	r3, r2, r3
 8005a08:	69ba      	ldr	r2, [r7, #24]
 8005a0a:	4313      	orrs	r3, r2
 8005a0c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	69ba      	ldr	r2, [r7, #24]
 8005a12:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	685b      	ldr	r3, [r3, #4]
 8005a18:	f003 0303 	and.w	r3, r3, #3
 8005a1c:	2b03      	cmp	r3, #3
 8005a1e:	d017      	beq.n	8005a50 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	68db      	ldr	r3, [r3, #12]
 8005a24:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8005a26:	69fb      	ldr	r3, [r7, #28]
 8005a28:	005b      	lsls	r3, r3, #1
 8005a2a:	2203      	movs	r2, #3
 8005a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8005a30:	43db      	mvns	r3, r3
 8005a32:	69ba      	ldr	r2, [r7, #24]
 8005a34:	4013      	ands	r3, r2
 8005a36:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	689a      	ldr	r2, [r3, #8]
 8005a3c:	69fb      	ldr	r3, [r7, #28]
 8005a3e:	005b      	lsls	r3, r3, #1
 8005a40:	fa02 f303 	lsl.w	r3, r2, r3
 8005a44:	69ba      	ldr	r2, [r7, #24]
 8005a46:	4313      	orrs	r3, r2
 8005a48:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	69ba      	ldr	r2, [r7, #24]
 8005a4e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	685b      	ldr	r3, [r3, #4]
 8005a54:	f003 0303 	and.w	r3, r3, #3
 8005a58:	2b02      	cmp	r3, #2
 8005a5a:	d123      	bne.n	8005aa4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8005a5c:	69fb      	ldr	r3, [r7, #28]
 8005a5e:	08da      	lsrs	r2, r3, #3
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	3208      	adds	r2, #8
 8005a64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005a6a:	69fb      	ldr	r3, [r7, #28]
 8005a6c:	f003 0307 	and.w	r3, r3, #7
 8005a70:	009b      	lsls	r3, r3, #2
 8005a72:	220f      	movs	r2, #15
 8005a74:	fa02 f303 	lsl.w	r3, r2, r3
 8005a78:	43db      	mvns	r3, r3
 8005a7a:	69ba      	ldr	r2, [r7, #24]
 8005a7c:	4013      	ands	r3, r2
 8005a7e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	691a      	ldr	r2, [r3, #16]
 8005a84:	69fb      	ldr	r3, [r7, #28]
 8005a86:	f003 0307 	and.w	r3, r3, #7
 8005a8a:	009b      	lsls	r3, r3, #2
 8005a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8005a90:	69ba      	ldr	r2, [r7, #24]
 8005a92:	4313      	orrs	r3, r2
 8005a94:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8005a96:	69fb      	ldr	r3, [r7, #28]
 8005a98:	08da      	lsrs	r2, r3, #3
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	3208      	adds	r2, #8
 8005a9e:	69b9      	ldr	r1, [r7, #24]
 8005aa0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005aaa:	69fb      	ldr	r3, [r7, #28]
 8005aac:	005b      	lsls	r3, r3, #1
 8005aae:	2203      	movs	r2, #3
 8005ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ab4:	43db      	mvns	r3, r3
 8005ab6:	69ba      	ldr	r2, [r7, #24]
 8005ab8:	4013      	ands	r3, r2
 8005aba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	685b      	ldr	r3, [r3, #4]
 8005ac0:	f003 0203 	and.w	r2, r3, #3
 8005ac4:	69fb      	ldr	r3, [r7, #28]
 8005ac6:	005b      	lsls	r3, r3, #1
 8005ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8005acc:	69ba      	ldr	r2, [r7, #24]
 8005ace:	4313      	orrs	r3, r2
 8005ad0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	69ba      	ldr	r2, [r7, #24]
 8005ad6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	685b      	ldr	r3, [r3, #4]
 8005adc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	f000 80be 	beq.w	8005c62 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005ae6:	4b66      	ldr	r3, [pc, #408]	; (8005c80 <HAL_GPIO_Init+0x324>)
 8005ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005aea:	4a65      	ldr	r2, [pc, #404]	; (8005c80 <HAL_GPIO_Init+0x324>)
 8005aec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005af0:	6453      	str	r3, [r2, #68]	; 0x44
 8005af2:	4b63      	ldr	r3, [pc, #396]	; (8005c80 <HAL_GPIO_Init+0x324>)
 8005af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005af6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005afa:	60fb      	str	r3, [r7, #12]
 8005afc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8005afe:	4a61      	ldr	r2, [pc, #388]	; (8005c84 <HAL_GPIO_Init+0x328>)
 8005b00:	69fb      	ldr	r3, [r7, #28]
 8005b02:	089b      	lsrs	r3, r3, #2
 8005b04:	3302      	adds	r3, #2
 8005b06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005b0c:	69fb      	ldr	r3, [r7, #28]
 8005b0e:	f003 0303 	and.w	r3, r3, #3
 8005b12:	009b      	lsls	r3, r3, #2
 8005b14:	220f      	movs	r2, #15
 8005b16:	fa02 f303 	lsl.w	r3, r2, r3
 8005b1a:	43db      	mvns	r3, r3
 8005b1c:	69ba      	ldr	r2, [r7, #24]
 8005b1e:	4013      	ands	r3, r2
 8005b20:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	4a58      	ldr	r2, [pc, #352]	; (8005c88 <HAL_GPIO_Init+0x32c>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d037      	beq.n	8005b9a <HAL_GPIO_Init+0x23e>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	4a57      	ldr	r2, [pc, #348]	; (8005c8c <HAL_GPIO_Init+0x330>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d031      	beq.n	8005b96 <HAL_GPIO_Init+0x23a>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	4a56      	ldr	r2, [pc, #344]	; (8005c90 <HAL_GPIO_Init+0x334>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d02b      	beq.n	8005b92 <HAL_GPIO_Init+0x236>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	4a55      	ldr	r2, [pc, #340]	; (8005c94 <HAL_GPIO_Init+0x338>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d025      	beq.n	8005b8e <HAL_GPIO_Init+0x232>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	4a54      	ldr	r2, [pc, #336]	; (8005c98 <HAL_GPIO_Init+0x33c>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d01f      	beq.n	8005b8a <HAL_GPIO_Init+0x22e>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	4a53      	ldr	r2, [pc, #332]	; (8005c9c <HAL_GPIO_Init+0x340>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d019      	beq.n	8005b86 <HAL_GPIO_Init+0x22a>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	4a52      	ldr	r2, [pc, #328]	; (8005ca0 <HAL_GPIO_Init+0x344>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d013      	beq.n	8005b82 <HAL_GPIO_Init+0x226>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	4a51      	ldr	r2, [pc, #324]	; (8005ca4 <HAL_GPIO_Init+0x348>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d00d      	beq.n	8005b7e <HAL_GPIO_Init+0x222>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	4a50      	ldr	r2, [pc, #320]	; (8005ca8 <HAL_GPIO_Init+0x34c>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d007      	beq.n	8005b7a <HAL_GPIO_Init+0x21e>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	4a4f      	ldr	r2, [pc, #316]	; (8005cac <HAL_GPIO_Init+0x350>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d101      	bne.n	8005b76 <HAL_GPIO_Init+0x21a>
 8005b72:	2309      	movs	r3, #9
 8005b74:	e012      	b.n	8005b9c <HAL_GPIO_Init+0x240>
 8005b76:	230a      	movs	r3, #10
 8005b78:	e010      	b.n	8005b9c <HAL_GPIO_Init+0x240>
 8005b7a:	2308      	movs	r3, #8
 8005b7c:	e00e      	b.n	8005b9c <HAL_GPIO_Init+0x240>
 8005b7e:	2307      	movs	r3, #7
 8005b80:	e00c      	b.n	8005b9c <HAL_GPIO_Init+0x240>
 8005b82:	2306      	movs	r3, #6
 8005b84:	e00a      	b.n	8005b9c <HAL_GPIO_Init+0x240>
 8005b86:	2305      	movs	r3, #5
 8005b88:	e008      	b.n	8005b9c <HAL_GPIO_Init+0x240>
 8005b8a:	2304      	movs	r3, #4
 8005b8c:	e006      	b.n	8005b9c <HAL_GPIO_Init+0x240>
 8005b8e:	2303      	movs	r3, #3
 8005b90:	e004      	b.n	8005b9c <HAL_GPIO_Init+0x240>
 8005b92:	2302      	movs	r3, #2
 8005b94:	e002      	b.n	8005b9c <HAL_GPIO_Init+0x240>
 8005b96:	2301      	movs	r3, #1
 8005b98:	e000      	b.n	8005b9c <HAL_GPIO_Init+0x240>
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	69fa      	ldr	r2, [r7, #28]
 8005b9e:	f002 0203 	and.w	r2, r2, #3
 8005ba2:	0092      	lsls	r2, r2, #2
 8005ba4:	4093      	lsls	r3, r2
 8005ba6:	69ba      	ldr	r2, [r7, #24]
 8005ba8:	4313      	orrs	r3, r2
 8005baa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8005bac:	4935      	ldr	r1, [pc, #212]	; (8005c84 <HAL_GPIO_Init+0x328>)
 8005bae:	69fb      	ldr	r3, [r7, #28]
 8005bb0:	089b      	lsrs	r3, r3, #2
 8005bb2:	3302      	adds	r3, #2
 8005bb4:	69ba      	ldr	r2, [r7, #24]
 8005bb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005bba:	4b3d      	ldr	r3, [pc, #244]	; (8005cb0 <HAL_GPIO_Init+0x354>)
 8005bbc:	689b      	ldr	r3, [r3, #8]
 8005bbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005bc0:	693b      	ldr	r3, [r7, #16]
 8005bc2:	43db      	mvns	r3, r3
 8005bc4:	69ba      	ldr	r2, [r7, #24]
 8005bc6:	4013      	ands	r3, r2
 8005bc8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	685b      	ldr	r3, [r3, #4]
 8005bce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d003      	beq.n	8005bde <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005bd6:	69ba      	ldr	r2, [r7, #24]
 8005bd8:	693b      	ldr	r3, [r7, #16]
 8005bda:	4313      	orrs	r3, r2
 8005bdc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005bde:	4a34      	ldr	r2, [pc, #208]	; (8005cb0 <HAL_GPIO_Init+0x354>)
 8005be0:	69bb      	ldr	r3, [r7, #24]
 8005be2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005be4:	4b32      	ldr	r3, [pc, #200]	; (8005cb0 <HAL_GPIO_Init+0x354>)
 8005be6:	68db      	ldr	r3, [r3, #12]
 8005be8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005bea:	693b      	ldr	r3, [r7, #16]
 8005bec:	43db      	mvns	r3, r3
 8005bee:	69ba      	ldr	r2, [r7, #24]
 8005bf0:	4013      	ands	r3, r2
 8005bf2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	685b      	ldr	r3, [r3, #4]
 8005bf8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d003      	beq.n	8005c08 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005c00:	69ba      	ldr	r2, [r7, #24]
 8005c02:	693b      	ldr	r3, [r7, #16]
 8005c04:	4313      	orrs	r3, r2
 8005c06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005c08:	4a29      	ldr	r2, [pc, #164]	; (8005cb0 <HAL_GPIO_Init+0x354>)
 8005c0a:	69bb      	ldr	r3, [r7, #24]
 8005c0c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005c0e:	4b28      	ldr	r3, [pc, #160]	; (8005cb0 <HAL_GPIO_Init+0x354>)
 8005c10:	685b      	ldr	r3, [r3, #4]
 8005c12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005c14:	693b      	ldr	r3, [r7, #16]
 8005c16:	43db      	mvns	r3, r3
 8005c18:	69ba      	ldr	r2, [r7, #24]
 8005c1a:	4013      	ands	r3, r2
 8005c1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	685b      	ldr	r3, [r3, #4]
 8005c22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d003      	beq.n	8005c32 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005c2a:	69ba      	ldr	r2, [r7, #24]
 8005c2c:	693b      	ldr	r3, [r7, #16]
 8005c2e:	4313      	orrs	r3, r2
 8005c30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005c32:	4a1f      	ldr	r2, [pc, #124]	; (8005cb0 <HAL_GPIO_Init+0x354>)
 8005c34:	69bb      	ldr	r3, [r7, #24]
 8005c36:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005c38:	4b1d      	ldr	r3, [pc, #116]	; (8005cb0 <HAL_GPIO_Init+0x354>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005c3e:	693b      	ldr	r3, [r7, #16]
 8005c40:	43db      	mvns	r3, r3
 8005c42:	69ba      	ldr	r2, [r7, #24]
 8005c44:	4013      	ands	r3, r2
 8005c46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	685b      	ldr	r3, [r3, #4]
 8005c4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d003      	beq.n	8005c5c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005c54:	69ba      	ldr	r2, [r7, #24]
 8005c56:	693b      	ldr	r3, [r7, #16]
 8005c58:	4313      	orrs	r3, r2
 8005c5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005c5c:	4a14      	ldr	r2, [pc, #80]	; (8005cb0 <HAL_GPIO_Init+0x354>)
 8005c5e:	69bb      	ldr	r3, [r7, #24]
 8005c60:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8005c62:	69fb      	ldr	r3, [r7, #28]
 8005c64:	3301      	adds	r3, #1
 8005c66:	61fb      	str	r3, [r7, #28]
 8005c68:	69fb      	ldr	r3, [r7, #28]
 8005c6a:	2b0f      	cmp	r3, #15
 8005c6c:	f67f ae86 	bls.w	800597c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8005c70:	bf00      	nop
 8005c72:	bf00      	nop
 8005c74:	3724      	adds	r7, #36	; 0x24
 8005c76:	46bd      	mov	sp, r7
 8005c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7c:	4770      	bx	lr
 8005c7e:	bf00      	nop
 8005c80:	40023800 	.word	0x40023800
 8005c84:	40013800 	.word	0x40013800
 8005c88:	40020000 	.word	0x40020000
 8005c8c:	40020400 	.word	0x40020400
 8005c90:	40020800 	.word	0x40020800
 8005c94:	40020c00 	.word	0x40020c00
 8005c98:	40021000 	.word	0x40021000
 8005c9c:	40021400 	.word	0x40021400
 8005ca0:	40021800 	.word	0x40021800
 8005ca4:	40021c00 	.word	0x40021c00
 8005ca8:	40022000 	.word	0x40022000
 8005cac:	40022400 	.word	0x40022400
 8005cb0:	40013c00 	.word	0x40013c00

08005cb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	b083      	sub	sp, #12
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
 8005cbc:	460b      	mov	r3, r1
 8005cbe:	807b      	strh	r3, [r7, #2]
 8005cc0:	4613      	mov	r3, r2
 8005cc2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005cc4:	787b      	ldrb	r3, [r7, #1]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d003      	beq.n	8005cd2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005cca:	887a      	ldrh	r2, [r7, #2]
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8005cd0:	e003      	b.n	8005cda <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8005cd2:	887b      	ldrh	r3, [r7, #2]
 8005cd4:	041a      	lsls	r2, r3, #16
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	619a      	str	r2, [r3, #24]
}
 8005cda:	bf00      	nop
 8005cdc:	370c      	adds	r7, #12
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce4:	4770      	bx	lr
	...

08005ce8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b082      	sub	sp, #8
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d101      	bne.n	8005cfa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005cf6:	2301      	movs	r3, #1
 8005cf8:	e07f      	b.n	8005dfa <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d00:	b2db      	uxtb	r3, r3
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d106      	bne.n	8005d14 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2200      	movs	r2, #0
 8005d0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005d0e:	6878      	ldr	r0, [r7, #4]
 8005d10:	f000 f87a 	bl	8005e08 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2224      	movs	r2, #36	; 0x24
 8005d18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	681a      	ldr	r2, [r3, #0]
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f022 0201 	bic.w	r2, r2, #1
 8005d2a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	685a      	ldr	r2, [r3, #4]
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005d38:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	689a      	ldr	r2, [r3, #8]
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005d48:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	68db      	ldr	r3, [r3, #12]
 8005d4e:	2b01      	cmp	r3, #1
 8005d50:	d107      	bne.n	8005d62 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	689a      	ldr	r2, [r3, #8]
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005d5e:	609a      	str	r2, [r3, #8]
 8005d60:	e006      	b.n	8005d70 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	689a      	ldr	r2, [r3, #8]
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005d6e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	68db      	ldr	r3, [r3, #12]
 8005d74:	2b02      	cmp	r3, #2
 8005d76:	d104      	bne.n	8005d82 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005d80:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	6859      	ldr	r1, [r3, #4]
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681a      	ldr	r2, [r3, #0]
 8005d8c:	4b1d      	ldr	r3, [pc, #116]	; (8005e04 <HAL_I2C_Init+0x11c>)
 8005d8e:	430b      	orrs	r3, r1
 8005d90:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	68da      	ldr	r2, [r3, #12]
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005da0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	691a      	ldr	r2, [r3, #16]
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	695b      	ldr	r3, [r3, #20]
 8005daa:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	699b      	ldr	r3, [r3, #24]
 8005db2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	430a      	orrs	r2, r1
 8005dba:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	69d9      	ldr	r1, [r3, #28]
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6a1a      	ldr	r2, [r3, #32]
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	430a      	orrs	r2, r1
 8005dca:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	681a      	ldr	r2, [r3, #0]
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f042 0201 	orr.w	r2, r2, #1
 8005dda:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2200      	movs	r2, #0
 8005de0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2220      	movs	r2, #32
 8005de6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2200      	movs	r2, #0
 8005dee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2200      	movs	r2, #0
 8005df4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005df8:	2300      	movs	r3, #0
}
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	3708      	adds	r7, #8
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	bd80      	pop	{r7, pc}
 8005e02:	bf00      	nop
 8005e04:	02008000 	.word	0x02008000

08005e08 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8005e08:	b480      	push	{r7}
 8005e0a:	b083      	sub	sp, #12
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8005e10:	bf00      	nop
 8005e12:	370c      	adds	r7, #12
 8005e14:	46bd      	mov	sp, r7
 8005e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1a:	4770      	bx	lr

08005e1c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b088      	sub	sp, #32
 8005e20:	af02      	add	r7, sp, #8
 8005e22:	60f8      	str	r0, [r7, #12]
 8005e24:	4608      	mov	r0, r1
 8005e26:	4611      	mov	r1, r2
 8005e28:	461a      	mov	r2, r3
 8005e2a:	4603      	mov	r3, r0
 8005e2c:	817b      	strh	r3, [r7, #10]
 8005e2e:	460b      	mov	r3, r1
 8005e30:	813b      	strh	r3, [r7, #8]
 8005e32:	4613      	mov	r3, r2
 8005e34:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e3c:	b2db      	uxtb	r3, r3
 8005e3e:	2b20      	cmp	r3, #32
 8005e40:	f040 80f9 	bne.w	8006036 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e44:	6a3b      	ldr	r3, [r7, #32]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d002      	beq.n	8005e50 <HAL_I2C_Mem_Write+0x34>
 8005e4a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d105      	bne.n	8005e5c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e56:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005e58:	2301      	movs	r3, #1
 8005e5a:	e0ed      	b.n	8006038 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005e62:	2b01      	cmp	r3, #1
 8005e64:	d101      	bne.n	8005e6a <HAL_I2C_Mem_Write+0x4e>
 8005e66:	2302      	movs	r3, #2
 8005e68:	e0e6      	b.n	8006038 <HAL_I2C_Mem_Write+0x21c>
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	2201      	movs	r2, #1
 8005e6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005e72:	f7fd faf7 	bl	8003464 <HAL_GetTick>
 8005e76:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005e78:	697b      	ldr	r3, [r7, #20]
 8005e7a:	9300      	str	r3, [sp, #0]
 8005e7c:	2319      	movs	r3, #25
 8005e7e:	2201      	movs	r2, #1
 8005e80:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005e84:	68f8      	ldr	r0, [r7, #12]
 8005e86:	f000 fac3 	bl	8006410 <I2C_WaitOnFlagUntilTimeout>
 8005e8a:	4603      	mov	r3, r0
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d001      	beq.n	8005e94 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8005e90:	2301      	movs	r3, #1
 8005e92:	e0d1      	b.n	8006038 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	2221      	movs	r2, #33	; 0x21
 8005e98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	2240      	movs	r2, #64	; 0x40
 8005ea0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	6a3a      	ldr	r2, [r7, #32]
 8005eae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005eb4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	2200      	movs	r2, #0
 8005eba:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005ebc:	88f8      	ldrh	r0, [r7, #6]
 8005ebe:	893a      	ldrh	r2, [r7, #8]
 8005ec0:	8979      	ldrh	r1, [r7, #10]
 8005ec2:	697b      	ldr	r3, [r7, #20]
 8005ec4:	9301      	str	r3, [sp, #4]
 8005ec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ec8:	9300      	str	r3, [sp, #0]
 8005eca:	4603      	mov	r3, r0
 8005ecc:	68f8      	ldr	r0, [r7, #12]
 8005ece:	f000 f9d3 	bl	8006278 <I2C_RequestMemoryWrite>
 8005ed2:	4603      	mov	r3, r0
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d005      	beq.n	8005ee4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	2200      	movs	r2, #0
 8005edc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005ee0:	2301      	movs	r3, #1
 8005ee2:	e0a9      	b.n	8006038 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ee8:	b29b      	uxth	r3, r3
 8005eea:	2bff      	cmp	r3, #255	; 0xff
 8005eec:	d90e      	bls.n	8005f0c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	22ff      	movs	r2, #255	; 0xff
 8005ef2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ef8:	b2da      	uxtb	r2, r3
 8005efa:	8979      	ldrh	r1, [r7, #10]
 8005efc:	2300      	movs	r3, #0
 8005efe:	9300      	str	r3, [sp, #0]
 8005f00:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005f04:	68f8      	ldr	r0, [r7, #12]
 8005f06:	f000 fc2b 	bl	8006760 <I2C_TransferConfig>
 8005f0a:	e00f      	b.n	8005f2c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f10:	b29a      	uxth	r2, r3
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f1a:	b2da      	uxtb	r2, r3
 8005f1c:	8979      	ldrh	r1, [r7, #10]
 8005f1e:	2300      	movs	r3, #0
 8005f20:	9300      	str	r3, [sp, #0]
 8005f22:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005f26:	68f8      	ldr	r0, [r7, #12]
 8005f28:	f000 fc1a 	bl	8006760 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005f2c:	697a      	ldr	r2, [r7, #20]
 8005f2e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005f30:	68f8      	ldr	r0, [r7, #12]
 8005f32:	f000 faad 	bl	8006490 <I2C_WaitOnTXISFlagUntilTimeout>
 8005f36:	4603      	mov	r3, r0
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d001      	beq.n	8005f40 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8005f3c:	2301      	movs	r3, #1
 8005f3e:	e07b      	b.n	8006038 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f44:	781a      	ldrb	r2, [r3, #0]
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f50:	1c5a      	adds	r2, r3, #1
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f5a:	b29b      	uxth	r3, r3
 8005f5c:	3b01      	subs	r3, #1
 8005f5e:	b29a      	uxth	r2, r3
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f68:	3b01      	subs	r3, #1
 8005f6a:	b29a      	uxth	r2, r3
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f74:	b29b      	uxth	r3, r3
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d034      	beq.n	8005fe4 <HAL_I2C_Mem_Write+0x1c8>
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d130      	bne.n	8005fe4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005f82:	697b      	ldr	r3, [r7, #20]
 8005f84:	9300      	str	r3, [sp, #0]
 8005f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f88:	2200      	movs	r2, #0
 8005f8a:	2180      	movs	r1, #128	; 0x80
 8005f8c:	68f8      	ldr	r0, [r7, #12]
 8005f8e:	f000 fa3f 	bl	8006410 <I2C_WaitOnFlagUntilTimeout>
 8005f92:	4603      	mov	r3, r0
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d001      	beq.n	8005f9c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8005f98:	2301      	movs	r3, #1
 8005f9a:	e04d      	b.n	8006038 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fa0:	b29b      	uxth	r3, r3
 8005fa2:	2bff      	cmp	r3, #255	; 0xff
 8005fa4:	d90e      	bls.n	8005fc4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	22ff      	movs	r2, #255	; 0xff
 8005faa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fb0:	b2da      	uxtb	r2, r3
 8005fb2:	8979      	ldrh	r1, [r7, #10]
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	9300      	str	r3, [sp, #0]
 8005fb8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005fbc:	68f8      	ldr	r0, [r7, #12]
 8005fbe:	f000 fbcf 	bl	8006760 <I2C_TransferConfig>
 8005fc2:	e00f      	b.n	8005fe4 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fc8:	b29a      	uxth	r2, r3
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fd2:	b2da      	uxtb	r2, r3
 8005fd4:	8979      	ldrh	r1, [r7, #10]
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	9300      	str	r3, [sp, #0]
 8005fda:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005fde:	68f8      	ldr	r0, [r7, #12]
 8005fe0:	f000 fbbe 	bl	8006760 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fe8:	b29b      	uxth	r3, r3
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d19e      	bne.n	8005f2c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005fee:	697a      	ldr	r2, [r7, #20]
 8005ff0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005ff2:	68f8      	ldr	r0, [r7, #12]
 8005ff4:	f000 fa8c 	bl	8006510 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005ff8:	4603      	mov	r3, r0
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d001      	beq.n	8006002 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8005ffe:	2301      	movs	r3, #1
 8006000:	e01a      	b.n	8006038 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	2220      	movs	r2, #32
 8006008:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	6859      	ldr	r1, [r3, #4]
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681a      	ldr	r2, [r3, #0]
 8006014:	4b0a      	ldr	r3, [pc, #40]	; (8006040 <HAL_I2C_Mem_Write+0x224>)
 8006016:	400b      	ands	r3, r1
 8006018:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	2220      	movs	r2, #32
 800601e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	2200      	movs	r2, #0
 8006026:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	2200      	movs	r2, #0
 800602e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006032:	2300      	movs	r3, #0
 8006034:	e000      	b.n	8006038 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8006036:	2302      	movs	r3, #2
  }
}
 8006038:	4618      	mov	r0, r3
 800603a:	3718      	adds	r7, #24
 800603c:	46bd      	mov	sp, r7
 800603e:	bd80      	pop	{r7, pc}
 8006040:	fe00e800 	.word	0xfe00e800

08006044 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b088      	sub	sp, #32
 8006048:	af02      	add	r7, sp, #8
 800604a:	60f8      	str	r0, [r7, #12]
 800604c:	4608      	mov	r0, r1
 800604e:	4611      	mov	r1, r2
 8006050:	461a      	mov	r2, r3
 8006052:	4603      	mov	r3, r0
 8006054:	817b      	strh	r3, [r7, #10]
 8006056:	460b      	mov	r3, r1
 8006058:	813b      	strh	r3, [r7, #8]
 800605a:	4613      	mov	r3, r2
 800605c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006064:	b2db      	uxtb	r3, r3
 8006066:	2b20      	cmp	r3, #32
 8006068:	f040 80fd 	bne.w	8006266 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800606c:	6a3b      	ldr	r3, [r7, #32]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d002      	beq.n	8006078 <HAL_I2C_Mem_Read+0x34>
 8006072:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006074:	2b00      	cmp	r3, #0
 8006076:	d105      	bne.n	8006084 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800607e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006080:	2301      	movs	r3, #1
 8006082:	e0f1      	b.n	8006268 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800608a:	2b01      	cmp	r3, #1
 800608c:	d101      	bne.n	8006092 <HAL_I2C_Mem_Read+0x4e>
 800608e:	2302      	movs	r3, #2
 8006090:	e0ea      	b.n	8006268 <HAL_I2C_Mem_Read+0x224>
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	2201      	movs	r2, #1
 8006096:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800609a:	f7fd f9e3 	bl	8003464 <HAL_GetTick>
 800609e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80060a0:	697b      	ldr	r3, [r7, #20]
 80060a2:	9300      	str	r3, [sp, #0]
 80060a4:	2319      	movs	r3, #25
 80060a6:	2201      	movs	r2, #1
 80060a8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80060ac:	68f8      	ldr	r0, [r7, #12]
 80060ae:	f000 f9af 	bl	8006410 <I2C_WaitOnFlagUntilTimeout>
 80060b2:	4603      	mov	r3, r0
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d001      	beq.n	80060bc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80060b8:	2301      	movs	r3, #1
 80060ba:	e0d5      	b.n	8006268 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	2222      	movs	r2, #34	; 0x22
 80060c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	2240      	movs	r2, #64	; 0x40
 80060c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	2200      	movs	r2, #0
 80060d0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	6a3a      	ldr	r2, [r7, #32]
 80060d6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80060dc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	2200      	movs	r2, #0
 80060e2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80060e4:	88f8      	ldrh	r0, [r7, #6]
 80060e6:	893a      	ldrh	r2, [r7, #8]
 80060e8:	8979      	ldrh	r1, [r7, #10]
 80060ea:	697b      	ldr	r3, [r7, #20]
 80060ec:	9301      	str	r3, [sp, #4]
 80060ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060f0:	9300      	str	r3, [sp, #0]
 80060f2:	4603      	mov	r3, r0
 80060f4:	68f8      	ldr	r0, [r7, #12]
 80060f6:	f000 f913 	bl	8006320 <I2C_RequestMemoryRead>
 80060fa:	4603      	mov	r3, r0
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d005      	beq.n	800610c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	2200      	movs	r2, #0
 8006104:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006108:	2301      	movs	r3, #1
 800610a:	e0ad      	b.n	8006268 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006110:	b29b      	uxth	r3, r3
 8006112:	2bff      	cmp	r3, #255	; 0xff
 8006114:	d90e      	bls.n	8006134 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	22ff      	movs	r2, #255	; 0xff
 800611a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006120:	b2da      	uxtb	r2, r3
 8006122:	8979      	ldrh	r1, [r7, #10]
 8006124:	4b52      	ldr	r3, [pc, #328]	; (8006270 <HAL_I2C_Mem_Read+0x22c>)
 8006126:	9300      	str	r3, [sp, #0]
 8006128:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800612c:	68f8      	ldr	r0, [r7, #12]
 800612e:	f000 fb17 	bl	8006760 <I2C_TransferConfig>
 8006132:	e00f      	b.n	8006154 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006138:	b29a      	uxth	r2, r3
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006142:	b2da      	uxtb	r2, r3
 8006144:	8979      	ldrh	r1, [r7, #10]
 8006146:	4b4a      	ldr	r3, [pc, #296]	; (8006270 <HAL_I2C_Mem_Read+0x22c>)
 8006148:	9300      	str	r3, [sp, #0]
 800614a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800614e:	68f8      	ldr	r0, [r7, #12]
 8006150:	f000 fb06 	bl	8006760 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8006154:	697b      	ldr	r3, [r7, #20]
 8006156:	9300      	str	r3, [sp, #0]
 8006158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800615a:	2200      	movs	r2, #0
 800615c:	2104      	movs	r1, #4
 800615e:	68f8      	ldr	r0, [r7, #12]
 8006160:	f000 f956 	bl	8006410 <I2C_WaitOnFlagUntilTimeout>
 8006164:	4603      	mov	r3, r0
 8006166:	2b00      	cmp	r3, #0
 8006168:	d001      	beq.n	800616e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800616a:	2301      	movs	r3, #1
 800616c:	e07c      	b.n	8006268 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006178:	b2d2      	uxtb	r2, r2
 800617a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006180:	1c5a      	adds	r2, r3, #1
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800618a:	3b01      	subs	r3, #1
 800618c:	b29a      	uxth	r2, r3
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006196:	b29b      	uxth	r3, r3
 8006198:	3b01      	subs	r3, #1
 800619a:	b29a      	uxth	r2, r3
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061a4:	b29b      	uxth	r3, r3
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d034      	beq.n	8006214 <HAL_I2C_Mem_Read+0x1d0>
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d130      	bne.n	8006214 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80061b2:	697b      	ldr	r3, [r7, #20]
 80061b4:	9300      	str	r3, [sp, #0]
 80061b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061b8:	2200      	movs	r2, #0
 80061ba:	2180      	movs	r1, #128	; 0x80
 80061bc:	68f8      	ldr	r0, [r7, #12]
 80061be:	f000 f927 	bl	8006410 <I2C_WaitOnFlagUntilTimeout>
 80061c2:	4603      	mov	r3, r0
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d001      	beq.n	80061cc <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80061c8:	2301      	movs	r3, #1
 80061ca:	e04d      	b.n	8006268 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061d0:	b29b      	uxth	r3, r3
 80061d2:	2bff      	cmp	r3, #255	; 0xff
 80061d4:	d90e      	bls.n	80061f4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	22ff      	movs	r2, #255	; 0xff
 80061da:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061e0:	b2da      	uxtb	r2, r3
 80061e2:	8979      	ldrh	r1, [r7, #10]
 80061e4:	2300      	movs	r3, #0
 80061e6:	9300      	str	r3, [sp, #0]
 80061e8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80061ec:	68f8      	ldr	r0, [r7, #12]
 80061ee:	f000 fab7 	bl	8006760 <I2C_TransferConfig>
 80061f2:	e00f      	b.n	8006214 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061f8:	b29a      	uxth	r2, r3
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006202:	b2da      	uxtb	r2, r3
 8006204:	8979      	ldrh	r1, [r7, #10]
 8006206:	2300      	movs	r3, #0
 8006208:	9300      	str	r3, [sp, #0]
 800620a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800620e:	68f8      	ldr	r0, [r7, #12]
 8006210:	f000 faa6 	bl	8006760 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006218:	b29b      	uxth	r3, r3
 800621a:	2b00      	cmp	r3, #0
 800621c:	d19a      	bne.n	8006154 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800621e:	697a      	ldr	r2, [r7, #20]
 8006220:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006222:	68f8      	ldr	r0, [r7, #12]
 8006224:	f000 f974 	bl	8006510 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006228:	4603      	mov	r3, r0
 800622a:	2b00      	cmp	r3, #0
 800622c:	d001      	beq.n	8006232 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800622e:	2301      	movs	r3, #1
 8006230:	e01a      	b.n	8006268 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	2220      	movs	r2, #32
 8006238:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	6859      	ldr	r1, [r3, #4]
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681a      	ldr	r2, [r3, #0]
 8006244:	4b0b      	ldr	r3, [pc, #44]	; (8006274 <HAL_I2C_Mem_Read+0x230>)
 8006246:	400b      	ands	r3, r1
 8006248:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	2220      	movs	r2, #32
 800624e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	2200      	movs	r2, #0
 8006256:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	2200      	movs	r2, #0
 800625e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006262:	2300      	movs	r3, #0
 8006264:	e000      	b.n	8006268 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8006266:	2302      	movs	r3, #2
  }
}
 8006268:	4618      	mov	r0, r3
 800626a:	3718      	adds	r7, #24
 800626c:	46bd      	mov	sp, r7
 800626e:	bd80      	pop	{r7, pc}
 8006270:	80002400 	.word	0x80002400
 8006274:	fe00e800 	.word	0xfe00e800

08006278 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b086      	sub	sp, #24
 800627c:	af02      	add	r7, sp, #8
 800627e:	60f8      	str	r0, [r7, #12]
 8006280:	4608      	mov	r0, r1
 8006282:	4611      	mov	r1, r2
 8006284:	461a      	mov	r2, r3
 8006286:	4603      	mov	r3, r0
 8006288:	817b      	strh	r3, [r7, #10]
 800628a:	460b      	mov	r3, r1
 800628c:	813b      	strh	r3, [r7, #8]
 800628e:	4613      	mov	r3, r2
 8006290:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006292:	88fb      	ldrh	r3, [r7, #6]
 8006294:	b2da      	uxtb	r2, r3
 8006296:	8979      	ldrh	r1, [r7, #10]
 8006298:	4b20      	ldr	r3, [pc, #128]	; (800631c <I2C_RequestMemoryWrite+0xa4>)
 800629a:	9300      	str	r3, [sp, #0]
 800629c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80062a0:	68f8      	ldr	r0, [r7, #12]
 80062a2:	f000 fa5d 	bl	8006760 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80062a6:	69fa      	ldr	r2, [r7, #28]
 80062a8:	69b9      	ldr	r1, [r7, #24]
 80062aa:	68f8      	ldr	r0, [r7, #12]
 80062ac:	f000 f8f0 	bl	8006490 <I2C_WaitOnTXISFlagUntilTimeout>
 80062b0:	4603      	mov	r3, r0
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d001      	beq.n	80062ba <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80062b6:	2301      	movs	r3, #1
 80062b8:	e02c      	b.n	8006314 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80062ba:	88fb      	ldrh	r3, [r7, #6]
 80062bc:	2b01      	cmp	r3, #1
 80062be:	d105      	bne.n	80062cc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80062c0:	893b      	ldrh	r3, [r7, #8]
 80062c2:	b2da      	uxtb	r2, r3
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	629a      	str	r2, [r3, #40]	; 0x28
 80062ca:	e015      	b.n	80062f8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80062cc:	893b      	ldrh	r3, [r7, #8]
 80062ce:	0a1b      	lsrs	r3, r3, #8
 80062d0:	b29b      	uxth	r3, r3
 80062d2:	b2da      	uxtb	r2, r3
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80062da:	69fa      	ldr	r2, [r7, #28]
 80062dc:	69b9      	ldr	r1, [r7, #24]
 80062de:	68f8      	ldr	r0, [r7, #12]
 80062e0:	f000 f8d6 	bl	8006490 <I2C_WaitOnTXISFlagUntilTimeout>
 80062e4:	4603      	mov	r3, r0
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d001      	beq.n	80062ee <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80062ea:	2301      	movs	r3, #1
 80062ec:	e012      	b.n	8006314 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80062ee:	893b      	ldrh	r3, [r7, #8]
 80062f0:	b2da      	uxtb	r2, r3
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80062f8:	69fb      	ldr	r3, [r7, #28]
 80062fa:	9300      	str	r3, [sp, #0]
 80062fc:	69bb      	ldr	r3, [r7, #24]
 80062fe:	2200      	movs	r2, #0
 8006300:	2180      	movs	r1, #128	; 0x80
 8006302:	68f8      	ldr	r0, [r7, #12]
 8006304:	f000 f884 	bl	8006410 <I2C_WaitOnFlagUntilTimeout>
 8006308:	4603      	mov	r3, r0
 800630a:	2b00      	cmp	r3, #0
 800630c:	d001      	beq.n	8006312 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800630e:	2301      	movs	r3, #1
 8006310:	e000      	b.n	8006314 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8006312:	2300      	movs	r3, #0
}
 8006314:	4618      	mov	r0, r3
 8006316:	3710      	adds	r7, #16
 8006318:	46bd      	mov	sp, r7
 800631a:	bd80      	pop	{r7, pc}
 800631c:	80002000 	.word	0x80002000

08006320 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b086      	sub	sp, #24
 8006324:	af02      	add	r7, sp, #8
 8006326:	60f8      	str	r0, [r7, #12]
 8006328:	4608      	mov	r0, r1
 800632a:	4611      	mov	r1, r2
 800632c:	461a      	mov	r2, r3
 800632e:	4603      	mov	r3, r0
 8006330:	817b      	strh	r3, [r7, #10]
 8006332:	460b      	mov	r3, r1
 8006334:	813b      	strh	r3, [r7, #8]
 8006336:	4613      	mov	r3, r2
 8006338:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800633a:	88fb      	ldrh	r3, [r7, #6]
 800633c:	b2da      	uxtb	r2, r3
 800633e:	8979      	ldrh	r1, [r7, #10]
 8006340:	4b20      	ldr	r3, [pc, #128]	; (80063c4 <I2C_RequestMemoryRead+0xa4>)
 8006342:	9300      	str	r3, [sp, #0]
 8006344:	2300      	movs	r3, #0
 8006346:	68f8      	ldr	r0, [r7, #12]
 8006348:	f000 fa0a 	bl	8006760 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800634c:	69fa      	ldr	r2, [r7, #28]
 800634e:	69b9      	ldr	r1, [r7, #24]
 8006350:	68f8      	ldr	r0, [r7, #12]
 8006352:	f000 f89d 	bl	8006490 <I2C_WaitOnTXISFlagUntilTimeout>
 8006356:	4603      	mov	r3, r0
 8006358:	2b00      	cmp	r3, #0
 800635a:	d001      	beq.n	8006360 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800635c:	2301      	movs	r3, #1
 800635e:	e02c      	b.n	80063ba <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006360:	88fb      	ldrh	r3, [r7, #6]
 8006362:	2b01      	cmp	r3, #1
 8006364:	d105      	bne.n	8006372 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006366:	893b      	ldrh	r3, [r7, #8]
 8006368:	b2da      	uxtb	r2, r3
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	629a      	str	r2, [r3, #40]	; 0x28
 8006370:	e015      	b.n	800639e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006372:	893b      	ldrh	r3, [r7, #8]
 8006374:	0a1b      	lsrs	r3, r3, #8
 8006376:	b29b      	uxth	r3, r3
 8006378:	b2da      	uxtb	r2, r3
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006380:	69fa      	ldr	r2, [r7, #28]
 8006382:	69b9      	ldr	r1, [r7, #24]
 8006384:	68f8      	ldr	r0, [r7, #12]
 8006386:	f000 f883 	bl	8006490 <I2C_WaitOnTXISFlagUntilTimeout>
 800638a:	4603      	mov	r3, r0
 800638c:	2b00      	cmp	r3, #0
 800638e:	d001      	beq.n	8006394 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8006390:	2301      	movs	r3, #1
 8006392:	e012      	b.n	80063ba <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006394:	893b      	ldrh	r3, [r7, #8]
 8006396:	b2da      	uxtb	r2, r3
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800639e:	69fb      	ldr	r3, [r7, #28]
 80063a0:	9300      	str	r3, [sp, #0]
 80063a2:	69bb      	ldr	r3, [r7, #24]
 80063a4:	2200      	movs	r2, #0
 80063a6:	2140      	movs	r1, #64	; 0x40
 80063a8:	68f8      	ldr	r0, [r7, #12]
 80063aa:	f000 f831 	bl	8006410 <I2C_WaitOnFlagUntilTimeout>
 80063ae:	4603      	mov	r3, r0
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d001      	beq.n	80063b8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80063b4:	2301      	movs	r3, #1
 80063b6:	e000      	b.n	80063ba <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80063b8:	2300      	movs	r3, #0
}
 80063ba:	4618      	mov	r0, r3
 80063bc:	3710      	adds	r7, #16
 80063be:	46bd      	mov	sp, r7
 80063c0:	bd80      	pop	{r7, pc}
 80063c2:	bf00      	nop
 80063c4:	80002000 	.word	0x80002000

080063c8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80063c8:	b480      	push	{r7}
 80063ca:	b083      	sub	sp, #12
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	699b      	ldr	r3, [r3, #24]
 80063d6:	f003 0302 	and.w	r3, r3, #2
 80063da:	2b02      	cmp	r3, #2
 80063dc:	d103      	bne.n	80063e6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	2200      	movs	r2, #0
 80063e4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	699b      	ldr	r3, [r3, #24]
 80063ec:	f003 0301 	and.w	r3, r3, #1
 80063f0:	2b01      	cmp	r3, #1
 80063f2:	d007      	beq.n	8006404 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	699a      	ldr	r2, [r3, #24]
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f042 0201 	orr.w	r2, r2, #1
 8006402:	619a      	str	r2, [r3, #24]
  }
}
 8006404:	bf00      	nop
 8006406:	370c      	adds	r7, #12
 8006408:	46bd      	mov	sp, r7
 800640a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640e:	4770      	bx	lr

08006410 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006410:	b580      	push	{r7, lr}
 8006412:	b084      	sub	sp, #16
 8006414:	af00      	add	r7, sp, #0
 8006416:	60f8      	str	r0, [r7, #12]
 8006418:	60b9      	str	r1, [r7, #8]
 800641a:	603b      	str	r3, [r7, #0]
 800641c:	4613      	mov	r3, r2
 800641e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006420:	e022      	b.n	8006468 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006428:	d01e      	beq.n	8006468 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800642a:	f7fd f81b 	bl	8003464 <HAL_GetTick>
 800642e:	4602      	mov	r2, r0
 8006430:	69bb      	ldr	r3, [r7, #24]
 8006432:	1ad3      	subs	r3, r2, r3
 8006434:	683a      	ldr	r2, [r7, #0]
 8006436:	429a      	cmp	r2, r3
 8006438:	d302      	bcc.n	8006440 <I2C_WaitOnFlagUntilTimeout+0x30>
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d113      	bne.n	8006468 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006444:	f043 0220 	orr.w	r2, r3, #32
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	2220      	movs	r2, #32
 8006450:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	2200      	movs	r2, #0
 8006458:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	2200      	movs	r2, #0
 8006460:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8006464:	2301      	movs	r3, #1
 8006466:	e00f      	b.n	8006488 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	699a      	ldr	r2, [r3, #24]
 800646e:	68bb      	ldr	r3, [r7, #8]
 8006470:	4013      	ands	r3, r2
 8006472:	68ba      	ldr	r2, [r7, #8]
 8006474:	429a      	cmp	r2, r3
 8006476:	bf0c      	ite	eq
 8006478:	2301      	moveq	r3, #1
 800647a:	2300      	movne	r3, #0
 800647c:	b2db      	uxtb	r3, r3
 800647e:	461a      	mov	r2, r3
 8006480:	79fb      	ldrb	r3, [r7, #7]
 8006482:	429a      	cmp	r2, r3
 8006484:	d0cd      	beq.n	8006422 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006486:	2300      	movs	r3, #0
}
 8006488:	4618      	mov	r0, r3
 800648a:	3710      	adds	r7, #16
 800648c:	46bd      	mov	sp, r7
 800648e:	bd80      	pop	{r7, pc}

08006490 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006490:	b580      	push	{r7, lr}
 8006492:	b084      	sub	sp, #16
 8006494:	af00      	add	r7, sp, #0
 8006496:	60f8      	str	r0, [r7, #12]
 8006498:	60b9      	str	r1, [r7, #8]
 800649a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800649c:	e02c      	b.n	80064f8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800649e:	687a      	ldr	r2, [r7, #4]
 80064a0:	68b9      	ldr	r1, [r7, #8]
 80064a2:	68f8      	ldr	r0, [r7, #12]
 80064a4:	f000 f870 	bl	8006588 <I2C_IsErrorOccurred>
 80064a8:	4603      	mov	r3, r0
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d001      	beq.n	80064b2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80064ae:	2301      	movs	r3, #1
 80064b0:	e02a      	b.n	8006508 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80064b2:	68bb      	ldr	r3, [r7, #8]
 80064b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064b8:	d01e      	beq.n	80064f8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064ba:	f7fc ffd3 	bl	8003464 <HAL_GetTick>
 80064be:	4602      	mov	r2, r0
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	1ad3      	subs	r3, r2, r3
 80064c4:	68ba      	ldr	r2, [r7, #8]
 80064c6:	429a      	cmp	r2, r3
 80064c8:	d302      	bcc.n	80064d0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80064ca:	68bb      	ldr	r3, [r7, #8]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d113      	bne.n	80064f8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064d4:	f043 0220 	orr.w	r2, r3, #32
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	2220      	movs	r2, #32
 80064e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	2200      	movs	r2, #0
 80064e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	2200      	movs	r2, #0
 80064f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80064f4:	2301      	movs	r3, #1
 80064f6:	e007      	b.n	8006508 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	699b      	ldr	r3, [r3, #24]
 80064fe:	f003 0302 	and.w	r3, r3, #2
 8006502:	2b02      	cmp	r3, #2
 8006504:	d1cb      	bne.n	800649e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006506:	2300      	movs	r3, #0
}
 8006508:	4618      	mov	r0, r3
 800650a:	3710      	adds	r7, #16
 800650c:	46bd      	mov	sp, r7
 800650e:	bd80      	pop	{r7, pc}

08006510 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b084      	sub	sp, #16
 8006514:	af00      	add	r7, sp, #0
 8006516:	60f8      	str	r0, [r7, #12]
 8006518:	60b9      	str	r1, [r7, #8]
 800651a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800651c:	e028      	b.n	8006570 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800651e:	687a      	ldr	r2, [r7, #4]
 8006520:	68b9      	ldr	r1, [r7, #8]
 8006522:	68f8      	ldr	r0, [r7, #12]
 8006524:	f000 f830 	bl	8006588 <I2C_IsErrorOccurred>
 8006528:	4603      	mov	r3, r0
 800652a:	2b00      	cmp	r3, #0
 800652c:	d001      	beq.n	8006532 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800652e:	2301      	movs	r3, #1
 8006530:	e026      	b.n	8006580 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006532:	f7fc ff97 	bl	8003464 <HAL_GetTick>
 8006536:	4602      	mov	r2, r0
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	1ad3      	subs	r3, r2, r3
 800653c:	68ba      	ldr	r2, [r7, #8]
 800653e:	429a      	cmp	r2, r3
 8006540:	d302      	bcc.n	8006548 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006542:	68bb      	ldr	r3, [r7, #8]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d113      	bne.n	8006570 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800654c:	f043 0220 	orr.w	r2, r3, #32
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	2220      	movs	r2, #32
 8006558:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	2200      	movs	r2, #0
 8006560:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	2200      	movs	r2, #0
 8006568:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800656c:	2301      	movs	r3, #1
 800656e:	e007      	b.n	8006580 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	699b      	ldr	r3, [r3, #24]
 8006576:	f003 0320 	and.w	r3, r3, #32
 800657a:	2b20      	cmp	r3, #32
 800657c:	d1cf      	bne.n	800651e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800657e:	2300      	movs	r3, #0
}
 8006580:	4618      	mov	r0, r3
 8006582:	3710      	adds	r7, #16
 8006584:	46bd      	mov	sp, r7
 8006586:	bd80      	pop	{r7, pc}

08006588 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006588:	b580      	push	{r7, lr}
 800658a:	b08a      	sub	sp, #40	; 0x28
 800658c:	af00      	add	r7, sp, #0
 800658e:	60f8      	str	r0, [r7, #12]
 8006590:	60b9      	str	r1, [r7, #8]
 8006592:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006594:	2300      	movs	r3, #0
 8006596:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	699b      	ldr	r3, [r3, #24]
 80065a0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80065a2:	2300      	movs	r3, #0
 80065a4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80065aa:	69bb      	ldr	r3, [r7, #24]
 80065ac:	f003 0310 	and.w	r3, r3, #16
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d075      	beq.n	80066a0 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	2210      	movs	r2, #16
 80065ba:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80065bc:	e056      	b.n	800666c <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80065be:	68bb      	ldr	r3, [r7, #8]
 80065c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065c4:	d052      	beq.n	800666c <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80065c6:	f7fc ff4d 	bl	8003464 <HAL_GetTick>
 80065ca:	4602      	mov	r2, r0
 80065cc:	69fb      	ldr	r3, [r7, #28]
 80065ce:	1ad3      	subs	r3, r2, r3
 80065d0:	68ba      	ldr	r2, [r7, #8]
 80065d2:	429a      	cmp	r2, r3
 80065d4:	d302      	bcc.n	80065dc <I2C_IsErrorOccurred+0x54>
 80065d6:	68bb      	ldr	r3, [r7, #8]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d147      	bne.n	800666c <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	685b      	ldr	r3, [r3, #4]
 80065e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80065e6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80065ee:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	699b      	ldr	r3, [r3, #24]
 80065f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80065fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80065fe:	d12e      	bne.n	800665e <I2C_IsErrorOccurred+0xd6>
 8006600:	697b      	ldr	r3, [r7, #20]
 8006602:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006606:	d02a      	beq.n	800665e <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8006608:	7cfb      	ldrb	r3, [r7, #19]
 800660a:	2b20      	cmp	r3, #32
 800660c:	d027      	beq.n	800665e <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	685a      	ldr	r2, [r3, #4]
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800661c:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800661e:	f7fc ff21 	bl	8003464 <HAL_GetTick>
 8006622:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006624:	e01b      	b.n	800665e <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006626:	f7fc ff1d 	bl	8003464 <HAL_GetTick>
 800662a:	4602      	mov	r2, r0
 800662c:	69fb      	ldr	r3, [r7, #28]
 800662e:	1ad3      	subs	r3, r2, r3
 8006630:	2b19      	cmp	r3, #25
 8006632:	d914      	bls.n	800665e <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006638:	f043 0220 	orr.w	r2, r3, #32
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	2220      	movs	r2, #32
 8006644:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	2200      	movs	r2, #0
 800664c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	2200      	movs	r2, #0
 8006654:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8006658:	2301      	movs	r3, #1
 800665a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	699b      	ldr	r3, [r3, #24]
 8006664:	f003 0320 	and.w	r3, r3, #32
 8006668:	2b20      	cmp	r3, #32
 800666a:	d1dc      	bne.n	8006626 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	699b      	ldr	r3, [r3, #24]
 8006672:	f003 0320 	and.w	r3, r3, #32
 8006676:	2b20      	cmp	r3, #32
 8006678:	d003      	beq.n	8006682 <I2C_IsErrorOccurred+0xfa>
 800667a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800667e:	2b00      	cmp	r3, #0
 8006680:	d09d      	beq.n	80065be <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006682:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006686:	2b00      	cmp	r3, #0
 8006688:	d103      	bne.n	8006692 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	2220      	movs	r2, #32
 8006690:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006692:	6a3b      	ldr	r3, [r7, #32]
 8006694:	f043 0304 	orr.w	r3, r3, #4
 8006698:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800669a:	2301      	movs	r3, #1
 800669c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	699b      	ldr	r3, [r3, #24]
 80066a6:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80066a8:	69bb      	ldr	r3, [r7, #24]
 80066aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d00b      	beq.n	80066ca <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80066b2:	6a3b      	ldr	r3, [r7, #32]
 80066b4:	f043 0301 	orr.w	r3, r3, #1
 80066b8:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80066c2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80066c4:	2301      	movs	r3, #1
 80066c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80066ca:	69bb      	ldr	r3, [r7, #24]
 80066cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d00b      	beq.n	80066ec <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80066d4:	6a3b      	ldr	r3, [r7, #32]
 80066d6:	f043 0308 	orr.w	r3, r3, #8
 80066da:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80066e4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80066e6:	2301      	movs	r3, #1
 80066e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80066ec:	69bb      	ldr	r3, [r7, #24]
 80066ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d00b      	beq.n	800670e <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80066f6:	6a3b      	ldr	r3, [r7, #32]
 80066f8:	f043 0302 	orr.w	r3, r3, #2
 80066fc:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006706:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006708:	2301      	movs	r3, #1
 800670a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800670e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006712:	2b00      	cmp	r3, #0
 8006714:	d01c      	beq.n	8006750 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006716:	68f8      	ldr	r0, [r7, #12]
 8006718:	f7ff fe56 	bl	80063c8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	6859      	ldr	r1, [r3, #4]
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681a      	ldr	r2, [r3, #0]
 8006726:	4b0d      	ldr	r3, [pc, #52]	; (800675c <I2C_IsErrorOccurred+0x1d4>)
 8006728:	400b      	ands	r3, r1
 800672a:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006730:	6a3b      	ldr	r3, [r7, #32]
 8006732:	431a      	orrs	r2, r3
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	2220      	movs	r2, #32
 800673c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	2200      	movs	r2, #0
 8006744:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	2200      	movs	r2, #0
 800674c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8006750:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006754:	4618      	mov	r0, r3
 8006756:	3728      	adds	r7, #40	; 0x28
 8006758:	46bd      	mov	sp, r7
 800675a:	bd80      	pop	{r7, pc}
 800675c:	fe00e800 	.word	0xfe00e800

08006760 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006760:	b480      	push	{r7}
 8006762:	b087      	sub	sp, #28
 8006764:	af00      	add	r7, sp, #0
 8006766:	60f8      	str	r0, [r7, #12]
 8006768:	607b      	str	r3, [r7, #4]
 800676a:	460b      	mov	r3, r1
 800676c:	817b      	strh	r3, [r7, #10]
 800676e:	4613      	mov	r3, r2
 8006770:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006772:	897b      	ldrh	r3, [r7, #10]
 8006774:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006778:	7a7b      	ldrb	r3, [r7, #9]
 800677a:	041b      	lsls	r3, r3, #16
 800677c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006780:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006786:	6a3b      	ldr	r3, [r7, #32]
 8006788:	4313      	orrs	r3, r2
 800678a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800678e:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	685a      	ldr	r2, [r3, #4]
 8006796:	6a3b      	ldr	r3, [r7, #32]
 8006798:	0d5b      	lsrs	r3, r3, #21
 800679a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800679e:	4b08      	ldr	r3, [pc, #32]	; (80067c0 <I2C_TransferConfig+0x60>)
 80067a0:	430b      	orrs	r3, r1
 80067a2:	43db      	mvns	r3, r3
 80067a4:	ea02 0103 	and.w	r1, r2, r3
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	697a      	ldr	r2, [r7, #20]
 80067ae:	430a      	orrs	r2, r1
 80067b0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80067b2:	bf00      	nop
 80067b4:	371c      	adds	r7, #28
 80067b6:	46bd      	mov	sp, r7
 80067b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067bc:	4770      	bx	lr
 80067be:	bf00      	nop
 80067c0:	03ff63ff 	.word	0x03ff63ff

080067c4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b086      	sub	sp, #24
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80067cc:	2300      	movs	r3, #0
 80067ce:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d101      	bne.n	80067da <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80067d6:	2301      	movs	r3, #1
 80067d8:	e291      	b.n	8006cfe <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f003 0301 	and.w	r3, r3, #1
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	f000 8087 	beq.w	80068f6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80067e8:	4b96      	ldr	r3, [pc, #600]	; (8006a44 <HAL_RCC_OscConfig+0x280>)
 80067ea:	689b      	ldr	r3, [r3, #8]
 80067ec:	f003 030c 	and.w	r3, r3, #12
 80067f0:	2b04      	cmp	r3, #4
 80067f2:	d00c      	beq.n	800680e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80067f4:	4b93      	ldr	r3, [pc, #588]	; (8006a44 <HAL_RCC_OscConfig+0x280>)
 80067f6:	689b      	ldr	r3, [r3, #8]
 80067f8:	f003 030c 	and.w	r3, r3, #12
 80067fc:	2b08      	cmp	r3, #8
 80067fe:	d112      	bne.n	8006826 <HAL_RCC_OscConfig+0x62>
 8006800:	4b90      	ldr	r3, [pc, #576]	; (8006a44 <HAL_RCC_OscConfig+0x280>)
 8006802:	685b      	ldr	r3, [r3, #4]
 8006804:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006808:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800680c:	d10b      	bne.n	8006826 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800680e:	4b8d      	ldr	r3, [pc, #564]	; (8006a44 <HAL_RCC_OscConfig+0x280>)
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006816:	2b00      	cmp	r3, #0
 8006818:	d06c      	beq.n	80068f4 <HAL_RCC_OscConfig+0x130>
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	685b      	ldr	r3, [r3, #4]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d168      	bne.n	80068f4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006822:	2301      	movs	r3, #1
 8006824:	e26b      	b.n	8006cfe <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	685b      	ldr	r3, [r3, #4]
 800682a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800682e:	d106      	bne.n	800683e <HAL_RCC_OscConfig+0x7a>
 8006830:	4b84      	ldr	r3, [pc, #528]	; (8006a44 <HAL_RCC_OscConfig+0x280>)
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	4a83      	ldr	r2, [pc, #524]	; (8006a44 <HAL_RCC_OscConfig+0x280>)
 8006836:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800683a:	6013      	str	r3, [r2, #0]
 800683c:	e02e      	b.n	800689c <HAL_RCC_OscConfig+0xd8>
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	685b      	ldr	r3, [r3, #4]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d10c      	bne.n	8006860 <HAL_RCC_OscConfig+0x9c>
 8006846:	4b7f      	ldr	r3, [pc, #508]	; (8006a44 <HAL_RCC_OscConfig+0x280>)
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	4a7e      	ldr	r2, [pc, #504]	; (8006a44 <HAL_RCC_OscConfig+0x280>)
 800684c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006850:	6013      	str	r3, [r2, #0]
 8006852:	4b7c      	ldr	r3, [pc, #496]	; (8006a44 <HAL_RCC_OscConfig+0x280>)
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	4a7b      	ldr	r2, [pc, #492]	; (8006a44 <HAL_RCC_OscConfig+0x280>)
 8006858:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800685c:	6013      	str	r3, [r2, #0]
 800685e:	e01d      	b.n	800689c <HAL_RCC_OscConfig+0xd8>
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	685b      	ldr	r3, [r3, #4]
 8006864:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006868:	d10c      	bne.n	8006884 <HAL_RCC_OscConfig+0xc0>
 800686a:	4b76      	ldr	r3, [pc, #472]	; (8006a44 <HAL_RCC_OscConfig+0x280>)
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	4a75      	ldr	r2, [pc, #468]	; (8006a44 <HAL_RCC_OscConfig+0x280>)
 8006870:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006874:	6013      	str	r3, [r2, #0]
 8006876:	4b73      	ldr	r3, [pc, #460]	; (8006a44 <HAL_RCC_OscConfig+0x280>)
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	4a72      	ldr	r2, [pc, #456]	; (8006a44 <HAL_RCC_OscConfig+0x280>)
 800687c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006880:	6013      	str	r3, [r2, #0]
 8006882:	e00b      	b.n	800689c <HAL_RCC_OscConfig+0xd8>
 8006884:	4b6f      	ldr	r3, [pc, #444]	; (8006a44 <HAL_RCC_OscConfig+0x280>)
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	4a6e      	ldr	r2, [pc, #440]	; (8006a44 <HAL_RCC_OscConfig+0x280>)
 800688a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800688e:	6013      	str	r3, [r2, #0]
 8006890:	4b6c      	ldr	r3, [pc, #432]	; (8006a44 <HAL_RCC_OscConfig+0x280>)
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	4a6b      	ldr	r2, [pc, #428]	; (8006a44 <HAL_RCC_OscConfig+0x280>)
 8006896:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800689a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	685b      	ldr	r3, [r3, #4]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d013      	beq.n	80068cc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068a4:	f7fc fdde 	bl	8003464 <HAL_GetTick>
 80068a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80068aa:	e008      	b.n	80068be <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80068ac:	f7fc fdda 	bl	8003464 <HAL_GetTick>
 80068b0:	4602      	mov	r2, r0
 80068b2:	693b      	ldr	r3, [r7, #16]
 80068b4:	1ad3      	subs	r3, r2, r3
 80068b6:	2b64      	cmp	r3, #100	; 0x64
 80068b8:	d901      	bls.n	80068be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80068ba:	2303      	movs	r3, #3
 80068bc:	e21f      	b.n	8006cfe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80068be:	4b61      	ldr	r3, [pc, #388]	; (8006a44 <HAL_RCC_OscConfig+0x280>)
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d0f0      	beq.n	80068ac <HAL_RCC_OscConfig+0xe8>
 80068ca:	e014      	b.n	80068f6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068cc:	f7fc fdca 	bl	8003464 <HAL_GetTick>
 80068d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80068d2:	e008      	b.n	80068e6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80068d4:	f7fc fdc6 	bl	8003464 <HAL_GetTick>
 80068d8:	4602      	mov	r2, r0
 80068da:	693b      	ldr	r3, [r7, #16]
 80068dc:	1ad3      	subs	r3, r2, r3
 80068de:	2b64      	cmp	r3, #100	; 0x64
 80068e0:	d901      	bls.n	80068e6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80068e2:	2303      	movs	r3, #3
 80068e4:	e20b      	b.n	8006cfe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80068e6:	4b57      	ldr	r3, [pc, #348]	; (8006a44 <HAL_RCC_OscConfig+0x280>)
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d1f0      	bne.n	80068d4 <HAL_RCC_OscConfig+0x110>
 80068f2:	e000      	b.n	80068f6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80068f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f003 0302 	and.w	r3, r3, #2
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d069      	beq.n	80069d6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006902:	4b50      	ldr	r3, [pc, #320]	; (8006a44 <HAL_RCC_OscConfig+0x280>)
 8006904:	689b      	ldr	r3, [r3, #8]
 8006906:	f003 030c 	and.w	r3, r3, #12
 800690a:	2b00      	cmp	r3, #0
 800690c:	d00b      	beq.n	8006926 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800690e:	4b4d      	ldr	r3, [pc, #308]	; (8006a44 <HAL_RCC_OscConfig+0x280>)
 8006910:	689b      	ldr	r3, [r3, #8]
 8006912:	f003 030c 	and.w	r3, r3, #12
 8006916:	2b08      	cmp	r3, #8
 8006918:	d11c      	bne.n	8006954 <HAL_RCC_OscConfig+0x190>
 800691a:	4b4a      	ldr	r3, [pc, #296]	; (8006a44 <HAL_RCC_OscConfig+0x280>)
 800691c:	685b      	ldr	r3, [r3, #4]
 800691e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006922:	2b00      	cmp	r3, #0
 8006924:	d116      	bne.n	8006954 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006926:	4b47      	ldr	r3, [pc, #284]	; (8006a44 <HAL_RCC_OscConfig+0x280>)
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f003 0302 	and.w	r3, r3, #2
 800692e:	2b00      	cmp	r3, #0
 8006930:	d005      	beq.n	800693e <HAL_RCC_OscConfig+0x17a>
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	68db      	ldr	r3, [r3, #12]
 8006936:	2b01      	cmp	r3, #1
 8006938:	d001      	beq.n	800693e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800693a:	2301      	movs	r3, #1
 800693c:	e1df      	b.n	8006cfe <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800693e:	4b41      	ldr	r3, [pc, #260]	; (8006a44 <HAL_RCC_OscConfig+0x280>)
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	691b      	ldr	r3, [r3, #16]
 800694a:	00db      	lsls	r3, r3, #3
 800694c:	493d      	ldr	r1, [pc, #244]	; (8006a44 <HAL_RCC_OscConfig+0x280>)
 800694e:	4313      	orrs	r3, r2
 8006950:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006952:	e040      	b.n	80069d6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	68db      	ldr	r3, [r3, #12]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d023      	beq.n	80069a4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800695c:	4b39      	ldr	r3, [pc, #228]	; (8006a44 <HAL_RCC_OscConfig+0x280>)
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	4a38      	ldr	r2, [pc, #224]	; (8006a44 <HAL_RCC_OscConfig+0x280>)
 8006962:	f043 0301 	orr.w	r3, r3, #1
 8006966:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006968:	f7fc fd7c 	bl	8003464 <HAL_GetTick>
 800696c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800696e:	e008      	b.n	8006982 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006970:	f7fc fd78 	bl	8003464 <HAL_GetTick>
 8006974:	4602      	mov	r2, r0
 8006976:	693b      	ldr	r3, [r7, #16]
 8006978:	1ad3      	subs	r3, r2, r3
 800697a:	2b02      	cmp	r3, #2
 800697c:	d901      	bls.n	8006982 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800697e:	2303      	movs	r3, #3
 8006980:	e1bd      	b.n	8006cfe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006982:	4b30      	ldr	r3, [pc, #192]	; (8006a44 <HAL_RCC_OscConfig+0x280>)
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f003 0302 	and.w	r3, r3, #2
 800698a:	2b00      	cmp	r3, #0
 800698c:	d0f0      	beq.n	8006970 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800698e:	4b2d      	ldr	r3, [pc, #180]	; (8006a44 <HAL_RCC_OscConfig+0x280>)
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	691b      	ldr	r3, [r3, #16]
 800699a:	00db      	lsls	r3, r3, #3
 800699c:	4929      	ldr	r1, [pc, #164]	; (8006a44 <HAL_RCC_OscConfig+0x280>)
 800699e:	4313      	orrs	r3, r2
 80069a0:	600b      	str	r3, [r1, #0]
 80069a2:	e018      	b.n	80069d6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80069a4:	4b27      	ldr	r3, [pc, #156]	; (8006a44 <HAL_RCC_OscConfig+0x280>)
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	4a26      	ldr	r2, [pc, #152]	; (8006a44 <HAL_RCC_OscConfig+0x280>)
 80069aa:	f023 0301 	bic.w	r3, r3, #1
 80069ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069b0:	f7fc fd58 	bl	8003464 <HAL_GetTick>
 80069b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80069b6:	e008      	b.n	80069ca <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80069b8:	f7fc fd54 	bl	8003464 <HAL_GetTick>
 80069bc:	4602      	mov	r2, r0
 80069be:	693b      	ldr	r3, [r7, #16]
 80069c0:	1ad3      	subs	r3, r2, r3
 80069c2:	2b02      	cmp	r3, #2
 80069c4:	d901      	bls.n	80069ca <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80069c6:	2303      	movs	r3, #3
 80069c8:	e199      	b.n	8006cfe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80069ca:	4b1e      	ldr	r3, [pc, #120]	; (8006a44 <HAL_RCC_OscConfig+0x280>)
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f003 0302 	and.w	r3, r3, #2
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d1f0      	bne.n	80069b8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f003 0308 	and.w	r3, r3, #8
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d038      	beq.n	8006a54 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	695b      	ldr	r3, [r3, #20]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d019      	beq.n	8006a1e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80069ea:	4b16      	ldr	r3, [pc, #88]	; (8006a44 <HAL_RCC_OscConfig+0x280>)
 80069ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80069ee:	4a15      	ldr	r2, [pc, #84]	; (8006a44 <HAL_RCC_OscConfig+0x280>)
 80069f0:	f043 0301 	orr.w	r3, r3, #1
 80069f4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069f6:	f7fc fd35 	bl	8003464 <HAL_GetTick>
 80069fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80069fc:	e008      	b.n	8006a10 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80069fe:	f7fc fd31 	bl	8003464 <HAL_GetTick>
 8006a02:	4602      	mov	r2, r0
 8006a04:	693b      	ldr	r3, [r7, #16]
 8006a06:	1ad3      	subs	r3, r2, r3
 8006a08:	2b02      	cmp	r3, #2
 8006a0a:	d901      	bls.n	8006a10 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006a0c:	2303      	movs	r3, #3
 8006a0e:	e176      	b.n	8006cfe <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006a10:	4b0c      	ldr	r3, [pc, #48]	; (8006a44 <HAL_RCC_OscConfig+0x280>)
 8006a12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a14:	f003 0302 	and.w	r3, r3, #2
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d0f0      	beq.n	80069fe <HAL_RCC_OscConfig+0x23a>
 8006a1c:	e01a      	b.n	8006a54 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006a1e:	4b09      	ldr	r3, [pc, #36]	; (8006a44 <HAL_RCC_OscConfig+0x280>)
 8006a20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a22:	4a08      	ldr	r2, [pc, #32]	; (8006a44 <HAL_RCC_OscConfig+0x280>)
 8006a24:	f023 0301 	bic.w	r3, r3, #1
 8006a28:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a2a:	f7fc fd1b 	bl	8003464 <HAL_GetTick>
 8006a2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006a30:	e00a      	b.n	8006a48 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006a32:	f7fc fd17 	bl	8003464 <HAL_GetTick>
 8006a36:	4602      	mov	r2, r0
 8006a38:	693b      	ldr	r3, [r7, #16]
 8006a3a:	1ad3      	subs	r3, r2, r3
 8006a3c:	2b02      	cmp	r3, #2
 8006a3e:	d903      	bls.n	8006a48 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006a40:	2303      	movs	r3, #3
 8006a42:	e15c      	b.n	8006cfe <HAL_RCC_OscConfig+0x53a>
 8006a44:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006a48:	4b91      	ldr	r3, [pc, #580]	; (8006c90 <HAL_RCC_OscConfig+0x4cc>)
 8006a4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a4c:	f003 0302 	and.w	r3, r3, #2
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d1ee      	bne.n	8006a32 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f003 0304 	and.w	r3, r3, #4
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	f000 80a4 	beq.w	8006baa <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006a62:	4b8b      	ldr	r3, [pc, #556]	; (8006c90 <HAL_RCC_OscConfig+0x4cc>)
 8006a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d10d      	bne.n	8006a8a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8006a6e:	4b88      	ldr	r3, [pc, #544]	; (8006c90 <HAL_RCC_OscConfig+0x4cc>)
 8006a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a72:	4a87      	ldr	r2, [pc, #540]	; (8006c90 <HAL_RCC_OscConfig+0x4cc>)
 8006a74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a78:	6413      	str	r3, [r2, #64]	; 0x40
 8006a7a:	4b85      	ldr	r3, [pc, #532]	; (8006c90 <HAL_RCC_OscConfig+0x4cc>)
 8006a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a82:	60bb      	str	r3, [r7, #8]
 8006a84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006a86:	2301      	movs	r3, #1
 8006a88:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006a8a:	4b82      	ldr	r3, [pc, #520]	; (8006c94 <HAL_RCC_OscConfig+0x4d0>)
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d118      	bne.n	8006ac8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8006a96:	4b7f      	ldr	r3, [pc, #508]	; (8006c94 <HAL_RCC_OscConfig+0x4d0>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	4a7e      	ldr	r2, [pc, #504]	; (8006c94 <HAL_RCC_OscConfig+0x4d0>)
 8006a9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006aa0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006aa2:	f7fc fcdf 	bl	8003464 <HAL_GetTick>
 8006aa6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006aa8:	e008      	b.n	8006abc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006aaa:	f7fc fcdb 	bl	8003464 <HAL_GetTick>
 8006aae:	4602      	mov	r2, r0
 8006ab0:	693b      	ldr	r3, [r7, #16]
 8006ab2:	1ad3      	subs	r3, r2, r3
 8006ab4:	2b64      	cmp	r3, #100	; 0x64
 8006ab6:	d901      	bls.n	8006abc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8006ab8:	2303      	movs	r3, #3
 8006aba:	e120      	b.n	8006cfe <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006abc:	4b75      	ldr	r3, [pc, #468]	; (8006c94 <HAL_RCC_OscConfig+0x4d0>)
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d0f0      	beq.n	8006aaa <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	689b      	ldr	r3, [r3, #8]
 8006acc:	2b01      	cmp	r3, #1
 8006ace:	d106      	bne.n	8006ade <HAL_RCC_OscConfig+0x31a>
 8006ad0:	4b6f      	ldr	r3, [pc, #444]	; (8006c90 <HAL_RCC_OscConfig+0x4cc>)
 8006ad2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ad4:	4a6e      	ldr	r2, [pc, #440]	; (8006c90 <HAL_RCC_OscConfig+0x4cc>)
 8006ad6:	f043 0301 	orr.w	r3, r3, #1
 8006ada:	6713      	str	r3, [r2, #112]	; 0x70
 8006adc:	e02d      	b.n	8006b3a <HAL_RCC_OscConfig+0x376>
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	689b      	ldr	r3, [r3, #8]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d10c      	bne.n	8006b00 <HAL_RCC_OscConfig+0x33c>
 8006ae6:	4b6a      	ldr	r3, [pc, #424]	; (8006c90 <HAL_RCC_OscConfig+0x4cc>)
 8006ae8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006aea:	4a69      	ldr	r2, [pc, #420]	; (8006c90 <HAL_RCC_OscConfig+0x4cc>)
 8006aec:	f023 0301 	bic.w	r3, r3, #1
 8006af0:	6713      	str	r3, [r2, #112]	; 0x70
 8006af2:	4b67      	ldr	r3, [pc, #412]	; (8006c90 <HAL_RCC_OscConfig+0x4cc>)
 8006af4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006af6:	4a66      	ldr	r2, [pc, #408]	; (8006c90 <HAL_RCC_OscConfig+0x4cc>)
 8006af8:	f023 0304 	bic.w	r3, r3, #4
 8006afc:	6713      	str	r3, [r2, #112]	; 0x70
 8006afe:	e01c      	b.n	8006b3a <HAL_RCC_OscConfig+0x376>
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	689b      	ldr	r3, [r3, #8]
 8006b04:	2b05      	cmp	r3, #5
 8006b06:	d10c      	bne.n	8006b22 <HAL_RCC_OscConfig+0x35e>
 8006b08:	4b61      	ldr	r3, [pc, #388]	; (8006c90 <HAL_RCC_OscConfig+0x4cc>)
 8006b0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b0c:	4a60      	ldr	r2, [pc, #384]	; (8006c90 <HAL_RCC_OscConfig+0x4cc>)
 8006b0e:	f043 0304 	orr.w	r3, r3, #4
 8006b12:	6713      	str	r3, [r2, #112]	; 0x70
 8006b14:	4b5e      	ldr	r3, [pc, #376]	; (8006c90 <HAL_RCC_OscConfig+0x4cc>)
 8006b16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b18:	4a5d      	ldr	r2, [pc, #372]	; (8006c90 <HAL_RCC_OscConfig+0x4cc>)
 8006b1a:	f043 0301 	orr.w	r3, r3, #1
 8006b1e:	6713      	str	r3, [r2, #112]	; 0x70
 8006b20:	e00b      	b.n	8006b3a <HAL_RCC_OscConfig+0x376>
 8006b22:	4b5b      	ldr	r3, [pc, #364]	; (8006c90 <HAL_RCC_OscConfig+0x4cc>)
 8006b24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b26:	4a5a      	ldr	r2, [pc, #360]	; (8006c90 <HAL_RCC_OscConfig+0x4cc>)
 8006b28:	f023 0301 	bic.w	r3, r3, #1
 8006b2c:	6713      	str	r3, [r2, #112]	; 0x70
 8006b2e:	4b58      	ldr	r3, [pc, #352]	; (8006c90 <HAL_RCC_OscConfig+0x4cc>)
 8006b30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b32:	4a57      	ldr	r2, [pc, #348]	; (8006c90 <HAL_RCC_OscConfig+0x4cc>)
 8006b34:	f023 0304 	bic.w	r3, r3, #4
 8006b38:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	689b      	ldr	r3, [r3, #8]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d015      	beq.n	8006b6e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b42:	f7fc fc8f 	bl	8003464 <HAL_GetTick>
 8006b46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b48:	e00a      	b.n	8006b60 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b4a:	f7fc fc8b 	bl	8003464 <HAL_GetTick>
 8006b4e:	4602      	mov	r2, r0
 8006b50:	693b      	ldr	r3, [r7, #16]
 8006b52:	1ad3      	subs	r3, r2, r3
 8006b54:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b58:	4293      	cmp	r3, r2
 8006b5a:	d901      	bls.n	8006b60 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8006b5c:	2303      	movs	r3, #3
 8006b5e:	e0ce      	b.n	8006cfe <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b60:	4b4b      	ldr	r3, [pc, #300]	; (8006c90 <HAL_RCC_OscConfig+0x4cc>)
 8006b62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b64:	f003 0302 	and.w	r3, r3, #2
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d0ee      	beq.n	8006b4a <HAL_RCC_OscConfig+0x386>
 8006b6c:	e014      	b.n	8006b98 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b6e:	f7fc fc79 	bl	8003464 <HAL_GetTick>
 8006b72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006b74:	e00a      	b.n	8006b8c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b76:	f7fc fc75 	bl	8003464 <HAL_GetTick>
 8006b7a:	4602      	mov	r2, r0
 8006b7c:	693b      	ldr	r3, [r7, #16]
 8006b7e:	1ad3      	subs	r3, r2, r3
 8006b80:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b84:	4293      	cmp	r3, r2
 8006b86:	d901      	bls.n	8006b8c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8006b88:	2303      	movs	r3, #3
 8006b8a:	e0b8      	b.n	8006cfe <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006b8c:	4b40      	ldr	r3, [pc, #256]	; (8006c90 <HAL_RCC_OscConfig+0x4cc>)
 8006b8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b90:	f003 0302 	and.w	r3, r3, #2
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d1ee      	bne.n	8006b76 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006b98:	7dfb      	ldrb	r3, [r7, #23]
 8006b9a:	2b01      	cmp	r3, #1
 8006b9c:	d105      	bne.n	8006baa <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006b9e:	4b3c      	ldr	r3, [pc, #240]	; (8006c90 <HAL_RCC_OscConfig+0x4cc>)
 8006ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ba2:	4a3b      	ldr	r2, [pc, #236]	; (8006c90 <HAL_RCC_OscConfig+0x4cc>)
 8006ba4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006ba8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	699b      	ldr	r3, [r3, #24]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	f000 80a4 	beq.w	8006cfc <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006bb4:	4b36      	ldr	r3, [pc, #216]	; (8006c90 <HAL_RCC_OscConfig+0x4cc>)
 8006bb6:	689b      	ldr	r3, [r3, #8]
 8006bb8:	f003 030c 	and.w	r3, r3, #12
 8006bbc:	2b08      	cmp	r3, #8
 8006bbe:	d06b      	beq.n	8006c98 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	699b      	ldr	r3, [r3, #24]
 8006bc4:	2b02      	cmp	r3, #2
 8006bc6:	d149      	bne.n	8006c5c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006bc8:	4b31      	ldr	r3, [pc, #196]	; (8006c90 <HAL_RCC_OscConfig+0x4cc>)
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	4a30      	ldr	r2, [pc, #192]	; (8006c90 <HAL_RCC_OscConfig+0x4cc>)
 8006bce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006bd2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bd4:	f7fc fc46 	bl	8003464 <HAL_GetTick>
 8006bd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006bda:	e008      	b.n	8006bee <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006bdc:	f7fc fc42 	bl	8003464 <HAL_GetTick>
 8006be0:	4602      	mov	r2, r0
 8006be2:	693b      	ldr	r3, [r7, #16]
 8006be4:	1ad3      	subs	r3, r2, r3
 8006be6:	2b02      	cmp	r3, #2
 8006be8:	d901      	bls.n	8006bee <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8006bea:	2303      	movs	r3, #3
 8006bec:	e087      	b.n	8006cfe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006bee:	4b28      	ldr	r3, [pc, #160]	; (8006c90 <HAL_RCC_OscConfig+0x4cc>)
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d1f0      	bne.n	8006bdc <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	69da      	ldr	r2, [r3, #28]
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6a1b      	ldr	r3, [r3, #32]
 8006c02:	431a      	orrs	r2, r3
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c08:	019b      	lsls	r3, r3, #6
 8006c0a:	431a      	orrs	r2, r3
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c10:	085b      	lsrs	r3, r3, #1
 8006c12:	3b01      	subs	r3, #1
 8006c14:	041b      	lsls	r3, r3, #16
 8006c16:	431a      	orrs	r2, r3
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c1c:	061b      	lsls	r3, r3, #24
 8006c1e:	4313      	orrs	r3, r2
 8006c20:	4a1b      	ldr	r2, [pc, #108]	; (8006c90 <HAL_RCC_OscConfig+0x4cc>)
 8006c22:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006c26:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006c28:	4b19      	ldr	r3, [pc, #100]	; (8006c90 <HAL_RCC_OscConfig+0x4cc>)
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	4a18      	ldr	r2, [pc, #96]	; (8006c90 <HAL_RCC_OscConfig+0x4cc>)
 8006c2e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006c32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c34:	f7fc fc16 	bl	8003464 <HAL_GetTick>
 8006c38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c3a:	e008      	b.n	8006c4e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c3c:	f7fc fc12 	bl	8003464 <HAL_GetTick>
 8006c40:	4602      	mov	r2, r0
 8006c42:	693b      	ldr	r3, [r7, #16]
 8006c44:	1ad3      	subs	r3, r2, r3
 8006c46:	2b02      	cmp	r3, #2
 8006c48:	d901      	bls.n	8006c4e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8006c4a:	2303      	movs	r3, #3
 8006c4c:	e057      	b.n	8006cfe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c4e:	4b10      	ldr	r3, [pc, #64]	; (8006c90 <HAL_RCC_OscConfig+0x4cc>)
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d0f0      	beq.n	8006c3c <HAL_RCC_OscConfig+0x478>
 8006c5a:	e04f      	b.n	8006cfc <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c5c:	4b0c      	ldr	r3, [pc, #48]	; (8006c90 <HAL_RCC_OscConfig+0x4cc>)
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	4a0b      	ldr	r2, [pc, #44]	; (8006c90 <HAL_RCC_OscConfig+0x4cc>)
 8006c62:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006c66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c68:	f7fc fbfc 	bl	8003464 <HAL_GetTick>
 8006c6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c6e:	e008      	b.n	8006c82 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c70:	f7fc fbf8 	bl	8003464 <HAL_GetTick>
 8006c74:	4602      	mov	r2, r0
 8006c76:	693b      	ldr	r3, [r7, #16]
 8006c78:	1ad3      	subs	r3, r2, r3
 8006c7a:	2b02      	cmp	r3, #2
 8006c7c:	d901      	bls.n	8006c82 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8006c7e:	2303      	movs	r3, #3
 8006c80:	e03d      	b.n	8006cfe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c82:	4b03      	ldr	r3, [pc, #12]	; (8006c90 <HAL_RCC_OscConfig+0x4cc>)
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d1f0      	bne.n	8006c70 <HAL_RCC_OscConfig+0x4ac>
 8006c8e:	e035      	b.n	8006cfc <HAL_RCC_OscConfig+0x538>
 8006c90:	40023800 	.word	0x40023800
 8006c94:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8006c98:	4b1b      	ldr	r3, [pc, #108]	; (8006d08 <HAL_RCC_OscConfig+0x544>)
 8006c9a:	685b      	ldr	r3, [r3, #4]
 8006c9c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	699b      	ldr	r3, [r3, #24]
 8006ca2:	2b01      	cmp	r3, #1
 8006ca4:	d028      	beq.n	8006cf8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006cb0:	429a      	cmp	r2, r3
 8006cb2:	d121      	bne.n	8006cf8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006cbe:	429a      	cmp	r2, r3
 8006cc0:	d11a      	bne.n	8006cf8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006cc2:	68fa      	ldr	r2, [r7, #12]
 8006cc4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006cc8:	4013      	ands	r3, r2
 8006cca:	687a      	ldr	r2, [r7, #4]
 8006ccc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006cce:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006cd0:	4293      	cmp	r3, r2
 8006cd2:	d111      	bne.n	8006cf8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cde:	085b      	lsrs	r3, r3, #1
 8006ce0:	3b01      	subs	r3, #1
 8006ce2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006ce4:	429a      	cmp	r2, r3
 8006ce6:	d107      	bne.n	8006cf8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cf2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006cf4:	429a      	cmp	r2, r3
 8006cf6:	d001      	beq.n	8006cfc <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8006cf8:	2301      	movs	r3, #1
 8006cfa:	e000      	b.n	8006cfe <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8006cfc:	2300      	movs	r3, #0
}
 8006cfe:	4618      	mov	r0, r3
 8006d00:	3718      	adds	r7, #24
 8006d02:	46bd      	mov	sp, r7
 8006d04:	bd80      	pop	{r7, pc}
 8006d06:	bf00      	nop
 8006d08:	40023800 	.word	0x40023800

08006d0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b084      	sub	sp, #16
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
 8006d14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8006d16:	2300      	movs	r3, #0
 8006d18:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d101      	bne.n	8006d24 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006d20:	2301      	movs	r3, #1
 8006d22:	e0d0      	b.n	8006ec6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006d24:	4b6a      	ldr	r3, [pc, #424]	; (8006ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f003 030f 	and.w	r3, r3, #15
 8006d2c:	683a      	ldr	r2, [r7, #0]
 8006d2e:	429a      	cmp	r2, r3
 8006d30:	d910      	bls.n	8006d54 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d32:	4b67      	ldr	r3, [pc, #412]	; (8006ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f023 020f 	bic.w	r2, r3, #15
 8006d3a:	4965      	ldr	r1, [pc, #404]	; (8006ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	4313      	orrs	r3, r2
 8006d40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d42:	4b63      	ldr	r3, [pc, #396]	; (8006ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f003 030f 	and.w	r3, r3, #15
 8006d4a:	683a      	ldr	r2, [r7, #0]
 8006d4c:	429a      	cmp	r2, r3
 8006d4e:	d001      	beq.n	8006d54 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006d50:	2301      	movs	r3, #1
 8006d52:	e0b8      	b.n	8006ec6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	f003 0302 	and.w	r3, r3, #2
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d020      	beq.n	8006da2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f003 0304 	and.w	r3, r3, #4
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d005      	beq.n	8006d78 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006d6c:	4b59      	ldr	r3, [pc, #356]	; (8006ed4 <HAL_RCC_ClockConfig+0x1c8>)
 8006d6e:	689b      	ldr	r3, [r3, #8]
 8006d70:	4a58      	ldr	r2, [pc, #352]	; (8006ed4 <HAL_RCC_ClockConfig+0x1c8>)
 8006d72:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006d76:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	f003 0308 	and.w	r3, r3, #8
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d005      	beq.n	8006d90 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006d84:	4b53      	ldr	r3, [pc, #332]	; (8006ed4 <HAL_RCC_ClockConfig+0x1c8>)
 8006d86:	689b      	ldr	r3, [r3, #8]
 8006d88:	4a52      	ldr	r2, [pc, #328]	; (8006ed4 <HAL_RCC_ClockConfig+0x1c8>)
 8006d8a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006d8e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006d90:	4b50      	ldr	r3, [pc, #320]	; (8006ed4 <HAL_RCC_ClockConfig+0x1c8>)
 8006d92:	689b      	ldr	r3, [r3, #8]
 8006d94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	689b      	ldr	r3, [r3, #8]
 8006d9c:	494d      	ldr	r1, [pc, #308]	; (8006ed4 <HAL_RCC_ClockConfig+0x1c8>)
 8006d9e:	4313      	orrs	r3, r2
 8006da0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f003 0301 	and.w	r3, r3, #1
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d040      	beq.n	8006e30 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	685b      	ldr	r3, [r3, #4]
 8006db2:	2b01      	cmp	r3, #1
 8006db4:	d107      	bne.n	8006dc6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006db6:	4b47      	ldr	r3, [pc, #284]	; (8006ed4 <HAL_RCC_ClockConfig+0x1c8>)
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d115      	bne.n	8006dee <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006dc2:	2301      	movs	r3, #1
 8006dc4:	e07f      	b.n	8006ec6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	685b      	ldr	r3, [r3, #4]
 8006dca:	2b02      	cmp	r3, #2
 8006dcc:	d107      	bne.n	8006dde <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006dce:	4b41      	ldr	r3, [pc, #260]	; (8006ed4 <HAL_RCC_ClockConfig+0x1c8>)
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d109      	bne.n	8006dee <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006dda:	2301      	movs	r3, #1
 8006ddc:	e073      	b.n	8006ec6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006dde:	4b3d      	ldr	r3, [pc, #244]	; (8006ed4 <HAL_RCC_ClockConfig+0x1c8>)
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f003 0302 	and.w	r3, r3, #2
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d101      	bne.n	8006dee <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006dea:	2301      	movs	r3, #1
 8006dec:	e06b      	b.n	8006ec6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006dee:	4b39      	ldr	r3, [pc, #228]	; (8006ed4 <HAL_RCC_ClockConfig+0x1c8>)
 8006df0:	689b      	ldr	r3, [r3, #8]
 8006df2:	f023 0203 	bic.w	r2, r3, #3
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	685b      	ldr	r3, [r3, #4]
 8006dfa:	4936      	ldr	r1, [pc, #216]	; (8006ed4 <HAL_RCC_ClockConfig+0x1c8>)
 8006dfc:	4313      	orrs	r3, r2
 8006dfe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e00:	f7fc fb30 	bl	8003464 <HAL_GetTick>
 8006e04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e06:	e00a      	b.n	8006e1e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006e08:	f7fc fb2c 	bl	8003464 <HAL_GetTick>
 8006e0c:	4602      	mov	r2, r0
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	1ad3      	subs	r3, r2, r3
 8006e12:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e16:	4293      	cmp	r3, r2
 8006e18:	d901      	bls.n	8006e1e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8006e1a:	2303      	movs	r3, #3
 8006e1c:	e053      	b.n	8006ec6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e1e:	4b2d      	ldr	r3, [pc, #180]	; (8006ed4 <HAL_RCC_ClockConfig+0x1c8>)
 8006e20:	689b      	ldr	r3, [r3, #8]
 8006e22:	f003 020c 	and.w	r2, r3, #12
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	685b      	ldr	r3, [r3, #4]
 8006e2a:	009b      	lsls	r3, r3, #2
 8006e2c:	429a      	cmp	r2, r3
 8006e2e:	d1eb      	bne.n	8006e08 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006e30:	4b27      	ldr	r3, [pc, #156]	; (8006ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f003 030f 	and.w	r3, r3, #15
 8006e38:	683a      	ldr	r2, [r7, #0]
 8006e3a:	429a      	cmp	r2, r3
 8006e3c:	d210      	bcs.n	8006e60 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e3e:	4b24      	ldr	r3, [pc, #144]	; (8006ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f023 020f 	bic.w	r2, r3, #15
 8006e46:	4922      	ldr	r1, [pc, #136]	; (8006ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	4313      	orrs	r3, r2
 8006e4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e4e:	4b20      	ldr	r3, [pc, #128]	; (8006ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f003 030f 	and.w	r3, r3, #15
 8006e56:	683a      	ldr	r2, [r7, #0]
 8006e58:	429a      	cmp	r2, r3
 8006e5a:	d001      	beq.n	8006e60 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8006e5c:	2301      	movs	r3, #1
 8006e5e:	e032      	b.n	8006ec6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	f003 0304 	and.w	r3, r3, #4
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d008      	beq.n	8006e7e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006e6c:	4b19      	ldr	r3, [pc, #100]	; (8006ed4 <HAL_RCC_ClockConfig+0x1c8>)
 8006e6e:	689b      	ldr	r3, [r3, #8]
 8006e70:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	68db      	ldr	r3, [r3, #12]
 8006e78:	4916      	ldr	r1, [pc, #88]	; (8006ed4 <HAL_RCC_ClockConfig+0x1c8>)
 8006e7a:	4313      	orrs	r3, r2
 8006e7c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f003 0308 	and.w	r3, r3, #8
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d009      	beq.n	8006e9e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006e8a:	4b12      	ldr	r3, [pc, #72]	; (8006ed4 <HAL_RCC_ClockConfig+0x1c8>)
 8006e8c:	689b      	ldr	r3, [r3, #8]
 8006e8e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	691b      	ldr	r3, [r3, #16]
 8006e96:	00db      	lsls	r3, r3, #3
 8006e98:	490e      	ldr	r1, [pc, #56]	; (8006ed4 <HAL_RCC_ClockConfig+0x1c8>)
 8006e9a:	4313      	orrs	r3, r2
 8006e9c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006e9e:	f000 f821 	bl	8006ee4 <HAL_RCC_GetSysClockFreq>
 8006ea2:	4602      	mov	r2, r0
 8006ea4:	4b0b      	ldr	r3, [pc, #44]	; (8006ed4 <HAL_RCC_ClockConfig+0x1c8>)
 8006ea6:	689b      	ldr	r3, [r3, #8]
 8006ea8:	091b      	lsrs	r3, r3, #4
 8006eaa:	f003 030f 	and.w	r3, r3, #15
 8006eae:	490a      	ldr	r1, [pc, #40]	; (8006ed8 <HAL_RCC_ClockConfig+0x1cc>)
 8006eb0:	5ccb      	ldrb	r3, [r1, r3]
 8006eb2:	fa22 f303 	lsr.w	r3, r2, r3
 8006eb6:	4a09      	ldr	r2, [pc, #36]	; (8006edc <HAL_RCC_ClockConfig+0x1d0>)
 8006eb8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006eba:	4b09      	ldr	r3, [pc, #36]	; (8006ee0 <HAL_RCC_ClockConfig+0x1d4>)
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	f7fc fa8c 	bl	80033dc <HAL_InitTick>

  return HAL_OK;
 8006ec4:	2300      	movs	r3, #0
}
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	3710      	adds	r7, #16
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	bd80      	pop	{r7, pc}
 8006ece:	bf00      	nop
 8006ed0:	40023c00 	.word	0x40023c00
 8006ed4:	40023800 	.word	0x40023800
 8006ed8:	08008c3c 	.word	0x08008c3c
 8006edc:	20000080 	.word	0x20000080
 8006ee0:	20000088 	.word	0x20000088

08006ee4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006ee4:	b5b0      	push	{r4, r5, r7, lr}
 8006ee6:	b084      	sub	sp, #16
 8006ee8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8006eea:	2100      	movs	r1, #0
 8006eec:	6079      	str	r1, [r7, #4]
 8006eee:	2100      	movs	r1, #0
 8006ef0:	60f9      	str	r1, [r7, #12]
 8006ef2:	2100      	movs	r1, #0
 8006ef4:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 8006ef6:	2100      	movs	r1, #0
 8006ef8:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006efa:	4952      	ldr	r1, [pc, #328]	; (8007044 <HAL_RCC_GetSysClockFreq+0x160>)
 8006efc:	6889      	ldr	r1, [r1, #8]
 8006efe:	f001 010c 	and.w	r1, r1, #12
 8006f02:	2908      	cmp	r1, #8
 8006f04:	d00d      	beq.n	8006f22 <HAL_RCC_GetSysClockFreq+0x3e>
 8006f06:	2908      	cmp	r1, #8
 8006f08:	f200 8094 	bhi.w	8007034 <HAL_RCC_GetSysClockFreq+0x150>
 8006f0c:	2900      	cmp	r1, #0
 8006f0e:	d002      	beq.n	8006f16 <HAL_RCC_GetSysClockFreq+0x32>
 8006f10:	2904      	cmp	r1, #4
 8006f12:	d003      	beq.n	8006f1c <HAL_RCC_GetSysClockFreq+0x38>
 8006f14:	e08e      	b.n	8007034 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006f16:	4b4c      	ldr	r3, [pc, #304]	; (8007048 <HAL_RCC_GetSysClockFreq+0x164>)
 8006f18:	60bb      	str	r3, [r7, #8]
      break;
 8006f1a:	e08e      	b.n	800703a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006f1c:	4b4b      	ldr	r3, [pc, #300]	; (800704c <HAL_RCC_GetSysClockFreq+0x168>)
 8006f1e:	60bb      	str	r3, [r7, #8]
      break;
 8006f20:	e08b      	b.n	800703a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006f22:	4948      	ldr	r1, [pc, #288]	; (8007044 <HAL_RCC_GetSysClockFreq+0x160>)
 8006f24:	6849      	ldr	r1, [r1, #4]
 8006f26:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8006f2a:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8006f2c:	4945      	ldr	r1, [pc, #276]	; (8007044 <HAL_RCC_GetSysClockFreq+0x160>)
 8006f2e:	6849      	ldr	r1, [r1, #4]
 8006f30:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8006f34:	2900      	cmp	r1, #0
 8006f36:	d024      	beq.n	8006f82 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006f38:	4942      	ldr	r1, [pc, #264]	; (8007044 <HAL_RCC_GetSysClockFreq+0x160>)
 8006f3a:	6849      	ldr	r1, [r1, #4]
 8006f3c:	0989      	lsrs	r1, r1, #6
 8006f3e:	4608      	mov	r0, r1
 8006f40:	f04f 0100 	mov.w	r1, #0
 8006f44:	f240 14ff 	movw	r4, #511	; 0x1ff
 8006f48:	f04f 0500 	mov.w	r5, #0
 8006f4c:	ea00 0204 	and.w	r2, r0, r4
 8006f50:	ea01 0305 	and.w	r3, r1, r5
 8006f54:	493d      	ldr	r1, [pc, #244]	; (800704c <HAL_RCC_GetSysClockFreq+0x168>)
 8006f56:	fb01 f003 	mul.w	r0, r1, r3
 8006f5a:	2100      	movs	r1, #0
 8006f5c:	fb01 f102 	mul.w	r1, r1, r2
 8006f60:	1844      	adds	r4, r0, r1
 8006f62:	493a      	ldr	r1, [pc, #232]	; (800704c <HAL_RCC_GetSysClockFreq+0x168>)
 8006f64:	fba2 0101 	umull	r0, r1, r2, r1
 8006f68:	1863      	adds	r3, r4, r1
 8006f6a:	4619      	mov	r1, r3
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	461a      	mov	r2, r3
 8006f70:	f04f 0300 	mov.w	r3, #0
 8006f74:	f7f9 fe04 	bl	8000b80 <__aeabi_uldivmod>
 8006f78:	4602      	mov	r2, r0
 8006f7a:	460b      	mov	r3, r1
 8006f7c:	4613      	mov	r3, r2
 8006f7e:	60fb      	str	r3, [r7, #12]
 8006f80:	e04a      	b.n	8007018 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006f82:	4b30      	ldr	r3, [pc, #192]	; (8007044 <HAL_RCC_GetSysClockFreq+0x160>)
 8006f84:	685b      	ldr	r3, [r3, #4]
 8006f86:	099b      	lsrs	r3, r3, #6
 8006f88:	461a      	mov	r2, r3
 8006f8a:	f04f 0300 	mov.w	r3, #0
 8006f8e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006f92:	f04f 0100 	mov.w	r1, #0
 8006f96:	ea02 0400 	and.w	r4, r2, r0
 8006f9a:	ea03 0501 	and.w	r5, r3, r1
 8006f9e:	4620      	mov	r0, r4
 8006fa0:	4629      	mov	r1, r5
 8006fa2:	f04f 0200 	mov.w	r2, #0
 8006fa6:	f04f 0300 	mov.w	r3, #0
 8006faa:	014b      	lsls	r3, r1, #5
 8006fac:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006fb0:	0142      	lsls	r2, r0, #5
 8006fb2:	4610      	mov	r0, r2
 8006fb4:	4619      	mov	r1, r3
 8006fb6:	1b00      	subs	r0, r0, r4
 8006fb8:	eb61 0105 	sbc.w	r1, r1, r5
 8006fbc:	f04f 0200 	mov.w	r2, #0
 8006fc0:	f04f 0300 	mov.w	r3, #0
 8006fc4:	018b      	lsls	r3, r1, #6
 8006fc6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006fca:	0182      	lsls	r2, r0, #6
 8006fcc:	1a12      	subs	r2, r2, r0
 8006fce:	eb63 0301 	sbc.w	r3, r3, r1
 8006fd2:	f04f 0000 	mov.w	r0, #0
 8006fd6:	f04f 0100 	mov.w	r1, #0
 8006fda:	00d9      	lsls	r1, r3, #3
 8006fdc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006fe0:	00d0      	lsls	r0, r2, #3
 8006fe2:	4602      	mov	r2, r0
 8006fe4:	460b      	mov	r3, r1
 8006fe6:	1912      	adds	r2, r2, r4
 8006fe8:	eb45 0303 	adc.w	r3, r5, r3
 8006fec:	f04f 0000 	mov.w	r0, #0
 8006ff0:	f04f 0100 	mov.w	r1, #0
 8006ff4:	0299      	lsls	r1, r3, #10
 8006ff6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8006ffa:	0290      	lsls	r0, r2, #10
 8006ffc:	4602      	mov	r2, r0
 8006ffe:	460b      	mov	r3, r1
 8007000:	4610      	mov	r0, r2
 8007002:	4619      	mov	r1, r3
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	461a      	mov	r2, r3
 8007008:	f04f 0300 	mov.w	r3, #0
 800700c:	f7f9 fdb8 	bl	8000b80 <__aeabi_uldivmod>
 8007010:	4602      	mov	r2, r0
 8007012:	460b      	mov	r3, r1
 8007014:	4613      	mov	r3, r2
 8007016:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8007018:	4b0a      	ldr	r3, [pc, #40]	; (8007044 <HAL_RCC_GetSysClockFreq+0x160>)
 800701a:	685b      	ldr	r3, [r3, #4]
 800701c:	0c1b      	lsrs	r3, r3, #16
 800701e:	f003 0303 	and.w	r3, r3, #3
 8007022:	3301      	adds	r3, #1
 8007024:	005b      	lsls	r3, r3, #1
 8007026:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8007028:	68fa      	ldr	r2, [r7, #12]
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007030:	60bb      	str	r3, [r7, #8]
      break;
 8007032:	e002      	b.n	800703a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007034:	4b04      	ldr	r3, [pc, #16]	; (8007048 <HAL_RCC_GetSysClockFreq+0x164>)
 8007036:	60bb      	str	r3, [r7, #8]
      break;
 8007038:	bf00      	nop
    }
  }
  return sysclockfreq;
 800703a:	68bb      	ldr	r3, [r7, #8]
}
 800703c:	4618      	mov	r0, r3
 800703e:	3710      	adds	r7, #16
 8007040:	46bd      	mov	sp, r7
 8007042:	bdb0      	pop	{r4, r5, r7, pc}
 8007044:	40023800 	.word	0x40023800
 8007048:	00f42400 	.word	0x00f42400
 800704c:	017d7840 	.word	0x017d7840

08007050 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007050:	b480      	push	{r7}
 8007052:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007054:	4b03      	ldr	r3, [pc, #12]	; (8007064 <HAL_RCC_GetHCLKFreq+0x14>)
 8007056:	681b      	ldr	r3, [r3, #0]
}
 8007058:	4618      	mov	r0, r3
 800705a:	46bd      	mov	sp, r7
 800705c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007060:	4770      	bx	lr
 8007062:	bf00      	nop
 8007064:	20000080 	.word	0x20000080

08007068 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007068:	b580      	push	{r7, lr}
 800706a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800706c:	f7ff fff0 	bl	8007050 <HAL_RCC_GetHCLKFreq>
 8007070:	4602      	mov	r2, r0
 8007072:	4b05      	ldr	r3, [pc, #20]	; (8007088 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007074:	689b      	ldr	r3, [r3, #8]
 8007076:	0a9b      	lsrs	r3, r3, #10
 8007078:	f003 0307 	and.w	r3, r3, #7
 800707c:	4903      	ldr	r1, [pc, #12]	; (800708c <HAL_RCC_GetPCLK1Freq+0x24>)
 800707e:	5ccb      	ldrb	r3, [r1, r3]
 8007080:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007084:	4618      	mov	r0, r3
 8007086:	bd80      	pop	{r7, pc}
 8007088:	40023800 	.word	0x40023800
 800708c:	08008c4c 	.word	0x08008c4c

08007090 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007090:	b580      	push	{r7, lr}
 8007092:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007094:	f7ff ffdc 	bl	8007050 <HAL_RCC_GetHCLKFreq>
 8007098:	4602      	mov	r2, r0
 800709a:	4b05      	ldr	r3, [pc, #20]	; (80070b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800709c:	689b      	ldr	r3, [r3, #8]
 800709e:	0b5b      	lsrs	r3, r3, #13
 80070a0:	f003 0307 	and.w	r3, r3, #7
 80070a4:	4903      	ldr	r1, [pc, #12]	; (80070b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80070a6:	5ccb      	ldrb	r3, [r1, r3]
 80070a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80070ac:	4618      	mov	r0, r3
 80070ae:	bd80      	pop	{r7, pc}
 80070b0:	40023800 	.word	0x40023800
 80070b4:	08008c4c 	.word	0x08008c4c

080070b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b088      	sub	sp, #32
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80070c0:	2300      	movs	r3, #0
 80070c2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80070c4:	2300      	movs	r3, #0
 80070c6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80070c8:	2300      	movs	r3, #0
 80070ca:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80070cc:	2300      	movs	r3, #0
 80070ce:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80070d0:	2300      	movs	r3, #0
 80070d2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f003 0301 	and.w	r3, r3, #1
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d012      	beq.n	8007106 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80070e0:	4b69      	ldr	r3, [pc, #420]	; (8007288 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80070e2:	689b      	ldr	r3, [r3, #8]
 80070e4:	4a68      	ldr	r2, [pc, #416]	; (8007288 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80070e6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80070ea:	6093      	str	r3, [r2, #8]
 80070ec:	4b66      	ldr	r3, [pc, #408]	; (8007288 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80070ee:	689a      	ldr	r2, [r3, #8]
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070f4:	4964      	ldr	r1, [pc, #400]	; (8007288 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80070f6:	4313      	orrs	r3, r2
 80070f8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d101      	bne.n	8007106 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8007102:	2301      	movs	r3, #1
 8007104:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800710e:	2b00      	cmp	r3, #0
 8007110:	d017      	beq.n	8007142 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007112:	4b5d      	ldr	r3, [pc, #372]	; (8007288 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007114:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007118:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007120:	4959      	ldr	r1, [pc, #356]	; (8007288 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007122:	4313      	orrs	r3, r2
 8007124:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800712c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007130:	d101      	bne.n	8007136 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8007132:	2301      	movs	r3, #1
 8007134:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800713a:	2b00      	cmp	r3, #0
 800713c:	d101      	bne.n	8007142 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800713e:	2301      	movs	r3, #1
 8007140:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800714a:	2b00      	cmp	r3, #0
 800714c:	d017      	beq.n	800717e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800714e:	4b4e      	ldr	r3, [pc, #312]	; (8007288 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007150:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007154:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800715c:	494a      	ldr	r1, [pc, #296]	; (8007288 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800715e:	4313      	orrs	r3, r2
 8007160:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007168:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800716c:	d101      	bne.n	8007172 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800716e:	2301      	movs	r3, #1
 8007170:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007176:	2b00      	cmp	r3, #0
 8007178:	d101      	bne.n	800717e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800717a:	2301      	movs	r3, #1
 800717c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007186:	2b00      	cmp	r3, #0
 8007188:	d001      	beq.n	800718e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800718a:	2301      	movs	r3, #1
 800718c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f003 0320 	and.w	r3, r3, #32
 8007196:	2b00      	cmp	r3, #0
 8007198:	f000 808b 	beq.w	80072b2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800719c:	4b3a      	ldr	r3, [pc, #232]	; (8007288 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800719e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071a0:	4a39      	ldr	r2, [pc, #228]	; (8007288 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80071a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80071a6:	6413      	str	r3, [r2, #64]	; 0x40
 80071a8:	4b37      	ldr	r3, [pc, #220]	; (8007288 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80071aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071b0:	60bb      	str	r3, [r7, #8]
 80071b2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80071b4:	4b35      	ldr	r3, [pc, #212]	; (800728c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	4a34      	ldr	r2, [pc, #208]	; (800728c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80071ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80071be:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80071c0:	f7fc f950 	bl	8003464 <HAL_GetTick>
 80071c4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80071c6:	e008      	b.n	80071da <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80071c8:	f7fc f94c 	bl	8003464 <HAL_GetTick>
 80071cc:	4602      	mov	r2, r0
 80071ce:	697b      	ldr	r3, [r7, #20]
 80071d0:	1ad3      	subs	r3, r2, r3
 80071d2:	2b64      	cmp	r3, #100	; 0x64
 80071d4:	d901      	bls.n	80071da <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80071d6:	2303      	movs	r3, #3
 80071d8:	e357      	b.n	800788a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80071da:	4b2c      	ldr	r3, [pc, #176]	; (800728c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d0f0      	beq.n	80071c8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80071e6:	4b28      	ldr	r3, [pc, #160]	; (8007288 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80071e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80071ee:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80071f0:	693b      	ldr	r3, [r7, #16]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d035      	beq.n	8007262 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80071fe:	693a      	ldr	r2, [r7, #16]
 8007200:	429a      	cmp	r2, r3
 8007202:	d02e      	beq.n	8007262 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007204:	4b20      	ldr	r3, [pc, #128]	; (8007288 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007206:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007208:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800720c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800720e:	4b1e      	ldr	r3, [pc, #120]	; (8007288 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007210:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007212:	4a1d      	ldr	r2, [pc, #116]	; (8007288 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007214:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007218:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800721a:	4b1b      	ldr	r3, [pc, #108]	; (8007288 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800721c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800721e:	4a1a      	ldr	r2, [pc, #104]	; (8007288 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007220:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007224:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8007226:	4a18      	ldr	r2, [pc, #96]	; (8007288 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007228:	693b      	ldr	r3, [r7, #16]
 800722a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800722c:	4b16      	ldr	r3, [pc, #88]	; (8007288 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800722e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007230:	f003 0301 	and.w	r3, r3, #1
 8007234:	2b01      	cmp	r3, #1
 8007236:	d114      	bne.n	8007262 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007238:	f7fc f914 	bl	8003464 <HAL_GetTick>
 800723c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800723e:	e00a      	b.n	8007256 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007240:	f7fc f910 	bl	8003464 <HAL_GetTick>
 8007244:	4602      	mov	r2, r0
 8007246:	697b      	ldr	r3, [r7, #20]
 8007248:	1ad3      	subs	r3, r2, r3
 800724a:	f241 3288 	movw	r2, #5000	; 0x1388
 800724e:	4293      	cmp	r3, r2
 8007250:	d901      	bls.n	8007256 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8007252:	2303      	movs	r3, #3
 8007254:	e319      	b.n	800788a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007256:	4b0c      	ldr	r3, [pc, #48]	; (8007288 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007258:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800725a:	f003 0302 	and.w	r3, r3, #2
 800725e:	2b00      	cmp	r3, #0
 8007260:	d0ee      	beq.n	8007240 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007266:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800726a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800726e:	d111      	bne.n	8007294 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8007270:	4b05      	ldr	r3, [pc, #20]	; (8007288 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007272:	689b      	ldr	r3, [r3, #8]
 8007274:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800727c:	4b04      	ldr	r3, [pc, #16]	; (8007290 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800727e:	400b      	ands	r3, r1
 8007280:	4901      	ldr	r1, [pc, #4]	; (8007288 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007282:	4313      	orrs	r3, r2
 8007284:	608b      	str	r3, [r1, #8]
 8007286:	e00b      	b.n	80072a0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8007288:	40023800 	.word	0x40023800
 800728c:	40007000 	.word	0x40007000
 8007290:	0ffffcff 	.word	0x0ffffcff
 8007294:	4bb1      	ldr	r3, [pc, #708]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007296:	689b      	ldr	r3, [r3, #8]
 8007298:	4ab0      	ldr	r2, [pc, #704]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800729a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800729e:	6093      	str	r3, [r2, #8]
 80072a0:	4bae      	ldr	r3, [pc, #696]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80072a2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80072ac:	49ab      	ldr	r1, [pc, #684]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80072ae:	4313      	orrs	r3, r2
 80072b0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f003 0310 	and.w	r3, r3, #16
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d010      	beq.n	80072e0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80072be:	4ba7      	ldr	r3, [pc, #668]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80072c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80072c4:	4aa5      	ldr	r2, [pc, #660]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80072c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80072ca:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80072ce:	4ba3      	ldr	r3, [pc, #652]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80072d0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072d8:	49a0      	ldr	r1, [pc, #640]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80072da:	4313      	orrs	r3, r2
 80072dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d00a      	beq.n	8007302 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80072ec:	4b9b      	ldr	r3, [pc, #620]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80072ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072f2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80072fa:	4998      	ldr	r1, [pc, #608]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80072fc:	4313      	orrs	r3, r2
 80072fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800730a:	2b00      	cmp	r3, #0
 800730c:	d00a      	beq.n	8007324 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800730e:	4b93      	ldr	r3, [pc, #588]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007310:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007314:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800731c:	498f      	ldr	r1, [pc, #572]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800731e:	4313      	orrs	r3, r2
 8007320:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800732c:	2b00      	cmp	r3, #0
 800732e:	d00a      	beq.n	8007346 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007330:	4b8a      	ldr	r3, [pc, #552]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007332:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007336:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800733e:	4987      	ldr	r1, [pc, #540]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007340:	4313      	orrs	r3, r2
 8007342:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800734e:	2b00      	cmp	r3, #0
 8007350:	d00a      	beq.n	8007368 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007352:	4b82      	ldr	r3, [pc, #520]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007354:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007358:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007360:	497e      	ldr	r1, [pc, #504]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007362:	4313      	orrs	r3, r2
 8007364:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007370:	2b00      	cmp	r3, #0
 8007372:	d00a      	beq.n	800738a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007374:	4b79      	ldr	r3, [pc, #484]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007376:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800737a:	f023 0203 	bic.w	r2, r3, #3
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007382:	4976      	ldr	r1, [pc, #472]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007384:	4313      	orrs	r3, r2
 8007386:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007392:	2b00      	cmp	r3, #0
 8007394:	d00a      	beq.n	80073ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007396:	4b71      	ldr	r3, [pc, #452]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007398:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800739c:	f023 020c 	bic.w	r2, r3, #12
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80073a4:	496d      	ldr	r1, [pc, #436]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80073a6:	4313      	orrs	r3, r2
 80073a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d00a      	beq.n	80073ce <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80073b8:	4b68      	ldr	r3, [pc, #416]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80073ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073be:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80073c6:	4965      	ldr	r1, [pc, #404]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80073c8:	4313      	orrs	r3, r2
 80073ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d00a      	beq.n	80073f0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80073da:	4b60      	ldr	r3, [pc, #384]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80073dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073e0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073e8:	495c      	ldr	r1, [pc, #368]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80073ea:	4313      	orrs	r3, r2
 80073ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d00a      	beq.n	8007412 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80073fc:	4b57      	ldr	r3, [pc, #348]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80073fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007402:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800740a:	4954      	ldr	r1, [pc, #336]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800740c:	4313      	orrs	r3, r2
 800740e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800741a:	2b00      	cmp	r3, #0
 800741c:	d00a      	beq.n	8007434 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800741e:	4b4f      	ldr	r3, [pc, #316]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007420:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007424:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800742c:	494b      	ldr	r1, [pc, #300]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800742e:	4313      	orrs	r3, r2
 8007430:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800743c:	2b00      	cmp	r3, #0
 800743e:	d00a      	beq.n	8007456 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8007440:	4b46      	ldr	r3, [pc, #280]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007442:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007446:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800744e:	4943      	ldr	r1, [pc, #268]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007450:	4313      	orrs	r3, r2
 8007452:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800745e:	2b00      	cmp	r3, #0
 8007460:	d00a      	beq.n	8007478 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8007462:	4b3e      	ldr	r3, [pc, #248]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007464:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007468:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007470:	493a      	ldr	r1, [pc, #232]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007472:	4313      	orrs	r3, r2
 8007474:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007480:	2b00      	cmp	r3, #0
 8007482:	d00a      	beq.n	800749a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007484:	4b35      	ldr	r3, [pc, #212]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007486:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800748a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007492:	4932      	ldr	r1, [pc, #200]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007494:	4313      	orrs	r3, r2
 8007496:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d011      	beq.n	80074ca <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80074a6:	4b2d      	ldr	r3, [pc, #180]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80074a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074ac:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80074b4:	4929      	ldr	r1, [pc, #164]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80074b6:	4313      	orrs	r3, r2
 80074b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80074c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80074c4:	d101      	bne.n	80074ca <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80074c6:	2301      	movs	r3, #1
 80074c8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	f003 0308 	and.w	r3, r3, #8
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d001      	beq.n	80074da <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80074d6:	2301      	movs	r3, #1
 80074d8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d00a      	beq.n	80074fc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80074e6:	4b1d      	ldr	r3, [pc, #116]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80074e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074ec:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80074f4:	4919      	ldr	r1, [pc, #100]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80074f6:	4313      	orrs	r3, r2
 80074f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007504:	2b00      	cmp	r3, #0
 8007506:	d00b      	beq.n	8007520 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007508:	4b14      	ldr	r3, [pc, #80]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800750a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800750e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007518:	4910      	ldr	r1, [pc, #64]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800751a:	4313      	orrs	r3, r2
 800751c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007520:	69fb      	ldr	r3, [r7, #28]
 8007522:	2b01      	cmp	r3, #1
 8007524:	d006      	beq.n	8007534 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800752e:	2b00      	cmp	r3, #0
 8007530:	f000 80d9 	beq.w	80076e6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007534:	4b09      	ldr	r3, [pc, #36]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	4a08      	ldr	r2, [pc, #32]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800753a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800753e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007540:	f7fb ff90 	bl	8003464 <HAL_GetTick>
 8007544:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007546:	e00b      	b.n	8007560 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007548:	f7fb ff8c 	bl	8003464 <HAL_GetTick>
 800754c:	4602      	mov	r2, r0
 800754e:	697b      	ldr	r3, [r7, #20]
 8007550:	1ad3      	subs	r3, r2, r3
 8007552:	2b64      	cmp	r3, #100	; 0x64
 8007554:	d904      	bls.n	8007560 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007556:	2303      	movs	r3, #3
 8007558:	e197      	b.n	800788a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800755a:	bf00      	nop
 800755c:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007560:	4b6c      	ldr	r3, [pc, #432]	; (8007714 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007568:	2b00      	cmp	r3, #0
 800756a:	d1ed      	bne.n	8007548 <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f003 0301 	and.w	r3, r3, #1
 8007574:	2b00      	cmp	r3, #0
 8007576:	d021      	beq.n	80075bc <HAL_RCCEx_PeriphCLKConfig+0x504>
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800757c:	2b00      	cmp	r3, #0
 800757e:	d11d      	bne.n	80075bc <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007580:	4b64      	ldr	r3, [pc, #400]	; (8007714 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007582:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007586:	0c1b      	lsrs	r3, r3, #16
 8007588:	f003 0303 	and.w	r3, r3, #3
 800758c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800758e:	4b61      	ldr	r3, [pc, #388]	; (8007714 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007590:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007594:	0e1b      	lsrs	r3, r3, #24
 8007596:	f003 030f 	and.w	r3, r3, #15
 800759a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	685b      	ldr	r3, [r3, #4]
 80075a0:	019a      	lsls	r2, r3, #6
 80075a2:	693b      	ldr	r3, [r7, #16]
 80075a4:	041b      	lsls	r3, r3, #16
 80075a6:	431a      	orrs	r2, r3
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	061b      	lsls	r3, r3, #24
 80075ac:	431a      	orrs	r2, r3
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	689b      	ldr	r3, [r3, #8]
 80075b2:	071b      	lsls	r3, r3, #28
 80075b4:	4957      	ldr	r1, [pc, #348]	; (8007714 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80075b6:	4313      	orrs	r3, r2
 80075b8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d004      	beq.n	80075d2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80075d0:	d00a      	beq.n	80075e8 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d02e      	beq.n	800763c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80075e6:	d129      	bne.n	800763c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80075e8:	4b4a      	ldr	r3, [pc, #296]	; (8007714 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80075ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80075ee:	0c1b      	lsrs	r3, r3, #16
 80075f0:	f003 0303 	and.w	r3, r3, #3
 80075f4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80075f6:	4b47      	ldr	r3, [pc, #284]	; (8007714 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80075f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80075fc:	0f1b      	lsrs	r3, r3, #28
 80075fe:	f003 0307 	and.w	r3, r3, #7
 8007602:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	685b      	ldr	r3, [r3, #4]
 8007608:	019a      	lsls	r2, r3, #6
 800760a:	693b      	ldr	r3, [r7, #16]
 800760c:	041b      	lsls	r3, r3, #16
 800760e:	431a      	orrs	r2, r3
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	68db      	ldr	r3, [r3, #12]
 8007614:	061b      	lsls	r3, r3, #24
 8007616:	431a      	orrs	r2, r3
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	071b      	lsls	r3, r3, #28
 800761c:	493d      	ldr	r1, [pc, #244]	; (8007714 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800761e:	4313      	orrs	r3, r2
 8007620:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007624:	4b3b      	ldr	r3, [pc, #236]	; (8007714 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007626:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800762a:	f023 021f 	bic.w	r2, r3, #31
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007632:	3b01      	subs	r3, #1
 8007634:	4937      	ldr	r1, [pc, #220]	; (8007714 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007636:	4313      	orrs	r3, r2
 8007638:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007644:	2b00      	cmp	r3, #0
 8007646:	d01d      	beq.n	8007684 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007648:	4b32      	ldr	r3, [pc, #200]	; (8007714 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800764a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800764e:	0e1b      	lsrs	r3, r3, #24
 8007650:	f003 030f 	and.w	r3, r3, #15
 8007654:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007656:	4b2f      	ldr	r3, [pc, #188]	; (8007714 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007658:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800765c:	0f1b      	lsrs	r3, r3, #28
 800765e:	f003 0307 	and.w	r3, r3, #7
 8007662:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	685b      	ldr	r3, [r3, #4]
 8007668:	019a      	lsls	r2, r3, #6
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	691b      	ldr	r3, [r3, #16]
 800766e:	041b      	lsls	r3, r3, #16
 8007670:	431a      	orrs	r2, r3
 8007672:	693b      	ldr	r3, [r7, #16]
 8007674:	061b      	lsls	r3, r3, #24
 8007676:	431a      	orrs	r2, r3
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	071b      	lsls	r3, r3, #28
 800767c:	4925      	ldr	r1, [pc, #148]	; (8007714 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800767e:	4313      	orrs	r3, r2
 8007680:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800768c:	2b00      	cmp	r3, #0
 800768e:	d011      	beq.n	80076b4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	685b      	ldr	r3, [r3, #4]
 8007694:	019a      	lsls	r2, r3, #6
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	691b      	ldr	r3, [r3, #16]
 800769a:	041b      	lsls	r3, r3, #16
 800769c:	431a      	orrs	r2, r3
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	68db      	ldr	r3, [r3, #12]
 80076a2:	061b      	lsls	r3, r3, #24
 80076a4:	431a      	orrs	r2, r3
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	689b      	ldr	r3, [r3, #8]
 80076aa:	071b      	lsls	r3, r3, #28
 80076ac:	4919      	ldr	r1, [pc, #100]	; (8007714 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80076ae:	4313      	orrs	r3, r2
 80076b0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80076b4:	4b17      	ldr	r3, [pc, #92]	; (8007714 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	4a16      	ldr	r2, [pc, #88]	; (8007714 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80076ba:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80076be:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80076c0:	f7fb fed0 	bl	8003464 <HAL_GetTick>
 80076c4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80076c6:	e008      	b.n	80076da <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80076c8:	f7fb fecc 	bl	8003464 <HAL_GetTick>
 80076cc:	4602      	mov	r2, r0
 80076ce:	697b      	ldr	r3, [r7, #20]
 80076d0:	1ad3      	subs	r3, r2, r3
 80076d2:	2b64      	cmp	r3, #100	; 0x64
 80076d4:	d901      	bls.n	80076da <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80076d6:	2303      	movs	r3, #3
 80076d8:	e0d7      	b.n	800788a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80076da:	4b0e      	ldr	r3, [pc, #56]	; (8007714 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d0f0      	beq.n	80076c8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80076e6:	69bb      	ldr	r3, [r7, #24]
 80076e8:	2b01      	cmp	r3, #1
 80076ea:	f040 80cd 	bne.w	8007888 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80076ee:	4b09      	ldr	r3, [pc, #36]	; (8007714 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	4a08      	ldr	r2, [pc, #32]	; (8007714 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80076f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80076f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80076fa:	f7fb feb3 	bl	8003464 <HAL_GetTick>
 80076fe:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007700:	e00a      	b.n	8007718 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007702:	f7fb feaf 	bl	8003464 <HAL_GetTick>
 8007706:	4602      	mov	r2, r0
 8007708:	697b      	ldr	r3, [r7, #20]
 800770a:	1ad3      	subs	r3, r2, r3
 800770c:	2b64      	cmp	r3, #100	; 0x64
 800770e:	d903      	bls.n	8007718 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007710:	2303      	movs	r3, #3
 8007712:	e0ba      	b.n	800788a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8007714:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007718:	4b5e      	ldr	r3, [pc, #376]	; (8007894 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007720:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007724:	d0ed      	beq.n	8007702 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800772e:	2b00      	cmp	r3, #0
 8007730:	d003      	beq.n	800773a <HAL_RCCEx_PeriphCLKConfig+0x682>
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007736:	2b00      	cmp	r3, #0
 8007738:	d009      	beq.n	800774e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007742:	2b00      	cmp	r3, #0
 8007744:	d02e      	beq.n	80077a4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800774a:	2b00      	cmp	r3, #0
 800774c:	d12a      	bne.n	80077a4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800774e:	4b51      	ldr	r3, [pc, #324]	; (8007894 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007750:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007754:	0c1b      	lsrs	r3, r3, #16
 8007756:	f003 0303 	and.w	r3, r3, #3
 800775a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800775c:	4b4d      	ldr	r3, [pc, #308]	; (8007894 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800775e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007762:	0f1b      	lsrs	r3, r3, #28
 8007764:	f003 0307 	and.w	r3, r3, #7
 8007768:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	695b      	ldr	r3, [r3, #20]
 800776e:	019a      	lsls	r2, r3, #6
 8007770:	693b      	ldr	r3, [r7, #16]
 8007772:	041b      	lsls	r3, r3, #16
 8007774:	431a      	orrs	r2, r3
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	699b      	ldr	r3, [r3, #24]
 800777a:	061b      	lsls	r3, r3, #24
 800777c:	431a      	orrs	r2, r3
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	071b      	lsls	r3, r3, #28
 8007782:	4944      	ldr	r1, [pc, #272]	; (8007894 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007784:	4313      	orrs	r3, r2
 8007786:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800778a:	4b42      	ldr	r3, [pc, #264]	; (8007894 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800778c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007790:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007798:	3b01      	subs	r3, #1
 800779a:	021b      	lsls	r3, r3, #8
 800779c:	493d      	ldr	r1, [pc, #244]	; (8007894 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800779e:	4313      	orrs	r3, r2
 80077a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d022      	beq.n	80077f6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80077b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80077b8:	d11d      	bne.n	80077f6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80077ba:	4b36      	ldr	r3, [pc, #216]	; (8007894 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80077bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077c0:	0e1b      	lsrs	r3, r3, #24
 80077c2:	f003 030f 	and.w	r3, r3, #15
 80077c6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80077c8:	4b32      	ldr	r3, [pc, #200]	; (8007894 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80077ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077ce:	0f1b      	lsrs	r3, r3, #28
 80077d0:	f003 0307 	and.w	r3, r3, #7
 80077d4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	695b      	ldr	r3, [r3, #20]
 80077da:	019a      	lsls	r2, r3, #6
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	6a1b      	ldr	r3, [r3, #32]
 80077e0:	041b      	lsls	r3, r3, #16
 80077e2:	431a      	orrs	r2, r3
 80077e4:	693b      	ldr	r3, [r7, #16]
 80077e6:	061b      	lsls	r3, r3, #24
 80077e8:	431a      	orrs	r2, r3
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	071b      	lsls	r3, r3, #28
 80077ee:	4929      	ldr	r1, [pc, #164]	; (8007894 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80077f0:	4313      	orrs	r3, r2
 80077f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	f003 0308 	and.w	r3, r3, #8
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d028      	beq.n	8007854 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007802:	4b24      	ldr	r3, [pc, #144]	; (8007894 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007804:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007808:	0e1b      	lsrs	r3, r3, #24
 800780a:	f003 030f 	and.w	r3, r3, #15
 800780e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007810:	4b20      	ldr	r3, [pc, #128]	; (8007894 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007812:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007816:	0c1b      	lsrs	r3, r3, #16
 8007818:	f003 0303 	and.w	r3, r3, #3
 800781c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	695b      	ldr	r3, [r3, #20]
 8007822:	019a      	lsls	r2, r3, #6
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	041b      	lsls	r3, r3, #16
 8007828:	431a      	orrs	r2, r3
 800782a:	693b      	ldr	r3, [r7, #16]
 800782c:	061b      	lsls	r3, r3, #24
 800782e:	431a      	orrs	r2, r3
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	69db      	ldr	r3, [r3, #28]
 8007834:	071b      	lsls	r3, r3, #28
 8007836:	4917      	ldr	r1, [pc, #92]	; (8007894 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007838:	4313      	orrs	r3, r2
 800783a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800783e:	4b15      	ldr	r3, [pc, #84]	; (8007894 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007840:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007844:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800784c:	4911      	ldr	r1, [pc, #68]	; (8007894 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800784e:	4313      	orrs	r3, r2
 8007850:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007854:	4b0f      	ldr	r3, [pc, #60]	; (8007894 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	4a0e      	ldr	r2, [pc, #56]	; (8007894 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800785a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800785e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007860:	f7fb fe00 	bl	8003464 <HAL_GetTick>
 8007864:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007866:	e008      	b.n	800787a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007868:	f7fb fdfc 	bl	8003464 <HAL_GetTick>
 800786c:	4602      	mov	r2, r0
 800786e:	697b      	ldr	r3, [r7, #20]
 8007870:	1ad3      	subs	r3, r2, r3
 8007872:	2b64      	cmp	r3, #100	; 0x64
 8007874:	d901      	bls.n	800787a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007876:	2303      	movs	r3, #3
 8007878:	e007      	b.n	800788a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800787a:	4b06      	ldr	r3, [pc, #24]	; (8007894 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007882:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007886:	d1ef      	bne.n	8007868 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8007888:	2300      	movs	r3, #0
}
 800788a:	4618      	mov	r0, r3
 800788c:	3720      	adds	r7, #32
 800788e:	46bd      	mov	sp, r7
 8007890:	bd80      	pop	{r7, pc}
 8007892:	bf00      	nop
 8007894:	40023800 	.word	0x40023800

08007898 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b082      	sub	sp, #8
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
 80078a0:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d101      	bne.n	80078ac <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80078a8:	2301      	movs	r3, #1
 80078aa:	e025      	b.n	80078f8 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80078b2:	b2db      	uxtb	r3, r3
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d106      	bne.n	80078c6 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2200      	movs	r2, #0
 80078bc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80078c0:	6878      	ldr	r0, [r7, #4]
 80078c2:	f7fb fb57 	bl	8002f74 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	2202      	movs	r2, #2
 80078ca:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681a      	ldr	r2, [r3, #0]
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	3304      	adds	r3, #4
 80078d6:	4619      	mov	r1, r3
 80078d8:	4610      	mov	r0, r2
 80078da:	f000 fd4b 	bl	8008374 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	6818      	ldr	r0, [r3, #0]
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	685b      	ldr	r3, [r3, #4]
 80078e6:	461a      	mov	r2, r3
 80078e8:	6839      	ldr	r1, [r7, #0]
 80078ea:	f000 fd9f 	bl	800842c <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	2201      	movs	r2, #1
 80078f2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80078f6:	2300      	movs	r3, #0
}
 80078f8:	4618      	mov	r0, r3
 80078fa:	3708      	adds	r7, #8
 80078fc:	46bd      	mov	sp, r7
 80078fe:	bd80      	pop	{r7, pc}

08007900 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8007900:	b580      	push	{r7, lr}
 8007902:	b086      	sub	sp, #24
 8007904:	af00      	add	r7, sp, #0
 8007906:	60f8      	str	r0, [r7, #12]
 8007908:	60b9      	str	r1, [r7, #8]
 800790a:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007912:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8007914:	7dfb      	ldrb	r3, [r7, #23]
 8007916:	2b02      	cmp	r3, #2
 8007918:	d101      	bne.n	800791e <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 800791a:	2302      	movs	r3, #2
 800791c:	e021      	b.n	8007962 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800791e:	7dfb      	ldrb	r3, [r7, #23]
 8007920:	2b01      	cmp	r3, #1
 8007922:	d002      	beq.n	800792a <HAL_SDRAM_SendCommand+0x2a>
 8007924:	7dfb      	ldrb	r3, [r7, #23]
 8007926:	2b05      	cmp	r3, #5
 8007928:	d118      	bne.n	800795c <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	2202      	movs	r2, #2
 800792e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	687a      	ldr	r2, [r7, #4]
 8007938:	68b9      	ldr	r1, [r7, #8]
 800793a:	4618      	mov	r0, r3
 800793c:	f000 fde0 	bl	8008500 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8007940:	68bb      	ldr	r3, [r7, #8]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	2b02      	cmp	r3, #2
 8007946:	d104      	bne.n	8007952 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	2205      	movs	r2, #5
 800794c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8007950:	e006      	b.n	8007960 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	2201      	movs	r2, #1
 8007956:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800795a:	e001      	b.n	8007960 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 800795c:	2301      	movs	r3, #1
 800795e:	e000      	b.n	8007962 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8007960:	2300      	movs	r3, #0
}
 8007962:	4618      	mov	r0, r3
 8007964:	3718      	adds	r7, #24
 8007966:	46bd      	mov	sp, r7
 8007968:	bd80      	pop	{r7, pc}

0800796a <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800796a:	b580      	push	{r7, lr}
 800796c:	b082      	sub	sp, #8
 800796e:	af00      	add	r7, sp, #0
 8007970:	6078      	str	r0, [r7, #4]
 8007972:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800797a:	b2db      	uxtb	r3, r3
 800797c:	2b02      	cmp	r3, #2
 800797e:	d101      	bne.n	8007984 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8007980:	2302      	movs	r3, #2
 8007982:	e016      	b.n	80079b2 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800798a:	b2db      	uxtb	r3, r3
 800798c:	2b01      	cmp	r3, #1
 800798e:	d10f      	bne.n	80079b0 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2202      	movs	r2, #2
 8007994:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	6839      	ldr	r1, [r7, #0]
 800799e:	4618      	mov	r0, r3
 80079a0:	f000 fdd2 	bl	8008548 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2201      	movs	r2, #1
 80079a8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 80079ac:	2300      	movs	r3, #0
 80079ae:	e000      	b.n	80079b2 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 80079b0:	2301      	movs	r3, #1
}
 80079b2:	4618      	mov	r0, r3
 80079b4:	3708      	adds	r7, #8
 80079b6:	46bd      	mov	sp, r7
 80079b8:	bd80      	pop	{r7, pc}

080079ba <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80079ba:	b580      	push	{r7, lr}
 80079bc:	b082      	sub	sp, #8
 80079be:	af00      	add	r7, sp, #0
 80079c0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d101      	bne.n	80079cc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80079c8:	2301      	movs	r3, #1
 80079ca:	e040      	b.n	8007a4e <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d106      	bne.n	80079e2 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	2200      	movs	r2, #0
 80079d8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80079dc:	6878      	ldr	r0, [r7, #4]
 80079de:	f7fb f9b7 	bl	8002d50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	2224      	movs	r2, #36	; 0x24
 80079e6:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	681a      	ldr	r2, [r3, #0]
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	f022 0201 	bic.w	r2, r2, #1
 80079f6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80079f8:	6878      	ldr	r0, [r7, #4]
 80079fa:	f000 f8bf 	bl	8007b7c <UART_SetConfig>
 80079fe:	4603      	mov	r3, r0
 8007a00:	2b01      	cmp	r3, #1
 8007a02:	d101      	bne.n	8007a08 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007a04:	2301      	movs	r3, #1
 8007a06:	e022      	b.n	8007a4e <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d002      	beq.n	8007a16 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8007a10:	6878      	ldr	r0, [r7, #4]
 8007a12:	f000 fb15 	bl	8008040 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	685a      	ldr	r2, [r3, #4]
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007a24:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	689a      	ldr	r2, [r3, #8]
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007a34:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	681a      	ldr	r2, [r3, #0]
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	f042 0201 	orr.w	r2, r2, #1
 8007a44:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007a46:	6878      	ldr	r0, [r7, #4]
 8007a48:	f000 fb9c 	bl	8008184 <UART_CheckIdleState>
 8007a4c:	4603      	mov	r3, r0
}
 8007a4e:	4618      	mov	r0, r3
 8007a50:	3708      	adds	r7, #8
 8007a52:	46bd      	mov	sp, r7
 8007a54:	bd80      	pop	{r7, pc}

08007a56 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007a56:	b580      	push	{r7, lr}
 8007a58:	b08a      	sub	sp, #40	; 0x28
 8007a5a:	af02      	add	r7, sp, #8
 8007a5c:	60f8      	str	r0, [r7, #12]
 8007a5e:	60b9      	str	r1, [r7, #8]
 8007a60:	603b      	str	r3, [r7, #0]
 8007a62:	4613      	mov	r3, r2
 8007a64:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007a6a:	2b20      	cmp	r3, #32
 8007a6c:	f040 8081 	bne.w	8007b72 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007a70:	68bb      	ldr	r3, [r7, #8]
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d002      	beq.n	8007a7c <HAL_UART_Transmit+0x26>
 8007a76:	88fb      	ldrh	r3, [r7, #6]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d101      	bne.n	8007a80 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007a7c:	2301      	movs	r3, #1
 8007a7e:	e079      	b.n	8007b74 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8007a86:	2b01      	cmp	r3, #1
 8007a88:	d101      	bne.n	8007a8e <HAL_UART_Transmit+0x38>
 8007a8a:	2302      	movs	r3, #2
 8007a8c:	e072      	b.n	8007b74 <HAL_UART_Transmit+0x11e>
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	2201      	movs	r2, #1
 8007a92:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	2200      	movs	r2, #0
 8007a9a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	2221      	movs	r2, #33	; 0x21
 8007aa2:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007aa4:	f7fb fcde 	bl	8003464 <HAL_GetTick>
 8007aa8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	88fa      	ldrh	r2, [r7, #6]
 8007aae:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	88fa      	ldrh	r2, [r7, #6]
 8007ab6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	689b      	ldr	r3, [r3, #8]
 8007abe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ac2:	d108      	bne.n	8007ad6 <HAL_UART_Transmit+0x80>
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	691b      	ldr	r3, [r3, #16]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d104      	bne.n	8007ad6 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8007acc:	2300      	movs	r3, #0
 8007ace:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007ad0:	68bb      	ldr	r3, [r7, #8]
 8007ad2:	61bb      	str	r3, [r7, #24]
 8007ad4:	e003      	b.n	8007ade <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8007ad6:	68bb      	ldr	r3, [r7, #8]
 8007ad8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007ada:	2300      	movs	r3, #0
 8007adc:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8007ae6:	e02c      	b.n	8007b42 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007ae8:	683b      	ldr	r3, [r7, #0]
 8007aea:	9300      	str	r3, [sp, #0]
 8007aec:	697b      	ldr	r3, [r7, #20]
 8007aee:	2200      	movs	r2, #0
 8007af0:	2180      	movs	r1, #128	; 0x80
 8007af2:	68f8      	ldr	r0, [r7, #12]
 8007af4:	f000 fb79 	bl	80081ea <UART_WaitOnFlagUntilTimeout>
 8007af8:	4603      	mov	r3, r0
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d001      	beq.n	8007b02 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8007afe:	2303      	movs	r3, #3
 8007b00:	e038      	b.n	8007b74 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8007b02:	69fb      	ldr	r3, [r7, #28]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d10b      	bne.n	8007b20 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007b08:	69bb      	ldr	r3, [r7, #24]
 8007b0a:	881b      	ldrh	r3, [r3, #0]
 8007b0c:	461a      	mov	r2, r3
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007b16:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007b18:	69bb      	ldr	r3, [r7, #24]
 8007b1a:	3302      	adds	r3, #2
 8007b1c:	61bb      	str	r3, [r7, #24]
 8007b1e:	e007      	b.n	8007b30 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007b20:	69fb      	ldr	r3, [r7, #28]
 8007b22:	781a      	ldrb	r2, [r3, #0]
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007b2a:	69fb      	ldr	r3, [r7, #28]
 8007b2c:	3301      	adds	r3, #1
 8007b2e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007b36:	b29b      	uxth	r3, r3
 8007b38:	3b01      	subs	r3, #1
 8007b3a:	b29a      	uxth	r2, r3
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007b48:	b29b      	uxth	r3, r3
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d1cc      	bne.n	8007ae8 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007b4e:	683b      	ldr	r3, [r7, #0]
 8007b50:	9300      	str	r3, [sp, #0]
 8007b52:	697b      	ldr	r3, [r7, #20]
 8007b54:	2200      	movs	r2, #0
 8007b56:	2140      	movs	r1, #64	; 0x40
 8007b58:	68f8      	ldr	r0, [r7, #12]
 8007b5a:	f000 fb46 	bl	80081ea <UART_WaitOnFlagUntilTimeout>
 8007b5e:	4603      	mov	r3, r0
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d001      	beq.n	8007b68 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8007b64:	2303      	movs	r3, #3
 8007b66:	e005      	b.n	8007b74 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	2220      	movs	r2, #32
 8007b6c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8007b6e:	2300      	movs	r3, #0
 8007b70:	e000      	b.n	8007b74 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8007b72:	2302      	movs	r3, #2
  }
}
 8007b74:	4618      	mov	r0, r3
 8007b76:	3720      	adds	r7, #32
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	bd80      	pop	{r7, pc}

08007b7c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	b088      	sub	sp, #32
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007b84:	2300      	movs	r3, #0
 8007b86:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	689a      	ldr	r2, [r3, #8]
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	691b      	ldr	r3, [r3, #16]
 8007b90:	431a      	orrs	r2, r3
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	695b      	ldr	r3, [r3, #20]
 8007b96:	431a      	orrs	r2, r3
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	69db      	ldr	r3, [r3, #28]
 8007b9c:	4313      	orrs	r3, r2
 8007b9e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	681a      	ldr	r2, [r3, #0]
 8007ba6:	4ba7      	ldr	r3, [pc, #668]	; (8007e44 <UART_SetConfig+0x2c8>)
 8007ba8:	4013      	ands	r3, r2
 8007baa:	687a      	ldr	r2, [r7, #4]
 8007bac:	6812      	ldr	r2, [r2, #0]
 8007bae:	6979      	ldr	r1, [r7, #20]
 8007bb0:	430b      	orrs	r3, r1
 8007bb2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	685b      	ldr	r3, [r3, #4]
 8007bba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	68da      	ldr	r2, [r3, #12]
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	430a      	orrs	r2, r1
 8007bc8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	699b      	ldr	r3, [r3, #24]
 8007bce:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	6a1b      	ldr	r3, [r3, #32]
 8007bd4:	697a      	ldr	r2, [r7, #20]
 8007bd6:	4313      	orrs	r3, r2
 8007bd8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	689b      	ldr	r3, [r3, #8]
 8007be0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	697a      	ldr	r2, [r7, #20]
 8007bea:	430a      	orrs	r2, r1
 8007bec:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	4a95      	ldr	r2, [pc, #596]	; (8007e48 <UART_SetConfig+0x2cc>)
 8007bf4:	4293      	cmp	r3, r2
 8007bf6:	d120      	bne.n	8007c3a <UART_SetConfig+0xbe>
 8007bf8:	4b94      	ldr	r3, [pc, #592]	; (8007e4c <UART_SetConfig+0x2d0>)
 8007bfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bfe:	f003 0303 	and.w	r3, r3, #3
 8007c02:	2b03      	cmp	r3, #3
 8007c04:	d816      	bhi.n	8007c34 <UART_SetConfig+0xb8>
 8007c06:	a201      	add	r2, pc, #4	; (adr r2, 8007c0c <UART_SetConfig+0x90>)
 8007c08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c0c:	08007c1d 	.word	0x08007c1d
 8007c10:	08007c29 	.word	0x08007c29
 8007c14:	08007c23 	.word	0x08007c23
 8007c18:	08007c2f 	.word	0x08007c2f
 8007c1c:	2301      	movs	r3, #1
 8007c1e:	77fb      	strb	r3, [r7, #31]
 8007c20:	e14f      	b.n	8007ec2 <UART_SetConfig+0x346>
 8007c22:	2302      	movs	r3, #2
 8007c24:	77fb      	strb	r3, [r7, #31]
 8007c26:	e14c      	b.n	8007ec2 <UART_SetConfig+0x346>
 8007c28:	2304      	movs	r3, #4
 8007c2a:	77fb      	strb	r3, [r7, #31]
 8007c2c:	e149      	b.n	8007ec2 <UART_SetConfig+0x346>
 8007c2e:	2308      	movs	r3, #8
 8007c30:	77fb      	strb	r3, [r7, #31]
 8007c32:	e146      	b.n	8007ec2 <UART_SetConfig+0x346>
 8007c34:	2310      	movs	r3, #16
 8007c36:	77fb      	strb	r3, [r7, #31]
 8007c38:	e143      	b.n	8007ec2 <UART_SetConfig+0x346>
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	4a84      	ldr	r2, [pc, #528]	; (8007e50 <UART_SetConfig+0x2d4>)
 8007c40:	4293      	cmp	r3, r2
 8007c42:	d132      	bne.n	8007caa <UART_SetConfig+0x12e>
 8007c44:	4b81      	ldr	r3, [pc, #516]	; (8007e4c <UART_SetConfig+0x2d0>)
 8007c46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c4a:	f003 030c 	and.w	r3, r3, #12
 8007c4e:	2b0c      	cmp	r3, #12
 8007c50:	d828      	bhi.n	8007ca4 <UART_SetConfig+0x128>
 8007c52:	a201      	add	r2, pc, #4	; (adr r2, 8007c58 <UART_SetConfig+0xdc>)
 8007c54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c58:	08007c8d 	.word	0x08007c8d
 8007c5c:	08007ca5 	.word	0x08007ca5
 8007c60:	08007ca5 	.word	0x08007ca5
 8007c64:	08007ca5 	.word	0x08007ca5
 8007c68:	08007c99 	.word	0x08007c99
 8007c6c:	08007ca5 	.word	0x08007ca5
 8007c70:	08007ca5 	.word	0x08007ca5
 8007c74:	08007ca5 	.word	0x08007ca5
 8007c78:	08007c93 	.word	0x08007c93
 8007c7c:	08007ca5 	.word	0x08007ca5
 8007c80:	08007ca5 	.word	0x08007ca5
 8007c84:	08007ca5 	.word	0x08007ca5
 8007c88:	08007c9f 	.word	0x08007c9f
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	77fb      	strb	r3, [r7, #31]
 8007c90:	e117      	b.n	8007ec2 <UART_SetConfig+0x346>
 8007c92:	2302      	movs	r3, #2
 8007c94:	77fb      	strb	r3, [r7, #31]
 8007c96:	e114      	b.n	8007ec2 <UART_SetConfig+0x346>
 8007c98:	2304      	movs	r3, #4
 8007c9a:	77fb      	strb	r3, [r7, #31]
 8007c9c:	e111      	b.n	8007ec2 <UART_SetConfig+0x346>
 8007c9e:	2308      	movs	r3, #8
 8007ca0:	77fb      	strb	r3, [r7, #31]
 8007ca2:	e10e      	b.n	8007ec2 <UART_SetConfig+0x346>
 8007ca4:	2310      	movs	r3, #16
 8007ca6:	77fb      	strb	r3, [r7, #31]
 8007ca8:	e10b      	b.n	8007ec2 <UART_SetConfig+0x346>
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	4a69      	ldr	r2, [pc, #420]	; (8007e54 <UART_SetConfig+0x2d8>)
 8007cb0:	4293      	cmp	r3, r2
 8007cb2:	d120      	bne.n	8007cf6 <UART_SetConfig+0x17a>
 8007cb4:	4b65      	ldr	r3, [pc, #404]	; (8007e4c <UART_SetConfig+0x2d0>)
 8007cb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cba:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007cbe:	2b30      	cmp	r3, #48	; 0x30
 8007cc0:	d013      	beq.n	8007cea <UART_SetConfig+0x16e>
 8007cc2:	2b30      	cmp	r3, #48	; 0x30
 8007cc4:	d814      	bhi.n	8007cf0 <UART_SetConfig+0x174>
 8007cc6:	2b20      	cmp	r3, #32
 8007cc8:	d009      	beq.n	8007cde <UART_SetConfig+0x162>
 8007cca:	2b20      	cmp	r3, #32
 8007ccc:	d810      	bhi.n	8007cf0 <UART_SetConfig+0x174>
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d002      	beq.n	8007cd8 <UART_SetConfig+0x15c>
 8007cd2:	2b10      	cmp	r3, #16
 8007cd4:	d006      	beq.n	8007ce4 <UART_SetConfig+0x168>
 8007cd6:	e00b      	b.n	8007cf0 <UART_SetConfig+0x174>
 8007cd8:	2300      	movs	r3, #0
 8007cda:	77fb      	strb	r3, [r7, #31]
 8007cdc:	e0f1      	b.n	8007ec2 <UART_SetConfig+0x346>
 8007cde:	2302      	movs	r3, #2
 8007ce0:	77fb      	strb	r3, [r7, #31]
 8007ce2:	e0ee      	b.n	8007ec2 <UART_SetConfig+0x346>
 8007ce4:	2304      	movs	r3, #4
 8007ce6:	77fb      	strb	r3, [r7, #31]
 8007ce8:	e0eb      	b.n	8007ec2 <UART_SetConfig+0x346>
 8007cea:	2308      	movs	r3, #8
 8007cec:	77fb      	strb	r3, [r7, #31]
 8007cee:	e0e8      	b.n	8007ec2 <UART_SetConfig+0x346>
 8007cf0:	2310      	movs	r3, #16
 8007cf2:	77fb      	strb	r3, [r7, #31]
 8007cf4:	e0e5      	b.n	8007ec2 <UART_SetConfig+0x346>
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	4a57      	ldr	r2, [pc, #348]	; (8007e58 <UART_SetConfig+0x2dc>)
 8007cfc:	4293      	cmp	r3, r2
 8007cfe:	d120      	bne.n	8007d42 <UART_SetConfig+0x1c6>
 8007d00:	4b52      	ldr	r3, [pc, #328]	; (8007e4c <UART_SetConfig+0x2d0>)
 8007d02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d06:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007d0a:	2bc0      	cmp	r3, #192	; 0xc0
 8007d0c:	d013      	beq.n	8007d36 <UART_SetConfig+0x1ba>
 8007d0e:	2bc0      	cmp	r3, #192	; 0xc0
 8007d10:	d814      	bhi.n	8007d3c <UART_SetConfig+0x1c0>
 8007d12:	2b80      	cmp	r3, #128	; 0x80
 8007d14:	d009      	beq.n	8007d2a <UART_SetConfig+0x1ae>
 8007d16:	2b80      	cmp	r3, #128	; 0x80
 8007d18:	d810      	bhi.n	8007d3c <UART_SetConfig+0x1c0>
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d002      	beq.n	8007d24 <UART_SetConfig+0x1a8>
 8007d1e:	2b40      	cmp	r3, #64	; 0x40
 8007d20:	d006      	beq.n	8007d30 <UART_SetConfig+0x1b4>
 8007d22:	e00b      	b.n	8007d3c <UART_SetConfig+0x1c0>
 8007d24:	2300      	movs	r3, #0
 8007d26:	77fb      	strb	r3, [r7, #31]
 8007d28:	e0cb      	b.n	8007ec2 <UART_SetConfig+0x346>
 8007d2a:	2302      	movs	r3, #2
 8007d2c:	77fb      	strb	r3, [r7, #31]
 8007d2e:	e0c8      	b.n	8007ec2 <UART_SetConfig+0x346>
 8007d30:	2304      	movs	r3, #4
 8007d32:	77fb      	strb	r3, [r7, #31]
 8007d34:	e0c5      	b.n	8007ec2 <UART_SetConfig+0x346>
 8007d36:	2308      	movs	r3, #8
 8007d38:	77fb      	strb	r3, [r7, #31]
 8007d3a:	e0c2      	b.n	8007ec2 <UART_SetConfig+0x346>
 8007d3c:	2310      	movs	r3, #16
 8007d3e:	77fb      	strb	r3, [r7, #31]
 8007d40:	e0bf      	b.n	8007ec2 <UART_SetConfig+0x346>
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	4a45      	ldr	r2, [pc, #276]	; (8007e5c <UART_SetConfig+0x2e0>)
 8007d48:	4293      	cmp	r3, r2
 8007d4a:	d125      	bne.n	8007d98 <UART_SetConfig+0x21c>
 8007d4c:	4b3f      	ldr	r3, [pc, #252]	; (8007e4c <UART_SetConfig+0x2d0>)
 8007d4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d56:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007d5a:	d017      	beq.n	8007d8c <UART_SetConfig+0x210>
 8007d5c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007d60:	d817      	bhi.n	8007d92 <UART_SetConfig+0x216>
 8007d62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d66:	d00b      	beq.n	8007d80 <UART_SetConfig+0x204>
 8007d68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d6c:	d811      	bhi.n	8007d92 <UART_SetConfig+0x216>
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d003      	beq.n	8007d7a <UART_SetConfig+0x1fe>
 8007d72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d76:	d006      	beq.n	8007d86 <UART_SetConfig+0x20a>
 8007d78:	e00b      	b.n	8007d92 <UART_SetConfig+0x216>
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	77fb      	strb	r3, [r7, #31]
 8007d7e:	e0a0      	b.n	8007ec2 <UART_SetConfig+0x346>
 8007d80:	2302      	movs	r3, #2
 8007d82:	77fb      	strb	r3, [r7, #31]
 8007d84:	e09d      	b.n	8007ec2 <UART_SetConfig+0x346>
 8007d86:	2304      	movs	r3, #4
 8007d88:	77fb      	strb	r3, [r7, #31]
 8007d8a:	e09a      	b.n	8007ec2 <UART_SetConfig+0x346>
 8007d8c:	2308      	movs	r3, #8
 8007d8e:	77fb      	strb	r3, [r7, #31]
 8007d90:	e097      	b.n	8007ec2 <UART_SetConfig+0x346>
 8007d92:	2310      	movs	r3, #16
 8007d94:	77fb      	strb	r3, [r7, #31]
 8007d96:	e094      	b.n	8007ec2 <UART_SetConfig+0x346>
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	4a30      	ldr	r2, [pc, #192]	; (8007e60 <UART_SetConfig+0x2e4>)
 8007d9e:	4293      	cmp	r3, r2
 8007da0:	d125      	bne.n	8007dee <UART_SetConfig+0x272>
 8007da2:	4b2a      	ldr	r3, [pc, #168]	; (8007e4c <UART_SetConfig+0x2d0>)
 8007da4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007da8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007dac:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007db0:	d017      	beq.n	8007de2 <UART_SetConfig+0x266>
 8007db2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007db6:	d817      	bhi.n	8007de8 <UART_SetConfig+0x26c>
 8007db8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007dbc:	d00b      	beq.n	8007dd6 <UART_SetConfig+0x25a>
 8007dbe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007dc2:	d811      	bhi.n	8007de8 <UART_SetConfig+0x26c>
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d003      	beq.n	8007dd0 <UART_SetConfig+0x254>
 8007dc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007dcc:	d006      	beq.n	8007ddc <UART_SetConfig+0x260>
 8007dce:	e00b      	b.n	8007de8 <UART_SetConfig+0x26c>
 8007dd0:	2301      	movs	r3, #1
 8007dd2:	77fb      	strb	r3, [r7, #31]
 8007dd4:	e075      	b.n	8007ec2 <UART_SetConfig+0x346>
 8007dd6:	2302      	movs	r3, #2
 8007dd8:	77fb      	strb	r3, [r7, #31]
 8007dda:	e072      	b.n	8007ec2 <UART_SetConfig+0x346>
 8007ddc:	2304      	movs	r3, #4
 8007dde:	77fb      	strb	r3, [r7, #31]
 8007de0:	e06f      	b.n	8007ec2 <UART_SetConfig+0x346>
 8007de2:	2308      	movs	r3, #8
 8007de4:	77fb      	strb	r3, [r7, #31]
 8007de6:	e06c      	b.n	8007ec2 <UART_SetConfig+0x346>
 8007de8:	2310      	movs	r3, #16
 8007dea:	77fb      	strb	r3, [r7, #31]
 8007dec:	e069      	b.n	8007ec2 <UART_SetConfig+0x346>
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	4a1c      	ldr	r2, [pc, #112]	; (8007e64 <UART_SetConfig+0x2e8>)
 8007df4:	4293      	cmp	r3, r2
 8007df6:	d137      	bne.n	8007e68 <UART_SetConfig+0x2ec>
 8007df8:	4b14      	ldr	r3, [pc, #80]	; (8007e4c <UART_SetConfig+0x2d0>)
 8007dfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007dfe:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007e02:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007e06:	d017      	beq.n	8007e38 <UART_SetConfig+0x2bc>
 8007e08:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007e0c:	d817      	bhi.n	8007e3e <UART_SetConfig+0x2c2>
 8007e0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e12:	d00b      	beq.n	8007e2c <UART_SetConfig+0x2b0>
 8007e14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e18:	d811      	bhi.n	8007e3e <UART_SetConfig+0x2c2>
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d003      	beq.n	8007e26 <UART_SetConfig+0x2aa>
 8007e1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e22:	d006      	beq.n	8007e32 <UART_SetConfig+0x2b6>
 8007e24:	e00b      	b.n	8007e3e <UART_SetConfig+0x2c2>
 8007e26:	2300      	movs	r3, #0
 8007e28:	77fb      	strb	r3, [r7, #31]
 8007e2a:	e04a      	b.n	8007ec2 <UART_SetConfig+0x346>
 8007e2c:	2302      	movs	r3, #2
 8007e2e:	77fb      	strb	r3, [r7, #31]
 8007e30:	e047      	b.n	8007ec2 <UART_SetConfig+0x346>
 8007e32:	2304      	movs	r3, #4
 8007e34:	77fb      	strb	r3, [r7, #31]
 8007e36:	e044      	b.n	8007ec2 <UART_SetConfig+0x346>
 8007e38:	2308      	movs	r3, #8
 8007e3a:	77fb      	strb	r3, [r7, #31]
 8007e3c:	e041      	b.n	8007ec2 <UART_SetConfig+0x346>
 8007e3e:	2310      	movs	r3, #16
 8007e40:	77fb      	strb	r3, [r7, #31]
 8007e42:	e03e      	b.n	8007ec2 <UART_SetConfig+0x346>
 8007e44:	efff69f3 	.word	0xefff69f3
 8007e48:	40011000 	.word	0x40011000
 8007e4c:	40023800 	.word	0x40023800
 8007e50:	40004400 	.word	0x40004400
 8007e54:	40004800 	.word	0x40004800
 8007e58:	40004c00 	.word	0x40004c00
 8007e5c:	40005000 	.word	0x40005000
 8007e60:	40011400 	.word	0x40011400
 8007e64:	40007800 	.word	0x40007800
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	4a71      	ldr	r2, [pc, #452]	; (8008034 <UART_SetConfig+0x4b8>)
 8007e6e:	4293      	cmp	r3, r2
 8007e70:	d125      	bne.n	8007ebe <UART_SetConfig+0x342>
 8007e72:	4b71      	ldr	r3, [pc, #452]	; (8008038 <UART_SetConfig+0x4bc>)
 8007e74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e78:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007e7c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007e80:	d017      	beq.n	8007eb2 <UART_SetConfig+0x336>
 8007e82:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007e86:	d817      	bhi.n	8007eb8 <UART_SetConfig+0x33c>
 8007e88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007e8c:	d00b      	beq.n	8007ea6 <UART_SetConfig+0x32a>
 8007e8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007e92:	d811      	bhi.n	8007eb8 <UART_SetConfig+0x33c>
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d003      	beq.n	8007ea0 <UART_SetConfig+0x324>
 8007e98:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007e9c:	d006      	beq.n	8007eac <UART_SetConfig+0x330>
 8007e9e:	e00b      	b.n	8007eb8 <UART_SetConfig+0x33c>
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	77fb      	strb	r3, [r7, #31]
 8007ea4:	e00d      	b.n	8007ec2 <UART_SetConfig+0x346>
 8007ea6:	2302      	movs	r3, #2
 8007ea8:	77fb      	strb	r3, [r7, #31]
 8007eaa:	e00a      	b.n	8007ec2 <UART_SetConfig+0x346>
 8007eac:	2304      	movs	r3, #4
 8007eae:	77fb      	strb	r3, [r7, #31]
 8007eb0:	e007      	b.n	8007ec2 <UART_SetConfig+0x346>
 8007eb2:	2308      	movs	r3, #8
 8007eb4:	77fb      	strb	r3, [r7, #31]
 8007eb6:	e004      	b.n	8007ec2 <UART_SetConfig+0x346>
 8007eb8:	2310      	movs	r3, #16
 8007eba:	77fb      	strb	r3, [r7, #31]
 8007ebc:	e001      	b.n	8007ec2 <UART_SetConfig+0x346>
 8007ebe:	2310      	movs	r3, #16
 8007ec0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	69db      	ldr	r3, [r3, #28]
 8007ec6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007eca:	d15a      	bne.n	8007f82 <UART_SetConfig+0x406>
  {
    switch (clocksource)
 8007ecc:	7ffb      	ldrb	r3, [r7, #31]
 8007ece:	2b08      	cmp	r3, #8
 8007ed0:	d827      	bhi.n	8007f22 <UART_SetConfig+0x3a6>
 8007ed2:	a201      	add	r2, pc, #4	; (adr r2, 8007ed8 <UART_SetConfig+0x35c>)
 8007ed4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ed8:	08007efd 	.word	0x08007efd
 8007edc:	08007f05 	.word	0x08007f05
 8007ee0:	08007f0d 	.word	0x08007f0d
 8007ee4:	08007f23 	.word	0x08007f23
 8007ee8:	08007f13 	.word	0x08007f13
 8007eec:	08007f23 	.word	0x08007f23
 8007ef0:	08007f23 	.word	0x08007f23
 8007ef4:	08007f23 	.word	0x08007f23
 8007ef8:	08007f1b 	.word	0x08007f1b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007efc:	f7ff f8b4 	bl	8007068 <HAL_RCC_GetPCLK1Freq>
 8007f00:	61b8      	str	r0, [r7, #24]
        break;
 8007f02:	e013      	b.n	8007f2c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007f04:	f7ff f8c4 	bl	8007090 <HAL_RCC_GetPCLK2Freq>
 8007f08:	61b8      	str	r0, [r7, #24]
        break;
 8007f0a:	e00f      	b.n	8007f2c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007f0c:	4b4b      	ldr	r3, [pc, #300]	; (800803c <UART_SetConfig+0x4c0>)
 8007f0e:	61bb      	str	r3, [r7, #24]
        break;
 8007f10:	e00c      	b.n	8007f2c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007f12:	f7fe ffe7 	bl	8006ee4 <HAL_RCC_GetSysClockFreq>
 8007f16:	61b8      	str	r0, [r7, #24]
        break;
 8007f18:	e008      	b.n	8007f2c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007f1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007f1e:	61bb      	str	r3, [r7, #24]
        break;
 8007f20:	e004      	b.n	8007f2c <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8007f22:	2300      	movs	r3, #0
 8007f24:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007f26:	2301      	movs	r3, #1
 8007f28:	77bb      	strb	r3, [r7, #30]
        break;
 8007f2a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007f2c:	69bb      	ldr	r3, [r7, #24]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d074      	beq.n	800801c <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007f32:	69bb      	ldr	r3, [r7, #24]
 8007f34:	005a      	lsls	r2, r3, #1
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	685b      	ldr	r3, [r3, #4]
 8007f3a:	085b      	lsrs	r3, r3, #1
 8007f3c:	441a      	add	r2, r3
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	685b      	ldr	r3, [r3, #4]
 8007f42:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f46:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007f48:	693b      	ldr	r3, [r7, #16]
 8007f4a:	2b0f      	cmp	r3, #15
 8007f4c:	d916      	bls.n	8007f7c <UART_SetConfig+0x400>
 8007f4e:	693b      	ldr	r3, [r7, #16]
 8007f50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f54:	d212      	bcs.n	8007f7c <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007f56:	693b      	ldr	r3, [r7, #16]
 8007f58:	b29b      	uxth	r3, r3
 8007f5a:	f023 030f 	bic.w	r3, r3, #15
 8007f5e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007f60:	693b      	ldr	r3, [r7, #16]
 8007f62:	085b      	lsrs	r3, r3, #1
 8007f64:	b29b      	uxth	r3, r3
 8007f66:	f003 0307 	and.w	r3, r3, #7
 8007f6a:	b29a      	uxth	r2, r3
 8007f6c:	89fb      	ldrh	r3, [r7, #14]
 8007f6e:	4313      	orrs	r3, r2
 8007f70:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	89fa      	ldrh	r2, [r7, #14]
 8007f78:	60da      	str	r2, [r3, #12]
 8007f7a:	e04f      	b.n	800801c <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8007f7c:	2301      	movs	r3, #1
 8007f7e:	77bb      	strb	r3, [r7, #30]
 8007f80:	e04c      	b.n	800801c <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007f82:	7ffb      	ldrb	r3, [r7, #31]
 8007f84:	2b08      	cmp	r3, #8
 8007f86:	d828      	bhi.n	8007fda <UART_SetConfig+0x45e>
 8007f88:	a201      	add	r2, pc, #4	; (adr r2, 8007f90 <UART_SetConfig+0x414>)
 8007f8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f8e:	bf00      	nop
 8007f90:	08007fb5 	.word	0x08007fb5
 8007f94:	08007fbd 	.word	0x08007fbd
 8007f98:	08007fc5 	.word	0x08007fc5
 8007f9c:	08007fdb 	.word	0x08007fdb
 8007fa0:	08007fcb 	.word	0x08007fcb
 8007fa4:	08007fdb 	.word	0x08007fdb
 8007fa8:	08007fdb 	.word	0x08007fdb
 8007fac:	08007fdb 	.word	0x08007fdb
 8007fb0:	08007fd3 	.word	0x08007fd3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007fb4:	f7ff f858 	bl	8007068 <HAL_RCC_GetPCLK1Freq>
 8007fb8:	61b8      	str	r0, [r7, #24]
        break;
 8007fba:	e013      	b.n	8007fe4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007fbc:	f7ff f868 	bl	8007090 <HAL_RCC_GetPCLK2Freq>
 8007fc0:	61b8      	str	r0, [r7, #24]
        break;
 8007fc2:	e00f      	b.n	8007fe4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007fc4:	4b1d      	ldr	r3, [pc, #116]	; (800803c <UART_SetConfig+0x4c0>)
 8007fc6:	61bb      	str	r3, [r7, #24]
        break;
 8007fc8:	e00c      	b.n	8007fe4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007fca:	f7fe ff8b 	bl	8006ee4 <HAL_RCC_GetSysClockFreq>
 8007fce:	61b8      	str	r0, [r7, #24]
        break;
 8007fd0:	e008      	b.n	8007fe4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007fd2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007fd6:	61bb      	str	r3, [r7, #24]
        break;
 8007fd8:	e004      	b.n	8007fe4 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8007fda:	2300      	movs	r3, #0
 8007fdc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007fde:	2301      	movs	r3, #1
 8007fe0:	77bb      	strb	r3, [r7, #30]
        break;
 8007fe2:	bf00      	nop
    }

    if (pclk != 0U)
 8007fe4:	69bb      	ldr	r3, [r7, #24]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d018      	beq.n	800801c <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	685b      	ldr	r3, [r3, #4]
 8007fee:	085a      	lsrs	r2, r3, #1
 8007ff0:	69bb      	ldr	r3, [r7, #24]
 8007ff2:	441a      	add	r2, r3
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	685b      	ldr	r3, [r3, #4]
 8007ff8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ffc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007ffe:	693b      	ldr	r3, [r7, #16]
 8008000:	2b0f      	cmp	r3, #15
 8008002:	d909      	bls.n	8008018 <UART_SetConfig+0x49c>
 8008004:	693b      	ldr	r3, [r7, #16]
 8008006:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800800a:	d205      	bcs.n	8008018 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800800c:	693b      	ldr	r3, [r7, #16]
 800800e:	b29a      	uxth	r2, r3
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	60da      	str	r2, [r3, #12]
 8008016:	e001      	b.n	800801c <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8008018:	2301      	movs	r3, #1
 800801a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2200      	movs	r2, #0
 8008020:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	2200      	movs	r2, #0
 8008026:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8008028:	7fbb      	ldrb	r3, [r7, #30]
}
 800802a:	4618      	mov	r0, r3
 800802c:	3720      	adds	r7, #32
 800802e:	46bd      	mov	sp, r7
 8008030:	bd80      	pop	{r7, pc}
 8008032:	bf00      	nop
 8008034:	40007c00 	.word	0x40007c00
 8008038:	40023800 	.word	0x40023800
 800803c:	00f42400 	.word	0x00f42400

08008040 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008040:	b480      	push	{r7}
 8008042:	b083      	sub	sp, #12
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800804c:	f003 0301 	and.w	r3, r3, #1
 8008050:	2b00      	cmp	r3, #0
 8008052:	d00a      	beq.n	800806a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	685b      	ldr	r3, [r3, #4]
 800805a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	430a      	orrs	r2, r1
 8008068:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800806e:	f003 0302 	and.w	r3, r3, #2
 8008072:	2b00      	cmp	r3, #0
 8008074:	d00a      	beq.n	800808c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	685b      	ldr	r3, [r3, #4]
 800807c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	430a      	orrs	r2, r1
 800808a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008090:	f003 0304 	and.w	r3, r3, #4
 8008094:	2b00      	cmp	r3, #0
 8008096:	d00a      	beq.n	80080ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	685b      	ldr	r3, [r3, #4]
 800809e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	430a      	orrs	r2, r1
 80080ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080b2:	f003 0308 	and.w	r3, r3, #8
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d00a      	beq.n	80080d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	685b      	ldr	r3, [r3, #4]
 80080c0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	430a      	orrs	r2, r1
 80080ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080d4:	f003 0310 	and.w	r3, r3, #16
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d00a      	beq.n	80080f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	689b      	ldr	r3, [r3, #8]
 80080e2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	430a      	orrs	r2, r1
 80080f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080f6:	f003 0320 	and.w	r3, r3, #32
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d00a      	beq.n	8008114 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	689b      	ldr	r3, [r3, #8]
 8008104:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	430a      	orrs	r2, r1
 8008112:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008118:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800811c:	2b00      	cmp	r3, #0
 800811e:	d01a      	beq.n	8008156 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	685b      	ldr	r3, [r3, #4]
 8008126:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	430a      	orrs	r2, r1
 8008134:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800813a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800813e:	d10a      	bne.n	8008156 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	685b      	ldr	r3, [r3, #4]
 8008146:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	430a      	orrs	r2, r1
 8008154:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800815a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800815e:	2b00      	cmp	r3, #0
 8008160:	d00a      	beq.n	8008178 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	685b      	ldr	r3, [r3, #4]
 8008168:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	430a      	orrs	r2, r1
 8008176:	605a      	str	r2, [r3, #4]
  }
}
 8008178:	bf00      	nop
 800817a:	370c      	adds	r7, #12
 800817c:	46bd      	mov	sp, r7
 800817e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008182:	4770      	bx	lr

08008184 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008184:	b580      	push	{r7, lr}
 8008186:	b086      	sub	sp, #24
 8008188:	af02      	add	r7, sp, #8
 800818a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	2200      	movs	r2, #0
 8008190:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008194:	f7fb f966 	bl	8003464 <HAL_GetTick>
 8008198:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	f003 0308 	and.w	r3, r3, #8
 80081a4:	2b08      	cmp	r3, #8
 80081a6:	d10e      	bne.n	80081c6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80081a8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80081ac:	9300      	str	r3, [sp, #0]
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	2200      	movs	r2, #0
 80081b2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80081b6:	6878      	ldr	r0, [r7, #4]
 80081b8:	f000 f817 	bl	80081ea <UART_WaitOnFlagUntilTimeout>
 80081bc:	4603      	mov	r3, r0
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d001      	beq.n	80081c6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80081c2:	2303      	movs	r3, #3
 80081c4:	e00d      	b.n	80081e2 <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	2220      	movs	r2, #32
 80081ca:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	2220      	movs	r2, #32
 80081d0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	2200      	movs	r2, #0
 80081d6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	2200      	movs	r2, #0
 80081dc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80081e0:	2300      	movs	r3, #0
}
 80081e2:	4618      	mov	r0, r3
 80081e4:	3710      	adds	r7, #16
 80081e6:	46bd      	mov	sp, r7
 80081e8:	bd80      	pop	{r7, pc}

080081ea <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80081ea:	b580      	push	{r7, lr}
 80081ec:	b09c      	sub	sp, #112	; 0x70
 80081ee:	af00      	add	r7, sp, #0
 80081f0:	60f8      	str	r0, [r7, #12]
 80081f2:	60b9      	str	r1, [r7, #8]
 80081f4:	603b      	str	r3, [r7, #0]
 80081f6:	4613      	mov	r3, r2
 80081f8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80081fa:	e0a5      	b.n	8008348 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80081fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80081fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008202:	f000 80a1 	beq.w	8008348 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008206:	f7fb f92d 	bl	8003464 <HAL_GetTick>
 800820a:	4602      	mov	r2, r0
 800820c:	683b      	ldr	r3, [r7, #0]
 800820e:	1ad3      	subs	r3, r2, r3
 8008210:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008212:	429a      	cmp	r2, r3
 8008214:	d302      	bcc.n	800821c <UART_WaitOnFlagUntilTimeout+0x32>
 8008216:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008218:	2b00      	cmp	r3, #0
 800821a:	d13e      	bne.n	800829a <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008222:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008224:	e853 3f00 	ldrex	r3, [r3]
 8008228:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800822a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800822c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008230:	667b      	str	r3, [r7, #100]	; 0x64
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	461a      	mov	r2, r3
 8008238:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800823a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800823c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800823e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008240:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008242:	e841 2300 	strex	r3, r2, [r1]
 8008246:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008248:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800824a:	2b00      	cmp	r3, #0
 800824c:	d1e6      	bne.n	800821c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	3308      	adds	r3, #8
 8008254:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008256:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008258:	e853 3f00 	ldrex	r3, [r3]
 800825c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800825e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008260:	f023 0301 	bic.w	r3, r3, #1
 8008264:	663b      	str	r3, [r7, #96]	; 0x60
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	3308      	adds	r3, #8
 800826c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800826e:	64ba      	str	r2, [r7, #72]	; 0x48
 8008270:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008272:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008274:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008276:	e841 2300 	strex	r3, r2, [r1]
 800827a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800827c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800827e:	2b00      	cmp	r3, #0
 8008280:	d1e5      	bne.n	800824e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	2220      	movs	r2, #32
 8008286:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	2220      	movs	r2, #32
 800828c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	2200      	movs	r2, #0
 8008292:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8008296:	2303      	movs	r3, #3
 8008298:	e067      	b.n	800836a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	f003 0304 	and.w	r3, r3, #4
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d04f      	beq.n	8008348 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	69db      	ldr	r3, [r3, #28]
 80082ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80082b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80082b6:	d147      	bne.n	8008348 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80082c0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082ca:	e853 3f00 	ldrex	r3, [r3]
 80082ce:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80082d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082d2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80082d6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	461a      	mov	r2, r3
 80082de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082e0:	637b      	str	r3, [r7, #52]	; 0x34
 80082e2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082e4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80082e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80082e8:	e841 2300 	strex	r3, r2, [r1]
 80082ec:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80082ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d1e6      	bne.n	80082c2 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	3308      	adds	r3, #8
 80082fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082fc:	697b      	ldr	r3, [r7, #20]
 80082fe:	e853 3f00 	ldrex	r3, [r3]
 8008302:	613b      	str	r3, [r7, #16]
   return(result);
 8008304:	693b      	ldr	r3, [r7, #16]
 8008306:	f023 0301 	bic.w	r3, r3, #1
 800830a:	66bb      	str	r3, [r7, #104]	; 0x68
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	3308      	adds	r3, #8
 8008312:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008314:	623a      	str	r2, [r7, #32]
 8008316:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008318:	69f9      	ldr	r1, [r7, #28]
 800831a:	6a3a      	ldr	r2, [r7, #32]
 800831c:	e841 2300 	strex	r3, r2, [r1]
 8008320:	61bb      	str	r3, [r7, #24]
   return(result);
 8008322:	69bb      	ldr	r3, [r7, #24]
 8008324:	2b00      	cmp	r3, #0
 8008326:	d1e5      	bne.n	80082f4 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	2220      	movs	r2, #32
 800832c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	2220      	movs	r2, #32
 8008332:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	2220      	movs	r2, #32
 8008338:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	2200      	movs	r2, #0
 8008340:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8008344:	2303      	movs	r3, #3
 8008346:	e010      	b.n	800836a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	69da      	ldr	r2, [r3, #28]
 800834e:	68bb      	ldr	r3, [r7, #8]
 8008350:	4013      	ands	r3, r2
 8008352:	68ba      	ldr	r2, [r7, #8]
 8008354:	429a      	cmp	r2, r3
 8008356:	bf0c      	ite	eq
 8008358:	2301      	moveq	r3, #1
 800835a:	2300      	movne	r3, #0
 800835c:	b2db      	uxtb	r3, r3
 800835e:	461a      	mov	r2, r3
 8008360:	79fb      	ldrb	r3, [r7, #7]
 8008362:	429a      	cmp	r2, r3
 8008364:	f43f af4a 	beq.w	80081fc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008368:	2300      	movs	r3, #0
}
 800836a:	4618      	mov	r0, r3
 800836c:	3770      	adds	r7, #112	; 0x70
 800836e:	46bd      	mov	sp, r7
 8008370:	bd80      	pop	{r7, pc}
	...

08008374 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8008374:	b480      	push	{r7}
 8008376:	b083      	sub	sp, #12
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]
 800837c:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800837e:	683b      	ldr	r3, [r7, #0]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d121      	bne.n	80083ca <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681a      	ldr	r2, [r3, #0]
 800838a:	4b27      	ldr	r3, [pc, #156]	; (8008428 <FMC_SDRAM_Init+0xb4>)
 800838c:	4013      	ands	r3, r2
 800838e:	683a      	ldr	r2, [r7, #0]
 8008390:	6851      	ldr	r1, [r2, #4]
 8008392:	683a      	ldr	r2, [r7, #0]
 8008394:	6892      	ldr	r2, [r2, #8]
 8008396:	4311      	orrs	r1, r2
 8008398:	683a      	ldr	r2, [r7, #0]
 800839a:	68d2      	ldr	r2, [r2, #12]
 800839c:	4311      	orrs	r1, r2
 800839e:	683a      	ldr	r2, [r7, #0]
 80083a0:	6912      	ldr	r2, [r2, #16]
 80083a2:	4311      	orrs	r1, r2
 80083a4:	683a      	ldr	r2, [r7, #0]
 80083a6:	6952      	ldr	r2, [r2, #20]
 80083a8:	4311      	orrs	r1, r2
 80083aa:	683a      	ldr	r2, [r7, #0]
 80083ac:	6992      	ldr	r2, [r2, #24]
 80083ae:	4311      	orrs	r1, r2
 80083b0:	683a      	ldr	r2, [r7, #0]
 80083b2:	69d2      	ldr	r2, [r2, #28]
 80083b4:	4311      	orrs	r1, r2
 80083b6:	683a      	ldr	r2, [r7, #0]
 80083b8:	6a12      	ldr	r2, [r2, #32]
 80083ba:	4311      	orrs	r1, r2
 80083bc:	683a      	ldr	r2, [r7, #0]
 80083be:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80083c0:	430a      	orrs	r2, r1
 80083c2:	431a      	orrs	r2, r3
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	601a      	str	r2, [r3, #0]
 80083c8:	e026      	b.n	8008418 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80083d2:	683b      	ldr	r3, [r7, #0]
 80083d4:	69d9      	ldr	r1, [r3, #28]
 80083d6:	683b      	ldr	r3, [r7, #0]
 80083d8:	6a1b      	ldr	r3, [r3, #32]
 80083da:	4319      	orrs	r1, r3
 80083dc:	683b      	ldr	r3, [r7, #0]
 80083de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083e0:	430b      	orrs	r3, r1
 80083e2:	431a      	orrs	r2, r3
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	685a      	ldr	r2, [r3, #4]
 80083ec:	4b0e      	ldr	r3, [pc, #56]	; (8008428 <FMC_SDRAM_Init+0xb4>)
 80083ee:	4013      	ands	r3, r2
 80083f0:	683a      	ldr	r2, [r7, #0]
 80083f2:	6851      	ldr	r1, [r2, #4]
 80083f4:	683a      	ldr	r2, [r7, #0]
 80083f6:	6892      	ldr	r2, [r2, #8]
 80083f8:	4311      	orrs	r1, r2
 80083fa:	683a      	ldr	r2, [r7, #0]
 80083fc:	68d2      	ldr	r2, [r2, #12]
 80083fe:	4311      	orrs	r1, r2
 8008400:	683a      	ldr	r2, [r7, #0]
 8008402:	6912      	ldr	r2, [r2, #16]
 8008404:	4311      	orrs	r1, r2
 8008406:	683a      	ldr	r2, [r7, #0]
 8008408:	6952      	ldr	r2, [r2, #20]
 800840a:	4311      	orrs	r1, r2
 800840c:	683a      	ldr	r2, [r7, #0]
 800840e:	6992      	ldr	r2, [r2, #24]
 8008410:	430a      	orrs	r2, r1
 8008412:	431a      	orrs	r2, r3
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8008418:	2300      	movs	r3, #0
}
 800841a:	4618      	mov	r0, r3
 800841c:	370c      	adds	r7, #12
 800841e:	46bd      	mov	sp, r7
 8008420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008424:	4770      	bx	lr
 8008426:	bf00      	nop
 8008428:	ffff8000 	.word	0xffff8000

0800842c <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800842c:	b480      	push	{r7}
 800842e:	b085      	sub	sp, #20
 8008430:	af00      	add	r7, sp, #0
 8008432:	60f8      	str	r0, [r7, #12]
 8008434:	60b9      	str	r1, [r7, #8]
 8008436:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d128      	bne.n	8008490 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	689b      	ldr	r3, [r3, #8]
 8008442:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8008446:	68bb      	ldr	r3, [r7, #8]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	1e59      	subs	r1, r3, #1
 800844c:	68bb      	ldr	r3, [r7, #8]
 800844e:	685b      	ldr	r3, [r3, #4]
 8008450:	3b01      	subs	r3, #1
 8008452:	011b      	lsls	r3, r3, #4
 8008454:	4319      	orrs	r1, r3
 8008456:	68bb      	ldr	r3, [r7, #8]
 8008458:	689b      	ldr	r3, [r3, #8]
 800845a:	3b01      	subs	r3, #1
 800845c:	021b      	lsls	r3, r3, #8
 800845e:	4319      	orrs	r1, r3
 8008460:	68bb      	ldr	r3, [r7, #8]
 8008462:	68db      	ldr	r3, [r3, #12]
 8008464:	3b01      	subs	r3, #1
 8008466:	031b      	lsls	r3, r3, #12
 8008468:	4319      	orrs	r1, r3
 800846a:	68bb      	ldr	r3, [r7, #8]
 800846c:	691b      	ldr	r3, [r3, #16]
 800846e:	3b01      	subs	r3, #1
 8008470:	041b      	lsls	r3, r3, #16
 8008472:	4319      	orrs	r1, r3
 8008474:	68bb      	ldr	r3, [r7, #8]
 8008476:	695b      	ldr	r3, [r3, #20]
 8008478:	3b01      	subs	r3, #1
 800847a:	051b      	lsls	r3, r3, #20
 800847c:	4319      	orrs	r1, r3
 800847e:	68bb      	ldr	r3, [r7, #8]
 8008480:	699b      	ldr	r3, [r3, #24]
 8008482:	3b01      	subs	r3, #1
 8008484:	061b      	lsls	r3, r3, #24
 8008486:	430b      	orrs	r3, r1
 8008488:	431a      	orrs	r2, r3
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	609a      	str	r2, [r3, #8]
 800848e:	e02d      	b.n	80084ec <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	689a      	ldr	r2, [r3, #8]
 8008494:	4b19      	ldr	r3, [pc, #100]	; (80084fc <FMC_SDRAM_Timing_Init+0xd0>)
 8008496:	4013      	ands	r3, r2
 8008498:	68ba      	ldr	r2, [r7, #8]
 800849a:	68d2      	ldr	r2, [r2, #12]
 800849c:	3a01      	subs	r2, #1
 800849e:	0311      	lsls	r1, r2, #12
 80084a0:	68ba      	ldr	r2, [r7, #8]
 80084a2:	6952      	ldr	r2, [r2, #20]
 80084a4:	3a01      	subs	r2, #1
 80084a6:	0512      	lsls	r2, r2, #20
 80084a8:	430a      	orrs	r2, r1
 80084aa:	431a      	orrs	r2, r3
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	68db      	ldr	r3, [r3, #12]
 80084b4:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80084b8:	68bb      	ldr	r3, [r7, #8]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	1e59      	subs	r1, r3, #1
 80084be:	68bb      	ldr	r3, [r7, #8]
 80084c0:	685b      	ldr	r3, [r3, #4]
 80084c2:	3b01      	subs	r3, #1
 80084c4:	011b      	lsls	r3, r3, #4
 80084c6:	4319      	orrs	r1, r3
 80084c8:	68bb      	ldr	r3, [r7, #8]
 80084ca:	689b      	ldr	r3, [r3, #8]
 80084cc:	3b01      	subs	r3, #1
 80084ce:	021b      	lsls	r3, r3, #8
 80084d0:	4319      	orrs	r1, r3
 80084d2:	68bb      	ldr	r3, [r7, #8]
 80084d4:	691b      	ldr	r3, [r3, #16]
 80084d6:	3b01      	subs	r3, #1
 80084d8:	041b      	lsls	r3, r3, #16
 80084da:	4319      	orrs	r1, r3
 80084dc:	68bb      	ldr	r3, [r7, #8]
 80084de:	699b      	ldr	r3, [r3, #24]
 80084e0:	3b01      	subs	r3, #1
 80084e2:	061b      	lsls	r3, r3, #24
 80084e4:	430b      	orrs	r3, r1
 80084e6:	431a      	orrs	r2, r3
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 80084ec:	2300      	movs	r3, #0
}
 80084ee:	4618      	mov	r0, r3
 80084f0:	3714      	adds	r7, #20
 80084f2:	46bd      	mov	sp, r7
 80084f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f8:	4770      	bx	lr
 80084fa:	bf00      	nop
 80084fc:	ff0f0fff 	.word	0xff0f0fff

08008500 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8008500:	b480      	push	{r7}
 8008502:	b085      	sub	sp, #20
 8008504:	af00      	add	r7, sp, #0
 8008506:	60f8      	str	r0, [r7, #12]
 8008508:	60b9      	str	r1, [r7, #8]
 800850a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	691a      	ldr	r2, [r3, #16]
 8008510:	4b0c      	ldr	r3, [pc, #48]	; (8008544 <FMC_SDRAM_SendCommand+0x44>)
 8008512:	4013      	ands	r3, r2
 8008514:	68ba      	ldr	r2, [r7, #8]
 8008516:	6811      	ldr	r1, [r2, #0]
 8008518:	68ba      	ldr	r2, [r7, #8]
 800851a:	6852      	ldr	r2, [r2, #4]
 800851c:	4311      	orrs	r1, r2
 800851e:	68ba      	ldr	r2, [r7, #8]
 8008520:	6892      	ldr	r2, [r2, #8]
 8008522:	3a01      	subs	r2, #1
 8008524:	0152      	lsls	r2, r2, #5
 8008526:	4311      	orrs	r1, r2
 8008528:	68ba      	ldr	r2, [r7, #8]
 800852a:	68d2      	ldr	r2, [r2, #12]
 800852c:	0252      	lsls	r2, r2, #9
 800852e:	430a      	orrs	r2, r1
 8008530:	431a      	orrs	r2, r3
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 8008536:	2300      	movs	r3, #0
}
 8008538:	4618      	mov	r0, r3
 800853a:	3714      	adds	r7, #20
 800853c:	46bd      	mov	sp, r7
 800853e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008542:	4770      	bx	lr
 8008544:	ffc00000 	.word	0xffc00000

08008548 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8008548:	b480      	push	{r7}
 800854a:	b083      	sub	sp, #12
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
 8008550:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	695a      	ldr	r2, [r3, #20]
 8008556:	4b07      	ldr	r3, [pc, #28]	; (8008574 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 8008558:	4013      	ands	r3, r2
 800855a:	683a      	ldr	r2, [r7, #0]
 800855c:	0052      	lsls	r2, r2, #1
 800855e:	431a      	orrs	r2, r3
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8008564:	2300      	movs	r3, #0
}
 8008566:	4618      	mov	r0, r3
 8008568:	370c      	adds	r7, #12
 800856a:	46bd      	mov	sp, r7
 800856c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008570:	4770      	bx	lr
 8008572:	bf00      	nop
 8008574:	ffffc001 	.word	0xffffc001

08008578 <__errno>:
 8008578:	4b01      	ldr	r3, [pc, #4]	; (8008580 <__errno+0x8>)
 800857a:	6818      	ldr	r0, [r3, #0]
 800857c:	4770      	bx	lr
 800857e:	bf00      	nop
 8008580:	20000090 	.word	0x20000090

08008584 <__libc_init_array>:
 8008584:	b570      	push	{r4, r5, r6, lr}
 8008586:	4d0d      	ldr	r5, [pc, #52]	; (80085bc <__libc_init_array+0x38>)
 8008588:	4c0d      	ldr	r4, [pc, #52]	; (80085c0 <__libc_init_array+0x3c>)
 800858a:	1b64      	subs	r4, r4, r5
 800858c:	10a4      	asrs	r4, r4, #2
 800858e:	2600      	movs	r6, #0
 8008590:	42a6      	cmp	r6, r4
 8008592:	d109      	bne.n	80085a8 <__libc_init_array+0x24>
 8008594:	4d0b      	ldr	r5, [pc, #44]	; (80085c4 <__libc_init_array+0x40>)
 8008596:	4c0c      	ldr	r4, [pc, #48]	; (80085c8 <__libc_init_array+0x44>)
 8008598:	f000 f908 	bl	80087ac <_init>
 800859c:	1b64      	subs	r4, r4, r5
 800859e:	10a4      	asrs	r4, r4, #2
 80085a0:	2600      	movs	r6, #0
 80085a2:	42a6      	cmp	r6, r4
 80085a4:	d105      	bne.n	80085b2 <__libc_init_array+0x2e>
 80085a6:	bd70      	pop	{r4, r5, r6, pc}
 80085a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80085ac:	4798      	blx	r3
 80085ae:	3601      	adds	r6, #1
 80085b0:	e7ee      	b.n	8008590 <__libc_init_array+0xc>
 80085b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80085b6:	4798      	blx	r3
 80085b8:	3601      	adds	r6, #1
 80085ba:	e7f2      	b.n	80085a2 <__libc_init_array+0x1e>
 80085bc:	08008c64 	.word	0x08008c64
 80085c0:	08008c64 	.word	0x08008c64
 80085c4:	08008c64 	.word	0x08008c64
 80085c8:	08008c68 	.word	0x08008c68

080085cc <memset>:
 80085cc:	4402      	add	r2, r0
 80085ce:	4603      	mov	r3, r0
 80085d0:	4293      	cmp	r3, r2
 80085d2:	d100      	bne.n	80085d6 <memset+0xa>
 80085d4:	4770      	bx	lr
 80085d6:	f803 1b01 	strb.w	r1, [r3], #1
 80085da:	e7f9      	b.n	80085d0 <memset+0x4>

080085dc <sqrt>:
 80085dc:	b538      	push	{r3, r4, r5, lr}
 80085de:	ed2d 8b02 	vpush	{d8}
 80085e2:	ec55 4b10 	vmov	r4, r5, d0
 80085e6:	f000 f82d 	bl	8008644 <__ieee754_sqrt>
 80085ea:	4b15      	ldr	r3, [pc, #84]	; (8008640 <sqrt+0x64>)
 80085ec:	eeb0 8a40 	vmov.f32	s16, s0
 80085f0:	eef0 8a60 	vmov.f32	s17, s1
 80085f4:	f993 3000 	ldrsb.w	r3, [r3]
 80085f8:	3301      	adds	r3, #1
 80085fa:	d019      	beq.n	8008630 <sqrt+0x54>
 80085fc:	4622      	mov	r2, r4
 80085fe:	462b      	mov	r3, r5
 8008600:	4620      	mov	r0, r4
 8008602:	4629      	mov	r1, r5
 8008604:	f7f8 fa56 	bl	8000ab4 <__aeabi_dcmpun>
 8008608:	b990      	cbnz	r0, 8008630 <sqrt+0x54>
 800860a:	2200      	movs	r2, #0
 800860c:	2300      	movs	r3, #0
 800860e:	4620      	mov	r0, r4
 8008610:	4629      	mov	r1, r5
 8008612:	f7f8 fa27 	bl	8000a64 <__aeabi_dcmplt>
 8008616:	b158      	cbz	r0, 8008630 <sqrt+0x54>
 8008618:	f7ff ffae 	bl	8008578 <__errno>
 800861c:	2321      	movs	r3, #33	; 0x21
 800861e:	6003      	str	r3, [r0, #0]
 8008620:	2200      	movs	r2, #0
 8008622:	2300      	movs	r3, #0
 8008624:	4610      	mov	r0, r2
 8008626:	4619      	mov	r1, r3
 8008628:	f7f8 f8d4 	bl	80007d4 <__aeabi_ddiv>
 800862c:	ec41 0b18 	vmov	d8, r0, r1
 8008630:	eeb0 0a48 	vmov.f32	s0, s16
 8008634:	eef0 0a68 	vmov.f32	s1, s17
 8008638:	ecbd 8b02 	vpop	{d8}
 800863c:	bd38      	pop	{r3, r4, r5, pc}
 800863e:	bf00      	nop
 8008640:	200000f4 	.word	0x200000f4

08008644 <__ieee754_sqrt>:
 8008644:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008648:	ec55 4b10 	vmov	r4, r5, d0
 800864c:	4e56      	ldr	r6, [pc, #344]	; (80087a8 <__ieee754_sqrt+0x164>)
 800864e:	43ae      	bics	r6, r5
 8008650:	ee10 0a10 	vmov	r0, s0
 8008654:	ee10 3a10 	vmov	r3, s0
 8008658:	4629      	mov	r1, r5
 800865a:	462a      	mov	r2, r5
 800865c:	d110      	bne.n	8008680 <__ieee754_sqrt+0x3c>
 800865e:	ee10 2a10 	vmov	r2, s0
 8008662:	462b      	mov	r3, r5
 8008664:	f7f7 ff8c 	bl	8000580 <__aeabi_dmul>
 8008668:	4602      	mov	r2, r0
 800866a:	460b      	mov	r3, r1
 800866c:	4620      	mov	r0, r4
 800866e:	4629      	mov	r1, r5
 8008670:	f7f7 fdd0 	bl	8000214 <__adddf3>
 8008674:	4604      	mov	r4, r0
 8008676:	460d      	mov	r5, r1
 8008678:	ec45 4b10 	vmov	d0, r4, r5
 800867c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008680:	2d00      	cmp	r5, #0
 8008682:	dc10      	bgt.n	80086a6 <__ieee754_sqrt+0x62>
 8008684:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8008688:	4330      	orrs	r0, r6
 800868a:	d0f5      	beq.n	8008678 <__ieee754_sqrt+0x34>
 800868c:	b15d      	cbz	r5, 80086a6 <__ieee754_sqrt+0x62>
 800868e:	ee10 2a10 	vmov	r2, s0
 8008692:	462b      	mov	r3, r5
 8008694:	ee10 0a10 	vmov	r0, s0
 8008698:	f7f7 fdba 	bl	8000210 <__aeabi_dsub>
 800869c:	4602      	mov	r2, r0
 800869e:	460b      	mov	r3, r1
 80086a0:	f7f8 f898 	bl	80007d4 <__aeabi_ddiv>
 80086a4:	e7e6      	b.n	8008674 <__ieee754_sqrt+0x30>
 80086a6:	1509      	asrs	r1, r1, #20
 80086a8:	d076      	beq.n	8008798 <__ieee754_sqrt+0x154>
 80086aa:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80086ae:	07ce      	lsls	r6, r1, #31
 80086b0:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 80086b4:	bf5e      	ittt	pl
 80086b6:	0fda      	lsrpl	r2, r3, #31
 80086b8:	005b      	lslpl	r3, r3, #1
 80086ba:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 80086be:	0fda      	lsrs	r2, r3, #31
 80086c0:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 80086c4:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 80086c8:	2000      	movs	r0, #0
 80086ca:	106d      	asrs	r5, r5, #1
 80086cc:	005b      	lsls	r3, r3, #1
 80086ce:	f04f 0e16 	mov.w	lr, #22
 80086d2:	4684      	mov	ip, r0
 80086d4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80086d8:	eb0c 0401 	add.w	r4, ip, r1
 80086dc:	4294      	cmp	r4, r2
 80086de:	bfde      	ittt	le
 80086e0:	1b12      	suble	r2, r2, r4
 80086e2:	eb04 0c01 	addle.w	ip, r4, r1
 80086e6:	1840      	addle	r0, r0, r1
 80086e8:	0052      	lsls	r2, r2, #1
 80086ea:	f1be 0e01 	subs.w	lr, lr, #1
 80086ee:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80086f2:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80086f6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80086fa:	d1ed      	bne.n	80086d8 <__ieee754_sqrt+0x94>
 80086fc:	4671      	mov	r1, lr
 80086fe:	2720      	movs	r7, #32
 8008700:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8008704:	4562      	cmp	r2, ip
 8008706:	eb04 060e 	add.w	r6, r4, lr
 800870a:	dc02      	bgt.n	8008712 <__ieee754_sqrt+0xce>
 800870c:	d113      	bne.n	8008736 <__ieee754_sqrt+0xf2>
 800870e:	429e      	cmp	r6, r3
 8008710:	d811      	bhi.n	8008736 <__ieee754_sqrt+0xf2>
 8008712:	2e00      	cmp	r6, #0
 8008714:	eb06 0e04 	add.w	lr, r6, r4
 8008718:	da43      	bge.n	80087a2 <__ieee754_sqrt+0x15e>
 800871a:	f1be 0f00 	cmp.w	lr, #0
 800871e:	db40      	blt.n	80087a2 <__ieee754_sqrt+0x15e>
 8008720:	f10c 0801 	add.w	r8, ip, #1
 8008724:	eba2 020c 	sub.w	r2, r2, ip
 8008728:	429e      	cmp	r6, r3
 800872a:	bf88      	it	hi
 800872c:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8008730:	1b9b      	subs	r3, r3, r6
 8008732:	4421      	add	r1, r4
 8008734:	46c4      	mov	ip, r8
 8008736:	0052      	lsls	r2, r2, #1
 8008738:	3f01      	subs	r7, #1
 800873a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800873e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8008742:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008746:	d1dd      	bne.n	8008704 <__ieee754_sqrt+0xc0>
 8008748:	4313      	orrs	r3, r2
 800874a:	d006      	beq.n	800875a <__ieee754_sqrt+0x116>
 800874c:	1c4c      	adds	r4, r1, #1
 800874e:	bf13      	iteet	ne
 8008750:	3101      	addne	r1, #1
 8008752:	3001      	addeq	r0, #1
 8008754:	4639      	moveq	r1, r7
 8008756:	f021 0101 	bicne.w	r1, r1, #1
 800875a:	1043      	asrs	r3, r0, #1
 800875c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8008760:	0849      	lsrs	r1, r1, #1
 8008762:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8008766:	07c2      	lsls	r2, r0, #31
 8008768:	bf48      	it	mi
 800876a:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800876e:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 8008772:	460c      	mov	r4, r1
 8008774:	463d      	mov	r5, r7
 8008776:	e77f      	b.n	8008678 <__ieee754_sqrt+0x34>
 8008778:	0ada      	lsrs	r2, r3, #11
 800877a:	3815      	subs	r0, #21
 800877c:	055b      	lsls	r3, r3, #21
 800877e:	2a00      	cmp	r2, #0
 8008780:	d0fa      	beq.n	8008778 <__ieee754_sqrt+0x134>
 8008782:	02d7      	lsls	r7, r2, #11
 8008784:	d50a      	bpl.n	800879c <__ieee754_sqrt+0x158>
 8008786:	f1c1 0420 	rsb	r4, r1, #32
 800878a:	fa23 f404 	lsr.w	r4, r3, r4
 800878e:	1e4d      	subs	r5, r1, #1
 8008790:	408b      	lsls	r3, r1
 8008792:	4322      	orrs	r2, r4
 8008794:	1b41      	subs	r1, r0, r5
 8008796:	e788      	b.n	80086aa <__ieee754_sqrt+0x66>
 8008798:	4608      	mov	r0, r1
 800879a:	e7f0      	b.n	800877e <__ieee754_sqrt+0x13a>
 800879c:	0052      	lsls	r2, r2, #1
 800879e:	3101      	adds	r1, #1
 80087a0:	e7ef      	b.n	8008782 <__ieee754_sqrt+0x13e>
 80087a2:	46e0      	mov	r8, ip
 80087a4:	e7be      	b.n	8008724 <__ieee754_sqrt+0xe0>
 80087a6:	bf00      	nop
 80087a8:	7ff00000 	.word	0x7ff00000

080087ac <_init>:
 80087ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087ae:	bf00      	nop
 80087b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087b2:	bc08      	pop	{r3}
 80087b4:	469e      	mov	lr, r3
 80087b6:	4770      	bx	lr

080087b8 <_fini>:
 80087b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087ba:	bf00      	nop
 80087bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087be:	bc08      	pop	{r3}
 80087c0:	469e      	mov	lr, r3
 80087c2:	4770      	bx	lr
