
F746NG_CH6_EOC3_HandwrittenDigitRecognition.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .qspi         00000000  90000000  90000000  00030090  2**0
                  CONTENTS
  1 .sdram_data   00145000  c0000000  c0000000  00040000  2**2
                  ALLOC
  2 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .text         00008e38  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       00013a4c  08009000  08009000  00019000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM.extab    00000000  0801ca4c  0801ca4c  00030090  2**0
                  CONTENTS
  6 .ARM          00000008  0801ca4c  0801ca4c  0002ca4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .preinit_array 00000000  0801ca54  0801ca54  00030090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  8 .init_array   00000004  0801ca54  0801ca54  0002ca54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .fini_array   00000004  0801ca58  0801ca58  0002ca58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .data         00000090  20000000  0801ca5c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000448  20000090  0801caec  00030090  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  200004d8  0801caec  000304d8  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00030090  2**0
                  CONTENTS, READONLY
 14 .debug_info   00017ca2  00000000  00000000  000300c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000362e  00000000  00000000  00047d62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000ff8  00000000  00000000  0004b390  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00029a98  00000000  00000000  0004c388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018da3  00000000  00000000  00075e20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f4bbc  00000000  00000000  0008ebc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0018377f  2**0
                  CONTENTS, READONLY
 21 .debug_ranges 00000e48  00000000  00000000  001837d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  0000412c  00000000  00000000  00184620  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000090 	.word	0x20000090
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08008fe8 	.word	0x08008fe8

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000094 	.word	0x20000094
 8000204:	08008fe8 	.word	0x08008fe8

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b96e 	b.w	80004fc <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9d08      	ldr	r5, [sp, #32]
 800023e:	4604      	mov	r4, r0
 8000240:	468c      	mov	ip, r1
 8000242:	2b00      	cmp	r3, #0
 8000244:	f040 8083 	bne.w	800034e <__udivmoddi4+0x116>
 8000248:	428a      	cmp	r2, r1
 800024a:	4617      	mov	r7, r2
 800024c:	d947      	bls.n	80002de <__udivmoddi4+0xa6>
 800024e:	fab2 f282 	clz	r2, r2
 8000252:	b142      	cbz	r2, 8000266 <__udivmoddi4+0x2e>
 8000254:	f1c2 0020 	rsb	r0, r2, #32
 8000258:	fa24 f000 	lsr.w	r0, r4, r0
 800025c:	4091      	lsls	r1, r2
 800025e:	4097      	lsls	r7, r2
 8000260:	ea40 0c01 	orr.w	ip, r0, r1
 8000264:	4094      	lsls	r4, r2
 8000266:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800026a:	0c23      	lsrs	r3, r4, #16
 800026c:	fbbc f6f8 	udiv	r6, ip, r8
 8000270:	fa1f fe87 	uxth.w	lr, r7
 8000274:	fb08 c116 	mls	r1, r8, r6, ip
 8000278:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027c:	fb06 f10e 	mul.w	r1, r6, lr
 8000280:	4299      	cmp	r1, r3
 8000282:	d909      	bls.n	8000298 <__udivmoddi4+0x60>
 8000284:	18fb      	adds	r3, r7, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295
 800028a:	f080 8119 	bcs.w	80004c0 <__udivmoddi4+0x288>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 8116 	bls.w	80004c0 <__udivmoddi4+0x288>
 8000294:	3e02      	subs	r6, #2
 8000296:	443b      	add	r3, r7
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002ac:	45a6      	cmp	lr, r4
 80002ae:	d909      	bls.n	80002c4 <__udivmoddi4+0x8c>
 80002b0:	193c      	adds	r4, r7, r4
 80002b2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b6:	f080 8105 	bcs.w	80004c4 <__udivmoddi4+0x28c>
 80002ba:	45a6      	cmp	lr, r4
 80002bc:	f240 8102 	bls.w	80004c4 <__udivmoddi4+0x28c>
 80002c0:	3802      	subs	r0, #2
 80002c2:	443c      	add	r4, r7
 80002c4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c8:	eba4 040e 	sub.w	r4, r4, lr
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa0>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	b902      	cbnz	r2, 80002e2 <__udivmoddi4+0xaa>
 80002e0:	deff      	udf	#255	; 0xff
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d150      	bne.n	800038c <__udivmoddi4+0x154>
 80002ea:	1bcb      	subs	r3, r1, r7
 80002ec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f0:	fa1f f887 	uxth.w	r8, r7
 80002f4:	2601      	movs	r6, #1
 80002f6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002fa:	0c21      	lsrs	r1, r4, #16
 80002fc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000300:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000304:	fb08 f30c 	mul.w	r3, r8, ip
 8000308:	428b      	cmp	r3, r1
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0xe4>
 800030c:	1879      	adds	r1, r7, r1
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0xe2>
 8000314:	428b      	cmp	r3, r1
 8000316:	f200 80e9 	bhi.w	80004ec <__udivmoddi4+0x2b4>
 800031a:	4684      	mov	ip, r0
 800031c:	1ac9      	subs	r1, r1, r3
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1110 	mls	r1, lr, r0, r1
 8000328:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x10c>
 8000334:	193c      	adds	r4, r7, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x10a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80d9 	bhi.w	80004f4 <__udivmoddi4+0x2bc>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e7bf      	b.n	80002ce <__udivmoddi4+0x96>
 800034e:	428b      	cmp	r3, r1
 8000350:	d909      	bls.n	8000366 <__udivmoddi4+0x12e>
 8000352:	2d00      	cmp	r5, #0
 8000354:	f000 80b1 	beq.w	80004ba <__udivmoddi4+0x282>
 8000358:	2600      	movs	r6, #0
 800035a:	e9c5 0100 	strd	r0, r1, [r5]
 800035e:	4630      	mov	r0, r6
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	fab3 f683 	clz	r6, r3
 800036a:	2e00      	cmp	r6, #0
 800036c:	d14a      	bne.n	8000404 <__udivmoddi4+0x1cc>
 800036e:	428b      	cmp	r3, r1
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0x140>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 80b8 	bhi.w	80004e8 <__udivmoddi4+0x2b0>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb61 0103 	sbc.w	r1, r1, r3
 800037e:	2001      	movs	r0, #1
 8000380:	468c      	mov	ip, r1
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0a8      	beq.n	80002d8 <__udivmoddi4+0xa0>
 8000386:	e9c5 4c00 	strd	r4, ip, [r5]
 800038a:	e7a5      	b.n	80002d8 <__udivmoddi4+0xa0>
 800038c:	f1c2 0320 	rsb	r3, r2, #32
 8000390:	fa20 f603 	lsr.w	r6, r0, r3
 8000394:	4097      	lsls	r7, r2
 8000396:	fa01 f002 	lsl.w	r0, r1, r2
 800039a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800039e:	40d9      	lsrs	r1, r3
 80003a0:	4330      	orrs	r0, r6
 80003a2:	0c03      	lsrs	r3, r0, #16
 80003a4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003a8:	fa1f f887 	uxth.w	r8, r7
 80003ac:	fb0e 1116 	mls	r1, lr, r6, r1
 80003b0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b4:	fb06 f108 	mul.w	r1, r6, r8
 80003b8:	4299      	cmp	r1, r3
 80003ba:	fa04 f402 	lsl.w	r4, r4, r2
 80003be:	d909      	bls.n	80003d4 <__udivmoddi4+0x19c>
 80003c0:	18fb      	adds	r3, r7, r3
 80003c2:	f106 3cff 	add.w	ip, r6, #4294967295
 80003c6:	f080 808d 	bcs.w	80004e4 <__udivmoddi4+0x2ac>
 80003ca:	4299      	cmp	r1, r3
 80003cc:	f240 808a 	bls.w	80004e4 <__udivmoddi4+0x2ac>
 80003d0:	3e02      	subs	r6, #2
 80003d2:	443b      	add	r3, r7
 80003d4:	1a5b      	subs	r3, r3, r1
 80003d6:	b281      	uxth	r1, r0
 80003d8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003dc:	fb0e 3310 	mls	r3, lr, r0, r3
 80003e0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003e4:	fb00 f308 	mul.w	r3, r0, r8
 80003e8:	428b      	cmp	r3, r1
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x1c4>
 80003ec:	1879      	adds	r1, r7, r1
 80003ee:	f100 3cff 	add.w	ip, r0, #4294967295
 80003f2:	d273      	bcs.n	80004dc <__udivmoddi4+0x2a4>
 80003f4:	428b      	cmp	r3, r1
 80003f6:	d971      	bls.n	80004dc <__udivmoddi4+0x2a4>
 80003f8:	3802      	subs	r0, #2
 80003fa:	4439      	add	r1, r7
 80003fc:	1acb      	subs	r3, r1, r3
 80003fe:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000402:	e778      	b.n	80002f6 <__udivmoddi4+0xbe>
 8000404:	f1c6 0c20 	rsb	ip, r6, #32
 8000408:	fa03 f406 	lsl.w	r4, r3, r6
 800040c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000410:	431c      	orrs	r4, r3
 8000412:	fa20 f70c 	lsr.w	r7, r0, ip
 8000416:	fa01 f306 	lsl.w	r3, r1, r6
 800041a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800041e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000422:	431f      	orrs	r7, r3
 8000424:	0c3b      	lsrs	r3, r7, #16
 8000426:	fbb1 f9fe 	udiv	r9, r1, lr
 800042a:	fa1f f884 	uxth.w	r8, r4
 800042e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000432:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000436:	fb09 fa08 	mul.w	sl, r9, r8
 800043a:	458a      	cmp	sl, r1
 800043c:	fa02 f206 	lsl.w	r2, r2, r6
 8000440:	fa00 f306 	lsl.w	r3, r0, r6
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x220>
 8000446:	1861      	adds	r1, r4, r1
 8000448:	f109 30ff 	add.w	r0, r9, #4294967295
 800044c:	d248      	bcs.n	80004e0 <__udivmoddi4+0x2a8>
 800044e:	458a      	cmp	sl, r1
 8000450:	d946      	bls.n	80004e0 <__udivmoddi4+0x2a8>
 8000452:	f1a9 0902 	sub.w	r9, r9, #2
 8000456:	4421      	add	r1, r4
 8000458:	eba1 010a 	sub.w	r1, r1, sl
 800045c:	b2bf      	uxth	r7, r7
 800045e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000462:	fb0e 1110 	mls	r1, lr, r0, r1
 8000466:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800046a:	fb00 f808 	mul.w	r8, r0, r8
 800046e:	45b8      	cmp	r8, r7
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x24a>
 8000472:	19e7      	adds	r7, r4, r7
 8000474:	f100 31ff 	add.w	r1, r0, #4294967295
 8000478:	d22e      	bcs.n	80004d8 <__udivmoddi4+0x2a0>
 800047a:	45b8      	cmp	r8, r7
 800047c:	d92c      	bls.n	80004d8 <__udivmoddi4+0x2a0>
 800047e:	3802      	subs	r0, #2
 8000480:	4427      	add	r7, r4
 8000482:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000486:	eba7 0708 	sub.w	r7, r7, r8
 800048a:	fba0 8902 	umull	r8, r9, r0, r2
 800048e:	454f      	cmp	r7, r9
 8000490:	46c6      	mov	lr, r8
 8000492:	4649      	mov	r1, r9
 8000494:	d31a      	bcc.n	80004cc <__udivmoddi4+0x294>
 8000496:	d017      	beq.n	80004c8 <__udivmoddi4+0x290>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x27a>
 800049a:	ebb3 020e 	subs.w	r2, r3, lr
 800049e:	eb67 0701 	sbc.w	r7, r7, r1
 80004a2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004a6:	40f2      	lsrs	r2, r6
 80004a8:	ea4c 0202 	orr.w	r2, ip, r2
 80004ac:	40f7      	lsrs	r7, r6
 80004ae:	e9c5 2700 	strd	r2, r7, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	462e      	mov	r6, r5
 80004bc:	4628      	mov	r0, r5
 80004be:	e70b      	b.n	80002d8 <__udivmoddi4+0xa0>
 80004c0:	4606      	mov	r6, r0
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0x60>
 80004c4:	4618      	mov	r0, r3
 80004c6:	e6fd      	b.n	80002c4 <__udivmoddi4+0x8c>
 80004c8:	4543      	cmp	r3, r8
 80004ca:	d2e5      	bcs.n	8000498 <__udivmoddi4+0x260>
 80004cc:	ebb8 0e02 	subs.w	lr, r8, r2
 80004d0:	eb69 0104 	sbc.w	r1, r9, r4
 80004d4:	3801      	subs	r0, #1
 80004d6:	e7df      	b.n	8000498 <__udivmoddi4+0x260>
 80004d8:	4608      	mov	r0, r1
 80004da:	e7d2      	b.n	8000482 <__udivmoddi4+0x24a>
 80004dc:	4660      	mov	r0, ip
 80004de:	e78d      	b.n	80003fc <__udivmoddi4+0x1c4>
 80004e0:	4681      	mov	r9, r0
 80004e2:	e7b9      	b.n	8000458 <__udivmoddi4+0x220>
 80004e4:	4666      	mov	r6, ip
 80004e6:	e775      	b.n	80003d4 <__udivmoddi4+0x19c>
 80004e8:	4630      	mov	r0, r6
 80004ea:	e74a      	b.n	8000382 <__udivmoddi4+0x14a>
 80004ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f0:	4439      	add	r1, r7
 80004f2:	e713      	b.n	800031c <__udivmoddi4+0xe4>
 80004f4:	3802      	subs	r0, #2
 80004f6:	443c      	add	r4, r7
 80004f8:	e724      	b.n	8000344 <__udivmoddi4+0x10c>
 80004fa:	bf00      	nop

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <dt_cls_predict>:
  * @param input	Pointer to an array of NUM_FEATURES length
  * @param output	Pointer to an array of NUM_CLASSES length
  * @retval 0 if successful inference
  */
int dt_cls_predict(float *input, int *output)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b084      	sub	sp, #16
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
 8000508:	6039      	str	r1, [r7, #0]
    int idx = 0; // Root Node
 800050a:	2300      	movs	r3, #0
 800050c:	60fb      	str	r3, [r7, #12]
    while (idx >= 0)
 800050e:	e034      	b.n	800057a <dt_cls_predict+0x7a>
    {
        float feature_val = input[SPLIT_FEATURE[idx]];
 8000510:	4a1e      	ldr	r2, [pc, #120]	; (800058c <dt_cls_predict+0x8c>)
 8000512:	68fb      	ldr	r3, [r7, #12]
 8000514:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000518:	009b      	lsls	r3, r3, #2
 800051a:	687a      	ldr	r2, [r7, #4]
 800051c:	4413      	add	r3, r2
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	60bb      	str	r3, [r7, #8]
        if (SPLIT_FEATURE[idx] < 0)
 8000522:	4a1a      	ldr	r2, [pc, #104]	; (800058c <dt_cls_predict+0x8c>)
 8000524:	68fb      	ldr	r3, [r7, #12]
 8000526:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800052a:	2b00      	cmp	r3, #0
 800052c:	da0d      	bge.n	800054a <dt_cls_predict+0x4a>
        {
        	memcpy(output, VALUES[idx], NUM_CLASSES * sizeof(int));
 800052e:	68fa      	ldr	r2, [r7, #12]
 8000530:	4613      	mov	r3, r2
 8000532:	009b      	lsls	r3, r3, #2
 8000534:	4413      	add	r3, r2
 8000536:	00db      	lsls	r3, r3, #3
 8000538:	4a15      	ldr	r2, [pc, #84]	; (8000590 <dt_cls_predict+0x90>)
 800053a:	4413      	add	r3, r2
 800053c:	2228      	movs	r2, #40	; 0x28
 800053e:	4619      	mov	r1, r3
 8000540:	6838      	ldr	r0, [r7, #0]
 8000542:	f008 f8bf 	bl	80086c4 <memcpy>
        	return 0;
 8000546:	2300      	movs	r3, #0
 8000548:	e01c      	b.n	8000584 <dt_cls_predict+0x84>
        }
        if (feature_val < THRESHOLDS[idx])
 800054a:	4a12      	ldr	r2, [pc, #72]	; (8000594 <dt_cls_predict+0x94>)
 800054c:	68fb      	ldr	r3, [r7, #12]
 800054e:	009b      	lsls	r3, r3, #2
 8000550:	4413      	add	r3, r2
 8000552:	edd3 7a00 	vldr	s15, [r3]
 8000556:	ed97 7a02 	vldr	s14, [r7, #8]
 800055a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800055e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000562:	d505      	bpl.n	8000570 <dt_cls_predict+0x70>
            idx = LEFT_CHILDREN[idx];
 8000564:	4a0c      	ldr	r2, [pc, #48]	; (8000598 <dt_cls_predict+0x98>)
 8000566:	68fb      	ldr	r3, [r7, #12]
 8000568:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800056c:	60fb      	str	r3, [r7, #12]
 800056e:	e004      	b.n	800057a <dt_cls_predict+0x7a>
        else
            idx = RIGHT_CHILDREN[idx];
 8000570:	4a0a      	ldr	r2, [pc, #40]	; (800059c <dt_cls_predict+0x9c>)
 8000572:	68fb      	ldr	r3, [r7, #12]
 8000574:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000578:	60fb      	str	r3, [r7, #12]
    while (idx >= 0)
 800057a:	68fb      	ldr	r3, [r7, #12]
 800057c:	2b00      	cmp	r3, #0
 800057e:	dac7      	bge.n	8000510 <dt_cls_predict+0x10>
    }
    return -1;
 8000580:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000584:	4618      	mov	r0, r3
 8000586:	3710      	adds	r7, #16
 8000588:	46bd      	mov	sp, r7
 800058a:	bd80      	pop	{r7, pc}
 800058c:	0800bc48 	.word	0x0800bc48
 8000590:	0800e880 	.word	0x0800e880
 8000594:	0800d264 	.word	0x0800d264
 8000598:	08009010 	.word	0x08009010
 800059c:	0800a62c 	.word	0x0800a62c

080005a0 <hdr_calculate_moments>:
#include "hdr_feature_extraction.h"
#include "math.h"
#include "string.h"

int8_t hdr_calculate_moments(IMAGE_HandleTypeDef * img, HDR_FtrExtOutput *output)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	ed2d 8b02 	vpush	{d8}
 80005a6:	b088      	sub	sp, #32
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
 80005ac:	6039      	str	r1, [r7, #0]
	if (img->format != IMAGE_FORMAT_GRAYSCALE)
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	7a1b      	ldrb	r3, [r3, #8]
 80005b2:	2b01      	cmp	r3, #1
 80005b4:	d002      	beq.n	80005bc <hdr_calculate_moments+0x1c>
	{
		return -1;
 80005b6:	f04f 33ff 	mov.w	r3, #4294967295
 80005ba:	e221      	b.n	8000a00 <hdr_calculate_moments+0x460>
	}
	memset(output, 0, sizeof(HDR_FtrExtOutput));
 80005bc:	22dc      	movs	r2, #220	; 0xdc
 80005be:	2100      	movs	r1, #0
 80005c0:	6838      	ldr	r0, [r7, #0]
 80005c2:	f008 f88d 	bl	80086e0 <memset>
    for(uint32_t c = 0; c < img->width; c++)
 80005c6:	2300      	movs	r3, #0
 80005c8:	61fb      	str	r3, [r7, #28]
 80005ca:	e072      	b.n	80006b2 <hdr_calculate_moments+0x112>
    {
        for (uint32_t r = 0; r < img->height; r++)
 80005cc:	2300      	movs	r3, #0
 80005ce:	61bb      	str	r3, [r7, #24]
 80005d0:	e066      	b.n	80006a0 <hdr_calculate_moments+0x100>
        {
            for(uint32_t i = 0; i < 4; i++)
 80005d2:	2300      	movs	r3, #0
 80005d4:	617b      	str	r3, [r7, #20]
 80005d6:	e05d      	b.n	8000694 <hdr_calculate_moments+0xf4>
            {
                for(uint32_t j = 0; j < 4 - i; j++)
 80005d8:	2300      	movs	r3, #0
 80005da:	613b      	str	r3, [r7, #16]
 80005dc:	e051      	b.n	8000682 <hdr_calculate_moments+0xe2>
                {
                	output->moments[i][j] += powf((float)c, (float)i) * powf((float)r, (float)j) * ((float)(img->pData[c * img->height + r]) > 0.0f);
 80005de:	69fb      	ldr	r3, [r7, #28]
 80005e0:	ee07 3a90 	vmov	s15, r3
 80005e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80005e8:	697b      	ldr	r3, [r7, #20]
 80005ea:	ee07 3a10 	vmov	s14, r3
 80005ee:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80005f2:	eef0 0a47 	vmov.f32	s1, s14
 80005f6:	eeb0 0a67 	vmov.f32	s0, s15
 80005fa:	f008 f8b1 	bl	8008760 <powf>
 80005fe:	eeb0 8a40 	vmov.f32	s16, s0
 8000602:	69bb      	ldr	r3, [r7, #24]
 8000604:	ee07 3a90 	vmov	s15, r3
 8000608:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800060c:	693b      	ldr	r3, [r7, #16]
 800060e:	ee07 3a10 	vmov	s14, r3
 8000612:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8000616:	eef0 0a47 	vmov.f32	s1, s14
 800061a:	eeb0 0a67 	vmov.f32	s0, s15
 800061e:	f008 f89f 	bl	8008760 <powf>
 8000622:	eef0 7a40 	vmov.f32	s15, s0
 8000626:	ee68 7a27 	vmul.f32	s15, s16, s15
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	681a      	ldr	r2, [r3, #0]
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	88db      	ldrh	r3, [r3, #6]
 8000632:	4619      	mov	r1, r3
 8000634:	69fb      	ldr	r3, [r7, #28]
 8000636:	fb03 f101 	mul.w	r1, r3, r1
 800063a:	69bb      	ldr	r3, [r7, #24]
 800063c:	440b      	add	r3, r1
 800063e:	4413      	add	r3, r2
 8000640:	781b      	ldrb	r3, [r3, #0]
 8000642:	2b00      	cmp	r3, #0
 8000644:	d002      	beq.n	800064c <hdr_calculate_moments+0xac>
 8000646:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800064a:	e001      	b.n	8000650 <hdr_calculate_moments+0xb0>
 800064c:	ed9f 7ad9 	vldr	s14, [pc, #868]	; 80009b4 <hdr_calculate_moments+0x414>
 8000650:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000654:	683a      	ldr	r2, [r7, #0]
 8000656:	697b      	ldr	r3, [r7, #20]
 8000658:	0099      	lsls	r1, r3, #2
 800065a:	693b      	ldr	r3, [r7, #16]
 800065c:	440b      	add	r3, r1
 800065e:	009b      	lsls	r3, r3, #2
 8000660:	4413      	add	r3, r2
 8000662:	edd3 7a00 	vldr	s15, [r3]
 8000666:	ee77 7a27 	vadd.f32	s15, s14, s15
 800066a:	683a      	ldr	r2, [r7, #0]
 800066c:	697b      	ldr	r3, [r7, #20]
 800066e:	0099      	lsls	r1, r3, #2
 8000670:	693b      	ldr	r3, [r7, #16]
 8000672:	440b      	add	r3, r1
 8000674:	009b      	lsls	r3, r3, #2
 8000676:	4413      	add	r3, r2
 8000678:	edc3 7a00 	vstr	s15, [r3]
                for(uint32_t j = 0; j < 4 - i; j++)
 800067c:	693b      	ldr	r3, [r7, #16]
 800067e:	3301      	adds	r3, #1
 8000680:	613b      	str	r3, [r7, #16]
 8000682:	697b      	ldr	r3, [r7, #20]
 8000684:	f1c3 0304 	rsb	r3, r3, #4
 8000688:	693a      	ldr	r2, [r7, #16]
 800068a:	429a      	cmp	r2, r3
 800068c:	d3a7      	bcc.n	80005de <hdr_calculate_moments+0x3e>
            for(uint32_t i = 0; i < 4; i++)
 800068e:	697b      	ldr	r3, [r7, #20]
 8000690:	3301      	adds	r3, #1
 8000692:	617b      	str	r3, [r7, #20]
 8000694:	697b      	ldr	r3, [r7, #20]
 8000696:	2b03      	cmp	r3, #3
 8000698:	d99e      	bls.n	80005d8 <hdr_calculate_moments+0x38>
        for (uint32_t r = 0; r < img->height; r++)
 800069a:	69bb      	ldr	r3, [r7, #24]
 800069c:	3301      	adds	r3, #1
 800069e:	61bb      	str	r3, [r7, #24]
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	88db      	ldrh	r3, [r3, #6]
 80006a4:	461a      	mov	r2, r3
 80006a6:	69bb      	ldr	r3, [r7, #24]
 80006a8:	4293      	cmp	r3, r2
 80006aa:	d392      	bcc.n	80005d2 <hdr_calculate_moments+0x32>
    for(uint32_t c = 0; c < img->width; c++)
 80006ac:	69fb      	ldr	r3, [r7, #28]
 80006ae:	3301      	adds	r3, #1
 80006b0:	61fb      	str	r3, [r7, #28]
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	889b      	ldrh	r3, [r3, #4]
 80006b6:	461a      	mov	r2, r3
 80006b8:	69fb      	ldr	r3, [r7, #28]
 80006ba:	4293      	cmp	r3, r2
 80006bc:	d386      	bcc.n	80005cc <hdr_calculate_moments+0x2c>
                }
            }
        }
    }

    float centroid_x = output->moments[1][0] / output->moments[0][0];
 80006be:	683b      	ldr	r3, [r7, #0]
 80006c0:	edd3 6a04 	vldr	s13, [r3, #16]
 80006c4:	683b      	ldr	r3, [r7, #0]
 80006c6:	ed93 7a00 	vldr	s14, [r3]
 80006ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80006ce:	edc7 7a03 	vstr	s15, [r7, #12]
    float centroid_y = output->moments[0][1] / output->moments[0][0];
 80006d2:	683b      	ldr	r3, [r7, #0]
 80006d4:	edd3 6a01 	vldr	s13, [r3, #4]
 80006d8:	683b      	ldr	r3, [r7, #0]
 80006da:	ed93 7a00 	vldr	s14, [r3]
 80006de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80006e2:	edc7 7a02 	vstr	s15, [r7, #8]
    output->mu[1][1] = fmaxf(output->moments[1][1] - centroid_x * output->moments[0][1],0);
 80006e6:	683b      	ldr	r3, [r7, #0]
 80006e8:	ed93 7a05 	vldr	s14, [r3, #20]
 80006ec:	683b      	ldr	r3, [r7, #0]
 80006ee:	edd3 6a01 	vldr	s13, [r3, #4]
 80006f2:	edd7 7a03 	vldr	s15, [r7, #12]
 80006f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80006fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80006fe:	eddf 0aad 	vldr	s1, [pc, #692]	; 80009b4 <hdr_calculate_moments+0x414>
 8000702:	eeb0 0a67 	vmov.f32	s0, s15
 8000706:	f007 fff3 	bl	80086f0 <fmaxf>
 800070a:	eef0 7a40 	vmov.f32	s15, s0
 800070e:	683b      	ldr	r3, [r7, #0]
 8000710:	edc3 7a25 	vstr	s15, [r3, #148]	; 0x94
    output->mu[2][0] = fmaxf(output->moments[2][0] - centroid_x * output->moments[1][0],0);
 8000714:	683b      	ldr	r3, [r7, #0]
 8000716:	ed93 7a08 	vldr	s14, [r3, #32]
 800071a:	683b      	ldr	r3, [r7, #0]
 800071c:	edd3 6a04 	vldr	s13, [r3, #16]
 8000720:	edd7 7a03 	vldr	s15, [r7, #12]
 8000724:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000728:	ee77 7a67 	vsub.f32	s15, s14, s15
 800072c:	eddf 0aa1 	vldr	s1, [pc, #644]	; 80009b4 <hdr_calculate_moments+0x414>
 8000730:	eeb0 0a67 	vmov.f32	s0, s15
 8000734:	f007 ffdc 	bl	80086f0 <fmaxf>
 8000738:	eef0 7a40 	vmov.f32	s15, s0
 800073c:	683b      	ldr	r3, [r7, #0]
 800073e:	edc3 7a28 	vstr	s15, [r3, #160]	; 0xa0
    output->mu[0][2] = fmaxf(output->moments[0][2] - centroid_y * output->moments[0][1],0);
 8000742:	683b      	ldr	r3, [r7, #0]
 8000744:	ed93 7a02 	vldr	s14, [r3, #8]
 8000748:	683b      	ldr	r3, [r7, #0]
 800074a:	edd3 6a01 	vldr	s13, [r3, #4]
 800074e:	edd7 7a02 	vldr	s15, [r7, #8]
 8000752:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000756:	ee77 7a67 	vsub.f32	s15, s14, s15
 800075a:	eddf 0a96 	vldr	s1, [pc, #600]	; 80009b4 <hdr_calculate_moments+0x414>
 800075e:	eeb0 0a67 	vmov.f32	s0, s15
 8000762:	f007 ffc5 	bl	80086f0 <fmaxf>
 8000766:	eef0 7a40 	vmov.f32	s15, s0
 800076a:	683b      	ldr	r3, [r7, #0]
 800076c:	edc3 7a22 	vstr	s15, [r3, #136]	; 0x88
    output->mu[3][0] = fmaxf(output->moments[3][0] - 3 * centroid_x * output->moments[2][0] + 2 * powf(centroid_x, 2) * output->moments[1][0], 0);
 8000770:	683b      	ldr	r3, [r7, #0]
 8000772:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8000776:	edd7 7a03 	vldr	s15, [r7, #12]
 800077a:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 800077e:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8000782:	683b      	ldr	r3, [r7, #0]
 8000784:	edd3 7a08 	vldr	s15, [r3, #32]
 8000788:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800078c:	ee37 8a67 	vsub.f32	s16, s14, s15
 8000790:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8000794:	ed97 0a03 	vldr	s0, [r7, #12]
 8000798:	f007 ffe2 	bl	8008760 <powf>
 800079c:	eef0 7a40 	vmov.f32	s15, s0
 80007a0:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80007a4:	683b      	ldr	r3, [r7, #0]
 80007a6:	edd3 7a04 	vldr	s15, [r3, #16]
 80007aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80007ae:	ee78 7a27 	vadd.f32	s15, s16, s15
 80007b2:	eddf 0a80 	vldr	s1, [pc, #512]	; 80009b4 <hdr_calculate_moments+0x414>
 80007b6:	eeb0 0a67 	vmov.f32	s0, s15
 80007ba:	f007 ff99 	bl	80086f0 <fmaxf>
 80007be:	eef0 7a40 	vmov.f32	s15, s0
 80007c2:	683b      	ldr	r3, [r7, #0]
 80007c4:	edc3 7a2c 	vstr	s15, [r3, #176]	; 0xb0
    output->mu[2][1] = fmaxf(output->moments[2][1] - 2 * centroid_x * output->moments[1][1] - centroid_y * output->moments[2][0] + 2 * powf(centroid_x, 2) * output->moments[0][1],0);
 80007c8:	683b      	ldr	r3, [r7, #0]
 80007ca:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80007ce:	edd7 7a03 	vldr	s15, [r7, #12]
 80007d2:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80007d6:	683b      	ldr	r3, [r7, #0]
 80007d8:	edd3 7a05 	vldr	s15, [r3, #20]
 80007dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80007e0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80007e4:	683b      	ldr	r3, [r7, #0]
 80007e6:	edd3 6a08 	vldr	s13, [r3, #32]
 80007ea:	edd7 7a02 	vldr	s15, [r7, #8]
 80007ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80007f2:	ee37 8a67 	vsub.f32	s16, s14, s15
 80007f6:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80007fa:	ed97 0a03 	vldr	s0, [r7, #12]
 80007fe:	f007 ffaf 	bl	8008760 <powf>
 8000802:	eef0 7a40 	vmov.f32	s15, s0
 8000806:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800080a:	683b      	ldr	r3, [r7, #0]
 800080c:	edd3 7a01 	vldr	s15, [r3, #4]
 8000810:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000814:	ee78 7a27 	vadd.f32	s15, s16, s15
 8000818:	eddf 0a66 	vldr	s1, [pc, #408]	; 80009b4 <hdr_calculate_moments+0x414>
 800081c:	eeb0 0a67 	vmov.f32	s0, s15
 8000820:	f007 ff66 	bl	80086f0 <fmaxf>
 8000824:	eef0 7a40 	vmov.f32	s15, s0
 8000828:	683b      	ldr	r3, [r7, #0]
 800082a:	edc3 7a29 	vstr	s15, [r3, #164]	; 0xa4
    output->mu[1][2] = fmaxf(output->moments[1][2] - 2 * centroid_y * output->moments[1][1] - centroid_x * output->moments[0][2] + 2 * powf(centroid_y, 2) * output->moments[1][0],0);
 800082e:	683b      	ldr	r3, [r7, #0]
 8000830:	ed93 7a06 	vldr	s14, [r3, #24]
 8000834:	edd7 7a02 	vldr	s15, [r7, #8]
 8000838:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800083c:	683b      	ldr	r3, [r7, #0]
 800083e:	edd3 7a05 	vldr	s15, [r3, #20]
 8000842:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000846:	ee37 7a67 	vsub.f32	s14, s14, s15
 800084a:	683b      	ldr	r3, [r7, #0]
 800084c:	edd3 6a02 	vldr	s13, [r3, #8]
 8000850:	edd7 7a03 	vldr	s15, [r7, #12]
 8000854:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000858:	ee37 8a67 	vsub.f32	s16, s14, s15
 800085c:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8000860:	ed97 0a02 	vldr	s0, [r7, #8]
 8000864:	f007 ff7c 	bl	8008760 <powf>
 8000868:	eef0 7a40 	vmov.f32	s15, s0
 800086c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8000870:	683b      	ldr	r3, [r7, #0]
 8000872:	edd3 7a04 	vldr	s15, [r3, #16]
 8000876:	ee67 7a27 	vmul.f32	s15, s14, s15
 800087a:	ee78 7a27 	vadd.f32	s15, s16, s15
 800087e:	eddf 0a4d 	vldr	s1, [pc, #308]	; 80009b4 <hdr_calculate_moments+0x414>
 8000882:	eeb0 0a67 	vmov.f32	s0, s15
 8000886:	f007 ff33 	bl	80086f0 <fmaxf>
 800088a:	eef0 7a40 	vmov.f32	s15, s0
 800088e:	683b      	ldr	r3, [r7, #0]
 8000890:	edc3 7a26 	vstr	s15, [r3, #152]	; 0x98
    output->mu[0][3] = fmaxf(output->moments[0][3] - 3 * centroid_y * output->moments[0][2] + 2 * powf(centroid_y, 2) * output->moments[0][1], 0);
 8000894:	683b      	ldr	r3, [r7, #0]
 8000896:	ed93 7a03 	vldr	s14, [r3, #12]
 800089a:	edd7 7a02 	vldr	s15, [r7, #8]
 800089e:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 80008a2:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80008a6:	683b      	ldr	r3, [r7, #0]
 80008a8:	edd3 7a02 	vldr	s15, [r3, #8]
 80008ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80008b0:	ee37 8a67 	vsub.f32	s16, s14, s15
 80008b4:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80008b8:	ed97 0a02 	vldr	s0, [r7, #8]
 80008bc:	f007 ff50 	bl	8008760 <powf>
 80008c0:	eef0 7a40 	vmov.f32	s15, s0
 80008c4:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80008c8:	683b      	ldr	r3, [r7, #0]
 80008ca:	edd3 7a01 	vldr	s15, [r3, #4]
 80008ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80008d2:	ee78 7a27 	vadd.f32	s15, s16, s15
 80008d6:	eddf 0a37 	vldr	s1, [pc, #220]	; 80009b4 <hdr_calculate_moments+0x414>
 80008da:	eeb0 0a67 	vmov.f32	s0, s15
 80008de:	f007 ff07 	bl	80086f0 <fmaxf>
 80008e2:	eef0 7a40 	vmov.f32	s15, s0
 80008e6:	683b      	ldr	r3, [r7, #0]
 80008e8:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c
    output->nu[2][0] = output->mu[2][0] / powf(output->moments[0][0], 2.0);
 80008ec:	683b      	ldr	r3, [r7, #0]
 80008ee:	ed93 8a28 	vldr	s16, [r3, #160]	; 0xa0
 80008f2:	683b      	ldr	r3, [r7, #0]
 80008f4:	edd3 7a00 	vldr	s15, [r3]
 80008f8:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80008fc:	eeb0 0a67 	vmov.f32	s0, s15
 8000900:	f007 ff2e 	bl	8008760 <powf>
 8000904:	eeb0 7a40 	vmov.f32	s14, s0
 8000908:	eec8 7a07 	vdiv.f32	s15, s16, s14
 800090c:	683b      	ldr	r3, [r7, #0]
 800090e:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
    output->nu[1][1] = output->mu[1][1] / powf(output->moments[0][0], 2.0);
 8000912:	683b      	ldr	r3, [r7, #0]
 8000914:	ed93 8a25 	vldr	s16, [r3, #148]	; 0x94
 8000918:	683b      	ldr	r3, [r7, #0]
 800091a:	edd3 7a00 	vldr	s15, [r3]
 800091e:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8000922:	eeb0 0a67 	vmov.f32	s0, s15
 8000926:	f007 ff1b 	bl	8008760 <powf>
 800092a:	eeb0 7a40 	vmov.f32	s14, s0
 800092e:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8000932:	683b      	ldr	r3, [r7, #0]
 8000934:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
    output->nu[0][2] = output->mu[0][2] / powf(output->moments[0][0], 2.0);
 8000938:	683b      	ldr	r3, [r7, #0]
 800093a:	ed93 8a22 	vldr	s16, [r3, #136]	; 0x88
 800093e:	683b      	ldr	r3, [r7, #0]
 8000940:	edd3 7a00 	vldr	s15, [r3]
 8000944:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8000948:	eeb0 0a67 	vmov.f32	s0, s15
 800094c:	f007 ff08 	bl	8008760 <powf>
 8000950:	eeb0 7a40 	vmov.f32	s14, s0
 8000954:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8000958:	683b      	ldr	r3, [r7, #0]
 800095a:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
    output->nu[3][0] = output->mu[3][0] / powf(output->moments[0][0], 2.5);
 800095e:	683b      	ldr	r3, [r7, #0]
 8000960:	ed93 8a2c 	vldr	s16, [r3, #176]	; 0xb0
 8000964:	683b      	ldr	r3, [r7, #0]
 8000966:	edd3 7a00 	vldr	s15, [r3]
 800096a:	eef0 0a04 	vmov.f32	s1, #4	; 0x40200000  2.5
 800096e:	eeb0 0a67 	vmov.f32	s0, s15
 8000972:	f007 fef5 	bl	8008760 <powf>
 8000976:	eeb0 7a40 	vmov.f32	s14, s0
 800097a:	eec8 7a07 	vdiv.f32	s15, s16, s14
 800097e:	683b      	ldr	r3, [r7, #0]
 8000980:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
    output->nu[2][1] = output->mu[2][1] / powf(output->moments[0][0], 2.5);
 8000984:	683b      	ldr	r3, [r7, #0]
 8000986:	ed93 8a29 	vldr	s16, [r3, #164]	; 0xa4
 800098a:	683b      	ldr	r3, [r7, #0]
 800098c:	edd3 7a00 	vldr	s15, [r3]
 8000990:	eef0 0a04 	vmov.f32	s1, #4	; 0x40200000  2.5
 8000994:	eeb0 0a67 	vmov.f32	s0, s15
 8000998:	f007 fee2 	bl	8008760 <powf>
 800099c:	eeb0 7a40 	vmov.f32	s14, s0
 80009a0:	eec8 7a07 	vdiv.f32	s15, s16, s14
 80009a4:	683b      	ldr	r3, [r7, #0]
 80009a6:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
    output->nu[1][2] = output->mu[1][2] / powf(output->moments[0][0], 2.5);
 80009aa:	683b      	ldr	r3, [r7, #0]
 80009ac:	ed93 8a26 	vldr	s16, [r3, #152]	; 0x98
 80009b0:	e002      	b.n	80009b8 <hdr_calculate_moments+0x418>
 80009b2:	bf00      	nop
 80009b4:	00000000 	.word	0x00000000
 80009b8:	683b      	ldr	r3, [r7, #0]
 80009ba:	edd3 7a00 	vldr	s15, [r3]
 80009be:	eef0 0a04 	vmov.f32	s1, #4	; 0x40200000  2.5
 80009c2:	eeb0 0a67 	vmov.f32	s0, s15
 80009c6:	f007 fecb 	bl	8008760 <powf>
 80009ca:	eeb0 7a40 	vmov.f32	s14, s0
 80009ce:	eec8 7a07 	vdiv.f32	s15, s16, s14
 80009d2:	683b      	ldr	r3, [r7, #0]
 80009d4:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
    output->nu[0][3] = output->mu[0][3] / powf(output->moments[0][0], 2.5);
 80009d8:	683b      	ldr	r3, [r7, #0]
 80009da:	ed93 8a23 	vldr	s16, [r3, #140]	; 0x8c
 80009de:	683b      	ldr	r3, [r7, #0]
 80009e0:	edd3 7a00 	vldr	s15, [r3]
 80009e4:	eef0 0a04 	vmov.f32	s1, #4	; 0x40200000  2.5
 80009e8:	eeb0 0a67 	vmov.f32	s0, s15
 80009ec:	f007 feb8 	bl	8008760 <powf>
 80009f0:	eeb0 7a40 	vmov.f32	s14, s0
 80009f4:	eec8 7a07 	vdiv.f32	s15, s16, s14
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
    return 0;
 80009fe:	2300      	movs	r3, #0
}
 8000a00:	4618      	mov	r0, r3
 8000a02:	3720      	adds	r7, #32
 8000a04:	46bd      	mov	sp, r7
 8000a06:	ecbd 8b02 	vpop	{d8}
 8000a0a:	bd80      	pop	{r7, pc}

08000a0c <hdr_calculate_hu_moments>:


void hdr_calculate_hu_moments(HDR_FtrExtOutput *output)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	ed2d 8b04 	vpush	{d8-d9}
 8000a12:	b082      	sub	sp, #8
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
	output->hu_moments[0] = output->nu[2][0] + output->nu[0][2];
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	ed93 7a18 	vldr	s14, [r3, #96]	; 0x60
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8000a24:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	edc3 7a30 	vstr	s15, [r3, #192]	; 0xc0
	output->hu_moments[1] = powf(output->nu[2][0] - output->nu[0][2], 2) + 4 * powf(output->nu[1][1], 2);
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	ed93 7a18 	vldr	s14, [r3, #96]	; 0x60
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8000a3a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000a3e:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8000a42:	eeb0 0a67 	vmov.f32	s0, s15
 8000a46:	f007 fe8b 	bl	8008760 <powf>
 8000a4a:	eeb0 8a40 	vmov.f32	s16, s0
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8000a54:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8000a58:	eeb0 0a67 	vmov.f32	s0, s15
 8000a5c:	f007 fe80 	bl	8008760 <powf>
 8000a60:	eef0 7a40 	vmov.f32	s15, s0
 8000a64:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8000a68:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a6c:	ee78 7a27 	vadd.f32	s15, s16, s15
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	edc3 7a31 	vstr	s15, [r3, #196]	; 0xc4
	output->hu_moments[2] = powf(output->nu[3][0] -3 * output->nu[1][2], 2) + powf(3 * output->nu[2][1] - output->nu[0][3], 2);
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	ed93 7a1c 	vldr	s14, [r3, #112]	; 0x70
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8000a82:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8000a86:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000a8a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000a8e:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8000a92:	eeb0 0a67 	vmov.f32	s0, s15
 8000a96:	f007 fe63 	bl	8008760 <powf>
 8000a9a:	eeb0 8a40 	vmov.f32	s16, s0
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8000aa4:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8000aa8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8000ab2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000ab6:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8000aba:	eeb0 0a67 	vmov.f32	s0, s15
 8000abe:	f007 fe4f 	bl	8008760 <powf>
 8000ac2:	eef0 7a40 	vmov.f32	s15, s0
 8000ac6:	ee78 7a27 	vadd.f32	s15, s16, s15
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	edc3 7a32 	vstr	s15, [r3, #200]	; 0xc8
	output->hu_moments[3] = powf(output->nu[3][0] + output->nu[1][2], 2) + powf(output->nu[2][1] + output->nu[0][3], 2);
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	ed93 7a1c 	vldr	s14, [r3, #112]	; 0x70
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8000adc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ae0:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8000ae4:	eeb0 0a67 	vmov.f32	s0, s15
 8000ae8:	f007 fe3a 	bl	8008760 <powf>
 8000aec:	eeb0 8a40 	vmov.f32	s16, s0
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	ed93 7a19 	vldr	s14, [r3, #100]	; 0x64
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8000afc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b00:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8000b04:	eeb0 0a67 	vmov.f32	s0, s15
 8000b08:	f007 fe2a 	bl	8008760 <powf>
 8000b0c:	eef0 7a40 	vmov.f32	s15, s0
 8000b10:	ee78 7a27 	vadd.f32	s15, s16, s15
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	edc3 7a33 	vstr	s15, [r3, #204]	; 0xcc
	output->hu_moments[4] = (output->nu[3][0] - 3 * output->nu[1][2])
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	ed93 7a1c 	vldr	s14, [r3, #112]	; 0x70
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8000b26:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8000b2a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000b2e:	ee37 7a67 	vsub.f32	s14, s14, s15
					* (output->nu[3][0] + output->nu[1][2])
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	edd3 6a1c 	vldr	s13, [r3, #112]	; 0x70
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8000b3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8000b42:	ee27 8a27 	vmul.f32	s16, s14, s15
					* (powf(output->nu[3][0] + output->nu[1][2], 2) - 3 * powf(output->nu[2][1] + output->nu[0][3], 2))
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	ed93 7a1c 	vldr	s14, [r3, #112]	; 0x70
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8000b52:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b56:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8000b5a:	eeb0 0a67 	vmov.f32	s0, s15
 8000b5e:	f007 fdff 	bl	8008760 <powf>
 8000b62:	eef0 8a40 	vmov.f32	s17, s0
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	ed93 7a19 	vldr	s14, [r3, #100]	; 0x64
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8000b72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b76:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8000b7a:	eeb0 0a67 	vmov.f32	s0, s15
 8000b7e:	f007 fdef 	bl	8008760 <powf>
 8000b82:	eef0 7a40 	vmov.f32	s15, s0
 8000b86:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8000b8a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b8e:	ee78 7ae7 	vsub.f32	s15, s17, s15
 8000b92:	ee28 8a27 	vmul.f32	s16, s16, s15
					+ (3 * output->nu[2][1] - output->nu[0][3])
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8000b9c:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8000ba0:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8000baa:	ee37 7a67 	vsub.f32	s14, s14, s15
					* (output->nu[2][1] + output->nu[0][3])
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	edd3 6a19 	vldr	s13, [r3, #100]	; 0x64
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8000bba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8000bbe:	ee67 8a27 	vmul.f32	s17, s14, s15
					* (3 * powf(output->nu[3][0] + output->nu[1][2], 2) - powf(output->nu[2][1] + output->nu[0][3],2));
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	ed93 7a1c 	vldr	s14, [r3, #112]	; 0x70
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8000bce:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000bd2:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8000bd6:	eeb0 0a67 	vmov.f32	s0, s15
 8000bda:	f007 fdc1 	bl	8008760 <powf>
 8000bde:	eef0 7a40 	vmov.f32	s15, s0
 8000be2:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8000be6:	ee27 9a87 	vmul.f32	s18, s15, s14
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	ed93 7a19 	vldr	s14, [r3, #100]	; 0x64
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8000bf6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000bfa:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8000bfe:	eeb0 0a67 	vmov.f32	s0, s15
 8000c02:	f007 fdad 	bl	8008760 <powf>
 8000c06:	eef0 7a40 	vmov.f32	s15, s0
 8000c0a:	ee79 7a67 	vsub.f32	s15, s18, s15
 8000c0e:	ee68 7aa7 	vmul.f32	s15, s17, s15
					+ (3 * output->nu[2][1] - output->nu[0][3])
 8000c12:	ee78 7a27 	vadd.f32	s15, s16, s15
	output->hu_moments[4] = (output->nu[3][0] - 3 * output->nu[1][2])
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	edc3 7a34 	vstr	s15, [r3, #208]	; 0xd0
	output->hu_moments[5] = (output->nu[2][0]- output->nu[0][2])
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	ed93 7a18 	vldr	s14, [r3, #96]	; 0x60
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8000c28:	ee37 8a67 	vsub.f32	s16, s14, s15
					* (powf(output->nu[3][0]+ output->nu[1][2],2) - powf(output->nu[2][1] + output->nu[0][3],2))
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	ed93 7a1c 	vldr	s14, [r3, #112]	; 0x70
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8000c38:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c3c:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8000c40:	eeb0 0a67 	vmov.f32	s0, s15
 8000c44:	f007 fd8c 	bl	8008760 <powf>
 8000c48:	eef0 8a40 	vmov.f32	s17, s0
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	ed93 7a19 	vldr	s14, [r3, #100]	; 0x64
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8000c58:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c5c:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8000c60:	eeb0 0a67 	vmov.f32	s0, s15
 8000c64:	f007 fd7c 	bl	8008760 <powf>
 8000c68:	eef0 7a40 	vmov.f32	s15, s0
 8000c6c:	ee78 7ae7 	vsub.f32	s15, s17, s15
 8000c70:	ee28 7a27 	vmul.f32	s14, s16, s15
					+ 4 * output->nu[1][1] * (output->nu[3][0] + output->nu[1][2]) * (output->nu[2][1] + output->nu[0][3]);
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8000c7a:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8000c7e:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	ed93 6a1c 	vldr	s12, [r3, #112]	; 0x70
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8000c8e:	ee76 7a27 	vadd.f32	s15, s12, s15
 8000c92:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	ed93 6a19 	vldr	s12, [r3, #100]	; 0x64
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8000ca2:	ee76 7a27 	vadd.f32	s15, s12, s15
 8000ca6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000caa:	ee77 7a27 	vadd.f32	s15, s14, s15
	output->hu_moments[5] = (output->nu[2][0]- output->nu[0][2])
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	edc3 7a35 	vstr	s15, [r3, #212]	; 0xd4
	output->hu_moments[6] = (3 * output->nu[2][1] - output->nu[0][3])
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8000cba:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8000cbe:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8000cc8:	ee37 7a67 	vsub.f32	s14, s14, s15
					* (output->nu[3][0] + output->nu[1][2])
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	edd3 6a1c 	vldr	s13, [r3, #112]	; 0x70
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8000cd8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8000cdc:	ee27 8a27 	vmul.f32	s16, s14, s15
					* (powf(output->nu[3][0] + output->nu[1][2], 2) - 3 * powf(output->nu[2][1] + output->nu[0][3], 2))
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	ed93 7a1c 	vldr	s14, [r3, #112]	; 0x70
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8000cec:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000cf0:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8000cf4:	eeb0 0a67 	vmov.f32	s0, s15
 8000cf8:	f007 fd32 	bl	8008760 <powf>
 8000cfc:	eef0 8a40 	vmov.f32	s17, s0
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	ed93 7a19 	vldr	s14, [r3, #100]	; 0x64
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8000d0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d10:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8000d14:	eeb0 0a67 	vmov.f32	s0, s15
 8000d18:	f007 fd22 	bl	8008760 <powf>
 8000d1c:	eef0 7a40 	vmov.f32	s15, s0
 8000d20:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8000d24:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d28:	ee78 7ae7 	vsub.f32	s15, s17, s15
 8000d2c:	ee28 8a27 	vmul.f32	s16, s16, s15
					- (output->nu[3][0]-3 * output->nu[1][2]) * (output->nu[2][1] + output->nu[0][3]) * (3 * powf(output->nu[3][0] + output->nu[1][2],2) - powf(output->nu[2][1] + output->nu[0][3], 2));
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	ed93 7a1c 	vldr	s14, [r3, #112]	; 0x70
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8000d3c:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8000d40:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000d44:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	edd3 6a19 	vldr	s13, [r3, #100]	; 0x64
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8000d54:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8000d58:	ee67 8a27 	vmul.f32	s17, s14, s15
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	ed93 7a1c 	vldr	s14, [r3, #112]	; 0x70
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8000d68:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d6c:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8000d70:	eeb0 0a67 	vmov.f32	s0, s15
 8000d74:	f007 fcf4 	bl	8008760 <powf>
 8000d78:	eef0 7a40 	vmov.f32	s15, s0
 8000d7c:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8000d80:	ee27 9a87 	vmul.f32	s18, s15, s14
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	ed93 7a19 	vldr	s14, [r3, #100]	; 0x64
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8000d90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d94:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8000d98:	eeb0 0a67 	vmov.f32	s0, s15
 8000d9c:	f007 fce0 	bl	8008760 <powf>
 8000da0:	eef0 7a40 	vmov.f32	s15, s0
 8000da4:	ee79 7a67 	vsub.f32	s15, s18, s15
 8000da8:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8000dac:	ee78 7a67 	vsub.f32	s15, s16, s15
	output->hu_moments[6] = (3 * output->nu[2][1] - output->nu[0][3])
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	edc3 7a36 	vstr	s15, [r3, #216]	; 0xd8
}
 8000db6:	bf00      	nop
 8000db8:	3708      	adds	r7, #8
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	ecbd 8b04 	vpop	{d8-d9}
 8000dc0:	bd80      	pop	{r7, pc}

08000dc2 <LIB_IMAGE_InitStruct>:
  * @param width   width of the image
  * @param format  Choose IMAGE_FORMAT_GRAYSCALE, IMAGE_FORMAT_RGB565, or IMAGE_FORMAT_RGB888
  * @retval 0 if successfully initialized
  */
int8_t LIB_IMAGE_InitStruct(IMAGE_HandleTypeDef * img, uint8_t *pImg, uint16_t height, uint16_t width, IMAGE_Format format)
{
 8000dc2:	b480      	push	{r7}
 8000dc4:	b085      	sub	sp, #20
 8000dc6:	af00      	add	r7, sp, #0
 8000dc8:	60f8      	str	r0, [r7, #12]
 8000dca:	60b9      	str	r1, [r7, #8]
 8000dcc:	4611      	mov	r1, r2
 8000dce:	461a      	mov	r2, r3
 8000dd0:	460b      	mov	r3, r1
 8000dd2:	80fb      	strh	r3, [r7, #6]
 8000dd4:	4613      	mov	r3, r2
 8000dd6:	80bb      	strh	r3, [r7, #4]
	__LIB_IMAGE_CHECK_PARAM(img);
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d102      	bne.n	8000de4 <LIB_IMAGE_InitStruct+0x22>
 8000dde:	f04f 33ff 	mov.w	r3, #4294967295
 8000de2:	e031      	b.n	8000e48 <LIB_IMAGE_InitStruct+0x86>
	__LIB_IMAGE_CHECK_PARAM(pImg);
 8000de4:	68bb      	ldr	r3, [r7, #8]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d102      	bne.n	8000df0 <LIB_IMAGE_InitStruct+0x2e>
 8000dea:	f04f 33ff 	mov.w	r3, #4294967295
 8000dee:	e02b      	b.n	8000e48 <LIB_IMAGE_InitStruct+0x86>
	__LIB_IMAGE_CHECK_PARAM(format);
 8000df0:	7e3b      	ldrb	r3, [r7, #24]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d102      	bne.n	8000dfc <LIB_IMAGE_InitStruct+0x3a>
 8000df6:	f04f 33ff 	mov.w	r3, #4294967295
 8000dfa:	e025      	b.n	8000e48 <LIB_IMAGE_InitStruct+0x86>
	__LIB_IMAGE_CHECK_PARAM(width);
 8000dfc:	88bb      	ldrh	r3, [r7, #4]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d102      	bne.n	8000e08 <LIB_IMAGE_InitStruct+0x46>
 8000e02:	f04f 33ff 	mov.w	r3, #4294967295
 8000e06:	e01f      	b.n	8000e48 <LIB_IMAGE_InitStruct+0x86>
	__LIB_IMAGE_CHECK_PARAM(height);
 8000e08:	88fb      	ldrh	r3, [r7, #6]
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d102      	bne.n	8000e14 <LIB_IMAGE_InitStruct+0x52>
 8000e0e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e12:	e019      	b.n	8000e48 <LIB_IMAGE_InitStruct+0x86>
	img->format = format;
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	7e3a      	ldrb	r2, [r7, #24]
 8000e18:	721a      	strb	r2, [r3, #8]
	img->height = height;
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	88fa      	ldrh	r2, [r7, #6]
 8000e1e:	80da      	strh	r2, [r3, #6]
	img->width 	= width;
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	88ba      	ldrh	r2, [r7, #4]
 8000e24:	809a      	strh	r2, [r3, #4]
	img->pData 	= pImg;
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	68ba      	ldr	r2, [r7, #8]
 8000e2a:	601a      	str	r2, [r3, #0]
	img->size 	= (uint32_t)img->format * (uint32_t)img->height * (uint32_t)img->width;
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	7a1b      	ldrb	r3, [r3, #8]
 8000e30:	461a      	mov	r2, r3
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	88db      	ldrh	r3, [r3, #6]
 8000e36:	fb03 f302 	mul.w	r3, r3, r2
 8000e3a:	68fa      	ldr	r2, [r7, #12]
 8000e3c:	8892      	ldrh	r2, [r2, #4]
 8000e3e:	fb02 f203 	mul.w	r2, r2, r3
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	60da      	str	r2, [r3, #12]
	return IMAGE_OK;
 8000e46:	2300      	movs	r3, #0
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	3714      	adds	r7, #20
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e52:	4770      	bx	lr

08000e54 <LIB_MPU_Init>:
 */

#include "lib_mpu.h"

void LIB_MPU_Init(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b084      	sub	sp, #16
 8000e58:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000e5a:	463b      	mov	r3, r7
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	601a      	str	r2, [r3, #0]
 8000e60:	605a      	str	r2, [r3, #4]
 8000e62:	609a      	str	r2, [r3, #8]
 8000e64:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000e66:	f002 fcbb 	bl	80037e0 <HAL_MPU_Disable>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0xC0000000;
 8000e72:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8000e76:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_8MB;
 8000e78:	2316      	movs	r3, #22
 8000e7a:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000e80:	2300      	movs	r3, #0
 8000e82:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000e84:	2303      	movs	r3, #3
 8000e86:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8000e90:	2301      	movs	r3, #1
 8000e92:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8000e94:	2301      	movs	r3, #1
 8000e96:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000e98:	463b      	mov	r3, r7
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f002 fcd8 	bl	8003850 <HAL_MPU_ConfigRegion>

  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000ea0:	2004      	movs	r0, #4
 8000ea2:	f002 fcb5 	bl	8003810 <HAL_MPU_Enable>
}
 8000ea6:	bf00      	nop
 8000ea8:	3710      	adds	r7, #16
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
	...

08000eb0 <LIB_OV5640_Init>:
  * @param  resolution from LIB_OV5640_Resolution enum
  * @param  format	from LIB_OV5640_Format enum
  * @retval 0 if successfully initialized
  */
int8_t LIB_OV5640_Init(LIB_OV5640_Resolution resolution, LIB_OV5640_Format format)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	460a      	mov	r2, r1
 8000eba:	71fb      	strb	r3, [r7, #7]
 8000ebc:	4613      	mov	r3, r2
 8000ebe:	71bb      	strb	r3, [r7, #6]
	LIB_DMA_Init();
 8000ec0:	f000 f87a 	bl	8000fb8 <LIB_DMA_Init>
	LIB_DCMI_MspInit(&__hdcmi);
 8000ec4:	4812      	ldr	r0, [pc, #72]	; (8000f10 <LIB_OV5640_Init+0x60>)
 8000ec6:	f000 f8d1 	bl	800106c <LIB_DCMI_MspInit>
	LIB_DCMI_Init();
 8000eca:	f000 f89d 	bl	8001008 <LIB_DCMI_Init>
	LIB_I2C_MspInit(&hi2c1);
 8000ece:	4811      	ldr	r0, [pc, #68]	; (8000f14 <LIB_OV5640_Init+0x64>)
 8000ed0:	f000 f9ea 	bl	80012a8 <LIB_I2C_MspInit>
	LIB_I2C1_Init();
 8000ed4:	f000 f9be 	bl	8001254 <LIB_I2C1_Init>
	ov5640.IO.WriteReg = __OV5640_WriteReg_Func;
 8000ed8:	4b0f      	ldr	r3, [pc, #60]	; (8000f18 <LIB_OV5640_Init+0x68>)
 8000eda:	4a10      	ldr	r2, [pc, #64]	; (8000f1c <LIB_OV5640_Init+0x6c>)
 8000edc:	60da      	str	r2, [r3, #12]
	ov5640.IO.ReadReg  = __OV5640_ReadReg_Func;
 8000ede:	4b0e      	ldr	r3, [pc, #56]	; (8000f18 <LIB_OV5640_Init+0x68>)
 8000ee0:	4a0f      	ldr	r2, [pc, #60]	; (8000f20 <LIB_OV5640_Init+0x70>)
 8000ee2:	611a      	str	r2, [r3, #16]
	ov5640.IO.GetTick  = __OV5640_GetTick_Func;
 8000ee4:	4b0c      	ldr	r3, [pc, #48]	; (8000f18 <LIB_OV5640_Init+0x68>)
 8000ee6:	4a0f      	ldr	r2, [pc, #60]	; (8000f24 <LIB_OV5640_Init+0x74>)
 8000ee8:	615a      	str	r2, [r3, #20]
	ov5640.IO.Address  = 0x78U;
 8000eea:	4b0b      	ldr	r3, [pc, #44]	; (8000f18 <LIB_OV5640_Init+0x68>)
 8000eec:	2278      	movs	r2, #120	; 0x78
 8000eee:	811a      	strh	r2, [r3, #8]
	OV5640_RegisterBusIO(&ov5640, &ov5640.IO);
 8000ef0:	4909      	ldr	r1, [pc, #36]	; (8000f18 <LIB_OV5640_Init+0x68>)
 8000ef2:	4809      	ldr	r0, [pc, #36]	; (8000f18 <LIB_OV5640_Init+0x68>)
 8000ef4:	f001 fac0 	bl	8002478 <OV5640_RegisterBusIO>
	return OV5640_Init(&ov5640, resolution, format);
 8000ef8:	79fb      	ldrb	r3, [r7, #7]
 8000efa:	79ba      	ldrb	r2, [r7, #6]
 8000efc:	4619      	mov	r1, r3
 8000efe:	4806      	ldr	r0, [pc, #24]	; (8000f18 <LIB_OV5640_Init+0x68>)
 8000f00:	f001 fafc 	bl	80024fc <OV5640_Init>
 8000f04:	4603      	mov	r3, r0
 8000f06:	b25b      	sxtb	r3, r3
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	3708      	adds	r7, #8
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	20000214 	.word	0x20000214
 8000f14:	20000168 	.word	0x20000168
 8000f18:	200000ac 	.word	0x200000ac
 8000f1c:	080013ad 	.word	0x080013ad
 8000f20:	0800136d 	.word	0x0800136d
 8000f24:	080013ed 	.word	0x080013ed

08000f28 <LIB_OV5640_CaptureSnapshot>:
  * @param  img pointer to image object
  * @param  timeout max time allowed in ms to capture one shot
  * @retval 0 if successfully captured
  */
int8_t LIB_OV5640_CaptureSnapshot(IMAGE_HandleTypeDef * img, uint32_t timeout)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b086      	sub	sp, #24
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
 8000f30:	6039      	str	r1, [r7, #0]
	int8_t status = OV5640_ERROR;
 8000f32:	23ff      	movs	r3, #255	; 0xff
 8000f34:	75fb      	strb	r3, [r7, #23]
	uint32_t currentFrameCount = ov5640FrameCount, currentTick;
 8000f36:	4b15      	ldr	r3, [pc, #84]	; (8000f8c <LIB_OV5640_CaptureSnapshot+0x64>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	613b      	str	r3, [r7, #16]
	HAL_DCMI_Start_DMA(&__hdcmi, DCMI_MODE_CONTINUOUS, (uint32_t)img->pData, img->size);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	461a      	mov	r2, r3
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	68db      	ldr	r3, [r3, #12]
 8000f46:	2100      	movs	r1, #0
 8000f48:	4811      	ldr	r0, [pc, #68]	; (8000f90 <LIB_OV5640_CaptureSnapshot+0x68>)
 8000f4a:	f002 fd3f 	bl	80039cc <HAL_DCMI_Start_DMA>
	currentTick = HAL_GetTick();
 8000f4e:	f002 fb05 	bl	800355c <HAL_GetTick>
 8000f52:	60f8      	str	r0, [r7, #12]
	while((HAL_GetTick() - currentTick) < timeout)
 8000f54:	e008      	b.n	8000f68 <LIB_OV5640_CaptureSnapshot+0x40>
	{
		if ((ov5640FrameCount - currentFrameCount) > 4)
 8000f56:	4b0d      	ldr	r3, [pc, #52]	; (8000f8c <LIB_OV5640_CaptureSnapshot+0x64>)
 8000f58:	681a      	ldr	r2, [r3, #0]
 8000f5a:	693b      	ldr	r3, [r7, #16]
 8000f5c:	1ad3      	subs	r3, r2, r3
 8000f5e:	2b04      	cmp	r3, #4
 8000f60:	d902      	bls.n	8000f68 <LIB_OV5640_CaptureSnapshot+0x40>
		{
			status = OV5640_OK;
 8000f62:	2300      	movs	r3, #0
 8000f64:	75fb      	strb	r3, [r7, #23]
			break;
 8000f66:	e007      	b.n	8000f78 <LIB_OV5640_CaptureSnapshot+0x50>
	while((HAL_GetTick() - currentTick) < timeout)
 8000f68:	f002 faf8 	bl	800355c <HAL_GetTick>
 8000f6c:	4602      	mov	r2, r0
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	1ad3      	subs	r3, r2, r3
 8000f72:	683a      	ldr	r2, [r7, #0]
 8000f74:	429a      	cmp	r2, r3
 8000f76:	d8ee      	bhi.n	8000f56 <LIB_OV5640_CaptureSnapshot+0x2e>
		}
	}
	HAL_DCMI_Stop(&__hdcmi);
 8000f78:	4805      	ldr	r0, [pc, #20]	; (8000f90 <LIB_OV5640_CaptureSnapshot+0x68>)
 8000f7a:	f002 fdd5 	bl	8003b28 <HAL_DCMI_Stop>
	return status;
 8000f7e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	3718      	adds	r7, #24
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	200000d4 	.word	0x200000d4
 8000f90:	20000214 	.word	0x20000214

08000f94 <HAL_DCMI_FrameEventCallback>:
{
	return ov5640FrameCount;
}

void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *__hdcmi)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
	ov5640FrameCount++;
 8000f9c:	4b05      	ldr	r3, [pc, #20]	; (8000fb4 <HAL_DCMI_FrameEventCallback+0x20>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	3301      	adds	r3, #1
 8000fa2:	4a04      	ldr	r2, [pc, #16]	; (8000fb4 <HAL_DCMI_FrameEventCallback+0x20>)
 8000fa4:	6013      	str	r3, [r2, #0]
}
 8000fa6:	bf00      	nop
 8000fa8:	370c      	adds	r7, #12
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop
 8000fb4:	200000d4 	.word	0x200000d4

08000fb8 <LIB_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void LIB_DMA_Init(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000fbe:	4b0c      	ldr	r3, [pc, #48]	; (8000ff0 <LIB_DMA_Init+0x38>)
 8000fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc2:	4a0b      	ldr	r2, [pc, #44]	; (8000ff0 <LIB_DMA_Init+0x38>)
 8000fc4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000fc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fca:	4b09      	ldr	r3, [pc, #36]	; (8000ff0 <LIB_DMA_Init+0x38>)
 8000fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000fd2:	607b      	str	r3, [r7, #4]
 8000fd4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 15, 0);
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	210f      	movs	r1, #15
 8000fda:	2039      	movs	r0, #57	; 0x39
 8000fdc:	f002 fbc9 	bl	8003772 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000fe0:	2039      	movs	r0, #57	; 0x39
 8000fe2:	f002 fbe2 	bl	80037aa <HAL_NVIC_EnableIRQ>

}
 8000fe6:	bf00      	nop
 8000fe8:	3708      	adds	r7, #8
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	40023800 	.word	0x40023800

08000ff4 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
    HAL_DMA_IRQHandler(&__hdma_dcmi);
 8000ff8:	4802      	ldr	r0, [pc, #8]	; (8001004 <DMA2_Stream1_IRQHandler+0x10>)
 8000ffa:	f003 f94b 	bl	8004294 <HAL_DMA_IRQHandler>
}
 8000ffe:	bf00      	nop
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	200001b4 	.word	0x200001b4

08001008 <LIB_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static int8_t LIB_DCMI_Init(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
    __hdcmi.Instance = DCMI;
 800100c:	4b15      	ldr	r3, [pc, #84]	; (8001064 <LIB_DCMI_Init+0x5c>)
 800100e:	4a16      	ldr	r2, [pc, #88]	; (8001068 <LIB_DCMI_Init+0x60>)
 8001010:	601a      	str	r2, [r3, #0]
    __hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8001012:	4b14      	ldr	r3, [pc, #80]	; (8001064 <LIB_DCMI_Init+0x5c>)
 8001014:	2200      	movs	r2, #0
 8001016:	605a      	str	r2, [r3, #4]
    __hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_RISING;
 8001018:	4b12      	ldr	r3, [pc, #72]	; (8001064 <LIB_DCMI_Init+0x5c>)
 800101a:	2220      	movs	r2, #32
 800101c:	609a      	str	r2, [r3, #8]
    __hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_HIGH;
 800101e:	4b11      	ldr	r3, [pc, #68]	; (8001064 <LIB_DCMI_Init+0x5c>)
 8001020:	2280      	movs	r2, #128	; 0x80
 8001022:	60da      	str	r2, [r3, #12]
    __hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_HIGH;
 8001024:	4b0f      	ldr	r3, [pc, #60]	; (8001064 <LIB_DCMI_Init+0x5c>)
 8001026:	2240      	movs	r2, #64	; 0x40
 8001028:	611a      	str	r2, [r3, #16]
    __hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 800102a:	4b0e      	ldr	r3, [pc, #56]	; (8001064 <LIB_DCMI_Init+0x5c>)
 800102c:	2200      	movs	r2, #0
 800102e:	615a      	str	r2, [r3, #20]
    __hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8001030:	4b0c      	ldr	r3, [pc, #48]	; (8001064 <LIB_DCMI_Init+0x5c>)
 8001032:	2200      	movs	r2, #0
 8001034:	619a      	str	r2, [r3, #24]
    __hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8001036:	4b0b      	ldr	r3, [pc, #44]	; (8001064 <LIB_DCMI_Init+0x5c>)
 8001038:	2200      	movs	r2, #0
 800103a:	621a      	str	r2, [r3, #32]
    __hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 800103c:	4b09      	ldr	r3, [pc, #36]	; (8001064 <LIB_DCMI_Init+0x5c>)
 800103e:	2200      	movs	r2, #0
 8001040:	625a      	str	r2, [r3, #36]	; 0x24
    __hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8001042:	4b08      	ldr	r3, [pc, #32]	; (8001064 <LIB_DCMI_Init+0x5c>)
 8001044:	2200      	movs	r2, #0
 8001046:	629a      	str	r2, [r3, #40]	; 0x28
    __hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8001048:	4b06      	ldr	r3, [pc, #24]	; (8001064 <LIB_DCMI_Init+0x5c>)
 800104a:	2200      	movs	r2, #0
 800104c:	62da      	str	r2, [r3, #44]	; 0x2c
    __hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 800104e:	4b05      	ldr	r3, [pc, #20]	; (8001064 <LIB_DCMI_Init+0x5c>)
 8001050:	2200      	movs	r2, #0
 8001052:	631a      	str	r2, [r3, #48]	; 0x30
    return HAL_DCMI_Init(&__hdcmi);
 8001054:	4803      	ldr	r0, [pc, #12]	; (8001064 <LIB_DCMI_Init+0x5c>)
 8001056:	f002 fc3f 	bl	80038d8 <HAL_DCMI_Init>
 800105a:	4603      	mov	r3, r0
 800105c:	b25b      	sxtb	r3, r3
}
 800105e:	4618      	mov	r0, r3
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	20000214 	.word	0x20000214
 8001068:	50050000 	.word	0x50050000

0800106c <LIB_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param __hdcmi: DCMI handle pointer
* @retval None
*/
static void LIB_DCMI_MspInit(DCMI_HandleTypeDef* __hdcmi)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b08e      	sub	sp, #56	; 0x38
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001074:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001078:	2200      	movs	r2, #0
 800107a:	601a      	str	r2, [r3, #0]
 800107c:	605a      	str	r2, [r3, #4]
 800107e:	609a      	str	r2, [r3, #8]
 8001080:	60da      	str	r2, [r3, #12]
 8001082:	611a      	str	r2, [r3, #16]
	/* Peripheral clock enable */
	__HAL_RCC_DCMI_CLK_ENABLE();
 8001084:	4b6b      	ldr	r3, [pc, #428]	; (8001234 <LIB_DCMI_MspInit+0x1c8>)
 8001086:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001088:	4a6a      	ldr	r2, [pc, #424]	; (8001234 <LIB_DCMI_MspInit+0x1c8>)
 800108a:	f043 0301 	orr.w	r3, r3, #1
 800108e:	6353      	str	r3, [r2, #52]	; 0x34
 8001090:	4b68      	ldr	r3, [pc, #416]	; (8001234 <LIB_DCMI_MspInit+0x1c8>)
 8001092:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001094:	f003 0301 	and.w	r3, r3, #1
 8001098:	623b      	str	r3, [r7, #32]
 800109a:	6a3b      	ldr	r3, [r7, #32]

	__HAL_RCC_GPIOE_CLK_ENABLE();
 800109c:	4b65      	ldr	r3, [pc, #404]	; (8001234 <LIB_DCMI_MspInit+0x1c8>)
 800109e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a0:	4a64      	ldr	r2, [pc, #400]	; (8001234 <LIB_DCMI_MspInit+0x1c8>)
 80010a2:	f043 0310 	orr.w	r3, r3, #16
 80010a6:	6313      	str	r3, [r2, #48]	; 0x30
 80010a8:	4b62      	ldr	r3, [pc, #392]	; (8001234 <LIB_DCMI_MspInit+0x1c8>)
 80010aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ac:	f003 0310 	and.w	r3, r3, #16
 80010b0:	61fb      	str	r3, [r7, #28]
 80010b2:	69fb      	ldr	r3, [r7, #28]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80010b4:	4b5f      	ldr	r3, [pc, #380]	; (8001234 <LIB_DCMI_MspInit+0x1c8>)
 80010b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b8:	4a5e      	ldr	r2, [pc, #376]	; (8001234 <LIB_DCMI_MspInit+0x1c8>)
 80010ba:	f043 0308 	orr.w	r3, r3, #8
 80010be:	6313      	str	r3, [r2, #48]	; 0x30
 80010c0:	4b5c      	ldr	r3, [pc, #368]	; (8001234 <LIB_DCMI_MspInit+0x1c8>)
 80010c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c4:	f003 0308 	and.w	r3, r3, #8
 80010c8:	61bb      	str	r3, [r7, #24]
 80010ca:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 80010cc:	4b59      	ldr	r3, [pc, #356]	; (8001234 <LIB_DCMI_MspInit+0x1c8>)
 80010ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d0:	4a58      	ldr	r2, [pc, #352]	; (8001234 <LIB_DCMI_MspInit+0x1c8>)
 80010d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010d6:	6313      	str	r3, [r2, #48]	; 0x30
 80010d8:	4b56      	ldr	r3, [pc, #344]	; (8001234 <LIB_DCMI_MspInit+0x1c8>)
 80010da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010e0:	617b      	str	r3, [r7, #20]
 80010e2:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80010e4:	4b53      	ldr	r3, [pc, #332]	; (8001234 <LIB_DCMI_MspInit+0x1c8>)
 80010e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e8:	4a52      	ldr	r2, [pc, #328]	; (8001234 <LIB_DCMI_MspInit+0x1c8>)
 80010ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010ee:	6313      	str	r3, [r2, #48]	; 0x30
 80010f0:	4b50      	ldr	r3, [pc, #320]	; (8001234 <LIB_DCMI_MspInit+0x1c8>)
 80010f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010f8:	613b      	str	r3, [r7, #16]
 80010fa:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80010fc:	4b4d      	ldr	r3, [pc, #308]	; (8001234 <LIB_DCMI_MspInit+0x1c8>)
 80010fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001100:	4a4c      	ldr	r2, [pc, #304]	; (8001234 <LIB_DCMI_MspInit+0x1c8>)
 8001102:	f043 0301 	orr.w	r3, r3, #1
 8001106:	6313      	str	r3, [r2, #48]	; 0x30
 8001108:	4b4a      	ldr	r3, [pc, #296]	; (8001234 <LIB_DCMI_MspInit+0x1c8>)
 800110a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110c:	f003 0301 	and.w	r3, r3, #1
 8001110:	60fb      	str	r3, [r7, #12]
 8001112:	68fb      	ldr	r3, [r7, #12]

	GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8001114:	2360      	movs	r3, #96	; 0x60
 8001116:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001118:	2302      	movs	r3, #2
 800111a:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111c:	2300      	movs	r3, #0
 800111e:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001120:	2300      	movs	r3, #0
 8001122:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001124:	230d      	movs	r3, #13
 8001126:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001128:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800112c:	4619      	mov	r1, r3
 800112e:	4842      	ldr	r0, [pc, #264]	; (8001238 <LIB_DCMI_MspInit+0x1cc>)
 8001130:	f004 fc90 	bl	8005a54 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8001134:	2308      	movs	r3, #8
 8001136:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001138:	2302      	movs	r3, #2
 800113a:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113c:	2300      	movs	r3, #0
 800113e:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001140:	2300      	movs	r3, #0
 8001142:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001144:	230d      	movs	r3, #13
 8001146:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8001148:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800114c:	4619      	mov	r1, r3
 800114e:	483b      	ldr	r0, [pc, #236]	; (800123c <LIB_DCMI_MspInit+0x1d0>)
 8001150:	f004 fc80 	bl	8005a54 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8001154:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001158:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800115a:	2302      	movs	r3, #2
 800115c:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115e:	2300      	movs	r3, #0
 8001160:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001162:	2300      	movs	r3, #0
 8001164:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001166:	230d      	movs	r3, #13
 8001168:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 800116a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800116e:	4619      	mov	r1, r3
 8001170:	4833      	ldr	r0, [pc, #204]	; (8001240 <LIB_DCMI_MspInit+0x1d4>)
 8001172:	f004 fc6f 	bl	8005a54 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8001176:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 800117a:	627b      	str	r3, [r7, #36]	; 0x24
							|DCMI_D1_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800117c:	2302      	movs	r3, #2
 800117e:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001180:	2300      	movs	r3, #0
 8001182:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001184:	2300      	movs	r3, #0
 8001186:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001188:	230d      	movs	r3, #13
 800118a:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800118c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001190:	4619      	mov	r1, r3
 8001192:	482c      	ldr	r0, [pc, #176]	; (8001244 <LIB_DCMI_MspInit+0x1d8>)
 8001194:	f004 fc5e 	bl	8005a54 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8001198:	2350      	movs	r3, #80	; 0x50
 800119a:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800119c:	2302      	movs	r3, #2
 800119e:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a0:	2300      	movs	r3, #0
 80011a2:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a4:	2300      	movs	r3, #0
 80011a6:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80011a8:	230d      	movs	r3, #13
 80011aa:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011b0:	4619      	mov	r1, r3
 80011b2:	4825      	ldr	r0, [pc, #148]	; (8001248 <LIB_DCMI_MspInit+0x1dc>)
 80011b4:	f004 fc4e 	bl	8005a54 <HAL_GPIO_Init>

	/* DCMI DMA Init */
	/* DCMI Init */
	__hdma_dcmi.Instance = DMA2_Stream1;
 80011b8:	4b24      	ldr	r3, [pc, #144]	; (800124c <LIB_DCMI_MspInit+0x1e0>)
 80011ba:	4a25      	ldr	r2, [pc, #148]	; (8001250 <LIB_DCMI_MspInit+0x1e4>)
 80011bc:	601a      	str	r2, [r3, #0]
	__hdma_dcmi.Init.Channel = DMA_CHANNEL_1;
 80011be:	4b23      	ldr	r3, [pc, #140]	; (800124c <LIB_DCMI_MspInit+0x1e0>)
 80011c0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80011c4:	605a      	str	r2, [r3, #4]
	__hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011c6:	4b21      	ldr	r3, [pc, #132]	; (800124c <LIB_DCMI_MspInit+0x1e0>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	609a      	str	r2, [r3, #8]
	__hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 80011cc:	4b1f      	ldr	r3, [pc, #124]	; (800124c <LIB_DCMI_MspInit+0x1e0>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	60da      	str	r2, [r3, #12]
	__hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 80011d2:	4b1e      	ldr	r3, [pc, #120]	; (800124c <LIB_DCMI_MspInit+0x1e0>)
 80011d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011d8:	611a      	str	r2, [r3, #16]
	__hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80011da:	4b1c      	ldr	r3, [pc, #112]	; (800124c <LIB_DCMI_MspInit+0x1e0>)
 80011dc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80011e0:	615a      	str	r2, [r3, #20]
	__hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80011e2:	4b1a      	ldr	r3, [pc, #104]	; (800124c <LIB_DCMI_MspInit+0x1e0>)
 80011e4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80011e8:	619a      	str	r2, [r3, #24]
	__hdma_dcmi.Init.Mode = DMA_CIRCULAR;
 80011ea:	4b18      	ldr	r3, [pc, #96]	; (800124c <LIB_DCMI_MspInit+0x1e0>)
 80011ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011f0:	61da      	str	r2, [r3, #28]
	__hdma_dcmi.Init.Priority = DMA_PRIORITY_HIGH;
 80011f2:	4b16      	ldr	r3, [pc, #88]	; (800124c <LIB_DCMI_MspInit+0x1e0>)
 80011f4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80011f8:	621a      	str	r2, [r3, #32]
	__hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80011fa:	4b14      	ldr	r3, [pc, #80]	; (800124c <LIB_DCMI_MspInit+0x1e0>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_DMA_Init(&__hdma_dcmi) != HAL_OK)
 8001200:	4812      	ldr	r0, [pc, #72]	; (800124c <LIB_DCMI_MspInit+0x1e0>)
 8001202:	f002 fe49 	bl	8003e98 <HAL_DMA_Init>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d10e      	bne.n	800122a <LIB_DCMI_MspInit+0x1be>
	{
		return;
	}

	__HAL_LINKDMA(__hdcmi,DMA_Handle,__hdma_dcmi);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	4a0f      	ldr	r2, [pc, #60]	; (800124c <LIB_DCMI_MspInit+0x1e0>)
 8001210:	649a      	str	r2, [r3, #72]	; 0x48
 8001212:	4a0e      	ldr	r2, [pc, #56]	; (800124c <LIB_DCMI_MspInit+0x1e0>)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	6393      	str	r3, [r2, #56]	; 0x38

	/* DCMI interrupt Init */
	HAL_NVIC_SetPriority(DCMI_IRQn, 15, 0);
 8001218:	2200      	movs	r2, #0
 800121a:	210f      	movs	r1, #15
 800121c:	204e      	movs	r0, #78	; 0x4e
 800121e:	f002 faa8 	bl	8003772 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DCMI_IRQn);
 8001222:	204e      	movs	r0, #78	; 0x4e
 8001224:	f002 fac1 	bl	80037aa <HAL_NVIC_EnableIRQ>
 8001228:	e000      	b.n	800122c <LIB_DCMI_MspInit+0x1c0>
		return;
 800122a:	bf00      	nop

}
 800122c:	3738      	adds	r7, #56	; 0x38
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	40023800 	.word	0x40023800
 8001238:	40021000 	.word	0x40021000
 800123c:	40020c00 	.word	0x40020c00
 8001240:	40021800 	.word	0x40021800
 8001244:	40021c00 	.word	0x40021c00
 8001248:	40020000 	.word	0x40020000
 800124c:	200001b4 	.word	0x200001b4
 8001250:	40026428 	.word	0x40026428

08001254 <LIB_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static int8_t LIB_I2C1_Init(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0
	hi2c1.Instance = I2C1;
 8001258:	4b10      	ldr	r3, [pc, #64]	; (800129c <LIB_I2C1_Init+0x48>)
 800125a:	4a11      	ldr	r2, [pc, #68]	; (80012a0 <LIB_I2C1_Init+0x4c>)
 800125c:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x00A0A3F7;
 800125e:	4b0f      	ldr	r3, [pc, #60]	; (800129c <LIB_I2C1_Init+0x48>)
 8001260:	4a10      	ldr	r2, [pc, #64]	; (80012a4 <LIB_I2C1_Init+0x50>)
 8001262:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 8001264:	4b0d      	ldr	r3, [pc, #52]	; (800129c <LIB_I2C1_Init+0x48>)
 8001266:	2200      	movs	r2, #0
 8001268:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800126a:	4b0c      	ldr	r3, [pc, #48]	; (800129c <LIB_I2C1_Init+0x48>)
 800126c:	2201      	movs	r2, #1
 800126e:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001270:	4b0a      	ldr	r3, [pc, #40]	; (800129c <LIB_I2C1_Init+0x48>)
 8001272:	2200      	movs	r2, #0
 8001274:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 8001276:	4b09      	ldr	r3, [pc, #36]	; (800129c <LIB_I2C1_Init+0x48>)
 8001278:	2200      	movs	r2, #0
 800127a:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800127c:	4b07      	ldr	r3, [pc, #28]	; (800129c <LIB_I2C1_Init+0x48>)
 800127e:	2200      	movs	r2, #0
 8001280:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001282:	4b06      	ldr	r3, [pc, #24]	; (800129c <LIB_I2C1_Init+0x48>)
 8001284:	2200      	movs	r2, #0
 8001286:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001288:	4b04      	ldr	r3, [pc, #16]	; (800129c <LIB_I2C1_Init+0x48>)
 800128a:	2200      	movs	r2, #0
 800128c:	621a      	str	r2, [r3, #32]
	return HAL_I2C_Init(&hi2c1);
 800128e:	4803      	ldr	r0, [pc, #12]	; (800129c <LIB_I2C1_Init+0x48>)
 8001290:	f004 fda6 	bl	8005de0 <HAL_I2C_Init>
 8001294:	4603      	mov	r3, r0
 8001296:	b25b      	sxtb	r3, r3
}
 8001298:	4618      	mov	r0, r3
 800129a:	bd80      	pop	{r7, pc}
 800129c:	20000168 	.word	0x20000168
 80012a0:	40005400 	.word	0x40005400
 80012a4:	00a0a3f7 	.word	0x00a0a3f7

080012a8 <LIB_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
static void LIB_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b0aa      	sub	sp, #168	; 0xa8
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80012b4:	2200      	movs	r2, #0
 80012b6:	601a      	str	r2, [r3, #0]
 80012b8:	605a      	str	r2, [r3, #4]
 80012ba:	609a      	str	r2, [r3, #8]
 80012bc:	60da      	str	r2, [r3, #12]
 80012be:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012c0:	f107 0310 	add.w	r3, r7, #16
 80012c4:	2284      	movs	r2, #132	; 0x84
 80012c6:	2100      	movs	r1, #0
 80012c8:	4618      	mov	r0, r3
 80012ca:	f007 fa09 	bl	80086e0 <memset>
	/** Initializes the peripherals clock
	*/
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80012ce:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80012d2:	613b      	str	r3, [r7, #16]
	PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80012d4:	2300      	movs	r3, #0
 80012d6:	677b      	str	r3, [r7, #116]	; 0x74
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012d8:	f107 0310 	add.w	r3, r7, #16
 80012dc:	4618      	mov	r0, r3
 80012de:	f005 ff67 	bl	80071b0 <HAL_RCCEx_PeriphCLKConfig>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d12e      	bne.n	8001346 <LIB_I2C_MspInit+0x9e>
	{
	  return;
	}

	__HAL_RCC_GPIOB_CLK_ENABLE();
 80012e8:	4b19      	ldr	r3, [pc, #100]	; (8001350 <LIB_I2C_MspInit+0xa8>)
 80012ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ec:	4a18      	ldr	r2, [pc, #96]	; (8001350 <LIB_I2C_MspInit+0xa8>)
 80012ee:	f043 0302 	orr.w	r3, r3, #2
 80012f2:	6313      	str	r3, [r2, #48]	; 0x30
 80012f4:	4b16      	ldr	r3, [pc, #88]	; (8001350 <LIB_I2C_MspInit+0xa8>)
 80012f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f8:	f003 0302 	and.w	r3, r3, #2
 80012fc:	60fb      	str	r3, [r7, #12]
 80012fe:	68fb      	ldr	r3, [r7, #12]
	/**I2C1 GPIO Configuration
	PB8     ------> I2C1_SCL
	PB9     ------> I2C1_SDA
	*/
	GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001300:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001304:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001308:	2312      	movs	r3, #18
 800130a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130e:	2300      	movs	r3, #0
 8001310:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001314:	2300      	movs	r3, #0
 8001316:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800131a:	2304      	movs	r3, #4
 800131c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001320:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001324:	4619      	mov	r1, r3
 8001326:	480b      	ldr	r0, [pc, #44]	; (8001354 <LIB_I2C_MspInit+0xac>)
 8001328:	f004 fb94 	bl	8005a54 <HAL_GPIO_Init>

	/* Peripheral clock enable */
	__HAL_RCC_I2C1_CLK_ENABLE();
 800132c:	4b08      	ldr	r3, [pc, #32]	; (8001350 <LIB_I2C_MspInit+0xa8>)
 800132e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001330:	4a07      	ldr	r2, [pc, #28]	; (8001350 <LIB_I2C_MspInit+0xa8>)
 8001332:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001336:	6413      	str	r3, [r2, #64]	; 0x40
 8001338:	4b05      	ldr	r3, [pc, #20]	; (8001350 <LIB_I2C_MspInit+0xa8>)
 800133a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800133c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001340:	60bb      	str	r3, [r7, #8]
 8001342:	68bb      	ldr	r3, [r7, #8]
 8001344:	e000      	b.n	8001348 <LIB_I2C_MspInit+0xa0>
	  return;
 8001346:	bf00      	nop

}
 8001348:	37a8      	adds	r7, #168	; 0xa8
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	40023800 	.word	0x40023800
 8001354:	40020400 	.word	0x40020400

08001358 <DCMI_IRQHandler>:

/**
  * @brief This function handles DCMI global interrupt.
  */
void DCMI_IRQHandler(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
    HAL_DCMI_IRQHandler(&__hdcmi);
 800135c:	4802      	ldr	r0, [pc, #8]	; (8001368 <DCMI_IRQHandler+0x10>)
 800135e:	f002 fc41 	bl	8003be4 <HAL_DCMI_IRQHandler>
}
 8001362:	bf00      	nop
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	20000214 	.word	0x20000214

0800136c <__OV5640_ReadReg_Func>:
/**
  * @brief  reads OV5640 registers.
  * @retval 0 if successfully read.
  */
static int32_t __OV5640_ReadReg_Func(uint16_t devAddr, uint16_t Reg, uint8_t* pData, uint16_t Length)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b088      	sub	sp, #32
 8001370:	af04      	add	r7, sp, #16
 8001372:	60ba      	str	r2, [r7, #8]
 8001374:	461a      	mov	r2, r3
 8001376:	4603      	mov	r3, r0
 8001378:	81fb      	strh	r3, [r7, #14]
 800137a:	460b      	mov	r3, r1
 800137c:	81bb      	strh	r3, [r7, #12]
 800137e:	4613      	mov	r3, r2
 8001380:	80fb      	strh	r3, [r7, #6]
	return HAL_I2C_Mem_Read(&hi2c1, devAddr , Reg, I2C_MEMADD_SIZE_16BIT, pData, Length, 1000);
 8001382:	89ba      	ldrh	r2, [r7, #12]
 8001384:	89f9      	ldrh	r1, [r7, #14]
 8001386:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800138a:	9302      	str	r3, [sp, #8]
 800138c:	88fb      	ldrh	r3, [r7, #6]
 800138e:	9301      	str	r3, [sp, #4]
 8001390:	68bb      	ldr	r3, [r7, #8]
 8001392:	9300      	str	r3, [sp, #0]
 8001394:	2302      	movs	r3, #2
 8001396:	4804      	ldr	r0, [pc, #16]	; (80013a8 <__OV5640_ReadReg_Func+0x3c>)
 8001398:	f004 fed0 	bl	800613c <HAL_I2C_Mem_Read>
 800139c:	4603      	mov	r3, r0
}
 800139e:	4618      	mov	r0, r3
 80013a0:	3710      	adds	r7, #16
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	20000168 	.word	0x20000168

080013ac <__OV5640_WriteReg_Func>:
/**
  * @brief  writes to OV5640 registers.
  * @retval 0 if successfully written.
  */
static int32_t __OV5640_WriteReg_Func(uint16_t devAddr, uint16_t Reg, uint8_t* pData, uint16_t Length)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b088      	sub	sp, #32
 80013b0:	af04      	add	r7, sp, #16
 80013b2:	60ba      	str	r2, [r7, #8]
 80013b4:	461a      	mov	r2, r3
 80013b6:	4603      	mov	r3, r0
 80013b8:	81fb      	strh	r3, [r7, #14]
 80013ba:	460b      	mov	r3, r1
 80013bc:	81bb      	strh	r3, [r7, #12]
 80013be:	4613      	mov	r3, r2
 80013c0:	80fb      	strh	r3, [r7, #6]
	return HAL_I2C_Mem_Write(&hi2c1, devAddr, Reg, I2C_MEMADD_SIZE_16BIT, pData, Length, 1000);
 80013c2:	89ba      	ldrh	r2, [r7, #12]
 80013c4:	89f9      	ldrh	r1, [r7, #14]
 80013c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013ca:	9302      	str	r3, [sp, #8]
 80013cc:	88fb      	ldrh	r3, [r7, #6]
 80013ce:	9301      	str	r3, [sp, #4]
 80013d0:	68bb      	ldr	r3, [r7, #8]
 80013d2:	9300      	str	r3, [sp, #0]
 80013d4:	2302      	movs	r3, #2
 80013d6:	4804      	ldr	r0, [pc, #16]	; (80013e8 <__OV5640_WriteReg_Func+0x3c>)
 80013d8:	f004 fd9c 	bl	8005f14 <HAL_I2C_Mem_Write>
 80013dc:	4603      	mov	r3, r0
}
 80013de:	4618      	mov	r0, r3
 80013e0:	3710      	adds	r7, #16
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	20000168 	.word	0x20000168

080013ec <__OV5640_GetTick_Func>:
/**
  * @brief  returns the current tick value.
  * @retval the current tick value.
  */
static int32_t __OV5640_GetTick_Func(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	af00      	add	r7, sp, #0
	return (int32_t)HAL_GetTick();
 80013f0:	f002 f8b4 	bl	800355c <HAL_GetTick>
 80013f4:	4603      	mov	r3, r0
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	bd80      	pop	{r7, pc}

080013fa <LIB_RGB2GRAY_Convert565>:
 *      Author: Eren Atmaca
 */
#include "lib_rgb2gray.h"

void LIB_RGB2GRAY_Convert565(IMAGE_HandleTypeDef *pImgSrc, IMAGE_HandleTypeDef *pImgDest)
{
 80013fa:	b480      	push	{r7}
 80013fc:	b085      	sub	sp, #20
 80013fe:	af00      	add	r7, sp, #0
 8001400:	6078      	str	r0, [r7, #4]
 8001402:	6039      	str	r1, [r7, #0]
	uint8_t r8, g8, b8;
	uint32_t i = 0;
 8001404:	2300      	movs	r3, #0
 8001406:	60fb      	str	r3, [r7, #12]
	for (i = 0; i < pImgSrc->size; i=i+2)
 8001408:	2300      	movs	r3, #0
 800140a:	60fb      	str	r3, [r7, #12]
 800140c:	e041      	b.n	8001492 <LIB_RGB2GRAY_Convert565+0x98>
	{
		//r8 = pImgSrc->pData[i] & 0xF8;
		//g8 = (((pImgSrc->pData[i] & 0x07) << 3) | ((pImgSrc->pData[i+1] >> 5) & 0x07)) << 2;
		//b8 = (pImgSrc->pData[i+1] & 0x1F) << 3;
		r8 = (pImgSrc->pData[i + 1] & 0xF8) << 3;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681a      	ldr	r2, [r3, #0]
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	3301      	adds	r3, #1
 8001416:	4413      	add	r3, r2
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	00db      	lsls	r3, r3, #3
 800141c:	b2db      	uxtb	r3, r3
 800141e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001422:	72fb      	strb	r3, [r7, #11]
		g8 = (((pImgSrc->pData[i + 1] & 0x07) << 5) | ((pImgSrc->pData[i] & 0xE0) >> 3));
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681a      	ldr	r2, [r3, #0]
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	3301      	adds	r3, #1
 800142c:	4413      	add	r3, r2
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	015b      	lsls	r3, r3, #5
 8001432:	b25a      	sxtb	r2, r3
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6819      	ldr	r1, [r3, #0]
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	440b      	add	r3, r1
 800143c:	781b      	ldrb	r3, [r3, #0]
 800143e:	10db      	asrs	r3, r3, #3
 8001440:	b25b      	sxtb	r3, r3
 8001442:	f003 031c 	and.w	r3, r3, #28
 8001446:	b25b      	sxtb	r3, r3
 8001448:	4313      	orrs	r3, r2
 800144a:	b25b      	sxtb	r3, r3
 800144c:	72bb      	strb	r3, [r7, #10]
		b8 = (pImgSrc->pData[i] & 0x1F) << 3;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681a      	ldr	r2, [r3, #0]
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	4413      	add	r3, r2
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	00db      	lsls	r3, r3, #3
 800145a:	727b      	strb	r3, [r7, #9]
		pImgDest->pData[i/2] = (uint8_t)((77 * r8 + 150 * g8 +  29 * b8) >> 8);
 800145c:	7afb      	ldrb	r3, [r7, #11]
 800145e:	224d      	movs	r2, #77	; 0x4d
 8001460:	fb02 f203 	mul.w	r2, r2, r3
 8001464:	7abb      	ldrb	r3, [r7, #10]
 8001466:	2196      	movs	r1, #150	; 0x96
 8001468:	fb01 f303 	mul.w	r3, r1, r3
 800146c:	18d1      	adds	r1, r2, r3
 800146e:	7a7a      	ldrb	r2, [r7, #9]
 8001470:	4613      	mov	r3, r2
 8001472:	00db      	lsls	r3, r3, #3
 8001474:	1a9b      	subs	r3, r3, r2
 8001476:	009b      	lsls	r3, r3, #2
 8001478:	4413      	add	r3, r2
 800147a:	440b      	add	r3, r1
 800147c:	1219      	asrs	r1, r3, #8
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	681a      	ldr	r2, [r3, #0]
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	085b      	lsrs	r3, r3, #1
 8001486:	4413      	add	r3, r2
 8001488:	b2ca      	uxtb	r2, r1
 800148a:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < pImgSrc->size; i=i+2)
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	3302      	adds	r3, #2
 8001490:	60fb      	str	r3, [r7, #12]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	68db      	ldr	r3, [r3, #12]
 8001496:	68fa      	ldr	r2, [r7, #12]
 8001498:	429a      	cmp	r2, r3
 800149a:	d3b8      	bcc.n	800140e <LIB_RGB2GRAY_Convert565+0x14>
	}
}
 800149c:	bf00      	nop
 800149e:	bf00      	nop
 80014a0:	3714      	adds	r7, #20
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr
	...

080014ac <LIB_SERIAL_Transmit>:
  * @param length	Number of data in quantity (not bytes!)
  * @param type 	Choose from SERIAL_DataTypeDef enum
  * @retval 0 if successfully transmitted
  */
int8_t LIB_SERIAL_Transmit(void *pData, uint32_t length, SERIAL_DataTypeDef type)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b08a      	sub	sp, #40	; 0x28
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	60f8      	str	r0, [r7, #12]
 80014b4:	60b9      	str	r1, [r7, #8]
 80014b6:	4613      	mov	r3, r2
 80014b8:	71fb      	strb	r3, [r7, #7]
	uint8_t __header[3] = "STW", __count = 0;
 80014ba:	4a44      	ldr	r2, [pc, #272]	; (80015cc <LIB_SERIAL_Transmit+0x120>)
 80014bc:	f107 0314 	add.w	r3, r7, #20
 80014c0:	6812      	ldr	r2, [r2, #0]
 80014c2:	4611      	mov	r1, r2
 80014c4:	8019      	strh	r1, [r3, #0]
 80014c6:	3302      	adds	r3, #2
 80014c8:	0c12      	lsrs	r2, r2, #16
 80014ca:	701a      	strb	r2, [r3, #0]
 80014cc:	2300      	movs	r3, #0
 80014ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint32_t __length = 0;
 80014d2:	2300      	movs	r3, #0
 80014d4:	613b      	str	r3, [r7, #16]
	uint16_t __quotient = 0, __remainder = 0;
 80014d6:	2300      	movs	r3, #0
 80014d8:	83fb      	strh	r3, [r7, #30]
 80014da:	2300      	movs	r3, #0
 80014dc:	83bb      	strh	r3, [r7, #28]
	uint16_t divisor = UINT16_MAX;
 80014de:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80014e2:	837b      	strh	r3, [r7, #26]
	uint8_t * __pData = (uint8_t*) pData;
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	623b      	str	r3, [r7, #32]
	if ((type == TYPE_S8) || (type == TYPE_U8))
 80014e8:	79fb      	ldrb	r3, [r7, #7]
 80014ea:	2b02      	cmp	r3, #2
 80014ec:	d002      	beq.n	80014f4 <LIB_SERIAL_Transmit+0x48>
 80014ee:	79fb      	ldrb	r3, [r7, #7]
 80014f0:	2b01      	cmp	r3, #1
 80014f2:	d102      	bne.n	80014fa <LIB_SERIAL_Transmit+0x4e>
	{
		__length = length;
 80014f4:	68bb      	ldr	r3, [r7, #8]
 80014f6:	613b      	str	r3, [r7, #16]
 80014f8:	e019      	b.n	800152e <LIB_SERIAL_Transmit+0x82>
	}
	else if ((type == TYPE_S16) || (type == TYPE_U16))
 80014fa:	79fb      	ldrb	r3, [r7, #7]
 80014fc:	2b04      	cmp	r3, #4
 80014fe:	d002      	beq.n	8001506 <LIB_SERIAL_Transmit+0x5a>
 8001500:	79fb      	ldrb	r3, [r7, #7]
 8001502:	2b03      	cmp	r3, #3
 8001504:	d103      	bne.n	800150e <LIB_SERIAL_Transmit+0x62>
	{
		__length = length * 2;
 8001506:	68bb      	ldr	r3, [r7, #8]
 8001508:	005b      	lsls	r3, r3, #1
 800150a:	613b      	str	r3, [r7, #16]
 800150c:	e00f      	b.n	800152e <LIB_SERIAL_Transmit+0x82>
	}
	else if ((type == TYPE_S32) || (type == TYPE_U32) || (type == TYPE_F32))
 800150e:	79fb      	ldrb	r3, [r7, #7]
 8001510:	2b06      	cmp	r3, #6
 8001512:	d005      	beq.n	8001520 <LIB_SERIAL_Transmit+0x74>
 8001514:	79fb      	ldrb	r3, [r7, #7]
 8001516:	2b05      	cmp	r3, #5
 8001518:	d002      	beq.n	8001520 <LIB_SERIAL_Transmit+0x74>
 800151a:	79fb      	ldrb	r3, [r7, #7]
 800151c:	2b07      	cmp	r3, #7
 800151e:	d103      	bne.n	8001528 <LIB_SERIAL_Transmit+0x7c>
	{
		__length = length * 4;
 8001520:	68bb      	ldr	r3, [r7, #8]
 8001522:	009b      	lsls	r3, r3, #2
 8001524:	613b      	str	r3, [r7, #16]
 8001526:	e002      	b.n	800152e <LIB_SERIAL_Transmit+0x82>
	}
	else
	{
		return SERIAL_ERROR;
 8001528:	f04f 33ff 	mov.w	r3, #4294967295
 800152c:	e04a      	b.n	80015c4 <LIB_SERIAL_Transmit+0x118>
	}
	__quotient 	= __length / divisor;
 800152e:	693a      	ldr	r2, [r7, #16]
 8001530:	8b7b      	ldrh	r3, [r7, #26]
 8001532:	fbb2 f3f3 	udiv	r3, r2, r3
 8001536:	83fb      	strh	r3, [r7, #30]
	__remainder = __length % divisor;
 8001538:	693b      	ldr	r3, [r7, #16]
 800153a:	8b7a      	ldrh	r2, [r7, #26]
 800153c:	fbb3 f1f2 	udiv	r1, r3, r2
 8001540:	fb02 f201 	mul.w	r2, r2, r1
 8001544:	1a9b      	subs	r3, r3, r2
 8001546:	83bb      	strh	r3, [r7, #28]

	HAL_UART_Transmit(&__huart, __header, 3, 10);
 8001548:	f107 0114 	add.w	r1, r7, #20
 800154c:	230a      	movs	r3, #10
 800154e:	2203      	movs	r2, #3
 8001550:	481f      	ldr	r0, [pc, #124]	; (80015d0 <LIB_SERIAL_Transmit+0x124>)
 8001552:	f006 fafc 	bl	8007b4e <HAL_UART_Transmit>
	HAL_UART_Transmit(&__huart, (uint8_t*)&type, 1, 10);
 8001556:	1df9      	adds	r1, r7, #7
 8001558:	230a      	movs	r3, #10
 800155a:	2201      	movs	r2, #1
 800155c:	481c      	ldr	r0, [pc, #112]	; (80015d0 <LIB_SERIAL_Transmit+0x124>)
 800155e:	f006 faf6 	bl	8007b4e <HAL_UART_Transmit>
	HAL_UART_Transmit(&__huart, (uint8_t*)&__length, 4, 10);
 8001562:	f107 0110 	add.w	r1, r7, #16
 8001566:	230a      	movs	r3, #10
 8001568:	2204      	movs	r2, #4
 800156a:	4819      	ldr	r0, [pc, #100]	; (80015d0 <LIB_SERIAL_Transmit+0x124>)
 800156c:	f006 faef 	bl	8007b4e <HAL_UART_Transmit>
	HAL_Delay(1);
 8001570:	2001      	movs	r0, #1
 8001572:	f001 ffff 	bl	8003574 <HAL_Delay>

	while(__count < __quotient)
 8001576:	e011      	b.n	800159c <LIB_SERIAL_Transmit+0xf0>
	{
		HAL_UART_Transmit(&__huart, __pData, UINT16_MAX, 1000);
 8001578:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800157c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001580:	6a39      	ldr	r1, [r7, #32]
 8001582:	4813      	ldr	r0, [pc, #76]	; (80015d0 <LIB_SERIAL_Transmit+0x124>)
 8001584:	f006 fae3 	bl	8007b4e <HAL_UART_Transmit>
		__count++;
 8001588:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800158c:	3301      	adds	r3, #1
 800158e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		__pData += UINT16_MAX;
 8001592:	6a3a      	ldr	r2, [r7, #32]
 8001594:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001598:	4413      	add	r3, r2
 800159a:	623b      	str	r3, [r7, #32]
	while(__count < __quotient)
 800159c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80015a0:	b29b      	uxth	r3, r3
 80015a2:	8bfa      	ldrh	r2, [r7, #30]
 80015a4:	429a      	cmp	r2, r3
 80015a6:	d8e7      	bhi.n	8001578 <LIB_SERIAL_Transmit+0xcc>
	}
	if (__remainder)
 80015a8:	8bbb      	ldrh	r3, [r7, #28]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d006      	beq.n	80015bc <LIB_SERIAL_Transmit+0x110>
	{
		HAL_UART_Transmit(&__huart, __pData, __remainder, 1000);
 80015ae:	8bba      	ldrh	r2, [r7, #28]
 80015b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015b4:	6a39      	ldr	r1, [r7, #32]
 80015b6:	4806      	ldr	r0, [pc, #24]	; (80015d0 <LIB_SERIAL_Transmit+0x124>)
 80015b8:	f006 fac9 	bl	8007b4e <HAL_UART_Transmit>
	}
	HAL_Delay(1);
 80015bc:	2001      	movs	r0, #1
 80015be:	f001 ffd9 	bl	8003574 <HAL_Delay>
	return SERIAL_OK;
 80015c2:	2300      	movs	r3, #0
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	3728      	adds	r7, #40	; 0x28
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	08009000 	.word	0x08009000
 80015d0:	200003b8 	.word	0x200003b8

080015d4 <LIB_SERIAL_IMG_Transmit>:
  * @brief Transmits an image with its required information
  * @param img Pointer to image structure
  * @retval 0 if successfully transmitted
  */
int8_t LIB_SERIAL_IMG_Transmit(IMAGE_HandleTypeDef * img)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b088      	sub	sp, #32
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
	uint8_t __header[3] = "STW", __count = 0;
 80015dc:	4a34      	ldr	r2, [pc, #208]	; (80016b0 <LIB_SERIAL_IMG_Transmit+0xdc>)
 80015de:	f107 030c 	add.w	r3, r7, #12
 80015e2:	6812      	ldr	r2, [r2, #0]
 80015e4:	4611      	mov	r1, r2
 80015e6:	8019      	strh	r1, [r3, #0]
 80015e8:	3302      	adds	r3, #2
 80015ea:	0c12      	lsrs	r2, r2, #16
 80015ec:	701a      	strb	r2, [r3, #0]
 80015ee:	2300      	movs	r3, #0
 80015f0:	77fb      	strb	r3, [r7, #31]
	uint16_t __quotient = 0, __remainder = 0;
 80015f2:	2300      	movs	r3, #0
 80015f4:	82fb      	strh	r3, [r7, #22]
 80015f6:	2300      	movs	r3, #0
 80015f8:	82bb      	strh	r3, [r7, #20]
	uint16_t divisor = UINT16_MAX;
 80015fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015fe:	827b      	strh	r3, [r7, #18]
	uint8_t * __pData = img->pData;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	61bb      	str	r3, [r7, #24]

	__quotient 	= img->size / divisor;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	68da      	ldr	r2, [r3, #12]
 800160a:	8a7b      	ldrh	r3, [r7, #18]
 800160c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001610:	82fb      	strh	r3, [r7, #22]
	__remainder = img->size % divisor;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	68db      	ldr	r3, [r3, #12]
 8001616:	8a7a      	ldrh	r2, [r7, #18]
 8001618:	fbb3 f1f2 	udiv	r1, r3, r2
 800161c:	fb02 f201 	mul.w	r2, r2, r1
 8001620:	1a9b      	subs	r3, r3, r2
 8001622:	82bb      	strh	r3, [r7, #20]

	HAL_UART_Transmit(&__huart, __header, 3, 10);
 8001624:	f107 010c 	add.w	r1, r7, #12
 8001628:	230a      	movs	r3, #10
 800162a:	2203      	movs	r2, #3
 800162c:	4821      	ldr	r0, [pc, #132]	; (80016b4 <LIB_SERIAL_IMG_Transmit+0xe0>)
 800162e:	f006 fa8e 	bl	8007b4e <HAL_UART_Transmit>
	HAL_UART_Transmit(&__huart, (uint8_t*)&img->height, 2, 10);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	1d99      	adds	r1, r3, #6
 8001636:	230a      	movs	r3, #10
 8001638:	2202      	movs	r2, #2
 800163a:	481e      	ldr	r0, [pc, #120]	; (80016b4 <LIB_SERIAL_IMG_Transmit+0xe0>)
 800163c:	f006 fa87 	bl	8007b4e <HAL_UART_Transmit>
	HAL_UART_Transmit(&__huart, (uint8_t*)&img->width,  2, 10);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	1d19      	adds	r1, r3, #4
 8001644:	230a      	movs	r3, #10
 8001646:	2202      	movs	r2, #2
 8001648:	481a      	ldr	r0, [pc, #104]	; (80016b4 <LIB_SERIAL_IMG_Transmit+0xe0>)
 800164a:	f006 fa80 	bl	8007b4e <HAL_UART_Transmit>
	HAL_UART_Transmit(&__huart, (uint8_t*)&img->format, 1, 10);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	f103 0108 	add.w	r1, r3, #8
 8001654:	230a      	movs	r3, #10
 8001656:	2201      	movs	r2, #1
 8001658:	4816      	ldr	r0, [pc, #88]	; (80016b4 <LIB_SERIAL_IMG_Transmit+0xe0>)
 800165a:	f006 fa78 	bl	8007b4e <HAL_UART_Transmit>
	while(__count < __quotient)
 800165e:	e00f      	b.n	8001680 <LIB_SERIAL_IMG_Transmit+0xac>
	{
		HAL_UART_Transmit(&__huart, __pData, UINT16_MAX, 1000);
 8001660:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001664:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001668:	69b9      	ldr	r1, [r7, #24]
 800166a:	4812      	ldr	r0, [pc, #72]	; (80016b4 <LIB_SERIAL_IMG_Transmit+0xe0>)
 800166c:	f006 fa6f 	bl	8007b4e <HAL_UART_Transmit>
		__count++;
 8001670:	7ffb      	ldrb	r3, [r7, #31]
 8001672:	3301      	adds	r3, #1
 8001674:	77fb      	strb	r3, [r7, #31]
		__pData += UINT16_MAX;
 8001676:	69ba      	ldr	r2, [r7, #24]
 8001678:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800167c:	4413      	add	r3, r2
 800167e:	61bb      	str	r3, [r7, #24]
	while(__count < __quotient)
 8001680:	7ffb      	ldrb	r3, [r7, #31]
 8001682:	b29b      	uxth	r3, r3
 8001684:	8afa      	ldrh	r2, [r7, #22]
 8001686:	429a      	cmp	r2, r3
 8001688:	d8ea      	bhi.n	8001660 <LIB_SERIAL_IMG_Transmit+0x8c>
	}
	if (__remainder)
 800168a:	8abb      	ldrh	r3, [r7, #20]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d006      	beq.n	800169e <LIB_SERIAL_IMG_Transmit+0xca>
	{
		HAL_UART_Transmit(&__huart, __pData, __remainder, 1000);
 8001690:	8aba      	ldrh	r2, [r7, #20]
 8001692:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001696:	69b9      	ldr	r1, [r7, #24]
 8001698:	4806      	ldr	r0, [pc, #24]	; (80016b4 <LIB_SERIAL_IMG_Transmit+0xe0>)
 800169a:	f006 fa58 	bl	8007b4e <HAL_UART_Transmit>
	}
	HAL_Delay(1);
 800169e:	2001      	movs	r0, #1
 80016a0:	f001 ff68 	bl	8003574 <HAL_Delay>
	return SERIAL_OK;
 80016a4:	2300      	movs	r3, #0
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	3720      	adds	r7, #32
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	08009008 	.word	0x08009008
 80016b4:	200003b8 	.word	0x200003b8

080016b8 <LIB_SW_Init>:
											((format) == IMAGE_FORMAT_RGB565) || \
											((format) == IMAGE_FORMAT_RGB888))
#define IS_PARAM_NON_ZERO(prm) 		((prm) != 0)

int8_t LIB_SW_Init(SW_TypeDef * sw)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b083      	sub	sp, #12
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
	if(IS_PARAM_IN_INTERVAL(sw->input_image->height) &&
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	88db      	ldrh	r3, [r3, #6]
 80016c6:	2b13      	cmp	r3, #19
 80016c8:	d957      	bls.n	800177a <LIB_SW_Init+0xc2>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	88db      	ldrh	r3, [r3, #6]
 80016d0:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80016d4:	d851      	bhi.n	800177a <LIB_SW_Init+0xc2>
			IS_PARAM_IN_INTERVAL(sw->input_image->width) &&
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	889b      	ldrh	r3, [r3, #4]
	if(IS_PARAM_IN_INTERVAL(sw->input_image->height) &&
 80016dc:	2b13      	cmp	r3, #19
 80016de:	d94c      	bls.n	800177a <LIB_SW_Init+0xc2>
			IS_PARAM_IN_INTERVAL(sw->input_image->width) &&
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	889b      	ldrh	r3, [r3, #4]
 80016e6:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80016ea:	d846      	bhi.n	800177a <LIB_SW_Init+0xc2>
			IS_PARAM_IN_INTERVAL(sw->output_image->height) &&
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	88db      	ldrh	r3, [r3, #6]
			IS_PARAM_IN_INTERVAL(sw->input_image->width) &&
 80016f2:	2b13      	cmp	r3, #19
 80016f4:	d941      	bls.n	800177a <LIB_SW_Init+0xc2>
			IS_PARAM_IN_INTERVAL(sw->output_image->height) &&
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	88db      	ldrh	r3, [r3, #6]
 80016fc:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8001700:	d83b      	bhi.n	800177a <LIB_SW_Init+0xc2>
			IS_PARAM_IN_INTERVAL(sw->output_image->width) &&
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	889b      	ldrh	r3, [r3, #4]
			IS_PARAM_IN_INTERVAL(sw->output_image->height) &&
 8001708:	2b13      	cmp	r3, #19
 800170a:	d936      	bls.n	800177a <LIB_SW_Init+0xc2>
			IS_PARAM_IN_INTERVAL(sw->output_image->width) &&
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	889b      	ldrh	r3, [r3, #4]
 8001712:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8001716:	d830      	bhi.n	800177a <LIB_SW_Init+0xc2>
			IS_FORMAT_VALID(sw->input_image->format))
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	7a1b      	ldrb	r3, [r3, #8]
			IS_PARAM_IN_INTERVAL(sw->output_image->width) &&
 800171e:	2b01      	cmp	r3, #1
 8001720:	d009      	beq.n	8001736 <LIB_SW_Init+0x7e>
			IS_FORMAT_VALID(sw->input_image->format))
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	7a1b      	ldrb	r3, [r3, #8]
 8001728:	2b02      	cmp	r3, #2
 800172a:	d004      	beq.n	8001736 <LIB_SW_Init+0x7e>
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	7a1b      	ldrb	r3, [r3, #8]
 8001732:	2b03      	cmp	r3, #3
 8001734:	d121      	bne.n	800177a <LIB_SW_Init+0xc2>
	{
		sw->params.nHeight 	= sw->input_image->height / sw->output_image->height;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	88da      	ldrh	r2, [r3, #6]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	88db      	ldrh	r3, [r3, #6]
 8001742:	fbb2 f3f3 	udiv	r3, r2, r3
 8001746:	b29b      	uxth	r3, r3
 8001748:	461a      	mov	r2, r3
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	60da      	str	r2, [r3, #12]
		sw->params.nWidth 	= sw->input_image->width  / sw->output_image->width;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	889a      	ldrh	r2, [r3, #4]
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	889b      	ldrh	r3, [r3, #4]
 800175a:	fbb2 f3f3 	udiv	r3, r2, r3
 800175e:	b29b      	uxth	r3, r3
 8001760:	461a      	mov	r2, r3
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	609a      	str	r2, [r3, #8]
		sw->params.currentHeight 	= 0;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	f04f 0200 	mov.w	r2, #0
 800176c:	615a      	str	r2, [r3, #20]
		sw->params.currentWidth		= 0;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	f04f 0200 	mov.w	r2, #0
 8001774:	611a      	str	r2, [r3, #16]

		return OK;
 8001776:	2300      	movs	r3, #0
 8001778:	e001      	b.n	800177e <LIB_SW_Init+0xc6>
	}
	return ERROR;
 800177a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800177e:	4618      	mov	r0, r3
 8001780:	370c      	adds	r7, #12
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr

0800178a <LIB_SW_GetWindow>:
	}

}

int8_t LIB_SW_GetWindow(SW_TypeDef * sw)
{
 800178a:	b480      	push	{r7}
 800178c:	b08b      	sub	sp, #44	; 0x2c
 800178e:	af00      	add	r7, sp, #0
 8001790:	6078      	str	r0, [r7, #4]
	if(!(IS_PARAM_NON_ZERO(sw->input_image->pData) && IS_PARAM_NON_ZERO(sw->output_image->pData)))
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d004      	beq.n	80017a6 <LIB_SW_GetWindow+0x1c>
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d102      	bne.n	80017ac <LIB_SW_GetWindow+0x22>
	{
		return ERROR;
 80017a6:	f04f 33ff 	mov.w	r3, #4294967295
 80017aa:	e087      	b.n	80018bc <LIB_SW_GetWindow+0x132>
	}
	float heightIndexf = sw->params.currentHeight * sw->input_image->width  * sw->input_image->format * sw->output_image->height;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	ed93 7a05 	vldr	s14, [r3, #20]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	889b      	ldrh	r3, [r3, #4]
 80017b8:	ee07 3a90 	vmov	s15, r3
 80017bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	7a1b      	ldrb	r3, [r3, #8]
 80017ca:	ee07 3a90 	vmov	s15, r3
 80017ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017d2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	88db      	ldrh	r3, [r3, #6]
 80017dc:	ee07 3a90 	vmov	s15, r3
 80017e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017e8:	edc7 7a06 	vstr	s15, [r7, #24]
	float widthIndexf  = sw->params.currentWidth  * sw->output_image->width * sw->input_image->format;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	ed93 7a04 	vldr	s14, [r3, #16]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	889b      	ldrh	r3, [r3, #4]
 80017f8:	ee07 3a90 	vmov	s15, r3
 80017fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001800:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	7a1b      	ldrb	r3, [r3, #8]
 800180a:	ee07 3a90 	vmov	s15, r3
 800180e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001812:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001816:	edc7 7a05 	vstr	s15, [r7, #20]
	uint32_t heightIndex = heightIndexf;
 800181a:	edd7 7a06 	vldr	s15, [r7, #24]
 800181e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001822:	ee17 3a90 	vmov	r3, s15
 8001826:	613b      	str	r3, [r7, #16]
	uint32_t widthIndex  = widthIndexf;
 8001828:	edd7 7a05 	vldr	s15, [r7, #20]
 800182c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001830:	ee17 3a90 	vmov	r3, s15
 8001834:	60fb      	str	r3, [r7, #12]
	uint32_t x = 0;
 8001836:	2300      	movs	r3, #0
 8001838:	627b      	str	r3, [r7, #36]	; 0x24
	for (uint32_t i = 0;i < sw->output_image->height; i++)
 800183a:	2300      	movs	r3, #0
 800183c:	623b      	str	r3, [r7, #32]
 800183e:	e035      	b.n	80018ac <LIB_SW_GetWindow+0x122>
	{
		for (uint32_t j = 0; j < sw->output_image->width * sw->input_image->format; j++)
 8001840:	2300      	movs	r3, #0
 8001842:	61fb      	str	r3, [r7, #28]
 8001844:	e022      	b.n	800188c <LIB_SW_GetWindow+0x102>
		{
			sw->output_image->pData[x] = sw->input_image->pData[(j + widthIndex) +  (heightIndex + (i * sw->input_image->width * sw->input_image->format)) ];
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	681a      	ldr	r2, [r3, #0]
 800184c:	69f9      	ldr	r1, [r7, #28]
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	4419      	add	r1, r3
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	889b      	ldrh	r3, [r3, #4]
 8001858:	4618      	mov	r0, r3
 800185a:	6a3b      	ldr	r3, [r7, #32]
 800185c:	fb03 f300 	mul.w	r3, r3, r0
 8001860:	6878      	ldr	r0, [r7, #4]
 8001862:	6800      	ldr	r0, [r0, #0]
 8001864:	7a00      	ldrb	r0, [r0, #8]
 8001866:	fb00 f003 	mul.w	r0, r0, r3
 800186a:	693b      	ldr	r3, [r7, #16]
 800186c:	4403      	add	r3, r0
 800186e:	440b      	add	r3, r1
 8001870:	441a      	add	r2, r3
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	6819      	ldr	r1, [r3, #0]
 8001878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800187a:	440b      	add	r3, r1
 800187c:	7812      	ldrb	r2, [r2, #0]
 800187e:	701a      	strb	r2, [r3, #0]
			x++;
 8001880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001882:	3301      	adds	r3, #1
 8001884:	627b      	str	r3, [r7, #36]	; 0x24
		for (uint32_t j = 0; j < sw->output_image->width * sw->input_image->format; j++)
 8001886:	69fb      	ldr	r3, [r7, #28]
 8001888:	3301      	adds	r3, #1
 800188a:	61fb      	str	r3, [r7, #28]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	889b      	ldrh	r3, [r3, #4]
 8001892:	461a      	mov	r2, r3
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	7a1b      	ldrb	r3, [r3, #8]
 800189a:	fb03 f302 	mul.w	r3, r3, r2
 800189e:	461a      	mov	r2, r3
 80018a0:	69fb      	ldr	r3, [r7, #28]
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d3cf      	bcc.n	8001846 <LIB_SW_GetWindow+0xbc>
	for (uint32_t i = 0;i < sw->output_image->height; i++)
 80018a6:	6a3b      	ldr	r3, [r7, #32]
 80018a8:	3301      	adds	r3, #1
 80018aa:	623b      	str	r3, [r7, #32]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	88db      	ldrh	r3, [r3, #6]
 80018b2:	461a      	mov	r2, r3
 80018b4:	6a3b      	ldr	r3, [r7, #32]
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d3c2      	bcc.n	8001840 <LIB_SW_GetWindow+0xb6>
		}
	}
	return OK;
 80018ba:	2300      	movs	r3, #0
}
 80018bc:	4618      	mov	r0, r3
 80018be:	372c      	adds	r7, #44	; 0x2c
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr

080018c8 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80018cc:	f3bf 8f4f 	dsb	sy
}
 80018d0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80018d2:	f3bf 8f6f 	isb	sy
}
 80018d6:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80018d8:	4b0d      	ldr	r3, [pc, #52]	; (8001910 <SCB_EnableICache+0x48>)
 80018da:	2200      	movs	r2, #0
 80018dc:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80018e0:	f3bf 8f4f 	dsb	sy
}
 80018e4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80018e6:	f3bf 8f6f 	isb	sy
}
 80018ea:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80018ec:	4b08      	ldr	r3, [pc, #32]	; (8001910 <SCB_EnableICache+0x48>)
 80018ee:	695b      	ldr	r3, [r3, #20]
 80018f0:	4a07      	ldr	r2, [pc, #28]	; (8001910 <SCB_EnableICache+0x48>)
 80018f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018f6:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80018f8:	f3bf 8f4f 	dsb	sy
}
 80018fc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80018fe:	f3bf 8f6f 	isb	sy
}
 8001902:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8001904:	bf00      	nop
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr
 800190e:	bf00      	nop
 8001910:	e000ed00 	.word	0xe000ed00

08001914 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8001914:	b480      	push	{r7}
 8001916:	b085      	sub	sp, #20
 8001918:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800191a:	4b1f      	ldr	r3, [pc, #124]	; (8001998 <SCB_EnableDCache+0x84>)
 800191c:	2200      	movs	r2, #0
 800191e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001922:	f3bf 8f4f 	dsb	sy
}
 8001926:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001928:	4b1b      	ldr	r3, [pc, #108]	; (8001998 <SCB_EnableDCache+0x84>)
 800192a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800192e:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	0b5b      	lsrs	r3, r3, #13
 8001934:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001938:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	08db      	lsrs	r3, r3, #3
 800193e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001942:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	015a      	lsls	r2, r3, #5
 8001948:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800194c:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800194e:	68ba      	ldr	r2, [r7, #8]
 8001950:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001952:	4911      	ldr	r1, [pc, #68]	; (8001998 <SCB_EnableDCache+0x84>)
 8001954:	4313      	orrs	r3, r2
 8001956:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800195a:	68bb      	ldr	r3, [r7, #8]
 800195c:	1e5a      	subs	r2, r3, #1
 800195e:	60ba      	str	r2, [r7, #8]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d1ef      	bne.n	8001944 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	1e5a      	subs	r2, r3, #1
 8001968:	60fa      	str	r2, [r7, #12]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d1e5      	bne.n	800193a <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 800196e:	f3bf 8f4f 	dsb	sy
}
 8001972:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8001974:	4b08      	ldr	r3, [pc, #32]	; (8001998 <SCB_EnableDCache+0x84>)
 8001976:	695b      	ldr	r3, [r3, #20]
 8001978:	4a07      	ldr	r2, [pc, #28]	; (8001998 <SCB_EnableDCache+0x84>)
 800197a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800197e:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001980:	f3bf 8f4f 	dsb	sy
}
 8001984:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001986:	f3bf 8f6f 	isb	sy
}
 800198a:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 800198c:	bf00      	nop
 800198e:	3714      	adds	r7, #20
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr
 8001998:	e000ed00 	.word	0xe000ed00

0800199c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b084      	sub	sp, #16
 80019a0:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 80019a2:	f7ff ff91 	bl	80018c8 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 80019a6:	f7ff ffb5 	bl	8001914 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019aa:	f001 fd85 	bl	80034b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019ae:	f000 f88b 	bl	8001ac8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019b2:	f000 f9a3 	bl	8001cfc <MX_GPIO_Init>
  MX_DCMI_Init();
 80019b6:	f000 f8ef 	bl	8001b98 <MX_DCMI_Init>
  MX_FMC_Init();
 80019ba:	f000 f951 	bl	8001c60 <MX_FMC_Init>
  MX_USART1_UART_Init();
 80019be:	f000 f91f 	bl	8001c00 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  LIB_MPU_Init();
 80019c2:	f7ff fa47 	bl	8000e54 <LIB_MPU_Init>
  LIB_IMAGE_InitStruct(&img, (uint8_t*)pImage, IMAGE_RESOLUTION_VGA_HEIGHT, IMAGE_RESOLUTION_VGA_WIDTH, IMAGE_FORMAT_RGB565);
 80019c6:	2302      	movs	r3, #2
 80019c8:	9300      	str	r3, [sp, #0]
 80019ca:	f44f 7320 	mov.w	r3, #640	; 0x280
 80019ce:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80019d2:	4932      	ldr	r1, [pc, #200]	; (8001a9c <main+0x100>)
 80019d4:	4832      	ldr	r0, [pc, #200]	; (8001aa0 <main+0x104>)
 80019d6:	f7ff f9f4 	bl	8000dc2 <LIB_IMAGE_InitStruct>
  LIB_IMAGE_InitStruct(&cropped, (uint8_t*)pImageCropped, 320, 320, IMAGE_FORMAT_RGB565);
 80019da:	2302      	movs	r3, #2
 80019dc:	9300      	str	r3, [sp, #0]
 80019de:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80019e2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80019e6:	492f      	ldr	r1, [pc, #188]	; (8001aa4 <main+0x108>)
 80019e8:	482f      	ldr	r0, [pc, #188]	; (8001aa8 <main+0x10c>)
 80019ea:	f7ff f9ea 	bl	8000dc2 <LIB_IMAGE_InitStruct>
  LIB_IMAGE_InitStruct(&croppedGray, (uint8_t*)pImageCroppedGray, 320, 320, IMAGE_FORMAT_GRAYSCALE);
 80019ee:	2301      	movs	r3, #1
 80019f0:	9300      	str	r3, [sp, #0]
 80019f2:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80019f6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80019fa:	492c      	ldr	r1, [pc, #176]	; (8001aac <main+0x110>)
 80019fc:	482c      	ldr	r0, [pc, #176]	; (8001ab0 <main+0x114>)
 80019fe:	f7ff f9e0 	bl	8000dc2 <LIB_IMAGE_InitStruct>
  LIB_SW_Init(&sw);
 8001a02:	482c      	ldr	r0, [pc, #176]	; (8001ab4 <main+0x118>)
 8001a04:	f7ff fe58 	bl	80016b8 <LIB_SW_Init>
  BSP_SDRAM_Init();
 8001a08:	f001 fba0 	bl	800314c <BSP_SDRAM_Init>
  LIB_OV5640_Init(OV5640_RESOLUTION_R640x480, OV5640_FORMAT_RGB565);
 8001a0c:	2100      	movs	r1, #0
 8001a0e:	2003      	movs	r0, #3
 8001a10:	f7ff fa4e 	bl	8000eb0 <LIB_OV5640_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	if (!LIB_OV5640_CaptureSnapshot(&img, 5000))
 8001a14:	f241 3188 	movw	r1, #5000	; 0x1388
 8001a18:	4821      	ldr	r0, [pc, #132]	; (8001aa0 <main+0x104>)
 8001a1a:	f7ff fa85 	bl	8000f28 <LIB_OV5640_CaptureSnapshot>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d1f7      	bne.n	8001a14 <main+0x78>
	{
		// Preprocess Image
		LIB_SW_GetWindow(&sw);
 8001a24:	4823      	ldr	r0, [pc, #140]	; (8001ab4 <main+0x118>)
 8001a26:	f7ff feb0 	bl	800178a <LIB_SW_GetWindow>
		LIB_RGB2GRAY_Convert565(&cropped, &croppedGray);
 8001a2a:	4921      	ldr	r1, [pc, #132]	; (8001ab0 <main+0x114>)
 8001a2c:	481e      	ldr	r0, [pc, #120]	; (8001aa8 <main+0x10c>)
 8001a2e:	f7ff fce4 	bl	80013fa <LIB_RGB2GRAY_Convert565>
		uint32_t i;
		for (i = 0; i < croppedGray.height * cropped.width; ++i)
 8001a32:	2300      	movs	r3, #0
 8001a34:	607b      	str	r3, [r7, #4]
 8001a36:	e011      	b.n	8001a5c <main+0xc0>
		{
			pImageCroppedGrayF32[i] = (float)croppedGray.pData[i];
 8001a38:	4b1d      	ldr	r3, [pc, #116]	; (8001ab0 <main+0x114>)
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	4413      	add	r3, r2
 8001a40:	781b      	ldrb	r3, [r3, #0]
 8001a42:	ee07 3a90 	vmov	s15, r3
 8001a46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a4a:	4a1b      	ldr	r2, [pc, #108]	; (8001ab8 <main+0x11c>)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	009b      	lsls	r3, r3, #2
 8001a50:	4413      	add	r3, r2
 8001a52:	edc3 7a00 	vstr	s15, [r3]
		for (i = 0; i < croppedGray.height * cropped.width; ++i)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	3301      	adds	r3, #1
 8001a5a:	607b      	str	r3, [r7, #4]
 8001a5c:	4b14      	ldr	r3, [pc, #80]	; (8001ab0 <main+0x114>)
 8001a5e:	88db      	ldrh	r3, [r3, #6]
 8001a60:	461a      	mov	r2, r3
 8001a62:	4b11      	ldr	r3, [pc, #68]	; (8001aa8 <main+0x10c>)
 8001a64:	889b      	ldrh	r3, [r3, #4]
 8001a66:	fb03 f302 	mul.w	r3, r3, r2
 8001a6a:	461a      	mov	r2, r3
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d3e2      	bcc.n	8001a38 <main+0x9c>
		}
		// Transmit Image to PC
		LIB_SERIAL_IMG_Transmit(&croppedGray);
 8001a72:	480f      	ldr	r0, [pc, #60]	; (8001ab0 <main+0x114>)
 8001a74:	f7ff fdae 	bl	80015d4 <LIB_SERIAL_IMG_Transmit>
		// Extract Features
		hdr_calculate_moments(&croppedGray, &features);
 8001a78:	4910      	ldr	r1, [pc, #64]	; (8001abc <main+0x120>)
 8001a7a:	480d      	ldr	r0, [pc, #52]	; (8001ab0 <main+0x114>)
 8001a7c:	f7fe fd90 	bl	80005a0 <hdr_calculate_moments>
		hdr_calculate_hu_moments(&features);
 8001a80:	480e      	ldr	r0, [pc, #56]	; (8001abc <main+0x120>)
 8001a82:	f7fe ffc3 	bl	8000a0c <hdr_calculate_hu_moments>

		dt_cls_predict((float*)&features.hu_moments,(int*)output);
 8001a86:	490e      	ldr	r1, [pc, #56]	; (8001ac0 <main+0x124>)
 8001a88:	480e      	ldr	r0, [pc, #56]	; (8001ac4 <main+0x128>)
 8001a8a:	f7fe fd39 	bl	8000500 <dt_cls_predict>
		// Transmit Moments to PC
		LIB_SERIAL_Transmit(&output, sizeof(output)/sizeof(int), TYPE_S32);
 8001a8e:	2206      	movs	r2, #6
 8001a90:	210a      	movs	r1, #10
 8001a92:	480b      	ldr	r0, [pc, #44]	; (8001ac0 <main+0x124>)
 8001a94:	f7ff fd0a 	bl	80014ac <LIB_SERIAL_Transmit>
	if (!LIB_OV5640_CaptureSnapshot(&img, 5000))
 8001a98:	e7bc      	b.n	8001a14 <main+0x78>
 8001a9a:	bf00      	nop
 8001a9c:	c0000000 	.word	0xc0000000
 8001aa0:	2000043c 	.word	0x2000043c
 8001aa4:	c0096000 	.word	0xc0096000
 8001aa8:	2000044c 	.word	0x2000044c
 8001aac:	c00c8000 	.word	0xc00c8000
 8001ab0:	20000490 	.word	0x20000490
 8001ab4:	20000000 	.word	0x20000000
 8001ab8:	c00e1000 	.word	0xc00e1000
 8001abc:	20000264 	.word	0x20000264
 8001ac0:	20000340 	.word	0x20000340
 8001ac4:	20000324 	.word	0x20000324

08001ac8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b094      	sub	sp, #80	; 0x50
 8001acc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ace:	f107 0320 	add.w	r3, r7, #32
 8001ad2:	2230      	movs	r2, #48	; 0x30
 8001ad4:	2100      	movs	r1, #0
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f006 fe02 	bl	80086e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001adc:	f107 030c 	add.w	r3, r7, #12
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	601a      	str	r2, [r3, #0]
 8001ae4:	605a      	str	r2, [r3, #4]
 8001ae6:	609a      	str	r2, [r3, #8]
 8001ae8:	60da      	str	r2, [r3, #12]
 8001aea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001aec:	4b28      	ldr	r3, [pc, #160]	; (8001b90 <SystemClock_Config+0xc8>)
 8001aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af0:	4a27      	ldr	r2, [pc, #156]	; (8001b90 <SystemClock_Config+0xc8>)
 8001af2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001af6:	6413      	str	r3, [r2, #64]	; 0x40
 8001af8:	4b25      	ldr	r3, [pc, #148]	; (8001b90 <SystemClock_Config+0xc8>)
 8001afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001afc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b00:	60bb      	str	r3, [r7, #8]
 8001b02:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001b04:	4b23      	ldr	r3, [pc, #140]	; (8001b94 <SystemClock_Config+0xcc>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001b0c:	4a21      	ldr	r2, [pc, #132]	; (8001b94 <SystemClock_Config+0xcc>)
 8001b0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b12:	6013      	str	r3, [r2, #0]
 8001b14:	4b1f      	ldr	r3, [pc, #124]	; (8001b94 <SystemClock_Config+0xcc>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001b1c:	607b      	str	r3, [r7, #4]
 8001b1e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001b20:	2302      	movs	r3, #2
 8001b22:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b24:	2301      	movs	r3, #1
 8001b26:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001b28:	2310      	movs	r3, #16
 8001b2a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b2c:	2302      	movs	r3, #2
 8001b2e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001b30:	2300      	movs	r3, #0
 8001b32:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 10;
 8001b34:	230a      	movs	r3, #10
 8001b36:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 210;
 8001b38:	23d2      	movs	r3, #210	; 0xd2
 8001b3a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b3c:	2302      	movs	r3, #2
 8001b3e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001b40:	2302      	movs	r3, #2
 8001b42:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b44:	f107 0320 	add.w	r3, r7, #32
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f004 feb7 	bl	80068bc <HAL_RCC_OscConfig>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d001      	beq.n	8001b58 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001b54:	f000 fc8a 	bl	800246c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b58:	230f      	movs	r3, #15
 8001b5a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b5c:	2302      	movs	r3, #2
 8001b5e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b60:	2300      	movs	r3, #0
 8001b62:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001b64:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001b68:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001b6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b6e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001b70:	f107 030c 	add.w	r3, r7, #12
 8001b74:	2105      	movs	r1, #5
 8001b76:	4618      	mov	r0, r3
 8001b78:	f005 f944 	bl	8006e04 <HAL_RCC_ClockConfig>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d001      	beq.n	8001b86 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8001b82:	f000 fc73 	bl	800246c <Error_Handler>
  }
}
 8001b86:	bf00      	nop
 8001b88:	3750      	adds	r7, #80	; 0x50
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	40023800 	.word	0x40023800
 8001b94:	40007000 	.word	0x40007000

08001b98 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8001b9c:	4b16      	ldr	r3, [pc, #88]	; (8001bf8 <MX_DCMI_Init+0x60>)
 8001b9e:	4a17      	ldr	r2, [pc, #92]	; (8001bfc <MX_DCMI_Init+0x64>)
 8001ba0:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8001ba2:	4b15      	ldr	r3, [pc, #84]	; (8001bf8 <MX_DCMI_Init+0x60>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 8001ba8:	4b13      	ldr	r3, [pc, #76]	; (8001bf8 <MX_DCMI_Init+0x60>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 8001bae:	4b12      	ldr	r3, [pc, #72]	; (8001bf8 <MX_DCMI_Init+0x60>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8001bb4:	4b10      	ldr	r3, [pc, #64]	; (8001bf8 <MX_DCMI_Init+0x60>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8001bba:	4b0f      	ldr	r3, [pc, #60]	; (8001bf8 <MX_DCMI_Init+0x60>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8001bc0:	4b0d      	ldr	r3, [pc, #52]	; (8001bf8 <MX_DCMI_Init+0x60>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8001bc6:	4b0c      	ldr	r3, [pc, #48]	; (8001bf8 <MX_DCMI_Init+0x60>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8001bcc:	4b0a      	ldr	r3, [pc, #40]	; (8001bf8 <MX_DCMI_Init+0x60>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8001bd2:	4b09      	ldr	r3, [pc, #36]	; (8001bf8 <MX_DCMI_Init+0x60>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8001bd8:	4b07      	ldr	r3, [pc, #28]	; (8001bf8 <MX_DCMI_Init+0x60>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8001bde:	4b06      	ldr	r3, [pc, #24]	; (8001bf8 <MX_DCMI_Init+0x60>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8001be4:	4804      	ldr	r0, [pc, #16]	; (8001bf8 <MX_DCMI_Init+0x60>)
 8001be6:	f001 fe77 	bl	80038d8 <HAL_DCMI_Init>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d001      	beq.n	8001bf4 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8001bf0:	f000 fc3c 	bl	800246c <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8001bf4:	bf00      	nop
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	20000368 	.word	0x20000368
 8001bfc:	50050000 	.word	0x50050000

08001c00 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001c04:	4b13      	ldr	r3, [pc, #76]	; (8001c54 <MX_USART1_UART_Init+0x54>)
 8001c06:	4a14      	ldr	r2, [pc, #80]	; (8001c58 <MX_USART1_UART_Init+0x58>)
 8001c08:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 2000000;
 8001c0a:	4b12      	ldr	r3, [pc, #72]	; (8001c54 <MX_USART1_UART_Init+0x54>)
 8001c0c:	4a13      	ldr	r2, [pc, #76]	; (8001c5c <MX_USART1_UART_Init+0x5c>)
 8001c0e:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001c10:	4b10      	ldr	r3, [pc, #64]	; (8001c54 <MX_USART1_UART_Init+0x54>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001c16:	4b0f      	ldr	r3, [pc, #60]	; (8001c54 <MX_USART1_UART_Init+0x54>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001c1c:	4b0d      	ldr	r3, [pc, #52]	; (8001c54 <MX_USART1_UART_Init+0x54>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001c22:	4b0c      	ldr	r3, [pc, #48]	; (8001c54 <MX_USART1_UART_Init+0x54>)
 8001c24:	220c      	movs	r2, #12
 8001c26:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c28:	4b0a      	ldr	r3, [pc, #40]	; (8001c54 <MX_USART1_UART_Init+0x54>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c2e:	4b09      	ldr	r3, [pc, #36]	; (8001c54 <MX_USART1_UART_Init+0x54>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c34:	4b07      	ldr	r3, [pc, #28]	; (8001c54 <MX_USART1_UART_Init+0x54>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c3a:	4b06      	ldr	r3, [pc, #24]	; (8001c54 <MX_USART1_UART_Init+0x54>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001c40:	4804      	ldr	r0, [pc, #16]	; (8001c54 <MX_USART1_UART_Init+0x54>)
 8001c42:	f005 ff36 	bl	8007ab2 <HAL_UART_Init>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d001      	beq.n	8001c50 <MX_USART1_UART_Init+0x50>
  {
    Error_Handler();
 8001c4c:	f000 fc0e 	bl	800246c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001c50:	bf00      	nop
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	200003b8 	.word	0x200003b8
 8001c58:	40011000 	.word	0x40011000
 8001c5c:	001e8480 	.word	0x001e8480

08001c60 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b088      	sub	sp, #32
 8001c64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8001c66:	1d3b      	adds	r3, r7, #4
 8001c68:	2200      	movs	r2, #0
 8001c6a:	601a      	str	r2, [r3, #0]
 8001c6c:	605a      	str	r2, [r3, #4]
 8001c6e:	609a      	str	r2, [r3, #8]
 8001c70:	60da      	str	r2, [r3, #12]
 8001c72:	611a      	str	r2, [r3, #16]
 8001c74:	615a      	str	r2, [r3, #20]
 8001c76:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001c78:	4b1e      	ldr	r3, [pc, #120]	; (8001cf4 <MX_FMC_Init+0x94>)
 8001c7a:	4a1f      	ldr	r2, [pc, #124]	; (8001cf8 <MX_FMC_Init+0x98>)
 8001c7c:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8001c7e:	4b1d      	ldr	r3, [pc, #116]	; (8001cf4 <MX_FMC_Init+0x94>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001c84:	4b1b      	ldr	r3, [pc, #108]	; (8001cf4 <MX_FMC_Init+0x94>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8001c8a:	4b1a      	ldr	r3, [pc, #104]	; (8001cf4 <MX_FMC_Init+0x94>)
 8001c8c:	2204      	movs	r2, #4
 8001c8e:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8001c90:	4b18      	ldr	r3, [pc, #96]	; (8001cf4 <MX_FMC_Init+0x94>)
 8001c92:	2210      	movs	r2, #16
 8001c94:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001c96:	4b17      	ldr	r3, [pc, #92]	; (8001cf4 <MX_FMC_Init+0x94>)
 8001c98:	2240      	movs	r2, #64	; 0x40
 8001c9a:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 8001c9c:	4b15      	ldr	r3, [pc, #84]	; (8001cf4 <MX_FMC_Init+0x94>)
 8001c9e:	2280      	movs	r2, #128	; 0x80
 8001ca0:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001ca2:	4b14      	ldr	r3, [pc, #80]	; (8001cf4 <MX_FMC_Init+0x94>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 8001ca8:	4b12      	ldr	r3, [pc, #72]	; (8001cf4 <MX_FMC_Init+0x94>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8001cae:	4b11      	ldr	r3, [pc, #68]	; (8001cf4 <MX_FMC_Init+0x94>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8001cb4:	4b0f      	ldr	r3, [pc, #60]	; (8001cf4 <MX_FMC_Init+0x94>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 8001cba:	2310      	movs	r3, #16
 8001cbc:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 8001cbe:	2310      	movs	r3, #16
 8001cc0:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 8001cc2:	2310      	movs	r3, #16
 8001cc4:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 8001cc6:	2310      	movs	r3, #16
 8001cc8:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 8001cca:	2310      	movs	r3, #16
 8001ccc:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 8001cce:	2310      	movs	r3, #16
 8001cd0:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 8001cd2:	2310      	movs	r3, #16
 8001cd4:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001cd6:	1d3b      	adds	r3, r7, #4
 8001cd8:	4619      	mov	r1, r3
 8001cda:	4806      	ldr	r0, [pc, #24]	; (8001cf4 <MX_FMC_Init+0x94>)
 8001cdc:	f005 fe58 	bl	8007990 <HAL_SDRAM_Init>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d001      	beq.n	8001cea <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 8001ce6:	f000 fbc1 	bl	800246c <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8001cea:	bf00      	nop
 8001cec:	3720      	adds	r7, #32
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	2000045c 	.word	0x2000045c
 8001cf8:	a0000140 	.word	0xa0000140

08001cfc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b090      	sub	sp, #64	; 0x40
 8001d00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d02:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d06:	2200      	movs	r2, #0
 8001d08:	601a      	str	r2, [r3, #0]
 8001d0a:	605a      	str	r2, [r3, #4]
 8001d0c:	609a      	str	r2, [r3, #8]
 8001d0e:	60da      	str	r2, [r3, #12]
 8001d10:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d12:	4bad      	ldr	r3, [pc, #692]	; (8001fc8 <MX_GPIO_Init+0x2cc>)
 8001d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d16:	4aac      	ldr	r2, [pc, #688]	; (8001fc8 <MX_GPIO_Init+0x2cc>)
 8001d18:	f043 0310 	orr.w	r3, r3, #16
 8001d1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d1e:	4baa      	ldr	r3, [pc, #680]	; (8001fc8 <MX_GPIO_Init+0x2cc>)
 8001d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d22:	f003 0310 	and.w	r3, r3, #16
 8001d26:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001d2a:	4ba7      	ldr	r3, [pc, #668]	; (8001fc8 <MX_GPIO_Init+0x2cc>)
 8001d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2e:	4aa6      	ldr	r2, [pc, #664]	; (8001fc8 <MX_GPIO_Init+0x2cc>)
 8001d30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d34:	6313      	str	r3, [r2, #48]	; 0x30
 8001d36:	4ba4      	ldr	r3, [pc, #656]	; (8001fc8 <MX_GPIO_Init+0x2cc>)
 8001d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d3e:	627b      	str	r3, [r7, #36]	; 0x24
 8001d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d42:	4ba1      	ldr	r3, [pc, #644]	; (8001fc8 <MX_GPIO_Init+0x2cc>)
 8001d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d46:	4aa0      	ldr	r2, [pc, #640]	; (8001fc8 <MX_GPIO_Init+0x2cc>)
 8001d48:	f043 0302 	orr.w	r3, r3, #2
 8001d4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d4e:	4b9e      	ldr	r3, [pc, #632]	; (8001fc8 <MX_GPIO_Init+0x2cc>)
 8001d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d52:	f003 0302 	and.w	r3, r3, #2
 8001d56:	623b      	str	r3, [r7, #32]
 8001d58:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d5a:	4b9b      	ldr	r3, [pc, #620]	; (8001fc8 <MX_GPIO_Init+0x2cc>)
 8001d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5e:	4a9a      	ldr	r2, [pc, #616]	; (8001fc8 <MX_GPIO_Init+0x2cc>)
 8001d60:	f043 0308 	orr.w	r3, r3, #8
 8001d64:	6313      	str	r3, [r2, #48]	; 0x30
 8001d66:	4b98      	ldr	r3, [pc, #608]	; (8001fc8 <MX_GPIO_Init+0x2cc>)
 8001d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6a:	f003 0308 	and.w	r3, r3, #8
 8001d6e:	61fb      	str	r3, [r7, #28]
 8001d70:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d72:	4b95      	ldr	r3, [pc, #596]	; (8001fc8 <MX_GPIO_Init+0x2cc>)
 8001d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d76:	4a94      	ldr	r2, [pc, #592]	; (8001fc8 <MX_GPIO_Init+0x2cc>)
 8001d78:	f043 0304 	orr.w	r3, r3, #4
 8001d7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d7e:	4b92      	ldr	r3, [pc, #584]	; (8001fc8 <MX_GPIO_Init+0x2cc>)
 8001d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d82:	f003 0304 	and.w	r3, r3, #4
 8001d86:	61bb      	str	r3, [r7, #24]
 8001d88:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d8a:	4b8f      	ldr	r3, [pc, #572]	; (8001fc8 <MX_GPIO_Init+0x2cc>)
 8001d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d8e:	4a8e      	ldr	r2, [pc, #568]	; (8001fc8 <MX_GPIO_Init+0x2cc>)
 8001d90:	f043 0301 	orr.w	r3, r3, #1
 8001d94:	6313      	str	r3, [r2, #48]	; 0x30
 8001d96:	4b8c      	ldr	r3, [pc, #560]	; (8001fc8 <MX_GPIO_Init+0x2cc>)
 8001d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d9a:	f003 0301 	and.w	r3, r3, #1
 8001d9e:	617b      	str	r3, [r7, #20]
 8001da0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001da2:	4b89      	ldr	r3, [pc, #548]	; (8001fc8 <MX_GPIO_Init+0x2cc>)
 8001da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da6:	4a88      	ldr	r2, [pc, #544]	; (8001fc8 <MX_GPIO_Init+0x2cc>)
 8001da8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001dac:	6313      	str	r3, [r2, #48]	; 0x30
 8001dae:	4b86      	ldr	r3, [pc, #536]	; (8001fc8 <MX_GPIO_Init+0x2cc>)
 8001db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001db6:	613b      	str	r3, [r7, #16]
 8001db8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001dba:	4b83      	ldr	r3, [pc, #524]	; (8001fc8 <MX_GPIO_Init+0x2cc>)
 8001dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dbe:	4a82      	ldr	r2, [pc, #520]	; (8001fc8 <MX_GPIO_Init+0x2cc>)
 8001dc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dc4:	6313      	str	r3, [r2, #48]	; 0x30
 8001dc6:	4b80      	ldr	r3, [pc, #512]	; (8001fc8 <MX_GPIO_Init+0x2cc>)
 8001dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dce:	60fb      	str	r3, [r7, #12]
 8001dd0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001dd2:	4b7d      	ldr	r3, [pc, #500]	; (8001fc8 <MX_GPIO_Init+0x2cc>)
 8001dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd6:	4a7c      	ldr	r2, [pc, #496]	; (8001fc8 <MX_GPIO_Init+0x2cc>)
 8001dd8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ddc:	6313      	str	r3, [r2, #48]	; 0x30
 8001dde:	4b7a      	ldr	r3, [pc, #488]	; (8001fc8 <MX_GPIO_Init+0x2cc>)
 8001de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001de6:	60bb      	str	r3, [r7, #8]
 8001de8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001dea:	4b77      	ldr	r3, [pc, #476]	; (8001fc8 <MX_GPIO_Init+0x2cc>)
 8001dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dee:	4a76      	ldr	r2, [pc, #472]	; (8001fc8 <MX_GPIO_Init+0x2cc>)
 8001df0:	f043 0320 	orr.w	r3, r3, #32
 8001df4:	6313      	str	r3, [r2, #48]	; 0x30
 8001df6:	4b74      	ldr	r3, [pc, #464]	; (8001fc8 <MX_GPIO_Init+0x2cc>)
 8001df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfa:	f003 0320 	and.w	r3, r3, #32
 8001dfe:	607b      	str	r3, [r7, #4]
 8001e00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e02:	4b71      	ldr	r3, [pc, #452]	; (8001fc8 <MX_GPIO_Init+0x2cc>)
 8001e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e06:	4a70      	ldr	r2, [pc, #448]	; (8001fc8 <MX_GPIO_Init+0x2cc>)
 8001e08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e0e:	4b6e      	ldr	r3, [pc, #440]	; (8001fc8 <MX_GPIO_Init+0x2cc>)
 8001e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e16:	603b      	str	r3, [r7, #0]
 8001e18:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	2120      	movs	r1, #32
 8001e1e:	486b      	ldr	r0, [pc, #428]	; (8001fcc <MX_GPIO_Init+0x2d0>)
 8001e20:	f003 ffc4 	bl	8005dac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin, GPIO_PIN_RESET);
 8001e24:	2200      	movs	r2, #0
 8001e26:	f241 010c 	movw	r1, #4108	; 0x100c
 8001e2a:	4869      	ldr	r0, [pc, #420]	; (8001fd0 <MX_GPIO_Init+0x2d4>)
 8001e2c:	f003 ffbe 	bl	8005dac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 8001e30:	2200      	movs	r2, #0
 8001e32:	2108      	movs	r1, #8
 8001e34:	4867      	ldr	r0, [pc, #412]	; (8001fd4 <MX_GPIO_Init+0x2d8>)
 8001e36:	f003 ffb9 	bl	8005dac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e40:	4865      	ldr	r0, [pc, #404]	; (8001fd8 <MX_GPIO_Init+0x2dc>)
 8001e42:	f003 ffb3 	bl	8005dac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8001e46:	2200      	movs	r2, #0
 8001e48:	21c8      	movs	r1, #200	; 0xc8
 8001e4a:	4864      	ldr	r0, [pc, #400]	; (8001fdc <MX_GPIO_Init+0x2e0>)
 8001e4c:	f003 ffae 	bl	8005dac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LCD_B0_Pin */
  GPIO_InitStruct.Pin = LCD_B0_Pin;
 8001e50:	2310      	movs	r3, #16
 8001e52:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e54:	2302      	movs	r3, #2
 8001e56:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001e60:	230e      	movs	r3, #14
 8001e62:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8001e64:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e68:	4619      	mov	r1, r3
 8001e6a:	485d      	ldr	r0, [pc, #372]	; (8001fe0 <MX_GPIO_Init+0x2e4>)
 8001e6c:	f003 fdf2 	bl	8005a54 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8001e70:	2308      	movs	r3, #8
 8001e72:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e74:	2300      	movs	r3, #0
 8001e76:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001e7c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e80:	4619      	mov	r1, r3
 8001e82:	4857      	ldr	r0, [pc, #348]	; (8001fe0 <MX_GPIO_Init+0x2e4>)
 8001e84:	f003 fde6 	bl	8005a54 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_D2_Pin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8001e88:	2304      	movs	r3, #4
 8001e8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e8c:	2302      	movs	r3, #2
 8001e8e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e90:	2300      	movs	r3, #0
 8001e92:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e94:	2303      	movs	r3, #3
 8001e96:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001e98:	2309      	movs	r3, #9
 8001e9a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8001e9c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	484f      	ldr	r0, [pc, #316]	; (8001fe0 <MX_GPIO_Init+0x2e4>)
 8001ea4:	f003 fdd6 	bl	8005a54 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8001ea8:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8001eac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eae:	2302      	movs	r3, #2
 8001eb0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eb6:	2303      	movs	r3, #3
 8001eb8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001eba:	230b      	movs	r3, #11
 8001ebc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001ebe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ec2:	4619      	mov	r1, r3
 8001ec4:	4845      	ldr	r0, [pc, #276]	; (8001fdc <MX_GPIO_Init+0x2e0>)
 8001ec6:	f003 fdc5 	bl	8005a54 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8001eca:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001ece:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ed0:	2312      	movs	r3, #18
 8001ed2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001edc:	2304      	movs	r3, #4
 8001ede:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ee0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ee4:	4619      	mov	r1, r3
 8001ee6:	483f      	ldr	r0, [pc, #252]	; (8001fe4 <MX_GPIO_Init+0x2e8>)
 8001ee8:	f003 fdb4 	bl	8005a54 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 8001eec:	f643 4323 	movw	r3, #15395	; 0x3c23
 8001ef0:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ef2:	2302      	movs	r3, #2
 8001ef4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001efa:	2303      	movs	r3, #3
 8001efc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001efe:	230a      	movs	r3, #10
 8001f00:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f02:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f06:	4619      	mov	r1, r3
 8001f08:	4836      	ldr	r0, [pc, #216]	; (8001fe4 <MX_GPIO_Init+0x2e8>)
 8001f0a:	f003 fda3 	bl	8005a54 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 8001f0e:	2310      	movs	r3, #16
 8001f10:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f12:	2302      	movs	r3, #2
 8001f14:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f16:	2300      	movs	r3, #0
 8001f18:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001f1e:	2302      	movs	r3, #2
 8001f20:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8001f22:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f26:	4619      	mov	r1, r3
 8001f28:	482e      	ldr	r0, [pc, #184]	; (8001fe4 <MX_GPIO_Init+0x2e8>)
 8001f2a:	f003 fd93 	bl	8005a54 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_RX0_Pin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8001f2e:	2380      	movs	r3, #128	; 0x80
 8001f30:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f32:	2302      	movs	r3, #2
 8001f34:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f36:	2300      	movs	r3, #0
 8001f38:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8001f3e:	2308      	movs	r3, #8
 8001f40:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8001f42:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f46:	4619      	mov	r1, r3
 8001f48:	4820      	ldr	r0, [pc, #128]	; (8001fcc <MX_GPIO_Init+0x2d0>)
 8001f4a:	f003 fd83 	bl	8005a54 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC_CK_Pin SDMMC_D3_Pin SDMMC_D2_Pin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8001f4e:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001f52:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f54:	2302      	movs	r3, #2
 8001f56:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f5c:	2303      	movs	r3, #3
 8001f5e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001f60:	230c      	movs	r3, #12
 8001f62:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f64:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f68:	4619      	mov	r1, r3
 8001f6a:	481f      	ldr	r0, [pc, #124]	; (8001fe8 <MX_GPIO_Init+0x2ec>)
 8001f6c:	f003 fd72 	bl	8005a54 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D9_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8001f70:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001f74:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f76:	2302      	movs	r3, #2
 8001f78:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001f82:	2301      	movs	r3, #1
 8001f84:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8001f86:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f8a:	4619      	mov	r1, r3
 8001f8c:	4817      	ldr	r0, [pc, #92]	; (8001fec <MX_GPIO_Init+0x2f0>)
 8001f8e:	f003 fd61 	bl	8005a54 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_NCS_Pin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8001f92:	2340      	movs	r3, #64	; 0x40
 8001f94:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f96:	2302      	movs	r3, #2
 8001f98:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f9e:	2303      	movs	r3, #3
 8001fa0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001fa2:	230a      	movs	r3, #10
 8001fa4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8001fa6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001faa:	4619      	mov	r1, r3
 8001fac:	480d      	ldr	r0, [pc, #52]	; (8001fe4 <MX_GPIO_Init+0x2e8>)
 8001fae:	f003 fd51 	bl	8005a54 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_B1_Pin LCD_B2_Pin LCD_B3_Pin LCD_G4_Pin
                           LCD_G1_Pin LCD_G3_Pin LCD_G0_Pin LCD_G2_Pin
                           LCD_R7_Pin LCD_R5_Pin LCD_R6_Pin LCD_R4_Pin
                           LCD_R3_Pin LCD_R1_Pin LCD_R2_Pin */
  GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8001fb2:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8001fb6:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fb8:	2302      	movs	r3, #2
 8001fba:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001fc4:	230e      	movs	r3, #14
 8001fc6:	e013      	b.n	8001ff0 <MX_GPIO_Init+0x2f4>
 8001fc8:	40023800 	.word	0x40023800
 8001fcc:	40020c00 	.word	0x40020c00
 8001fd0:	40022000 	.word	0x40022000
 8001fd4:	40022800 	.word	0x40022800
 8001fd8:	40021c00 	.word	0x40021c00
 8001fdc:	40021800 	.word	0x40021800
 8001fe0:	40021000 	.word	0x40021000
 8001fe4:	40020400 	.word	0x40020400
 8001fe8:	40020800 	.word	0x40020800
 8001fec:	40020000 	.word	0x40020000
 8001ff0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001ff2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ff6:	4619      	mov	r1, r3
 8001ff8:	48bc      	ldr	r0, [pc, #752]	; (80022ec <MX_GPIO_Init+0x5f0>)
 8001ffa:	f003 fd2b 	bl	8005a54 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8001ffe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002002:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002004:	2300      	movs	r3, #0
 8002006:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002008:	2300      	movs	r3, #0
 800200a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800200c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002010:	4619      	mov	r1, r3
 8002012:	48b6      	ldr	r0, [pc, #728]	; (80022ec <MX_GPIO_Init+0x5f0>)
 8002014:	f003 fd1e 	bl	8005a54 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8002018:	2340      	movs	r3, #64	; 0x40
 800201a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800201c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8002020:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002022:	2300      	movs	r3, #0
 8002024:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8002026:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800202a:	4619      	mov	r1, r3
 800202c:	48b0      	ldr	r0, [pc, #704]	; (80022f0 <MX_GPIO_Init+0x5f4>)
 800202e:	f003 fd11 	bl	8005a54 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8002032:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002036:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002038:	2302      	movs	r3, #2
 800203a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800203c:	2300      	movs	r3, #0
 800203e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002040:	2303      	movs	r3, #3
 8002042:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002044:	230a      	movs	r3, #10
 8002046:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002048:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800204c:	4619      	mov	r1, r3
 800204e:	48a9      	ldr	r0, [pc, #676]	; (80022f4 <MX_GPIO_Init+0x5f8>)
 8002050:	f003 fd00 	bl	8005a54 <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI2_MCLKA_Pin SAI2_SCKA_Pin SAI2_FSA_Pin SAI2_SDA_Pin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8002054:	23f0      	movs	r3, #240	; 0xf0
 8002056:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002058:	2302      	movs	r3, #2
 800205a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800205c:	2300      	movs	r3, #0
 800205e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002060:	2300      	movs	r3, #0
 8002062:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8002064:	230a      	movs	r3, #10
 8002066:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002068:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800206c:	4619      	mov	r1, r3
 800206e:	48a2      	ldr	r0, [pc, #648]	; (80022f8 <MX_GPIO_Init+0x5fc>)
 8002070:	f003 fcf0 	bl	8005a54 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DE_Pin LCD_B7_Pin LCD_B6_Pin LCD_B5_Pin
                           LCD_G6_Pin LCD_G7_Pin LCD_G5_Pin */
  GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8002074:	23f7      	movs	r3, #247	; 0xf7
 8002076:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002078:	2302      	movs	r3, #2
 800207a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800207c:	2300      	movs	r3, #0
 800207e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002080:	2300      	movs	r3, #0
 8002082:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002084:	230e      	movs	r3, #14
 8002086:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8002088:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800208c:	4619      	mov	r1, r3
 800208e:	489b      	ldr	r0, [pc, #620]	; (80022fc <MX_GPIO_Init+0x600>)
 8002090:	f003 fce0 	bl	8005a54 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_B4_Pin */
  GPIO_InitStruct.Pin = LCD_B4_Pin;
 8002094:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002098:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800209a:	2302      	movs	r3, #2
 800209c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800209e:	2300      	movs	r3, #0
 80020a0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020a2:	2300      	movs	r3, #0
 80020a4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80020a6:	2309      	movs	r3, #9
 80020a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 80020aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80020ae:	4619      	mov	r1, r3
 80020b0:	4893      	ldr	r0, [pc, #588]	; (8002300 <MX_GPIO_Init+0x604>)
 80020b2:	f003 fccf 	bl	8005a54 <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI2_SDB_Pin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 80020b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80020ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020bc:	2302      	movs	r3, #2
 80020be:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c0:	2300      	movs	r3, #0
 80020c2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020c4:	2300      	movs	r3, #0
 80020c6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80020c8:	230a      	movs	r3, #10
 80020ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 80020cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80020d0:	4619      	mov	r1, r3
 80020d2:	488b      	ldr	r0, [pc, #556]	; (8002300 <MX_GPIO_Init+0x604>)
 80020d4:	f003 fcbe 	bl	8005a54 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80020d8:	2320      	movs	r3, #32
 80020da:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020dc:	2301      	movs	r3, #1
 80020de:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e0:	2300      	movs	r3, #0
 80020e2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020e4:	2300      	movs	r3, #0
 80020e6:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80020e8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80020ec:	4619      	mov	r1, r3
 80020ee:	4880      	ldr	r0, [pc, #512]	; (80022f0 <MX_GPIO_Init+0x5f4>)
 80020f0:	f003 fcb0 	bl	8005a54 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 80020f4:	f241 030c 	movw	r3, #4108	; 0x100c
 80020f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020fa:	2301      	movs	r3, #1
 80020fc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020fe:	2300      	movs	r3, #0
 8002100:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002102:	2300      	movs	r3, #0
 8002104:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002106:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800210a:	4619      	mov	r1, r3
 800210c:	487a      	ldr	r0, [pc, #488]	; (80022f8 <MX_GPIO_Init+0x5fc>)
 800210e:	f003 fca1 	bl	8005a54 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8002112:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002116:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002118:	2300      	movs	r3, #0
 800211a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800211c:	2300      	movs	r3, #0
 800211e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8002120:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002124:	4619      	mov	r1, r3
 8002126:	4877      	ldr	r0, [pc, #476]	; (8002304 <MX_GPIO_Init+0x608>)
 8002128:	f003 fc94 	bl	8005a54 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_HSYNC_Pin LCD_VSYNC_Pin LCD_R0_Pin LCD_CLK_Pin */
  GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 800212c:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8002130:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002132:	2302      	movs	r3, #2
 8002134:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002136:	2300      	movs	r3, #0
 8002138:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800213a:	2300      	movs	r3, #0
 800213c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800213e:	230e      	movs	r3, #14
 8002140:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002142:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002146:	4619      	mov	r1, r3
 8002148:	486b      	ldr	r0, [pc, #428]	; (80022f8 <MX_GPIO_Init+0x5fc>)
 800214a:	f003 fc83 	bl	8005a54 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 800214e:	2308      	movs	r3, #8
 8002150:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002152:	2301      	movs	r3, #1
 8002154:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002156:	2300      	movs	r3, #0
 8002158:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800215a:	2300      	movs	r3, #0
 800215c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 800215e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002162:	4619      	mov	r1, r3
 8002164:	4865      	ldr	r0, [pc, #404]	; (80022fc <MX_GPIO_Init+0x600>)
 8002166:	f003 fc75 	bl	8005a54 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800216a:	2310      	movs	r3, #16
 800216c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800216e:	2300      	movs	r3, #0
 8002170:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002172:	2300      	movs	r3, #0
 8002174:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002176:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800217a:	4619      	mov	r1, r3
 800217c:	485c      	ldr	r0, [pc, #368]	; (80022f0 <MX_GPIO_Init+0x5f4>)
 800217e:	f003 fc69 	bl	8005a54 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC_D0_Pin */
  GPIO_InitStruct.Pin = SDMMC_D0_Pin;
 8002182:	2304      	movs	r3, #4
 8002184:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002186:	2302      	movs	r3, #2
 8002188:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800218a:	2300      	movs	r3, #0
 800218c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800218e:	2303      	movs	r3, #3
 8002190:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002192:	230c      	movs	r3, #12
 8002194:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SDMMC_D0_GPIO_Port, &GPIO_InitStruct);
 8002196:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800219a:	4619      	mov	r1, r3
 800219c:	4854      	ldr	r0, [pc, #336]	; (80022f0 <MX_GPIO_Init+0x5f4>)
 800219e:	f003 fc59 	bl	8005a54 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 80021a2:	f248 0304 	movw	r3, #32772	; 0x8004
 80021a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021a8:	2300      	movs	r3, #0
 80021aa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ac:	2300      	movs	r3, #0
 80021ae:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80021b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80021b4:	4619      	mov	r1, r3
 80021b6:	4854      	ldr	r0, [pc, #336]	; (8002308 <MX_GPIO_Init+0x60c>)
 80021b8:	f003 fc4c 	bl	8005a54 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_SCK_D13_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 80021bc:	2302      	movs	r3, #2
 80021be:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021c0:	2302      	movs	r3, #2
 80021c2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c4:	2300      	movs	r3, #0
 80021c6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021c8:	2300      	movs	r3, #0
 80021ca:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80021cc:	2305      	movs	r3, #5
 80021ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 80021d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80021d4:	4619      	mov	r1, r3
 80021d6:	4848      	ldr	r0, [pc, #288]	; (80022f8 <MX_GPIO_Init+0x5fc>)
 80021d8:	f003 fc3c 	bl	8005a54 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 80021dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80021e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021e2:	2301      	movs	r3, #1
 80021e4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e6:	2300      	movs	r3, #0
 80021e8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ea:	2300      	movs	r3, #0
 80021ec:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80021ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80021f2:	4619      	mov	r1, r3
 80021f4:	4844      	ldr	r0, [pc, #272]	; (8002308 <MX_GPIO_Init+0x60c>)
 80021f6:	f003 fc2d 	bl	8005a54 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_CS_D5_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 80021fa:	2301      	movs	r3, #1
 80021fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021fe:	2302      	movs	r3, #2
 8002200:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002202:	2300      	movs	r3, #0
 8002204:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002206:	2300      	movs	r3, #0
 8002208:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800220a:	2302      	movs	r3, #2
 800220c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 800220e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002212:	4619      	mov	r1, r3
 8002214:	4838      	ldr	r0, [pc, #224]	; (80022f8 <MX_GPIO_Init+0x5fc>)
 8002216:	f003 fc1d 	bl	8005a54 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D10_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 800221a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800221e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002220:	2302      	movs	r3, #2
 8002222:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002224:	2300      	movs	r3, #0
 8002226:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002228:	2300      	movs	r3, #0
 800222a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800222c:	2301      	movs	r3, #1
 800222e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8002230:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002234:	4619      	mov	r1, r3
 8002236:	482f      	ldr	r0, [pc, #188]	; (80022f4 <MX_GPIO_Init+0x5f8>)
 8002238:	f003 fc0c 	bl	8005a54 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 800223c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002240:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002242:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8002246:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002248:	2300      	movs	r3, #0
 800224a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 800224c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002250:	4619      	mov	r1, r3
 8002252:	4829      	ldr	r0, [pc, #164]	; (80022f8 <MX_GPIO_Init+0x5fc>)
 8002254:	f003 fbfe 	bl	8005a54 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_RX_D0_Pin ARDUINO_TX_D1_Pin */
  GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8002258:	23c0      	movs	r3, #192	; 0xc0
 800225a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800225c:	2302      	movs	r3, #2
 800225e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002260:	2300      	movs	r3, #0
 8002262:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002264:	2303      	movs	r3, #3
 8002266:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002268:	2308      	movs	r3, #8
 800226a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800226c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002270:	4619      	mov	r1, r3
 8002272:	4824      	ldr	r0, [pc, #144]	; (8002304 <MX_GPIO_Init+0x608>)
 8002274:	f003 fbee 	bl	8005a54 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8002278:	2310      	movs	r3, #16
 800227a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800227c:	2302      	movs	r3, #2
 800227e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002280:	2300      	movs	r3, #0
 8002282:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002284:	2303      	movs	r3, #3
 8002286:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002288:	230a      	movs	r3, #10
 800228a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 800228c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002290:	4619      	mov	r1, r3
 8002292:	481d      	ldr	r0, [pc, #116]	; (8002308 <MX_GPIO_Init+0x60c>)
 8002294:	f003 fbde 	bl	8005a54 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8002298:	23c8      	movs	r3, #200	; 0xc8
 800229a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800229c:	2301      	movs	r3, #1
 800229e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a0:	2300      	movs	r3, #0
 80022a2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022a4:	2300      	movs	r3, #0
 80022a6:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80022a8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80022ac:	4619      	mov	r1, r3
 80022ae:	4814      	ldr	r0, [pc, #80]	; (8002300 <MX_GPIO_Init+0x604>)
 80022b0:	f003 fbd0 	bl	8005a54 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_A4_Pin ARDUINO_A5_Pin ARDUINO_A1_Pin ARDUINO_A2_Pin
                           ARDUINO_A3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 80022b4:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 80022b8:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ARDUINO_A3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80022ba:	2303      	movs	r3, #3
 80022bc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022be:	2300      	movs	r3, #0
 80022c0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80022c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80022c6:	4619      	mov	r1, r3
 80022c8:	4810      	ldr	r0, [pc, #64]	; (800230c <MX_GPIO_Init+0x610>)
 80022ca:	f003 fbc3 	bl	8005a54 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 80022ce:	2305      	movs	r3, #5
 80022d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022d2:	2302      	movs	r3, #2
 80022d4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d6:	2300      	movs	r3, #0
 80022d8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022da:	2303      	movs	r3, #3
 80022dc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80022de:	230a      	movs	r3, #10
 80022e0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80022e6:	4619      	mov	r1, r3
 80022e8:	e012      	b.n	8002310 <MX_GPIO_Init+0x614>
 80022ea:	bf00      	nop
 80022ec:	40022400 	.word	0x40022400
 80022f0:	40020c00 	.word	0x40020c00
 80022f4:	40020000 	.word	0x40020000
 80022f8:	40022000 	.word	0x40022000
 80022fc:	40022800 	.word	0x40022800
 8002300:	40021800 	.word	0x40021800
 8002304:	40020800 	.word	0x40020800
 8002308:	40021c00 	.word	0x40021c00
 800230c:	40021400 	.word	0x40021400
 8002310:	4850      	ldr	r0, [pc, #320]	; (8002454 <MX_GPIO_Init+0x758>)
 8002312:	f003 fb9f 	bl	8005a54 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8002316:	2332      	movs	r3, #50	; 0x32
 8002318:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800231a:	2302      	movs	r3, #2
 800231c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800231e:	2300      	movs	r3, #0
 8002320:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002322:	2303      	movs	r3, #3
 8002324:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002326:	230b      	movs	r3, #11
 8002328:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800232a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800232e:	4619      	mov	r1, r3
 8002330:	4848      	ldr	r0, [pc, #288]	; (8002454 <MX_GPIO_Init+0x758>)
 8002332:	f003 fb8f 	bl	8005a54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002336:	2304      	movs	r3, #4
 8002338:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800233a:	2302      	movs	r3, #2
 800233c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800233e:	2300      	movs	r3, #0
 8002340:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002342:	2303      	movs	r3, #3
 8002344:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002346:	2309      	movs	r3, #9
 8002348:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800234a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800234e:	4619      	mov	r1, r3
 8002350:	4841      	ldr	r0, [pc, #260]	; (8002458 <MX_GPIO_Init+0x75c>)
 8002352:	f003 fb7f 	bl	8005a54 <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8002356:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800235a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800235c:	2302      	movs	r3, #2
 800235e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002360:	2300      	movs	r3, #0
 8002362:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002364:	2303      	movs	r3, #3
 8002366:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002368:	2309      	movs	r3, #9
 800236a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800236c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002370:	4619      	mov	r1, r3
 8002372:	483a      	ldr	r0, [pc, #232]	; (800245c <MX_GPIO_Init+0x760>)
 8002374:	f003 fb6e 	bl	8005a54 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8002378:	2304      	movs	r3, #4
 800237a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800237c:	2300      	movs	r3, #0
 800237e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002380:	2300      	movs	r3, #0
 8002382:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8002384:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002388:	4619      	mov	r1, r3
 800238a:	4835      	ldr	r0, [pc, #212]	; (8002460 <MX_GPIO_Init+0x764>)
 800238c:	f003 fb62 	bl	8005a54 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8002390:	2386      	movs	r3, #134	; 0x86
 8002392:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002394:	2302      	movs	r3, #2
 8002396:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002398:	2300      	movs	r3, #0
 800239a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800239c:	2303      	movs	r3, #3
 800239e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80023a0:	230b      	movs	r3, #11
 80023a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023a4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80023a8:	4619      	mov	r1, r3
 80023aa:	482e      	ldr	r0, [pc, #184]	; (8002464 <MX_GPIO_Init+0x768>)
 80023ac:	f003 fb52 	bl	8005a54 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_A0_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 80023b0:	2301      	movs	r3, #1
 80023b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80023b4:	2303      	movs	r3, #3
 80023b6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b8:	2300      	movs	r3, #0
 80023ba:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 80023bc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80023c0:	4619      	mov	r1, r3
 80023c2:	4828      	ldr	r0, [pc, #160]	; (8002464 <MX_GPIO_Init+0x768>)
 80023c4:	f003 fb46 	bl	8005a54 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_SCL_Pin LCD_SDA_Pin */
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 80023c8:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80023cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80023ce:	2312      	movs	r3, #18
 80023d0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d2:	2300      	movs	r3, #0
 80023d4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023d6:	2303      	movs	r3, #3
 80023d8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80023da:	2304      	movs	r3, #4
 80023dc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80023de:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80023e2:	4619      	mov	r1, r3
 80023e4:	4820      	ldr	r0, [pc, #128]	; (8002468 <MX_GPIO_Init+0x76c>)
 80023e6:	f003 fb35 	bl	8005a54 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 80023ea:	2328      	movs	r3, #40	; 0x28
 80023ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023ee:	2302      	movs	r3, #2
 80023f0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023f2:	2300      	movs	r3, #0
 80023f4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023f6:	2303      	movs	r3, #3
 80023f8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80023fa:	230a      	movs	r3, #10
 80023fc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002402:	4619      	mov	r1, r3
 8002404:	4817      	ldr	r0, [pc, #92]	; (8002464 <MX_GPIO_Init+0x768>)
 8002406:	f003 fb25 	bl	8005a54 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D6_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 800240a:	2340      	movs	r3, #64	; 0x40
 800240c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800240e:	2302      	movs	r3, #2
 8002410:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002412:	2300      	movs	r3, #0
 8002414:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002416:	2300      	movs	r3, #0
 8002418:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 800241a:	2309      	movs	r3, #9
 800241c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 800241e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002422:	4619      	mov	r1, r3
 8002424:	4810      	ldr	r0, [pc, #64]	; (8002468 <MX_GPIO_Init+0x76c>)
 8002426:	f003 fb15 	bl	8005a54 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 800242a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800242e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002430:	2302      	movs	r3, #2
 8002432:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002434:	2300      	movs	r3, #0
 8002436:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002438:	2300      	movs	r3, #0
 800243a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800243c:	2305      	movs	r3, #5
 800243e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002440:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002444:	4619      	mov	r1, r3
 8002446:	4804      	ldr	r0, [pc, #16]	; (8002458 <MX_GPIO_Init+0x75c>)
 8002448:	f003 fb04 	bl	8005a54 <HAL_GPIO_Init>

}
 800244c:	bf00      	nop
 800244e:	3740      	adds	r7, #64	; 0x40
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}
 8002454:	40020800 	.word	0x40020800
 8002458:	40020400 	.word	0x40020400
 800245c:	40020c00 	.word	0x40020c00
 8002460:	40021800 	.word	0x40021800
 8002464:	40020000 	.word	0x40020000
 8002468:	40021c00 	.word	0x40021c00

0800246c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800246c:	b480      	push	{r7}
 800246e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002470:	b672      	cpsid	i
}
 8002472:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002474:	e7fe      	b.n	8002474 <Error_Handler+0x8>
	...

08002478 <OV5640_RegisterBusIO>:
  * @brief  Register component IO bus
  * @param  Component object pointer
  * @retval Component status
  */
int32_t OV5640_RegisterBusIO(OV5640_Object_t *pObj, OV5640_IO_t *pIO)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b084      	sub	sp, #16
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
 8002480:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d103      	bne.n	8002490 <OV5640_RegisterBusIO+0x18>
  {
    ret = OV5640_ERROR;
 8002488:	f04f 33ff 	mov.w	r3, #4294967295
 800248c:	60fb      	str	r3, [r7, #12]
 800248e:	e02c      	b.n	80024ea <OV5640_RegisterBusIO+0x72>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	685a      	ldr	r2, [r3, #4]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	891a      	ldrh	r2, [r3, #8]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	68da      	ldr	r2, [r3, #12]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	691a      	ldr	r2, [r3, #16]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	695a      	ldr	r2, [r3, #20]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	615a      	str	r2, [r3, #20]

    pObj->Ctx.ReadReg  = OV5640_ReadRegWrap;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	4a0c      	ldr	r2, [pc, #48]	; (80024f4 <OV5640_RegisterBusIO+0x7c>)
 80024c4:	61da      	str	r2, [r3, #28]
    pObj->Ctx.WriteReg = OV5640_WriteRegWrap;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	4a0b      	ldr	r2, [pc, #44]	; (80024f8 <OV5640_RegisterBusIO+0x80>)
 80024ca:	619a      	str	r2, [r3, #24]
    pObj->Ctx.handle   = pObj;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	687a      	ldr	r2, [r7, #4]
 80024d0:	621a      	str	r2, [r3, #32]

    if (pObj->IO.Init != NULL)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d004      	beq.n	80024e4 <OV5640_RegisterBusIO+0x6c>
    {
      ret = pObj->IO.Init();
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4798      	blx	r3
 80024e0:	60f8      	str	r0, [r7, #12]
 80024e2:	e002      	b.n	80024ea <OV5640_RegisterBusIO+0x72>
    }
    else
    {
      ret = OV5640_ERROR;
 80024e4:	f04f 33ff 	mov.w	r3, #4294967295
 80024e8:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80024ea:	68fb      	ldr	r3, [r7, #12]
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	3710      	adds	r7, #16
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}
 80024f4:	08002bc5 	.word	0x08002bc5
 80024f8:	08002bf7 	.word	0x08002bf7

080024fc <OV5640_Init>:
  * @param  Resolution  Camera resolution
  * @param  PixelFormat pixel format to be configured
  * @retval Component status
  */
int32_t OV5640_Init(OV5640_Object_t *pObj, uint32_t Resolution, uint32_t PixelFormat)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b088      	sub	sp, #32
 8002500:	af00      	add	r7, sp, #0
 8002502:	60f8      	str	r0, [r7, #12]
 8002504:	60b9      	str	r1, [r7, #8]
 8002506:	607a      	str	r2, [r7, #4]
  uint32_t index;
  int32_t ret = OV5640_OK;
 8002508:	2300      	movs	r3, #0
 800250a:	61bb      	str	r3, [r7, #24]
    {OV5640_AEC_CTRL1F, 0x14},
    {OV5640_SYSTEM_CTROL0, 0x02},
  };
  uint8_t tmp;

  if (pObj->IsInitialized == 0U)
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002512:	2b00      	cmp	r3, #0
 8002514:	d165      	bne.n	80025e2 <OV5640_Init+0xe6>
  {
    /* Check if resolution is supported */
    if ((Resolution > OV5640_R800x480) ||
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	2b04      	cmp	r3, #4
 800251a:	d80e      	bhi.n	800253a <OV5640_Init+0x3e>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d00f      	beq.n	8002542 <OV5640_Init+0x46>
        ((PixelFormat != OV5640_RGB565) && (PixelFormat != OV5640_YUV422) &&
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2b02      	cmp	r3, #2
 8002526:	d00c      	beq.n	8002542 <OV5640_Init+0x46>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2b01      	cmp	r3, #1
 800252c:	d009      	beq.n	8002542 <OV5640_Init+0x46>
         (PixelFormat != OV5640_RGB888) && (PixelFormat != OV5640_Y8) &&
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2b07      	cmp	r3, #7
 8002532:	d006      	beq.n	8002542 <OV5640_Init+0x46>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2b08      	cmp	r3, #8
 8002538:	d003      	beq.n	8002542 <OV5640_Init+0x46>
         (PixelFormat != OV5640_JPEG)))
    {
      ret = OV5640_ERROR;
 800253a:	f04f 33ff 	mov.w	r3, #4294967295
 800253e:	61bb      	str	r3, [r7, #24]
 8002540:	e04f      	b.n	80025e2 <OV5640_Init+0xe6>
    }
    else
    {
      /* Set common parameters for all resolutions */
      for (index = 0; index < (sizeof(OV5640_Common) / 4U) ; index++)
 8002542:	2300      	movs	r3, #0
 8002544:	61fb      	str	r3, [r7, #28]
 8002546:	e01f      	b.n	8002588 <OV5640_Init+0x8c>
      {
        if (ret != OV5640_ERROR)
 8002548:	69bb      	ldr	r3, [r7, #24]
 800254a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800254e:	d018      	beq.n	8002582 <OV5640_Init+0x86>
        {
          tmp = (uint8_t)OV5640_Common[index][1];
 8002550:	4a26      	ldr	r2, [pc, #152]	; (80025ec <OV5640_Init+0xf0>)
 8002552:	69fb      	ldr	r3, [r7, #28]
 8002554:	009b      	lsls	r3, r3, #2
 8002556:	4413      	add	r3, r2
 8002558:	885b      	ldrh	r3, [r3, #2]
 800255a:	b2db      	uxtb	r3, r3
 800255c:	75fb      	strb	r3, [r7, #23]

          if (ov5640_write_reg(&pObj->Ctx, OV5640_Common[index][0], &tmp, 1) != OV5640_OK)
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	f103 0018 	add.w	r0, r3, #24
 8002564:	4a21      	ldr	r2, [pc, #132]	; (80025ec <OV5640_Init+0xf0>)
 8002566:	69fb      	ldr	r3, [r7, #28]
 8002568:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 800256c:	f107 0217 	add.w	r2, r7, #23
 8002570:	2301      	movs	r3, #1
 8002572:	f000 fb70 	bl	8002c56 <ov5640_write_reg>
 8002576:	4603      	mov	r3, r0
 8002578:	2b00      	cmp	r3, #0
 800257a:	d002      	beq.n	8002582 <OV5640_Init+0x86>
          {
            ret = OV5640_ERROR;
 800257c:	f04f 33ff 	mov.w	r3, #4294967295
 8002580:	61bb      	str	r3, [r7, #24]
      for (index = 0; index < (sizeof(OV5640_Common) / 4U) ; index++)
 8002582:	69fb      	ldr	r3, [r7, #28]
 8002584:	3301      	adds	r3, #1
 8002586:	61fb      	str	r3, [r7, #28]
 8002588:	69fb      	ldr	r3, [r7, #28]
 800258a:	2bfd      	cmp	r3, #253	; 0xfd
 800258c:	d9dc      	bls.n	8002548 <OV5640_Init+0x4c>
          }
        }
      }

      if (ret == OV5640_OK)
 800258e:	69bb      	ldr	r3, [r7, #24]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d126      	bne.n	80025e2 <OV5640_Init+0xe6>
      {
        /* Set specific parameters for each resolution */
        if (OV5640_SetResolution(pObj, Resolution) != OV5640_OK)
 8002594:	68b9      	ldr	r1, [r7, #8]
 8002596:	68f8      	ldr	r0, [r7, #12]
 8002598:	f000 f9be 	bl	8002918 <OV5640_SetResolution>
 800259c:	4603      	mov	r3, r0
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d003      	beq.n	80025aa <OV5640_Init+0xae>
        {
          ret = OV5640_ERROR;
 80025a2:	f04f 33ff 	mov.w	r3, #4294967295
 80025a6:	61bb      	str	r3, [r7, #24]
 80025a8:	e01b      	b.n	80025e2 <OV5640_Init+0xe6>
        }/* Set specific parameters for each pixel format */
        else if (OV5640_SetPixelFormat(pObj, PixelFormat) != OV5640_OK)
 80025aa:	6879      	ldr	r1, [r7, #4]
 80025ac:	68f8      	ldr	r0, [r7, #12]
 80025ae:	f000 f81f 	bl	80025f0 <OV5640_SetPixelFormat>
 80025b2:	4603      	mov	r3, r0
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d003      	beq.n	80025c0 <OV5640_Init+0xc4>
        {
          ret = OV5640_ERROR;
 80025b8:	f04f 33ff 	mov.w	r3, #4294967295
 80025bc:	61bb      	str	r3, [r7, #24]
 80025be:	e010      	b.n	80025e2 <OV5640_Init+0xe6>
        }/* Set PixelClock, Href and VSync Polarity */
        else if (OV5640_SetPolarities(pObj, OV5640_POLARITY_PCLK_HIGH, OV5640_POLARITY_HREF_HIGH,
 80025c0:	2300      	movs	r3, #0
 80025c2:	2201      	movs	r2, #1
 80025c4:	2101      	movs	r1, #1
 80025c6:	68f8      	ldr	r0, [r7, #12]
 80025c8:	f000 fa9c 	bl	8002b04 <OV5640_SetPolarities>
 80025cc:	4603      	mov	r3, r0
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d003      	beq.n	80025da <OV5640_Init+0xde>
                                      OV5640_POLARITY_VSYNC_HIGH) != OV5640_OK)
        {
          ret = OV5640_ERROR;
 80025d2:	f04f 33ff 	mov.w	r3, #4294967295
 80025d6:	61bb      	str	r3, [r7, #24]
 80025d8:	e003      	b.n	80025e2 <OV5640_Init+0xe6>
        }
        else
        {
          pObj->IsInitialized = 1U;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	2201      	movs	r2, #1
 80025de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }
      }
    }
  }

  return ret;
 80025e2:	69bb      	ldr	r3, [r7, #24]
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	3720      	adds	r7, #32
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}
 80025ec:	0801c598 	.word	0x0801c598

080025f0 <OV5640_SetPixelFormat>:
  * @param  pObj  pointer to component object
  * @param  PixelFormat pixel format to be configured
  * @retval Component status
  */
int32_t OV5640_SetPixelFormat(OV5640_Object_t *pObj, uint32_t PixelFormat)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b086      	sub	sp, #24
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
 80025f8:	6039      	str	r1, [r7, #0]
  int32_t ret = OV5640_OK;
 80025fa:	2300      	movs	r3, #0
 80025fc:	617b      	str	r3, [r7, #20]
    {OV5640_FORMAT_CTRL00, 0x30},
    {OV5640_FORMAT_MUX_CTRL, 0x00},
  };

  /* Check if PixelFormat is supported */
  if ((PixelFormat != OV5640_RGB565) && (PixelFormat != OV5640_YUV422) &&
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d00f      	beq.n	8002624 <OV5640_SetPixelFormat+0x34>
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	2b02      	cmp	r3, #2
 8002608:	d00c      	beq.n	8002624 <OV5640_SetPixelFormat+0x34>
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	2b01      	cmp	r3, #1
 800260e:	d009      	beq.n	8002624 <OV5640_SetPixelFormat+0x34>
      (PixelFormat != OV5640_RGB888) && (PixelFormat != OV5640_Y8) &&
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	2b07      	cmp	r3, #7
 8002614:	d006      	beq.n	8002624 <OV5640_SetPixelFormat+0x34>
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	2b08      	cmp	r3, #8
 800261a:	d003      	beq.n	8002624 <OV5640_SetPixelFormat+0x34>
      (PixelFormat != OV5640_JPEG))
  {
    /* Pixel format not supported */
    ret = OV5640_ERROR;
 800261c:	f04f 33ff 	mov.w	r3, #4294967295
 8002620:	617b      	str	r3, [r7, #20]
 8002622:	e16a      	b.n	80028fa <OV5640_SetPixelFormat+0x30a>
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	3b01      	subs	r3, #1
 8002628:	2b07      	cmp	r3, #7
 800262a:	f200 80c3 	bhi.w	80027b4 <OV5640_SetPixelFormat+0x1c4>
 800262e:	a201      	add	r2, pc, #4	; (adr r2, 8002634 <OV5640_SetPixelFormat+0x44>)
 8002630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002634:	080026ad 	.word	0x080026ad
 8002638:	08002655 	.word	0x08002655
 800263c:	080027b5 	.word	0x080027b5
 8002640:	080027b5 	.word	0x080027b5
 8002644:	080027b5 	.word	0x080027b5
 8002648:	080027b5 	.word	0x080027b5
 800264c:	08002705 	.word	0x08002705
 8002650:	0800275d 	.word	0x0800275d
  {
    /* Set specific parameters for each PixelFormat */
    switch (PixelFormat)
    {
      case OV5640_YUV422:
        for (index = 0; index < (sizeof(OV5640_PF_YUV422) / 4U); index++)
 8002654:	2300      	movs	r3, #0
 8002656:	613b      	str	r3, [r7, #16]
 8002658:	e024      	b.n	80026a4 <OV5640_SetPixelFormat+0xb4>
        {
          if (ret != OV5640_ERROR)
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002660:	d01d      	beq.n	800269e <OV5640_SetPixelFormat+0xae>
          {
            tmp = (uint8_t)OV5640_PF_YUV422[index][1];
 8002662:	4aa8      	ldr	r2, [pc, #672]	; (8002904 <OV5640_SetPixelFormat+0x314>)
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	4413      	add	r3, r2
 800266a:	885b      	ldrh	r3, [r3, #2]
 800266c:	b2db      	uxtb	r3, r3
 800266e:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_YUV422[index][0], &tmp, 1) != OV5640_OK)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	f103 0018 	add.w	r0, r3, #24
 8002676:	4aa3      	ldr	r2, [pc, #652]	; (8002904 <OV5640_SetPixelFormat+0x314>)
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 800267e:	f107 020f 	add.w	r2, r7, #15
 8002682:	2301      	movs	r3, #1
 8002684:	f000 fae7 	bl	8002c56 <ov5640_write_reg>
 8002688:	4603      	mov	r3, r0
 800268a:	2b00      	cmp	r3, #0
 800268c:	d003      	beq.n	8002696 <OV5640_SetPixelFormat+0xa6>
            {
              ret = OV5640_ERROR;
 800268e:	f04f 33ff 	mov.w	r3, #4294967295
 8002692:	617b      	str	r3, [r7, #20]
 8002694:	e003      	b.n	800269e <OV5640_SetPixelFormat+0xae>
            }
            else
            {
              (void)OV5640_Delay(pObj, 1);
 8002696:	2101      	movs	r1, #1
 8002698:	6878      	ldr	r0, [r7, #4]
 800269a:	f000 fa79 	bl	8002b90 <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_YUV422) / 4U); index++)
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	3301      	adds	r3, #1
 80026a2:	613b      	str	r3, [r7, #16]
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	2b01      	cmp	r3, #1
 80026a8:	d9d7      	bls.n	800265a <OV5640_SetPixelFormat+0x6a>
            }
          }
        }
        break;
 80026aa:	e0af      	b.n	800280c <OV5640_SetPixelFormat+0x21c>

      case OV5640_RGB888:
        for (index = 0; index < (sizeof(OV5640_PF_RGB888) / 4U); index++)
 80026ac:	2300      	movs	r3, #0
 80026ae:	613b      	str	r3, [r7, #16]
 80026b0:	e024      	b.n	80026fc <OV5640_SetPixelFormat+0x10c>
        {
          if (ret != OV5640_ERROR)
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026b8:	d01d      	beq.n	80026f6 <OV5640_SetPixelFormat+0x106>
          {
            tmp = (uint8_t)OV5640_PF_RGB888[index][1];
 80026ba:	4a93      	ldr	r2, [pc, #588]	; (8002908 <OV5640_SetPixelFormat+0x318>)
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	4413      	add	r3, r2
 80026c2:	885b      	ldrh	r3, [r3, #2]
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_RGB888[index][0], &tmp, 1) != OV5640_OK)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	f103 0018 	add.w	r0, r3, #24
 80026ce:	4a8e      	ldr	r2, [pc, #568]	; (8002908 <OV5640_SetPixelFormat+0x318>)
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 80026d6:	f107 020f 	add.w	r2, r7, #15
 80026da:	2301      	movs	r3, #1
 80026dc:	f000 fabb 	bl	8002c56 <ov5640_write_reg>
 80026e0:	4603      	mov	r3, r0
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d003      	beq.n	80026ee <OV5640_SetPixelFormat+0xfe>
            {
              ret = OV5640_ERROR;
 80026e6:	f04f 33ff 	mov.w	r3, #4294967295
 80026ea:	617b      	str	r3, [r7, #20]
 80026ec:	e003      	b.n	80026f6 <OV5640_SetPixelFormat+0x106>
            }
            else
            {
              (void)OV5640_Delay(pObj, 1);
 80026ee:	2101      	movs	r1, #1
 80026f0:	6878      	ldr	r0, [r7, #4]
 80026f2:	f000 fa4d 	bl	8002b90 <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_RGB888) / 4U); index++)
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	3301      	adds	r3, #1
 80026fa:	613b      	str	r3, [r7, #16]
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	2b01      	cmp	r3, #1
 8002700:	d9d7      	bls.n	80026b2 <OV5640_SetPixelFormat+0xc2>
            }
          }
        }
        break;
 8002702:	e083      	b.n	800280c <OV5640_SetPixelFormat+0x21c>

      case OV5640_Y8:
        for (index = 0; index < (sizeof(OV5640_PF_Y8) / 4U); index++)
 8002704:	2300      	movs	r3, #0
 8002706:	613b      	str	r3, [r7, #16]
 8002708:	e024      	b.n	8002754 <OV5640_SetPixelFormat+0x164>
        {
          if (ret != OV5640_ERROR)
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002710:	d01d      	beq.n	800274e <OV5640_SetPixelFormat+0x15e>
          {
            tmp = (uint8_t)OV5640_PF_Y8[index][1];
 8002712:	4a7e      	ldr	r2, [pc, #504]	; (800290c <OV5640_SetPixelFormat+0x31c>)
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	009b      	lsls	r3, r3, #2
 8002718:	4413      	add	r3, r2
 800271a:	885b      	ldrh	r3, [r3, #2]
 800271c:	b2db      	uxtb	r3, r3
 800271e:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_Y8[index][0], &tmp, 1) != OV5640_OK)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	f103 0018 	add.w	r0, r3, #24
 8002726:	4a79      	ldr	r2, [pc, #484]	; (800290c <OV5640_SetPixelFormat+0x31c>)
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 800272e:	f107 020f 	add.w	r2, r7, #15
 8002732:	2301      	movs	r3, #1
 8002734:	f000 fa8f 	bl	8002c56 <ov5640_write_reg>
 8002738:	4603      	mov	r3, r0
 800273a:	2b00      	cmp	r3, #0
 800273c:	d003      	beq.n	8002746 <OV5640_SetPixelFormat+0x156>
            {
              ret = OV5640_ERROR;
 800273e:	f04f 33ff 	mov.w	r3, #4294967295
 8002742:	617b      	str	r3, [r7, #20]
 8002744:	e003      	b.n	800274e <OV5640_SetPixelFormat+0x15e>
            }
            else
            {
              (void)OV5640_Delay(pObj, 1);
 8002746:	2101      	movs	r1, #1
 8002748:	6878      	ldr	r0, [r7, #4]
 800274a:	f000 fa21 	bl	8002b90 <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_Y8) / 4U); index++)
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	3301      	adds	r3, #1
 8002752:	613b      	str	r3, [r7, #16]
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	2b01      	cmp	r3, #1
 8002758:	d9d7      	bls.n	800270a <OV5640_SetPixelFormat+0x11a>
            }
          }
        }
        break;
 800275a:	e057      	b.n	800280c <OV5640_SetPixelFormat+0x21c>

      case OV5640_JPEG:
        for (index = 0; index < (sizeof(OV5640_PF_JPEG) / 4U); index++)
 800275c:	2300      	movs	r3, #0
 800275e:	613b      	str	r3, [r7, #16]
 8002760:	e024      	b.n	80027ac <OV5640_SetPixelFormat+0x1bc>
        {
          if (ret != OV5640_ERROR)
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002768:	d01d      	beq.n	80027a6 <OV5640_SetPixelFormat+0x1b6>
          {
            tmp = (uint8_t)OV5640_PF_JPEG[index][1];
 800276a:	4a69      	ldr	r2, [pc, #420]	; (8002910 <OV5640_SetPixelFormat+0x320>)
 800276c:	693b      	ldr	r3, [r7, #16]
 800276e:	009b      	lsls	r3, r3, #2
 8002770:	4413      	add	r3, r2
 8002772:	885b      	ldrh	r3, [r3, #2]
 8002774:	b2db      	uxtb	r3, r3
 8002776:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_JPEG[index][0], &tmp, 1) != OV5640_OK)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	f103 0018 	add.w	r0, r3, #24
 800277e:	4a64      	ldr	r2, [pc, #400]	; (8002910 <OV5640_SetPixelFormat+0x320>)
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8002786:	f107 020f 	add.w	r2, r7, #15
 800278a:	2301      	movs	r3, #1
 800278c:	f000 fa63 	bl	8002c56 <ov5640_write_reg>
 8002790:	4603      	mov	r3, r0
 8002792:	2b00      	cmp	r3, #0
 8002794:	d003      	beq.n	800279e <OV5640_SetPixelFormat+0x1ae>
            {
              ret = OV5640_ERROR;
 8002796:	f04f 33ff 	mov.w	r3, #4294967295
 800279a:	617b      	str	r3, [r7, #20]
 800279c:	e003      	b.n	80027a6 <OV5640_SetPixelFormat+0x1b6>
            }
            else
            {
              (void)OV5640_Delay(pObj, 1);
 800279e:	2101      	movs	r1, #1
 80027a0:	6878      	ldr	r0, [r7, #4]
 80027a2:	f000 f9f5 	bl	8002b90 <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_JPEG) / 4U); index++)
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	3301      	adds	r3, #1
 80027aa:	613b      	str	r3, [r7, #16]
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	2b01      	cmp	r3, #1
 80027b0:	d9d7      	bls.n	8002762 <OV5640_SetPixelFormat+0x172>
            }
          }
        }
        break;
 80027b2:	e02b      	b.n	800280c <OV5640_SetPixelFormat+0x21c>

      case OV5640_RGB565:
      default:
        for (index = 0; index < (sizeof(OV5640_PF_RGB565) / 4U); index++)
 80027b4:	2300      	movs	r3, #0
 80027b6:	613b      	str	r3, [r7, #16]
 80027b8:	e024      	b.n	8002804 <OV5640_SetPixelFormat+0x214>
        {
          if (ret != OV5640_ERROR)
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027c0:	d01d      	beq.n	80027fe <OV5640_SetPixelFormat+0x20e>
          {
            tmp = (uint8_t)OV5640_PF_RGB565[index][1];
 80027c2:	4a54      	ldr	r2, [pc, #336]	; (8002914 <OV5640_SetPixelFormat+0x324>)
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	009b      	lsls	r3, r3, #2
 80027c8:	4413      	add	r3, r2
 80027ca:	885b      	ldrh	r3, [r3, #2]
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_RGB565[index][0], &tmp, 1) != OV5640_OK)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	f103 0018 	add.w	r0, r3, #24
 80027d6:	4a4f      	ldr	r2, [pc, #316]	; (8002914 <OV5640_SetPixelFormat+0x324>)
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 80027de:	f107 020f 	add.w	r2, r7, #15
 80027e2:	2301      	movs	r3, #1
 80027e4:	f000 fa37 	bl	8002c56 <ov5640_write_reg>
 80027e8:	4603      	mov	r3, r0
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d003      	beq.n	80027f6 <OV5640_SetPixelFormat+0x206>
            {
              ret = OV5640_ERROR;
 80027ee:	f04f 33ff 	mov.w	r3, #4294967295
 80027f2:	617b      	str	r3, [r7, #20]
 80027f4:	e003      	b.n	80027fe <OV5640_SetPixelFormat+0x20e>
            }
            else
            {
              (void)OV5640_Delay(pObj, 1);
 80027f6:	2101      	movs	r1, #1
 80027f8:	6878      	ldr	r0, [r7, #4]
 80027fa:	f000 f9c9 	bl	8002b90 <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_RGB565) / 4U); index++)
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	3301      	adds	r3, #1
 8002802:	613b      	str	r3, [r7, #16]
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	2b01      	cmp	r3, #1
 8002808:	d9d7      	bls.n	80027ba <OV5640_SetPixelFormat+0x1ca>
            }
          }
        }
        break;
 800280a:	bf00      	nop

    }

    if (PixelFormat == OV5640_JPEG)
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	2b08      	cmp	r3, #8
 8002810:	d173      	bne.n	80028fa <OV5640_SetPixelFormat+0x30a>
    {
      if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp, 1) != OV5640_OK)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	f103 0018 	add.w	r0, r3, #24
 8002818:	f107 020f 	add.w	r2, r7, #15
 800281c:	2301      	movs	r3, #1
 800281e:	f643 0121 	movw	r1, #14369	; 0x3821
 8002822:	f000 fa01 	bl	8002c28 <ov5640_read_reg>
 8002826:	4603      	mov	r3, r0
 8002828:	2b00      	cmp	r3, #0
 800282a:	d003      	beq.n	8002834 <OV5640_SetPixelFormat+0x244>
      {
        ret = OV5640_ERROR;
 800282c:	f04f 33ff 	mov.w	r3, #4294967295
 8002830:	617b      	str	r3, [r7, #20]
 8002832:	e062      	b.n	80028fa <OV5640_SetPixelFormat+0x30a>
      }
      else
      {
        tmp |= (1 << 5);
 8002834:	7bfb      	ldrb	r3, [r7, #15]
 8002836:	f043 0320 	orr.w	r3, r3, #32
 800283a:	b2db      	uxtb	r3, r3
 800283c:	73fb      	strb	r3, [r7, #15]
        if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp, 1) != OV5640_OK)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	f103 0018 	add.w	r0, r3, #24
 8002844:	f107 020f 	add.w	r2, r7, #15
 8002848:	2301      	movs	r3, #1
 800284a:	f643 0121 	movw	r1, #14369	; 0x3821
 800284e:	f000 fa02 	bl	8002c56 <ov5640_write_reg>
 8002852:	4603      	mov	r3, r0
 8002854:	2b00      	cmp	r3, #0
 8002856:	d003      	beq.n	8002860 <OV5640_SetPixelFormat+0x270>
        {
          ret = OV5640_ERROR;
 8002858:	f04f 33ff 	mov.w	r3, #4294967295
 800285c:	617b      	str	r3, [r7, #20]
 800285e:	e04c      	b.n	80028fa <OV5640_SetPixelFormat+0x30a>
        }
        else
        {
          if (ov5640_read_reg(&pObj->Ctx, OV5640_SYSREM_RESET02, &tmp, 1) != OV5640_OK)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	f103 0018 	add.w	r0, r3, #24
 8002866:	f107 020f 	add.w	r2, r7, #15
 800286a:	2301      	movs	r3, #1
 800286c:	f243 0102 	movw	r1, #12290	; 0x3002
 8002870:	f000 f9da 	bl	8002c28 <ov5640_read_reg>
 8002874:	4603      	mov	r3, r0
 8002876:	2b00      	cmp	r3, #0
 8002878:	d003      	beq.n	8002882 <OV5640_SetPixelFormat+0x292>
          {
            ret = OV5640_ERROR;
 800287a:	f04f 33ff 	mov.w	r3, #4294967295
 800287e:	617b      	str	r3, [r7, #20]
 8002880:	e03b      	b.n	80028fa <OV5640_SetPixelFormat+0x30a>
          }
          else
          {
            tmp &= ~((1 << 4) | (1 << 3) | (1 << 2));
 8002882:	7bfb      	ldrb	r3, [r7, #15]
 8002884:	f023 031c 	bic.w	r3, r3, #28
 8002888:	b2db      	uxtb	r3, r3
 800288a:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_SYSREM_RESET02, &tmp, 1) != OV5640_OK)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	f103 0018 	add.w	r0, r3, #24
 8002892:	f107 020f 	add.w	r2, r7, #15
 8002896:	2301      	movs	r3, #1
 8002898:	f243 0102 	movw	r1, #12290	; 0x3002
 800289c:	f000 f9db 	bl	8002c56 <ov5640_write_reg>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d003      	beq.n	80028ae <OV5640_SetPixelFormat+0x2be>
            {
              ret = OV5640_ERROR;
 80028a6:	f04f 33ff 	mov.w	r3, #4294967295
 80028aa:	617b      	str	r3, [r7, #20]
 80028ac:	e025      	b.n	80028fa <OV5640_SetPixelFormat+0x30a>
            }
            else
            {
              if (ov5640_read_reg(&pObj->Ctx, OV5640_CLOCK_ENABLE02, &tmp, 1) != OV5640_OK)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	f103 0018 	add.w	r0, r3, #24
 80028b4:	f107 020f 	add.w	r2, r7, #15
 80028b8:	2301      	movs	r3, #1
 80028ba:	f243 0106 	movw	r1, #12294	; 0x3006
 80028be:	f000 f9b3 	bl	8002c28 <ov5640_read_reg>
 80028c2:	4603      	mov	r3, r0
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d003      	beq.n	80028d0 <OV5640_SetPixelFormat+0x2e0>
              {
                ret = OV5640_ERROR;
 80028c8:	f04f 33ff 	mov.w	r3, #4294967295
 80028cc:	617b      	str	r3, [r7, #20]
 80028ce:	e014      	b.n	80028fa <OV5640_SetPixelFormat+0x30a>
              }
              else
              {
                tmp |= ((1 << 5) | (1 << 3));
 80028d0:	7bfb      	ldrb	r3, [r7, #15]
 80028d2:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 80028d6:	b2db      	uxtb	r3, r3
 80028d8:	73fb      	strb	r3, [r7, #15]
                if (ov5640_write_reg(&pObj->Ctx, OV5640_CLOCK_ENABLE02, &tmp, 1) != OV5640_OK)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	f103 0018 	add.w	r0, r3, #24
 80028e0:	f107 020f 	add.w	r2, r7, #15
 80028e4:	2301      	movs	r3, #1
 80028e6:	f243 0106 	movw	r1, #12294	; 0x3006
 80028ea:	f000 f9b4 	bl	8002c56 <ov5640_write_reg>
 80028ee:	4603      	mov	r3, r0
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d002      	beq.n	80028fa <OV5640_SetPixelFormat+0x30a>
                {
                  ret = OV5640_ERROR;
 80028f4:	f04f 33ff 	mov.w	r3, #4294967295
 80028f8:	617b      	str	r3, [r7, #20]
          }
        }
      }
    }
  }
  return ret;
 80028fa:	697b      	ldr	r3, [r7, #20]
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	3718      	adds	r7, #24
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}
 8002904:	0801c990 	.word	0x0801c990
 8002908:	0801c998 	.word	0x0801c998
 800290c:	0801c9a0 	.word	0x0801c9a0
 8002910:	0801c9a8 	.word	0x0801c9a8
 8002914:	0801c9b0 	.word	0x0801c9b0

08002918 <OV5640_SetResolution>:
  * @param  pObj  pointer to component object
  * @param  Resolution  Camera resolution
  * @retval Component status
  */
int32_t OV5640_SetResolution(OV5640_Object_t *pObj, uint32_t Resolution)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b086      	sub	sp, #24
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
 8002920:	6039      	str	r1, [r7, #0]
  int32_t ret = OV5640_OK;
 8002922:	2300      	movs	r3, #0
 8002924:	617b      	str	r3, [r7, #20]
    {OV5640_TIMING_DVPVO_HIGH, 0x00},
    {OV5640_TIMING_DVPVO_LOW, 0x78},
  };

  /* Check if resolution is supported */
  if (Resolution > OV5640_R800x480)
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	2b04      	cmp	r3, #4
 800292a:	d903      	bls.n	8002934 <OV5640_SetResolution+0x1c>
  {
    ret = OV5640_ERROR;
 800292c:	f04f 33ff 	mov.w	r3, #4294967295
 8002930:	617b      	str	r3, [r7, #20]
 8002932:	e0d8      	b.n	8002ae6 <OV5640_SetResolution+0x1ce>
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	2b04      	cmp	r3, #4
 8002938:	f200 80d1 	bhi.w	8002ade <OV5640_SetResolution+0x1c6>
 800293c:	a201      	add	r2, pc, #4	; (adr r2, 8002944 <OV5640_SetResolution+0x2c>)
 800293e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002942:	bf00      	nop
 8002944:	08002959 	.word	0x08002959
 8002948:	080029a7 	.word	0x080029a7
 800294c:	080029f5 	.word	0x080029f5
 8002950:	08002a43 	.word	0x08002a43
 8002954:	08002a91 	.word	0x08002a91
  {
    /* Initialize OV5640 */
    switch (Resolution)
    {
      case OV5640_R160x120:
        for (index = 0; index < (sizeof(OV5640_QQVGA) / 4U); index++)
 8002958:	2300      	movs	r3, #0
 800295a:	613b      	str	r3, [r7, #16]
 800295c:	e01f      	b.n	800299e <OV5640_SetResolution+0x86>
        {
          if (ret != OV5640_ERROR)
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002964:	d018      	beq.n	8002998 <OV5640_SetResolution+0x80>
          {
            tmp = (uint8_t)OV5640_QQVGA[index][1];
 8002966:	4a62      	ldr	r2, [pc, #392]	; (8002af0 <OV5640_SetResolution+0x1d8>)
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	009b      	lsls	r3, r3, #2
 800296c:	4413      	add	r3, r2
 800296e:	885b      	ldrh	r3, [r3, #2]
 8002970:	b2db      	uxtb	r3, r3
 8002972:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_QQVGA[index][0], &tmp, 1) != OV5640_OK)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	f103 0018 	add.w	r0, r3, #24
 800297a:	4a5d      	ldr	r2, [pc, #372]	; (8002af0 <OV5640_SetResolution+0x1d8>)
 800297c:	693b      	ldr	r3, [r7, #16]
 800297e:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8002982:	f107 020f 	add.w	r2, r7, #15
 8002986:	2301      	movs	r3, #1
 8002988:	f000 f965 	bl	8002c56 <ov5640_write_reg>
 800298c:	4603      	mov	r3, r0
 800298e:	2b00      	cmp	r3, #0
 8002990:	d002      	beq.n	8002998 <OV5640_SetResolution+0x80>
            {
              ret = OV5640_ERROR;
 8002992:	f04f 33ff 	mov.w	r3, #4294967295
 8002996:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_QQVGA) / 4U); index++)
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	3301      	adds	r3, #1
 800299c:	613b      	str	r3, [r7, #16]
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	2b03      	cmp	r3, #3
 80029a2:	d9dc      	bls.n	800295e <OV5640_SetResolution+0x46>
            }
          }
        }
        break;
 80029a4:	e09f      	b.n	8002ae6 <OV5640_SetResolution+0x1ce>
      case OV5640_R320x240:
        for (index = 0; index < (sizeof(OV5640_QVGA) / 4U); index++)
 80029a6:	2300      	movs	r3, #0
 80029a8:	613b      	str	r3, [r7, #16]
 80029aa:	e01f      	b.n	80029ec <OV5640_SetResolution+0xd4>
        {
          if (ret != OV5640_ERROR)
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029b2:	d018      	beq.n	80029e6 <OV5640_SetResolution+0xce>
          {
            tmp = (uint8_t)OV5640_QVGA[index][1];
 80029b4:	4a4f      	ldr	r2, [pc, #316]	; (8002af4 <OV5640_SetResolution+0x1dc>)
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	009b      	lsls	r3, r3, #2
 80029ba:	4413      	add	r3, r2
 80029bc:	885b      	ldrh	r3, [r3, #2]
 80029be:	b2db      	uxtb	r3, r3
 80029c0:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_QVGA[index][0], &tmp, 1) != OV5640_OK)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	f103 0018 	add.w	r0, r3, #24
 80029c8:	4a4a      	ldr	r2, [pc, #296]	; (8002af4 <OV5640_SetResolution+0x1dc>)
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 80029d0:	f107 020f 	add.w	r2, r7, #15
 80029d4:	2301      	movs	r3, #1
 80029d6:	f000 f93e 	bl	8002c56 <ov5640_write_reg>
 80029da:	4603      	mov	r3, r0
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d002      	beq.n	80029e6 <OV5640_SetResolution+0xce>
            {
              ret = OV5640_ERROR;
 80029e0:	f04f 33ff 	mov.w	r3, #4294967295
 80029e4:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_QVGA) / 4U); index++)
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	3301      	adds	r3, #1
 80029ea:	613b      	str	r3, [r7, #16]
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	2b03      	cmp	r3, #3
 80029f0:	d9dc      	bls.n	80029ac <OV5640_SetResolution+0x94>
            }
          }
        }
        break;
 80029f2:	e078      	b.n	8002ae6 <OV5640_SetResolution+0x1ce>
      case OV5640_R480x272:
        for (index = 0; index < (sizeof(OV5640_480x272) / 4U); index++)
 80029f4:	2300      	movs	r3, #0
 80029f6:	613b      	str	r3, [r7, #16]
 80029f8:	e01f      	b.n	8002a3a <OV5640_SetResolution+0x122>
        {
          if (ret != OV5640_ERROR)
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a00:	d018      	beq.n	8002a34 <OV5640_SetResolution+0x11c>
          {
            tmp = (uint8_t)OV5640_480x272[index][1];
 8002a02:	4a3d      	ldr	r2, [pc, #244]	; (8002af8 <OV5640_SetResolution+0x1e0>)
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	009b      	lsls	r3, r3, #2
 8002a08:	4413      	add	r3, r2
 8002a0a:	885b      	ldrh	r3, [r3, #2]
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_480x272[index][0], &tmp, 1) != OV5640_OK)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	f103 0018 	add.w	r0, r3, #24
 8002a16:	4a38      	ldr	r2, [pc, #224]	; (8002af8 <OV5640_SetResolution+0x1e0>)
 8002a18:	693b      	ldr	r3, [r7, #16]
 8002a1a:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8002a1e:	f107 020f 	add.w	r2, r7, #15
 8002a22:	2301      	movs	r3, #1
 8002a24:	f000 f917 	bl	8002c56 <ov5640_write_reg>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d002      	beq.n	8002a34 <OV5640_SetResolution+0x11c>
            {
              ret = OV5640_ERROR;
 8002a2e:	f04f 33ff 	mov.w	r3, #4294967295
 8002a32:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_480x272) / 4U); index++)
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	3301      	adds	r3, #1
 8002a38:	613b      	str	r3, [r7, #16]
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	2b03      	cmp	r3, #3
 8002a3e:	d9dc      	bls.n	80029fa <OV5640_SetResolution+0xe2>
            }
          }
        }
        break;
 8002a40:	e051      	b.n	8002ae6 <OV5640_SetResolution+0x1ce>
      case OV5640_R640x480:
        for (index = 0; index < (sizeof(OV5640_VGA) / 4U); index++)
 8002a42:	2300      	movs	r3, #0
 8002a44:	613b      	str	r3, [r7, #16]
 8002a46:	e01f      	b.n	8002a88 <OV5640_SetResolution+0x170>
        {
          if (ret != OV5640_ERROR)
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a4e:	d018      	beq.n	8002a82 <OV5640_SetResolution+0x16a>
          {
            tmp = (uint8_t)OV5640_VGA[index][1];
 8002a50:	4a2a      	ldr	r2, [pc, #168]	; (8002afc <OV5640_SetResolution+0x1e4>)
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	009b      	lsls	r3, r3, #2
 8002a56:	4413      	add	r3, r2
 8002a58:	885b      	ldrh	r3, [r3, #2]
 8002a5a:	b2db      	uxtb	r3, r3
 8002a5c:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_VGA[index][0], &tmp, 1) != OV5640_OK)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	f103 0018 	add.w	r0, r3, #24
 8002a64:	4a25      	ldr	r2, [pc, #148]	; (8002afc <OV5640_SetResolution+0x1e4>)
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8002a6c:	f107 020f 	add.w	r2, r7, #15
 8002a70:	2301      	movs	r3, #1
 8002a72:	f000 f8f0 	bl	8002c56 <ov5640_write_reg>
 8002a76:	4603      	mov	r3, r0
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d002      	beq.n	8002a82 <OV5640_SetResolution+0x16a>
            {
              ret = OV5640_ERROR;
 8002a7c:	f04f 33ff 	mov.w	r3, #4294967295
 8002a80:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_VGA) / 4U); index++)
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	3301      	adds	r3, #1
 8002a86:	613b      	str	r3, [r7, #16]
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	2b03      	cmp	r3, #3
 8002a8c:	d9dc      	bls.n	8002a48 <OV5640_SetResolution+0x130>
            }
          }
        }
        break;
 8002a8e:	e02a      	b.n	8002ae6 <OV5640_SetResolution+0x1ce>
      case OV5640_R800x480:
        for (index = 0; index < (sizeof(OV5640_WVGA) / 4U); index++)
 8002a90:	2300      	movs	r3, #0
 8002a92:	613b      	str	r3, [r7, #16]
 8002a94:	e01f      	b.n	8002ad6 <OV5640_SetResolution+0x1be>
        {
          if (ret != OV5640_ERROR)
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a9c:	d018      	beq.n	8002ad0 <OV5640_SetResolution+0x1b8>
          {
            tmp = (uint8_t)OV5640_WVGA[index][1];
 8002a9e:	4a18      	ldr	r2, [pc, #96]	; (8002b00 <OV5640_SetResolution+0x1e8>)
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	009b      	lsls	r3, r3, #2
 8002aa4:	4413      	add	r3, r2
 8002aa6:	885b      	ldrh	r3, [r3, #2]
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_WVGA[index][0], &tmp, 1) != OV5640_OK)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	f103 0018 	add.w	r0, r3, #24
 8002ab2:	4a13      	ldr	r2, [pc, #76]	; (8002b00 <OV5640_SetResolution+0x1e8>)
 8002ab4:	693b      	ldr	r3, [r7, #16]
 8002ab6:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8002aba:	f107 020f 	add.w	r2, r7, #15
 8002abe:	2301      	movs	r3, #1
 8002ac0:	f000 f8c9 	bl	8002c56 <ov5640_write_reg>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d002      	beq.n	8002ad0 <OV5640_SetResolution+0x1b8>
            {
              ret = OV5640_ERROR;
 8002aca:	f04f 33ff 	mov.w	r3, #4294967295
 8002ace:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_WVGA) / 4U); index++)
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	3301      	adds	r3, #1
 8002ad4:	613b      	str	r3, [r7, #16]
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	2b03      	cmp	r3, #3
 8002ada:	d9dc      	bls.n	8002a96 <OV5640_SetResolution+0x17e>
            }
          }
        }
        break;
 8002adc:	e003      	b.n	8002ae6 <OV5640_SetResolution+0x1ce>
      default:
        ret = OV5640_ERROR;
 8002ade:	f04f 33ff 	mov.w	r3, #4294967295
 8002ae2:	617b      	str	r3, [r7, #20]
        break;
 8002ae4:	bf00      	nop
    }
  }

  return ret;
 8002ae6:	697b      	ldr	r3, [r7, #20]
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	3718      	adds	r7, #24
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}
 8002af0:	0801c9b8 	.word	0x0801c9b8
 8002af4:	0801c9c8 	.word	0x0801c9c8
 8002af8:	0801c9d8 	.word	0x0801c9d8
 8002afc:	0801c9e8 	.word	0x0801c9e8
 8002b00:	0801c9f8 	.word	0x0801c9f8

08002b04 <OV5640_SetPolarities>:
  * @param  VsyncPolarity Polarity of the Vsync
  * @retval Component status
  */
int32_t OV5640_SetPolarities(OV5640_Object_t *pObj, uint32_t PclkPolarity, uint32_t HrefPolarity,
                             uint32_t VsyncPolarity)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b086      	sub	sp, #24
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	60f8      	str	r0, [r7, #12]
 8002b0c:	60b9      	str	r1, [r7, #8]
 8002b0e:	607a      	str	r2, [r7, #4]
 8002b10:	603b      	str	r3, [r7, #0]
  uint8_t tmp;
  int32_t ret = OV5640_OK;
 8002b12:	2300      	movs	r3, #0
 8002b14:	617b      	str	r3, [r7, #20]

  if ((pObj == NULL) || ((PclkPolarity != OV5640_POLARITY_PCLK_LOW) && (PclkPolarity != OV5640_POLARITY_PCLK_HIGH)) ||
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d011      	beq.n	8002b40 <OV5640_SetPolarities+0x3c>
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d002      	beq.n	8002b28 <OV5640_SetPolarities+0x24>
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	d10b      	bne.n	8002b40 <OV5640_SetPolarities+0x3c>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d002      	beq.n	8002b34 <OV5640_SetPolarities+0x30>
      ((HrefPolarity != OV5640_POLARITY_HREF_LOW) && (HrefPolarity != OV5640_POLARITY_HREF_HIGH)) ||
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d105      	bne.n	8002b40 <OV5640_SetPolarities+0x3c>
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d006      	beq.n	8002b48 <OV5640_SetPolarities+0x44>
      ((VsyncPolarity != OV5640_POLARITY_VSYNC_LOW) && (VsyncPolarity != OV5640_POLARITY_VSYNC_HIGH)))
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d003      	beq.n	8002b48 <OV5640_SetPolarities+0x44>
  {
    ret = OV5640_ERROR;
 8002b40:	f04f 33ff 	mov.w	r3, #4294967295
 8002b44:	617b      	str	r3, [r7, #20]
 8002b46:	e01e      	b.n	8002b86 <OV5640_SetPolarities+0x82>
  }
  else
  {
    tmp = (uint8_t)(PclkPolarity << 5U) | (HrefPolarity << 1U) | VsyncPolarity;
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	b2db      	uxtb	r3, r3
 8002b4c:	015b      	lsls	r3, r3, #5
 8002b4e:	b2da      	uxtb	r2, r3
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	b2db      	uxtb	r3, r3
 8002b54:	005b      	lsls	r3, r3, #1
 8002b56:	b2db      	uxtb	r3, r3
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	b2da      	uxtb	r2, r3
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	b2db      	uxtb	r3, r3
 8002b60:	4313      	orrs	r3, r2
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	74fb      	strb	r3, [r7, #19]

    if (ov5640_write_reg(&pObj->Ctx, OV5640_POLARITY_CTRL, &tmp, 1) != OV5640_OK)
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	f103 0018 	add.w	r0, r3, #24
 8002b6c:	f107 0213 	add.w	r2, r7, #19
 8002b70:	2301      	movs	r3, #1
 8002b72:	f244 7140 	movw	r1, #18240	; 0x4740
 8002b76:	f000 f86e 	bl	8002c56 <ov5640_write_reg>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d002      	beq.n	8002b86 <OV5640_SetPolarities+0x82>
    {
      ret = OV5640_ERROR;
 8002b80:	f04f 33ff 	mov.w	r3, #4294967295
 8002b84:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8002b86:	697b      	ldr	r3, [r7, #20]
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	3718      	adds	r7, #24
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}

08002b90 <OV5640_Delay>:
  * @param pObj   pointer to component object
  * @param Delay  specifies the delay time length, in milliseconds
  * @retval OV5640_OK
  */
static int32_t OV5640_Delay(OV5640_Object_t *pObj, uint32_t Delay)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b084      	sub	sp, #16
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
 8002b98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  tickstart = pObj->IO.GetTick();
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	695b      	ldr	r3, [r3, #20]
 8002b9e:	4798      	blx	r3
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	60fb      	str	r3, [r7, #12]
  while ((pObj->IO.GetTick() - tickstart) < Delay)
 8002ba4:	bf00      	nop
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	695b      	ldr	r3, [r3, #20]
 8002baa:	4798      	blx	r3
 8002bac:	4603      	mov	r3, r0
 8002bae:	461a      	mov	r2, r3
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	1ad3      	subs	r3, r2, r3
 8002bb4:	683a      	ldr	r2, [r7, #0]
 8002bb6:	429a      	cmp	r2, r3
 8002bb8:	d8f5      	bhi.n	8002ba6 <OV5640_Delay+0x16>
  {
  }
  return OV5640_OK;
 8002bba:	2300      	movs	r3, #0
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	3710      	adds	r7, #16
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}

08002bc4 <OV5640_ReadRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OV5640_ReadRegWrap(void *handle, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8002bc4:	b590      	push	{r4, r7, lr}
 8002bc6:	b087      	sub	sp, #28
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	60f8      	str	r0, [r7, #12]
 8002bcc:	607a      	str	r2, [r7, #4]
 8002bce:	461a      	mov	r2, r3
 8002bd0:	460b      	mov	r3, r1
 8002bd2:	817b      	strh	r3, [r7, #10]
 8002bd4:	4613      	mov	r3, r2
 8002bd6:	813b      	strh	r3, [r7, #8]
  OV5640_Object_t *pObj = (OV5640_Object_t *)handle;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	691c      	ldr	r4, [r3, #16]
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	8918      	ldrh	r0, [r3, #8]
 8002be4:	893b      	ldrh	r3, [r7, #8]
 8002be6:	8979      	ldrh	r1, [r7, #10]
 8002be8:	687a      	ldr	r2, [r7, #4]
 8002bea:	47a0      	blx	r4
 8002bec:	4603      	mov	r3, r0
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	371c      	adds	r7, #28
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd90      	pop	{r4, r7, pc}

08002bf6 <OV5640_WriteRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OV5640_WriteRegWrap(void *handle, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8002bf6:	b590      	push	{r4, r7, lr}
 8002bf8:	b087      	sub	sp, #28
 8002bfa:	af00      	add	r7, sp, #0
 8002bfc:	60f8      	str	r0, [r7, #12]
 8002bfe:	607a      	str	r2, [r7, #4]
 8002c00:	461a      	mov	r2, r3
 8002c02:	460b      	mov	r3, r1
 8002c04:	817b      	strh	r3, [r7, #10]
 8002c06:	4613      	mov	r3, r2
 8002c08:	813b      	strh	r3, [r7, #8]
  OV5640_Object_t *pObj = (OV5640_Object_t *)handle;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	68dc      	ldr	r4, [r3, #12]
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	8918      	ldrh	r0, [r3, #8]
 8002c16:	893b      	ldrh	r3, [r7, #8]
 8002c18:	8979      	ldrh	r1, [r7, #10]
 8002c1a:	687a      	ldr	r2, [r7, #4]
 8002c1c:	47a0      	blx	r4
 8002c1e:	4603      	mov	r3, r0
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	371c      	adds	r7, #28
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd90      	pop	{r4, r7, pc}

08002c28 <ov5640_read_reg>:
  * @param  pdata Pointer to data buffer
  * @param  length Number of data to read
  * @retval Component status
  */
int32_t ov5640_read_reg(ov5640_ctx_t *ctx, uint16_t reg, uint8_t *pdata, uint16_t length)
{
 8002c28:	b590      	push	{r4, r7, lr}
 8002c2a:	b085      	sub	sp, #20
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	60f8      	str	r0, [r7, #12]
 8002c30:	607a      	str	r2, [r7, #4]
 8002c32:	461a      	mov	r2, r3
 8002c34:	460b      	mov	r3, r1
 8002c36:	817b      	strh	r3, [r7, #10]
 8002c38:	4613      	mov	r3, r2
 8002c3a:	813b      	strh	r3, [r7, #8]
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	685c      	ldr	r4, [r3, #4]
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	6898      	ldr	r0, [r3, #8]
 8002c44:	893b      	ldrh	r3, [r7, #8]
 8002c46:	8979      	ldrh	r1, [r7, #10]
 8002c48:	687a      	ldr	r2, [r7, #4]
 8002c4a:	47a0      	blx	r4
 8002c4c:	4603      	mov	r3, r0
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	3714      	adds	r7, #20
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd90      	pop	{r4, r7, pc}

08002c56 <ov5640_write_reg>:
  * @param  pdata Pointer to data buffer
  * @param  length Number of data to write
  * @retval Component status
  */
int32_t ov5640_write_reg(ov5640_ctx_t *ctx, uint16_t reg, uint8_t *data, uint16_t length)
{
 8002c56:	b590      	push	{r4, r7, lr}
 8002c58:	b085      	sub	sp, #20
 8002c5a:	af00      	add	r7, sp, #0
 8002c5c:	60f8      	str	r0, [r7, #12]
 8002c5e:	607a      	str	r2, [r7, #4]
 8002c60:	461a      	mov	r2, r3
 8002c62:	460b      	mov	r3, r1
 8002c64:	817b      	strh	r3, [r7, #10]
 8002c66:	4613      	mov	r3, r2
 8002c68:	813b      	strh	r3, [r7, #8]
  return ctx->WriteReg(ctx->handle, reg, data, length);
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681c      	ldr	r4, [r3, #0]
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	6898      	ldr	r0, [r3, #8]
 8002c72:	893b      	ldrh	r3, [r7, #8]
 8002c74:	8979      	ldrh	r1, [r7, #10]
 8002c76:	687a      	ldr	r2, [r7, #4]
 8002c78:	47a0      	blx	r4
 8002c7a:	4603      	mov	r3, r0
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	3714      	adds	r7, #20
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd90      	pop	{r4, r7, pc}

08002c84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b083      	sub	sp, #12
 8002c88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002c8a:	4b0f      	ldr	r3, [pc, #60]	; (8002cc8 <HAL_MspInit+0x44>)
 8002c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8e:	4a0e      	ldr	r2, [pc, #56]	; (8002cc8 <HAL_MspInit+0x44>)
 8002c90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c94:	6413      	str	r3, [r2, #64]	; 0x40
 8002c96:	4b0c      	ldr	r3, [pc, #48]	; (8002cc8 <HAL_MspInit+0x44>)
 8002c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c9e:	607b      	str	r3, [r7, #4]
 8002ca0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ca2:	4b09      	ldr	r3, [pc, #36]	; (8002cc8 <HAL_MspInit+0x44>)
 8002ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ca6:	4a08      	ldr	r2, [pc, #32]	; (8002cc8 <HAL_MspInit+0x44>)
 8002ca8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002cac:	6453      	str	r3, [r2, #68]	; 0x44
 8002cae:	4b06      	ldr	r3, [pc, #24]	; (8002cc8 <HAL_MspInit+0x44>)
 8002cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cb6:	603b      	str	r3, [r7, #0]
 8002cb8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002cba:	bf00      	nop
 8002cbc:	370c      	adds	r7, #12
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr
 8002cc6:	bf00      	nop
 8002cc8:	40023800 	.word	0x40023800

08002ccc <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b08e      	sub	sp, #56	; 0x38
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002cd8:	2200      	movs	r2, #0
 8002cda:	601a      	str	r2, [r3, #0]
 8002cdc:	605a      	str	r2, [r3, #4]
 8002cde:	609a      	str	r2, [r3, #8]
 8002ce0:	60da      	str	r2, [r3, #12]
 8002ce2:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a50      	ldr	r2, [pc, #320]	; (8002e2c <HAL_DCMI_MspInit+0x160>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	f040 809a 	bne.w	8002e24 <HAL_DCMI_MspInit+0x158>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8002cf0:	4b4f      	ldr	r3, [pc, #316]	; (8002e30 <HAL_DCMI_MspInit+0x164>)
 8002cf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cf4:	4a4e      	ldr	r2, [pc, #312]	; (8002e30 <HAL_DCMI_MspInit+0x164>)
 8002cf6:	f043 0301 	orr.w	r3, r3, #1
 8002cfa:	6353      	str	r3, [r2, #52]	; 0x34
 8002cfc:	4b4c      	ldr	r3, [pc, #304]	; (8002e30 <HAL_DCMI_MspInit+0x164>)
 8002cfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d00:	f003 0301 	and.w	r3, r3, #1
 8002d04:	623b      	str	r3, [r7, #32]
 8002d06:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002d08:	4b49      	ldr	r3, [pc, #292]	; (8002e30 <HAL_DCMI_MspInit+0x164>)
 8002d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d0c:	4a48      	ldr	r2, [pc, #288]	; (8002e30 <HAL_DCMI_MspInit+0x164>)
 8002d0e:	f043 0310 	orr.w	r3, r3, #16
 8002d12:	6313      	str	r3, [r2, #48]	; 0x30
 8002d14:	4b46      	ldr	r3, [pc, #280]	; (8002e30 <HAL_DCMI_MspInit+0x164>)
 8002d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d18:	f003 0310 	and.w	r3, r3, #16
 8002d1c:	61fb      	str	r3, [r7, #28]
 8002d1e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d20:	4b43      	ldr	r3, [pc, #268]	; (8002e30 <HAL_DCMI_MspInit+0x164>)
 8002d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d24:	4a42      	ldr	r2, [pc, #264]	; (8002e30 <HAL_DCMI_MspInit+0x164>)
 8002d26:	f043 0308 	orr.w	r3, r3, #8
 8002d2a:	6313      	str	r3, [r2, #48]	; 0x30
 8002d2c:	4b40      	ldr	r3, [pc, #256]	; (8002e30 <HAL_DCMI_MspInit+0x164>)
 8002d2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d30:	f003 0308 	and.w	r3, r3, #8
 8002d34:	61bb      	str	r3, [r7, #24]
 8002d36:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002d38:	4b3d      	ldr	r3, [pc, #244]	; (8002e30 <HAL_DCMI_MspInit+0x164>)
 8002d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d3c:	4a3c      	ldr	r2, [pc, #240]	; (8002e30 <HAL_DCMI_MspInit+0x164>)
 8002d3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d42:	6313      	str	r3, [r2, #48]	; 0x30
 8002d44:	4b3a      	ldr	r3, [pc, #232]	; (8002e30 <HAL_DCMI_MspInit+0x164>)
 8002d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d4c:	617b      	str	r3, [r7, #20]
 8002d4e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002d50:	4b37      	ldr	r3, [pc, #220]	; (8002e30 <HAL_DCMI_MspInit+0x164>)
 8002d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d54:	4a36      	ldr	r2, [pc, #216]	; (8002e30 <HAL_DCMI_MspInit+0x164>)
 8002d56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d5a:	6313      	str	r3, [r2, #48]	; 0x30
 8002d5c:	4b34      	ldr	r3, [pc, #208]	; (8002e30 <HAL_DCMI_MspInit+0x164>)
 8002d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d64:	613b      	str	r3, [r7, #16]
 8002d66:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d68:	4b31      	ldr	r3, [pc, #196]	; (8002e30 <HAL_DCMI_MspInit+0x164>)
 8002d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d6c:	4a30      	ldr	r2, [pc, #192]	; (8002e30 <HAL_DCMI_MspInit+0x164>)
 8002d6e:	f043 0301 	orr.w	r3, r3, #1
 8002d72:	6313      	str	r3, [r2, #48]	; 0x30
 8002d74:	4b2e      	ldr	r3, [pc, #184]	; (8002e30 <HAL_DCMI_MspInit+0x164>)
 8002d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d78:	f003 0301 	and.w	r3, r3, #1
 8002d7c:	60fb      	str	r3, [r7, #12]
 8002d7e:	68fb      	ldr	r3, [r7, #12]
    PH9     ------> DCMI_D0
    PH11     ------> DCMI_D2
    PA6     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1
    */
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8002d80:	2360      	movs	r3, #96	; 0x60
 8002d82:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d84:	2302      	movs	r3, #2
 8002d86:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002d90:	230d      	movs	r3, #13
 8002d92:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002d94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d98:	4619      	mov	r1, r3
 8002d9a:	4826      	ldr	r0, [pc, #152]	; (8002e34 <HAL_DCMI_MspInit+0x168>)
 8002d9c:	f002 fe5a 	bl	8005a54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8002da0:	2308      	movs	r3, #8
 8002da2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002da4:	2302      	movs	r3, #2
 8002da6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002da8:	2300      	movs	r3, #0
 8002daa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dac:	2300      	movs	r3, #0
 8002dae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002db0:	230d      	movs	r3, #13
 8002db2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8002db4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002db8:	4619      	mov	r1, r3
 8002dba:	481f      	ldr	r0, [pc, #124]	; (8002e38 <HAL_DCMI_MspInit+0x16c>)
 8002dbc:	f002 fe4a 	bl	8005a54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8002dc0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002dc4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dc6:	2302      	movs	r3, #2
 8002dc8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002dd2:	230d      	movs	r3, #13
 8002dd4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8002dd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002dda:	4619      	mov	r1, r3
 8002ddc:	4817      	ldr	r0, [pc, #92]	; (8002e3c <HAL_DCMI_MspInit+0x170>)
 8002dde:	f002 fe39 	bl	8005a54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8002de2:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 8002de6:	627b      	str	r3, [r7, #36]	; 0x24
                          |DCMI_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002de8:	2302      	movs	r3, #2
 8002dea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dec:	2300      	movs	r3, #0
 8002dee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002df0:	2300      	movs	r3, #0
 8002df2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002df4:	230d      	movs	r3, #13
 8002df6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002df8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002dfc:	4619      	mov	r1, r3
 8002dfe:	4810      	ldr	r0, [pc, #64]	; (8002e40 <HAL_DCMI_MspInit+0x174>)
 8002e00:	f002 fe28 	bl	8005a54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8002e04:	2350      	movs	r3, #80	; 0x50
 8002e06:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e08:	2302      	movs	r3, #2
 8002e0a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e10:	2300      	movs	r3, #0
 8002e12:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002e14:	230d      	movs	r3, #13
 8002e16:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e1c:	4619      	mov	r1, r3
 8002e1e:	4809      	ldr	r0, [pc, #36]	; (8002e44 <HAL_DCMI_MspInit+0x178>)
 8002e20:	f002 fe18 	bl	8005a54 <HAL_GPIO_Init>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 8002e24:	bf00      	nop
 8002e26:	3738      	adds	r7, #56	; 0x38
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}
 8002e2c:	50050000 	.word	0x50050000
 8002e30:	40023800 	.word	0x40023800
 8002e34:	40021000 	.word	0x40021000
 8002e38:	40020c00 	.word	0x40020c00
 8002e3c:	40021800 	.word	0x40021800
 8002e40:	40021c00 	.word	0x40021c00
 8002e44:	40020000 	.word	0x40020000

08002e48 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b0ac      	sub	sp, #176	; 0xb0
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e50:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002e54:	2200      	movs	r2, #0
 8002e56:	601a      	str	r2, [r3, #0]
 8002e58:	605a      	str	r2, [r3, #4]
 8002e5a:	609a      	str	r2, [r3, #8]
 8002e5c:	60da      	str	r2, [r3, #12]
 8002e5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002e60:	f107 0318 	add.w	r3, r7, #24
 8002e64:	2284      	movs	r2, #132	; 0x84
 8002e66:	2100      	movs	r1, #0
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f005 fc39 	bl	80086e0 <memset>
  if(huart->Instance==USART1)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a32      	ldr	r2, [pc, #200]	; (8002f3c <HAL_UART_MspInit+0xf4>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d15c      	bne.n	8002f32 <HAL_UART_MspInit+0xea>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002e78:	2340      	movs	r3, #64	; 0x40
 8002e7a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002e80:	f107 0318 	add.w	r3, r7, #24
 8002e84:	4618      	mov	r0, r3
 8002e86:	f004 f993 	bl	80071b0 <HAL_RCCEx_PeriphCLKConfig>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d001      	beq.n	8002e94 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002e90:	f7ff faec 	bl	800246c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002e94:	4b2a      	ldr	r3, [pc, #168]	; (8002f40 <HAL_UART_MspInit+0xf8>)
 8002e96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e98:	4a29      	ldr	r2, [pc, #164]	; (8002f40 <HAL_UART_MspInit+0xf8>)
 8002e9a:	f043 0310 	orr.w	r3, r3, #16
 8002e9e:	6453      	str	r3, [r2, #68]	; 0x44
 8002ea0:	4b27      	ldr	r3, [pc, #156]	; (8002f40 <HAL_UART_MspInit+0xf8>)
 8002ea2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ea4:	f003 0310 	and.w	r3, r3, #16
 8002ea8:	617b      	str	r3, [r7, #20]
 8002eaa:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002eac:	4b24      	ldr	r3, [pc, #144]	; (8002f40 <HAL_UART_MspInit+0xf8>)
 8002eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb0:	4a23      	ldr	r2, [pc, #140]	; (8002f40 <HAL_UART_MspInit+0xf8>)
 8002eb2:	f043 0302 	orr.w	r3, r3, #2
 8002eb6:	6313      	str	r3, [r2, #48]	; 0x30
 8002eb8:	4b21      	ldr	r3, [pc, #132]	; (8002f40 <HAL_UART_MspInit+0xf8>)
 8002eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ebc:	f003 0302 	and.w	r3, r3, #2
 8002ec0:	613b      	str	r3, [r7, #16]
 8002ec2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ec4:	4b1e      	ldr	r3, [pc, #120]	; (8002f40 <HAL_UART_MspInit+0xf8>)
 8002ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec8:	4a1d      	ldr	r2, [pc, #116]	; (8002f40 <HAL_UART_MspInit+0xf8>)
 8002eca:	f043 0301 	orr.w	r3, r3, #1
 8002ece:	6313      	str	r3, [r2, #48]	; 0x30
 8002ed0:	4b1b      	ldr	r3, [pc, #108]	; (8002f40 <HAL_UART_MspInit+0xf8>)
 8002ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed4:	f003 0301 	and.w	r3, r3, #1
 8002ed8:	60fb      	str	r3, [r7, #12]
 8002eda:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8002edc:	2380      	movs	r3, #128	; 0x80
 8002ede:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ee2:	2302      	movs	r3, #2
 8002ee4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002ef4:	2307      	movs	r3, #7
 8002ef6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8002efa:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002efe:	4619      	mov	r1, r3
 8002f00:	4810      	ldr	r0, [pc, #64]	; (8002f44 <HAL_UART_MspInit+0xfc>)
 8002f02:	f002 fda7 	bl	8005a54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8002f06:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f0a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f0e:	2302      	movs	r3, #2
 8002f10:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f14:	2300      	movs	r3, #0
 8002f16:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002f20:	2307      	movs	r3, #7
 8002f22:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8002f26:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002f2a:	4619      	mov	r1, r3
 8002f2c:	4806      	ldr	r0, [pc, #24]	; (8002f48 <HAL_UART_MspInit+0x100>)
 8002f2e:	f002 fd91 	bl	8005a54 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002f32:	bf00      	nop
 8002f34:	37b0      	adds	r7, #176	; 0xb0
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}
 8002f3a:	bf00      	nop
 8002f3c:	40011000 	.word	0x40011000
 8002f40:	40023800 	.word	0x40023800
 8002f44:	40020400 	.word	0x40020400
 8002f48:	40020000 	.word	0x40020000

08002f4c <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b086      	sub	sp, #24
 8002f50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8002f52:	1d3b      	adds	r3, r7, #4
 8002f54:	2200      	movs	r2, #0
 8002f56:	601a      	str	r2, [r3, #0]
 8002f58:	605a      	str	r2, [r3, #4]
 8002f5a:	609a      	str	r2, [r3, #8]
 8002f5c:	60da      	str	r2, [r3, #12]
 8002f5e:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8002f60:	4b3a      	ldr	r3, [pc, #232]	; (800304c <HAL_FMC_MspInit+0x100>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d16d      	bne.n	8003044 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 8002f68:	4b38      	ldr	r3, [pc, #224]	; (800304c <HAL_FMC_MspInit+0x100>)
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002f6e:	4b38      	ldr	r3, [pc, #224]	; (8003050 <HAL_FMC_MspInit+0x104>)
 8002f70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f72:	4a37      	ldr	r2, [pc, #220]	; (8003050 <HAL_FMC_MspInit+0x104>)
 8002f74:	f043 0301 	orr.w	r3, r3, #1
 8002f78:	6393      	str	r3, [r2, #56]	; 0x38
 8002f7a:	4b35      	ldr	r3, [pc, #212]	; (8003050 <HAL_FMC_MspInit+0x104>)
 8002f7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f7e:	f003 0301 	and.w	r3, r3, #1
 8002f82:	603b      	str	r3, [r7, #0]
 8002f84:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8002f86:	f64f 7383 	movw	r3, #65411	; 0xff83
 8002f8a:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f8c:	2302      	movs	r3, #2
 8002f8e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f90:	2300      	movs	r3, #0
 8002f92:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f94:	2303      	movs	r3, #3
 8002f96:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002f98:	230c      	movs	r3, #12
 8002f9a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002f9c:	1d3b      	adds	r3, r7, #4
 8002f9e:	4619      	mov	r1, r3
 8002fa0:	482c      	ldr	r0, [pc, #176]	; (8003054 <HAL_FMC_MspInit+0x108>)
 8002fa2:	f002 fd57 	bl	8005a54 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8002fa6:	f248 1333 	movw	r3, #33075	; 0x8133
 8002faa:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fac:	2302      	movs	r3, #2
 8002fae:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fb4:	2303      	movs	r3, #3
 8002fb6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002fb8:	230c      	movs	r3, #12
 8002fba:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002fbc:	1d3b      	adds	r3, r7, #4
 8002fbe:	4619      	mov	r1, r3
 8002fc0:	4825      	ldr	r0, [pc, #148]	; (8003058 <HAL_FMC_MspInit+0x10c>)
 8002fc2:	f002 fd47 	bl	8005a54 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8002fc6:	f24c 7303 	movw	r3, #50947	; 0xc703
 8002fca:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fcc:	2302      	movs	r3, #2
 8002fce:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fd4:	2303      	movs	r3, #3
 8002fd6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002fd8:	230c      	movs	r3, #12
 8002fda:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002fdc:	1d3b      	adds	r3, r7, #4
 8002fde:	4619      	mov	r1, r3
 8002fe0:	481e      	ldr	r0, [pc, #120]	; (800305c <HAL_FMC_MspInit+0x110>)
 8002fe2:	f002 fd37 	bl	8005a54 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8002fe6:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8002fea:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fec:	2302      	movs	r3, #2
 8002fee:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ff4:	2303      	movs	r3, #3
 8002ff6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002ff8:	230c      	movs	r3, #12
 8002ffa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002ffc:	1d3b      	adds	r3, r7, #4
 8002ffe:	4619      	mov	r1, r3
 8003000:	4817      	ldr	r0, [pc, #92]	; (8003060 <HAL_FMC_MspInit+0x114>)
 8003002:	f002 fd27 	bl	8005a54 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8003006:	2328      	movs	r3, #40	; 0x28
 8003008:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800300a:	2302      	movs	r3, #2
 800300c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800300e:	2300      	movs	r3, #0
 8003010:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003012:	2303      	movs	r3, #3
 8003014:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003016:	230c      	movs	r3, #12
 8003018:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800301a:	1d3b      	adds	r3, r7, #4
 800301c:	4619      	mov	r1, r3
 800301e:	4811      	ldr	r0, [pc, #68]	; (8003064 <HAL_FMC_MspInit+0x118>)
 8003020:	f002 fd18 	bl	8005a54 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8003024:	2308      	movs	r3, #8
 8003026:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003028:	2302      	movs	r3, #2
 800302a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800302c:	2300      	movs	r3, #0
 800302e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003030:	2303      	movs	r3, #3
 8003032:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003034:	230c      	movs	r3, #12
 8003036:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8003038:	1d3b      	adds	r3, r7, #4
 800303a:	4619      	mov	r1, r3
 800303c:	480a      	ldr	r0, [pc, #40]	; (8003068 <HAL_FMC_MspInit+0x11c>)
 800303e:	f002 fd09 	bl	8005a54 <HAL_GPIO_Init>
 8003042:	e000      	b.n	8003046 <HAL_FMC_MspInit+0xfa>
    return;
 8003044:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8003046:	3718      	adds	r7, #24
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}
 800304c:	200000d8 	.word	0x200000d8
 8003050:	40023800 	.word	0x40023800
 8003054:	40021000 	.word	0x40021000
 8003058:	40021800 	.word	0x40021800
 800305c:	40020c00 	.word	0x40020c00
 8003060:	40021400 	.word	0x40021400
 8003064:	40021c00 	.word	0x40021c00
 8003068:	40020800 	.word	0x40020800

0800306c <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 800306c:	b580      	push	{r7, lr}
 800306e:	b082      	sub	sp, #8
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8003074:	f7ff ff6a 	bl	8002f4c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8003078:	bf00      	nop
 800307a:	3708      	adds	r7, #8
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}

08003080 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003080:	b480      	push	{r7}
 8003082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003084:	e7fe      	b.n	8003084 <NMI_Handler+0x4>

08003086 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003086:	b480      	push	{r7}
 8003088:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800308a:	e7fe      	b.n	800308a <HardFault_Handler+0x4>

0800308c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800308c:	b480      	push	{r7}
 800308e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003090:	e7fe      	b.n	8003090 <MemManage_Handler+0x4>

08003092 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003092:	b480      	push	{r7}
 8003094:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003096:	e7fe      	b.n	8003096 <BusFault_Handler+0x4>

08003098 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003098:	b480      	push	{r7}
 800309a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800309c:	e7fe      	b.n	800309c <UsageFault_Handler+0x4>

0800309e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800309e:	b480      	push	{r7}
 80030a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80030a2:	bf00      	nop
 80030a4:	46bd      	mov	sp, r7
 80030a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030aa:	4770      	bx	lr

080030ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80030ac:	b480      	push	{r7}
 80030ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80030b0:	bf00      	nop
 80030b2:	46bd      	mov	sp, r7
 80030b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b8:	4770      	bx	lr

080030ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80030ba:	b480      	push	{r7}
 80030bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80030be:	bf00      	nop
 80030c0:	46bd      	mov	sp, r7
 80030c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c6:	4770      	bx	lr

080030c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80030cc:	f000 fa32 	bl	8003534 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80030d0:	bf00      	nop
 80030d2:	bd80      	pop	{r7, pc}

080030d4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80030d4:	b480      	push	{r7}
 80030d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80030d8:	4b06      	ldr	r3, [pc, #24]	; (80030f4 <SystemInit+0x20>)
 80030da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030de:	4a05      	ldr	r2, [pc, #20]	; (80030f4 <SystemInit+0x20>)
 80030e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80030e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80030e8:	bf00      	nop
 80030ea:	46bd      	mov	sp, r7
 80030ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f0:	4770      	bx	lr
 80030f2:	bf00      	nop
 80030f4:	e000ed00 	.word	0xe000ed00

080030f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80030f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003130 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80030fc:	480d      	ldr	r0, [pc, #52]	; (8003134 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80030fe:	490e      	ldr	r1, [pc, #56]	; (8003138 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003100:	4a0e      	ldr	r2, [pc, #56]	; (800313c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003102:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003104:	e002      	b.n	800310c <LoopCopyDataInit>

08003106 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003106:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003108:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800310a:	3304      	adds	r3, #4

0800310c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800310c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800310e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003110:	d3f9      	bcc.n	8003106 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003112:	4a0b      	ldr	r2, [pc, #44]	; (8003140 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003114:	4c0b      	ldr	r4, [pc, #44]	; (8003144 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003116:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003118:	e001      	b.n	800311e <LoopFillZerobss>

0800311a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800311a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800311c:	3204      	adds	r2, #4

0800311e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800311e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003120:	d3fb      	bcc.n	800311a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003122:	f7ff ffd7 	bl	80030d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003126:	f005 faa9 	bl	800867c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800312a:	f7fe fc37 	bl	800199c <main>
  bx  lr    
 800312e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003130:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8003134:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003138:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 800313c:	0801ca5c 	.word	0x0801ca5c
  ldr r2, =_sbss
 8003140:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8003144:	200004d8 	.word	0x200004d8

08003148 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003148:	e7fe      	b.n	8003148 <ADC_IRQHandler>
	...

0800314c <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 800314c:	b580      	push	{r7, lr}
 800314e:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8003150:	4b29      	ldr	r3, [pc, #164]	; (80031f8 <BSP_SDRAM_Init+0xac>)
 8003152:	4a2a      	ldr	r2, [pc, #168]	; (80031fc <BSP_SDRAM_Init+0xb0>)
 8003154:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 8003156:	4b2a      	ldr	r3, [pc, #168]	; (8003200 <BSP_SDRAM_Init+0xb4>)
 8003158:	2202      	movs	r2, #2
 800315a:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 800315c:	4b28      	ldr	r3, [pc, #160]	; (8003200 <BSP_SDRAM_Init+0xb4>)
 800315e:	2207      	movs	r2, #7
 8003160:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 8003162:	4b27      	ldr	r3, [pc, #156]	; (8003200 <BSP_SDRAM_Init+0xb4>)
 8003164:	2204      	movs	r2, #4
 8003166:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 8003168:	4b25      	ldr	r3, [pc, #148]	; (8003200 <BSP_SDRAM_Init+0xb4>)
 800316a:	2207      	movs	r2, #7
 800316c:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 800316e:	4b24      	ldr	r3, [pc, #144]	; (8003200 <BSP_SDRAM_Init+0xb4>)
 8003170:	2202      	movs	r2, #2
 8003172:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 8003174:	4b22      	ldr	r3, [pc, #136]	; (8003200 <BSP_SDRAM_Init+0xb4>)
 8003176:	2202      	movs	r2, #2
 8003178:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 800317a:	4b21      	ldr	r3, [pc, #132]	; (8003200 <BSP_SDRAM_Init+0xb4>)
 800317c:	2202      	movs	r2, #2
 800317e:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8003180:	4b1d      	ldr	r3, [pc, #116]	; (80031f8 <BSP_SDRAM_Init+0xac>)
 8003182:	2200      	movs	r2, #0
 8003184:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8003186:	4b1c      	ldr	r3, [pc, #112]	; (80031f8 <BSP_SDRAM_Init+0xac>)
 8003188:	2200      	movs	r2, #0
 800318a:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 800318c:	4b1a      	ldr	r3, [pc, #104]	; (80031f8 <BSP_SDRAM_Init+0xac>)
 800318e:	2204      	movs	r2, #4
 8003190:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8003192:	4b19      	ldr	r3, [pc, #100]	; (80031f8 <BSP_SDRAM_Init+0xac>)
 8003194:	2210      	movs	r2, #16
 8003196:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8003198:	4b17      	ldr	r3, [pc, #92]	; (80031f8 <BSP_SDRAM_Init+0xac>)
 800319a:	2240      	movs	r2, #64	; 0x40
 800319c:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 800319e:	4b16      	ldr	r3, [pc, #88]	; (80031f8 <BSP_SDRAM_Init+0xac>)
 80031a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80031a4:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80031a6:	4b14      	ldr	r3, [pc, #80]	; (80031f8 <BSP_SDRAM_Init+0xac>)
 80031a8:	2200      	movs	r2, #0
 80031aa:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 80031ac:	4b12      	ldr	r3, [pc, #72]	; (80031f8 <BSP_SDRAM_Init+0xac>)
 80031ae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80031b2:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 80031b4:	4b10      	ldr	r3, [pc, #64]	; (80031f8 <BSP_SDRAM_Init+0xac>)
 80031b6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80031ba:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 80031bc:	4b0e      	ldr	r3, [pc, #56]	; (80031f8 <BSP_SDRAM_Init+0xac>)
 80031be:	2200      	movs	r2, #0
 80031c0:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 80031c2:	2100      	movs	r1, #0
 80031c4:	480c      	ldr	r0, [pc, #48]	; (80031f8 <BSP_SDRAM_Init+0xac>)
 80031c6:	f000 f87f 	bl	80032c8 <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 80031ca:	490d      	ldr	r1, [pc, #52]	; (8003200 <BSP_SDRAM_Init+0xb4>)
 80031cc:	480a      	ldr	r0, [pc, #40]	; (80031f8 <BSP_SDRAM_Init+0xac>)
 80031ce:	f004 fbdf 	bl	8007990 <HAL_SDRAM_Init>
 80031d2:	4603      	mov	r3, r0
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d003      	beq.n	80031e0 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 80031d8:	4b0a      	ldr	r3, [pc, #40]	; (8003204 <BSP_SDRAM_Init+0xb8>)
 80031da:	2201      	movs	r2, #1
 80031dc:	701a      	strb	r2, [r3, #0]
 80031de:	e002      	b.n	80031e6 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 80031e0:	4b08      	ldr	r3, [pc, #32]	; (8003204 <BSP_SDRAM_Init+0xb8>)
 80031e2:	2200      	movs	r2, #0
 80031e4:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 80031e6:	f240 6003 	movw	r0, #1539	; 0x603
 80031ea:	f000 f80d 	bl	8003208 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 80031ee:	4b05      	ldr	r3, [pc, #20]	; (8003204 <BSP_SDRAM_Init+0xb8>)
 80031f0:	781b      	ldrb	r3, [r3, #0]
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	bd80      	pop	{r7, pc}
 80031f6:	bf00      	nop
 80031f8:	200004a0 	.word	0x200004a0
 80031fc:	a0000140 	.word	0xa0000140
 8003200:	200000dc 	.word	0x200000dc
 8003204:	2000001c 	.word	0x2000001c

08003208 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b084      	sub	sp, #16
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8003210:	2300      	movs	r3, #0
 8003212:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8003214:	4b2a      	ldr	r3, [pc, #168]	; (80032c0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003216:	2201      	movs	r2, #1
 8003218:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800321a:	4b29      	ldr	r3, [pc, #164]	; (80032c0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800321c:	2210      	movs	r2, #16
 800321e:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8003220:	4b27      	ldr	r3, [pc, #156]	; (80032c0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003222:	2201      	movs	r2, #1
 8003224:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8003226:	4b26      	ldr	r3, [pc, #152]	; (80032c0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003228:	2200      	movs	r2, #0
 800322a:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800322c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003230:	4923      	ldr	r1, [pc, #140]	; (80032c0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003232:	4824      	ldr	r0, [pc, #144]	; (80032c4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003234:	f004 fbe0 	bl	80079f8 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8003238:	2001      	movs	r0, #1
 800323a:	f000 f99b 	bl	8003574 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 800323e:	4b20      	ldr	r3, [pc, #128]	; (80032c0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003240:	2202      	movs	r2, #2
 8003242:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003244:	4b1e      	ldr	r3, [pc, #120]	; (80032c0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003246:	2210      	movs	r2, #16
 8003248:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 800324a:	4b1d      	ldr	r3, [pc, #116]	; (80032c0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800324c:	2201      	movs	r2, #1
 800324e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8003250:	4b1b      	ldr	r3, [pc, #108]	; (80032c0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003252:	2200      	movs	r2, #0
 8003254:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8003256:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800325a:	4919      	ldr	r1, [pc, #100]	; (80032c0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800325c:	4819      	ldr	r0, [pc, #100]	; (80032c4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800325e:	f004 fbcb 	bl	80079f8 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8003262:	4b17      	ldr	r3, [pc, #92]	; (80032c0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003264:	2203      	movs	r2, #3
 8003266:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003268:	4b15      	ldr	r3, [pc, #84]	; (80032c0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800326a:	2210      	movs	r2, #16
 800326c:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 800326e:	4b14      	ldr	r3, [pc, #80]	; (80032c0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003270:	2208      	movs	r2, #8
 8003272:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8003274:	4b12      	ldr	r3, [pc, #72]	; (80032c0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003276:	2200      	movs	r2, #0
 8003278:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800327a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800327e:	4910      	ldr	r1, [pc, #64]	; (80032c0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003280:	4810      	ldr	r0, [pc, #64]	; (80032c4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003282:	f004 fbb9 	bl	80079f8 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8003286:	f44f 7308 	mov.w	r3, #544	; 0x220
 800328a:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 800328c:	4b0c      	ldr	r3, [pc, #48]	; (80032c0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800328e:	2204      	movs	r2, #4
 8003290:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003292:	4b0b      	ldr	r3, [pc, #44]	; (80032c0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003294:	2210      	movs	r2, #16
 8003296:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8003298:	4b09      	ldr	r3, [pc, #36]	; (80032c0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800329a:	2201      	movs	r2, #1
 800329c:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	4a07      	ldr	r2, [pc, #28]	; (80032c0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80032a2:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80032a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80032a8:	4905      	ldr	r1, [pc, #20]	; (80032c0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80032aa:	4806      	ldr	r0, [pc, #24]	; (80032c4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80032ac:	f004 fba4 	bl	80079f8 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 80032b0:	6879      	ldr	r1, [r7, #4]
 80032b2:	4804      	ldr	r0, [pc, #16]	; (80032c4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80032b4:	f004 fbd5 	bl	8007a62 <HAL_SDRAM_ProgramRefreshRate>
}
 80032b8:	bf00      	nop
 80032ba:	3710      	adds	r7, #16
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd80      	pop	{r7, pc}
 80032c0:	200000f8 	.word	0x200000f8
 80032c4:	200004a0 	.word	0x200004a0

080032c8 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b090      	sub	sp, #64	; 0x40
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
 80032d0:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 80032d2:	4b70      	ldr	r3, [pc, #448]	; (8003494 <BSP_SDRAM_MspInit+0x1cc>)
 80032d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032d6:	4a6f      	ldr	r2, [pc, #444]	; (8003494 <BSP_SDRAM_MspInit+0x1cc>)
 80032d8:	f043 0301 	orr.w	r3, r3, #1
 80032dc:	6393      	str	r3, [r2, #56]	; 0x38
 80032de:	4b6d      	ldr	r3, [pc, #436]	; (8003494 <BSP_SDRAM_MspInit+0x1cc>)
 80032e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032e2:	f003 0301 	and.w	r3, r3, #1
 80032e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80032e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 80032ea:	4b6a      	ldr	r3, [pc, #424]	; (8003494 <BSP_SDRAM_MspInit+0x1cc>)
 80032ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ee:	4a69      	ldr	r2, [pc, #420]	; (8003494 <BSP_SDRAM_MspInit+0x1cc>)
 80032f0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80032f4:	6313      	str	r3, [r2, #48]	; 0x30
 80032f6:	4b67      	ldr	r3, [pc, #412]	; (8003494 <BSP_SDRAM_MspInit+0x1cc>)
 80032f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032fe:	627b      	str	r3, [r7, #36]	; 0x24
 8003300:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003302:	4b64      	ldr	r3, [pc, #400]	; (8003494 <BSP_SDRAM_MspInit+0x1cc>)
 8003304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003306:	4a63      	ldr	r2, [pc, #396]	; (8003494 <BSP_SDRAM_MspInit+0x1cc>)
 8003308:	f043 0304 	orr.w	r3, r3, #4
 800330c:	6313      	str	r3, [r2, #48]	; 0x30
 800330e:	4b61      	ldr	r3, [pc, #388]	; (8003494 <BSP_SDRAM_MspInit+0x1cc>)
 8003310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003312:	f003 0304 	and.w	r3, r3, #4
 8003316:	623b      	str	r3, [r7, #32]
 8003318:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800331a:	4b5e      	ldr	r3, [pc, #376]	; (8003494 <BSP_SDRAM_MspInit+0x1cc>)
 800331c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800331e:	4a5d      	ldr	r2, [pc, #372]	; (8003494 <BSP_SDRAM_MspInit+0x1cc>)
 8003320:	f043 0308 	orr.w	r3, r3, #8
 8003324:	6313      	str	r3, [r2, #48]	; 0x30
 8003326:	4b5b      	ldr	r3, [pc, #364]	; (8003494 <BSP_SDRAM_MspInit+0x1cc>)
 8003328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800332a:	f003 0308 	and.w	r3, r3, #8
 800332e:	61fb      	str	r3, [r7, #28]
 8003330:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003332:	4b58      	ldr	r3, [pc, #352]	; (8003494 <BSP_SDRAM_MspInit+0x1cc>)
 8003334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003336:	4a57      	ldr	r2, [pc, #348]	; (8003494 <BSP_SDRAM_MspInit+0x1cc>)
 8003338:	f043 0310 	orr.w	r3, r3, #16
 800333c:	6313      	str	r3, [r2, #48]	; 0x30
 800333e:	4b55      	ldr	r3, [pc, #340]	; (8003494 <BSP_SDRAM_MspInit+0x1cc>)
 8003340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003342:	f003 0310 	and.w	r3, r3, #16
 8003346:	61bb      	str	r3, [r7, #24]
 8003348:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800334a:	4b52      	ldr	r3, [pc, #328]	; (8003494 <BSP_SDRAM_MspInit+0x1cc>)
 800334c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800334e:	4a51      	ldr	r2, [pc, #324]	; (8003494 <BSP_SDRAM_MspInit+0x1cc>)
 8003350:	f043 0320 	orr.w	r3, r3, #32
 8003354:	6313      	str	r3, [r2, #48]	; 0x30
 8003356:	4b4f      	ldr	r3, [pc, #316]	; (8003494 <BSP_SDRAM_MspInit+0x1cc>)
 8003358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800335a:	f003 0320 	and.w	r3, r3, #32
 800335e:	617b      	str	r3, [r7, #20]
 8003360:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003362:	4b4c      	ldr	r3, [pc, #304]	; (8003494 <BSP_SDRAM_MspInit+0x1cc>)
 8003364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003366:	4a4b      	ldr	r2, [pc, #300]	; (8003494 <BSP_SDRAM_MspInit+0x1cc>)
 8003368:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800336c:	6313      	str	r3, [r2, #48]	; 0x30
 800336e:	4b49      	ldr	r3, [pc, #292]	; (8003494 <BSP_SDRAM_MspInit+0x1cc>)
 8003370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003372:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003376:	613b      	str	r3, [r7, #16]
 8003378:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800337a:	4b46      	ldr	r3, [pc, #280]	; (8003494 <BSP_SDRAM_MspInit+0x1cc>)
 800337c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800337e:	4a45      	ldr	r2, [pc, #276]	; (8003494 <BSP_SDRAM_MspInit+0x1cc>)
 8003380:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003384:	6313      	str	r3, [r2, #48]	; 0x30
 8003386:	4b43      	ldr	r3, [pc, #268]	; (8003494 <BSP_SDRAM_MspInit+0x1cc>)
 8003388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800338a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800338e:	60fb      	str	r3, [r7, #12]
 8003390:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003392:	2302      	movs	r3, #2
 8003394:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8003396:	2301      	movs	r3, #1
 8003398:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 800339a:	2302      	movs	r3, #2
 800339c:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 800339e:	230c      	movs	r3, #12
 80033a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 80033a2:	2308      	movs	r3, #8
 80033a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 80033a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80033aa:	4619      	mov	r1, r3
 80033ac:	483a      	ldr	r0, [pc, #232]	; (8003498 <BSP_SDRAM_MspInit+0x1d0>)
 80033ae:	f002 fb51 	bl	8005a54 <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 80033b2:	f24c 7303 	movw	r3, #50947	; 0xc703
 80033b6:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 80033b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80033bc:	4619      	mov	r1, r3
 80033be:	4837      	ldr	r0, [pc, #220]	; (800349c <BSP_SDRAM_MspInit+0x1d4>)
 80033c0:	f002 fb48 	bl	8005a54 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 80033c4:	f64f 7383 	movw	r3, #65411	; 0xff83
 80033c8:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80033ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80033ce:	4619      	mov	r1, r3
 80033d0:	4833      	ldr	r0, [pc, #204]	; (80034a0 <BSP_SDRAM_MspInit+0x1d8>)
 80033d2:	f002 fb3f 	bl	8005a54 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 80033d6:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80033da:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 80033dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80033e0:	4619      	mov	r1, r3
 80033e2:	4830      	ldr	r0, [pc, #192]	; (80034a4 <BSP_SDRAM_MspInit+0x1dc>)
 80033e4:	f002 fb36 	bl	8005a54 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 80033e8:	f248 1333 	movw	r3, #33075	; 0x8133
 80033ec:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80033ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80033f2:	4619      	mov	r1, r3
 80033f4:	482c      	ldr	r0, [pc, #176]	; (80034a8 <BSP_SDRAM_MspInit+0x1e0>)
 80033f6:	f002 fb2d 	bl	8005a54 <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 80033fa:	2328      	movs	r3, #40	; 0x28
 80033fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 80033fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003402:	4619      	mov	r1, r3
 8003404:	4829      	ldr	r0, [pc, #164]	; (80034ac <BSP_SDRAM_MspInit+0x1e4>)
 8003406:	f002 fb25 	bl	8005a54 <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 800340a:	4b29      	ldr	r3, [pc, #164]	; (80034b0 <BSP_SDRAM_MspInit+0x1e8>)
 800340c:	2200      	movs	r2, #0
 800340e:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8003410:	4b27      	ldr	r3, [pc, #156]	; (80034b0 <BSP_SDRAM_MspInit+0x1e8>)
 8003412:	2280      	movs	r2, #128	; 0x80
 8003414:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8003416:	4b26      	ldr	r3, [pc, #152]	; (80034b0 <BSP_SDRAM_MspInit+0x1e8>)
 8003418:	f44f 7200 	mov.w	r2, #512	; 0x200
 800341c:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 800341e:	4b24      	ldr	r3, [pc, #144]	; (80034b0 <BSP_SDRAM_MspInit+0x1e8>)
 8003420:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003424:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003426:	4b22      	ldr	r3, [pc, #136]	; (80034b0 <BSP_SDRAM_MspInit+0x1e8>)
 8003428:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800342c:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 800342e:	4b20      	ldr	r3, [pc, #128]	; (80034b0 <BSP_SDRAM_MspInit+0x1e8>)
 8003430:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003434:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 8003436:	4b1e      	ldr	r3, [pc, #120]	; (80034b0 <BSP_SDRAM_MspInit+0x1e8>)
 8003438:	2200      	movs	r2, #0
 800343a:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 800343c:	4b1c      	ldr	r3, [pc, #112]	; (80034b0 <BSP_SDRAM_MspInit+0x1e8>)
 800343e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003442:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8003444:	4b1a      	ldr	r3, [pc, #104]	; (80034b0 <BSP_SDRAM_MspInit+0x1e8>)
 8003446:	2200      	movs	r2, #0
 8003448:	625a      	str	r2, [r3, #36]	; 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 800344a:	4b19      	ldr	r3, [pc, #100]	; (80034b0 <BSP_SDRAM_MspInit+0x1e8>)
 800344c:	2203      	movs	r2, #3
 800344e:	629a      	str	r2, [r3, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8003450:	4b17      	ldr	r3, [pc, #92]	; (80034b0 <BSP_SDRAM_MspInit+0x1e8>)
 8003452:	2200      	movs	r2, #0
 8003454:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8003456:	4b16      	ldr	r3, [pc, #88]	; (80034b0 <BSP_SDRAM_MspInit+0x1e8>)
 8003458:	2200      	movs	r2, #0
 800345a:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 800345c:	4b14      	ldr	r3, [pc, #80]	; (80034b0 <BSP_SDRAM_MspInit+0x1e8>)
 800345e:	4a15      	ldr	r2, [pc, #84]	; (80034b4 <BSP_SDRAM_MspInit+0x1ec>)
 8003460:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	4a12      	ldr	r2, [pc, #72]	; (80034b0 <BSP_SDRAM_MspInit+0x1e8>)
 8003466:	631a      	str	r2, [r3, #48]	; 0x30
 8003468:	4a11      	ldr	r2, [pc, #68]	; (80034b0 <BSP_SDRAM_MspInit+0x1e8>)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 800346e:	4810      	ldr	r0, [pc, #64]	; (80034b0 <BSP_SDRAM_MspInit+0x1e8>)
 8003470:	f000 fdc0 	bl	8003ff4 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 8003474:	480e      	ldr	r0, [pc, #56]	; (80034b0 <BSP_SDRAM_MspInit+0x1e8>)
 8003476:	f000 fd0f 	bl	8003e98 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 800347a:	2200      	movs	r2, #0
 800347c:	210f      	movs	r1, #15
 800347e:	2038      	movs	r0, #56	; 0x38
 8003480:	f000 f977 	bl	8003772 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8003484:	2038      	movs	r0, #56	; 0x38
 8003486:	f000 f990 	bl	80037aa <HAL_NVIC_EnableIRQ>
}
 800348a:	bf00      	nop
 800348c:	3740      	adds	r7, #64	; 0x40
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}
 8003492:	bf00      	nop
 8003494:	40023800 	.word	0x40023800
 8003498:	40020800 	.word	0x40020800
 800349c:	40020c00 	.word	0x40020c00
 80034a0:	40021000 	.word	0x40021000
 80034a4:	40021400 	.word	0x40021400
 80034a8:	40021800 	.word	0x40021800
 80034ac:	40021c00 	.word	0x40021c00
 80034b0:	20000108 	.word	0x20000108
 80034b4:	40026410 	.word	0x40026410

080034b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80034bc:	2003      	movs	r0, #3
 80034be:	f000 f94d 	bl	800375c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80034c2:	2000      	movs	r0, #0
 80034c4:	f000 f806 	bl	80034d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80034c8:	f7ff fbdc 	bl	8002c84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80034cc:	2300      	movs	r3, #0
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	bd80      	pop	{r7, pc}
	...

080034d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b082      	sub	sp, #8
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80034dc:	4b12      	ldr	r3, [pc, #72]	; (8003528 <HAL_InitTick+0x54>)
 80034de:	681a      	ldr	r2, [r3, #0]
 80034e0:	4b12      	ldr	r3, [pc, #72]	; (800352c <HAL_InitTick+0x58>)
 80034e2:	781b      	ldrb	r3, [r3, #0]
 80034e4:	4619      	mov	r1, r3
 80034e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80034ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80034ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80034f2:	4618      	mov	r0, r3
 80034f4:	f000 f967 	bl	80037c6 <HAL_SYSTICK_Config>
 80034f8:	4603      	mov	r3, r0
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d001      	beq.n	8003502 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	e00e      	b.n	8003520 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2b0f      	cmp	r3, #15
 8003506:	d80a      	bhi.n	800351e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003508:	2200      	movs	r2, #0
 800350a:	6879      	ldr	r1, [r7, #4]
 800350c:	f04f 30ff 	mov.w	r0, #4294967295
 8003510:	f000 f92f 	bl	8003772 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003514:	4a06      	ldr	r2, [pc, #24]	; (8003530 <HAL_InitTick+0x5c>)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800351a:	2300      	movs	r3, #0
 800351c:	e000      	b.n	8003520 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800351e:	2301      	movs	r3, #1
}
 8003520:	4618      	mov	r0, r3
 8003522:	3708      	adds	r7, #8
 8003524:	46bd      	mov	sp, r7
 8003526:	bd80      	pop	{r7, pc}
 8003528:	20000018 	.word	0x20000018
 800352c:	20000024 	.word	0x20000024
 8003530:	20000020 	.word	0x20000020

08003534 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003534:	b480      	push	{r7}
 8003536:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003538:	4b06      	ldr	r3, [pc, #24]	; (8003554 <HAL_IncTick+0x20>)
 800353a:	781b      	ldrb	r3, [r3, #0]
 800353c:	461a      	mov	r2, r3
 800353e:	4b06      	ldr	r3, [pc, #24]	; (8003558 <HAL_IncTick+0x24>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4413      	add	r3, r2
 8003544:	4a04      	ldr	r2, [pc, #16]	; (8003558 <HAL_IncTick+0x24>)
 8003546:	6013      	str	r3, [r2, #0]
}
 8003548:	bf00      	nop
 800354a:	46bd      	mov	sp, r7
 800354c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003550:	4770      	bx	lr
 8003552:	bf00      	nop
 8003554:	20000024 	.word	0x20000024
 8003558:	200004d4 	.word	0x200004d4

0800355c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800355c:	b480      	push	{r7}
 800355e:	af00      	add	r7, sp, #0
  return uwTick;
 8003560:	4b03      	ldr	r3, [pc, #12]	; (8003570 <HAL_GetTick+0x14>)
 8003562:	681b      	ldr	r3, [r3, #0]
}
 8003564:	4618      	mov	r0, r3
 8003566:	46bd      	mov	sp, r7
 8003568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356c:	4770      	bx	lr
 800356e:	bf00      	nop
 8003570:	200004d4 	.word	0x200004d4

08003574 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b084      	sub	sp, #16
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800357c:	f7ff ffee 	bl	800355c <HAL_GetTick>
 8003580:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	f1b3 3fff 	cmp.w	r3, #4294967295
 800358c:	d005      	beq.n	800359a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800358e:	4b0a      	ldr	r3, [pc, #40]	; (80035b8 <HAL_Delay+0x44>)
 8003590:	781b      	ldrb	r3, [r3, #0]
 8003592:	461a      	mov	r2, r3
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	4413      	add	r3, r2
 8003598:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800359a:	bf00      	nop
 800359c:	f7ff ffde 	bl	800355c <HAL_GetTick>
 80035a0:	4602      	mov	r2, r0
 80035a2:	68bb      	ldr	r3, [r7, #8]
 80035a4:	1ad3      	subs	r3, r2, r3
 80035a6:	68fa      	ldr	r2, [r7, #12]
 80035a8:	429a      	cmp	r2, r3
 80035aa:	d8f7      	bhi.n	800359c <HAL_Delay+0x28>
  {
  }
}
 80035ac:	bf00      	nop
 80035ae:	bf00      	nop
 80035b0:	3710      	adds	r7, #16
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}
 80035b6:	bf00      	nop
 80035b8:	20000024 	.word	0x20000024

080035bc <__NVIC_SetPriorityGrouping>:
{
 80035bc:	b480      	push	{r7}
 80035be:	b085      	sub	sp, #20
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	f003 0307 	and.w	r3, r3, #7
 80035ca:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80035cc:	4b0b      	ldr	r3, [pc, #44]	; (80035fc <__NVIC_SetPriorityGrouping+0x40>)
 80035ce:	68db      	ldr	r3, [r3, #12]
 80035d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80035d2:	68ba      	ldr	r2, [r7, #8]
 80035d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80035d8:	4013      	ands	r3, r2
 80035da:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80035e4:	4b06      	ldr	r3, [pc, #24]	; (8003600 <__NVIC_SetPriorityGrouping+0x44>)
 80035e6:	4313      	orrs	r3, r2
 80035e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80035ea:	4a04      	ldr	r2, [pc, #16]	; (80035fc <__NVIC_SetPriorityGrouping+0x40>)
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	60d3      	str	r3, [r2, #12]
}
 80035f0:	bf00      	nop
 80035f2:	3714      	adds	r7, #20
 80035f4:	46bd      	mov	sp, r7
 80035f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fa:	4770      	bx	lr
 80035fc:	e000ed00 	.word	0xe000ed00
 8003600:	05fa0000 	.word	0x05fa0000

08003604 <__NVIC_GetPriorityGrouping>:
{
 8003604:	b480      	push	{r7}
 8003606:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003608:	4b04      	ldr	r3, [pc, #16]	; (800361c <__NVIC_GetPriorityGrouping+0x18>)
 800360a:	68db      	ldr	r3, [r3, #12]
 800360c:	0a1b      	lsrs	r3, r3, #8
 800360e:	f003 0307 	and.w	r3, r3, #7
}
 8003612:	4618      	mov	r0, r3
 8003614:	46bd      	mov	sp, r7
 8003616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361a:	4770      	bx	lr
 800361c:	e000ed00 	.word	0xe000ed00

08003620 <__NVIC_EnableIRQ>:
{
 8003620:	b480      	push	{r7}
 8003622:	b083      	sub	sp, #12
 8003624:	af00      	add	r7, sp, #0
 8003626:	4603      	mov	r3, r0
 8003628:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800362a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800362e:	2b00      	cmp	r3, #0
 8003630:	db0b      	blt.n	800364a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003632:	79fb      	ldrb	r3, [r7, #7]
 8003634:	f003 021f 	and.w	r2, r3, #31
 8003638:	4907      	ldr	r1, [pc, #28]	; (8003658 <__NVIC_EnableIRQ+0x38>)
 800363a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800363e:	095b      	lsrs	r3, r3, #5
 8003640:	2001      	movs	r0, #1
 8003642:	fa00 f202 	lsl.w	r2, r0, r2
 8003646:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800364a:	bf00      	nop
 800364c:	370c      	adds	r7, #12
 800364e:	46bd      	mov	sp, r7
 8003650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003654:	4770      	bx	lr
 8003656:	bf00      	nop
 8003658:	e000e100 	.word	0xe000e100

0800365c <__NVIC_SetPriority>:
{
 800365c:	b480      	push	{r7}
 800365e:	b083      	sub	sp, #12
 8003660:	af00      	add	r7, sp, #0
 8003662:	4603      	mov	r3, r0
 8003664:	6039      	str	r1, [r7, #0]
 8003666:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003668:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800366c:	2b00      	cmp	r3, #0
 800366e:	db0a      	blt.n	8003686 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	b2da      	uxtb	r2, r3
 8003674:	490c      	ldr	r1, [pc, #48]	; (80036a8 <__NVIC_SetPriority+0x4c>)
 8003676:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800367a:	0112      	lsls	r2, r2, #4
 800367c:	b2d2      	uxtb	r2, r2
 800367e:	440b      	add	r3, r1
 8003680:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003684:	e00a      	b.n	800369c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	b2da      	uxtb	r2, r3
 800368a:	4908      	ldr	r1, [pc, #32]	; (80036ac <__NVIC_SetPriority+0x50>)
 800368c:	79fb      	ldrb	r3, [r7, #7]
 800368e:	f003 030f 	and.w	r3, r3, #15
 8003692:	3b04      	subs	r3, #4
 8003694:	0112      	lsls	r2, r2, #4
 8003696:	b2d2      	uxtb	r2, r2
 8003698:	440b      	add	r3, r1
 800369a:	761a      	strb	r2, [r3, #24]
}
 800369c:	bf00      	nop
 800369e:	370c      	adds	r7, #12
 80036a0:	46bd      	mov	sp, r7
 80036a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a6:	4770      	bx	lr
 80036a8:	e000e100 	.word	0xe000e100
 80036ac:	e000ed00 	.word	0xe000ed00

080036b0 <NVIC_EncodePriority>:
{
 80036b0:	b480      	push	{r7}
 80036b2:	b089      	sub	sp, #36	; 0x24
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	60f8      	str	r0, [r7, #12]
 80036b8:	60b9      	str	r1, [r7, #8]
 80036ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	f003 0307 	and.w	r3, r3, #7
 80036c2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80036c4:	69fb      	ldr	r3, [r7, #28]
 80036c6:	f1c3 0307 	rsb	r3, r3, #7
 80036ca:	2b04      	cmp	r3, #4
 80036cc:	bf28      	it	cs
 80036ce:	2304      	movcs	r3, #4
 80036d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80036d2:	69fb      	ldr	r3, [r7, #28]
 80036d4:	3304      	adds	r3, #4
 80036d6:	2b06      	cmp	r3, #6
 80036d8:	d902      	bls.n	80036e0 <NVIC_EncodePriority+0x30>
 80036da:	69fb      	ldr	r3, [r7, #28]
 80036dc:	3b03      	subs	r3, #3
 80036de:	e000      	b.n	80036e2 <NVIC_EncodePriority+0x32>
 80036e0:	2300      	movs	r3, #0
 80036e2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036e4:	f04f 32ff 	mov.w	r2, #4294967295
 80036e8:	69bb      	ldr	r3, [r7, #24]
 80036ea:	fa02 f303 	lsl.w	r3, r2, r3
 80036ee:	43da      	mvns	r2, r3
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	401a      	ands	r2, r3
 80036f4:	697b      	ldr	r3, [r7, #20]
 80036f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80036f8:	f04f 31ff 	mov.w	r1, #4294967295
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	fa01 f303 	lsl.w	r3, r1, r3
 8003702:	43d9      	mvns	r1, r3
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003708:	4313      	orrs	r3, r2
}
 800370a:	4618      	mov	r0, r3
 800370c:	3724      	adds	r7, #36	; 0x24
 800370e:	46bd      	mov	sp, r7
 8003710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003714:	4770      	bx	lr
	...

08003718 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b082      	sub	sp, #8
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	3b01      	subs	r3, #1
 8003724:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003728:	d301      	bcc.n	800372e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800372a:	2301      	movs	r3, #1
 800372c:	e00f      	b.n	800374e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800372e:	4a0a      	ldr	r2, [pc, #40]	; (8003758 <SysTick_Config+0x40>)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	3b01      	subs	r3, #1
 8003734:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003736:	210f      	movs	r1, #15
 8003738:	f04f 30ff 	mov.w	r0, #4294967295
 800373c:	f7ff ff8e 	bl	800365c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003740:	4b05      	ldr	r3, [pc, #20]	; (8003758 <SysTick_Config+0x40>)
 8003742:	2200      	movs	r2, #0
 8003744:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003746:	4b04      	ldr	r3, [pc, #16]	; (8003758 <SysTick_Config+0x40>)
 8003748:	2207      	movs	r2, #7
 800374a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800374c:	2300      	movs	r3, #0
}
 800374e:	4618      	mov	r0, r3
 8003750:	3708      	adds	r7, #8
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}
 8003756:	bf00      	nop
 8003758:	e000e010 	.word	0xe000e010

0800375c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b082      	sub	sp, #8
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003764:	6878      	ldr	r0, [r7, #4]
 8003766:	f7ff ff29 	bl	80035bc <__NVIC_SetPriorityGrouping>
}
 800376a:	bf00      	nop
 800376c:	3708      	adds	r7, #8
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}

08003772 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003772:	b580      	push	{r7, lr}
 8003774:	b086      	sub	sp, #24
 8003776:	af00      	add	r7, sp, #0
 8003778:	4603      	mov	r3, r0
 800377a:	60b9      	str	r1, [r7, #8]
 800377c:	607a      	str	r2, [r7, #4]
 800377e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003780:	2300      	movs	r3, #0
 8003782:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003784:	f7ff ff3e 	bl	8003604 <__NVIC_GetPriorityGrouping>
 8003788:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800378a:	687a      	ldr	r2, [r7, #4]
 800378c:	68b9      	ldr	r1, [r7, #8]
 800378e:	6978      	ldr	r0, [r7, #20]
 8003790:	f7ff ff8e 	bl	80036b0 <NVIC_EncodePriority>
 8003794:	4602      	mov	r2, r0
 8003796:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800379a:	4611      	mov	r1, r2
 800379c:	4618      	mov	r0, r3
 800379e:	f7ff ff5d 	bl	800365c <__NVIC_SetPriority>
}
 80037a2:	bf00      	nop
 80037a4:	3718      	adds	r7, #24
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}

080037aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037aa:	b580      	push	{r7, lr}
 80037ac:	b082      	sub	sp, #8
 80037ae:	af00      	add	r7, sp, #0
 80037b0:	4603      	mov	r3, r0
 80037b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80037b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037b8:	4618      	mov	r0, r3
 80037ba:	f7ff ff31 	bl	8003620 <__NVIC_EnableIRQ>
}
 80037be:	bf00      	nop
 80037c0:	3708      	adds	r7, #8
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}

080037c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80037c6:	b580      	push	{r7, lr}
 80037c8:	b082      	sub	sp, #8
 80037ca:	af00      	add	r7, sp, #0
 80037cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	f7ff ffa2 	bl	8003718 <SysTick_Config>
 80037d4:	4603      	mov	r3, r0
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	3708      	adds	r7, #8
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}
	...

080037e0 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80037e0:	b480      	push	{r7}
 80037e2:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80037e4:	f3bf 8f5f 	dmb	sy
}
 80037e8:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80037ea:	4b07      	ldr	r3, [pc, #28]	; (8003808 <HAL_MPU_Disable+0x28>)
 80037ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ee:	4a06      	ldr	r2, [pc, #24]	; (8003808 <HAL_MPU_Disable+0x28>)
 80037f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037f4:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80037f6:	4b05      	ldr	r3, [pc, #20]	; (800380c <HAL_MPU_Disable+0x2c>)
 80037f8:	2200      	movs	r2, #0
 80037fa:	605a      	str	r2, [r3, #4]
}
 80037fc:	bf00      	nop
 80037fe:	46bd      	mov	sp, r7
 8003800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003804:	4770      	bx	lr
 8003806:	bf00      	nop
 8003808:	e000ed00 	.word	0xe000ed00
 800380c:	e000ed90 	.word	0xe000ed90

08003810 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8003810:	b480      	push	{r7}
 8003812:	b083      	sub	sp, #12
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8003818:	4a0b      	ldr	r2, [pc, #44]	; (8003848 <HAL_MPU_Enable+0x38>)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	f043 0301 	orr.w	r3, r3, #1
 8003820:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8003822:	4b0a      	ldr	r3, [pc, #40]	; (800384c <HAL_MPU_Enable+0x3c>)
 8003824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003826:	4a09      	ldr	r2, [pc, #36]	; (800384c <HAL_MPU_Enable+0x3c>)
 8003828:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800382c:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800382e:	f3bf 8f4f 	dsb	sy
}
 8003832:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003834:	f3bf 8f6f 	isb	sy
}
 8003838:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800383a:	bf00      	nop
 800383c:	370c      	adds	r7, #12
 800383e:	46bd      	mov	sp, r7
 8003840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003844:	4770      	bx	lr
 8003846:	bf00      	nop
 8003848:	e000ed90 	.word	0xe000ed90
 800384c:	e000ed00 	.word	0xe000ed00

08003850 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8003850:	b480      	push	{r7}
 8003852:	b083      	sub	sp, #12
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	785a      	ldrb	r2, [r3, #1]
 800385c:	4b1d      	ldr	r3, [pc, #116]	; (80038d4 <HAL_MPU_ConfigRegion+0x84>)
 800385e:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != RESET)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	781b      	ldrb	r3, [r3, #0]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d029      	beq.n	80038bc <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 8003868:	4a1a      	ldr	r2, [pc, #104]	; (80038d4 <HAL_MPU_ConfigRegion+0x84>)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	7b1b      	ldrb	r3, [r3, #12]
 8003874:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	7adb      	ldrb	r3, [r3, #11]
 800387a:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800387c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	7a9b      	ldrb	r3, [r3, #10]
 8003882:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003884:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	7b5b      	ldrb	r3, [r3, #13]
 800388a:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800388c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	7b9b      	ldrb	r3, [r3, #14]
 8003892:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003894:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	7bdb      	ldrb	r3, [r3, #15]
 800389a:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800389c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	7a5b      	ldrb	r3, [r3, #9]
 80038a2:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80038a4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	7a1b      	ldrb	r3, [r3, #8]
 80038aa:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80038ac:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80038ae:	687a      	ldr	r2, [r7, #4]
 80038b0:	7812      	ldrb	r2, [r2, #0]
 80038b2:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80038b4:	4a07      	ldr	r2, [pc, #28]	; (80038d4 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80038b6:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80038b8:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 80038ba:	e005      	b.n	80038c8 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 80038bc:	4b05      	ldr	r3, [pc, #20]	; (80038d4 <HAL_MPU_ConfigRegion+0x84>)
 80038be:	2200      	movs	r2, #0
 80038c0:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 80038c2:	4b04      	ldr	r3, [pc, #16]	; (80038d4 <HAL_MPU_ConfigRegion+0x84>)
 80038c4:	2200      	movs	r2, #0
 80038c6:	611a      	str	r2, [r3, #16]
}
 80038c8:	bf00      	nop
 80038ca:	370c      	adds	r7, #12
 80038cc:	46bd      	mov	sp, r7
 80038ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d2:	4770      	bx	lr
 80038d4:	e000ed90 	.word	0xe000ed90

080038d8 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b082      	sub	sp, #8
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d101      	bne.n	80038ea <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 80038e6:	2301      	movs	r3, #1
 80038e8:	e069      	b.n	80039be <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80038f0:	b2db      	uxtb	r3, r3
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d102      	bne.n	80038fc <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f7ff f9e8 	bl	8002ccc <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2202      	movs	r2, #2
 8003900:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

#ifdef DCMI_CR_BSM
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	699b      	ldr	r3, [r3, #24]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d002      	beq.n	8003912 <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2200      	movs	r2, #0
 8003910:	625a      	str	r2, [r3, #36]	; 0x24
  }
#endif
  /* Configures the HS, VS, DE and PC polarity */
#ifdef DCMI_CR_BSM
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	6819      	ldr	r1, [r3, #0]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681a      	ldr	r2, [r3, #0]
 800391c:	4b2a      	ldr	r3, [pc, #168]	; (80039c8 <HAL_DCMI_Init+0xf0>)
 800391e:	400b      	ands	r3, r1
 8003920:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	6819      	ldr	r1, [r3, #0]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	685a      	ldr	r2, [r3, #4]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	695b      	ldr	r3, [r3, #20]
 8003930:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8003936:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	691b      	ldr	r3, [r3, #16]
 800393c:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8003942:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	699b      	ldr	r3, [r3, #24]
 8003948:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 800394e:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003954:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 800395a:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003960:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8003966:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	430a      	orrs	r2, r1
 800396e:	601a      	str	r2, [r3, #0]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
                                    hdcmi->Init.JPEGMode);
#endif

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	2b10      	cmp	r3, #16
 8003976:	d112      	bne.n	800399e <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	7f1b      	ldrb	r3, [r3, #28]
 800397c:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	7f5b      	ldrb	r3, [r3, #29]
 8003982:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8003984:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	7f9b      	ldrb	r3, [r3, #30]
 800398a:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 800398c:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	7fdb      	ldrb	r3, [r3, #31]
 8003994:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 800399a:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 800399c:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	68da      	ldr	r2, [r3, #12]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f042 021e 	orr.w	r2, r2, #30
 80039ac:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2200      	movs	r2, #0
 80039b2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2201      	movs	r2, #1
 80039b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80039bc:	2300      	movs	r3, #0
}
 80039be:	4618      	mov	r0, r3
 80039c0:	3708      	adds	r7, #8
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}
 80039c6:	bf00      	nop
 80039c8:	ffe0f007 	.word	0xffe0f007

080039cc <HAL_DCMI_Start_DMA>:
  * @param  pData     The destination memory Buffer address (LCD Frame buffer).
  * @param  Length    The length of capture to be transferred.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Start_DMA(DCMI_HandleTypeDef *hdcmi, uint32_t DCMI_Mode, uint32_t pData, uint32_t Length)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b088      	sub	sp, #32
 80039d0:	af02      	add	r7, sp, #8
 80039d2:	60f8      	str	r0, [r7, #12]
 80039d4:	60b9      	str	r1, [r7, #8]
 80039d6:	607a      	str	r2, [r7, #4]
 80039d8:	603b      	str	r3, [r7, #0]
  /* Initialize the second memory address */
  uint32_t SecondMemAddress = 0;
 80039da:	2300      	movs	r3, #0
 80039dc:	617b      	str	r3, [r7, #20]

  /* Check function parameters */
  assert_param(IS_DCMI_CAPTURE_MODE(DCMI_Mode));

  /* Process Locked */
  __HAL_LOCK(hdcmi);
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80039e4:	2b01      	cmp	r3, #1
 80039e6:	d101      	bne.n	80039ec <HAL_DCMI_Start_DMA+0x20>
 80039e8:	2302      	movs	r3, #2
 80039ea:	e095      	b.n	8003b18 <HAL_DCMI_Start_DMA+0x14c>
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	2201      	movs	r2, #1
 80039f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	2202      	movs	r2, #2
 80039f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Enable DCMI by setting DCMIEN bit */
  __HAL_DCMI_ENABLE(hdcmi);
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	681a      	ldr	r2, [r3, #0]
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003a0a:	601a      	str	r2, [r3, #0]

  /* Configure the DCMI Mode */
  hdcmi->Instance->CR &= ~(DCMI_CR_CM);
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	681a      	ldr	r2, [r3, #0]
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f022 0202 	bic.w	r2, r2, #2
 8003a1a:	601a      	str	r2, [r3, #0]
  hdcmi->Instance->CR |= (uint32_t)(DCMI_Mode);
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	6819      	ldr	r1, [r3, #0]
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	68ba      	ldr	r2, [r7, #8]
 8003a28:	430a      	orrs	r2, r1
 8003a2a:	601a      	str	r2, [r3, #0]

  /* Set the DMA memory0 conversion complete callback */
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a30:	4a3b      	ldr	r2, [pc, #236]	; (8003b20 <HAL_DCMI_Start_DMA+0x154>)
 8003a32:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a38:	4a3a      	ldr	r2, [pc, #232]	; (8003b24 <HAL_DCMI_Start_DMA+0x158>)
 8003a3a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the dma abort callback */
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a40:	2200      	movs	r2, #0
 8003a42:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset transfer counters value */
  hdcmi->XferCount = 0;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	2200      	movs	r2, #0
 8003a48:	639a      	str	r2, [r3, #56]	; 0x38
  hdcmi->XferTransferNumber = 0;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	641a      	str	r2, [r3, #64]	; 0x40
  hdcmi->XferSize = 0;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	2200      	movs	r2, #0
 8003a54:	63da      	str	r2, [r3, #60]	; 0x3c
  hdcmi->pBuffPtr = 0;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	645a      	str	r2, [r3, #68]	; 0x44

  if (Length <= 0xFFFFU)
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a62:	d20e      	bcs.n	8003a82 <HAL_DCMI_Start_DMA+0xb6>
  {
    /* Enable the DMA Stream */
    if (HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, Length) != HAL_OK)
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	3328      	adds	r3, #40	; 0x28
 8003a6e:	4619      	mov	r1, r3
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	687a      	ldr	r2, [r7, #4]
 8003a74:	f000 fb1c 	bl	80040b0 <HAL_DMA_Start_IT>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d03f      	beq.n	8003afe <HAL_DCMI_Start_DMA+0x132>
    {
      return HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e04a      	b.n	8003b18 <HAL_DCMI_Start_DMA+0x14c>
    }
  }
  else /* DCMI_DOUBLE_BUFFER Mode */
  {
    /* Set the DMA memory1 conversion complete callback */
    hdcmi->DMA_Handle->XferM1CpltCallback = DCMI_DMAXferCplt;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a86:	4a26      	ldr	r2, [pc, #152]	; (8003b20 <HAL_DCMI_Start_DMA+0x154>)
 8003a88:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize transfer parameters */
    hdcmi->XferCount = 1;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	2201      	movs	r2, #1
 8003a8e:	639a      	str	r2, [r3, #56]	; 0x38
    hdcmi->XferSize = Length;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	683a      	ldr	r2, [r7, #0]
 8003a94:	63da      	str	r2, [r3, #60]	; 0x3c
    hdcmi->pBuffPtr = pData;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	687a      	ldr	r2, [r7, #4]
 8003a9a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Get the number of buffer */
    while (hdcmi->XferSize > 0xFFFFU)
 8003a9c:	e009      	b.n	8003ab2 <HAL_DCMI_Start_DMA+0xe6>
    {
      hdcmi->XferSize = (hdcmi->XferSize / 2U);
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aa2:	085a      	lsrs	r2, r3, #1
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	63da      	str	r2, [r3, #60]	; 0x3c
      hdcmi->XferCount = hdcmi->XferCount * 2U;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aac:	005a      	lsls	r2, r3, #1
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	639a      	str	r2, [r3, #56]	; 0x38
    while (hdcmi->XferSize > 0xFFFFU)
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ab6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003aba:	d2f0      	bcs.n	8003a9e <HAL_DCMI_Start_DMA+0xd2>
    }

    /* Update DCMI counter  and transfer number*/
    hdcmi->XferCount = (hdcmi->XferCount - 2U);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ac0:	1e9a      	subs	r2, r3, #2
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	639a      	str	r2, [r3, #56]	; 0x38
    hdcmi->XferTransferNumber = hdcmi->XferCount;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Update second memory address */
    SecondMemAddress = (uint32_t)(pData + (4 * hdcmi->XferSize));
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ad2:	009b      	lsls	r3, r3, #2
 8003ad4:	687a      	ldr	r2, [r7, #4]
 8003ad6:	4413      	add	r3, r2
 8003ad8:	617b      	str	r3, [r7, #20]

    /* Start DMA multi buffer transfer */
    if (HAL_DMAEx_MultiBufferStart_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, SecondMemAddress, hdcmi->XferSize) != HAL_OK)
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	3328      	adds	r3, #40	; 0x28
 8003ae4:	4619      	mov	r1, r3
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aea:	9300      	str	r3, [sp, #0]
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	687a      	ldr	r2, [r7, #4]
 8003af0:	f000 fe3a 	bl	8004768 <HAL_DMAEx_MultiBufferStart_IT>
 8003af4:	4603      	mov	r3, r0
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d001      	beq.n	8003afe <HAL_DCMI_Start_DMA+0x132>
    {
      return HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	e00c      	b.n	8003b18 <HAL_DCMI_Start_DMA+0x14c>
    }
  }

  /* Enable Capture */
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	681a      	ldr	r2, [r3, #0]
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f042 0201 	orr.w	r2, r2, #1
 8003b0c:	601a      	str	r2, [r3, #0]

  /* Release Lock */
  __HAL_UNLOCK(hdcmi);
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	2200      	movs	r2, #0
 8003b12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Return function status */
  return HAL_OK;
 8003b16:	2300      	movs	r3, #0
}
 8003b18:	4618      	mov	r0, r3
 8003b1a:	3718      	adds	r7, #24
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bd80      	pop	{r7, pc}
 8003b20:	08003d35 	.word	0x08003d35
 8003b24:	08003e5f 	.word	0x08003e5f

08003b28 <HAL_DCMI_Stop>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Stop(DCMI_HandleTypeDef *hdcmi)
{
 8003b28:	b590      	push	{r4, r7, lr}
 8003b2a:	b085      	sub	sp, #20
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  register uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
 8003b30:	4b2a      	ldr	r3, [pc, #168]	; (8003bdc <HAL_DCMI_Stop+0xb4>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a2a      	ldr	r2, [pc, #168]	; (8003be0 <HAL_DCMI_Stop+0xb8>)
 8003b36:	fba2 2303 	umull	r2, r3, r2, r3
 8003b3a:	0a5b      	lsrs	r3, r3, #9
 8003b3c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003b40:	fb02 f403 	mul.w	r4, r2, r3
  HAL_StatusTypeDef status = HAL_OK;
 8003b44:	2300      	movs	r3, #0
 8003b46:	73fb      	strb	r3, [r7, #15]

  /* Process locked */
  __HAL_LOCK(hdcmi);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003b4e:	2b01      	cmp	r3, #1
 8003b50:	d101      	bne.n	8003b56 <HAL_DCMI_Stop+0x2e>
 8003b52:	2302      	movs	r3, #2
 8003b54:	e03d      	b.n	8003bd2 <HAL_DCMI_Stop+0xaa>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2201      	movs	r2, #1
 8003b5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2202      	movs	r2, #2
 8003b62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Disable Capture */
  hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	681a      	ldr	r2, [r3, #0]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f022 0201 	bic.w	r2, r2, #1
 8003b74:	601a      	str	r2, [r3, #0]

  /* Check if the DCMI capture effectively disabled */
  do
  {
    if (count-- == 0U)
 8003b76:	4623      	mov	r3, r4
 8003b78:	1e5c      	subs	r4, r3, #1
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d108      	bne.n	8003b90 <HAL_DCMI_Stop+0x68>
    {
      /* Update error code */
      hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b82:	f043 0220 	orr.w	r2, r3, #32
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	64da      	str	r2, [r3, #76]	; 0x4c

      status = HAL_TIMEOUT;
 8003b8a:	2303      	movs	r3, #3
 8003b8c:	73fb      	strb	r3, [r7, #15]
      break;
 8003b8e:	e006      	b.n	8003b9e <HAL_DCMI_Stop+0x76>
    }
  }
  while ((hdcmi->Instance->CR & DCMI_CR_CAPTURE) != 0U);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f003 0301 	and.w	r3, r3, #1
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d1eb      	bne.n	8003b76 <HAL_DCMI_Stop+0x4e>

  /* Disable the DCMI */
  __HAL_DCMI_DISABLE(hdcmi);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	681a      	ldr	r2, [r3, #0]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003bac:	601a      	str	r2, [r3, #0]

  /* Disable the DMA */
  (void)HAL_DMA_Abort(hdcmi->DMA_Handle);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	f000 fadc 	bl	8004170 <HAL_DMA_Abort>

  /* Update error code */
  hdcmi->ErrorCode |= HAL_DCMI_ERROR_NONE;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Change DCMI state */
  hdcmi->State = HAL_DCMI_STATE_READY;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Return function status */
  return status;
 8003bd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	3714      	adds	r7, #20
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd90      	pop	{r4, r7, pc}
 8003bda:	bf00      	nop
 8003bdc:	20000018 	.word	0x20000018
 8003be0:	10624dd3 	.word	0x10624dd3

08003be4 <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b084      	sub	sp, #16
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	691b      	ldr	r3, [r3, #16]
 8003bf2:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if ((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	f003 0304 	and.w	r3, r3, #4
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d016      	beq.n	8003c2c <HAL_DCMI_IRQHandler+0x48>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	2204      	movs	r2, #4
 8003c04:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c0a:	f043 0202 	orr.w	r2, r3, #2
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2204      	movs	r2, #4
 8003c16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c1e:	4a35      	ldr	r2, [pc, #212]	; (8003cf4 <HAL_DCMI_IRQHandler+0x110>)
 8003c20:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c26:	4618      	mov	r0, r3
 8003c28:	f000 fb12 	bl	8004250 <HAL_DMA_Abort_IT>
  }
  /* Overflow interrupt management ********************************************/
  if ((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	f003 0302 	and.w	r3, r3, #2
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d01e      	beq.n	8003c74 <HAL_DCMI_IRQHandler+0x90>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	2202      	movs	r2, #2
 8003c3c:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c42:	f043 0201 	orr.w	r2, r3, #1
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2204      	movs	r2, #4
 8003c4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c56:	4a27      	ldr	r2, [pc, #156]	; (8003cf4 <HAL_DCMI_IRQHandler+0x110>)
 8003c58:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    if (HAL_DMA_Abort_IT(hdcmi->DMA_Handle) != HAL_OK)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f000 faf6 	bl	8004250 <HAL_DMA_Abort_IT>
 8003c64:	4603      	mov	r3, r0
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d004      	beq.n	8003c74 <HAL_DCMI_IRQHandler+0x90>
    {
      DCMI_DMAError(hdcmi->DMA_Handle);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f000 f8f5 	bl	8003e5e <DCMI_DMAError>
    }
  }
  /* Line Interrupt management ************************************************/
  if ((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	f003 0310 	and.w	r3, r3, #16
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d006      	beq.n	8003c8c <HAL_DCMI_IRQHandler+0xa8>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	2210      	movs	r2, #16
 8003c84:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else
    HAL_DCMI_LineEventCallback(hdcmi);
 8003c86:	6878      	ldr	r0, [r7, #4]
 8003c88:	f000 f840 	bl	8003d0c <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* VSYNC interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	f003 0308 	and.w	r3, r3, #8
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d006      	beq.n	8003ca4 <HAL_DCMI_IRQHandler+0xc0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	2208      	movs	r2, #8
 8003c9c:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else
    HAL_DCMI_VsyncEventCallback(hdcmi);
 8003c9e:	6878      	ldr	r0, [r7, #4]
 8003ca0:	f000 f83e 	bl	8003d20 <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* FRAME interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	f003 0301 	and.w	r3, r3, #1
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d01d      	beq.n	8003cea <HAL_DCMI_IRQHandler+0x106>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f003 0302 	and.w	r3, r3, #2
 8003cb8:	2b02      	cmp	r3, #2
 8003cba:	d107      	bne.n	8003ccc <HAL_DCMI_IRQHandler+0xe8>
    {
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	68da      	ldr	r2, [r3, #12]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f022 021e 	bic.w	r2, r2, #30
 8003cca:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	68da      	ldr	r2, [r3, #12]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f022 0201 	bic.w	r2, r2, #1
 8003cda:	60da      	str	r2, [r3, #12]

    /* Clear the End of Frame flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	2201      	movs	r2, #1
 8003ce2:	615a      	str	r2, [r3, #20]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else
    HAL_DCMI_FrameEventCallback(hdcmi);
 8003ce4:	6878      	ldr	r0, [r7, #4]
 8003ce6:	f7fd f955 	bl	8000f94 <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
}
 8003cea:	bf00      	nop
 8003cec:	3710      	adds	r7, #16
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}
 8003cf2:	bf00      	nop
 8003cf4:	08003e5f 	.word	0x08003e5f

08003cf8 <HAL_DCMI_ErrorCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b083      	sub	sp, #12
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 8003d00:	bf00      	nop
 8003d02:	370c      	adds	r7, #12
 8003d04:	46bd      	mov	sp, r7
 8003d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0a:	4770      	bx	lr

08003d0c <HAL_DCMI_LineEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b083      	sub	sp, #12
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_LineEventCallback could be implemented in the user file
   */
}
 8003d14:	bf00      	nop
 8003d16:	370c      	adds	r7, #12
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1e:	4770      	bx	lr

08003d20 <HAL_DCMI_VsyncEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8003d20:	b480      	push	{r7}
 8003d22:	b083      	sub	sp, #12
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_VsyncEventCallback could be implemented in the user file
   */
}
 8003d28:	bf00      	nop
 8003d2a:	370c      	adds	r7, #12
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d32:	4770      	bx	lr

08003d34 <DCMI_DMAXferCplt>:
* @param  hdma pointer to a DMA_HandleTypeDef structure that contains
*                the configuration information for the specified DMA module.
* @retval None
*/
static void DCMI_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b084      	sub	sp, #16
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	60fb      	str	r3, [r7, #12]

  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d44:	60bb      	str	r3, [r7, #8]

  if (hdcmi->XferCount != 0)
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d043      	beq.n	8003dd6 <DCMI_DMAXferCplt+0xa2>
  {
    /* Update memory 0 address location */
    tmp = ((hdcmi->DMA_Handle->Instance->CR) & DMA_SxCR_CT);
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d5a:	60fb      	str	r3, [r7, #12]
    if (((hdcmi->XferCount % 2) == 0) && (tmp != 0))
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d60:	f003 0301 	and.w	r3, r3, #1
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d118      	bne.n	8003d9a <DCMI_DMAXferCplt+0x66>
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d015      	beq.n	8003d9a <DCMI_DMAXferCplt+0x66>
    {
      tmp = hdcmi->DMA_Handle->Instance->M0AR;
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	68db      	ldr	r3, [r3, #12]
 8003d76:	60fb      	str	r3, [r7, #12]
      HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8 * hdcmi->XferSize)), MEMORY0);
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d80:	00da      	lsls	r2, r3, #3
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	4413      	add	r3, r2
 8003d86:	2200      	movs	r2, #0
 8003d88:	4619      	mov	r1, r3
 8003d8a:	f001 fe23 	bl	80059d4 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 8003d8e:	68bb      	ldr	r3, [r7, #8]
 8003d90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d92:	1e5a      	subs	r2, r3, #1
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	639a      	str	r2, [r3, #56]	; 0x38
 8003d98:	e044      	b.n	8003e24 <DCMI_DMAXferCplt+0xf0>
    }
    /* Update memory 1 address location */
    else if ((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) == 0)
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d13c      	bne.n	8003e24 <DCMI_DMAXferCplt+0xf0>
    {
      tmp = hdcmi->DMA_Handle->Instance->M1AR;
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	691b      	ldr	r3, [r3, #16]
 8003db2:	60fb      	str	r3, [r7, #12]
      HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8 * hdcmi->XferSize)), MEMORY1);
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dbc:	00da      	lsls	r2, r3, #3
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	4413      	add	r3, r2
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	4619      	mov	r1, r3
 8003dc6:	f001 fe05 	bl	80059d4 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 8003dca:	68bb      	ldr	r3, [r7, #8]
 8003dcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dce:	1e5a      	subs	r2, r3, #1
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	639a      	str	r2, [r3, #56]	; 0x38
 8003dd4:	e026      	b.n	8003e24 <DCMI_DMAXferCplt+0xf0>
    }
  }
  /* Update memory 0 address location */
  else if ((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) != 0)
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d006      	beq.n	8003df4 <DCMI_DMAXferCplt+0xc0>
  {
    hdcmi->DMA_Handle->Instance->M0AR = hdcmi->pBuffPtr;
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	68ba      	ldr	r2, [r7, #8]
 8003dee:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003df0:	60da      	str	r2, [r3, #12]
 8003df2:	e017      	b.n	8003e24 <DCMI_DMAXferCplt+0xf0>
  }
  /* Update memory 1 address location */
  else if ((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) == 0)
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d10f      	bne.n	8003e24 <DCMI_DMAXferCplt+0xf0>
  {
    tmp = hdcmi->pBuffPtr;
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e08:	60fb      	str	r3, [r7, #12]
    hdcmi->DMA_Handle->Instance->M1AR = (tmp + (4 * hdcmi->XferSize));
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e0e:	0099      	lsls	r1, r3, #2
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	68fa      	ldr	r2, [r7, #12]
 8003e18:	440a      	add	r2, r1
 8003e1a:	611a      	str	r2, [r3, #16]
    hdcmi->XferCount = hdcmi->XferTransferNumber;
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Check if the frame is transferred */
  if (hdcmi->XferCount == hdcmi->XferTransferNumber)
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e2c:	429a      	cmp	r2, r3
 8003e2e:	d112      	bne.n	8003e56 <DCMI_DMAXferCplt+0x122>
  {
    /* Enable the Frame interrupt */
    __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	68da      	ldr	r2, [r3, #12]
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f042 0201 	orr.w	r2, r2, #1
 8003e3e:	60da      	str	r2, [r3, #12]

    /* When snapshot mode, set dcmi state to ready */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f003 0302 	and.w	r3, r3, #2
 8003e4a:	2b02      	cmp	r3, #2
 8003e4c:	d103      	bne.n	8003e56 <DCMI_DMAXferCplt+0x122>
    {
      hdcmi->State = HAL_DCMI_STATE_READY;
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	2201      	movs	r2, #1
 8003e52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }
  }
}
 8003e56:	bf00      	nop
 8003e58:	3710      	adds	r7, #16
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}

08003e5e <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 8003e5e:	b580      	push	{r7, lr}
 8003e60:	b084      	sub	sp, #16
 8003e62:	af00      	add	r7, sp, #0
 8003e64:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e6a:	60fb      	str	r3, [r7, #12]

  if (hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e72:	2b02      	cmp	r3, #2
 8003e74:	d009      	beq.n	8003e8a <DCMI_DMAError+0x2c>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	2201      	movs	r2, #1
 8003e7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set DCMI Error Code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e82:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	64da      	str	r2, [r3, #76]	; 0x4c
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
  /*Call registered DCMI error callback*/
  hdcmi->ErrorCallback(hdcmi);
#else
  HAL_DCMI_ErrorCallback(hdcmi);
 8003e8a:	68f8      	ldr	r0, [r7, #12]
 8003e8c:	f7ff ff34 	bl	8003cf8 <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */

}
 8003e90:	bf00      	nop
 8003e92:	3710      	adds	r7, #16
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bd80      	pop	{r7, pc}

08003e98 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b086      	sub	sp, #24
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003ea4:	f7ff fb5a 	bl	800355c <HAL_GetTick>
 8003ea8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d101      	bne.n	8003eb4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	e099      	b.n	8003fe8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2202      	movs	r2, #2
 8003eb8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	681a      	ldr	r2, [r3, #0]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f022 0201 	bic.w	r2, r2, #1
 8003ed2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ed4:	e00f      	b.n	8003ef6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003ed6:	f7ff fb41 	bl	800355c <HAL_GetTick>
 8003eda:	4602      	mov	r2, r0
 8003edc:	693b      	ldr	r3, [r7, #16]
 8003ede:	1ad3      	subs	r3, r2, r3
 8003ee0:	2b05      	cmp	r3, #5
 8003ee2:	d908      	bls.n	8003ef6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2220      	movs	r2, #32
 8003ee8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2203      	movs	r2, #3
 8003eee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003ef2:	2303      	movs	r3, #3
 8003ef4:	e078      	b.n	8003fe8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f003 0301 	and.w	r3, r3, #1
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d1e8      	bne.n	8003ed6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003f0c:	697a      	ldr	r2, [r7, #20]
 8003f0e:	4b38      	ldr	r3, [pc, #224]	; (8003ff0 <HAL_DMA_Init+0x158>)
 8003f10:	4013      	ands	r3, r2
 8003f12:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	685a      	ldr	r2, [r3, #4]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	689b      	ldr	r3, [r3, #8]
 8003f1c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003f22:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	691b      	ldr	r3, [r3, #16]
 8003f28:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f2e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	699b      	ldr	r3, [r3, #24]
 8003f34:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f3a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6a1b      	ldr	r3, [r3, #32]
 8003f40:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003f42:	697a      	ldr	r2, [r7, #20]
 8003f44:	4313      	orrs	r3, r2
 8003f46:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f4c:	2b04      	cmp	r3, #4
 8003f4e:	d107      	bne.n	8003f60 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	697a      	ldr	r2, [r7, #20]
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	697a      	ldr	r2, [r7, #20]
 8003f66:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	695b      	ldr	r3, [r3, #20]
 8003f6e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	f023 0307 	bic.w	r3, r3, #7
 8003f76:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f7c:	697a      	ldr	r2, [r7, #20]
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f86:	2b04      	cmp	r3, #4
 8003f88:	d117      	bne.n	8003fba <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f8e:	697a      	ldr	r2, [r7, #20]
 8003f90:	4313      	orrs	r3, r2
 8003f92:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d00e      	beq.n	8003fba <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003f9c:	6878      	ldr	r0, [r7, #4]
 8003f9e:	f000 fb67 	bl	8004670 <DMA_CheckFifoParam>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d008      	beq.n	8003fba <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2240      	movs	r2, #64	; 0x40
 8003fac:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2201      	movs	r2, #1
 8003fb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	e016      	b.n	8003fe8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	697a      	ldr	r2, [r7, #20]
 8003fc0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003fc2:	6878      	ldr	r0, [r7, #4]
 8003fc4:	f000 fb1e 	bl	8004604 <DMA_CalcBaseAndBitshift>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fd0:	223f      	movs	r2, #63	; 0x3f
 8003fd2:	409a      	lsls	r2, r3
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2201      	movs	r2, #1
 8003fe2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003fe6:	2300      	movs	r3, #0
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	3718      	adds	r7, #24
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd80      	pop	{r7, pc}
 8003ff0:	f010803f 	.word	0xf010803f

08003ff4 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b084      	sub	sp, #16
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d101      	bne.n	8004006 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8004002:	2301      	movs	r3, #1
 8004004:	e050      	b.n	80040a8 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800400c:	b2db      	uxtb	r3, r3
 800400e:	2b02      	cmp	r3, #2
 8004010:	d101      	bne.n	8004016 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8004012:	2302      	movs	r3, #2
 8004014:	e048      	b.n	80040a8 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	681a      	ldr	r2, [r3, #0]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f022 0201 	bic.w	r2, r2, #1
 8004024:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	2200      	movs	r2, #0
 800402c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	2200      	movs	r2, #0
 8004034:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	2200      	movs	r2, #0
 800403c:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	2200      	movs	r2, #0
 8004044:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	2200      	movs	r2, #0
 800404c:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	2221      	movs	r2, #33	; 0x21
 8004054:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004056:	6878      	ldr	r0, [r7, #4]
 8004058:	f000 fad4 	bl	8004604 <DMA_CalcBaseAndBitshift>
 800405c:	4603      	mov	r3, r0
 800405e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004064:	223f      	movs	r2, #63	; 0x3f
 8004066:	409a      	lsls	r2, r3
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2200      	movs	r2, #0
 8004070:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2200      	movs	r2, #0
 8004076:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2200      	movs	r2, #0
 800407c:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2200      	movs	r2, #0
 8004082:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2200      	movs	r2, #0
 8004088:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2200      	movs	r2, #0
 800408e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2200      	movs	r2, #0
 8004094:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2200      	movs	r2, #0
 800409a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2200      	movs	r2, #0
 80040a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80040a6:	2300      	movs	r3, #0
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	3710      	adds	r7, #16
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bd80      	pop	{r7, pc}

080040b0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b086      	sub	sp, #24
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	60f8      	str	r0, [r7, #12]
 80040b8:	60b9      	str	r1, [r7, #8]
 80040ba:	607a      	str	r2, [r7, #4]
 80040bc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80040be:	2300      	movs	r3, #0
 80040c0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040c6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80040ce:	2b01      	cmp	r3, #1
 80040d0:	d101      	bne.n	80040d6 <HAL_DMA_Start_IT+0x26>
 80040d2:	2302      	movs	r3, #2
 80040d4:	e048      	b.n	8004168 <HAL_DMA_Start_IT+0xb8>
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	2201      	movs	r2, #1
 80040da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80040e4:	b2db      	uxtb	r3, r3
 80040e6:	2b01      	cmp	r3, #1
 80040e8:	d137      	bne.n	800415a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	2202      	movs	r2, #2
 80040ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	2200      	movs	r2, #0
 80040f6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	687a      	ldr	r2, [r7, #4]
 80040fc:	68b9      	ldr	r1, [r7, #8]
 80040fe:	68f8      	ldr	r0, [r7, #12]
 8004100:	f000 fa52 	bl	80045a8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004108:	223f      	movs	r2, #63	; 0x3f
 800410a:	409a      	lsls	r2, r3
 800410c:	693b      	ldr	r3, [r7, #16]
 800410e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	681a      	ldr	r2, [r3, #0]
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f042 0216 	orr.w	r2, r2, #22
 800411e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	695a      	ldr	r2, [r3, #20]
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800412e:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004134:	2b00      	cmp	r3, #0
 8004136:	d007      	beq.n	8004148 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	681a      	ldr	r2, [r3, #0]
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f042 0208 	orr.w	r2, r2, #8
 8004146:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	681a      	ldr	r2, [r3, #0]
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f042 0201 	orr.w	r2, r2, #1
 8004156:	601a      	str	r2, [r3, #0]
 8004158:	e005      	b.n	8004166 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	2200      	movs	r2, #0
 800415e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004162:	2302      	movs	r3, #2
 8004164:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004166:	7dfb      	ldrb	r3, [r7, #23]
}
 8004168:	4618      	mov	r0, r3
 800416a:	3718      	adds	r7, #24
 800416c:	46bd      	mov	sp, r7
 800416e:	bd80      	pop	{r7, pc}

08004170 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b084      	sub	sp, #16
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800417c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800417e:	f7ff f9ed 	bl	800355c <HAL_GetTick>
 8004182:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800418a:	b2db      	uxtb	r3, r3
 800418c:	2b02      	cmp	r3, #2
 800418e:	d008      	beq.n	80041a2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2280      	movs	r2, #128	; 0x80
 8004194:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2200      	movs	r2, #0
 800419a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800419e:	2301      	movs	r3, #1
 80041a0:	e052      	b.n	8004248 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	681a      	ldr	r2, [r3, #0]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f022 0216 	bic.w	r2, r2, #22
 80041b0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	695a      	ldr	r2, [r3, #20]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80041c0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d103      	bne.n	80041d2 <HAL_DMA_Abort+0x62>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d007      	beq.n	80041e2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	681a      	ldr	r2, [r3, #0]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f022 0208 	bic.w	r2, r2, #8
 80041e0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	681a      	ldr	r2, [r3, #0]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f022 0201 	bic.w	r2, r2, #1
 80041f0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80041f2:	e013      	b.n	800421c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80041f4:	f7ff f9b2 	bl	800355c <HAL_GetTick>
 80041f8:	4602      	mov	r2, r0
 80041fa:	68bb      	ldr	r3, [r7, #8]
 80041fc:	1ad3      	subs	r3, r2, r3
 80041fe:	2b05      	cmp	r3, #5
 8004200:	d90c      	bls.n	800421c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2220      	movs	r2, #32
 8004206:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2203      	movs	r2, #3
 800420c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2200      	movs	r2, #0
 8004214:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8004218:	2303      	movs	r3, #3
 800421a:	e015      	b.n	8004248 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f003 0301 	and.w	r3, r3, #1
 8004226:	2b00      	cmp	r3, #0
 8004228:	d1e4      	bne.n	80041f4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800422e:	223f      	movs	r2, #63	; 0x3f
 8004230:	409a      	lsls	r2, r3
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2201      	movs	r2, #1
 800423a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2200      	movs	r2, #0
 8004242:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8004246:	2300      	movs	r3, #0
}
 8004248:	4618      	mov	r0, r3
 800424a:	3710      	adds	r7, #16
 800424c:	46bd      	mov	sp, r7
 800424e:	bd80      	pop	{r7, pc}

08004250 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004250:	b480      	push	{r7}
 8004252:	b083      	sub	sp, #12
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800425e:	b2db      	uxtb	r3, r3
 8004260:	2b02      	cmp	r3, #2
 8004262:	d004      	beq.n	800426e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2280      	movs	r2, #128	; 0x80
 8004268:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800426a:	2301      	movs	r3, #1
 800426c:	e00c      	b.n	8004288 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2205      	movs	r2, #5
 8004272:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	681a      	ldr	r2, [r3, #0]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f022 0201 	bic.w	r2, r2, #1
 8004284:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004286:	2300      	movs	r3, #0
}
 8004288:	4618      	mov	r0, r3
 800428a:	370c      	adds	r7, #12
 800428c:	46bd      	mov	sp, r7
 800428e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004292:	4770      	bx	lr

08004294 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b086      	sub	sp, #24
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 800429c:	2300      	movs	r3, #0
 800429e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80042a0:	4b92      	ldr	r3, [pc, #584]	; (80044ec <HAL_DMA_IRQHandler+0x258>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a92      	ldr	r2, [pc, #584]	; (80044f0 <HAL_DMA_IRQHandler+0x25c>)
 80042a6:	fba2 2303 	umull	r2, r3, r2, r3
 80042aa:	0a9b      	lsrs	r3, r3, #10
 80042ac:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042b2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80042b4:	693b      	ldr	r3, [r7, #16]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042be:	2208      	movs	r2, #8
 80042c0:	409a      	lsls	r2, r3
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	4013      	ands	r3, r2
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d01a      	beq.n	8004300 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f003 0304 	and.w	r3, r3, #4
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d013      	beq.n	8004300 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	681a      	ldr	r2, [r3, #0]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f022 0204 	bic.w	r2, r2, #4
 80042e6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042ec:	2208      	movs	r2, #8
 80042ee:	409a      	lsls	r2, r3
 80042f0:	693b      	ldr	r3, [r7, #16]
 80042f2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042f8:	f043 0201 	orr.w	r2, r3, #1
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004304:	2201      	movs	r2, #1
 8004306:	409a      	lsls	r2, r3
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	4013      	ands	r3, r2
 800430c:	2b00      	cmp	r3, #0
 800430e:	d012      	beq.n	8004336 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	695b      	ldr	r3, [r3, #20]
 8004316:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800431a:	2b00      	cmp	r3, #0
 800431c:	d00b      	beq.n	8004336 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004322:	2201      	movs	r2, #1
 8004324:	409a      	lsls	r2, r3
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800432e:	f043 0202 	orr.w	r2, r3, #2
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800433a:	2204      	movs	r2, #4
 800433c:	409a      	lsls	r2, r3
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	4013      	ands	r3, r2
 8004342:	2b00      	cmp	r3, #0
 8004344:	d012      	beq.n	800436c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f003 0302 	and.w	r3, r3, #2
 8004350:	2b00      	cmp	r3, #0
 8004352:	d00b      	beq.n	800436c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004358:	2204      	movs	r2, #4
 800435a:	409a      	lsls	r2, r3
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004364:	f043 0204 	orr.w	r2, r3, #4
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004370:	2210      	movs	r2, #16
 8004372:	409a      	lsls	r2, r3
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	4013      	ands	r3, r2
 8004378:	2b00      	cmp	r3, #0
 800437a:	d043      	beq.n	8004404 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f003 0308 	and.w	r3, r3, #8
 8004386:	2b00      	cmp	r3, #0
 8004388:	d03c      	beq.n	8004404 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800438e:	2210      	movs	r2, #16
 8004390:	409a      	lsls	r2, r3
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d018      	beq.n	80043d6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d108      	bne.n	80043c4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d024      	beq.n	8004404 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043be:	6878      	ldr	r0, [r7, #4]
 80043c0:	4798      	blx	r3
 80043c2:	e01f      	b.n	8004404 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d01b      	beq.n	8004404 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043d0:	6878      	ldr	r0, [r7, #4]
 80043d2:	4798      	blx	r3
 80043d4:	e016      	b.n	8004404 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d107      	bne.n	80043f4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	681a      	ldr	r2, [r3, #0]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f022 0208 	bic.w	r2, r2, #8
 80043f2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d003      	beq.n	8004404 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004400:	6878      	ldr	r0, [r7, #4]
 8004402:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004408:	2220      	movs	r2, #32
 800440a:	409a      	lsls	r2, r3
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	4013      	ands	r3, r2
 8004410:	2b00      	cmp	r3, #0
 8004412:	f000 808e 	beq.w	8004532 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f003 0310 	and.w	r3, r3, #16
 8004420:	2b00      	cmp	r3, #0
 8004422:	f000 8086 	beq.w	8004532 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800442a:	2220      	movs	r2, #32
 800442c:	409a      	lsls	r2, r3
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004438:	b2db      	uxtb	r3, r3
 800443a:	2b05      	cmp	r3, #5
 800443c:	d136      	bne.n	80044ac <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	681a      	ldr	r2, [r3, #0]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f022 0216 	bic.w	r2, r2, #22
 800444c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	695a      	ldr	r2, [r3, #20]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800445c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004462:	2b00      	cmp	r3, #0
 8004464:	d103      	bne.n	800446e <HAL_DMA_IRQHandler+0x1da>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800446a:	2b00      	cmp	r3, #0
 800446c:	d007      	beq.n	800447e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	681a      	ldr	r2, [r3, #0]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f022 0208 	bic.w	r2, r2, #8
 800447c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004482:	223f      	movs	r2, #63	; 0x3f
 8004484:	409a      	lsls	r2, r3
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2201      	movs	r2, #1
 800448e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2200      	movs	r2, #0
 8004496:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d07d      	beq.n	800459e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044a6:	6878      	ldr	r0, [r7, #4]
 80044a8:	4798      	blx	r3
        }
        return;
 80044aa:	e078      	b.n	800459e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d01c      	beq.n	80044f4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d108      	bne.n	80044da <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d030      	beq.n	8004532 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044d4:	6878      	ldr	r0, [r7, #4]
 80044d6:	4798      	blx	r3
 80044d8:	e02b      	b.n	8004532 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d027      	beq.n	8004532 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044e6:	6878      	ldr	r0, [r7, #4]
 80044e8:	4798      	blx	r3
 80044ea:	e022      	b.n	8004532 <HAL_DMA_IRQHandler+0x29e>
 80044ec:	20000018 	.word	0x20000018
 80044f0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d10f      	bne.n	8004522 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	681a      	ldr	r2, [r3, #0]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f022 0210 	bic.w	r2, r2, #16
 8004510:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2201      	movs	r2, #1
 8004516:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2200      	movs	r2, #0
 800451e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004526:	2b00      	cmp	r3, #0
 8004528:	d003      	beq.n	8004532 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800452e:	6878      	ldr	r0, [r7, #4]
 8004530:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004536:	2b00      	cmp	r3, #0
 8004538:	d032      	beq.n	80045a0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800453e:	f003 0301 	and.w	r3, r3, #1
 8004542:	2b00      	cmp	r3, #0
 8004544:	d022      	beq.n	800458c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2205      	movs	r2, #5
 800454a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	681a      	ldr	r2, [r3, #0]
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f022 0201 	bic.w	r2, r2, #1
 800455c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	3301      	adds	r3, #1
 8004562:	60bb      	str	r3, [r7, #8]
 8004564:	697a      	ldr	r2, [r7, #20]
 8004566:	429a      	cmp	r2, r3
 8004568:	d307      	bcc.n	800457a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f003 0301 	and.w	r3, r3, #1
 8004574:	2b00      	cmp	r3, #0
 8004576:	d1f2      	bne.n	800455e <HAL_DMA_IRQHandler+0x2ca>
 8004578:	e000      	b.n	800457c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800457a:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2201      	movs	r2, #1
 8004580:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2200      	movs	r2, #0
 8004588:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004590:	2b00      	cmp	r3, #0
 8004592:	d005      	beq.n	80045a0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004598:	6878      	ldr	r0, [r7, #4]
 800459a:	4798      	blx	r3
 800459c:	e000      	b.n	80045a0 <HAL_DMA_IRQHandler+0x30c>
        return;
 800459e:	bf00      	nop
    }
  }
}
 80045a0:	3718      	adds	r7, #24
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bd80      	pop	{r7, pc}
 80045a6:	bf00      	nop

080045a8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80045a8:	b480      	push	{r7}
 80045aa:	b085      	sub	sp, #20
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	60f8      	str	r0, [r7, #12]
 80045b0:	60b9      	str	r1, [r7, #8]
 80045b2:	607a      	str	r2, [r7, #4]
 80045b4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	681a      	ldr	r2, [r3, #0]
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80045c4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	683a      	ldr	r2, [r7, #0]
 80045cc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	689b      	ldr	r3, [r3, #8]
 80045d2:	2b40      	cmp	r3, #64	; 0x40
 80045d4:	d108      	bne.n	80045e8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	687a      	ldr	r2, [r7, #4]
 80045dc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	68ba      	ldr	r2, [r7, #8]
 80045e4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80045e6:	e007      	b.n	80045f8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	68ba      	ldr	r2, [r7, #8]
 80045ee:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	687a      	ldr	r2, [r7, #4]
 80045f6:	60da      	str	r2, [r3, #12]
}
 80045f8:	bf00      	nop
 80045fa:	3714      	adds	r7, #20
 80045fc:	46bd      	mov	sp, r7
 80045fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004602:	4770      	bx	lr

08004604 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004604:	b480      	push	{r7}
 8004606:	b085      	sub	sp, #20
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	b2db      	uxtb	r3, r3
 8004612:	3b10      	subs	r3, #16
 8004614:	4a13      	ldr	r2, [pc, #76]	; (8004664 <DMA_CalcBaseAndBitshift+0x60>)
 8004616:	fba2 2303 	umull	r2, r3, r2, r3
 800461a:	091b      	lsrs	r3, r3, #4
 800461c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800461e:	4a12      	ldr	r2, [pc, #72]	; (8004668 <DMA_CalcBaseAndBitshift+0x64>)
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	4413      	add	r3, r2
 8004624:	781b      	ldrb	r3, [r3, #0]
 8004626:	461a      	mov	r2, r3
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2b03      	cmp	r3, #3
 8004630:	d908      	bls.n	8004644 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	461a      	mov	r2, r3
 8004638:	4b0c      	ldr	r3, [pc, #48]	; (800466c <DMA_CalcBaseAndBitshift+0x68>)
 800463a:	4013      	ands	r3, r2
 800463c:	1d1a      	adds	r2, r3, #4
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	659a      	str	r2, [r3, #88]	; 0x58
 8004642:	e006      	b.n	8004652 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	461a      	mov	r2, r3
 800464a:	4b08      	ldr	r3, [pc, #32]	; (800466c <DMA_CalcBaseAndBitshift+0x68>)
 800464c:	4013      	ands	r3, r2
 800464e:	687a      	ldr	r2, [r7, #4]
 8004650:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004656:	4618      	mov	r0, r3
 8004658:	3714      	adds	r7, #20
 800465a:	46bd      	mov	sp, r7
 800465c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004660:	4770      	bx	lr
 8004662:	bf00      	nop
 8004664:	aaaaaaab 	.word	0xaaaaaaab
 8004668:	0801ca20 	.word	0x0801ca20
 800466c:	fffffc00 	.word	0xfffffc00

08004670 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004670:	b480      	push	{r7}
 8004672:	b085      	sub	sp, #20
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004678:	2300      	movs	r3, #0
 800467a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004680:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	699b      	ldr	r3, [r3, #24]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d11f      	bne.n	80046ca <DMA_CheckFifoParam+0x5a>
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	2b03      	cmp	r3, #3
 800468e:	d856      	bhi.n	800473e <DMA_CheckFifoParam+0xce>
 8004690:	a201      	add	r2, pc, #4	; (adr r2, 8004698 <DMA_CheckFifoParam+0x28>)
 8004692:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004696:	bf00      	nop
 8004698:	080046a9 	.word	0x080046a9
 800469c:	080046bb 	.word	0x080046bb
 80046a0:	080046a9 	.word	0x080046a9
 80046a4:	0800473f 	.word	0x0800473f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d046      	beq.n	8004742 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80046b4:	2301      	movs	r3, #1
 80046b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80046b8:	e043      	b.n	8004742 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046be:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80046c2:	d140      	bne.n	8004746 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80046c4:	2301      	movs	r3, #1
 80046c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80046c8:	e03d      	b.n	8004746 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	699b      	ldr	r3, [r3, #24]
 80046ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046d2:	d121      	bne.n	8004718 <DMA_CheckFifoParam+0xa8>
 80046d4:	68bb      	ldr	r3, [r7, #8]
 80046d6:	2b03      	cmp	r3, #3
 80046d8:	d837      	bhi.n	800474a <DMA_CheckFifoParam+0xda>
 80046da:	a201      	add	r2, pc, #4	; (adr r2, 80046e0 <DMA_CheckFifoParam+0x70>)
 80046dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046e0:	080046f1 	.word	0x080046f1
 80046e4:	080046f7 	.word	0x080046f7
 80046e8:	080046f1 	.word	0x080046f1
 80046ec:	08004709 	.word	0x08004709
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80046f0:	2301      	movs	r3, #1
 80046f2:	73fb      	strb	r3, [r7, #15]
      break;
 80046f4:	e030      	b.n	8004758 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046fa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d025      	beq.n	800474e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004702:	2301      	movs	r3, #1
 8004704:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004706:	e022      	b.n	800474e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800470c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004710:	d11f      	bne.n	8004752 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004712:	2301      	movs	r3, #1
 8004714:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004716:	e01c      	b.n	8004752 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	2b02      	cmp	r3, #2
 800471c:	d903      	bls.n	8004726 <DMA_CheckFifoParam+0xb6>
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	2b03      	cmp	r3, #3
 8004722:	d003      	beq.n	800472c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004724:	e018      	b.n	8004758 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004726:	2301      	movs	r3, #1
 8004728:	73fb      	strb	r3, [r7, #15]
      break;
 800472a:	e015      	b.n	8004758 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004730:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004734:	2b00      	cmp	r3, #0
 8004736:	d00e      	beq.n	8004756 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004738:	2301      	movs	r3, #1
 800473a:	73fb      	strb	r3, [r7, #15]
      break;
 800473c:	e00b      	b.n	8004756 <DMA_CheckFifoParam+0xe6>
      break;
 800473e:	bf00      	nop
 8004740:	e00a      	b.n	8004758 <DMA_CheckFifoParam+0xe8>
      break;
 8004742:	bf00      	nop
 8004744:	e008      	b.n	8004758 <DMA_CheckFifoParam+0xe8>
      break;
 8004746:	bf00      	nop
 8004748:	e006      	b.n	8004758 <DMA_CheckFifoParam+0xe8>
      break;
 800474a:	bf00      	nop
 800474c:	e004      	b.n	8004758 <DMA_CheckFifoParam+0xe8>
      break;
 800474e:	bf00      	nop
 8004750:	e002      	b.n	8004758 <DMA_CheckFifoParam+0xe8>
      break;   
 8004752:	bf00      	nop
 8004754:	e000      	b.n	8004758 <DMA_CheckFifoParam+0xe8>
      break;
 8004756:	bf00      	nop
    }
  } 
  
  return status; 
 8004758:	7bfb      	ldrb	r3, [r7, #15]
}
 800475a:	4618      	mov	r0, r3
 800475c:	3714      	adds	r7, #20
 800475e:	46bd      	mov	sp, r7
 8004760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004764:	4770      	bx	lr
 8004766:	bf00      	nop

08004768 <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress The second memory Buffer address in case of multi buffer Transfer  
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b086      	sub	sp, #24
 800476c:	af00      	add	r7, sp, #0
 800476e:	60f8      	str	r0, [r7, #12]
 8004770:	60b9      	str	r1, [r7, #8]
 8004772:	607a      	str	r2, [r7, #4]
 8004774:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004776:	2300      	movs	r3, #0
 8004778:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Memory-to-memory transfer not supported in double buffering mode */
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	689b      	ldr	r3, [r3, #8]
 800477e:	2b80      	cmp	r3, #128	; 0x80
 8004780:	d106      	bne.n	8004790 <HAL_DMAEx_MultiBufferStart_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004788:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800478a:	2301      	movs	r3, #1
 800478c:	f001 b901 	b.w	8005992 <HAL_DMAEx_MultiBufferStart_IT+0x122a>
  }
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004796:	2b01      	cmp	r3, #1
 8004798:	d102      	bne.n	80047a0 <HAL_DMAEx_MultiBufferStart_IT+0x38>
 800479a:	2302      	movs	r3, #2
 800479c:	f001 b8f9 	b.w	8005992 <HAL_DMAEx_MultiBufferStart_IT+0x122a>
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	2201      	movs	r2, #1
 80047a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80047ae:	b2db      	uxtb	r3, r3
 80047b0:	2b01      	cmp	r3, #1
 80047b2:	f041 80e7 	bne.w	8005984 <HAL_DMAEx_MultiBufferStart_IT+0x121c>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	2202      	movs	r2, #2
 80047ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	2200      	movs	r2, #0
 80047c2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Enable the Double buffer mode */
    hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	681a      	ldr	r2, [r3, #0]
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80047d2:	601a      	str	r2, [r3, #0]
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M1AR = SecondMemAddress;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	683a      	ldr	r2, [r7, #0]
 80047da:	611a      	str	r2, [r3, #16]
    
    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength); 
 80047dc:	6a3b      	ldr	r3, [r7, #32]
 80047de:	687a      	ldr	r2, [r7, #4]
 80047e0:	68b9      	ldr	r1, [r7, #8]
 80047e2:	68f8      	ldr	r0, [r7, #12]
 80047e4:	f001 f910 	bl	8005a08 <DMA_MultiBufferSetConfig>
    
    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	461a      	mov	r2, r3
 80047ee:	4b99      	ldr	r3, [pc, #612]	; (8004a54 <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 80047f0:	429a      	cmp	r2, r3
 80047f2:	d960      	bls.n	80048b6 <HAL_DMAEx_MultiBufferStart_IT+0x14e>
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a97      	ldr	r2, [pc, #604]	; (8004a58 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d057      	beq.n	80048ae <HAL_DMAEx_MultiBufferStart_IT+0x146>
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4a96      	ldr	r2, [pc, #600]	; (8004a5c <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d050      	beq.n	80048aa <HAL_DMAEx_MultiBufferStart_IT+0x142>
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4a94      	ldr	r2, [pc, #592]	; (8004a60 <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d049      	beq.n	80048a6 <HAL_DMAEx_MultiBufferStart_IT+0x13e>
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4a93      	ldr	r2, [pc, #588]	; (8004a64 <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d042      	beq.n	80048a2 <HAL_DMAEx_MultiBufferStart_IT+0x13a>
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a91      	ldr	r2, [pc, #580]	; (8004a68 <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d03a      	beq.n	800489c <HAL_DMAEx_MultiBufferStart_IT+0x134>
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a90      	ldr	r2, [pc, #576]	; (8004a6c <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d032      	beq.n	8004896 <HAL_DMAEx_MultiBufferStart_IT+0x12e>
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4a8e      	ldr	r2, [pc, #568]	; (8004a70 <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d02a      	beq.n	8004890 <HAL_DMAEx_MultiBufferStart_IT+0x128>
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4a8d      	ldr	r2, [pc, #564]	; (8004a74 <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d022      	beq.n	800488a <HAL_DMAEx_MultiBufferStart_IT+0x122>
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a8b      	ldr	r2, [pc, #556]	; (8004a78 <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d01a      	beq.n	8004884 <HAL_DMAEx_MultiBufferStart_IT+0x11c>
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4a8a      	ldr	r2, [pc, #552]	; (8004a7c <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d012      	beq.n	800487e <HAL_DMAEx_MultiBufferStart_IT+0x116>
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a88      	ldr	r2, [pc, #544]	; (8004a80 <HAL_DMAEx_MultiBufferStart_IT+0x318>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d00a      	beq.n	8004878 <HAL_DMAEx_MultiBufferStart_IT+0x110>
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a87      	ldr	r2, [pc, #540]	; (8004a84 <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d102      	bne.n	8004872 <HAL_DMAEx_MultiBufferStart_IT+0x10a>
 800486c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004870:	e01e      	b.n	80048b0 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 8004872:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004876:	e01b      	b.n	80048b0 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 8004878:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800487c:	e018      	b.n	80048b0 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 800487e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004882:	e015      	b.n	80048b0 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 8004884:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004888:	e012      	b.n	80048b0 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 800488a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800488e:	e00f      	b.n	80048b0 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 8004890:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004894:	e00c      	b.n	80048b0 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 8004896:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800489a:	e009      	b.n	80048b0 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 800489c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80048a0:	e006      	b.n	80048b0 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 80048a2:	2320      	movs	r3, #32
 80048a4:	e004      	b.n	80048b0 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 80048a6:	2320      	movs	r3, #32
 80048a8:	e002      	b.n	80048b0 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 80048aa:	2320      	movs	r3, #32
 80048ac:	e000      	b.n	80048b0 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 80048ae:	2320      	movs	r3, #32
 80048b0:	4a75      	ldr	r2, [pc, #468]	; (8004a88 <HAL_DMAEx_MultiBufferStart_IT+0x320>)
 80048b2:	60d3      	str	r3, [r2, #12]
 80048b4:	e150      	b.n	8004b58 <HAL_DMAEx_MultiBufferStart_IT+0x3f0>
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	461a      	mov	r2, r3
 80048bc:	4b73      	ldr	r3, [pc, #460]	; (8004a8c <HAL_DMAEx_MultiBufferStart_IT+0x324>)
 80048be:	429a      	cmp	r2, r3
 80048c0:	d960      	bls.n	8004984 <HAL_DMAEx_MultiBufferStart_IT+0x21c>
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4a64      	ldr	r2, [pc, #400]	; (8004a58 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d057      	beq.n	800497c <HAL_DMAEx_MultiBufferStart_IT+0x214>
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4a62      	ldr	r2, [pc, #392]	; (8004a5c <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d050      	beq.n	8004978 <HAL_DMAEx_MultiBufferStart_IT+0x210>
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4a61      	ldr	r2, [pc, #388]	; (8004a60 <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d049      	beq.n	8004974 <HAL_DMAEx_MultiBufferStart_IT+0x20c>
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4a5f      	ldr	r2, [pc, #380]	; (8004a64 <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d042      	beq.n	8004970 <HAL_DMAEx_MultiBufferStart_IT+0x208>
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4a5e      	ldr	r2, [pc, #376]	; (8004a68 <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d03a      	beq.n	800496a <HAL_DMAEx_MultiBufferStart_IT+0x202>
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4a5c      	ldr	r2, [pc, #368]	; (8004a6c <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d032      	beq.n	8004964 <HAL_DMAEx_MultiBufferStart_IT+0x1fc>
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4a5b      	ldr	r2, [pc, #364]	; (8004a70 <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d02a      	beq.n	800495e <HAL_DMAEx_MultiBufferStart_IT+0x1f6>
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a59      	ldr	r2, [pc, #356]	; (8004a74 <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d022      	beq.n	8004958 <HAL_DMAEx_MultiBufferStart_IT+0x1f0>
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4a58      	ldr	r2, [pc, #352]	; (8004a78 <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d01a      	beq.n	8004952 <HAL_DMAEx_MultiBufferStart_IT+0x1ea>
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4a56      	ldr	r2, [pc, #344]	; (8004a7c <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d012      	beq.n	800494c <HAL_DMAEx_MultiBufferStart_IT+0x1e4>
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4a55      	ldr	r2, [pc, #340]	; (8004a80 <HAL_DMAEx_MultiBufferStart_IT+0x318>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d00a      	beq.n	8004946 <HAL_DMAEx_MultiBufferStart_IT+0x1de>
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a53      	ldr	r2, [pc, #332]	; (8004a84 <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d102      	bne.n	8004940 <HAL_DMAEx_MultiBufferStart_IT+0x1d8>
 800493a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800493e:	e01e      	b.n	800497e <HAL_DMAEx_MultiBufferStart_IT+0x216>
 8004940:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004944:	e01b      	b.n	800497e <HAL_DMAEx_MultiBufferStart_IT+0x216>
 8004946:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800494a:	e018      	b.n	800497e <HAL_DMAEx_MultiBufferStart_IT+0x216>
 800494c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004950:	e015      	b.n	800497e <HAL_DMAEx_MultiBufferStart_IT+0x216>
 8004952:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004956:	e012      	b.n	800497e <HAL_DMAEx_MultiBufferStart_IT+0x216>
 8004958:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800495c:	e00f      	b.n	800497e <HAL_DMAEx_MultiBufferStart_IT+0x216>
 800495e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004962:	e00c      	b.n	800497e <HAL_DMAEx_MultiBufferStart_IT+0x216>
 8004964:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004968:	e009      	b.n	800497e <HAL_DMAEx_MultiBufferStart_IT+0x216>
 800496a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800496e:	e006      	b.n	800497e <HAL_DMAEx_MultiBufferStart_IT+0x216>
 8004970:	2320      	movs	r3, #32
 8004972:	e004      	b.n	800497e <HAL_DMAEx_MultiBufferStart_IT+0x216>
 8004974:	2320      	movs	r3, #32
 8004976:	e002      	b.n	800497e <HAL_DMAEx_MultiBufferStart_IT+0x216>
 8004978:	2320      	movs	r3, #32
 800497a:	e000      	b.n	800497e <HAL_DMAEx_MultiBufferStart_IT+0x216>
 800497c:	2320      	movs	r3, #32
 800497e:	4a42      	ldr	r2, [pc, #264]	; (8004a88 <HAL_DMAEx_MultiBufferStart_IT+0x320>)
 8004980:	6093      	str	r3, [r2, #8]
 8004982:	e0e9      	b.n	8004b58 <HAL_DMAEx_MultiBufferStart_IT+0x3f0>
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	461a      	mov	r2, r3
 800498a:	4b41      	ldr	r3, [pc, #260]	; (8004a90 <HAL_DMAEx_MultiBufferStart_IT+0x328>)
 800498c:	429a      	cmp	r2, r3
 800498e:	f240 8083 	bls.w	8004a98 <HAL_DMAEx_MultiBufferStart_IT+0x330>
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a30      	ldr	r2, [pc, #192]	; (8004a58 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d057      	beq.n	8004a4c <HAL_DMAEx_MultiBufferStart_IT+0x2e4>
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4a2e      	ldr	r2, [pc, #184]	; (8004a5c <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d050      	beq.n	8004a48 <HAL_DMAEx_MultiBufferStart_IT+0x2e0>
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4a2d      	ldr	r2, [pc, #180]	; (8004a60 <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d049      	beq.n	8004a44 <HAL_DMAEx_MultiBufferStart_IT+0x2dc>
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a2b      	ldr	r2, [pc, #172]	; (8004a64 <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d042      	beq.n	8004a40 <HAL_DMAEx_MultiBufferStart_IT+0x2d8>
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a2a      	ldr	r2, [pc, #168]	; (8004a68 <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d03a      	beq.n	8004a3a <HAL_DMAEx_MultiBufferStart_IT+0x2d2>
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a28      	ldr	r2, [pc, #160]	; (8004a6c <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d032      	beq.n	8004a34 <HAL_DMAEx_MultiBufferStart_IT+0x2cc>
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4a27      	ldr	r2, [pc, #156]	; (8004a70 <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d02a      	beq.n	8004a2e <HAL_DMAEx_MultiBufferStart_IT+0x2c6>
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a25      	ldr	r2, [pc, #148]	; (8004a74 <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d022      	beq.n	8004a28 <HAL_DMAEx_MultiBufferStart_IT+0x2c0>
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4a24      	ldr	r2, [pc, #144]	; (8004a78 <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d01a      	beq.n	8004a22 <HAL_DMAEx_MultiBufferStart_IT+0x2ba>
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4a22      	ldr	r2, [pc, #136]	; (8004a7c <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d012      	beq.n	8004a1c <HAL_DMAEx_MultiBufferStart_IT+0x2b4>
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4a21      	ldr	r2, [pc, #132]	; (8004a80 <HAL_DMAEx_MultiBufferStart_IT+0x318>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d00a      	beq.n	8004a16 <HAL_DMAEx_MultiBufferStart_IT+0x2ae>
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a1f      	ldr	r2, [pc, #124]	; (8004a84 <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d102      	bne.n	8004a10 <HAL_DMAEx_MultiBufferStart_IT+0x2a8>
 8004a0a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004a0e:	e01e      	b.n	8004a4e <HAL_DMAEx_MultiBufferStart_IT+0x2e6>
 8004a10:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004a14:	e01b      	b.n	8004a4e <HAL_DMAEx_MultiBufferStart_IT+0x2e6>
 8004a16:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004a1a:	e018      	b.n	8004a4e <HAL_DMAEx_MultiBufferStart_IT+0x2e6>
 8004a1c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004a20:	e015      	b.n	8004a4e <HAL_DMAEx_MultiBufferStart_IT+0x2e6>
 8004a22:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004a26:	e012      	b.n	8004a4e <HAL_DMAEx_MultiBufferStart_IT+0x2e6>
 8004a28:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004a2c:	e00f      	b.n	8004a4e <HAL_DMAEx_MultiBufferStart_IT+0x2e6>
 8004a2e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004a32:	e00c      	b.n	8004a4e <HAL_DMAEx_MultiBufferStart_IT+0x2e6>
 8004a34:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004a38:	e009      	b.n	8004a4e <HAL_DMAEx_MultiBufferStart_IT+0x2e6>
 8004a3a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004a3e:	e006      	b.n	8004a4e <HAL_DMAEx_MultiBufferStart_IT+0x2e6>
 8004a40:	2320      	movs	r3, #32
 8004a42:	e004      	b.n	8004a4e <HAL_DMAEx_MultiBufferStart_IT+0x2e6>
 8004a44:	2320      	movs	r3, #32
 8004a46:	e002      	b.n	8004a4e <HAL_DMAEx_MultiBufferStart_IT+0x2e6>
 8004a48:	2320      	movs	r3, #32
 8004a4a:	e000      	b.n	8004a4e <HAL_DMAEx_MultiBufferStart_IT+0x2e6>
 8004a4c:	2320      	movs	r3, #32
 8004a4e:	4a11      	ldr	r2, [pc, #68]	; (8004a94 <HAL_DMAEx_MultiBufferStart_IT+0x32c>)
 8004a50:	60d3      	str	r3, [r2, #12]
 8004a52:	e081      	b.n	8004b58 <HAL_DMAEx_MultiBufferStart_IT+0x3f0>
 8004a54:	40026458 	.word	0x40026458
 8004a58:	40026010 	.word	0x40026010
 8004a5c:	40026410 	.word	0x40026410
 8004a60:	40026070 	.word	0x40026070
 8004a64:	40026470 	.word	0x40026470
 8004a68:	40026028 	.word	0x40026028
 8004a6c:	40026428 	.word	0x40026428
 8004a70:	40026088 	.word	0x40026088
 8004a74:	40026488 	.word	0x40026488
 8004a78:	40026040 	.word	0x40026040
 8004a7c:	40026440 	.word	0x40026440
 8004a80:	400260a0 	.word	0x400260a0
 8004a84:	400264a0 	.word	0x400264a0
 8004a88:	40026400 	.word	0x40026400
 8004a8c:	400260b8 	.word	0x400260b8
 8004a90:	40026058 	.word	0x40026058
 8004a94:	40026000 	.word	0x40026000
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a96      	ldr	r2, [pc, #600]	; (8004cf8 <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d057      	beq.n	8004b52 <HAL_DMAEx_MultiBufferStart_IT+0x3ea>
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a95      	ldr	r2, [pc, #596]	; (8004cfc <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d050      	beq.n	8004b4e <HAL_DMAEx_MultiBufferStart_IT+0x3e6>
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a93      	ldr	r2, [pc, #588]	; (8004d00 <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d049      	beq.n	8004b4a <HAL_DMAEx_MultiBufferStart_IT+0x3e2>
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a92      	ldr	r2, [pc, #584]	; (8004d04 <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d042      	beq.n	8004b46 <HAL_DMAEx_MultiBufferStart_IT+0x3de>
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a90      	ldr	r2, [pc, #576]	; (8004d08 <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d03a      	beq.n	8004b40 <HAL_DMAEx_MultiBufferStart_IT+0x3d8>
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4a8f      	ldr	r2, [pc, #572]	; (8004d0c <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d032      	beq.n	8004b3a <HAL_DMAEx_MultiBufferStart_IT+0x3d2>
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a8d      	ldr	r2, [pc, #564]	; (8004d10 <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d02a      	beq.n	8004b34 <HAL_DMAEx_MultiBufferStart_IT+0x3cc>
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4a8c      	ldr	r2, [pc, #560]	; (8004d14 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d022      	beq.n	8004b2e <HAL_DMAEx_MultiBufferStart_IT+0x3c6>
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a8a      	ldr	r2, [pc, #552]	; (8004d18 <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d01a      	beq.n	8004b28 <HAL_DMAEx_MultiBufferStart_IT+0x3c0>
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4a89      	ldr	r2, [pc, #548]	; (8004d1c <HAL_DMAEx_MultiBufferStart_IT+0x5b4>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d012      	beq.n	8004b22 <HAL_DMAEx_MultiBufferStart_IT+0x3ba>
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4a87      	ldr	r2, [pc, #540]	; (8004d20 <HAL_DMAEx_MultiBufferStart_IT+0x5b8>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d00a      	beq.n	8004b1c <HAL_DMAEx_MultiBufferStart_IT+0x3b4>
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4a86      	ldr	r2, [pc, #536]	; (8004d24 <HAL_DMAEx_MultiBufferStart_IT+0x5bc>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d102      	bne.n	8004b16 <HAL_DMAEx_MultiBufferStart_IT+0x3ae>
 8004b10:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004b14:	e01e      	b.n	8004b54 <HAL_DMAEx_MultiBufferStart_IT+0x3ec>
 8004b16:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004b1a:	e01b      	b.n	8004b54 <HAL_DMAEx_MultiBufferStart_IT+0x3ec>
 8004b1c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004b20:	e018      	b.n	8004b54 <HAL_DMAEx_MultiBufferStart_IT+0x3ec>
 8004b22:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004b26:	e015      	b.n	8004b54 <HAL_DMAEx_MultiBufferStart_IT+0x3ec>
 8004b28:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004b2c:	e012      	b.n	8004b54 <HAL_DMAEx_MultiBufferStart_IT+0x3ec>
 8004b2e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004b32:	e00f      	b.n	8004b54 <HAL_DMAEx_MultiBufferStart_IT+0x3ec>
 8004b34:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004b38:	e00c      	b.n	8004b54 <HAL_DMAEx_MultiBufferStart_IT+0x3ec>
 8004b3a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004b3e:	e009      	b.n	8004b54 <HAL_DMAEx_MultiBufferStart_IT+0x3ec>
 8004b40:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004b44:	e006      	b.n	8004b54 <HAL_DMAEx_MultiBufferStart_IT+0x3ec>
 8004b46:	2320      	movs	r3, #32
 8004b48:	e004      	b.n	8004b54 <HAL_DMAEx_MultiBufferStart_IT+0x3ec>
 8004b4a:	2320      	movs	r3, #32
 8004b4c:	e002      	b.n	8004b54 <HAL_DMAEx_MultiBufferStart_IT+0x3ec>
 8004b4e:	2320      	movs	r3, #32
 8004b50:	e000      	b.n	8004b54 <HAL_DMAEx_MultiBufferStart_IT+0x3ec>
 8004b52:	2320      	movs	r3, #32
 8004b54:	4a74      	ldr	r2, [pc, #464]	; (8004d28 <HAL_DMAEx_MultiBufferStart_IT+0x5c0>)
 8004b56:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	461a      	mov	r2, r3
 8004b5e:	4b73      	ldr	r3, [pc, #460]	; (8004d2c <HAL_DMAEx_MultiBufferStart_IT+0x5c4>)
 8004b60:	429a      	cmp	r2, r3
 8004b62:	d960      	bls.n	8004c26 <HAL_DMAEx_MultiBufferStart_IT+0x4be>
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4a63      	ldr	r2, [pc, #396]	; (8004cf8 <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d057      	beq.n	8004c1e <HAL_DMAEx_MultiBufferStart_IT+0x4b6>
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4a62      	ldr	r2, [pc, #392]	; (8004cfc <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d050      	beq.n	8004c1a <HAL_DMAEx_MultiBufferStart_IT+0x4b2>
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a60      	ldr	r2, [pc, #384]	; (8004d00 <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d049      	beq.n	8004c16 <HAL_DMAEx_MultiBufferStart_IT+0x4ae>
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a5f      	ldr	r2, [pc, #380]	; (8004d04 <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d042      	beq.n	8004c12 <HAL_DMAEx_MultiBufferStart_IT+0x4aa>
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a5d      	ldr	r2, [pc, #372]	; (8004d08 <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d03a      	beq.n	8004c0c <HAL_DMAEx_MultiBufferStart_IT+0x4a4>
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4a5c      	ldr	r2, [pc, #368]	; (8004d0c <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d032      	beq.n	8004c06 <HAL_DMAEx_MultiBufferStart_IT+0x49e>
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a5a      	ldr	r2, [pc, #360]	; (8004d10 <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d02a      	beq.n	8004c00 <HAL_DMAEx_MultiBufferStart_IT+0x498>
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4a59      	ldr	r2, [pc, #356]	; (8004d14 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d022      	beq.n	8004bfa <HAL_DMAEx_MultiBufferStart_IT+0x492>
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4a57      	ldr	r2, [pc, #348]	; (8004d18 <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d01a      	beq.n	8004bf4 <HAL_DMAEx_MultiBufferStart_IT+0x48c>
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4a56      	ldr	r2, [pc, #344]	; (8004d1c <HAL_DMAEx_MultiBufferStart_IT+0x5b4>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d012      	beq.n	8004bee <HAL_DMAEx_MultiBufferStart_IT+0x486>
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a54      	ldr	r2, [pc, #336]	; (8004d20 <HAL_DMAEx_MultiBufferStart_IT+0x5b8>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d00a      	beq.n	8004be8 <HAL_DMAEx_MultiBufferStart_IT+0x480>
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4a53      	ldr	r2, [pc, #332]	; (8004d24 <HAL_DMAEx_MultiBufferStart_IT+0x5bc>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d102      	bne.n	8004be2 <HAL_DMAEx_MultiBufferStart_IT+0x47a>
 8004bdc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004be0:	e01e      	b.n	8004c20 <HAL_DMAEx_MultiBufferStart_IT+0x4b8>
 8004be2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004be6:	e01b      	b.n	8004c20 <HAL_DMAEx_MultiBufferStart_IT+0x4b8>
 8004be8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004bec:	e018      	b.n	8004c20 <HAL_DMAEx_MultiBufferStart_IT+0x4b8>
 8004bee:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004bf2:	e015      	b.n	8004c20 <HAL_DMAEx_MultiBufferStart_IT+0x4b8>
 8004bf4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004bf8:	e012      	b.n	8004c20 <HAL_DMAEx_MultiBufferStart_IT+0x4b8>
 8004bfa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004bfe:	e00f      	b.n	8004c20 <HAL_DMAEx_MultiBufferStart_IT+0x4b8>
 8004c00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c04:	e00c      	b.n	8004c20 <HAL_DMAEx_MultiBufferStart_IT+0x4b8>
 8004c06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c0a:	e009      	b.n	8004c20 <HAL_DMAEx_MultiBufferStart_IT+0x4b8>
 8004c0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c10:	e006      	b.n	8004c20 <HAL_DMAEx_MultiBufferStart_IT+0x4b8>
 8004c12:	2310      	movs	r3, #16
 8004c14:	e004      	b.n	8004c20 <HAL_DMAEx_MultiBufferStart_IT+0x4b8>
 8004c16:	2310      	movs	r3, #16
 8004c18:	e002      	b.n	8004c20 <HAL_DMAEx_MultiBufferStart_IT+0x4b8>
 8004c1a:	2310      	movs	r3, #16
 8004c1c:	e000      	b.n	8004c20 <HAL_DMAEx_MultiBufferStart_IT+0x4b8>
 8004c1e:	2310      	movs	r3, #16
 8004c20:	4a43      	ldr	r2, [pc, #268]	; (8004d30 <HAL_DMAEx_MultiBufferStart_IT+0x5c8>)
 8004c22:	60d3      	str	r3, [r2, #12]
 8004c24:	e14f      	b.n	8004ec6 <HAL_DMAEx_MultiBufferStart_IT+0x75e>
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	461a      	mov	r2, r3
 8004c2c:	4b41      	ldr	r3, [pc, #260]	; (8004d34 <HAL_DMAEx_MultiBufferStart_IT+0x5cc>)
 8004c2e:	429a      	cmp	r2, r3
 8004c30:	f240 8082 	bls.w	8004d38 <HAL_DMAEx_MultiBufferStart_IT+0x5d0>
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a2f      	ldr	r2, [pc, #188]	; (8004cf8 <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d057      	beq.n	8004cee <HAL_DMAEx_MultiBufferStart_IT+0x586>
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4a2e      	ldr	r2, [pc, #184]	; (8004cfc <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d050      	beq.n	8004cea <HAL_DMAEx_MultiBufferStart_IT+0x582>
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a2c      	ldr	r2, [pc, #176]	; (8004d00 <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d049      	beq.n	8004ce6 <HAL_DMAEx_MultiBufferStart_IT+0x57e>
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a2b      	ldr	r2, [pc, #172]	; (8004d04 <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d042      	beq.n	8004ce2 <HAL_DMAEx_MultiBufferStart_IT+0x57a>
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a29      	ldr	r2, [pc, #164]	; (8004d08 <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d03a      	beq.n	8004cdc <HAL_DMAEx_MultiBufferStart_IT+0x574>
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a28      	ldr	r2, [pc, #160]	; (8004d0c <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d032      	beq.n	8004cd6 <HAL_DMAEx_MultiBufferStart_IT+0x56e>
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a26      	ldr	r2, [pc, #152]	; (8004d10 <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d02a      	beq.n	8004cd0 <HAL_DMAEx_MultiBufferStart_IT+0x568>
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a25      	ldr	r2, [pc, #148]	; (8004d14 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d022      	beq.n	8004cca <HAL_DMAEx_MultiBufferStart_IT+0x562>
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a23      	ldr	r2, [pc, #140]	; (8004d18 <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d01a      	beq.n	8004cc4 <HAL_DMAEx_MultiBufferStart_IT+0x55c>
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a22      	ldr	r2, [pc, #136]	; (8004d1c <HAL_DMAEx_MultiBufferStart_IT+0x5b4>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d012      	beq.n	8004cbe <HAL_DMAEx_MultiBufferStart_IT+0x556>
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a20      	ldr	r2, [pc, #128]	; (8004d20 <HAL_DMAEx_MultiBufferStart_IT+0x5b8>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d00a      	beq.n	8004cb8 <HAL_DMAEx_MultiBufferStart_IT+0x550>
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a1f      	ldr	r2, [pc, #124]	; (8004d24 <HAL_DMAEx_MultiBufferStart_IT+0x5bc>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d102      	bne.n	8004cb2 <HAL_DMAEx_MultiBufferStart_IT+0x54a>
 8004cac:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004cb0:	e01e      	b.n	8004cf0 <HAL_DMAEx_MultiBufferStart_IT+0x588>
 8004cb2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004cb6:	e01b      	b.n	8004cf0 <HAL_DMAEx_MultiBufferStart_IT+0x588>
 8004cb8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004cbc:	e018      	b.n	8004cf0 <HAL_DMAEx_MultiBufferStart_IT+0x588>
 8004cbe:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004cc2:	e015      	b.n	8004cf0 <HAL_DMAEx_MultiBufferStart_IT+0x588>
 8004cc4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004cc8:	e012      	b.n	8004cf0 <HAL_DMAEx_MultiBufferStart_IT+0x588>
 8004cca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004cce:	e00f      	b.n	8004cf0 <HAL_DMAEx_MultiBufferStart_IT+0x588>
 8004cd0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004cd4:	e00c      	b.n	8004cf0 <HAL_DMAEx_MultiBufferStart_IT+0x588>
 8004cd6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004cda:	e009      	b.n	8004cf0 <HAL_DMAEx_MultiBufferStart_IT+0x588>
 8004cdc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004ce0:	e006      	b.n	8004cf0 <HAL_DMAEx_MultiBufferStart_IT+0x588>
 8004ce2:	2310      	movs	r3, #16
 8004ce4:	e004      	b.n	8004cf0 <HAL_DMAEx_MultiBufferStart_IT+0x588>
 8004ce6:	2310      	movs	r3, #16
 8004ce8:	e002      	b.n	8004cf0 <HAL_DMAEx_MultiBufferStart_IT+0x588>
 8004cea:	2310      	movs	r3, #16
 8004cec:	e000      	b.n	8004cf0 <HAL_DMAEx_MultiBufferStart_IT+0x588>
 8004cee:	2310      	movs	r3, #16
 8004cf0:	4a0f      	ldr	r2, [pc, #60]	; (8004d30 <HAL_DMAEx_MultiBufferStart_IT+0x5c8>)
 8004cf2:	6093      	str	r3, [r2, #8]
 8004cf4:	e0e7      	b.n	8004ec6 <HAL_DMAEx_MultiBufferStart_IT+0x75e>
 8004cf6:	bf00      	nop
 8004cf8:	40026010 	.word	0x40026010
 8004cfc:	40026410 	.word	0x40026410
 8004d00:	40026070 	.word	0x40026070
 8004d04:	40026470 	.word	0x40026470
 8004d08:	40026028 	.word	0x40026028
 8004d0c:	40026428 	.word	0x40026428
 8004d10:	40026088 	.word	0x40026088
 8004d14:	40026488 	.word	0x40026488
 8004d18:	40026040 	.word	0x40026040
 8004d1c:	40026440 	.word	0x40026440
 8004d20:	400260a0 	.word	0x400260a0
 8004d24:	400264a0 	.word	0x400264a0
 8004d28:	40026000 	.word	0x40026000
 8004d2c:	40026458 	.word	0x40026458
 8004d30:	40026400 	.word	0x40026400
 8004d34:	400260b8 	.word	0x400260b8
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	461a      	mov	r2, r3
 8004d3e:	4b96      	ldr	r3, [pc, #600]	; (8004f98 <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 8004d40:	429a      	cmp	r2, r3
 8004d42:	d960      	bls.n	8004e06 <HAL_DMAEx_MultiBufferStart_IT+0x69e>
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4a94      	ldr	r2, [pc, #592]	; (8004f9c <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d057      	beq.n	8004dfe <HAL_DMAEx_MultiBufferStart_IT+0x696>
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4a93      	ldr	r2, [pc, #588]	; (8004fa0 <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d050      	beq.n	8004dfa <HAL_DMAEx_MultiBufferStart_IT+0x692>
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a91      	ldr	r2, [pc, #580]	; (8004fa4 <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d049      	beq.n	8004df6 <HAL_DMAEx_MultiBufferStart_IT+0x68e>
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4a90      	ldr	r2, [pc, #576]	; (8004fa8 <HAL_DMAEx_MultiBufferStart_IT+0x840>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d042      	beq.n	8004df2 <HAL_DMAEx_MultiBufferStart_IT+0x68a>
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4a8e      	ldr	r2, [pc, #568]	; (8004fac <HAL_DMAEx_MultiBufferStart_IT+0x844>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d03a      	beq.n	8004dec <HAL_DMAEx_MultiBufferStart_IT+0x684>
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4a8d      	ldr	r2, [pc, #564]	; (8004fb0 <HAL_DMAEx_MultiBufferStart_IT+0x848>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d032      	beq.n	8004de6 <HAL_DMAEx_MultiBufferStart_IT+0x67e>
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4a8b      	ldr	r2, [pc, #556]	; (8004fb4 <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d02a      	beq.n	8004de0 <HAL_DMAEx_MultiBufferStart_IT+0x678>
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4a8a      	ldr	r2, [pc, #552]	; (8004fb8 <HAL_DMAEx_MultiBufferStart_IT+0x850>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d022      	beq.n	8004dda <HAL_DMAEx_MultiBufferStart_IT+0x672>
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4a88      	ldr	r2, [pc, #544]	; (8004fbc <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d01a      	beq.n	8004dd4 <HAL_DMAEx_MultiBufferStart_IT+0x66c>
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4a87      	ldr	r2, [pc, #540]	; (8004fc0 <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d012      	beq.n	8004dce <HAL_DMAEx_MultiBufferStart_IT+0x666>
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a85      	ldr	r2, [pc, #532]	; (8004fc4 <HAL_DMAEx_MultiBufferStart_IT+0x85c>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d00a      	beq.n	8004dc8 <HAL_DMAEx_MultiBufferStart_IT+0x660>
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4a84      	ldr	r2, [pc, #528]	; (8004fc8 <HAL_DMAEx_MultiBufferStart_IT+0x860>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d102      	bne.n	8004dc2 <HAL_DMAEx_MultiBufferStart_IT+0x65a>
 8004dbc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004dc0:	e01e      	b.n	8004e00 <HAL_DMAEx_MultiBufferStart_IT+0x698>
 8004dc2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004dc6:	e01b      	b.n	8004e00 <HAL_DMAEx_MultiBufferStart_IT+0x698>
 8004dc8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004dcc:	e018      	b.n	8004e00 <HAL_DMAEx_MultiBufferStart_IT+0x698>
 8004dce:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004dd2:	e015      	b.n	8004e00 <HAL_DMAEx_MultiBufferStart_IT+0x698>
 8004dd4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004dd8:	e012      	b.n	8004e00 <HAL_DMAEx_MultiBufferStart_IT+0x698>
 8004dda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004dde:	e00f      	b.n	8004e00 <HAL_DMAEx_MultiBufferStart_IT+0x698>
 8004de0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004de4:	e00c      	b.n	8004e00 <HAL_DMAEx_MultiBufferStart_IT+0x698>
 8004de6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004dea:	e009      	b.n	8004e00 <HAL_DMAEx_MultiBufferStart_IT+0x698>
 8004dec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004df0:	e006      	b.n	8004e00 <HAL_DMAEx_MultiBufferStart_IT+0x698>
 8004df2:	2310      	movs	r3, #16
 8004df4:	e004      	b.n	8004e00 <HAL_DMAEx_MultiBufferStart_IT+0x698>
 8004df6:	2310      	movs	r3, #16
 8004df8:	e002      	b.n	8004e00 <HAL_DMAEx_MultiBufferStart_IT+0x698>
 8004dfa:	2310      	movs	r3, #16
 8004dfc:	e000      	b.n	8004e00 <HAL_DMAEx_MultiBufferStart_IT+0x698>
 8004dfe:	2310      	movs	r3, #16
 8004e00:	4a72      	ldr	r2, [pc, #456]	; (8004fcc <HAL_DMAEx_MultiBufferStart_IT+0x864>)
 8004e02:	60d3      	str	r3, [r2, #12]
 8004e04:	e05f      	b.n	8004ec6 <HAL_DMAEx_MultiBufferStart_IT+0x75e>
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a64      	ldr	r2, [pc, #400]	; (8004f9c <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d057      	beq.n	8004ec0 <HAL_DMAEx_MultiBufferStart_IT+0x758>
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4a62      	ldr	r2, [pc, #392]	; (8004fa0 <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d050      	beq.n	8004ebc <HAL_DMAEx_MultiBufferStart_IT+0x754>
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4a61      	ldr	r2, [pc, #388]	; (8004fa4 <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d049      	beq.n	8004eb8 <HAL_DMAEx_MultiBufferStart_IT+0x750>
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4a5f      	ldr	r2, [pc, #380]	; (8004fa8 <HAL_DMAEx_MultiBufferStart_IT+0x840>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d042      	beq.n	8004eb4 <HAL_DMAEx_MultiBufferStart_IT+0x74c>
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4a5e      	ldr	r2, [pc, #376]	; (8004fac <HAL_DMAEx_MultiBufferStart_IT+0x844>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d03a      	beq.n	8004eae <HAL_DMAEx_MultiBufferStart_IT+0x746>
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a5c      	ldr	r2, [pc, #368]	; (8004fb0 <HAL_DMAEx_MultiBufferStart_IT+0x848>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d032      	beq.n	8004ea8 <HAL_DMAEx_MultiBufferStart_IT+0x740>
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4a5b      	ldr	r2, [pc, #364]	; (8004fb4 <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d02a      	beq.n	8004ea2 <HAL_DMAEx_MultiBufferStart_IT+0x73a>
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a59      	ldr	r2, [pc, #356]	; (8004fb8 <HAL_DMAEx_MultiBufferStart_IT+0x850>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d022      	beq.n	8004e9c <HAL_DMAEx_MultiBufferStart_IT+0x734>
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4a58      	ldr	r2, [pc, #352]	; (8004fbc <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d01a      	beq.n	8004e96 <HAL_DMAEx_MultiBufferStart_IT+0x72e>
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4a56      	ldr	r2, [pc, #344]	; (8004fc0 <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d012      	beq.n	8004e90 <HAL_DMAEx_MultiBufferStart_IT+0x728>
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4a55      	ldr	r2, [pc, #340]	; (8004fc4 <HAL_DMAEx_MultiBufferStart_IT+0x85c>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d00a      	beq.n	8004e8a <HAL_DMAEx_MultiBufferStart_IT+0x722>
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4a53      	ldr	r2, [pc, #332]	; (8004fc8 <HAL_DMAEx_MultiBufferStart_IT+0x860>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d102      	bne.n	8004e84 <HAL_DMAEx_MultiBufferStart_IT+0x71c>
 8004e7e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004e82:	e01e      	b.n	8004ec2 <HAL_DMAEx_MultiBufferStart_IT+0x75a>
 8004e84:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004e88:	e01b      	b.n	8004ec2 <HAL_DMAEx_MultiBufferStart_IT+0x75a>
 8004e8a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004e8e:	e018      	b.n	8004ec2 <HAL_DMAEx_MultiBufferStart_IT+0x75a>
 8004e90:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004e94:	e015      	b.n	8004ec2 <HAL_DMAEx_MultiBufferStart_IT+0x75a>
 8004e96:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004e9a:	e012      	b.n	8004ec2 <HAL_DMAEx_MultiBufferStart_IT+0x75a>
 8004e9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004ea0:	e00f      	b.n	8004ec2 <HAL_DMAEx_MultiBufferStart_IT+0x75a>
 8004ea2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004ea6:	e00c      	b.n	8004ec2 <HAL_DMAEx_MultiBufferStart_IT+0x75a>
 8004ea8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004eac:	e009      	b.n	8004ec2 <HAL_DMAEx_MultiBufferStart_IT+0x75a>
 8004eae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004eb2:	e006      	b.n	8004ec2 <HAL_DMAEx_MultiBufferStart_IT+0x75a>
 8004eb4:	2310      	movs	r3, #16
 8004eb6:	e004      	b.n	8004ec2 <HAL_DMAEx_MultiBufferStart_IT+0x75a>
 8004eb8:	2310      	movs	r3, #16
 8004eba:	e002      	b.n	8004ec2 <HAL_DMAEx_MultiBufferStart_IT+0x75a>
 8004ebc:	2310      	movs	r3, #16
 8004ebe:	e000      	b.n	8004ec2 <HAL_DMAEx_MultiBufferStart_IT+0x75a>
 8004ec0:	2310      	movs	r3, #16
 8004ec2:	4a42      	ldr	r2, [pc, #264]	; (8004fcc <HAL_DMAEx_MultiBufferStart_IT+0x864>)
 8004ec4:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	461a      	mov	r2, r3
 8004ecc:	4b40      	ldr	r3, [pc, #256]	; (8004fd0 <HAL_DMAEx_MultiBufferStart_IT+0x868>)
 8004ece:	429a      	cmp	r2, r3
 8004ed0:	f240 8082 	bls.w	8004fd8 <HAL_DMAEx_MultiBufferStart_IT+0x870>
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a30      	ldr	r2, [pc, #192]	; (8004f9c <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d057      	beq.n	8004f8e <HAL_DMAEx_MultiBufferStart_IT+0x826>
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a2f      	ldr	r2, [pc, #188]	; (8004fa0 <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d050      	beq.n	8004f8a <HAL_DMAEx_MultiBufferStart_IT+0x822>
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4a2d      	ldr	r2, [pc, #180]	; (8004fa4 <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d049      	beq.n	8004f86 <HAL_DMAEx_MultiBufferStart_IT+0x81e>
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4a2c      	ldr	r2, [pc, #176]	; (8004fa8 <HAL_DMAEx_MultiBufferStart_IT+0x840>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d042      	beq.n	8004f82 <HAL_DMAEx_MultiBufferStart_IT+0x81a>
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a2a      	ldr	r2, [pc, #168]	; (8004fac <HAL_DMAEx_MultiBufferStart_IT+0x844>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d03a      	beq.n	8004f7c <HAL_DMAEx_MultiBufferStart_IT+0x814>
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4a29      	ldr	r2, [pc, #164]	; (8004fb0 <HAL_DMAEx_MultiBufferStart_IT+0x848>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d032      	beq.n	8004f76 <HAL_DMAEx_MultiBufferStart_IT+0x80e>
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4a27      	ldr	r2, [pc, #156]	; (8004fb4 <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d02a      	beq.n	8004f70 <HAL_DMAEx_MultiBufferStart_IT+0x808>
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a26      	ldr	r2, [pc, #152]	; (8004fb8 <HAL_DMAEx_MultiBufferStart_IT+0x850>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d022      	beq.n	8004f6a <HAL_DMAEx_MultiBufferStart_IT+0x802>
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a24      	ldr	r2, [pc, #144]	; (8004fbc <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d01a      	beq.n	8004f64 <HAL_DMAEx_MultiBufferStart_IT+0x7fc>
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a23      	ldr	r2, [pc, #140]	; (8004fc0 <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d012      	beq.n	8004f5e <HAL_DMAEx_MultiBufferStart_IT+0x7f6>
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a21      	ldr	r2, [pc, #132]	; (8004fc4 <HAL_DMAEx_MultiBufferStart_IT+0x85c>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d00a      	beq.n	8004f58 <HAL_DMAEx_MultiBufferStart_IT+0x7f0>
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a20      	ldr	r2, [pc, #128]	; (8004fc8 <HAL_DMAEx_MultiBufferStart_IT+0x860>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d102      	bne.n	8004f52 <HAL_DMAEx_MultiBufferStart_IT+0x7ea>
 8004f4c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004f50:	e01e      	b.n	8004f90 <HAL_DMAEx_MultiBufferStart_IT+0x828>
 8004f52:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004f56:	e01b      	b.n	8004f90 <HAL_DMAEx_MultiBufferStart_IT+0x828>
 8004f58:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004f5c:	e018      	b.n	8004f90 <HAL_DMAEx_MultiBufferStart_IT+0x828>
 8004f5e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004f62:	e015      	b.n	8004f90 <HAL_DMAEx_MultiBufferStart_IT+0x828>
 8004f64:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004f68:	e012      	b.n	8004f90 <HAL_DMAEx_MultiBufferStart_IT+0x828>
 8004f6a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004f6e:	e00f      	b.n	8004f90 <HAL_DMAEx_MultiBufferStart_IT+0x828>
 8004f70:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004f74:	e00c      	b.n	8004f90 <HAL_DMAEx_MultiBufferStart_IT+0x828>
 8004f76:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004f7a:	e009      	b.n	8004f90 <HAL_DMAEx_MultiBufferStart_IT+0x828>
 8004f7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004f80:	e006      	b.n	8004f90 <HAL_DMAEx_MultiBufferStart_IT+0x828>
 8004f82:	2308      	movs	r3, #8
 8004f84:	e004      	b.n	8004f90 <HAL_DMAEx_MultiBufferStart_IT+0x828>
 8004f86:	2308      	movs	r3, #8
 8004f88:	e002      	b.n	8004f90 <HAL_DMAEx_MultiBufferStart_IT+0x828>
 8004f8a:	2308      	movs	r3, #8
 8004f8c:	e000      	b.n	8004f90 <HAL_DMAEx_MultiBufferStart_IT+0x828>
 8004f8e:	2308      	movs	r3, #8
 8004f90:	4a10      	ldr	r2, [pc, #64]	; (8004fd4 <HAL_DMAEx_MultiBufferStart_IT+0x86c>)
 8004f92:	60d3      	str	r3, [r2, #12]
 8004f94:	e16f      	b.n	8005276 <HAL_DMAEx_MultiBufferStart_IT+0xb0e>
 8004f96:	bf00      	nop
 8004f98:	40026058 	.word	0x40026058
 8004f9c:	40026010 	.word	0x40026010
 8004fa0:	40026410 	.word	0x40026410
 8004fa4:	40026070 	.word	0x40026070
 8004fa8:	40026470 	.word	0x40026470
 8004fac:	40026028 	.word	0x40026028
 8004fb0:	40026428 	.word	0x40026428
 8004fb4:	40026088 	.word	0x40026088
 8004fb8:	40026488 	.word	0x40026488
 8004fbc:	40026040 	.word	0x40026040
 8004fc0:	40026440 	.word	0x40026440
 8004fc4:	400260a0 	.word	0x400260a0
 8004fc8:	400264a0 	.word	0x400264a0
 8004fcc:	40026000 	.word	0x40026000
 8004fd0:	40026458 	.word	0x40026458
 8004fd4:	40026400 	.word	0x40026400
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	461a      	mov	r2, r3
 8004fde:	4b94      	ldr	r3, [pc, #592]	; (8005230 <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 8004fe0:	429a      	cmp	r2, r3
 8004fe2:	d960      	bls.n	80050a6 <HAL_DMAEx_MultiBufferStart_IT+0x93e>
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a92      	ldr	r2, [pc, #584]	; (8005234 <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d057      	beq.n	800509e <HAL_DMAEx_MultiBufferStart_IT+0x936>
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4a91      	ldr	r2, [pc, #580]	; (8005238 <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d050      	beq.n	800509a <HAL_DMAEx_MultiBufferStart_IT+0x932>
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a8f      	ldr	r2, [pc, #572]	; (800523c <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d049      	beq.n	8005096 <HAL_DMAEx_MultiBufferStart_IT+0x92e>
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4a8e      	ldr	r2, [pc, #568]	; (8005240 <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d042      	beq.n	8005092 <HAL_DMAEx_MultiBufferStart_IT+0x92a>
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a8c      	ldr	r2, [pc, #560]	; (8005244 <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d03a      	beq.n	800508c <HAL_DMAEx_MultiBufferStart_IT+0x924>
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a8b      	ldr	r2, [pc, #556]	; (8005248 <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d032      	beq.n	8005086 <HAL_DMAEx_MultiBufferStart_IT+0x91e>
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4a89      	ldr	r2, [pc, #548]	; (800524c <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d02a      	beq.n	8005080 <HAL_DMAEx_MultiBufferStart_IT+0x918>
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4a88      	ldr	r2, [pc, #544]	; (8005250 <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d022      	beq.n	800507a <HAL_DMAEx_MultiBufferStart_IT+0x912>
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a86      	ldr	r2, [pc, #536]	; (8005254 <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d01a      	beq.n	8005074 <HAL_DMAEx_MultiBufferStart_IT+0x90c>
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4a85      	ldr	r2, [pc, #532]	; (8005258 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d012      	beq.n	800506e <HAL_DMAEx_MultiBufferStart_IT+0x906>
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4a83      	ldr	r2, [pc, #524]	; (800525c <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d00a      	beq.n	8005068 <HAL_DMAEx_MultiBufferStart_IT+0x900>
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4a82      	ldr	r2, [pc, #520]	; (8005260 <HAL_DMAEx_MultiBufferStart_IT+0xaf8>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d102      	bne.n	8005062 <HAL_DMAEx_MultiBufferStart_IT+0x8fa>
 800505c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8005060:	e01e      	b.n	80050a0 <HAL_DMAEx_MultiBufferStart_IT+0x938>
 8005062:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005066:	e01b      	b.n	80050a0 <HAL_DMAEx_MultiBufferStart_IT+0x938>
 8005068:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800506c:	e018      	b.n	80050a0 <HAL_DMAEx_MultiBufferStart_IT+0x938>
 800506e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8005072:	e015      	b.n	80050a0 <HAL_DMAEx_MultiBufferStart_IT+0x938>
 8005074:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8005078:	e012      	b.n	80050a0 <HAL_DMAEx_MultiBufferStart_IT+0x938>
 800507a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800507e:	e00f      	b.n	80050a0 <HAL_DMAEx_MultiBufferStart_IT+0x938>
 8005080:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005084:	e00c      	b.n	80050a0 <HAL_DMAEx_MultiBufferStart_IT+0x938>
 8005086:	f44f 7300 	mov.w	r3, #512	; 0x200
 800508a:	e009      	b.n	80050a0 <HAL_DMAEx_MultiBufferStart_IT+0x938>
 800508c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005090:	e006      	b.n	80050a0 <HAL_DMAEx_MultiBufferStart_IT+0x938>
 8005092:	2308      	movs	r3, #8
 8005094:	e004      	b.n	80050a0 <HAL_DMAEx_MultiBufferStart_IT+0x938>
 8005096:	2308      	movs	r3, #8
 8005098:	e002      	b.n	80050a0 <HAL_DMAEx_MultiBufferStart_IT+0x938>
 800509a:	2308      	movs	r3, #8
 800509c:	e000      	b.n	80050a0 <HAL_DMAEx_MultiBufferStart_IT+0x938>
 800509e:	2308      	movs	r3, #8
 80050a0:	4a70      	ldr	r2, [pc, #448]	; (8005264 <HAL_DMAEx_MultiBufferStart_IT+0xafc>)
 80050a2:	6093      	str	r3, [r2, #8]
 80050a4:	e0e7      	b.n	8005276 <HAL_DMAEx_MultiBufferStart_IT+0xb0e>
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	461a      	mov	r2, r3
 80050ac:	4b6e      	ldr	r3, [pc, #440]	; (8005268 <HAL_DMAEx_MultiBufferStart_IT+0xb00>)
 80050ae:	429a      	cmp	r2, r3
 80050b0:	d960      	bls.n	8005174 <HAL_DMAEx_MultiBufferStart_IT+0xa0c>
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4a5f      	ldr	r2, [pc, #380]	; (8005234 <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d057      	beq.n	800516c <HAL_DMAEx_MultiBufferStart_IT+0xa04>
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a5d      	ldr	r2, [pc, #372]	; (8005238 <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d050      	beq.n	8005168 <HAL_DMAEx_MultiBufferStart_IT+0xa00>
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4a5c      	ldr	r2, [pc, #368]	; (800523c <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d049      	beq.n	8005164 <HAL_DMAEx_MultiBufferStart_IT+0x9fc>
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4a5a      	ldr	r2, [pc, #360]	; (8005240 <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d042      	beq.n	8005160 <HAL_DMAEx_MultiBufferStart_IT+0x9f8>
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4a59      	ldr	r2, [pc, #356]	; (8005244 <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d03a      	beq.n	800515a <HAL_DMAEx_MultiBufferStart_IT+0x9f2>
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4a57      	ldr	r2, [pc, #348]	; (8005248 <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d032      	beq.n	8005154 <HAL_DMAEx_MultiBufferStart_IT+0x9ec>
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4a56      	ldr	r2, [pc, #344]	; (800524c <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d02a      	beq.n	800514e <HAL_DMAEx_MultiBufferStart_IT+0x9e6>
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4a54      	ldr	r2, [pc, #336]	; (8005250 <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d022      	beq.n	8005148 <HAL_DMAEx_MultiBufferStart_IT+0x9e0>
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	4a53      	ldr	r2, [pc, #332]	; (8005254 <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d01a      	beq.n	8005142 <HAL_DMAEx_MultiBufferStart_IT+0x9da>
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4a51      	ldr	r2, [pc, #324]	; (8005258 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d012      	beq.n	800513c <HAL_DMAEx_MultiBufferStart_IT+0x9d4>
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4a50      	ldr	r2, [pc, #320]	; (800525c <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d00a      	beq.n	8005136 <HAL_DMAEx_MultiBufferStart_IT+0x9ce>
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	4a4e      	ldr	r2, [pc, #312]	; (8005260 <HAL_DMAEx_MultiBufferStart_IT+0xaf8>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d102      	bne.n	8005130 <HAL_DMAEx_MultiBufferStart_IT+0x9c8>
 800512a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800512e:	e01e      	b.n	800516e <HAL_DMAEx_MultiBufferStart_IT+0xa06>
 8005130:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005134:	e01b      	b.n	800516e <HAL_DMAEx_MultiBufferStart_IT+0xa06>
 8005136:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800513a:	e018      	b.n	800516e <HAL_DMAEx_MultiBufferStart_IT+0xa06>
 800513c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8005140:	e015      	b.n	800516e <HAL_DMAEx_MultiBufferStart_IT+0xa06>
 8005142:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8005146:	e012      	b.n	800516e <HAL_DMAEx_MultiBufferStart_IT+0xa06>
 8005148:	f44f 7300 	mov.w	r3, #512	; 0x200
 800514c:	e00f      	b.n	800516e <HAL_DMAEx_MultiBufferStart_IT+0xa06>
 800514e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005152:	e00c      	b.n	800516e <HAL_DMAEx_MultiBufferStart_IT+0xa06>
 8005154:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005158:	e009      	b.n	800516e <HAL_DMAEx_MultiBufferStart_IT+0xa06>
 800515a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800515e:	e006      	b.n	800516e <HAL_DMAEx_MultiBufferStart_IT+0xa06>
 8005160:	2308      	movs	r3, #8
 8005162:	e004      	b.n	800516e <HAL_DMAEx_MultiBufferStart_IT+0xa06>
 8005164:	2308      	movs	r3, #8
 8005166:	e002      	b.n	800516e <HAL_DMAEx_MultiBufferStart_IT+0xa06>
 8005168:	2308      	movs	r3, #8
 800516a:	e000      	b.n	800516e <HAL_DMAEx_MultiBufferStart_IT+0xa06>
 800516c:	2308      	movs	r3, #8
 800516e:	4a3f      	ldr	r2, [pc, #252]	; (800526c <HAL_DMAEx_MultiBufferStart_IT+0xb04>)
 8005170:	60d3      	str	r3, [r2, #12]
 8005172:	e080      	b.n	8005276 <HAL_DMAEx_MultiBufferStart_IT+0xb0e>
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a2e      	ldr	r2, [pc, #184]	; (8005234 <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d078      	beq.n	8005270 <HAL_DMAEx_MultiBufferStart_IT+0xb08>
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4a2d      	ldr	r2, [pc, #180]	; (8005238 <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d050      	beq.n	800522a <HAL_DMAEx_MultiBufferStart_IT+0xac2>
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4a2b      	ldr	r2, [pc, #172]	; (800523c <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d049      	beq.n	8005226 <HAL_DMAEx_MultiBufferStart_IT+0xabe>
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4a2a      	ldr	r2, [pc, #168]	; (8005240 <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d042      	beq.n	8005222 <HAL_DMAEx_MultiBufferStart_IT+0xaba>
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a28      	ldr	r2, [pc, #160]	; (8005244 <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d03a      	beq.n	800521c <HAL_DMAEx_MultiBufferStart_IT+0xab4>
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4a27      	ldr	r2, [pc, #156]	; (8005248 <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d032      	beq.n	8005216 <HAL_DMAEx_MultiBufferStart_IT+0xaae>
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4a25      	ldr	r2, [pc, #148]	; (800524c <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d02a      	beq.n	8005210 <HAL_DMAEx_MultiBufferStart_IT+0xaa8>
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4a24      	ldr	r2, [pc, #144]	; (8005250 <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d022      	beq.n	800520a <HAL_DMAEx_MultiBufferStart_IT+0xaa2>
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4a22      	ldr	r2, [pc, #136]	; (8005254 <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d01a      	beq.n	8005204 <HAL_DMAEx_MultiBufferStart_IT+0xa9c>
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4a21      	ldr	r2, [pc, #132]	; (8005258 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d012      	beq.n	80051fe <HAL_DMAEx_MultiBufferStart_IT+0xa96>
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4a1f      	ldr	r2, [pc, #124]	; (800525c <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d00a      	beq.n	80051f8 <HAL_DMAEx_MultiBufferStart_IT+0xa90>
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	4a1e      	ldr	r2, [pc, #120]	; (8005260 <HAL_DMAEx_MultiBufferStart_IT+0xaf8>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d102      	bne.n	80051f2 <HAL_DMAEx_MultiBufferStart_IT+0xa8a>
 80051ec:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80051f0:	e03f      	b.n	8005272 <HAL_DMAEx_MultiBufferStart_IT+0xb0a>
 80051f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80051f6:	e03c      	b.n	8005272 <HAL_DMAEx_MultiBufferStart_IT+0xb0a>
 80051f8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80051fc:	e039      	b.n	8005272 <HAL_DMAEx_MultiBufferStart_IT+0xb0a>
 80051fe:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8005202:	e036      	b.n	8005272 <HAL_DMAEx_MultiBufferStart_IT+0xb0a>
 8005204:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8005208:	e033      	b.n	8005272 <HAL_DMAEx_MultiBufferStart_IT+0xb0a>
 800520a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800520e:	e030      	b.n	8005272 <HAL_DMAEx_MultiBufferStart_IT+0xb0a>
 8005210:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005214:	e02d      	b.n	8005272 <HAL_DMAEx_MultiBufferStart_IT+0xb0a>
 8005216:	f44f 7300 	mov.w	r3, #512	; 0x200
 800521a:	e02a      	b.n	8005272 <HAL_DMAEx_MultiBufferStart_IT+0xb0a>
 800521c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005220:	e027      	b.n	8005272 <HAL_DMAEx_MultiBufferStart_IT+0xb0a>
 8005222:	2308      	movs	r3, #8
 8005224:	e025      	b.n	8005272 <HAL_DMAEx_MultiBufferStart_IT+0xb0a>
 8005226:	2308      	movs	r3, #8
 8005228:	e023      	b.n	8005272 <HAL_DMAEx_MultiBufferStart_IT+0xb0a>
 800522a:	2308      	movs	r3, #8
 800522c:	e021      	b.n	8005272 <HAL_DMAEx_MultiBufferStart_IT+0xb0a>
 800522e:	bf00      	nop
 8005230:	400260b8 	.word	0x400260b8
 8005234:	40026010 	.word	0x40026010
 8005238:	40026410 	.word	0x40026410
 800523c:	40026070 	.word	0x40026070
 8005240:	40026470 	.word	0x40026470
 8005244:	40026028 	.word	0x40026028
 8005248:	40026428 	.word	0x40026428
 800524c:	40026088 	.word	0x40026088
 8005250:	40026488 	.word	0x40026488
 8005254:	40026040 	.word	0x40026040
 8005258:	40026440 	.word	0x40026440
 800525c:	400260a0 	.word	0x400260a0
 8005260:	400264a0 	.word	0x400264a0
 8005264:	40026400 	.word	0x40026400
 8005268:	40026058 	.word	0x40026058
 800526c:	40026000 	.word	0x40026000
 8005270:	2308      	movs	r3, #8
 8005272:	4a9a      	ldr	r2, [pc, #616]	; (80054dc <HAL_DMAEx_MultiBufferStart_IT+0xd74>)
 8005274:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	461a      	mov	r2, r3
 800527c:	4b98      	ldr	r3, [pc, #608]	; (80054e0 <HAL_DMAEx_MultiBufferStart_IT+0xd78>)
 800527e:	429a      	cmp	r2, r3
 8005280:	d960      	bls.n	8005344 <HAL_DMAEx_MultiBufferStart_IT+0xbdc>
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4a97      	ldr	r2, [pc, #604]	; (80054e4 <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d057      	beq.n	800533c <HAL_DMAEx_MultiBufferStart_IT+0xbd4>
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4a95      	ldr	r2, [pc, #596]	; (80054e8 <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d050      	beq.n	8005338 <HAL_DMAEx_MultiBufferStart_IT+0xbd0>
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4a94      	ldr	r2, [pc, #592]	; (80054ec <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d049      	beq.n	8005334 <HAL_DMAEx_MultiBufferStart_IT+0xbcc>
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	4a92      	ldr	r2, [pc, #584]	; (80054f0 <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d042      	beq.n	8005330 <HAL_DMAEx_MultiBufferStart_IT+0xbc8>
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	4a91      	ldr	r2, [pc, #580]	; (80054f4 <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d03a      	beq.n	800532a <HAL_DMAEx_MultiBufferStart_IT+0xbc2>
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4a8f      	ldr	r2, [pc, #572]	; (80054f8 <HAL_DMAEx_MultiBufferStart_IT+0xd90>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d032      	beq.n	8005324 <HAL_DMAEx_MultiBufferStart_IT+0xbbc>
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	4a8e      	ldr	r2, [pc, #568]	; (80054fc <HAL_DMAEx_MultiBufferStart_IT+0xd94>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d02a      	beq.n	800531e <HAL_DMAEx_MultiBufferStart_IT+0xbb6>
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4a8c      	ldr	r2, [pc, #560]	; (8005500 <HAL_DMAEx_MultiBufferStart_IT+0xd98>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d022      	beq.n	8005318 <HAL_DMAEx_MultiBufferStart_IT+0xbb0>
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4a8b      	ldr	r2, [pc, #556]	; (8005504 <HAL_DMAEx_MultiBufferStart_IT+0xd9c>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d01a      	beq.n	8005312 <HAL_DMAEx_MultiBufferStart_IT+0xbaa>
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4a89      	ldr	r2, [pc, #548]	; (8005508 <HAL_DMAEx_MultiBufferStart_IT+0xda0>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d012      	beq.n	800530c <HAL_DMAEx_MultiBufferStart_IT+0xba4>
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4a88      	ldr	r2, [pc, #544]	; (800550c <HAL_DMAEx_MultiBufferStart_IT+0xda4>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d00a      	beq.n	8005306 <HAL_DMAEx_MultiBufferStart_IT+0xb9e>
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	4a86      	ldr	r2, [pc, #536]	; (8005510 <HAL_DMAEx_MultiBufferStart_IT+0xda8>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d102      	bne.n	8005300 <HAL_DMAEx_MultiBufferStart_IT+0xb98>
 80052fa:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80052fe:	e01e      	b.n	800533e <HAL_DMAEx_MultiBufferStart_IT+0xbd6>
 8005300:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005304:	e01b      	b.n	800533e <HAL_DMAEx_MultiBufferStart_IT+0xbd6>
 8005306:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800530a:	e018      	b.n	800533e <HAL_DMAEx_MultiBufferStart_IT+0xbd6>
 800530c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005310:	e015      	b.n	800533e <HAL_DMAEx_MultiBufferStart_IT+0xbd6>
 8005312:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005316:	e012      	b.n	800533e <HAL_DMAEx_MultiBufferStart_IT+0xbd6>
 8005318:	f44f 7380 	mov.w	r3, #256	; 0x100
 800531c:	e00f      	b.n	800533e <HAL_DMAEx_MultiBufferStart_IT+0xbd6>
 800531e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005322:	e00c      	b.n	800533e <HAL_DMAEx_MultiBufferStart_IT+0xbd6>
 8005324:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005328:	e009      	b.n	800533e <HAL_DMAEx_MultiBufferStart_IT+0xbd6>
 800532a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800532e:	e006      	b.n	800533e <HAL_DMAEx_MultiBufferStart_IT+0xbd6>
 8005330:	2304      	movs	r3, #4
 8005332:	e004      	b.n	800533e <HAL_DMAEx_MultiBufferStart_IT+0xbd6>
 8005334:	2304      	movs	r3, #4
 8005336:	e002      	b.n	800533e <HAL_DMAEx_MultiBufferStart_IT+0xbd6>
 8005338:	2304      	movs	r3, #4
 800533a:	e000      	b.n	800533e <HAL_DMAEx_MultiBufferStart_IT+0xbd6>
 800533c:	2304      	movs	r3, #4
 800533e:	4a75      	ldr	r2, [pc, #468]	; (8005514 <HAL_DMAEx_MultiBufferStart_IT+0xdac>)
 8005340:	60d3      	str	r3, [r2, #12]
 8005342:	e151      	b.n	80055e8 <HAL_DMAEx_MultiBufferStart_IT+0xe80>
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	461a      	mov	r2, r3
 800534a:	4b73      	ldr	r3, [pc, #460]	; (8005518 <HAL_DMAEx_MultiBufferStart_IT+0xdb0>)
 800534c:	429a      	cmp	r2, r3
 800534e:	d960      	bls.n	8005412 <HAL_DMAEx_MultiBufferStart_IT+0xcaa>
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a63      	ldr	r2, [pc, #396]	; (80054e4 <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d057      	beq.n	800540a <HAL_DMAEx_MultiBufferStart_IT+0xca2>
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4a62      	ldr	r2, [pc, #392]	; (80054e8 <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d050      	beq.n	8005406 <HAL_DMAEx_MultiBufferStart_IT+0xc9e>
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a60      	ldr	r2, [pc, #384]	; (80054ec <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d049      	beq.n	8005402 <HAL_DMAEx_MultiBufferStart_IT+0xc9a>
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4a5f      	ldr	r2, [pc, #380]	; (80054f0 <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d042      	beq.n	80053fe <HAL_DMAEx_MultiBufferStart_IT+0xc96>
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a5d      	ldr	r2, [pc, #372]	; (80054f4 <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d03a      	beq.n	80053f8 <HAL_DMAEx_MultiBufferStart_IT+0xc90>
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a5c      	ldr	r2, [pc, #368]	; (80054f8 <HAL_DMAEx_MultiBufferStart_IT+0xd90>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d032      	beq.n	80053f2 <HAL_DMAEx_MultiBufferStart_IT+0xc8a>
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a5a      	ldr	r2, [pc, #360]	; (80054fc <HAL_DMAEx_MultiBufferStart_IT+0xd94>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d02a      	beq.n	80053ec <HAL_DMAEx_MultiBufferStart_IT+0xc84>
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4a59      	ldr	r2, [pc, #356]	; (8005500 <HAL_DMAEx_MultiBufferStart_IT+0xd98>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d022      	beq.n	80053e6 <HAL_DMAEx_MultiBufferStart_IT+0xc7e>
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4a57      	ldr	r2, [pc, #348]	; (8005504 <HAL_DMAEx_MultiBufferStart_IT+0xd9c>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d01a      	beq.n	80053e0 <HAL_DMAEx_MultiBufferStart_IT+0xc78>
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a56      	ldr	r2, [pc, #344]	; (8005508 <HAL_DMAEx_MultiBufferStart_IT+0xda0>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d012      	beq.n	80053da <HAL_DMAEx_MultiBufferStart_IT+0xc72>
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a54      	ldr	r2, [pc, #336]	; (800550c <HAL_DMAEx_MultiBufferStart_IT+0xda4>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d00a      	beq.n	80053d4 <HAL_DMAEx_MultiBufferStart_IT+0xc6c>
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4a53      	ldr	r2, [pc, #332]	; (8005510 <HAL_DMAEx_MultiBufferStart_IT+0xda8>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d102      	bne.n	80053ce <HAL_DMAEx_MultiBufferStart_IT+0xc66>
 80053c8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80053cc:	e01e      	b.n	800540c <HAL_DMAEx_MultiBufferStart_IT+0xca4>
 80053ce:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80053d2:	e01b      	b.n	800540c <HAL_DMAEx_MultiBufferStart_IT+0xca4>
 80053d4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80053d8:	e018      	b.n	800540c <HAL_DMAEx_MultiBufferStart_IT+0xca4>
 80053da:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80053de:	e015      	b.n	800540c <HAL_DMAEx_MultiBufferStart_IT+0xca4>
 80053e0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80053e4:	e012      	b.n	800540c <HAL_DMAEx_MultiBufferStart_IT+0xca4>
 80053e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80053ea:	e00f      	b.n	800540c <HAL_DMAEx_MultiBufferStart_IT+0xca4>
 80053ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80053f0:	e00c      	b.n	800540c <HAL_DMAEx_MultiBufferStart_IT+0xca4>
 80053f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80053f6:	e009      	b.n	800540c <HAL_DMAEx_MultiBufferStart_IT+0xca4>
 80053f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80053fc:	e006      	b.n	800540c <HAL_DMAEx_MultiBufferStart_IT+0xca4>
 80053fe:	2304      	movs	r3, #4
 8005400:	e004      	b.n	800540c <HAL_DMAEx_MultiBufferStart_IT+0xca4>
 8005402:	2304      	movs	r3, #4
 8005404:	e002      	b.n	800540c <HAL_DMAEx_MultiBufferStart_IT+0xca4>
 8005406:	2304      	movs	r3, #4
 8005408:	e000      	b.n	800540c <HAL_DMAEx_MultiBufferStart_IT+0xca4>
 800540a:	2304      	movs	r3, #4
 800540c:	4a41      	ldr	r2, [pc, #260]	; (8005514 <HAL_DMAEx_MultiBufferStart_IT+0xdac>)
 800540e:	6093      	str	r3, [r2, #8]
 8005410:	e0ea      	b.n	80055e8 <HAL_DMAEx_MultiBufferStart_IT+0xe80>
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	461a      	mov	r2, r3
 8005418:	4b40      	ldr	r3, [pc, #256]	; (800551c <HAL_DMAEx_MultiBufferStart_IT+0xdb4>)
 800541a:	429a      	cmp	r2, r3
 800541c:	f240 8084 	bls.w	8005528 <HAL_DMAEx_MultiBufferStart_IT+0xdc0>
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4a2f      	ldr	r2, [pc, #188]	; (80054e4 <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d07a      	beq.n	8005520 <HAL_DMAEx_MultiBufferStart_IT+0xdb8>
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4a2e      	ldr	r2, [pc, #184]	; (80054e8 <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d050      	beq.n	80054d6 <HAL_DMAEx_MultiBufferStart_IT+0xd6e>
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4a2c      	ldr	r2, [pc, #176]	; (80054ec <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d049      	beq.n	80054d2 <HAL_DMAEx_MultiBufferStart_IT+0xd6a>
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	4a2b      	ldr	r2, [pc, #172]	; (80054f0 <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d042      	beq.n	80054ce <HAL_DMAEx_MultiBufferStart_IT+0xd66>
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4a29      	ldr	r2, [pc, #164]	; (80054f4 <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d03a      	beq.n	80054c8 <HAL_DMAEx_MultiBufferStart_IT+0xd60>
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	4a28      	ldr	r2, [pc, #160]	; (80054f8 <HAL_DMAEx_MultiBufferStart_IT+0xd90>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d032      	beq.n	80054c2 <HAL_DMAEx_MultiBufferStart_IT+0xd5a>
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4a26      	ldr	r2, [pc, #152]	; (80054fc <HAL_DMAEx_MultiBufferStart_IT+0xd94>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d02a      	beq.n	80054bc <HAL_DMAEx_MultiBufferStart_IT+0xd54>
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4a25      	ldr	r2, [pc, #148]	; (8005500 <HAL_DMAEx_MultiBufferStart_IT+0xd98>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d022      	beq.n	80054b6 <HAL_DMAEx_MultiBufferStart_IT+0xd4e>
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4a23      	ldr	r2, [pc, #140]	; (8005504 <HAL_DMAEx_MultiBufferStart_IT+0xd9c>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d01a      	beq.n	80054b0 <HAL_DMAEx_MultiBufferStart_IT+0xd48>
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4a22      	ldr	r2, [pc, #136]	; (8005508 <HAL_DMAEx_MultiBufferStart_IT+0xda0>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d012      	beq.n	80054aa <HAL_DMAEx_MultiBufferStart_IT+0xd42>
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4a20      	ldr	r2, [pc, #128]	; (800550c <HAL_DMAEx_MultiBufferStart_IT+0xda4>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d00a      	beq.n	80054a4 <HAL_DMAEx_MultiBufferStart_IT+0xd3c>
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4a1f      	ldr	r2, [pc, #124]	; (8005510 <HAL_DMAEx_MultiBufferStart_IT+0xda8>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d102      	bne.n	800549e <HAL_DMAEx_MultiBufferStart_IT+0xd36>
 8005498:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800549c:	e041      	b.n	8005522 <HAL_DMAEx_MultiBufferStart_IT+0xdba>
 800549e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80054a2:	e03e      	b.n	8005522 <HAL_DMAEx_MultiBufferStart_IT+0xdba>
 80054a4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80054a8:	e03b      	b.n	8005522 <HAL_DMAEx_MultiBufferStart_IT+0xdba>
 80054aa:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80054ae:	e038      	b.n	8005522 <HAL_DMAEx_MultiBufferStart_IT+0xdba>
 80054b0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80054b4:	e035      	b.n	8005522 <HAL_DMAEx_MultiBufferStart_IT+0xdba>
 80054b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80054ba:	e032      	b.n	8005522 <HAL_DMAEx_MultiBufferStart_IT+0xdba>
 80054bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80054c0:	e02f      	b.n	8005522 <HAL_DMAEx_MultiBufferStart_IT+0xdba>
 80054c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80054c6:	e02c      	b.n	8005522 <HAL_DMAEx_MultiBufferStart_IT+0xdba>
 80054c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80054cc:	e029      	b.n	8005522 <HAL_DMAEx_MultiBufferStart_IT+0xdba>
 80054ce:	2304      	movs	r3, #4
 80054d0:	e027      	b.n	8005522 <HAL_DMAEx_MultiBufferStart_IT+0xdba>
 80054d2:	2304      	movs	r3, #4
 80054d4:	e025      	b.n	8005522 <HAL_DMAEx_MultiBufferStart_IT+0xdba>
 80054d6:	2304      	movs	r3, #4
 80054d8:	e023      	b.n	8005522 <HAL_DMAEx_MultiBufferStart_IT+0xdba>
 80054da:	bf00      	nop
 80054dc:	40026000 	.word	0x40026000
 80054e0:	40026458 	.word	0x40026458
 80054e4:	40026010 	.word	0x40026010
 80054e8:	40026410 	.word	0x40026410
 80054ec:	40026070 	.word	0x40026070
 80054f0:	40026470 	.word	0x40026470
 80054f4:	40026028 	.word	0x40026028
 80054f8:	40026428 	.word	0x40026428
 80054fc:	40026088 	.word	0x40026088
 8005500:	40026488 	.word	0x40026488
 8005504:	40026040 	.word	0x40026040
 8005508:	40026440 	.word	0x40026440
 800550c:	400260a0 	.word	0x400260a0
 8005510:	400264a0 	.word	0x400264a0
 8005514:	40026400 	.word	0x40026400
 8005518:	400260b8 	.word	0x400260b8
 800551c:	40026058 	.word	0x40026058
 8005520:	2304      	movs	r3, #4
 8005522:	4a94      	ldr	r2, [pc, #592]	; (8005774 <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 8005524:	60d3      	str	r3, [r2, #12]
 8005526:	e05f      	b.n	80055e8 <HAL_DMAEx_MultiBufferStart_IT+0xe80>
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4a92      	ldr	r2, [pc, #584]	; (8005778 <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d057      	beq.n	80055e2 <HAL_DMAEx_MultiBufferStart_IT+0xe7a>
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4a91      	ldr	r2, [pc, #580]	; (800577c <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d050      	beq.n	80055de <HAL_DMAEx_MultiBufferStart_IT+0xe76>
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4a8f      	ldr	r2, [pc, #572]	; (8005780 <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d049      	beq.n	80055da <HAL_DMAEx_MultiBufferStart_IT+0xe72>
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4a8e      	ldr	r2, [pc, #568]	; (8005784 <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d042      	beq.n	80055d6 <HAL_DMAEx_MultiBufferStart_IT+0xe6e>
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4a8c      	ldr	r2, [pc, #560]	; (8005788 <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d03a      	beq.n	80055d0 <HAL_DMAEx_MultiBufferStart_IT+0xe68>
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	4a8b      	ldr	r2, [pc, #556]	; (800578c <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d032      	beq.n	80055ca <HAL_DMAEx_MultiBufferStart_IT+0xe62>
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4a89      	ldr	r2, [pc, #548]	; (8005790 <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d02a      	beq.n	80055c4 <HAL_DMAEx_MultiBufferStart_IT+0xe5c>
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4a88      	ldr	r2, [pc, #544]	; (8005794 <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d022      	beq.n	80055be <HAL_DMAEx_MultiBufferStart_IT+0xe56>
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4a86      	ldr	r2, [pc, #536]	; (8005798 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d01a      	beq.n	80055b8 <HAL_DMAEx_MultiBufferStart_IT+0xe50>
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4a85      	ldr	r2, [pc, #532]	; (800579c <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d012      	beq.n	80055b2 <HAL_DMAEx_MultiBufferStart_IT+0xe4a>
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4a83      	ldr	r2, [pc, #524]	; (80057a0 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d00a      	beq.n	80055ac <HAL_DMAEx_MultiBufferStart_IT+0xe44>
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4a82      	ldr	r2, [pc, #520]	; (80057a4 <HAL_DMAEx_MultiBufferStart_IT+0x103c>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d102      	bne.n	80055a6 <HAL_DMAEx_MultiBufferStart_IT+0xe3e>
 80055a0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80055a4:	e01e      	b.n	80055e4 <HAL_DMAEx_MultiBufferStart_IT+0xe7c>
 80055a6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80055aa:	e01b      	b.n	80055e4 <HAL_DMAEx_MultiBufferStart_IT+0xe7c>
 80055ac:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80055b0:	e018      	b.n	80055e4 <HAL_DMAEx_MultiBufferStart_IT+0xe7c>
 80055b2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80055b6:	e015      	b.n	80055e4 <HAL_DMAEx_MultiBufferStart_IT+0xe7c>
 80055b8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80055bc:	e012      	b.n	80055e4 <HAL_DMAEx_MultiBufferStart_IT+0xe7c>
 80055be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80055c2:	e00f      	b.n	80055e4 <HAL_DMAEx_MultiBufferStart_IT+0xe7c>
 80055c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80055c8:	e00c      	b.n	80055e4 <HAL_DMAEx_MultiBufferStart_IT+0xe7c>
 80055ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80055ce:	e009      	b.n	80055e4 <HAL_DMAEx_MultiBufferStart_IT+0xe7c>
 80055d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80055d4:	e006      	b.n	80055e4 <HAL_DMAEx_MultiBufferStart_IT+0xe7c>
 80055d6:	2304      	movs	r3, #4
 80055d8:	e004      	b.n	80055e4 <HAL_DMAEx_MultiBufferStart_IT+0xe7c>
 80055da:	2304      	movs	r3, #4
 80055dc:	e002      	b.n	80055e4 <HAL_DMAEx_MultiBufferStart_IT+0xe7c>
 80055de:	2304      	movs	r3, #4
 80055e0:	e000      	b.n	80055e4 <HAL_DMAEx_MultiBufferStart_IT+0xe7c>
 80055e2:	2304      	movs	r3, #4
 80055e4:	4a63      	ldr	r2, [pc, #396]	; (8005774 <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 80055e6:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	461a      	mov	r2, r3
 80055ee:	4b6e      	ldr	r3, [pc, #440]	; (80057a8 <HAL_DMAEx_MultiBufferStart_IT+0x1040>)
 80055f0:	429a      	cmp	r2, r3
 80055f2:	d95c      	bls.n	80056ae <HAL_DMAEx_MultiBufferStart_IT+0xf46>
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	4a5f      	ldr	r2, [pc, #380]	; (8005778 <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d053      	beq.n	80056a6 <HAL_DMAEx_MultiBufferStart_IT+0xf3e>
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	4a5e      	ldr	r2, [pc, #376]	; (800577c <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d04c      	beq.n	80056a2 <HAL_DMAEx_MultiBufferStart_IT+0xf3a>
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	4a5c      	ldr	r2, [pc, #368]	; (8005780 <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d045      	beq.n	800569e <HAL_DMAEx_MultiBufferStart_IT+0xf36>
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4a5b      	ldr	r2, [pc, #364]	; (8005784 <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 8005618:	4293      	cmp	r3, r2
 800561a:	d03e      	beq.n	800569a <HAL_DMAEx_MultiBufferStart_IT+0xf32>
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	4a59      	ldr	r2, [pc, #356]	; (8005788 <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d037      	beq.n	8005696 <HAL_DMAEx_MultiBufferStart_IT+0xf2e>
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	4a58      	ldr	r2, [pc, #352]	; (800578c <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d030      	beq.n	8005692 <HAL_DMAEx_MultiBufferStart_IT+0xf2a>
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	4a56      	ldr	r2, [pc, #344]	; (8005790 <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d029      	beq.n	800568e <HAL_DMAEx_MultiBufferStart_IT+0xf26>
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4a55      	ldr	r2, [pc, #340]	; (8005794 <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d022      	beq.n	800568a <HAL_DMAEx_MultiBufferStart_IT+0xf22>
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4a53      	ldr	r2, [pc, #332]	; (8005798 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d01a      	beq.n	8005684 <HAL_DMAEx_MultiBufferStart_IT+0xf1c>
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4a52      	ldr	r2, [pc, #328]	; (800579c <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d012      	beq.n	800567e <HAL_DMAEx_MultiBufferStart_IT+0xf16>
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4a50      	ldr	r2, [pc, #320]	; (80057a0 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d00a      	beq.n	8005678 <HAL_DMAEx_MultiBufferStart_IT+0xf10>
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	4a4f      	ldr	r2, [pc, #316]	; (80057a4 <HAL_DMAEx_MultiBufferStart_IT+0x103c>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d102      	bne.n	8005672 <HAL_DMAEx_MultiBufferStart_IT+0xf0a>
 800566c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005670:	e01a      	b.n	80056a8 <HAL_DMAEx_MultiBufferStart_IT+0xf40>
 8005672:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005676:	e017      	b.n	80056a8 <HAL_DMAEx_MultiBufferStart_IT+0xf40>
 8005678:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800567c:	e014      	b.n	80056a8 <HAL_DMAEx_MultiBufferStart_IT+0xf40>
 800567e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005682:	e011      	b.n	80056a8 <HAL_DMAEx_MultiBufferStart_IT+0xf40>
 8005684:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005688:	e00e      	b.n	80056a8 <HAL_DMAEx_MultiBufferStart_IT+0xf40>
 800568a:	2340      	movs	r3, #64	; 0x40
 800568c:	e00c      	b.n	80056a8 <HAL_DMAEx_MultiBufferStart_IT+0xf40>
 800568e:	2340      	movs	r3, #64	; 0x40
 8005690:	e00a      	b.n	80056a8 <HAL_DMAEx_MultiBufferStart_IT+0xf40>
 8005692:	2340      	movs	r3, #64	; 0x40
 8005694:	e008      	b.n	80056a8 <HAL_DMAEx_MultiBufferStart_IT+0xf40>
 8005696:	2340      	movs	r3, #64	; 0x40
 8005698:	e006      	b.n	80056a8 <HAL_DMAEx_MultiBufferStart_IT+0xf40>
 800569a:	2301      	movs	r3, #1
 800569c:	e004      	b.n	80056a8 <HAL_DMAEx_MultiBufferStart_IT+0xf40>
 800569e:	2301      	movs	r3, #1
 80056a0:	e002      	b.n	80056a8 <HAL_DMAEx_MultiBufferStart_IT+0xf40>
 80056a2:	2301      	movs	r3, #1
 80056a4:	e000      	b.n	80056a8 <HAL_DMAEx_MultiBufferStart_IT+0xf40>
 80056a6:	2301      	movs	r3, #1
 80056a8:	4a40      	ldr	r2, [pc, #256]	; (80057ac <HAL_DMAEx_MultiBufferStart_IT+0x1044>)
 80056aa:	60d3      	str	r3, [r2, #12]
 80056ac:	e141      	b.n	8005932 <HAL_DMAEx_MultiBufferStart_IT+0x11ca>
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	461a      	mov	r2, r3
 80056b4:	4b3e      	ldr	r3, [pc, #248]	; (80057b0 <HAL_DMAEx_MultiBufferStart_IT+0x1048>)
 80056b6:	429a      	cmp	r2, r3
 80056b8:	d97c      	bls.n	80057b4 <HAL_DMAEx_MultiBufferStart_IT+0x104c>
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4a2e      	ldr	r2, [pc, #184]	; (8005778 <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d053      	beq.n	800576c <HAL_DMAEx_MultiBufferStart_IT+0x1004>
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4a2c      	ldr	r2, [pc, #176]	; (800577c <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d04c      	beq.n	8005768 <HAL_DMAEx_MultiBufferStart_IT+0x1000>
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4a2b      	ldr	r2, [pc, #172]	; (8005780 <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d045      	beq.n	8005764 <HAL_DMAEx_MultiBufferStart_IT+0xffc>
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4a29      	ldr	r2, [pc, #164]	; (8005784 <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d03e      	beq.n	8005760 <HAL_DMAEx_MultiBufferStart_IT+0xff8>
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4a28      	ldr	r2, [pc, #160]	; (8005788 <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d037      	beq.n	800575c <HAL_DMAEx_MultiBufferStart_IT+0xff4>
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4a26      	ldr	r2, [pc, #152]	; (800578c <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d030      	beq.n	8005758 <HAL_DMAEx_MultiBufferStart_IT+0xff0>
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4a25      	ldr	r2, [pc, #148]	; (8005790 <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d029      	beq.n	8005754 <HAL_DMAEx_MultiBufferStart_IT+0xfec>
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	4a23      	ldr	r2, [pc, #140]	; (8005794 <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d022      	beq.n	8005750 <HAL_DMAEx_MultiBufferStart_IT+0xfe8>
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	4a22      	ldr	r2, [pc, #136]	; (8005798 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d01a      	beq.n	800574a <HAL_DMAEx_MultiBufferStart_IT+0xfe2>
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	4a20      	ldr	r2, [pc, #128]	; (800579c <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d012      	beq.n	8005744 <HAL_DMAEx_MultiBufferStart_IT+0xfdc>
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4a1f      	ldr	r2, [pc, #124]	; (80057a0 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 8005724:	4293      	cmp	r3, r2
 8005726:	d00a      	beq.n	800573e <HAL_DMAEx_MultiBufferStart_IT+0xfd6>
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4a1d      	ldr	r2, [pc, #116]	; (80057a4 <HAL_DMAEx_MultiBufferStart_IT+0x103c>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d102      	bne.n	8005738 <HAL_DMAEx_MultiBufferStart_IT+0xfd0>
 8005732:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005736:	e01a      	b.n	800576e <HAL_DMAEx_MultiBufferStart_IT+0x1006>
 8005738:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800573c:	e017      	b.n	800576e <HAL_DMAEx_MultiBufferStart_IT+0x1006>
 800573e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005742:	e014      	b.n	800576e <HAL_DMAEx_MultiBufferStart_IT+0x1006>
 8005744:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005748:	e011      	b.n	800576e <HAL_DMAEx_MultiBufferStart_IT+0x1006>
 800574a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800574e:	e00e      	b.n	800576e <HAL_DMAEx_MultiBufferStart_IT+0x1006>
 8005750:	2340      	movs	r3, #64	; 0x40
 8005752:	e00c      	b.n	800576e <HAL_DMAEx_MultiBufferStart_IT+0x1006>
 8005754:	2340      	movs	r3, #64	; 0x40
 8005756:	e00a      	b.n	800576e <HAL_DMAEx_MultiBufferStart_IT+0x1006>
 8005758:	2340      	movs	r3, #64	; 0x40
 800575a:	e008      	b.n	800576e <HAL_DMAEx_MultiBufferStart_IT+0x1006>
 800575c:	2340      	movs	r3, #64	; 0x40
 800575e:	e006      	b.n	800576e <HAL_DMAEx_MultiBufferStart_IT+0x1006>
 8005760:	2301      	movs	r3, #1
 8005762:	e004      	b.n	800576e <HAL_DMAEx_MultiBufferStart_IT+0x1006>
 8005764:	2301      	movs	r3, #1
 8005766:	e002      	b.n	800576e <HAL_DMAEx_MultiBufferStart_IT+0x1006>
 8005768:	2301      	movs	r3, #1
 800576a:	e000      	b.n	800576e <HAL_DMAEx_MultiBufferStart_IT+0x1006>
 800576c:	2301      	movs	r3, #1
 800576e:	4a0f      	ldr	r2, [pc, #60]	; (80057ac <HAL_DMAEx_MultiBufferStart_IT+0x1044>)
 8005770:	6093      	str	r3, [r2, #8]
 8005772:	e0de      	b.n	8005932 <HAL_DMAEx_MultiBufferStart_IT+0x11ca>
 8005774:	40026000 	.word	0x40026000
 8005778:	40026010 	.word	0x40026010
 800577c:	40026410 	.word	0x40026410
 8005780:	40026070 	.word	0x40026070
 8005784:	40026470 	.word	0x40026470
 8005788:	40026028 	.word	0x40026028
 800578c:	40026428 	.word	0x40026428
 8005790:	40026088 	.word	0x40026088
 8005794:	40026488 	.word	0x40026488
 8005798:	40026040 	.word	0x40026040
 800579c:	40026440 	.word	0x40026440
 80057a0:	400260a0 	.word	0x400260a0
 80057a4:	400264a0 	.word	0x400264a0
 80057a8:	40026458 	.word	0x40026458
 80057ac:	40026400 	.word	0x40026400
 80057b0:	400260b8 	.word	0x400260b8
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	461a      	mov	r2, r3
 80057ba:	4b78      	ldr	r3, [pc, #480]	; (800599c <HAL_DMAEx_MultiBufferStart_IT+0x1234>)
 80057bc:	429a      	cmp	r2, r3
 80057be:	d95c      	bls.n	800587a <HAL_DMAEx_MultiBufferStart_IT+0x1112>
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	4a76      	ldr	r2, [pc, #472]	; (80059a0 <HAL_DMAEx_MultiBufferStart_IT+0x1238>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d053      	beq.n	8005872 <HAL_DMAEx_MultiBufferStart_IT+0x110a>
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	4a75      	ldr	r2, [pc, #468]	; (80059a4 <HAL_DMAEx_MultiBufferStart_IT+0x123c>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d04c      	beq.n	800586e <HAL_DMAEx_MultiBufferStart_IT+0x1106>
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	4a73      	ldr	r2, [pc, #460]	; (80059a8 <HAL_DMAEx_MultiBufferStart_IT+0x1240>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d045      	beq.n	800586a <HAL_DMAEx_MultiBufferStart_IT+0x1102>
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	4a72      	ldr	r2, [pc, #456]	; (80059ac <HAL_DMAEx_MultiBufferStart_IT+0x1244>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d03e      	beq.n	8005866 <HAL_DMAEx_MultiBufferStart_IT+0x10fe>
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	4a70      	ldr	r2, [pc, #448]	; (80059b0 <HAL_DMAEx_MultiBufferStart_IT+0x1248>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d037      	beq.n	8005862 <HAL_DMAEx_MultiBufferStart_IT+0x10fa>
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	4a6f      	ldr	r2, [pc, #444]	; (80059b4 <HAL_DMAEx_MultiBufferStart_IT+0x124c>)
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d030      	beq.n	800585e <HAL_DMAEx_MultiBufferStart_IT+0x10f6>
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	4a6d      	ldr	r2, [pc, #436]	; (80059b8 <HAL_DMAEx_MultiBufferStart_IT+0x1250>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d029      	beq.n	800585a <HAL_DMAEx_MultiBufferStart_IT+0x10f2>
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	4a6c      	ldr	r2, [pc, #432]	; (80059bc <HAL_DMAEx_MultiBufferStart_IT+0x1254>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d022      	beq.n	8005856 <HAL_DMAEx_MultiBufferStart_IT+0x10ee>
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	4a6a      	ldr	r2, [pc, #424]	; (80059c0 <HAL_DMAEx_MultiBufferStart_IT+0x1258>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d01a      	beq.n	8005850 <HAL_DMAEx_MultiBufferStart_IT+0x10e8>
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4a69      	ldr	r2, [pc, #420]	; (80059c4 <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d012      	beq.n	800584a <HAL_DMAEx_MultiBufferStart_IT+0x10e2>
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4a67      	ldr	r2, [pc, #412]	; (80059c8 <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d00a      	beq.n	8005844 <HAL_DMAEx_MultiBufferStart_IT+0x10dc>
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	4a66      	ldr	r2, [pc, #408]	; (80059cc <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d102      	bne.n	800583e <HAL_DMAEx_MultiBufferStart_IT+0x10d6>
 8005838:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800583c:	e01a      	b.n	8005874 <HAL_DMAEx_MultiBufferStart_IT+0x110c>
 800583e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005842:	e017      	b.n	8005874 <HAL_DMAEx_MultiBufferStart_IT+0x110c>
 8005844:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005848:	e014      	b.n	8005874 <HAL_DMAEx_MultiBufferStart_IT+0x110c>
 800584a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800584e:	e011      	b.n	8005874 <HAL_DMAEx_MultiBufferStart_IT+0x110c>
 8005850:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005854:	e00e      	b.n	8005874 <HAL_DMAEx_MultiBufferStart_IT+0x110c>
 8005856:	2340      	movs	r3, #64	; 0x40
 8005858:	e00c      	b.n	8005874 <HAL_DMAEx_MultiBufferStart_IT+0x110c>
 800585a:	2340      	movs	r3, #64	; 0x40
 800585c:	e00a      	b.n	8005874 <HAL_DMAEx_MultiBufferStart_IT+0x110c>
 800585e:	2340      	movs	r3, #64	; 0x40
 8005860:	e008      	b.n	8005874 <HAL_DMAEx_MultiBufferStart_IT+0x110c>
 8005862:	2340      	movs	r3, #64	; 0x40
 8005864:	e006      	b.n	8005874 <HAL_DMAEx_MultiBufferStart_IT+0x110c>
 8005866:	2301      	movs	r3, #1
 8005868:	e004      	b.n	8005874 <HAL_DMAEx_MultiBufferStart_IT+0x110c>
 800586a:	2301      	movs	r3, #1
 800586c:	e002      	b.n	8005874 <HAL_DMAEx_MultiBufferStart_IT+0x110c>
 800586e:	2301      	movs	r3, #1
 8005870:	e000      	b.n	8005874 <HAL_DMAEx_MultiBufferStart_IT+0x110c>
 8005872:	2301      	movs	r3, #1
 8005874:	4a56      	ldr	r2, [pc, #344]	; (80059d0 <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 8005876:	60d3      	str	r3, [r2, #12]
 8005878:	e05b      	b.n	8005932 <HAL_DMAEx_MultiBufferStart_IT+0x11ca>
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	4a48      	ldr	r2, [pc, #288]	; (80059a0 <HAL_DMAEx_MultiBufferStart_IT+0x1238>)
 8005880:	4293      	cmp	r3, r2
 8005882:	d053      	beq.n	800592c <HAL_DMAEx_MultiBufferStart_IT+0x11c4>
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4a46      	ldr	r2, [pc, #280]	; (80059a4 <HAL_DMAEx_MultiBufferStart_IT+0x123c>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d04c      	beq.n	8005928 <HAL_DMAEx_MultiBufferStart_IT+0x11c0>
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	4a45      	ldr	r2, [pc, #276]	; (80059a8 <HAL_DMAEx_MultiBufferStart_IT+0x1240>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d045      	beq.n	8005924 <HAL_DMAEx_MultiBufferStart_IT+0x11bc>
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4a43      	ldr	r2, [pc, #268]	; (80059ac <HAL_DMAEx_MultiBufferStart_IT+0x1244>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d03e      	beq.n	8005920 <HAL_DMAEx_MultiBufferStart_IT+0x11b8>
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	4a42      	ldr	r2, [pc, #264]	; (80059b0 <HAL_DMAEx_MultiBufferStart_IT+0x1248>)
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d037      	beq.n	800591c <HAL_DMAEx_MultiBufferStart_IT+0x11b4>
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	4a40      	ldr	r2, [pc, #256]	; (80059b4 <HAL_DMAEx_MultiBufferStart_IT+0x124c>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d030      	beq.n	8005918 <HAL_DMAEx_MultiBufferStart_IT+0x11b0>
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	4a3f      	ldr	r2, [pc, #252]	; (80059b8 <HAL_DMAEx_MultiBufferStart_IT+0x1250>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d029      	beq.n	8005914 <HAL_DMAEx_MultiBufferStart_IT+0x11ac>
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	4a3d      	ldr	r2, [pc, #244]	; (80059bc <HAL_DMAEx_MultiBufferStart_IT+0x1254>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d022      	beq.n	8005910 <HAL_DMAEx_MultiBufferStart_IT+0x11a8>
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	4a3c      	ldr	r2, [pc, #240]	; (80059c0 <HAL_DMAEx_MultiBufferStart_IT+0x1258>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d01a      	beq.n	800590a <HAL_DMAEx_MultiBufferStart_IT+0x11a2>
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	4a3a      	ldr	r2, [pc, #232]	; (80059c4 <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d012      	beq.n	8005904 <HAL_DMAEx_MultiBufferStart_IT+0x119c>
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	4a39      	ldr	r2, [pc, #228]	; (80059c8 <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d00a      	beq.n	80058fe <HAL_DMAEx_MultiBufferStart_IT+0x1196>
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	4a37      	ldr	r2, [pc, #220]	; (80059cc <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d102      	bne.n	80058f8 <HAL_DMAEx_MultiBufferStart_IT+0x1190>
 80058f2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80058f6:	e01a      	b.n	800592e <HAL_DMAEx_MultiBufferStart_IT+0x11c6>
 80058f8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80058fc:	e017      	b.n	800592e <HAL_DMAEx_MultiBufferStart_IT+0x11c6>
 80058fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005902:	e014      	b.n	800592e <HAL_DMAEx_MultiBufferStart_IT+0x11c6>
 8005904:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005908:	e011      	b.n	800592e <HAL_DMAEx_MultiBufferStart_IT+0x11c6>
 800590a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800590e:	e00e      	b.n	800592e <HAL_DMAEx_MultiBufferStart_IT+0x11c6>
 8005910:	2340      	movs	r3, #64	; 0x40
 8005912:	e00c      	b.n	800592e <HAL_DMAEx_MultiBufferStart_IT+0x11c6>
 8005914:	2340      	movs	r3, #64	; 0x40
 8005916:	e00a      	b.n	800592e <HAL_DMAEx_MultiBufferStart_IT+0x11c6>
 8005918:	2340      	movs	r3, #64	; 0x40
 800591a:	e008      	b.n	800592e <HAL_DMAEx_MultiBufferStart_IT+0x11c6>
 800591c:	2340      	movs	r3, #64	; 0x40
 800591e:	e006      	b.n	800592e <HAL_DMAEx_MultiBufferStart_IT+0x11c6>
 8005920:	2301      	movs	r3, #1
 8005922:	e004      	b.n	800592e <HAL_DMAEx_MultiBufferStart_IT+0x11c6>
 8005924:	2301      	movs	r3, #1
 8005926:	e002      	b.n	800592e <HAL_DMAEx_MultiBufferStart_IT+0x11c6>
 8005928:	2301      	movs	r3, #1
 800592a:	e000      	b.n	800592e <HAL_DMAEx_MultiBufferStart_IT+0x11c6>
 800592c:	2301      	movs	r3, #1
 800592e:	4a28      	ldr	r2, [pc, #160]	; (80059d0 <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 8005930:	6093      	str	r3, [r2, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	681a      	ldr	r2, [r3, #0]
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f042 0216 	orr.w	r2, r2, #22
 8005940:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	695a      	ldr	r2, [r3, #20]
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005950:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005956:	2b00      	cmp	r3, #0
 8005958:	d103      	bne.n	8005962 <HAL_DMAEx_MultiBufferStart_IT+0x11fa>
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800595e:	2b00      	cmp	r3, #0
 8005960:	d007      	beq.n	8005972 <HAL_DMAEx_MultiBufferStart_IT+0x120a>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	681a      	ldr	r2, [r3, #0]
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f042 0208 	orr.w	r2, r2, #8
 8005970:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma); 
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	681a      	ldr	r2, [r3, #0]
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f042 0201 	orr.w	r2, r2, #1
 8005980:	601a      	str	r2, [r3, #0]
 8005982:	e005      	b.n	8005990 <HAL_DMAEx_MultiBufferStart_IT+0x1228>
  }
  else
  {     
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	2200      	movs	r2, #0
 8005988:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800598c:	2302      	movs	r3, #2
 800598e:	75fb      	strb	r3, [r7, #23]
  }  
  return status; 
 8005990:	7dfb      	ldrb	r3, [r7, #23]
}
 8005992:	4618      	mov	r0, r3
 8005994:	3718      	adds	r7, #24
 8005996:	46bd      	mov	sp, r7
 8005998:	bd80      	pop	{r7, pc}
 800599a:	bf00      	nop
 800599c:	40026058 	.word	0x40026058
 80059a0:	40026010 	.word	0x40026010
 80059a4:	40026410 	.word	0x40026410
 80059a8:	40026070 	.word	0x40026070
 80059ac:	40026470 	.word	0x40026470
 80059b0:	40026028 	.word	0x40026028
 80059b4:	40026428 	.word	0x40026428
 80059b8:	40026088 	.word	0x40026088
 80059bc:	40026488 	.word	0x40026488
 80059c0:	40026040 	.word	0x40026040
 80059c4:	40026440 	.word	0x40026440
 80059c8:	400260a0 	.word	0x400260a0
 80059cc:	400264a0 	.word	0x400264a0
 80059d0:	40026000 	.word	0x40026000

080059d4 <HAL_DMAEx_ChangeMemory>:
  *         MEMORY1 and the MEMORY1 address can be changed only when the current 
  *         transfer use MEMORY0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ChangeMemory(DMA_HandleTypeDef *hdma, uint32_t Address, HAL_DMA_MemoryTypeDef memory)
{
 80059d4:	b480      	push	{r7}
 80059d6:	b085      	sub	sp, #20
 80059d8:	af00      	add	r7, sp, #0
 80059da:	60f8      	str	r0, [r7, #12]
 80059dc:	60b9      	str	r1, [r7, #8]
 80059de:	4613      	mov	r3, r2
 80059e0:	71fb      	strb	r3, [r7, #7]
  if(memory == MEMORY0)
 80059e2:	79fb      	ldrb	r3, [r7, #7]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d104      	bne.n	80059f2 <HAL_DMAEx_ChangeMemory+0x1e>
  {
    /* change the memory0 address */
    hdma->Instance->M0AR = Address;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	68ba      	ldr	r2, [r7, #8]
 80059ee:	60da      	str	r2, [r3, #12]
 80059f0:	e003      	b.n	80059fa <HAL_DMAEx_ChangeMemory+0x26>
  }
  else
  {
    /* change the memory1 address */
    hdma->Instance->M1AR = Address;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	68ba      	ldr	r2, [r7, #8]
 80059f8:	611a      	str	r2, [r3, #16]
  }
  
  return HAL_OK;
 80059fa:	2300      	movs	r3, #0
}
 80059fc:	4618      	mov	r0, r3
 80059fe:	3714      	adds	r7, #20
 8005a00:	46bd      	mov	sp, r7
 8005a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a06:	4770      	bx	lr

08005a08 <DMA_MultiBufferSetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005a08:	b480      	push	{r7}
 8005a0a:	b085      	sub	sp, #20
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	60f8      	str	r0, [r7, #12]
 8005a10:	60b9      	str	r1, [r7, #8]
 8005a12:	607a      	str	r2, [r7, #4]
 8005a14:	603b      	str	r3, [r7, #0]
  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	683a      	ldr	r2, [r7, #0]
 8005a1c:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	689b      	ldr	r3, [r3, #8]
 8005a22:	2b40      	cmp	r3, #64	; 0x40
 8005a24:	d108      	bne.n	8005a38 <DMA_MultiBufferSetConfig+0x30>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	687a      	ldr	r2, [r7, #4]
 8005a2c:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	68ba      	ldr	r2, [r7, #8]
 8005a34:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005a36:	e007      	b.n	8005a48 <DMA_MultiBufferSetConfig+0x40>
    hdma->Instance->PAR = SrcAddress;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	68ba      	ldr	r2, [r7, #8]
 8005a3e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	687a      	ldr	r2, [r7, #4]
 8005a46:	60da      	str	r2, [r3, #12]
}
 8005a48:	bf00      	nop
 8005a4a:	3714      	adds	r7, #20
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a52:	4770      	bx	lr

08005a54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005a54:	b480      	push	{r7}
 8005a56:	b089      	sub	sp, #36	; 0x24
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
 8005a5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8005a5e:	2300      	movs	r3, #0
 8005a60:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8005a62:	2300      	movs	r3, #0
 8005a64:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8005a66:	2300      	movs	r3, #0
 8005a68:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8005a6e:	2300      	movs	r3, #0
 8005a70:	61fb      	str	r3, [r7, #28]
 8005a72:	e175      	b.n	8005d60 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8005a74:	2201      	movs	r2, #1
 8005a76:	69fb      	ldr	r3, [r7, #28]
 8005a78:	fa02 f303 	lsl.w	r3, r2, r3
 8005a7c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	697a      	ldr	r2, [r7, #20]
 8005a84:	4013      	ands	r3, r2
 8005a86:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005a88:	693a      	ldr	r2, [r7, #16]
 8005a8a:	697b      	ldr	r3, [r7, #20]
 8005a8c:	429a      	cmp	r2, r3
 8005a8e:	f040 8164 	bne.w	8005d5a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	685b      	ldr	r3, [r3, #4]
 8005a96:	f003 0303 	and.w	r3, r3, #3
 8005a9a:	2b01      	cmp	r3, #1
 8005a9c:	d005      	beq.n	8005aaa <HAL_GPIO_Init+0x56>
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	685b      	ldr	r3, [r3, #4]
 8005aa2:	f003 0303 	and.w	r3, r3, #3
 8005aa6:	2b02      	cmp	r3, #2
 8005aa8:	d130      	bne.n	8005b0c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	689b      	ldr	r3, [r3, #8]
 8005aae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005ab0:	69fb      	ldr	r3, [r7, #28]
 8005ab2:	005b      	lsls	r3, r3, #1
 8005ab4:	2203      	movs	r2, #3
 8005ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8005aba:	43db      	mvns	r3, r3
 8005abc:	69ba      	ldr	r2, [r7, #24]
 8005abe:	4013      	ands	r3, r2
 8005ac0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	68da      	ldr	r2, [r3, #12]
 8005ac6:	69fb      	ldr	r3, [r7, #28]
 8005ac8:	005b      	lsls	r3, r3, #1
 8005aca:	fa02 f303 	lsl.w	r3, r2, r3
 8005ace:	69ba      	ldr	r2, [r7, #24]
 8005ad0:	4313      	orrs	r3, r2
 8005ad2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	69ba      	ldr	r2, [r7, #24]
 8005ad8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	685b      	ldr	r3, [r3, #4]
 8005ade:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005ae0:	2201      	movs	r2, #1
 8005ae2:	69fb      	ldr	r3, [r7, #28]
 8005ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ae8:	43db      	mvns	r3, r3
 8005aea:	69ba      	ldr	r2, [r7, #24]
 8005aec:	4013      	ands	r3, r2
 8005aee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	685b      	ldr	r3, [r3, #4]
 8005af4:	091b      	lsrs	r3, r3, #4
 8005af6:	f003 0201 	and.w	r2, r3, #1
 8005afa:	69fb      	ldr	r3, [r7, #28]
 8005afc:	fa02 f303 	lsl.w	r3, r2, r3
 8005b00:	69ba      	ldr	r2, [r7, #24]
 8005b02:	4313      	orrs	r3, r2
 8005b04:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	69ba      	ldr	r2, [r7, #24]
 8005b0a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	685b      	ldr	r3, [r3, #4]
 8005b10:	f003 0303 	and.w	r3, r3, #3
 8005b14:	2b03      	cmp	r3, #3
 8005b16:	d017      	beq.n	8005b48 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	68db      	ldr	r3, [r3, #12]
 8005b1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8005b1e:	69fb      	ldr	r3, [r7, #28]
 8005b20:	005b      	lsls	r3, r3, #1
 8005b22:	2203      	movs	r2, #3
 8005b24:	fa02 f303 	lsl.w	r3, r2, r3
 8005b28:	43db      	mvns	r3, r3
 8005b2a:	69ba      	ldr	r2, [r7, #24]
 8005b2c:	4013      	ands	r3, r2
 8005b2e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	689a      	ldr	r2, [r3, #8]
 8005b34:	69fb      	ldr	r3, [r7, #28]
 8005b36:	005b      	lsls	r3, r3, #1
 8005b38:	fa02 f303 	lsl.w	r3, r2, r3
 8005b3c:	69ba      	ldr	r2, [r7, #24]
 8005b3e:	4313      	orrs	r3, r2
 8005b40:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	69ba      	ldr	r2, [r7, #24]
 8005b46:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	685b      	ldr	r3, [r3, #4]
 8005b4c:	f003 0303 	and.w	r3, r3, #3
 8005b50:	2b02      	cmp	r3, #2
 8005b52:	d123      	bne.n	8005b9c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8005b54:	69fb      	ldr	r3, [r7, #28]
 8005b56:	08da      	lsrs	r2, r3, #3
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	3208      	adds	r2, #8
 8005b5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005b62:	69fb      	ldr	r3, [r7, #28]
 8005b64:	f003 0307 	and.w	r3, r3, #7
 8005b68:	009b      	lsls	r3, r3, #2
 8005b6a:	220f      	movs	r2, #15
 8005b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8005b70:	43db      	mvns	r3, r3
 8005b72:	69ba      	ldr	r2, [r7, #24]
 8005b74:	4013      	ands	r3, r2
 8005b76:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	691a      	ldr	r2, [r3, #16]
 8005b7c:	69fb      	ldr	r3, [r7, #28]
 8005b7e:	f003 0307 	and.w	r3, r3, #7
 8005b82:	009b      	lsls	r3, r3, #2
 8005b84:	fa02 f303 	lsl.w	r3, r2, r3
 8005b88:	69ba      	ldr	r2, [r7, #24]
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8005b8e:	69fb      	ldr	r3, [r7, #28]
 8005b90:	08da      	lsrs	r2, r3, #3
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	3208      	adds	r2, #8
 8005b96:	69b9      	ldr	r1, [r7, #24]
 8005b98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005ba2:	69fb      	ldr	r3, [r7, #28]
 8005ba4:	005b      	lsls	r3, r3, #1
 8005ba6:	2203      	movs	r2, #3
 8005ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8005bac:	43db      	mvns	r3, r3
 8005bae:	69ba      	ldr	r2, [r7, #24]
 8005bb0:	4013      	ands	r3, r2
 8005bb2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	685b      	ldr	r3, [r3, #4]
 8005bb8:	f003 0203 	and.w	r2, r3, #3
 8005bbc:	69fb      	ldr	r3, [r7, #28]
 8005bbe:	005b      	lsls	r3, r3, #1
 8005bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8005bc4:	69ba      	ldr	r2, [r7, #24]
 8005bc6:	4313      	orrs	r3, r2
 8005bc8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	69ba      	ldr	r2, [r7, #24]
 8005bce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	685b      	ldr	r3, [r3, #4]
 8005bd4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	f000 80be 	beq.w	8005d5a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005bde:	4b66      	ldr	r3, [pc, #408]	; (8005d78 <HAL_GPIO_Init+0x324>)
 8005be0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005be2:	4a65      	ldr	r2, [pc, #404]	; (8005d78 <HAL_GPIO_Init+0x324>)
 8005be4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005be8:	6453      	str	r3, [r2, #68]	; 0x44
 8005bea:	4b63      	ldr	r3, [pc, #396]	; (8005d78 <HAL_GPIO_Init+0x324>)
 8005bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005bf2:	60fb      	str	r3, [r7, #12]
 8005bf4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8005bf6:	4a61      	ldr	r2, [pc, #388]	; (8005d7c <HAL_GPIO_Init+0x328>)
 8005bf8:	69fb      	ldr	r3, [r7, #28]
 8005bfa:	089b      	lsrs	r3, r3, #2
 8005bfc:	3302      	adds	r3, #2
 8005bfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c02:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005c04:	69fb      	ldr	r3, [r7, #28]
 8005c06:	f003 0303 	and.w	r3, r3, #3
 8005c0a:	009b      	lsls	r3, r3, #2
 8005c0c:	220f      	movs	r2, #15
 8005c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8005c12:	43db      	mvns	r3, r3
 8005c14:	69ba      	ldr	r2, [r7, #24]
 8005c16:	4013      	ands	r3, r2
 8005c18:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	4a58      	ldr	r2, [pc, #352]	; (8005d80 <HAL_GPIO_Init+0x32c>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d037      	beq.n	8005c92 <HAL_GPIO_Init+0x23e>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	4a57      	ldr	r2, [pc, #348]	; (8005d84 <HAL_GPIO_Init+0x330>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d031      	beq.n	8005c8e <HAL_GPIO_Init+0x23a>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	4a56      	ldr	r2, [pc, #344]	; (8005d88 <HAL_GPIO_Init+0x334>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d02b      	beq.n	8005c8a <HAL_GPIO_Init+0x236>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	4a55      	ldr	r2, [pc, #340]	; (8005d8c <HAL_GPIO_Init+0x338>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d025      	beq.n	8005c86 <HAL_GPIO_Init+0x232>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	4a54      	ldr	r2, [pc, #336]	; (8005d90 <HAL_GPIO_Init+0x33c>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d01f      	beq.n	8005c82 <HAL_GPIO_Init+0x22e>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	4a53      	ldr	r2, [pc, #332]	; (8005d94 <HAL_GPIO_Init+0x340>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d019      	beq.n	8005c7e <HAL_GPIO_Init+0x22a>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	4a52      	ldr	r2, [pc, #328]	; (8005d98 <HAL_GPIO_Init+0x344>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d013      	beq.n	8005c7a <HAL_GPIO_Init+0x226>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	4a51      	ldr	r2, [pc, #324]	; (8005d9c <HAL_GPIO_Init+0x348>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d00d      	beq.n	8005c76 <HAL_GPIO_Init+0x222>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	4a50      	ldr	r2, [pc, #320]	; (8005da0 <HAL_GPIO_Init+0x34c>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d007      	beq.n	8005c72 <HAL_GPIO_Init+0x21e>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	4a4f      	ldr	r2, [pc, #316]	; (8005da4 <HAL_GPIO_Init+0x350>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d101      	bne.n	8005c6e <HAL_GPIO_Init+0x21a>
 8005c6a:	2309      	movs	r3, #9
 8005c6c:	e012      	b.n	8005c94 <HAL_GPIO_Init+0x240>
 8005c6e:	230a      	movs	r3, #10
 8005c70:	e010      	b.n	8005c94 <HAL_GPIO_Init+0x240>
 8005c72:	2308      	movs	r3, #8
 8005c74:	e00e      	b.n	8005c94 <HAL_GPIO_Init+0x240>
 8005c76:	2307      	movs	r3, #7
 8005c78:	e00c      	b.n	8005c94 <HAL_GPIO_Init+0x240>
 8005c7a:	2306      	movs	r3, #6
 8005c7c:	e00a      	b.n	8005c94 <HAL_GPIO_Init+0x240>
 8005c7e:	2305      	movs	r3, #5
 8005c80:	e008      	b.n	8005c94 <HAL_GPIO_Init+0x240>
 8005c82:	2304      	movs	r3, #4
 8005c84:	e006      	b.n	8005c94 <HAL_GPIO_Init+0x240>
 8005c86:	2303      	movs	r3, #3
 8005c88:	e004      	b.n	8005c94 <HAL_GPIO_Init+0x240>
 8005c8a:	2302      	movs	r3, #2
 8005c8c:	e002      	b.n	8005c94 <HAL_GPIO_Init+0x240>
 8005c8e:	2301      	movs	r3, #1
 8005c90:	e000      	b.n	8005c94 <HAL_GPIO_Init+0x240>
 8005c92:	2300      	movs	r3, #0
 8005c94:	69fa      	ldr	r2, [r7, #28]
 8005c96:	f002 0203 	and.w	r2, r2, #3
 8005c9a:	0092      	lsls	r2, r2, #2
 8005c9c:	4093      	lsls	r3, r2
 8005c9e:	69ba      	ldr	r2, [r7, #24]
 8005ca0:	4313      	orrs	r3, r2
 8005ca2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8005ca4:	4935      	ldr	r1, [pc, #212]	; (8005d7c <HAL_GPIO_Init+0x328>)
 8005ca6:	69fb      	ldr	r3, [r7, #28]
 8005ca8:	089b      	lsrs	r3, r3, #2
 8005caa:	3302      	adds	r3, #2
 8005cac:	69ba      	ldr	r2, [r7, #24]
 8005cae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005cb2:	4b3d      	ldr	r3, [pc, #244]	; (8005da8 <HAL_GPIO_Init+0x354>)
 8005cb4:	689b      	ldr	r3, [r3, #8]
 8005cb6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005cb8:	693b      	ldr	r3, [r7, #16]
 8005cba:	43db      	mvns	r3, r3
 8005cbc:	69ba      	ldr	r2, [r7, #24]
 8005cbe:	4013      	ands	r3, r2
 8005cc0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	685b      	ldr	r3, [r3, #4]
 8005cc6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d003      	beq.n	8005cd6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005cce:	69ba      	ldr	r2, [r7, #24]
 8005cd0:	693b      	ldr	r3, [r7, #16]
 8005cd2:	4313      	orrs	r3, r2
 8005cd4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005cd6:	4a34      	ldr	r2, [pc, #208]	; (8005da8 <HAL_GPIO_Init+0x354>)
 8005cd8:	69bb      	ldr	r3, [r7, #24]
 8005cda:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005cdc:	4b32      	ldr	r3, [pc, #200]	; (8005da8 <HAL_GPIO_Init+0x354>)
 8005cde:	68db      	ldr	r3, [r3, #12]
 8005ce0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005ce2:	693b      	ldr	r3, [r7, #16]
 8005ce4:	43db      	mvns	r3, r3
 8005ce6:	69ba      	ldr	r2, [r7, #24]
 8005ce8:	4013      	ands	r3, r2
 8005cea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	685b      	ldr	r3, [r3, #4]
 8005cf0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d003      	beq.n	8005d00 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005cf8:	69ba      	ldr	r2, [r7, #24]
 8005cfa:	693b      	ldr	r3, [r7, #16]
 8005cfc:	4313      	orrs	r3, r2
 8005cfe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005d00:	4a29      	ldr	r2, [pc, #164]	; (8005da8 <HAL_GPIO_Init+0x354>)
 8005d02:	69bb      	ldr	r3, [r7, #24]
 8005d04:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005d06:	4b28      	ldr	r3, [pc, #160]	; (8005da8 <HAL_GPIO_Init+0x354>)
 8005d08:	685b      	ldr	r3, [r3, #4]
 8005d0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005d0c:	693b      	ldr	r3, [r7, #16]
 8005d0e:	43db      	mvns	r3, r3
 8005d10:	69ba      	ldr	r2, [r7, #24]
 8005d12:	4013      	ands	r3, r2
 8005d14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	685b      	ldr	r3, [r3, #4]
 8005d1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d003      	beq.n	8005d2a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005d22:	69ba      	ldr	r2, [r7, #24]
 8005d24:	693b      	ldr	r3, [r7, #16]
 8005d26:	4313      	orrs	r3, r2
 8005d28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005d2a:	4a1f      	ldr	r2, [pc, #124]	; (8005da8 <HAL_GPIO_Init+0x354>)
 8005d2c:	69bb      	ldr	r3, [r7, #24]
 8005d2e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005d30:	4b1d      	ldr	r3, [pc, #116]	; (8005da8 <HAL_GPIO_Init+0x354>)
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005d36:	693b      	ldr	r3, [r7, #16]
 8005d38:	43db      	mvns	r3, r3
 8005d3a:	69ba      	ldr	r2, [r7, #24]
 8005d3c:	4013      	ands	r3, r2
 8005d3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	685b      	ldr	r3, [r3, #4]
 8005d44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d003      	beq.n	8005d54 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005d4c:	69ba      	ldr	r2, [r7, #24]
 8005d4e:	693b      	ldr	r3, [r7, #16]
 8005d50:	4313      	orrs	r3, r2
 8005d52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005d54:	4a14      	ldr	r2, [pc, #80]	; (8005da8 <HAL_GPIO_Init+0x354>)
 8005d56:	69bb      	ldr	r3, [r7, #24]
 8005d58:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8005d5a:	69fb      	ldr	r3, [r7, #28]
 8005d5c:	3301      	adds	r3, #1
 8005d5e:	61fb      	str	r3, [r7, #28]
 8005d60:	69fb      	ldr	r3, [r7, #28]
 8005d62:	2b0f      	cmp	r3, #15
 8005d64:	f67f ae86 	bls.w	8005a74 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8005d68:	bf00      	nop
 8005d6a:	bf00      	nop
 8005d6c:	3724      	adds	r7, #36	; 0x24
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d74:	4770      	bx	lr
 8005d76:	bf00      	nop
 8005d78:	40023800 	.word	0x40023800
 8005d7c:	40013800 	.word	0x40013800
 8005d80:	40020000 	.word	0x40020000
 8005d84:	40020400 	.word	0x40020400
 8005d88:	40020800 	.word	0x40020800
 8005d8c:	40020c00 	.word	0x40020c00
 8005d90:	40021000 	.word	0x40021000
 8005d94:	40021400 	.word	0x40021400
 8005d98:	40021800 	.word	0x40021800
 8005d9c:	40021c00 	.word	0x40021c00
 8005da0:	40022000 	.word	0x40022000
 8005da4:	40022400 	.word	0x40022400
 8005da8:	40013c00 	.word	0x40013c00

08005dac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005dac:	b480      	push	{r7}
 8005dae:	b083      	sub	sp, #12
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
 8005db4:	460b      	mov	r3, r1
 8005db6:	807b      	strh	r3, [r7, #2]
 8005db8:	4613      	mov	r3, r2
 8005dba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005dbc:	787b      	ldrb	r3, [r7, #1]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d003      	beq.n	8005dca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005dc2:	887a      	ldrh	r2, [r7, #2]
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8005dc8:	e003      	b.n	8005dd2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8005dca:	887b      	ldrh	r3, [r7, #2]
 8005dcc:	041a      	lsls	r2, r3, #16
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	619a      	str	r2, [r3, #24]
}
 8005dd2:	bf00      	nop
 8005dd4:	370c      	adds	r7, #12
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ddc:	4770      	bx	lr
	...

08005de0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b082      	sub	sp, #8
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d101      	bne.n	8005df2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005dee:	2301      	movs	r3, #1
 8005df0:	e07f      	b.n	8005ef2 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005df8:	b2db      	uxtb	r3, r3
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d106      	bne.n	8005e0c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2200      	movs	r2, #0
 8005e02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005e06:	6878      	ldr	r0, [r7, #4]
 8005e08:	f000 f87a 	bl	8005f00 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2224      	movs	r2, #36	; 0x24
 8005e10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	681a      	ldr	r2, [r3, #0]
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f022 0201 	bic.w	r2, r2, #1
 8005e22:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	685a      	ldr	r2, [r3, #4]
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005e30:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	689a      	ldr	r2, [r3, #8]
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005e40:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	68db      	ldr	r3, [r3, #12]
 8005e46:	2b01      	cmp	r3, #1
 8005e48:	d107      	bne.n	8005e5a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	689a      	ldr	r2, [r3, #8]
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005e56:	609a      	str	r2, [r3, #8]
 8005e58:	e006      	b.n	8005e68 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	689a      	ldr	r2, [r3, #8]
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005e66:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	68db      	ldr	r3, [r3, #12]
 8005e6c:	2b02      	cmp	r3, #2
 8005e6e:	d104      	bne.n	8005e7a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005e78:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	6859      	ldr	r1, [r3, #4]
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681a      	ldr	r2, [r3, #0]
 8005e84:	4b1d      	ldr	r3, [pc, #116]	; (8005efc <HAL_I2C_Init+0x11c>)
 8005e86:	430b      	orrs	r3, r1
 8005e88:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	68da      	ldr	r2, [r3, #12]
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005e98:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	691a      	ldr	r2, [r3, #16]
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	695b      	ldr	r3, [r3, #20]
 8005ea2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	699b      	ldr	r3, [r3, #24]
 8005eaa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	430a      	orrs	r2, r1
 8005eb2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	69d9      	ldr	r1, [r3, #28]
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6a1a      	ldr	r2, [r3, #32]
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	430a      	orrs	r2, r1
 8005ec2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	681a      	ldr	r2, [r3, #0]
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f042 0201 	orr.w	r2, r2, #1
 8005ed2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2220      	movs	r2, #32
 8005ede:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2200      	movs	r2, #0
 8005eec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005ef0:	2300      	movs	r3, #0
}
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	3708      	adds	r7, #8
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	bd80      	pop	{r7, pc}
 8005efa:	bf00      	nop
 8005efc:	02008000 	.word	0x02008000

08005f00 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8005f00:	b480      	push	{r7}
 8005f02:	b083      	sub	sp, #12
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8005f08:	bf00      	nop
 8005f0a:	370c      	adds	r7, #12
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f12:	4770      	bx	lr

08005f14 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b088      	sub	sp, #32
 8005f18:	af02      	add	r7, sp, #8
 8005f1a:	60f8      	str	r0, [r7, #12]
 8005f1c:	4608      	mov	r0, r1
 8005f1e:	4611      	mov	r1, r2
 8005f20:	461a      	mov	r2, r3
 8005f22:	4603      	mov	r3, r0
 8005f24:	817b      	strh	r3, [r7, #10]
 8005f26:	460b      	mov	r3, r1
 8005f28:	813b      	strh	r3, [r7, #8]
 8005f2a:	4613      	mov	r3, r2
 8005f2c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f34:	b2db      	uxtb	r3, r3
 8005f36:	2b20      	cmp	r3, #32
 8005f38:	f040 80f9 	bne.w	800612e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f3c:	6a3b      	ldr	r3, [r7, #32]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d002      	beq.n	8005f48 <HAL_I2C_Mem_Write+0x34>
 8005f42:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d105      	bne.n	8005f54 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f4e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005f50:	2301      	movs	r3, #1
 8005f52:	e0ed      	b.n	8006130 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005f5a:	2b01      	cmp	r3, #1
 8005f5c:	d101      	bne.n	8005f62 <HAL_I2C_Mem_Write+0x4e>
 8005f5e:	2302      	movs	r3, #2
 8005f60:	e0e6      	b.n	8006130 <HAL_I2C_Mem_Write+0x21c>
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	2201      	movs	r2, #1
 8005f66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005f6a:	f7fd faf7 	bl	800355c <HAL_GetTick>
 8005f6e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005f70:	697b      	ldr	r3, [r7, #20]
 8005f72:	9300      	str	r3, [sp, #0]
 8005f74:	2319      	movs	r3, #25
 8005f76:	2201      	movs	r2, #1
 8005f78:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005f7c:	68f8      	ldr	r0, [r7, #12]
 8005f7e:	f000 fac3 	bl	8006508 <I2C_WaitOnFlagUntilTimeout>
 8005f82:	4603      	mov	r3, r0
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d001      	beq.n	8005f8c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8005f88:	2301      	movs	r3, #1
 8005f8a:	e0d1      	b.n	8006130 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	2221      	movs	r2, #33	; 0x21
 8005f90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	2240      	movs	r2, #64	; 0x40
 8005f98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	6a3a      	ldr	r2, [r7, #32]
 8005fa6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005fac:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005fb4:	88f8      	ldrh	r0, [r7, #6]
 8005fb6:	893a      	ldrh	r2, [r7, #8]
 8005fb8:	8979      	ldrh	r1, [r7, #10]
 8005fba:	697b      	ldr	r3, [r7, #20]
 8005fbc:	9301      	str	r3, [sp, #4]
 8005fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fc0:	9300      	str	r3, [sp, #0]
 8005fc2:	4603      	mov	r3, r0
 8005fc4:	68f8      	ldr	r0, [r7, #12]
 8005fc6:	f000 f9d3 	bl	8006370 <I2C_RequestMemoryWrite>
 8005fca:	4603      	mov	r3, r0
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d005      	beq.n	8005fdc <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005fd8:	2301      	movs	r3, #1
 8005fda:	e0a9      	b.n	8006130 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fe0:	b29b      	uxth	r3, r3
 8005fe2:	2bff      	cmp	r3, #255	; 0xff
 8005fe4:	d90e      	bls.n	8006004 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	22ff      	movs	r2, #255	; 0xff
 8005fea:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ff0:	b2da      	uxtb	r2, r3
 8005ff2:	8979      	ldrh	r1, [r7, #10]
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	9300      	str	r3, [sp, #0]
 8005ff8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005ffc:	68f8      	ldr	r0, [r7, #12]
 8005ffe:	f000 fc2b 	bl	8006858 <I2C_TransferConfig>
 8006002:	e00f      	b.n	8006024 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006008:	b29a      	uxth	r2, r3
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006012:	b2da      	uxtb	r2, r3
 8006014:	8979      	ldrh	r1, [r7, #10]
 8006016:	2300      	movs	r3, #0
 8006018:	9300      	str	r3, [sp, #0]
 800601a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800601e:	68f8      	ldr	r0, [r7, #12]
 8006020:	f000 fc1a 	bl	8006858 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006024:	697a      	ldr	r2, [r7, #20]
 8006026:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006028:	68f8      	ldr	r0, [r7, #12]
 800602a:	f000 faad 	bl	8006588 <I2C_WaitOnTXISFlagUntilTimeout>
 800602e:	4603      	mov	r3, r0
 8006030:	2b00      	cmp	r3, #0
 8006032:	d001      	beq.n	8006038 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8006034:	2301      	movs	r3, #1
 8006036:	e07b      	b.n	8006130 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800603c:	781a      	ldrb	r2, [r3, #0]
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006048:	1c5a      	adds	r2, r3, #1
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006052:	b29b      	uxth	r3, r3
 8006054:	3b01      	subs	r3, #1
 8006056:	b29a      	uxth	r2, r3
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006060:	3b01      	subs	r3, #1
 8006062:	b29a      	uxth	r2, r3
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800606c:	b29b      	uxth	r3, r3
 800606e:	2b00      	cmp	r3, #0
 8006070:	d034      	beq.n	80060dc <HAL_I2C_Mem_Write+0x1c8>
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006076:	2b00      	cmp	r3, #0
 8006078:	d130      	bne.n	80060dc <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800607a:	697b      	ldr	r3, [r7, #20]
 800607c:	9300      	str	r3, [sp, #0]
 800607e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006080:	2200      	movs	r2, #0
 8006082:	2180      	movs	r1, #128	; 0x80
 8006084:	68f8      	ldr	r0, [r7, #12]
 8006086:	f000 fa3f 	bl	8006508 <I2C_WaitOnFlagUntilTimeout>
 800608a:	4603      	mov	r3, r0
 800608c:	2b00      	cmp	r3, #0
 800608e:	d001      	beq.n	8006094 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8006090:	2301      	movs	r3, #1
 8006092:	e04d      	b.n	8006130 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006098:	b29b      	uxth	r3, r3
 800609a:	2bff      	cmp	r3, #255	; 0xff
 800609c:	d90e      	bls.n	80060bc <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	22ff      	movs	r2, #255	; 0xff
 80060a2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060a8:	b2da      	uxtb	r2, r3
 80060aa:	8979      	ldrh	r1, [r7, #10]
 80060ac:	2300      	movs	r3, #0
 80060ae:	9300      	str	r3, [sp, #0]
 80060b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80060b4:	68f8      	ldr	r0, [r7, #12]
 80060b6:	f000 fbcf 	bl	8006858 <I2C_TransferConfig>
 80060ba:	e00f      	b.n	80060dc <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060c0:	b29a      	uxth	r2, r3
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060ca:	b2da      	uxtb	r2, r3
 80060cc:	8979      	ldrh	r1, [r7, #10]
 80060ce:	2300      	movs	r3, #0
 80060d0:	9300      	str	r3, [sp, #0]
 80060d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80060d6:	68f8      	ldr	r0, [r7, #12]
 80060d8:	f000 fbbe 	bl	8006858 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060e0:	b29b      	uxth	r3, r3
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d19e      	bne.n	8006024 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80060e6:	697a      	ldr	r2, [r7, #20]
 80060e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80060ea:	68f8      	ldr	r0, [r7, #12]
 80060ec:	f000 fa8c 	bl	8006608 <I2C_WaitOnSTOPFlagUntilTimeout>
 80060f0:	4603      	mov	r3, r0
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d001      	beq.n	80060fa <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80060f6:	2301      	movs	r3, #1
 80060f8:	e01a      	b.n	8006130 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	2220      	movs	r2, #32
 8006100:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	6859      	ldr	r1, [r3, #4]
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681a      	ldr	r2, [r3, #0]
 800610c:	4b0a      	ldr	r3, [pc, #40]	; (8006138 <HAL_I2C_Mem_Write+0x224>)
 800610e:	400b      	ands	r3, r1
 8006110:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	2220      	movs	r2, #32
 8006116:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	2200      	movs	r2, #0
 800611e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	2200      	movs	r2, #0
 8006126:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800612a:	2300      	movs	r3, #0
 800612c:	e000      	b.n	8006130 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800612e:	2302      	movs	r3, #2
  }
}
 8006130:	4618      	mov	r0, r3
 8006132:	3718      	adds	r7, #24
 8006134:	46bd      	mov	sp, r7
 8006136:	bd80      	pop	{r7, pc}
 8006138:	fe00e800 	.word	0xfe00e800

0800613c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b088      	sub	sp, #32
 8006140:	af02      	add	r7, sp, #8
 8006142:	60f8      	str	r0, [r7, #12]
 8006144:	4608      	mov	r0, r1
 8006146:	4611      	mov	r1, r2
 8006148:	461a      	mov	r2, r3
 800614a:	4603      	mov	r3, r0
 800614c:	817b      	strh	r3, [r7, #10]
 800614e:	460b      	mov	r3, r1
 8006150:	813b      	strh	r3, [r7, #8]
 8006152:	4613      	mov	r3, r2
 8006154:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800615c:	b2db      	uxtb	r3, r3
 800615e:	2b20      	cmp	r3, #32
 8006160:	f040 80fd 	bne.w	800635e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8006164:	6a3b      	ldr	r3, [r7, #32]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d002      	beq.n	8006170 <HAL_I2C_Mem_Read+0x34>
 800616a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800616c:	2b00      	cmp	r3, #0
 800616e:	d105      	bne.n	800617c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006176:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006178:	2301      	movs	r3, #1
 800617a:	e0f1      	b.n	8006360 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006182:	2b01      	cmp	r3, #1
 8006184:	d101      	bne.n	800618a <HAL_I2C_Mem_Read+0x4e>
 8006186:	2302      	movs	r3, #2
 8006188:	e0ea      	b.n	8006360 <HAL_I2C_Mem_Read+0x224>
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	2201      	movs	r2, #1
 800618e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006192:	f7fd f9e3 	bl	800355c <HAL_GetTick>
 8006196:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006198:	697b      	ldr	r3, [r7, #20]
 800619a:	9300      	str	r3, [sp, #0]
 800619c:	2319      	movs	r3, #25
 800619e:	2201      	movs	r2, #1
 80061a0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80061a4:	68f8      	ldr	r0, [r7, #12]
 80061a6:	f000 f9af 	bl	8006508 <I2C_WaitOnFlagUntilTimeout>
 80061aa:	4603      	mov	r3, r0
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d001      	beq.n	80061b4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80061b0:	2301      	movs	r3, #1
 80061b2:	e0d5      	b.n	8006360 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	2222      	movs	r2, #34	; 0x22
 80061b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	2240      	movs	r2, #64	; 0x40
 80061c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	2200      	movs	r2, #0
 80061c8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	6a3a      	ldr	r2, [r7, #32]
 80061ce:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80061d4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	2200      	movs	r2, #0
 80061da:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80061dc:	88f8      	ldrh	r0, [r7, #6]
 80061de:	893a      	ldrh	r2, [r7, #8]
 80061e0:	8979      	ldrh	r1, [r7, #10]
 80061e2:	697b      	ldr	r3, [r7, #20]
 80061e4:	9301      	str	r3, [sp, #4]
 80061e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061e8:	9300      	str	r3, [sp, #0]
 80061ea:	4603      	mov	r3, r0
 80061ec:	68f8      	ldr	r0, [r7, #12]
 80061ee:	f000 f913 	bl	8006418 <I2C_RequestMemoryRead>
 80061f2:	4603      	mov	r3, r0
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d005      	beq.n	8006204 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	2200      	movs	r2, #0
 80061fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006200:	2301      	movs	r3, #1
 8006202:	e0ad      	b.n	8006360 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006208:	b29b      	uxth	r3, r3
 800620a:	2bff      	cmp	r3, #255	; 0xff
 800620c:	d90e      	bls.n	800622c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	22ff      	movs	r2, #255	; 0xff
 8006212:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006218:	b2da      	uxtb	r2, r3
 800621a:	8979      	ldrh	r1, [r7, #10]
 800621c:	4b52      	ldr	r3, [pc, #328]	; (8006368 <HAL_I2C_Mem_Read+0x22c>)
 800621e:	9300      	str	r3, [sp, #0]
 8006220:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006224:	68f8      	ldr	r0, [r7, #12]
 8006226:	f000 fb17 	bl	8006858 <I2C_TransferConfig>
 800622a:	e00f      	b.n	800624c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006230:	b29a      	uxth	r2, r3
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800623a:	b2da      	uxtb	r2, r3
 800623c:	8979      	ldrh	r1, [r7, #10]
 800623e:	4b4a      	ldr	r3, [pc, #296]	; (8006368 <HAL_I2C_Mem_Read+0x22c>)
 8006240:	9300      	str	r3, [sp, #0]
 8006242:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006246:	68f8      	ldr	r0, [r7, #12]
 8006248:	f000 fb06 	bl	8006858 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800624c:	697b      	ldr	r3, [r7, #20]
 800624e:	9300      	str	r3, [sp, #0]
 8006250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006252:	2200      	movs	r2, #0
 8006254:	2104      	movs	r1, #4
 8006256:	68f8      	ldr	r0, [r7, #12]
 8006258:	f000 f956 	bl	8006508 <I2C_WaitOnFlagUntilTimeout>
 800625c:	4603      	mov	r3, r0
 800625e:	2b00      	cmp	r3, #0
 8006260:	d001      	beq.n	8006266 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8006262:	2301      	movs	r3, #1
 8006264:	e07c      	b.n	8006360 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006270:	b2d2      	uxtb	r2, r2
 8006272:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006278:	1c5a      	adds	r2, r3, #1
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006282:	3b01      	subs	r3, #1
 8006284:	b29a      	uxth	r2, r3
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800628e:	b29b      	uxth	r3, r3
 8006290:	3b01      	subs	r3, #1
 8006292:	b29a      	uxth	r2, r3
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800629c:	b29b      	uxth	r3, r3
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d034      	beq.n	800630c <HAL_I2C_Mem_Read+0x1d0>
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d130      	bne.n	800630c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80062aa:	697b      	ldr	r3, [r7, #20]
 80062ac:	9300      	str	r3, [sp, #0]
 80062ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062b0:	2200      	movs	r2, #0
 80062b2:	2180      	movs	r1, #128	; 0x80
 80062b4:	68f8      	ldr	r0, [r7, #12]
 80062b6:	f000 f927 	bl	8006508 <I2C_WaitOnFlagUntilTimeout>
 80062ba:	4603      	mov	r3, r0
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d001      	beq.n	80062c4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80062c0:	2301      	movs	r3, #1
 80062c2:	e04d      	b.n	8006360 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062c8:	b29b      	uxth	r3, r3
 80062ca:	2bff      	cmp	r3, #255	; 0xff
 80062cc:	d90e      	bls.n	80062ec <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	22ff      	movs	r2, #255	; 0xff
 80062d2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062d8:	b2da      	uxtb	r2, r3
 80062da:	8979      	ldrh	r1, [r7, #10]
 80062dc:	2300      	movs	r3, #0
 80062de:	9300      	str	r3, [sp, #0]
 80062e0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80062e4:	68f8      	ldr	r0, [r7, #12]
 80062e6:	f000 fab7 	bl	8006858 <I2C_TransferConfig>
 80062ea:	e00f      	b.n	800630c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062f0:	b29a      	uxth	r2, r3
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062fa:	b2da      	uxtb	r2, r3
 80062fc:	8979      	ldrh	r1, [r7, #10]
 80062fe:	2300      	movs	r3, #0
 8006300:	9300      	str	r3, [sp, #0]
 8006302:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006306:	68f8      	ldr	r0, [r7, #12]
 8006308:	f000 faa6 	bl	8006858 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006310:	b29b      	uxth	r3, r3
 8006312:	2b00      	cmp	r3, #0
 8006314:	d19a      	bne.n	800624c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006316:	697a      	ldr	r2, [r7, #20]
 8006318:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800631a:	68f8      	ldr	r0, [r7, #12]
 800631c:	f000 f974 	bl	8006608 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006320:	4603      	mov	r3, r0
 8006322:	2b00      	cmp	r3, #0
 8006324:	d001      	beq.n	800632a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8006326:	2301      	movs	r3, #1
 8006328:	e01a      	b.n	8006360 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	2220      	movs	r2, #32
 8006330:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	6859      	ldr	r1, [r3, #4]
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681a      	ldr	r2, [r3, #0]
 800633c:	4b0b      	ldr	r3, [pc, #44]	; (800636c <HAL_I2C_Mem_Read+0x230>)
 800633e:	400b      	ands	r3, r1
 8006340:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	2220      	movs	r2, #32
 8006346:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	2200      	movs	r2, #0
 800634e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	2200      	movs	r2, #0
 8006356:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800635a:	2300      	movs	r3, #0
 800635c:	e000      	b.n	8006360 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800635e:	2302      	movs	r3, #2
  }
}
 8006360:	4618      	mov	r0, r3
 8006362:	3718      	adds	r7, #24
 8006364:	46bd      	mov	sp, r7
 8006366:	bd80      	pop	{r7, pc}
 8006368:	80002400 	.word	0x80002400
 800636c:	fe00e800 	.word	0xfe00e800

08006370 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8006370:	b580      	push	{r7, lr}
 8006372:	b086      	sub	sp, #24
 8006374:	af02      	add	r7, sp, #8
 8006376:	60f8      	str	r0, [r7, #12]
 8006378:	4608      	mov	r0, r1
 800637a:	4611      	mov	r1, r2
 800637c:	461a      	mov	r2, r3
 800637e:	4603      	mov	r3, r0
 8006380:	817b      	strh	r3, [r7, #10]
 8006382:	460b      	mov	r3, r1
 8006384:	813b      	strh	r3, [r7, #8]
 8006386:	4613      	mov	r3, r2
 8006388:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800638a:	88fb      	ldrh	r3, [r7, #6]
 800638c:	b2da      	uxtb	r2, r3
 800638e:	8979      	ldrh	r1, [r7, #10]
 8006390:	4b20      	ldr	r3, [pc, #128]	; (8006414 <I2C_RequestMemoryWrite+0xa4>)
 8006392:	9300      	str	r3, [sp, #0]
 8006394:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006398:	68f8      	ldr	r0, [r7, #12]
 800639a:	f000 fa5d 	bl	8006858 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800639e:	69fa      	ldr	r2, [r7, #28]
 80063a0:	69b9      	ldr	r1, [r7, #24]
 80063a2:	68f8      	ldr	r0, [r7, #12]
 80063a4:	f000 f8f0 	bl	8006588 <I2C_WaitOnTXISFlagUntilTimeout>
 80063a8:	4603      	mov	r3, r0
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d001      	beq.n	80063b2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80063ae:	2301      	movs	r3, #1
 80063b0:	e02c      	b.n	800640c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80063b2:	88fb      	ldrh	r3, [r7, #6]
 80063b4:	2b01      	cmp	r3, #1
 80063b6:	d105      	bne.n	80063c4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80063b8:	893b      	ldrh	r3, [r7, #8]
 80063ba:	b2da      	uxtb	r2, r3
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	629a      	str	r2, [r3, #40]	; 0x28
 80063c2:	e015      	b.n	80063f0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80063c4:	893b      	ldrh	r3, [r7, #8]
 80063c6:	0a1b      	lsrs	r3, r3, #8
 80063c8:	b29b      	uxth	r3, r3
 80063ca:	b2da      	uxtb	r2, r3
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80063d2:	69fa      	ldr	r2, [r7, #28]
 80063d4:	69b9      	ldr	r1, [r7, #24]
 80063d6:	68f8      	ldr	r0, [r7, #12]
 80063d8:	f000 f8d6 	bl	8006588 <I2C_WaitOnTXISFlagUntilTimeout>
 80063dc:	4603      	mov	r3, r0
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d001      	beq.n	80063e6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80063e2:	2301      	movs	r3, #1
 80063e4:	e012      	b.n	800640c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80063e6:	893b      	ldrh	r3, [r7, #8]
 80063e8:	b2da      	uxtb	r2, r3
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80063f0:	69fb      	ldr	r3, [r7, #28]
 80063f2:	9300      	str	r3, [sp, #0]
 80063f4:	69bb      	ldr	r3, [r7, #24]
 80063f6:	2200      	movs	r2, #0
 80063f8:	2180      	movs	r1, #128	; 0x80
 80063fa:	68f8      	ldr	r0, [r7, #12]
 80063fc:	f000 f884 	bl	8006508 <I2C_WaitOnFlagUntilTimeout>
 8006400:	4603      	mov	r3, r0
 8006402:	2b00      	cmp	r3, #0
 8006404:	d001      	beq.n	800640a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8006406:	2301      	movs	r3, #1
 8006408:	e000      	b.n	800640c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800640a:	2300      	movs	r3, #0
}
 800640c:	4618      	mov	r0, r3
 800640e:	3710      	adds	r7, #16
 8006410:	46bd      	mov	sp, r7
 8006412:	bd80      	pop	{r7, pc}
 8006414:	80002000 	.word	0x80002000

08006418 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8006418:	b580      	push	{r7, lr}
 800641a:	b086      	sub	sp, #24
 800641c:	af02      	add	r7, sp, #8
 800641e:	60f8      	str	r0, [r7, #12]
 8006420:	4608      	mov	r0, r1
 8006422:	4611      	mov	r1, r2
 8006424:	461a      	mov	r2, r3
 8006426:	4603      	mov	r3, r0
 8006428:	817b      	strh	r3, [r7, #10]
 800642a:	460b      	mov	r3, r1
 800642c:	813b      	strh	r3, [r7, #8]
 800642e:	4613      	mov	r3, r2
 8006430:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8006432:	88fb      	ldrh	r3, [r7, #6]
 8006434:	b2da      	uxtb	r2, r3
 8006436:	8979      	ldrh	r1, [r7, #10]
 8006438:	4b20      	ldr	r3, [pc, #128]	; (80064bc <I2C_RequestMemoryRead+0xa4>)
 800643a:	9300      	str	r3, [sp, #0]
 800643c:	2300      	movs	r3, #0
 800643e:	68f8      	ldr	r0, [r7, #12]
 8006440:	f000 fa0a 	bl	8006858 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006444:	69fa      	ldr	r2, [r7, #28]
 8006446:	69b9      	ldr	r1, [r7, #24]
 8006448:	68f8      	ldr	r0, [r7, #12]
 800644a:	f000 f89d 	bl	8006588 <I2C_WaitOnTXISFlagUntilTimeout>
 800644e:	4603      	mov	r3, r0
 8006450:	2b00      	cmp	r3, #0
 8006452:	d001      	beq.n	8006458 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8006454:	2301      	movs	r3, #1
 8006456:	e02c      	b.n	80064b2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006458:	88fb      	ldrh	r3, [r7, #6]
 800645a:	2b01      	cmp	r3, #1
 800645c:	d105      	bne.n	800646a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800645e:	893b      	ldrh	r3, [r7, #8]
 8006460:	b2da      	uxtb	r2, r3
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	629a      	str	r2, [r3, #40]	; 0x28
 8006468:	e015      	b.n	8006496 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800646a:	893b      	ldrh	r3, [r7, #8]
 800646c:	0a1b      	lsrs	r3, r3, #8
 800646e:	b29b      	uxth	r3, r3
 8006470:	b2da      	uxtb	r2, r3
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006478:	69fa      	ldr	r2, [r7, #28]
 800647a:	69b9      	ldr	r1, [r7, #24]
 800647c:	68f8      	ldr	r0, [r7, #12]
 800647e:	f000 f883 	bl	8006588 <I2C_WaitOnTXISFlagUntilTimeout>
 8006482:	4603      	mov	r3, r0
 8006484:	2b00      	cmp	r3, #0
 8006486:	d001      	beq.n	800648c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8006488:	2301      	movs	r3, #1
 800648a:	e012      	b.n	80064b2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800648c:	893b      	ldrh	r3, [r7, #8]
 800648e:	b2da      	uxtb	r2, r3
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8006496:	69fb      	ldr	r3, [r7, #28]
 8006498:	9300      	str	r3, [sp, #0]
 800649a:	69bb      	ldr	r3, [r7, #24]
 800649c:	2200      	movs	r2, #0
 800649e:	2140      	movs	r1, #64	; 0x40
 80064a0:	68f8      	ldr	r0, [r7, #12]
 80064a2:	f000 f831 	bl	8006508 <I2C_WaitOnFlagUntilTimeout>
 80064a6:	4603      	mov	r3, r0
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d001      	beq.n	80064b0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80064ac:	2301      	movs	r3, #1
 80064ae:	e000      	b.n	80064b2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80064b0:	2300      	movs	r3, #0
}
 80064b2:	4618      	mov	r0, r3
 80064b4:	3710      	adds	r7, #16
 80064b6:	46bd      	mov	sp, r7
 80064b8:	bd80      	pop	{r7, pc}
 80064ba:	bf00      	nop
 80064bc:	80002000 	.word	0x80002000

080064c0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80064c0:	b480      	push	{r7}
 80064c2:	b083      	sub	sp, #12
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	699b      	ldr	r3, [r3, #24]
 80064ce:	f003 0302 	and.w	r3, r3, #2
 80064d2:	2b02      	cmp	r3, #2
 80064d4:	d103      	bne.n	80064de <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	2200      	movs	r2, #0
 80064dc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	699b      	ldr	r3, [r3, #24]
 80064e4:	f003 0301 	and.w	r3, r3, #1
 80064e8:	2b01      	cmp	r3, #1
 80064ea:	d007      	beq.n	80064fc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	699a      	ldr	r2, [r3, #24]
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f042 0201 	orr.w	r2, r2, #1
 80064fa:	619a      	str	r2, [r3, #24]
  }
}
 80064fc:	bf00      	nop
 80064fe:	370c      	adds	r7, #12
 8006500:	46bd      	mov	sp, r7
 8006502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006506:	4770      	bx	lr

08006508 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006508:	b580      	push	{r7, lr}
 800650a:	b084      	sub	sp, #16
 800650c:	af00      	add	r7, sp, #0
 800650e:	60f8      	str	r0, [r7, #12]
 8006510:	60b9      	str	r1, [r7, #8]
 8006512:	603b      	str	r3, [r7, #0]
 8006514:	4613      	mov	r3, r2
 8006516:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006518:	e022      	b.n	8006560 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006520:	d01e      	beq.n	8006560 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006522:	f7fd f81b 	bl	800355c <HAL_GetTick>
 8006526:	4602      	mov	r2, r0
 8006528:	69bb      	ldr	r3, [r7, #24]
 800652a:	1ad3      	subs	r3, r2, r3
 800652c:	683a      	ldr	r2, [r7, #0]
 800652e:	429a      	cmp	r2, r3
 8006530:	d302      	bcc.n	8006538 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d113      	bne.n	8006560 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800653c:	f043 0220 	orr.w	r2, r3, #32
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	2220      	movs	r2, #32
 8006548:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	2200      	movs	r2, #0
 8006550:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	2200      	movs	r2, #0
 8006558:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800655c:	2301      	movs	r3, #1
 800655e:	e00f      	b.n	8006580 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	699a      	ldr	r2, [r3, #24]
 8006566:	68bb      	ldr	r3, [r7, #8]
 8006568:	4013      	ands	r3, r2
 800656a:	68ba      	ldr	r2, [r7, #8]
 800656c:	429a      	cmp	r2, r3
 800656e:	bf0c      	ite	eq
 8006570:	2301      	moveq	r3, #1
 8006572:	2300      	movne	r3, #0
 8006574:	b2db      	uxtb	r3, r3
 8006576:	461a      	mov	r2, r3
 8006578:	79fb      	ldrb	r3, [r7, #7]
 800657a:	429a      	cmp	r2, r3
 800657c:	d0cd      	beq.n	800651a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800657e:	2300      	movs	r3, #0
}
 8006580:	4618      	mov	r0, r3
 8006582:	3710      	adds	r7, #16
 8006584:	46bd      	mov	sp, r7
 8006586:	bd80      	pop	{r7, pc}

08006588 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006588:	b580      	push	{r7, lr}
 800658a:	b084      	sub	sp, #16
 800658c:	af00      	add	r7, sp, #0
 800658e:	60f8      	str	r0, [r7, #12]
 8006590:	60b9      	str	r1, [r7, #8]
 8006592:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006594:	e02c      	b.n	80065f0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006596:	687a      	ldr	r2, [r7, #4]
 8006598:	68b9      	ldr	r1, [r7, #8]
 800659a:	68f8      	ldr	r0, [r7, #12]
 800659c:	f000 f870 	bl	8006680 <I2C_IsErrorOccurred>
 80065a0:	4603      	mov	r3, r0
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d001      	beq.n	80065aa <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80065a6:	2301      	movs	r3, #1
 80065a8:	e02a      	b.n	8006600 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80065aa:	68bb      	ldr	r3, [r7, #8]
 80065ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065b0:	d01e      	beq.n	80065f0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065b2:	f7fc ffd3 	bl	800355c <HAL_GetTick>
 80065b6:	4602      	mov	r2, r0
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	1ad3      	subs	r3, r2, r3
 80065bc:	68ba      	ldr	r2, [r7, #8]
 80065be:	429a      	cmp	r2, r3
 80065c0:	d302      	bcc.n	80065c8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80065c2:	68bb      	ldr	r3, [r7, #8]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d113      	bne.n	80065f0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065cc:	f043 0220 	orr.w	r2, r3, #32
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	2220      	movs	r2, #32
 80065d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	2200      	movs	r2, #0
 80065e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	2200      	movs	r2, #0
 80065e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80065ec:	2301      	movs	r3, #1
 80065ee:	e007      	b.n	8006600 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	699b      	ldr	r3, [r3, #24]
 80065f6:	f003 0302 	and.w	r3, r3, #2
 80065fa:	2b02      	cmp	r3, #2
 80065fc:	d1cb      	bne.n	8006596 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80065fe:	2300      	movs	r3, #0
}
 8006600:	4618      	mov	r0, r3
 8006602:	3710      	adds	r7, #16
 8006604:	46bd      	mov	sp, r7
 8006606:	bd80      	pop	{r7, pc}

08006608 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b084      	sub	sp, #16
 800660c:	af00      	add	r7, sp, #0
 800660e:	60f8      	str	r0, [r7, #12]
 8006610:	60b9      	str	r1, [r7, #8]
 8006612:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006614:	e028      	b.n	8006668 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006616:	687a      	ldr	r2, [r7, #4]
 8006618:	68b9      	ldr	r1, [r7, #8]
 800661a:	68f8      	ldr	r0, [r7, #12]
 800661c:	f000 f830 	bl	8006680 <I2C_IsErrorOccurred>
 8006620:	4603      	mov	r3, r0
 8006622:	2b00      	cmp	r3, #0
 8006624:	d001      	beq.n	800662a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006626:	2301      	movs	r3, #1
 8006628:	e026      	b.n	8006678 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800662a:	f7fc ff97 	bl	800355c <HAL_GetTick>
 800662e:	4602      	mov	r2, r0
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	1ad3      	subs	r3, r2, r3
 8006634:	68ba      	ldr	r2, [r7, #8]
 8006636:	429a      	cmp	r2, r3
 8006638:	d302      	bcc.n	8006640 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800663a:	68bb      	ldr	r3, [r7, #8]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d113      	bne.n	8006668 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006644:	f043 0220 	orr.w	r2, r3, #32
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	2220      	movs	r2, #32
 8006650:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	2200      	movs	r2, #0
 8006658:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	2200      	movs	r2, #0
 8006660:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006664:	2301      	movs	r3, #1
 8006666:	e007      	b.n	8006678 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	699b      	ldr	r3, [r3, #24]
 800666e:	f003 0320 	and.w	r3, r3, #32
 8006672:	2b20      	cmp	r3, #32
 8006674:	d1cf      	bne.n	8006616 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006676:	2300      	movs	r3, #0
}
 8006678:	4618      	mov	r0, r3
 800667a:	3710      	adds	r7, #16
 800667c:	46bd      	mov	sp, r7
 800667e:	bd80      	pop	{r7, pc}

08006680 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006680:	b580      	push	{r7, lr}
 8006682:	b08a      	sub	sp, #40	; 0x28
 8006684:	af00      	add	r7, sp, #0
 8006686:	60f8      	str	r0, [r7, #12]
 8006688:	60b9      	str	r1, [r7, #8]
 800668a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800668c:	2300      	movs	r3, #0
 800668e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	699b      	ldr	r3, [r3, #24]
 8006698:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800669a:	2300      	movs	r3, #0
 800669c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80066a2:	69bb      	ldr	r3, [r7, #24]
 80066a4:	f003 0310 	and.w	r3, r3, #16
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d075      	beq.n	8006798 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	2210      	movs	r2, #16
 80066b2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80066b4:	e056      	b.n	8006764 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80066b6:	68bb      	ldr	r3, [r7, #8]
 80066b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066bc:	d052      	beq.n	8006764 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80066be:	f7fc ff4d 	bl	800355c <HAL_GetTick>
 80066c2:	4602      	mov	r2, r0
 80066c4:	69fb      	ldr	r3, [r7, #28]
 80066c6:	1ad3      	subs	r3, r2, r3
 80066c8:	68ba      	ldr	r2, [r7, #8]
 80066ca:	429a      	cmp	r2, r3
 80066cc:	d302      	bcc.n	80066d4 <I2C_IsErrorOccurred+0x54>
 80066ce:	68bb      	ldr	r3, [r7, #8]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d147      	bne.n	8006764 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	685b      	ldr	r3, [r3, #4]
 80066da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80066de:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80066e6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	699b      	ldr	r3, [r3, #24]
 80066ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80066f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80066f6:	d12e      	bne.n	8006756 <I2C_IsErrorOccurred+0xd6>
 80066f8:	697b      	ldr	r3, [r7, #20]
 80066fa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80066fe:	d02a      	beq.n	8006756 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8006700:	7cfb      	ldrb	r3, [r7, #19]
 8006702:	2b20      	cmp	r3, #32
 8006704:	d027      	beq.n	8006756 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	685a      	ldr	r2, [r3, #4]
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006714:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006716:	f7fc ff21 	bl	800355c <HAL_GetTick>
 800671a:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800671c:	e01b      	b.n	8006756 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800671e:	f7fc ff1d 	bl	800355c <HAL_GetTick>
 8006722:	4602      	mov	r2, r0
 8006724:	69fb      	ldr	r3, [r7, #28]
 8006726:	1ad3      	subs	r3, r2, r3
 8006728:	2b19      	cmp	r3, #25
 800672a:	d914      	bls.n	8006756 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006730:	f043 0220 	orr.w	r2, r3, #32
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	2220      	movs	r2, #32
 800673c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	2200      	movs	r2, #0
 8006744:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	2200      	movs	r2, #0
 800674c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8006750:	2301      	movs	r3, #1
 8006752:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	699b      	ldr	r3, [r3, #24]
 800675c:	f003 0320 	and.w	r3, r3, #32
 8006760:	2b20      	cmp	r3, #32
 8006762:	d1dc      	bne.n	800671e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	699b      	ldr	r3, [r3, #24]
 800676a:	f003 0320 	and.w	r3, r3, #32
 800676e:	2b20      	cmp	r3, #32
 8006770:	d003      	beq.n	800677a <I2C_IsErrorOccurred+0xfa>
 8006772:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006776:	2b00      	cmp	r3, #0
 8006778:	d09d      	beq.n	80066b6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800677a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800677e:	2b00      	cmp	r3, #0
 8006780:	d103      	bne.n	800678a <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	2220      	movs	r2, #32
 8006788:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800678a:	6a3b      	ldr	r3, [r7, #32]
 800678c:	f043 0304 	orr.w	r3, r3, #4
 8006790:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006792:	2301      	movs	r3, #1
 8006794:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	699b      	ldr	r3, [r3, #24]
 800679e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80067a0:	69bb      	ldr	r3, [r7, #24]
 80067a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d00b      	beq.n	80067c2 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80067aa:	6a3b      	ldr	r3, [r7, #32]
 80067ac:	f043 0301 	orr.w	r3, r3, #1
 80067b0:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80067ba:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80067bc:	2301      	movs	r3, #1
 80067be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80067c2:	69bb      	ldr	r3, [r7, #24]
 80067c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d00b      	beq.n	80067e4 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80067cc:	6a3b      	ldr	r3, [r7, #32]
 80067ce:	f043 0308 	orr.w	r3, r3, #8
 80067d2:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80067dc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80067de:	2301      	movs	r3, #1
 80067e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80067e4:	69bb      	ldr	r3, [r7, #24]
 80067e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d00b      	beq.n	8006806 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80067ee:	6a3b      	ldr	r3, [r7, #32]
 80067f0:	f043 0302 	orr.w	r3, r3, #2
 80067f4:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80067fe:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006800:	2301      	movs	r3, #1
 8006802:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8006806:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800680a:	2b00      	cmp	r3, #0
 800680c:	d01c      	beq.n	8006848 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800680e:	68f8      	ldr	r0, [r7, #12]
 8006810:	f7ff fe56 	bl	80064c0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	6859      	ldr	r1, [r3, #4]
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681a      	ldr	r2, [r3, #0]
 800681e:	4b0d      	ldr	r3, [pc, #52]	; (8006854 <I2C_IsErrorOccurred+0x1d4>)
 8006820:	400b      	ands	r3, r1
 8006822:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006828:	6a3b      	ldr	r3, [r7, #32]
 800682a:	431a      	orrs	r2, r3
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	2220      	movs	r2, #32
 8006834:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	2200      	movs	r2, #0
 800683c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	2200      	movs	r2, #0
 8006844:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8006848:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800684c:	4618      	mov	r0, r3
 800684e:	3728      	adds	r7, #40	; 0x28
 8006850:	46bd      	mov	sp, r7
 8006852:	bd80      	pop	{r7, pc}
 8006854:	fe00e800 	.word	0xfe00e800

08006858 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006858:	b480      	push	{r7}
 800685a:	b087      	sub	sp, #28
 800685c:	af00      	add	r7, sp, #0
 800685e:	60f8      	str	r0, [r7, #12]
 8006860:	607b      	str	r3, [r7, #4]
 8006862:	460b      	mov	r3, r1
 8006864:	817b      	strh	r3, [r7, #10]
 8006866:	4613      	mov	r3, r2
 8006868:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800686a:	897b      	ldrh	r3, [r7, #10]
 800686c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006870:	7a7b      	ldrb	r3, [r7, #9]
 8006872:	041b      	lsls	r3, r3, #16
 8006874:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006878:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800687e:	6a3b      	ldr	r3, [r7, #32]
 8006880:	4313      	orrs	r3, r2
 8006882:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006886:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	685a      	ldr	r2, [r3, #4]
 800688e:	6a3b      	ldr	r3, [r7, #32]
 8006890:	0d5b      	lsrs	r3, r3, #21
 8006892:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8006896:	4b08      	ldr	r3, [pc, #32]	; (80068b8 <I2C_TransferConfig+0x60>)
 8006898:	430b      	orrs	r3, r1
 800689a:	43db      	mvns	r3, r3
 800689c:	ea02 0103 	and.w	r1, r2, r3
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	697a      	ldr	r2, [r7, #20]
 80068a6:	430a      	orrs	r2, r1
 80068a8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80068aa:	bf00      	nop
 80068ac:	371c      	adds	r7, #28
 80068ae:	46bd      	mov	sp, r7
 80068b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b4:	4770      	bx	lr
 80068b6:	bf00      	nop
 80068b8:	03ff63ff 	.word	0x03ff63ff

080068bc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	b086      	sub	sp, #24
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80068c4:	2300      	movs	r3, #0
 80068c6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d101      	bne.n	80068d2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80068ce:	2301      	movs	r3, #1
 80068d0:	e291      	b.n	8006df6 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f003 0301 	and.w	r3, r3, #1
 80068da:	2b00      	cmp	r3, #0
 80068dc:	f000 8087 	beq.w	80069ee <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80068e0:	4b96      	ldr	r3, [pc, #600]	; (8006b3c <HAL_RCC_OscConfig+0x280>)
 80068e2:	689b      	ldr	r3, [r3, #8]
 80068e4:	f003 030c 	and.w	r3, r3, #12
 80068e8:	2b04      	cmp	r3, #4
 80068ea:	d00c      	beq.n	8006906 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80068ec:	4b93      	ldr	r3, [pc, #588]	; (8006b3c <HAL_RCC_OscConfig+0x280>)
 80068ee:	689b      	ldr	r3, [r3, #8]
 80068f0:	f003 030c 	and.w	r3, r3, #12
 80068f4:	2b08      	cmp	r3, #8
 80068f6:	d112      	bne.n	800691e <HAL_RCC_OscConfig+0x62>
 80068f8:	4b90      	ldr	r3, [pc, #576]	; (8006b3c <HAL_RCC_OscConfig+0x280>)
 80068fa:	685b      	ldr	r3, [r3, #4]
 80068fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006900:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006904:	d10b      	bne.n	800691e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006906:	4b8d      	ldr	r3, [pc, #564]	; (8006b3c <HAL_RCC_OscConfig+0x280>)
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800690e:	2b00      	cmp	r3, #0
 8006910:	d06c      	beq.n	80069ec <HAL_RCC_OscConfig+0x130>
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	685b      	ldr	r3, [r3, #4]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d168      	bne.n	80069ec <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800691a:	2301      	movs	r3, #1
 800691c:	e26b      	b.n	8006df6 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	685b      	ldr	r3, [r3, #4]
 8006922:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006926:	d106      	bne.n	8006936 <HAL_RCC_OscConfig+0x7a>
 8006928:	4b84      	ldr	r3, [pc, #528]	; (8006b3c <HAL_RCC_OscConfig+0x280>)
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	4a83      	ldr	r2, [pc, #524]	; (8006b3c <HAL_RCC_OscConfig+0x280>)
 800692e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006932:	6013      	str	r3, [r2, #0]
 8006934:	e02e      	b.n	8006994 <HAL_RCC_OscConfig+0xd8>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	685b      	ldr	r3, [r3, #4]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d10c      	bne.n	8006958 <HAL_RCC_OscConfig+0x9c>
 800693e:	4b7f      	ldr	r3, [pc, #508]	; (8006b3c <HAL_RCC_OscConfig+0x280>)
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	4a7e      	ldr	r2, [pc, #504]	; (8006b3c <HAL_RCC_OscConfig+0x280>)
 8006944:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006948:	6013      	str	r3, [r2, #0]
 800694a:	4b7c      	ldr	r3, [pc, #496]	; (8006b3c <HAL_RCC_OscConfig+0x280>)
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	4a7b      	ldr	r2, [pc, #492]	; (8006b3c <HAL_RCC_OscConfig+0x280>)
 8006950:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006954:	6013      	str	r3, [r2, #0]
 8006956:	e01d      	b.n	8006994 <HAL_RCC_OscConfig+0xd8>
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	685b      	ldr	r3, [r3, #4]
 800695c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006960:	d10c      	bne.n	800697c <HAL_RCC_OscConfig+0xc0>
 8006962:	4b76      	ldr	r3, [pc, #472]	; (8006b3c <HAL_RCC_OscConfig+0x280>)
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	4a75      	ldr	r2, [pc, #468]	; (8006b3c <HAL_RCC_OscConfig+0x280>)
 8006968:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800696c:	6013      	str	r3, [r2, #0]
 800696e:	4b73      	ldr	r3, [pc, #460]	; (8006b3c <HAL_RCC_OscConfig+0x280>)
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	4a72      	ldr	r2, [pc, #456]	; (8006b3c <HAL_RCC_OscConfig+0x280>)
 8006974:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006978:	6013      	str	r3, [r2, #0]
 800697a:	e00b      	b.n	8006994 <HAL_RCC_OscConfig+0xd8>
 800697c:	4b6f      	ldr	r3, [pc, #444]	; (8006b3c <HAL_RCC_OscConfig+0x280>)
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	4a6e      	ldr	r2, [pc, #440]	; (8006b3c <HAL_RCC_OscConfig+0x280>)
 8006982:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006986:	6013      	str	r3, [r2, #0]
 8006988:	4b6c      	ldr	r3, [pc, #432]	; (8006b3c <HAL_RCC_OscConfig+0x280>)
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	4a6b      	ldr	r2, [pc, #428]	; (8006b3c <HAL_RCC_OscConfig+0x280>)
 800698e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006992:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	685b      	ldr	r3, [r3, #4]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d013      	beq.n	80069c4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800699c:	f7fc fdde 	bl	800355c <HAL_GetTick>
 80069a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80069a2:	e008      	b.n	80069b6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80069a4:	f7fc fdda 	bl	800355c <HAL_GetTick>
 80069a8:	4602      	mov	r2, r0
 80069aa:	693b      	ldr	r3, [r7, #16]
 80069ac:	1ad3      	subs	r3, r2, r3
 80069ae:	2b64      	cmp	r3, #100	; 0x64
 80069b0:	d901      	bls.n	80069b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80069b2:	2303      	movs	r3, #3
 80069b4:	e21f      	b.n	8006df6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80069b6:	4b61      	ldr	r3, [pc, #388]	; (8006b3c <HAL_RCC_OscConfig+0x280>)
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d0f0      	beq.n	80069a4 <HAL_RCC_OscConfig+0xe8>
 80069c2:	e014      	b.n	80069ee <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069c4:	f7fc fdca 	bl	800355c <HAL_GetTick>
 80069c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80069ca:	e008      	b.n	80069de <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80069cc:	f7fc fdc6 	bl	800355c <HAL_GetTick>
 80069d0:	4602      	mov	r2, r0
 80069d2:	693b      	ldr	r3, [r7, #16]
 80069d4:	1ad3      	subs	r3, r2, r3
 80069d6:	2b64      	cmp	r3, #100	; 0x64
 80069d8:	d901      	bls.n	80069de <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80069da:	2303      	movs	r3, #3
 80069dc:	e20b      	b.n	8006df6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80069de:	4b57      	ldr	r3, [pc, #348]	; (8006b3c <HAL_RCC_OscConfig+0x280>)
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d1f0      	bne.n	80069cc <HAL_RCC_OscConfig+0x110>
 80069ea:	e000      	b.n	80069ee <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80069ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f003 0302 	and.w	r3, r3, #2
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d069      	beq.n	8006ace <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80069fa:	4b50      	ldr	r3, [pc, #320]	; (8006b3c <HAL_RCC_OscConfig+0x280>)
 80069fc:	689b      	ldr	r3, [r3, #8]
 80069fe:	f003 030c 	and.w	r3, r3, #12
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d00b      	beq.n	8006a1e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006a06:	4b4d      	ldr	r3, [pc, #308]	; (8006b3c <HAL_RCC_OscConfig+0x280>)
 8006a08:	689b      	ldr	r3, [r3, #8]
 8006a0a:	f003 030c 	and.w	r3, r3, #12
 8006a0e:	2b08      	cmp	r3, #8
 8006a10:	d11c      	bne.n	8006a4c <HAL_RCC_OscConfig+0x190>
 8006a12:	4b4a      	ldr	r3, [pc, #296]	; (8006b3c <HAL_RCC_OscConfig+0x280>)
 8006a14:	685b      	ldr	r3, [r3, #4]
 8006a16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d116      	bne.n	8006a4c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006a1e:	4b47      	ldr	r3, [pc, #284]	; (8006b3c <HAL_RCC_OscConfig+0x280>)
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f003 0302 	and.w	r3, r3, #2
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d005      	beq.n	8006a36 <HAL_RCC_OscConfig+0x17a>
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	68db      	ldr	r3, [r3, #12]
 8006a2e:	2b01      	cmp	r3, #1
 8006a30:	d001      	beq.n	8006a36 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006a32:	2301      	movs	r3, #1
 8006a34:	e1df      	b.n	8006df6 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a36:	4b41      	ldr	r3, [pc, #260]	; (8006b3c <HAL_RCC_OscConfig+0x280>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	691b      	ldr	r3, [r3, #16]
 8006a42:	00db      	lsls	r3, r3, #3
 8006a44:	493d      	ldr	r1, [pc, #244]	; (8006b3c <HAL_RCC_OscConfig+0x280>)
 8006a46:	4313      	orrs	r3, r2
 8006a48:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006a4a:	e040      	b.n	8006ace <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	68db      	ldr	r3, [r3, #12]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d023      	beq.n	8006a9c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006a54:	4b39      	ldr	r3, [pc, #228]	; (8006b3c <HAL_RCC_OscConfig+0x280>)
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	4a38      	ldr	r2, [pc, #224]	; (8006b3c <HAL_RCC_OscConfig+0x280>)
 8006a5a:	f043 0301 	orr.w	r3, r3, #1
 8006a5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a60:	f7fc fd7c 	bl	800355c <HAL_GetTick>
 8006a64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a66:	e008      	b.n	8006a7a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006a68:	f7fc fd78 	bl	800355c <HAL_GetTick>
 8006a6c:	4602      	mov	r2, r0
 8006a6e:	693b      	ldr	r3, [r7, #16]
 8006a70:	1ad3      	subs	r3, r2, r3
 8006a72:	2b02      	cmp	r3, #2
 8006a74:	d901      	bls.n	8006a7a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8006a76:	2303      	movs	r3, #3
 8006a78:	e1bd      	b.n	8006df6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a7a:	4b30      	ldr	r3, [pc, #192]	; (8006b3c <HAL_RCC_OscConfig+0x280>)
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f003 0302 	and.w	r3, r3, #2
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d0f0      	beq.n	8006a68 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a86:	4b2d      	ldr	r3, [pc, #180]	; (8006b3c <HAL_RCC_OscConfig+0x280>)
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	691b      	ldr	r3, [r3, #16]
 8006a92:	00db      	lsls	r3, r3, #3
 8006a94:	4929      	ldr	r1, [pc, #164]	; (8006b3c <HAL_RCC_OscConfig+0x280>)
 8006a96:	4313      	orrs	r3, r2
 8006a98:	600b      	str	r3, [r1, #0]
 8006a9a:	e018      	b.n	8006ace <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006a9c:	4b27      	ldr	r3, [pc, #156]	; (8006b3c <HAL_RCC_OscConfig+0x280>)
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	4a26      	ldr	r2, [pc, #152]	; (8006b3c <HAL_RCC_OscConfig+0x280>)
 8006aa2:	f023 0301 	bic.w	r3, r3, #1
 8006aa6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006aa8:	f7fc fd58 	bl	800355c <HAL_GetTick>
 8006aac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006aae:	e008      	b.n	8006ac2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006ab0:	f7fc fd54 	bl	800355c <HAL_GetTick>
 8006ab4:	4602      	mov	r2, r0
 8006ab6:	693b      	ldr	r3, [r7, #16]
 8006ab8:	1ad3      	subs	r3, r2, r3
 8006aba:	2b02      	cmp	r3, #2
 8006abc:	d901      	bls.n	8006ac2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006abe:	2303      	movs	r3, #3
 8006ac0:	e199      	b.n	8006df6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006ac2:	4b1e      	ldr	r3, [pc, #120]	; (8006b3c <HAL_RCC_OscConfig+0x280>)
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f003 0302 	and.w	r3, r3, #2
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d1f0      	bne.n	8006ab0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f003 0308 	and.w	r3, r3, #8
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d038      	beq.n	8006b4c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	695b      	ldr	r3, [r3, #20]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d019      	beq.n	8006b16 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006ae2:	4b16      	ldr	r3, [pc, #88]	; (8006b3c <HAL_RCC_OscConfig+0x280>)
 8006ae4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ae6:	4a15      	ldr	r2, [pc, #84]	; (8006b3c <HAL_RCC_OscConfig+0x280>)
 8006ae8:	f043 0301 	orr.w	r3, r3, #1
 8006aec:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006aee:	f7fc fd35 	bl	800355c <HAL_GetTick>
 8006af2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006af4:	e008      	b.n	8006b08 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006af6:	f7fc fd31 	bl	800355c <HAL_GetTick>
 8006afa:	4602      	mov	r2, r0
 8006afc:	693b      	ldr	r3, [r7, #16]
 8006afe:	1ad3      	subs	r3, r2, r3
 8006b00:	2b02      	cmp	r3, #2
 8006b02:	d901      	bls.n	8006b08 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006b04:	2303      	movs	r3, #3
 8006b06:	e176      	b.n	8006df6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006b08:	4b0c      	ldr	r3, [pc, #48]	; (8006b3c <HAL_RCC_OscConfig+0x280>)
 8006b0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b0c:	f003 0302 	and.w	r3, r3, #2
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d0f0      	beq.n	8006af6 <HAL_RCC_OscConfig+0x23a>
 8006b14:	e01a      	b.n	8006b4c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006b16:	4b09      	ldr	r3, [pc, #36]	; (8006b3c <HAL_RCC_OscConfig+0x280>)
 8006b18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b1a:	4a08      	ldr	r2, [pc, #32]	; (8006b3c <HAL_RCC_OscConfig+0x280>)
 8006b1c:	f023 0301 	bic.w	r3, r3, #1
 8006b20:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b22:	f7fc fd1b 	bl	800355c <HAL_GetTick>
 8006b26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006b28:	e00a      	b.n	8006b40 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006b2a:	f7fc fd17 	bl	800355c <HAL_GetTick>
 8006b2e:	4602      	mov	r2, r0
 8006b30:	693b      	ldr	r3, [r7, #16]
 8006b32:	1ad3      	subs	r3, r2, r3
 8006b34:	2b02      	cmp	r3, #2
 8006b36:	d903      	bls.n	8006b40 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006b38:	2303      	movs	r3, #3
 8006b3a:	e15c      	b.n	8006df6 <HAL_RCC_OscConfig+0x53a>
 8006b3c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006b40:	4b91      	ldr	r3, [pc, #580]	; (8006d88 <HAL_RCC_OscConfig+0x4cc>)
 8006b42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b44:	f003 0302 	and.w	r3, r3, #2
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d1ee      	bne.n	8006b2a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f003 0304 	and.w	r3, r3, #4
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	f000 80a4 	beq.w	8006ca2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006b5a:	4b8b      	ldr	r3, [pc, #556]	; (8006d88 <HAL_RCC_OscConfig+0x4cc>)
 8006b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d10d      	bne.n	8006b82 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8006b66:	4b88      	ldr	r3, [pc, #544]	; (8006d88 <HAL_RCC_OscConfig+0x4cc>)
 8006b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b6a:	4a87      	ldr	r2, [pc, #540]	; (8006d88 <HAL_RCC_OscConfig+0x4cc>)
 8006b6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b70:	6413      	str	r3, [r2, #64]	; 0x40
 8006b72:	4b85      	ldr	r3, [pc, #532]	; (8006d88 <HAL_RCC_OscConfig+0x4cc>)
 8006b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b7a:	60bb      	str	r3, [r7, #8]
 8006b7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006b7e:	2301      	movs	r3, #1
 8006b80:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006b82:	4b82      	ldr	r3, [pc, #520]	; (8006d8c <HAL_RCC_OscConfig+0x4d0>)
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d118      	bne.n	8006bc0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8006b8e:	4b7f      	ldr	r3, [pc, #508]	; (8006d8c <HAL_RCC_OscConfig+0x4d0>)
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	4a7e      	ldr	r2, [pc, #504]	; (8006d8c <HAL_RCC_OscConfig+0x4d0>)
 8006b94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006b9a:	f7fc fcdf 	bl	800355c <HAL_GetTick>
 8006b9e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006ba0:	e008      	b.n	8006bb4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006ba2:	f7fc fcdb 	bl	800355c <HAL_GetTick>
 8006ba6:	4602      	mov	r2, r0
 8006ba8:	693b      	ldr	r3, [r7, #16]
 8006baa:	1ad3      	subs	r3, r2, r3
 8006bac:	2b64      	cmp	r3, #100	; 0x64
 8006bae:	d901      	bls.n	8006bb4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8006bb0:	2303      	movs	r3, #3
 8006bb2:	e120      	b.n	8006df6 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006bb4:	4b75      	ldr	r3, [pc, #468]	; (8006d8c <HAL_RCC_OscConfig+0x4d0>)
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d0f0      	beq.n	8006ba2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	689b      	ldr	r3, [r3, #8]
 8006bc4:	2b01      	cmp	r3, #1
 8006bc6:	d106      	bne.n	8006bd6 <HAL_RCC_OscConfig+0x31a>
 8006bc8:	4b6f      	ldr	r3, [pc, #444]	; (8006d88 <HAL_RCC_OscConfig+0x4cc>)
 8006bca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bcc:	4a6e      	ldr	r2, [pc, #440]	; (8006d88 <HAL_RCC_OscConfig+0x4cc>)
 8006bce:	f043 0301 	orr.w	r3, r3, #1
 8006bd2:	6713      	str	r3, [r2, #112]	; 0x70
 8006bd4:	e02d      	b.n	8006c32 <HAL_RCC_OscConfig+0x376>
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	689b      	ldr	r3, [r3, #8]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d10c      	bne.n	8006bf8 <HAL_RCC_OscConfig+0x33c>
 8006bde:	4b6a      	ldr	r3, [pc, #424]	; (8006d88 <HAL_RCC_OscConfig+0x4cc>)
 8006be0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006be2:	4a69      	ldr	r2, [pc, #420]	; (8006d88 <HAL_RCC_OscConfig+0x4cc>)
 8006be4:	f023 0301 	bic.w	r3, r3, #1
 8006be8:	6713      	str	r3, [r2, #112]	; 0x70
 8006bea:	4b67      	ldr	r3, [pc, #412]	; (8006d88 <HAL_RCC_OscConfig+0x4cc>)
 8006bec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bee:	4a66      	ldr	r2, [pc, #408]	; (8006d88 <HAL_RCC_OscConfig+0x4cc>)
 8006bf0:	f023 0304 	bic.w	r3, r3, #4
 8006bf4:	6713      	str	r3, [r2, #112]	; 0x70
 8006bf6:	e01c      	b.n	8006c32 <HAL_RCC_OscConfig+0x376>
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	689b      	ldr	r3, [r3, #8]
 8006bfc:	2b05      	cmp	r3, #5
 8006bfe:	d10c      	bne.n	8006c1a <HAL_RCC_OscConfig+0x35e>
 8006c00:	4b61      	ldr	r3, [pc, #388]	; (8006d88 <HAL_RCC_OscConfig+0x4cc>)
 8006c02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c04:	4a60      	ldr	r2, [pc, #384]	; (8006d88 <HAL_RCC_OscConfig+0x4cc>)
 8006c06:	f043 0304 	orr.w	r3, r3, #4
 8006c0a:	6713      	str	r3, [r2, #112]	; 0x70
 8006c0c:	4b5e      	ldr	r3, [pc, #376]	; (8006d88 <HAL_RCC_OscConfig+0x4cc>)
 8006c0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c10:	4a5d      	ldr	r2, [pc, #372]	; (8006d88 <HAL_RCC_OscConfig+0x4cc>)
 8006c12:	f043 0301 	orr.w	r3, r3, #1
 8006c16:	6713      	str	r3, [r2, #112]	; 0x70
 8006c18:	e00b      	b.n	8006c32 <HAL_RCC_OscConfig+0x376>
 8006c1a:	4b5b      	ldr	r3, [pc, #364]	; (8006d88 <HAL_RCC_OscConfig+0x4cc>)
 8006c1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c1e:	4a5a      	ldr	r2, [pc, #360]	; (8006d88 <HAL_RCC_OscConfig+0x4cc>)
 8006c20:	f023 0301 	bic.w	r3, r3, #1
 8006c24:	6713      	str	r3, [r2, #112]	; 0x70
 8006c26:	4b58      	ldr	r3, [pc, #352]	; (8006d88 <HAL_RCC_OscConfig+0x4cc>)
 8006c28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c2a:	4a57      	ldr	r2, [pc, #348]	; (8006d88 <HAL_RCC_OscConfig+0x4cc>)
 8006c2c:	f023 0304 	bic.w	r3, r3, #4
 8006c30:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	689b      	ldr	r3, [r3, #8]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d015      	beq.n	8006c66 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c3a:	f7fc fc8f 	bl	800355c <HAL_GetTick>
 8006c3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c40:	e00a      	b.n	8006c58 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c42:	f7fc fc8b 	bl	800355c <HAL_GetTick>
 8006c46:	4602      	mov	r2, r0
 8006c48:	693b      	ldr	r3, [r7, #16]
 8006c4a:	1ad3      	subs	r3, r2, r3
 8006c4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c50:	4293      	cmp	r3, r2
 8006c52:	d901      	bls.n	8006c58 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8006c54:	2303      	movs	r3, #3
 8006c56:	e0ce      	b.n	8006df6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c58:	4b4b      	ldr	r3, [pc, #300]	; (8006d88 <HAL_RCC_OscConfig+0x4cc>)
 8006c5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c5c:	f003 0302 	and.w	r3, r3, #2
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d0ee      	beq.n	8006c42 <HAL_RCC_OscConfig+0x386>
 8006c64:	e014      	b.n	8006c90 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c66:	f7fc fc79 	bl	800355c <HAL_GetTick>
 8006c6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006c6c:	e00a      	b.n	8006c84 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c6e:	f7fc fc75 	bl	800355c <HAL_GetTick>
 8006c72:	4602      	mov	r2, r0
 8006c74:	693b      	ldr	r3, [r7, #16]
 8006c76:	1ad3      	subs	r3, r2, r3
 8006c78:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d901      	bls.n	8006c84 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8006c80:	2303      	movs	r3, #3
 8006c82:	e0b8      	b.n	8006df6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006c84:	4b40      	ldr	r3, [pc, #256]	; (8006d88 <HAL_RCC_OscConfig+0x4cc>)
 8006c86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c88:	f003 0302 	and.w	r3, r3, #2
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d1ee      	bne.n	8006c6e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006c90:	7dfb      	ldrb	r3, [r7, #23]
 8006c92:	2b01      	cmp	r3, #1
 8006c94:	d105      	bne.n	8006ca2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006c96:	4b3c      	ldr	r3, [pc, #240]	; (8006d88 <HAL_RCC_OscConfig+0x4cc>)
 8006c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c9a:	4a3b      	ldr	r2, [pc, #236]	; (8006d88 <HAL_RCC_OscConfig+0x4cc>)
 8006c9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006ca0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	699b      	ldr	r3, [r3, #24]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	f000 80a4 	beq.w	8006df4 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006cac:	4b36      	ldr	r3, [pc, #216]	; (8006d88 <HAL_RCC_OscConfig+0x4cc>)
 8006cae:	689b      	ldr	r3, [r3, #8]
 8006cb0:	f003 030c 	and.w	r3, r3, #12
 8006cb4:	2b08      	cmp	r3, #8
 8006cb6:	d06b      	beq.n	8006d90 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	699b      	ldr	r3, [r3, #24]
 8006cbc:	2b02      	cmp	r3, #2
 8006cbe:	d149      	bne.n	8006d54 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006cc0:	4b31      	ldr	r3, [pc, #196]	; (8006d88 <HAL_RCC_OscConfig+0x4cc>)
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	4a30      	ldr	r2, [pc, #192]	; (8006d88 <HAL_RCC_OscConfig+0x4cc>)
 8006cc6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006cca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ccc:	f7fc fc46 	bl	800355c <HAL_GetTick>
 8006cd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006cd2:	e008      	b.n	8006ce6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006cd4:	f7fc fc42 	bl	800355c <HAL_GetTick>
 8006cd8:	4602      	mov	r2, r0
 8006cda:	693b      	ldr	r3, [r7, #16]
 8006cdc:	1ad3      	subs	r3, r2, r3
 8006cde:	2b02      	cmp	r3, #2
 8006ce0:	d901      	bls.n	8006ce6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8006ce2:	2303      	movs	r3, #3
 8006ce4:	e087      	b.n	8006df6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ce6:	4b28      	ldr	r3, [pc, #160]	; (8006d88 <HAL_RCC_OscConfig+0x4cc>)
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d1f0      	bne.n	8006cd4 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	69da      	ldr	r2, [r3, #28]
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	6a1b      	ldr	r3, [r3, #32]
 8006cfa:	431a      	orrs	r2, r3
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d00:	019b      	lsls	r3, r3, #6
 8006d02:	431a      	orrs	r2, r3
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d08:	085b      	lsrs	r3, r3, #1
 8006d0a:	3b01      	subs	r3, #1
 8006d0c:	041b      	lsls	r3, r3, #16
 8006d0e:	431a      	orrs	r2, r3
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d14:	061b      	lsls	r3, r3, #24
 8006d16:	4313      	orrs	r3, r2
 8006d18:	4a1b      	ldr	r2, [pc, #108]	; (8006d88 <HAL_RCC_OscConfig+0x4cc>)
 8006d1a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006d1e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006d20:	4b19      	ldr	r3, [pc, #100]	; (8006d88 <HAL_RCC_OscConfig+0x4cc>)
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	4a18      	ldr	r2, [pc, #96]	; (8006d88 <HAL_RCC_OscConfig+0x4cc>)
 8006d26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006d2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d2c:	f7fc fc16 	bl	800355c <HAL_GetTick>
 8006d30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006d32:	e008      	b.n	8006d46 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006d34:	f7fc fc12 	bl	800355c <HAL_GetTick>
 8006d38:	4602      	mov	r2, r0
 8006d3a:	693b      	ldr	r3, [r7, #16]
 8006d3c:	1ad3      	subs	r3, r2, r3
 8006d3e:	2b02      	cmp	r3, #2
 8006d40:	d901      	bls.n	8006d46 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8006d42:	2303      	movs	r3, #3
 8006d44:	e057      	b.n	8006df6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006d46:	4b10      	ldr	r3, [pc, #64]	; (8006d88 <HAL_RCC_OscConfig+0x4cc>)
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d0f0      	beq.n	8006d34 <HAL_RCC_OscConfig+0x478>
 8006d52:	e04f      	b.n	8006df4 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d54:	4b0c      	ldr	r3, [pc, #48]	; (8006d88 <HAL_RCC_OscConfig+0x4cc>)
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	4a0b      	ldr	r2, [pc, #44]	; (8006d88 <HAL_RCC_OscConfig+0x4cc>)
 8006d5a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006d5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d60:	f7fc fbfc 	bl	800355c <HAL_GetTick>
 8006d64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d66:	e008      	b.n	8006d7a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006d68:	f7fc fbf8 	bl	800355c <HAL_GetTick>
 8006d6c:	4602      	mov	r2, r0
 8006d6e:	693b      	ldr	r3, [r7, #16]
 8006d70:	1ad3      	subs	r3, r2, r3
 8006d72:	2b02      	cmp	r3, #2
 8006d74:	d901      	bls.n	8006d7a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8006d76:	2303      	movs	r3, #3
 8006d78:	e03d      	b.n	8006df6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d7a:	4b03      	ldr	r3, [pc, #12]	; (8006d88 <HAL_RCC_OscConfig+0x4cc>)
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d1f0      	bne.n	8006d68 <HAL_RCC_OscConfig+0x4ac>
 8006d86:	e035      	b.n	8006df4 <HAL_RCC_OscConfig+0x538>
 8006d88:	40023800 	.word	0x40023800
 8006d8c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8006d90:	4b1b      	ldr	r3, [pc, #108]	; (8006e00 <HAL_RCC_OscConfig+0x544>)
 8006d92:	685b      	ldr	r3, [r3, #4]
 8006d94:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	699b      	ldr	r3, [r3, #24]
 8006d9a:	2b01      	cmp	r3, #1
 8006d9c:	d028      	beq.n	8006df0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006da8:	429a      	cmp	r2, r3
 8006daa:	d121      	bne.n	8006df0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006db6:	429a      	cmp	r2, r3
 8006db8:	d11a      	bne.n	8006df0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006dba:	68fa      	ldr	r2, [r7, #12]
 8006dbc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006dc0:	4013      	ands	r3, r2
 8006dc2:	687a      	ldr	r2, [r7, #4]
 8006dc4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006dc6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006dc8:	4293      	cmp	r3, r2
 8006dca:	d111      	bne.n	8006df0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dd6:	085b      	lsrs	r3, r3, #1
 8006dd8:	3b01      	subs	r3, #1
 8006dda:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006ddc:	429a      	cmp	r2, r3
 8006dde:	d107      	bne.n	8006df0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dea:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006dec:	429a      	cmp	r2, r3
 8006dee:	d001      	beq.n	8006df4 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8006df0:	2301      	movs	r3, #1
 8006df2:	e000      	b.n	8006df6 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8006df4:	2300      	movs	r3, #0
}
 8006df6:	4618      	mov	r0, r3
 8006df8:	3718      	adds	r7, #24
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	bd80      	pop	{r7, pc}
 8006dfe:	bf00      	nop
 8006e00:	40023800 	.word	0x40023800

08006e04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b084      	sub	sp, #16
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
 8006e0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8006e0e:	2300      	movs	r3, #0
 8006e10:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d101      	bne.n	8006e1c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006e18:	2301      	movs	r3, #1
 8006e1a:	e0d0      	b.n	8006fbe <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006e1c:	4b6a      	ldr	r3, [pc, #424]	; (8006fc8 <HAL_RCC_ClockConfig+0x1c4>)
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f003 030f 	and.w	r3, r3, #15
 8006e24:	683a      	ldr	r2, [r7, #0]
 8006e26:	429a      	cmp	r2, r3
 8006e28:	d910      	bls.n	8006e4c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e2a:	4b67      	ldr	r3, [pc, #412]	; (8006fc8 <HAL_RCC_ClockConfig+0x1c4>)
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f023 020f 	bic.w	r2, r3, #15
 8006e32:	4965      	ldr	r1, [pc, #404]	; (8006fc8 <HAL_RCC_ClockConfig+0x1c4>)
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	4313      	orrs	r3, r2
 8006e38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e3a:	4b63      	ldr	r3, [pc, #396]	; (8006fc8 <HAL_RCC_ClockConfig+0x1c4>)
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	f003 030f 	and.w	r3, r3, #15
 8006e42:	683a      	ldr	r2, [r7, #0]
 8006e44:	429a      	cmp	r2, r3
 8006e46:	d001      	beq.n	8006e4c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006e48:	2301      	movs	r3, #1
 8006e4a:	e0b8      	b.n	8006fbe <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f003 0302 	and.w	r3, r3, #2
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d020      	beq.n	8006e9a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f003 0304 	and.w	r3, r3, #4
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d005      	beq.n	8006e70 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006e64:	4b59      	ldr	r3, [pc, #356]	; (8006fcc <HAL_RCC_ClockConfig+0x1c8>)
 8006e66:	689b      	ldr	r3, [r3, #8]
 8006e68:	4a58      	ldr	r2, [pc, #352]	; (8006fcc <HAL_RCC_ClockConfig+0x1c8>)
 8006e6a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006e6e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f003 0308 	and.w	r3, r3, #8
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d005      	beq.n	8006e88 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006e7c:	4b53      	ldr	r3, [pc, #332]	; (8006fcc <HAL_RCC_ClockConfig+0x1c8>)
 8006e7e:	689b      	ldr	r3, [r3, #8]
 8006e80:	4a52      	ldr	r2, [pc, #328]	; (8006fcc <HAL_RCC_ClockConfig+0x1c8>)
 8006e82:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006e86:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006e88:	4b50      	ldr	r3, [pc, #320]	; (8006fcc <HAL_RCC_ClockConfig+0x1c8>)
 8006e8a:	689b      	ldr	r3, [r3, #8]
 8006e8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	689b      	ldr	r3, [r3, #8]
 8006e94:	494d      	ldr	r1, [pc, #308]	; (8006fcc <HAL_RCC_ClockConfig+0x1c8>)
 8006e96:	4313      	orrs	r3, r2
 8006e98:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f003 0301 	and.w	r3, r3, #1
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d040      	beq.n	8006f28 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	685b      	ldr	r3, [r3, #4]
 8006eaa:	2b01      	cmp	r3, #1
 8006eac:	d107      	bne.n	8006ebe <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006eae:	4b47      	ldr	r3, [pc, #284]	; (8006fcc <HAL_RCC_ClockConfig+0x1c8>)
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d115      	bne.n	8006ee6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006eba:	2301      	movs	r3, #1
 8006ebc:	e07f      	b.n	8006fbe <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	685b      	ldr	r3, [r3, #4]
 8006ec2:	2b02      	cmp	r3, #2
 8006ec4:	d107      	bne.n	8006ed6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006ec6:	4b41      	ldr	r3, [pc, #260]	; (8006fcc <HAL_RCC_ClockConfig+0x1c8>)
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d109      	bne.n	8006ee6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006ed2:	2301      	movs	r3, #1
 8006ed4:	e073      	b.n	8006fbe <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ed6:	4b3d      	ldr	r3, [pc, #244]	; (8006fcc <HAL_RCC_ClockConfig+0x1c8>)
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f003 0302 	and.w	r3, r3, #2
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d101      	bne.n	8006ee6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006ee2:	2301      	movs	r3, #1
 8006ee4:	e06b      	b.n	8006fbe <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006ee6:	4b39      	ldr	r3, [pc, #228]	; (8006fcc <HAL_RCC_ClockConfig+0x1c8>)
 8006ee8:	689b      	ldr	r3, [r3, #8]
 8006eea:	f023 0203 	bic.w	r2, r3, #3
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	685b      	ldr	r3, [r3, #4]
 8006ef2:	4936      	ldr	r1, [pc, #216]	; (8006fcc <HAL_RCC_ClockConfig+0x1c8>)
 8006ef4:	4313      	orrs	r3, r2
 8006ef6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006ef8:	f7fc fb30 	bl	800355c <HAL_GetTick>
 8006efc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006efe:	e00a      	b.n	8006f16 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006f00:	f7fc fb2c 	bl	800355c <HAL_GetTick>
 8006f04:	4602      	mov	r2, r0
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	1ad3      	subs	r3, r2, r3
 8006f0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d901      	bls.n	8006f16 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8006f12:	2303      	movs	r3, #3
 8006f14:	e053      	b.n	8006fbe <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f16:	4b2d      	ldr	r3, [pc, #180]	; (8006fcc <HAL_RCC_ClockConfig+0x1c8>)
 8006f18:	689b      	ldr	r3, [r3, #8]
 8006f1a:	f003 020c 	and.w	r2, r3, #12
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	685b      	ldr	r3, [r3, #4]
 8006f22:	009b      	lsls	r3, r3, #2
 8006f24:	429a      	cmp	r2, r3
 8006f26:	d1eb      	bne.n	8006f00 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006f28:	4b27      	ldr	r3, [pc, #156]	; (8006fc8 <HAL_RCC_ClockConfig+0x1c4>)
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f003 030f 	and.w	r3, r3, #15
 8006f30:	683a      	ldr	r2, [r7, #0]
 8006f32:	429a      	cmp	r2, r3
 8006f34:	d210      	bcs.n	8006f58 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f36:	4b24      	ldr	r3, [pc, #144]	; (8006fc8 <HAL_RCC_ClockConfig+0x1c4>)
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f023 020f 	bic.w	r2, r3, #15
 8006f3e:	4922      	ldr	r1, [pc, #136]	; (8006fc8 <HAL_RCC_ClockConfig+0x1c4>)
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	4313      	orrs	r3, r2
 8006f44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f46:	4b20      	ldr	r3, [pc, #128]	; (8006fc8 <HAL_RCC_ClockConfig+0x1c4>)
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	f003 030f 	and.w	r3, r3, #15
 8006f4e:	683a      	ldr	r2, [r7, #0]
 8006f50:	429a      	cmp	r2, r3
 8006f52:	d001      	beq.n	8006f58 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8006f54:	2301      	movs	r3, #1
 8006f56:	e032      	b.n	8006fbe <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f003 0304 	and.w	r3, r3, #4
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d008      	beq.n	8006f76 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006f64:	4b19      	ldr	r3, [pc, #100]	; (8006fcc <HAL_RCC_ClockConfig+0x1c8>)
 8006f66:	689b      	ldr	r3, [r3, #8]
 8006f68:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	68db      	ldr	r3, [r3, #12]
 8006f70:	4916      	ldr	r1, [pc, #88]	; (8006fcc <HAL_RCC_ClockConfig+0x1c8>)
 8006f72:	4313      	orrs	r3, r2
 8006f74:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f003 0308 	and.w	r3, r3, #8
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d009      	beq.n	8006f96 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006f82:	4b12      	ldr	r3, [pc, #72]	; (8006fcc <HAL_RCC_ClockConfig+0x1c8>)
 8006f84:	689b      	ldr	r3, [r3, #8]
 8006f86:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	691b      	ldr	r3, [r3, #16]
 8006f8e:	00db      	lsls	r3, r3, #3
 8006f90:	490e      	ldr	r1, [pc, #56]	; (8006fcc <HAL_RCC_ClockConfig+0x1c8>)
 8006f92:	4313      	orrs	r3, r2
 8006f94:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006f96:	f000 f821 	bl	8006fdc <HAL_RCC_GetSysClockFreq>
 8006f9a:	4602      	mov	r2, r0
 8006f9c:	4b0b      	ldr	r3, [pc, #44]	; (8006fcc <HAL_RCC_ClockConfig+0x1c8>)
 8006f9e:	689b      	ldr	r3, [r3, #8]
 8006fa0:	091b      	lsrs	r3, r3, #4
 8006fa2:	f003 030f 	and.w	r3, r3, #15
 8006fa6:	490a      	ldr	r1, [pc, #40]	; (8006fd0 <HAL_RCC_ClockConfig+0x1cc>)
 8006fa8:	5ccb      	ldrb	r3, [r1, r3]
 8006faa:	fa22 f303 	lsr.w	r3, r2, r3
 8006fae:	4a09      	ldr	r2, [pc, #36]	; (8006fd4 <HAL_RCC_ClockConfig+0x1d0>)
 8006fb0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006fb2:	4b09      	ldr	r3, [pc, #36]	; (8006fd8 <HAL_RCC_ClockConfig+0x1d4>)
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	f7fc fa8c 	bl	80034d4 <HAL_InitTick>

  return HAL_OK;
 8006fbc:	2300      	movs	r3, #0
}
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	3710      	adds	r7, #16
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	bd80      	pop	{r7, pc}
 8006fc6:	bf00      	nop
 8006fc8:	40023c00 	.word	0x40023c00
 8006fcc:	40023800 	.word	0x40023800
 8006fd0:	0801ca08 	.word	0x0801ca08
 8006fd4:	20000018 	.word	0x20000018
 8006fd8:	20000020 	.word	0x20000020

08006fdc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006fdc:	b5b0      	push	{r4, r5, r7, lr}
 8006fde:	b084      	sub	sp, #16
 8006fe0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8006fe2:	2100      	movs	r1, #0
 8006fe4:	6079      	str	r1, [r7, #4]
 8006fe6:	2100      	movs	r1, #0
 8006fe8:	60f9      	str	r1, [r7, #12]
 8006fea:	2100      	movs	r1, #0
 8006fec:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 8006fee:	2100      	movs	r1, #0
 8006ff0:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006ff2:	4952      	ldr	r1, [pc, #328]	; (800713c <HAL_RCC_GetSysClockFreq+0x160>)
 8006ff4:	6889      	ldr	r1, [r1, #8]
 8006ff6:	f001 010c 	and.w	r1, r1, #12
 8006ffa:	2908      	cmp	r1, #8
 8006ffc:	d00d      	beq.n	800701a <HAL_RCC_GetSysClockFreq+0x3e>
 8006ffe:	2908      	cmp	r1, #8
 8007000:	f200 8094 	bhi.w	800712c <HAL_RCC_GetSysClockFreq+0x150>
 8007004:	2900      	cmp	r1, #0
 8007006:	d002      	beq.n	800700e <HAL_RCC_GetSysClockFreq+0x32>
 8007008:	2904      	cmp	r1, #4
 800700a:	d003      	beq.n	8007014 <HAL_RCC_GetSysClockFreq+0x38>
 800700c:	e08e      	b.n	800712c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800700e:	4b4c      	ldr	r3, [pc, #304]	; (8007140 <HAL_RCC_GetSysClockFreq+0x164>)
 8007010:	60bb      	str	r3, [r7, #8]
      break;
 8007012:	e08e      	b.n	8007132 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007014:	4b4b      	ldr	r3, [pc, #300]	; (8007144 <HAL_RCC_GetSysClockFreq+0x168>)
 8007016:	60bb      	str	r3, [r7, #8]
      break;
 8007018:	e08b      	b.n	8007132 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800701a:	4948      	ldr	r1, [pc, #288]	; (800713c <HAL_RCC_GetSysClockFreq+0x160>)
 800701c:	6849      	ldr	r1, [r1, #4]
 800701e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8007022:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8007024:	4945      	ldr	r1, [pc, #276]	; (800713c <HAL_RCC_GetSysClockFreq+0x160>)
 8007026:	6849      	ldr	r1, [r1, #4]
 8007028:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800702c:	2900      	cmp	r1, #0
 800702e:	d024      	beq.n	800707a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007030:	4942      	ldr	r1, [pc, #264]	; (800713c <HAL_RCC_GetSysClockFreq+0x160>)
 8007032:	6849      	ldr	r1, [r1, #4]
 8007034:	0989      	lsrs	r1, r1, #6
 8007036:	4608      	mov	r0, r1
 8007038:	f04f 0100 	mov.w	r1, #0
 800703c:	f240 14ff 	movw	r4, #511	; 0x1ff
 8007040:	f04f 0500 	mov.w	r5, #0
 8007044:	ea00 0204 	and.w	r2, r0, r4
 8007048:	ea01 0305 	and.w	r3, r1, r5
 800704c:	493d      	ldr	r1, [pc, #244]	; (8007144 <HAL_RCC_GetSysClockFreq+0x168>)
 800704e:	fb01 f003 	mul.w	r0, r1, r3
 8007052:	2100      	movs	r1, #0
 8007054:	fb01 f102 	mul.w	r1, r1, r2
 8007058:	1844      	adds	r4, r0, r1
 800705a:	493a      	ldr	r1, [pc, #232]	; (8007144 <HAL_RCC_GetSysClockFreq+0x168>)
 800705c:	fba2 0101 	umull	r0, r1, r2, r1
 8007060:	1863      	adds	r3, r4, r1
 8007062:	4619      	mov	r1, r3
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	461a      	mov	r2, r3
 8007068:	f04f 0300 	mov.w	r3, #0
 800706c:	f7f9 f8cc 	bl	8000208 <__aeabi_uldivmod>
 8007070:	4602      	mov	r2, r0
 8007072:	460b      	mov	r3, r1
 8007074:	4613      	mov	r3, r2
 8007076:	60fb      	str	r3, [r7, #12]
 8007078:	e04a      	b.n	8007110 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800707a:	4b30      	ldr	r3, [pc, #192]	; (800713c <HAL_RCC_GetSysClockFreq+0x160>)
 800707c:	685b      	ldr	r3, [r3, #4]
 800707e:	099b      	lsrs	r3, r3, #6
 8007080:	461a      	mov	r2, r3
 8007082:	f04f 0300 	mov.w	r3, #0
 8007086:	f240 10ff 	movw	r0, #511	; 0x1ff
 800708a:	f04f 0100 	mov.w	r1, #0
 800708e:	ea02 0400 	and.w	r4, r2, r0
 8007092:	ea03 0501 	and.w	r5, r3, r1
 8007096:	4620      	mov	r0, r4
 8007098:	4629      	mov	r1, r5
 800709a:	f04f 0200 	mov.w	r2, #0
 800709e:	f04f 0300 	mov.w	r3, #0
 80070a2:	014b      	lsls	r3, r1, #5
 80070a4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80070a8:	0142      	lsls	r2, r0, #5
 80070aa:	4610      	mov	r0, r2
 80070ac:	4619      	mov	r1, r3
 80070ae:	1b00      	subs	r0, r0, r4
 80070b0:	eb61 0105 	sbc.w	r1, r1, r5
 80070b4:	f04f 0200 	mov.w	r2, #0
 80070b8:	f04f 0300 	mov.w	r3, #0
 80070bc:	018b      	lsls	r3, r1, #6
 80070be:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80070c2:	0182      	lsls	r2, r0, #6
 80070c4:	1a12      	subs	r2, r2, r0
 80070c6:	eb63 0301 	sbc.w	r3, r3, r1
 80070ca:	f04f 0000 	mov.w	r0, #0
 80070ce:	f04f 0100 	mov.w	r1, #0
 80070d2:	00d9      	lsls	r1, r3, #3
 80070d4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80070d8:	00d0      	lsls	r0, r2, #3
 80070da:	4602      	mov	r2, r0
 80070dc:	460b      	mov	r3, r1
 80070de:	1912      	adds	r2, r2, r4
 80070e0:	eb45 0303 	adc.w	r3, r5, r3
 80070e4:	f04f 0000 	mov.w	r0, #0
 80070e8:	f04f 0100 	mov.w	r1, #0
 80070ec:	0299      	lsls	r1, r3, #10
 80070ee:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80070f2:	0290      	lsls	r0, r2, #10
 80070f4:	4602      	mov	r2, r0
 80070f6:	460b      	mov	r3, r1
 80070f8:	4610      	mov	r0, r2
 80070fa:	4619      	mov	r1, r3
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	461a      	mov	r2, r3
 8007100:	f04f 0300 	mov.w	r3, #0
 8007104:	f7f9 f880 	bl	8000208 <__aeabi_uldivmod>
 8007108:	4602      	mov	r2, r0
 800710a:	460b      	mov	r3, r1
 800710c:	4613      	mov	r3, r2
 800710e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8007110:	4b0a      	ldr	r3, [pc, #40]	; (800713c <HAL_RCC_GetSysClockFreq+0x160>)
 8007112:	685b      	ldr	r3, [r3, #4]
 8007114:	0c1b      	lsrs	r3, r3, #16
 8007116:	f003 0303 	and.w	r3, r3, #3
 800711a:	3301      	adds	r3, #1
 800711c:	005b      	lsls	r3, r3, #1
 800711e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8007120:	68fa      	ldr	r2, [r7, #12]
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	fbb2 f3f3 	udiv	r3, r2, r3
 8007128:	60bb      	str	r3, [r7, #8]
      break;
 800712a:	e002      	b.n	8007132 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800712c:	4b04      	ldr	r3, [pc, #16]	; (8007140 <HAL_RCC_GetSysClockFreq+0x164>)
 800712e:	60bb      	str	r3, [r7, #8]
      break;
 8007130:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007132:	68bb      	ldr	r3, [r7, #8]
}
 8007134:	4618      	mov	r0, r3
 8007136:	3710      	adds	r7, #16
 8007138:	46bd      	mov	sp, r7
 800713a:	bdb0      	pop	{r4, r5, r7, pc}
 800713c:	40023800 	.word	0x40023800
 8007140:	00f42400 	.word	0x00f42400
 8007144:	017d7840 	.word	0x017d7840

08007148 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007148:	b480      	push	{r7}
 800714a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800714c:	4b03      	ldr	r3, [pc, #12]	; (800715c <HAL_RCC_GetHCLKFreq+0x14>)
 800714e:	681b      	ldr	r3, [r3, #0]
}
 8007150:	4618      	mov	r0, r3
 8007152:	46bd      	mov	sp, r7
 8007154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007158:	4770      	bx	lr
 800715a:	bf00      	nop
 800715c:	20000018 	.word	0x20000018

08007160 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007160:	b580      	push	{r7, lr}
 8007162:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007164:	f7ff fff0 	bl	8007148 <HAL_RCC_GetHCLKFreq>
 8007168:	4602      	mov	r2, r0
 800716a:	4b05      	ldr	r3, [pc, #20]	; (8007180 <HAL_RCC_GetPCLK1Freq+0x20>)
 800716c:	689b      	ldr	r3, [r3, #8]
 800716e:	0a9b      	lsrs	r3, r3, #10
 8007170:	f003 0307 	and.w	r3, r3, #7
 8007174:	4903      	ldr	r1, [pc, #12]	; (8007184 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007176:	5ccb      	ldrb	r3, [r1, r3]
 8007178:	fa22 f303 	lsr.w	r3, r2, r3
}
 800717c:	4618      	mov	r0, r3
 800717e:	bd80      	pop	{r7, pc}
 8007180:	40023800 	.word	0x40023800
 8007184:	0801ca18 	.word	0x0801ca18

08007188 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007188:	b580      	push	{r7, lr}
 800718a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800718c:	f7ff ffdc 	bl	8007148 <HAL_RCC_GetHCLKFreq>
 8007190:	4602      	mov	r2, r0
 8007192:	4b05      	ldr	r3, [pc, #20]	; (80071a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007194:	689b      	ldr	r3, [r3, #8]
 8007196:	0b5b      	lsrs	r3, r3, #13
 8007198:	f003 0307 	and.w	r3, r3, #7
 800719c:	4903      	ldr	r1, [pc, #12]	; (80071ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800719e:	5ccb      	ldrb	r3, [r1, r3]
 80071a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80071a4:	4618      	mov	r0, r3
 80071a6:	bd80      	pop	{r7, pc}
 80071a8:	40023800 	.word	0x40023800
 80071ac:	0801ca18 	.word	0x0801ca18

080071b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b088      	sub	sp, #32
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80071b8:	2300      	movs	r3, #0
 80071ba:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80071bc:	2300      	movs	r3, #0
 80071be:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80071c0:	2300      	movs	r3, #0
 80071c2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80071c4:	2300      	movs	r3, #0
 80071c6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80071c8:	2300      	movs	r3, #0
 80071ca:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f003 0301 	and.w	r3, r3, #1
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d012      	beq.n	80071fe <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80071d8:	4b69      	ldr	r3, [pc, #420]	; (8007380 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80071da:	689b      	ldr	r3, [r3, #8]
 80071dc:	4a68      	ldr	r2, [pc, #416]	; (8007380 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80071de:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80071e2:	6093      	str	r3, [r2, #8]
 80071e4:	4b66      	ldr	r3, [pc, #408]	; (8007380 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80071e6:	689a      	ldr	r2, [r3, #8]
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071ec:	4964      	ldr	r1, [pc, #400]	; (8007380 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80071ee:	4313      	orrs	r3, r2
 80071f0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d101      	bne.n	80071fe <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80071fa:	2301      	movs	r3, #1
 80071fc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007206:	2b00      	cmp	r3, #0
 8007208:	d017      	beq.n	800723a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800720a:	4b5d      	ldr	r3, [pc, #372]	; (8007380 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800720c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007210:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007218:	4959      	ldr	r1, [pc, #356]	; (8007380 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800721a:	4313      	orrs	r3, r2
 800721c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007224:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007228:	d101      	bne.n	800722e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800722a:	2301      	movs	r3, #1
 800722c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007232:	2b00      	cmp	r3, #0
 8007234:	d101      	bne.n	800723a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8007236:	2301      	movs	r3, #1
 8007238:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007242:	2b00      	cmp	r3, #0
 8007244:	d017      	beq.n	8007276 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007246:	4b4e      	ldr	r3, [pc, #312]	; (8007380 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007248:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800724c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007254:	494a      	ldr	r1, [pc, #296]	; (8007380 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007256:	4313      	orrs	r3, r2
 8007258:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007260:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007264:	d101      	bne.n	800726a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8007266:	2301      	movs	r3, #1
 8007268:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800726e:	2b00      	cmp	r3, #0
 8007270:	d101      	bne.n	8007276 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8007272:	2301      	movs	r3, #1
 8007274:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800727e:	2b00      	cmp	r3, #0
 8007280:	d001      	beq.n	8007286 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8007282:	2301      	movs	r3, #1
 8007284:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	f003 0320 	and.w	r3, r3, #32
 800728e:	2b00      	cmp	r3, #0
 8007290:	f000 808b 	beq.w	80073aa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007294:	4b3a      	ldr	r3, [pc, #232]	; (8007380 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007298:	4a39      	ldr	r2, [pc, #228]	; (8007380 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800729a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800729e:	6413      	str	r3, [r2, #64]	; 0x40
 80072a0:	4b37      	ldr	r3, [pc, #220]	; (8007380 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80072a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80072a8:	60bb      	str	r3, [r7, #8]
 80072aa:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80072ac:	4b35      	ldr	r3, [pc, #212]	; (8007384 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	4a34      	ldr	r2, [pc, #208]	; (8007384 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80072b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80072b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80072b8:	f7fc f950 	bl	800355c <HAL_GetTick>
 80072bc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80072be:	e008      	b.n	80072d2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80072c0:	f7fc f94c 	bl	800355c <HAL_GetTick>
 80072c4:	4602      	mov	r2, r0
 80072c6:	697b      	ldr	r3, [r7, #20]
 80072c8:	1ad3      	subs	r3, r2, r3
 80072ca:	2b64      	cmp	r3, #100	; 0x64
 80072cc:	d901      	bls.n	80072d2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80072ce:	2303      	movs	r3, #3
 80072d0:	e357      	b.n	8007982 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80072d2:	4b2c      	ldr	r3, [pc, #176]	; (8007384 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d0f0      	beq.n	80072c0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80072de:	4b28      	ldr	r3, [pc, #160]	; (8007380 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80072e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80072e6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80072e8:	693b      	ldr	r3, [r7, #16]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d035      	beq.n	800735a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80072f6:	693a      	ldr	r2, [r7, #16]
 80072f8:	429a      	cmp	r2, r3
 80072fa:	d02e      	beq.n	800735a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80072fc:	4b20      	ldr	r3, [pc, #128]	; (8007380 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80072fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007300:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007304:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007306:	4b1e      	ldr	r3, [pc, #120]	; (8007380 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007308:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800730a:	4a1d      	ldr	r2, [pc, #116]	; (8007380 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800730c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007310:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007312:	4b1b      	ldr	r3, [pc, #108]	; (8007380 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007314:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007316:	4a1a      	ldr	r2, [pc, #104]	; (8007380 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007318:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800731c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800731e:	4a18      	ldr	r2, [pc, #96]	; (8007380 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007320:	693b      	ldr	r3, [r7, #16]
 8007322:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007324:	4b16      	ldr	r3, [pc, #88]	; (8007380 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007326:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007328:	f003 0301 	and.w	r3, r3, #1
 800732c:	2b01      	cmp	r3, #1
 800732e:	d114      	bne.n	800735a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007330:	f7fc f914 	bl	800355c <HAL_GetTick>
 8007334:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007336:	e00a      	b.n	800734e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007338:	f7fc f910 	bl	800355c <HAL_GetTick>
 800733c:	4602      	mov	r2, r0
 800733e:	697b      	ldr	r3, [r7, #20]
 8007340:	1ad3      	subs	r3, r2, r3
 8007342:	f241 3288 	movw	r2, #5000	; 0x1388
 8007346:	4293      	cmp	r3, r2
 8007348:	d901      	bls.n	800734e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800734a:	2303      	movs	r3, #3
 800734c:	e319      	b.n	8007982 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800734e:	4b0c      	ldr	r3, [pc, #48]	; (8007380 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007350:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007352:	f003 0302 	and.w	r3, r3, #2
 8007356:	2b00      	cmp	r3, #0
 8007358:	d0ee      	beq.n	8007338 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800735e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007362:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007366:	d111      	bne.n	800738c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8007368:	4b05      	ldr	r3, [pc, #20]	; (8007380 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800736a:	689b      	ldr	r3, [r3, #8]
 800736c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007374:	4b04      	ldr	r3, [pc, #16]	; (8007388 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007376:	400b      	ands	r3, r1
 8007378:	4901      	ldr	r1, [pc, #4]	; (8007380 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800737a:	4313      	orrs	r3, r2
 800737c:	608b      	str	r3, [r1, #8]
 800737e:	e00b      	b.n	8007398 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8007380:	40023800 	.word	0x40023800
 8007384:	40007000 	.word	0x40007000
 8007388:	0ffffcff 	.word	0x0ffffcff
 800738c:	4bb1      	ldr	r3, [pc, #708]	; (8007654 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800738e:	689b      	ldr	r3, [r3, #8]
 8007390:	4ab0      	ldr	r2, [pc, #704]	; (8007654 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007392:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007396:	6093      	str	r3, [r2, #8]
 8007398:	4bae      	ldr	r3, [pc, #696]	; (8007654 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800739a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80073a4:	49ab      	ldr	r1, [pc, #684]	; (8007654 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80073a6:	4313      	orrs	r3, r2
 80073a8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f003 0310 	and.w	r3, r3, #16
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d010      	beq.n	80073d8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80073b6:	4ba7      	ldr	r3, [pc, #668]	; (8007654 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80073b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80073bc:	4aa5      	ldr	r2, [pc, #660]	; (8007654 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80073be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80073c2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80073c6:	4ba3      	ldr	r3, [pc, #652]	; (8007654 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80073c8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073d0:	49a0      	ldr	r1, [pc, #640]	; (8007654 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80073d2:	4313      	orrs	r3, r2
 80073d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d00a      	beq.n	80073fa <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80073e4:	4b9b      	ldr	r3, [pc, #620]	; (8007654 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80073e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073ea:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80073f2:	4998      	ldr	r1, [pc, #608]	; (8007654 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80073f4:	4313      	orrs	r3, r2
 80073f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007402:	2b00      	cmp	r3, #0
 8007404:	d00a      	beq.n	800741c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007406:	4b93      	ldr	r3, [pc, #588]	; (8007654 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007408:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800740c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007414:	498f      	ldr	r1, [pc, #572]	; (8007654 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007416:	4313      	orrs	r3, r2
 8007418:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007424:	2b00      	cmp	r3, #0
 8007426:	d00a      	beq.n	800743e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007428:	4b8a      	ldr	r3, [pc, #552]	; (8007654 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800742a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800742e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007436:	4987      	ldr	r1, [pc, #540]	; (8007654 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007438:	4313      	orrs	r3, r2
 800743a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007446:	2b00      	cmp	r3, #0
 8007448:	d00a      	beq.n	8007460 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800744a:	4b82      	ldr	r3, [pc, #520]	; (8007654 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800744c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007450:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007458:	497e      	ldr	r1, [pc, #504]	; (8007654 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800745a:	4313      	orrs	r3, r2
 800745c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007468:	2b00      	cmp	r3, #0
 800746a:	d00a      	beq.n	8007482 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800746c:	4b79      	ldr	r3, [pc, #484]	; (8007654 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800746e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007472:	f023 0203 	bic.w	r2, r3, #3
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800747a:	4976      	ldr	r1, [pc, #472]	; (8007654 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800747c:	4313      	orrs	r3, r2
 800747e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800748a:	2b00      	cmp	r3, #0
 800748c:	d00a      	beq.n	80074a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800748e:	4b71      	ldr	r3, [pc, #452]	; (8007654 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007490:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007494:	f023 020c 	bic.w	r2, r3, #12
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800749c:	496d      	ldr	r1, [pc, #436]	; (8007654 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800749e:	4313      	orrs	r3, r2
 80074a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d00a      	beq.n	80074c6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80074b0:	4b68      	ldr	r3, [pc, #416]	; (8007654 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80074b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074b6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074be:	4965      	ldr	r1, [pc, #404]	; (8007654 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80074c0:	4313      	orrs	r3, r2
 80074c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d00a      	beq.n	80074e8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80074d2:	4b60      	ldr	r3, [pc, #384]	; (8007654 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80074d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074d8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074e0:	495c      	ldr	r1, [pc, #368]	; (8007654 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80074e2:	4313      	orrs	r3, r2
 80074e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d00a      	beq.n	800750a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80074f4:	4b57      	ldr	r3, [pc, #348]	; (8007654 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80074f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074fa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007502:	4954      	ldr	r1, [pc, #336]	; (8007654 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007504:	4313      	orrs	r3, r2
 8007506:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007512:	2b00      	cmp	r3, #0
 8007514:	d00a      	beq.n	800752c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8007516:	4b4f      	ldr	r3, [pc, #316]	; (8007654 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007518:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800751c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007524:	494b      	ldr	r1, [pc, #300]	; (8007654 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007526:	4313      	orrs	r3, r2
 8007528:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007534:	2b00      	cmp	r3, #0
 8007536:	d00a      	beq.n	800754e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8007538:	4b46      	ldr	r3, [pc, #280]	; (8007654 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800753a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800753e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007546:	4943      	ldr	r1, [pc, #268]	; (8007654 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007548:	4313      	orrs	r3, r2
 800754a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007556:	2b00      	cmp	r3, #0
 8007558:	d00a      	beq.n	8007570 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800755a:	4b3e      	ldr	r3, [pc, #248]	; (8007654 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800755c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007560:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007568:	493a      	ldr	r1, [pc, #232]	; (8007654 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800756a:	4313      	orrs	r3, r2
 800756c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007578:	2b00      	cmp	r3, #0
 800757a:	d00a      	beq.n	8007592 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800757c:	4b35      	ldr	r3, [pc, #212]	; (8007654 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800757e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007582:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800758a:	4932      	ldr	r1, [pc, #200]	; (8007654 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800758c:	4313      	orrs	r3, r2
 800758e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800759a:	2b00      	cmp	r3, #0
 800759c:	d011      	beq.n	80075c2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800759e:	4b2d      	ldr	r3, [pc, #180]	; (8007654 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80075a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075a4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80075ac:	4929      	ldr	r1, [pc, #164]	; (8007654 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80075ae:	4313      	orrs	r3, r2
 80075b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80075b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80075bc:	d101      	bne.n	80075c2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80075be:	2301      	movs	r3, #1
 80075c0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	f003 0308 	and.w	r3, r3, #8
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d001      	beq.n	80075d2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80075ce:	2301      	movs	r3, #1
 80075d0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d00a      	beq.n	80075f4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80075de:	4b1d      	ldr	r3, [pc, #116]	; (8007654 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80075e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075e4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80075ec:	4919      	ldr	r1, [pc, #100]	; (8007654 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80075ee:	4313      	orrs	r3, r2
 80075f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d00b      	beq.n	8007618 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007600:	4b14      	ldr	r3, [pc, #80]	; (8007654 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007602:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007606:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007610:	4910      	ldr	r1, [pc, #64]	; (8007654 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007612:	4313      	orrs	r3, r2
 8007614:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007618:	69fb      	ldr	r3, [r7, #28]
 800761a:	2b01      	cmp	r3, #1
 800761c:	d006      	beq.n	800762c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007626:	2b00      	cmp	r3, #0
 8007628:	f000 80d9 	beq.w	80077de <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800762c:	4b09      	ldr	r3, [pc, #36]	; (8007654 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	4a08      	ldr	r2, [pc, #32]	; (8007654 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007632:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007636:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007638:	f7fb ff90 	bl	800355c <HAL_GetTick>
 800763c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800763e:	e00b      	b.n	8007658 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007640:	f7fb ff8c 	bl	800355c <HAL_GetTick>
 8007644:	4602      	mov	r2, r0
 8007646:	697b      	ldr	r3, [r7, #20]
 8007648:	1ad3      	subs	r3, r2, r3
 800764a:	2b64      	cmp	r3, #100	; 0x64
 800764c:	d904      	bls.n	8007658 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800764e:	2303      	movs	r3, #3
 8007650:	e197      	b.n	8007982 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8007652:	bf00      	nop
 8007654:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007658:	4b6c      	ldr	r3, [pc, #432]	; (800780c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007660:	2b00      	cmp	r3, #0
 8007662:	d1ed      	bne.n	8007640 <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	f003 0301 	and.w	r3, r3, #1
 800766c:	2b00      	cmp	r3, #0
 800766e:	d021      	beq.n	80076b4 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007674:	2b00      	cmp	r3, #0
 8007676:	d11d      	bne.n	80076b4 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007678:	4b64      	ldr	r3, [pc, #400]	; (800780c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800767a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800767e:	0c1b      	lsrs	r3, r3, #16
 8007680:	f003 0303 	and.w	r3, r3, #3
 8007684:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007686:	4b61      	ldr	r3, [pc, #388]	; (800780c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007688:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800768c:	0e1b      	lsrs	r3, r3, #24
 800768e:	f003 030f 	and.w	r3, r3, #15
 8007692:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	685b      	ldr	r3, [r3, #4]
 8007698:	019a      	lsls	r2, r3, #6
 800769a:	693b      	ldr	r3, [r7, #16]
 800769c:	041b      	lsls	r3, r3, #16
 800769e:	431a      	orrs	r2, r3
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	061b      	lsls	r3, r3, #24
 80076a4:	431a      	orrs	r2, r3
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	689b      	ldr	r3, [r3, #8]
 80076aa:	071b      	lsls	r3, r3, #28
 80076ac:	4957      	ldr	r1, [pc, #348]	; (800780c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80076ae:	4313      	orrs	r3, r2
 80076b0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d004      	beq.n	80076ca <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80076c8:	d00a      	beq.n	80076e0 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d02e      	beq.n	8007734 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80076de:	d129      	bne.n	8007734 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80076e0:	4b4a      	ldr	r3, [pc, #296]	; (800780c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80076e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80076e6:	0c1b      	lsrs	r3, r3, #16
 80076e8:	f003 0303 	and.w	r3, r3, #3
 80076ec:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80076ee:	4b47      	ldr	r3, [pc, #284]	; (800780c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80076f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80076f4:	0f1b      	lsrs	r3, r3, #28
 80076f6:	f003 0307 	and.w	r3, r3, #7
 80076fa:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	685b      	ldr	r3, [r3, #4]
 8007700:	019a      	lsls	r2, r3, #6
 8007702:	693b      	ldr	r3, [r7, #16]
 8007704:	041b      	lsls	r3, r3, #16
 8007706:	431a      	orrs	r2, r3
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	68db      	ldr	r3, [r3, #12]
 800770c:	061b      	lsls	r3, r3, #24
 800770e:	431a      	orrs	r2, r3
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	071b      	lsls	r3, r3, #28
 8007714:	493d      	ldr	r1, [pc, #244]	; (800780c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007716:	4313      	orrs	r3, r2
 8007718:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800771c:	4b3b      	ldr	r3, [pc, #236]	; (800780c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800771e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007722:	f023 021f 	bic.w	r2, r3, #31
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800772a:	3b01      	subs	r3, #1
 800772c:	4937      	ldr	r1, [pc, #220]	; (800780c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800772e:	4313      	orrs	r3, r2
 8007730:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800773c:	2b00      	cmp	r3, #0
 800773e:	d01d      	beq.n	800777c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007740:	4b32      	ldr	r3, [pc, #200]	; (800780c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007742:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007746:	0e1b      	lsrs	r3, r3, #24
 8007748:	f003 030f 	and.w	r3, r3, #15
 800774c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800774e:	4b2f      	ldr	r3, [pc, #188]	; (800780c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007750:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007754:	0f1b      	lsrs	r3, r3, #28
 8007756:	f003 0307 	and.w	r3, r3, #7
 800775a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	685b      	ldr	r3, [r3, #4]
 8007760:	019a      	lsls	r2, r3, #6
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	691b      	ldr	r3, [r3, #16]
 8007766:	041b      	lsls	r3, r3, #16
 8007768:	431a      	orrs	r2, r3
 800776a:	693b      	ldr	r3, [r7, #16]
 800776c:	061b      	lsls	r3, r3, #24
 800776e:	431a      	orrs	r2, r3
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	071b      	lsls	r3, r3, #28
 8007774:	4925      	ldr	r1, [pc, #148]	; (800780c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007776:	4313      	orrs	r3, r2
 8007778:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007784:	2b00      	cmp	r3, #0
 8007786:	d011      	beq.n	80077ac <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	685b      	ldr	r3, [r3, #4]
 800778c:	019a      	lsls	r2, r3, #6
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	691b      	ldr	r3, [r3, #16]
 8007792:	041b      	lsls	r3, r3, #16
 8007794:	431a      	orrs	r2, r3
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	68db      	ldr	r3, [r3, #12]
 800779a:	061b      	lsls	r3, r3, #24
 800779c:	431a      	orrs	r2, r3
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	689b      	ldr	r3, [r3, #8]
 80077a2:	071b      	lsls	r3, r3, #28
 80077a4:	4919      	ldr	r1, [pc, #100]	; (800780c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80077a6:	4313      	orrs	r3, r2
 80077a8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80077ac:	4b17      	ldr	r3, [pc, #92]	; (800780c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	4a16      	ldr	r2, [pc, #88]	; (800780c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80077b2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80077b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80077b8:	f7fb fed0 	bl	800355c <HAL_GetTick>
 80077bc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80077be:	e008      	b.n	80077d2 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80077c0:	f7fb fecc 	bl	800355c <HAL_GetTick>
 80077c4:	4602      	mov	r2, r0
 80077c6:	697b      	ldr	r3, [r7, #20]
 80077c8:	1ad3      	subs	r3, r2, r3
 80077ca:	2b64      	cmp	r3, #100	; 0x64
 80077cc:	d901      	bls.n	80077d2 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80077ce:	2303      	movs	r3, #3
 80077d0:	e0d7      	b.n	8007982 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80077d2:	4b0e      	ldr	r3, [pc, #56]	; (800780c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d0f0      	beq.n	80077c0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80077de:	69bb      	ldr	r3, [r7, #24]
 80077e0:	2b01      	cmp	r3, #1
 80077e2:	f040 80cd 	bne.w	8007980 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80077e6:	4b09      	ldr	r3, [pc, #36]	; (800780c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	4a08      	ldr	r2, [pc, #32]	; (800780c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80077ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80077f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80077f2:	f7fb feb3 	bl	800355c <HAL_GetTick>
 80077f6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80077f8:	e00a      	b.n	8007810 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80077fa:	f7fb feaf 	bl	800355c <HAL_GetTick>
 80077fe:	4602      	mov	r2, r0
 8007800:	697b      	ldr	r3, [r7, #20]
 8007802:	1ad3      	subs	r3, r2, r3
 8007804:	2b64      	cmp	r3, #100	; 0x64
 8007806:	d903      	bls.n	8007810 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007808:	2303      	movs	r3, #3
 800780a:	e0ba      	b.n	8007982 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800780c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007810:	4b5e      	ldr	r3, [pc, #376]	; (800798c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007818:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800781c:	d0ed      	beq.n	80077fa <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007826:	2b00      	cmp	r3, #0
 8007828:	d003      	beq.n	8007832 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800782e:	2b00      	cmp	r3, #0
 8007830:	d009      	beq.n	8007846 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800783a:	2b00      	cmp	r3, #0
 800783c:	d02e      	beq.n	800789c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007842:	2b00      	cmp	r3, #0
 8007844:	d12a      	bne.n	800789c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007846:	4b51      	ldr	r3, [pc, #324]	; (800798c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007848:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800784c:	0c1b      	lsrs	r3, r3, #16
 800784e:	f003 0303 	and.w	r3, r3, #3
 8007852:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007854:	4b4d      	ldr	r3, [pc, #308]	; (800798c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007856:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800785a:	0f1b      	lsrs	r3, r3, #28
 800785c:	f003 0307 	and.w	r3, r3, #7
 8007860:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	695b      	ldr	r3, [r3, #20]
 8007866:	019a      	lsls	r2, r3, #6
 8007868:	693b      	ldr	r3, [r7, #16]
 800786a:	041b      	lsls	r3, r3, #16
 800786c:	431a      	orrs	r2, r3
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	699b      	ldr	r3, [r3, #24]
 8007872:	061b      	lsls	r3, r3, #24
 8007874:	431a      	orrs	r2, r3
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	071b      	lsls	r3, r3, #28
 800787a:	4944      	ldr	r1, [pc, #272]	; (800798c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800787c:	4313      	orrs	r3, r2
 800787e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007882:	4b42      	ldr	r3, [pc, #264]	; (800798c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007884:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007888:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007890:	3b01      	subs	r3, #1
 8007892:	021b      	lsls	r3, r3, #8
 8007894:	493d      	ldr	r1, [pc, #244]	; (800798c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007896:	4313      	orrs	r3, r2
 8007898:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d022      	beq.n	80078ee <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80078ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80078b0:	d11d      	bne.n	80078ee <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80078b2:	4b36      	ldr	r3, [pc, #216]	; (800798c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80078b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80078b8:	0e1b      	lsrs	r3, r3, #24
 80078ba:	f003 030f 	and.w	r3, r3, #15
 80078be:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80078c0:	4b32      	ldr	r3, [pc, #200]	; (800798c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80078c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80078c6:	0f1b      	lsrs	r3, r3, #28
 80078c8:	f003 0307 	and.w	r3, r3, #7
 80078cc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	695b      	ldr	r3, [r3, #20]
 80078d2:	019a      	lsls	r2, r3, #6
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	6a1b      	ldr	r3, [r3, #32]
 80078d8:	041b      	lsls	r3, r3, #16
 80078da:	431a      	orrs	r2, r3
 80078dc:	693b      	ldr	r3, [r7, #16]
 80078de:	061b      	lsls	r3, r3, #24
 80078e0:	431a      	orrs	r2, r3
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	071b      	lsls	r3, r3, #28
 80078e6:	4929      	ldr	r1, [pc, #164]	; (800798c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80078e8:	4313      	orrs	r3, r2
 80078ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	f003 0308 	and.w	r3, r3, #8
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d028      	beq.n	800794c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80078fa:	4b24      	ldr	r3, [pc, #144]	; (800798c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80078fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007900:	0e1b      	lsrs	r3, r3, #24
 8007902:	f003 030f 	and.w	r3, r3, #15
 8007906:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007908:	4b20      	ldr	r3, [pc, #128]	; (800798c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800790a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800790e:	0c1b      	lsrs	r3, r3, #16
 8007910:	f003 0303 	and.w	r3, r3, #3
 8007914:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	695b      	ldr	r3, [r3, #20]
 800791a:	019a      	lsls	r2, r3, #6
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	041b      	lsls	r3, r3, #16
 8007920:	431a      	orrs	r2, r3
 8007922:	693b      	ldr	r3, [r7, #16]
 8007924:	061b      	lsls	r3, r3, #24
 8007926:	431a      	orrs	r2, r3
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	69db      	ldr	r3, [r3, #28]
 800792c:	071b      	lsls	r3, r3, #28
 800792e:	4917      	ldr	r1, [pc, #92]	; (800798c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007930:	4313      	orrs	r3, r2
 8007932:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8007936:	4b15      	ldr	r3, [pc, #84]	; (800798c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007938:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800793c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007944:	4911      	ldr	r1, [pc, #68]	; (800798c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007946:	4313      	orrs	r3, r2
 8007948:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800794c:	4b0f      	ldr	r3, [pc, #60]	; (800798c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	4a0e      	ldr	r2, [pc, #56]	; (800798c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007952:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007956:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007958:	f7fb fe00 	bl	800355c <HAL_GetTick>
 800795c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800795e:	e008      	b.n	8007972 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007960:	f7fb fdfc 	bl	800355c <HAL_GetTick>
 8007964:	4602      	mov	r2, r0
 8007966:	697b      	ldr	r3, [r7, #20]
 8007968:	1ad3      	subs	r3, r2, r3
 800796a:	2b64      	cmp	r3, #100	; 0x64
 800796c:	d901      	bls.n	8007972 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800796e:	2303      	movs	r3, #3
 8007970:	e007      	b.n	8007982 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007972:	4b06      	ldr	r3, [pc, #24]	; (800798c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800797a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800797e:	d1ef      	bne.n	8007960 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8007980:	2300      	movs	r3, #0
}
 8007982:	4618      	mov	r0, r3
 8007984:	3720      	adds	r7, #32
 8007986:	46bd      	mov	sp, r7
 8007988:	bd80      	pop	{r7, pc}
 800798a:	bf00      	nop
 800798c:	40023800 	.word	0x40023800

08007990 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8007990:	b580      	push	{r7, lr}
 8007992:	b082      	sub	sp, #8
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
 8007998:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d101      	bne.n	80079a4 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80079a0:	2301      	movs	r3, #1
 80079a2:	e025      	b.n	80079f0 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80079aa:	b2db      	uxtb	r3, r3
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d106      	bne.n	80079be <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	2200      	movs	r2, #0
 80079b4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80079b8:	6878      	ldr	r0, [r7, #4]
 80079ba:	f7fb fb57 	bl	800306c <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	2202      	movs	r2, #2
 80079c2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681a      	ldr	r2, [r3, #0]
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	3304      	adds	r3, #4
 80079ce:	4619      	mov	r1, r3
 80079d0:	4610      	mov	r0, r2
 80079d2:	f000 fd4b 	bl	800846c <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	6818      	ldr	r0, [r3, #0]
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	685b      	ldr	r3, [r3, #4]
 80079de:	461a      	mov	r2, r3
 80079e0:	6839      	ldr	r1, [r7, #0]
 80079e2:	f000 fd9f 	bl	8008524 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	2201      	movs	r2, #1
 80079ea:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80079ee:	2300      	movs	r3, #0
}
 80079f0:	4618      	mov	r0, r3
 80079f2:	3708      	adds	r7, #8
 80079f4:	46bd      	mov	sp, r7
 80079f6:	bd80      	pop	{r7, pc}

080079f8 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b086      	sub	sp, #24
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	60f8      	str	r0, [r7, #12]
 8007a00:	60b9      	str	r1, [r7, #8]
 8007a02:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007a0a:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8007a0c:	7dfb      	ldrb	r3, [r7, #23]
 8007a0e:	2b02      	cmp	r3, #2
 8007a10:	d101      	bne.n	8007a16 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 8007a12:	2302      	movs	r3, #2
 8007a14:	e021      	b.n	8007a5a <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8007a16:	7dfb      	ldrb	r3, [r7, #23]
 8007a18:	2b01      	cmp	r3, #1
 8007a1a:	d002      	beq.n	8007a22 <HAL_SDRAM_SendCommand+0x2a>
 8007a1c:	7dfb      	ldrb	r3, [r7, #23]
 8007a1e:	2b05      	cmp	r3, #5
 8007a20:	d118      	bne.n	8007a54 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	2202      	movs	r2, #2
 8007a26:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	687a      	ldr	r2, [r7, #4]
 8007a30:	68b9      	ldr	r1, [r7, #8]
 8007a32:	4618      	mov	r0, r3
 8007a34:	f000 fde0 	bl	80085f8 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8007a38:	68bb      	ldr	r3, [r7, #8]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	2b02      	cmp	r3, #2
 8007a3e:	d104      	bne.n	8007a4a <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	2205      	movs	r2, #5
 8007a44:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8007a48:	e006      	b.n	8007a58 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	2201      	movs	r2, #1
 8007a4e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8007a52:	e001      	b.n	8007a58 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8007a54:	2301      	movs	r3, #1
 8007a56:	e000      	b.n	8007a5a <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8007a58:	2300      	movs	r3, #0
}
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	3718      	adds	r7, #24
 8007a5e:	46bd      	mov	sp, r7
 8007a60:	bd80      	pop	{r7, pc}

08007a62 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8007a62:	b580      	push	{r7, lr}
 8007a64:	b082      	sub	sp, #8
 8007a66:	af00      	add	r7, sp, #0
 8007a68:	6078      	str	r0, [r7, #4]
 8007a6a:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007a72:	b2db      	uxtb	r3, r3
 8007a74:	2b02      	cmp	r3, #2
 8007a76:	d101      	bne.n	8007a7c <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8007a78:	2302      	movs	r3, #2
 8007a7a:	e016      	b.n	8007aaa <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007a82:	b2db      	uxtb	r3, r3
 8007a84:	2b01      	cmp	r3, #1
 8007a86:	d10f      	bne.n	8007aa8 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	2202      	movs	r2, #2
 8007a8c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	6839      	ldr	r1, [r7, #0]
 8007a96:	4618      	mov	r0, r3
 8007a98:	f000 fdd2 	bl	8008640 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	2201      	movs	r2, #1
 8007aa0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	e000      	b.n	8007aaa <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8007aa8:	2301      	movs	r3, #1
}
 8007aaa:	4618      	mov	r0, r3
 8007aac:	3708      	adds	r7, #8
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	bd80      	pop	{r7, pc}

08007ab2 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007ab2:	b580      	push	{r7, lr}
 8007ab4:	b082      	sub	sp, #8
 8007ab6:	af00      	add	r7, sp, #0
 8007ab8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d101      	bne.n	8007ac4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007ac0:	2301      	movs	r3, #1
 8007ac2:	e040      	b.n	8007b46 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d106      	bne.n	8007ada <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	2200      	movs	r2, #0
 8007ad0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007ad4:	6878      	ldr	r0, [r7, #4]
 8007ad6:	f7fb f9b7 	bl	8002e48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	2224      	movs	r2, #36	; 0x24
 8007ade:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	681a      	ldr	r2, [r3, #0]
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	f022 0201 	bic.w	r2, r2, #1
 8007aee:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007af0:	6878      	ldr	r0, [r7, #4]
 8007af2:	f000 f8bf 	bl	8007c74 <UART_SetConfig>
 8007af6:	4603      	mov	r3, r0
 8007af8:	2b01      	cmp	r3, #1
 8007afa:	d101      	bne.n	8007b00 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007afc:	2301      	movs	r3, #1
 8007afe:	e022      	b.n	8007b46 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d002      	beq.n	8007b0e <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8007b08:	6878      	ldr	r0, [r7, #4]
 8007b0a:	f000 fb15 	bl	8008138 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	685a      	ldr	r2, [r3, #4]
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007b1c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	689a      	ldr	r2, [r3, #8]
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007b2c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	681a      	ldr	r2, [r3, #0]
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	f042 0201 	orr.w	r2, r2, #1
 8007b3c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007b3e:	6878      	ldr	r0, [r7, #4]
 8007b40:	f000 fb9c 	bl	800827c <UART_CheckIdleState>
 8007b44:	4603      	mov	r3, r0
}
 8007b46:	4618      	mov	r0, r3
 8007b48:	3708      	adds	r7, #8
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	bd80      	pop	{r7, pc}

08007b4e <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007b4e:	b580      	push	{r7, lr}
 8007b50:	b08a      	sub	sp, #40	; 0x28
 8007b52:	af02      	add	r7, sp, #8
 8007b54:	60f8      	str	r0, [r7, #12]
 8007b56:	60b9      	str	r1, [r7, #8]
 8007b58:	603b      	str	r3, [r7, #0]
 8007b5a:	4613      	mov	r3, r2
 8007b5c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007b62:	2b20      	cmp	r3, #32
 8007b64:	f040 8081 	bne.w	8007c6a <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007b68:	68bb      	ldr	r3, [r7, #8]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d002      	beq.n	8007b74 <HAL_UART_Transmit+0x26>
 8007b6e:	88fb      	ldrh	r3, [r7, #6]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d101      	bne.n	8007b78 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007b74:	2301      	movs	r3, #1
 8007b76:	e079      	b.n	8007c6c <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8007b7e:	2b01      	cmp	r3, #1
 8007b80:	d101      	bne.n	8007b86 <HAL_UART_Transmit+0x38>
 8007b82:	2302      	movs	r3, #2
 8007b84:	e072      	b.n	8007c6c <HAL_UART_Transmit+0x11e>
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	2201      	movs	r2, #1
 8007b8a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	2200      	movs	r2, #0
 8007b92:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	2221      	movs	r2, #33	; 0x21
 8007b9a:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007b9c:	f7fb fcde 	bl	800355c <HAL_GetTick>
 8007ba0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	88fa      	ldrh	r2, [r7, #6]
 8007ba6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	88fa      	ldrh	r2, [r7, #6]
 8007bae:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	689b      	ldr	r3, [r3, #8]
 8007bb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007bba:	d108      	bne.n	8007bce <HAL_UART_Transmit+0x80>
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	691b      	ldr	r3, [r3, #16]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d104      	bne.n	8007bce <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007bc8:	68bb      	ldr	r3, [r7, #8]
 8007bca:	61bb      	str	r3, [r7, #24]
 8007bcc:	e003      	b.n	8007bd6 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8007bce:	68bb      	ldr	r3, [r7, #8]
 8007bd0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	2200      	movs	r2, #0
 8007bda:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8007bde:	e02c      	b.n	8007c3a <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007be0:	683b      	ldr	r3, [r7, #0]
 8007be2:	9300      	str	r3, [sp, #0]
 8007be4:	697b      	ldr	r3, [r7, #20]
 8007be6:	2200      	movs	r2, #0
 8007be8:	2180      	movs	r1, #128	; 0x80
 8007bea:	68f8      	ldr	r0, [r7, #12]
 8007bec:	f000 fb79 	bl	80082e2 <UART_WaitOnFlagUntilTimeout>
 8007bf0:	4603      	mov	r3, r0
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d001      	beq.n	8007bfa <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8007bf6:	2303      	movs	r3, #3
 8007bf8:	e038      	b.n	8007c6c <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8007bfa:	69fb      	ldr	r3, [r7, #28]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d10b      	bne.n	8007c18 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007c00:	69bb      	ldr	r3, [r7, #24]
 8007c02:	881b      	ldrh	r3, [r3, #0]
 8007c04:	461a      	mov	r2, r3
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007c0e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007c10:	69bb      	ldr	r3, [r7, #24]
 8007c12:	3302      	adds	r3, #2
 8007c14:	61bb      	str	r3, [r7, #24]
 8007c16:	e007      	b.n	8007c28 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007c18:	69fb      	ldr	r3, [r7, #28]
 8007c1a:	781a      	ldrb	r2, [r3, #0]
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007c22:	69fb      	ldr	r3, [r7, #28]
 8007c24:	3301      	adds	r3, #1
 8007c26:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007c2e:	b29b      	uxth	r3, r3
 8007c30:	3b01      	subs	r3, #1
 8007c32:	b29a      	uxth	r2, r3
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007c40:	b29b      	uxth	r3, r3
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d1cc      	bne.n	8007be0 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007c46:	683b      	ldr	r3, [r7, #0]
 8007c48:	9300      	str	r3, [sp, #0]
 8007c4a:	697b      	ldr	r3, [r7, #20]
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	2140      	movs	r1, #64	; 0x40
 8007c50:	68f8      	ldr	r0, [r7, #12]
 8007c52:	f000 fb46 	bl	80082e2 <UART_WaitOnFlagUntilTimeout>
 8007c56:	4603      	mov	r3, r0
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d001      	beq.n	8007c60 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8007c5c:	2303      	movs	r3, #3
 8007c5e:	e005      	b.n	8007c6c <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	2220      	movs	r2, #32
 8007c64:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8007c66:	2300      	movs	r3, #0
 8007c68:	e000      	b.n	8007c6c <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8007c6a:	2302      	movs	r3, #2
  }
}
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	3720      	adds	r7, #32
 8007c70:	46bd      	mov	sp, r7
 8007c72:	bd80      	pop	{r7, pc}

08007c74 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007c74:	b580      	push	{r7, lr}
 8007c76:	b088      	sub	sp, #32
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	689a      	ldr	r2, [r3, #8]
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	691b      	ldr	r3, [r3, #16]
 8007c88:	431a      	orrs	r2, r3
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	695b      	ldr	r3, [r3, #20]
 8007c8e:	431a      	orrs	r2, r3
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	69db      	ldr	r3, [r3, #28]
 8007c94:	4313      	orrs	r3, r2
 8007c96:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	681a      	ldr	r2, [r3, #0]
 8007c9e:	4ba7      	ldr	r3, [pc, #668]	; (8007f3c <UART_SetConfig+0x2c8>)
 8007ca0:	4013      	ands	r3, r2
 8007ca2:	687a      	ldr	r2, [r7, #4]
 8007ca4:	6812      	ldr	r2, [r2, #0]
 8007ca6:	6979      	ldr	r1, [r7, #20]
 8007ca8:	430b      	orrs	r3, r1
 8007caa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	685b      	ldr	r3, [r3, #4]
 8007cb2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	68da      	ldr	r2, [r3, #12]
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	430a      	orrs	r2, r1
 8007cc0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	699b      	ldr	r3, [r3, #24]
 8007cc6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	6a1b      	ldr	r3, [r3, #32]
 8007ccc:	697a      	ldr	r2, [r7, #20]
 8007cce:	4313      	orrs	r3, r2
 8007cd0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	689b      	ldr	r3, [r3, #8]
 8007cd8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	697a      	ldr	r2, [r7, #20]
 8007ce2:	430a      	orrs	r2, r1
 8007ce4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	4a95      	ldr	r2, [pc, #596]	; (8007f40 <UART_SetConfig+0x2cc>)
 8007cec:	4293      	cmp	r3, r2
 8007cee:	d120      	bne.n	8007d32 <UART_SetConfig+0xbe>
 8007cf0:	4b94      	ldr	r3, [pc, #592]	; (8007f44 <UART_SetConfig+0x2d0>)
 8007cf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cf6:	f003 0303 	and.w	r3, r3, #3
 8007cfa:	2b03      	cmp	r3, #3
 8007cfc:	d816      	bhi.n	8007d2c <UART_SetConfig+0xb8>
 8007cfe:	a201      	add	r2, pc, #4	; (adr r2, 8007d04 <UART_SetConfig+0x90>)
 8007d00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d04:	08007d15 	.word	0x08007d15
 8007d08:	08007d21 	.word	0x08007d21
 8007d0c:	08007d1b 	.word	0x08007d1b
 8007d10:	08007d27 	.word	0x08007d27
 8007d14:	2301      	movs	r3, #1
 8007d16:	77fb      	strb	r3, [r7, #31]
 8007d18:	e14f      	b.n	8007fba <UART_SetConfig+0x346>
 8007d1a:	2302      	movs	r3, #2
 8007d1c:	77fb      	strb	r3, [r7, #31]
 8007d1e:	e14c      	b.n	8007fba <UART_SetConfig+0x346>
 8007d20:	2304      	movs	r3, #4
 8007d22:	77fb      	strb	r3, [r7, #31]
 8007d24:	e149      	b.n	8007fba <UART_SetConfig+0x346>
 8007d26:	2308      	movs	r3, #8
 8007d28:	77fb      	strb	r3, [r7, #31]
 8007d2a:	e146      	b.n	8007fba <UART_SetConfig+0x346>
 8007d2c:	2310      	movs	r3, #16
 8007d2e:	77fb      	strb	r3, [r7, #31]
 8007d30:	e143      	b.n	8007fba <UART_SetConfig+0x346>
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	4a84      	ldr	r2, [pc, #528]	; (8007f48 <UART_SetConfig+0x2d4>)
 8007d38:	4293      	cmp	r3, r2
 8007d3a:	d132      	bne.n	8007da2 <UART_SetConfig+0x12e>
 8007d3c:	4b81      	ldr	r3, [pc, #516]	; (8007f44 <UART_SetConfig+0x2d0>)
 8007d3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d42:	f003 030c 	and.w	r3, r3, #12
 8007d46:	2b0c      	cmp	r3, #12
 8007d48:	d828      	bhi.n	8007d9c <UART_SetConfig+0x128>
 8007d4a:	a201      	add	r2, pc, #4	; (adr r2, 8007d50 <UART_SetConfig+0xdc>)
 8007d4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d50:	08007d85 	.word	0x08007d85
 8007d54:	08007d9d 	.word	0x08007d9d
 8007d58:	08007d9d 	.word	0x08007d9d
 8007d5c:	08007d9d 	.word	0x08007d9d
 8007d60:	08007d91 	.word	0x08007d91
 8007d64:	08007d9d 	.word	0x08007d9d
 8007d68:	08007d9d 	.word	0x08007d9d
 8007d6c:	08007d9d 	.word	0x08007d9d
 8007d70:	08007d8b 	.word	0x08007d8b
 8007d74:	08007d9d 	.word	0x08007d9d
 8007d78:	08007d9d 	.word	0x08007d9d
 8007d7c:	08007d9d 	.word	0x08007d9d
 8007d80:	08007d97 	.word	0x08007d97
 8007d84:	2300      	movs	r3, #0
 8007d86:	77fb      	strb	r3, [r7, #31]
 8007d88:	e117      	b.n	8007fba <UART_SetConfig+0x346>
 8007d8a:	2302      	movs	r3, #2
 8007d8c:	77fb      	strb	r3, [r7, #31]
 8007d8e:	e114      	b.n	8007fba <UART_SetConfig+0x346>
 8007d90:	2304      	movs	r3, #4
 8007d92:	77fb      	strb	r3, [r7, #31]
 8007d94:	e111      	b.n	8007fba <UART_SetConfig+0x346>
 8007d96:	2308      	movs	r3, #8
 8007d98:	77fb      	strb	r3, [r7, #31]
 8007d9a:	e10e      	b.n	8007fba <UART_SetConfig+0x346>
 8007d9c:	2310      	movs	r3, #16
 8007d9e:	77fb      	strb	r3, [r7, #31]
 8007da0:	e10b      	b.n	8007fba <UART_SetConfig+0x346>
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	4a69      	ldr	r2, [pc, #420]	; (8007f4c <UART_SetConfig+0x2d8>)
 8007da8:	4293      	cmp	r3, r2
 8007daa:	d120      	bne.n	8007dee <UART_SetConfig+0x17a>
 8007dac:	4b65      	ldr	r3, [pc, #404]	; (8007f44 <UART_SetConfig+0x2d0>)
 8007dae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007db2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007db6:	2b30      	cmp	r3, #48	; 0x30
 8007db8:	d013      	beq.n	8007de2 <UART_SetConfig+0x16e>
 8007dba:	2b30      	cmp	r3, #48	; 0x30
 8007dbc:	d814      	bhi.n	8007de8 <UART_SetConfig+0x174>
 8007dbe:	2b20      	cmp	r3, #32
 8007dc0:	d009      	beq.n	8007dd6 <UART_SetConfig+0x162>
 8007dc2:	2b20      	cmp	r3, #32
 8007dc4:	d810      	bhi.n	8007de8 <UART_SetConfig+0x174>
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d002      	beq.n	8007dd0 <UART_SetConfig+0x15c>
 8007dca:	2b10      	cmp	r3, #16
 8007dcc:	d006      	beq.n	8007ddc <UART_SetConfig+0x168>
 8007dce:	e00b      	b.n	8007de8 <UART_SetConfig+0x174>
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	77fb      	strb	r3, [r7, #31]
 8007dd4:	e0f1      	b.n	8007fba <UART_SetConfig+0x346>
 8007dd6:	2302      	movs	r3, #2
 8007dd8:	77fb      	strb	r3, [r7, #31]
 8007dda:	e0ee      	b.n	8007fba <UART_SetConfig+0x346>
 8007ddc:	2304      	movs	r3, #4
 8007dde:	77fb      	strb	r3, [r7, #31]
 8007de0:	e0eb      	b.n	8007fba <UART_SetConfig+0x346>
 8007de2:	2308      	movs	r3, #8
 8007de4:	77fb      	strb	r3, [r7, #31]
 8007de6:	e0e8      	b.n	8007fba <UART_SetConfig+0x346>
 8007de8:	2310      	movs	r3, #16
 8007dea:	77fb      	strb	r3, [r7, #31]
 8007dec:	e0e5      	b.n	8007fba <UART_SetConfig+0x346>
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	4a57      	ldr	r2, [pc, #348]	; (8007f50 <UART_SetConfig+0x2dc>)
 8007df4:	4293      	cmp	r3, r2
 8007df6:	d120      	bne.n	8007e3a <UART_SetConfig+0x1c6>
 8007df8:	4b52      	ldr	r3, [pc, #328]	; (8007f44 <UART_SetConfig+0x2d0>)
 8007dfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007dfe:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007e02:	2bc0      	cmp	r3, #192	; 0xc0
 8007e04:	d013      	beq.n	8007e2e <UART_SetConfig+0x1ba>
 8007e06:	2bc0      	cmp	r3, #192	; 0xc0
 8007e08:	d814      	bhi.n	8007e34 <UART_SetConfig+0x1c0>
 8007e0a:	2b80      	cmp	r3, #128	; 0x80
 8007e0c:	d009      	beq.n	8007e22 <UART_SetConfig+0x1ae>
 8007e0e:	2b80      	cmp	r3, #128	; 0x80
 8007e10:	d810      	bhi.n	8007e34 <UART_SetConfig+0x1c0>
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d002      	beq.n	8007e1c <UART_SetConfig+0x1a8>
 8007e16:	2b40      	cmp	r3, #64	; 0x40
 8007e18:	d006      	beq.n	8007e28 <UART_SetConfig+0x1b4>
 8007e1a:	e00b      	b.n	8007e34 <UART_SetConfig+0x1c0>
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	77fb      	strb	r3, [r7, #31]
 8007e20:	e0cb      	b.n	8007fba <UART_SetConfig+0x346>
 8007e22:	2302      	movs	r3, #2
 8007e24:	77fb      	strb	r3, [r7, #31]
 8007e26:	e0c8      	b.n	8007fba <UART_SetConfig+0x346>
 8007e28:	2304      	movs	r3, #4
 8007e2a:	77fb      	strb	r3, [r7, #31]
 8007e2c:	e0c5      	b.n	8007fba <UART_SetConfig+0x346>
 8007e2e:	2308      	movs	r3, #8
 8007e30:	77fb      	strb	r3, [r7, #31]
 8007e32:	e0c2      	b.n	8007fba <UART_SetConfig+0x346>
 8007e34:	2310      	movs	r3, #16
 8007e36:	77fb      	strb	r3, [r7, #31]
 8007e38:	e0bf      	b.n	8007fba <UART_SetConfig+0x346>
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	4a45      	ldr	r2, [pc, #276]	; (8007f54 <UART_SetConfig+0x2e0>)
 8007e40:	4293      	cmp	r3, r2
 8007e42:	d125      	bne.n	8007e90 <UART_SetConfig+0x21c>
 8007e44:	4b3f      	ldr	r3, [pc, #252]	; (8007f44 <UART_SetConfig+0x2d0>)
 8007e46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007e4e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007e52:	d017      	beq.n	8007e84 <UART_SetConfig+0x210>
 8007e54:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007e58:	d817      	bhi.n	8007e8a <UART_SetConfig+0x216>
 8007e5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e5e:	d00b      	beq.n	8007e78 <UART_SetConfig+0x204>
 8007e60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e64:	d811      	bhi.n	8007e8a <UART_SetConfig+0x216>
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d003      	beq.n	8007e72 <UART_SetConfig+0x1fe>
 8007e6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e6e:	d006      	beq.n	8007e7e <UART_SetConfig+0x20a>
 8007e70:	e00b      	b.n	8007e8a <UART_SetConfig+0x216>
 8007e72:	2300      	movs	r3, #0
 8007e74:	77fb      	strb	r3, [r7, #31]
 8007e76:	e0a0      	b.n	8007fba <UART_SetConfig+0x346>
 8007e78:	2302      	movs	r3, #2
 8007e7a:	77fb      	strb	r3, [r7, #31]
 8007e7c:	e09d      	b.n	8007fba <UART_SetConfig+0x346>
 8007e7e:	2304      	movs	r3, #4
 8007e80:	77fb      	strb	r3, [r7, #31]
 8007e82:	e09a      	b.n	8007fba <UART_SetConfig+0x346>
 8007e84:	2308      	movs	r3, #8
 8007e86:	77fb      	strb	r3, [r7, #31]
 8007e88:	e097      	b.n	8007fba <UART_SetConfig+0x346>
 8007e8a:	2310      	movs	r3, #16
 8007e8c:	77fb      	strb	r3, [r7, #31]
 8007e8e:	e094      	b.n	8007fba <UART_SetConfig+0x346>
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	4a30      	ldr	r2, [pc, #192]	; (8007f58 <UART_SetConfig+0x2e4>)
 8007e96:	4293      	cmp	r3, r2
 8007e98:	d125      	bne.n	8007ee6 <UART_SetConfig+0x272>
 8007e9a:	4b2a      	ldr	r3, [pc, #168]	; (8007f44 <UART_SetConfig+0x2d0>)
 8007e9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ea0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007ea4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007ea8:	d017      	beq.n	8007eda <UART_SetConfig+0x266>
 8007eaa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007eae:	d817      	bhi.n	8007ee0 <UART_SetConfig+0x26c>
 8007eb0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007eb4:	d00b      	beq.n	8007ece <UART_SetConfig+0x25a>
 8007eb6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007eba:	d811      	bhi.n	8007ee0 <UART_SetConfig+0x26c>
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d003      	beq.n	8007ec8 <UART_SetConfig+0x254>
 8007ec0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ec4:	d006      	beq.n	8007ed4 <UART_SetConfig+0x260>
 8007ec6:	e00b      	b.n	8007ee0 <UART_SetConfig+0x26c>
 8007ec8:	2301      	movs	r3, #1
 8007eca:	77fb      	strb	r3, [r7, #31]
 8007ecc:	e075      	b.n	8007fba <UART_SetConfig+0x346>
 8007ece:	2302      	movs	r3, #2
 8007ed0:	77fb      	strb	r3, [r7, #31]
 8007ed2:	e072      	b.n	8007fba <UART_SetConfig+0x346>
 8007ed4:	2304      	movs	r3, #4
 8007ed6:	77fb      	strb	r3, [r7, #31]
 8007ed8:	e06f      	b.n	8007fba <UART_SetConfig+0x346>
 8007eda:	2308      	movs	r3, #8
 8007edc:	77fb      	strb	r3, [r7, #31]
 8007ede:	e06c      	b.n	8007fba <UART_SetConfig+0x346>
 8007ee0:	2310      	movs	r3, #16
 8007ee2:	77fb      	strb	r3, [r7, #31]
 8007ee4:	e069      	b.n	8007fba <UART_SetConfig+0x346>
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	4a1c      	ldr	r2, [pc, #112]	; (8007f5c <UART_SetConfig+0x2e8>)
 8007eec:	4293      	cmp	r3, r2
 8007eee:	d137      	bne.n	8007f60 <UART_SetConfig+0x2ec>
 8007ef0:	4b14      	ldr	r3, [pc, #80]	; (8007f44 <UART_SetConfig+0x2d0>)
 8007ef2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ef6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007efa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007efe:	d017      	beq.n	8007f30 <UART_SetConfig+0x2bc>
 8007f00:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007f04:	d817      	bhi.n	8007f36 <UART_SetConfig+0x2c2>
 8007f06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f0a:	d00b      	beq.n	8007f24 <UART_SetConfig+0x2b0>
 8007f0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f10:	d811      	bhi.n	8007f36 <UART_SetConfig+0x2c2>
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d003      	beq.n	8007f1e <UART_SetConfig+0x2aa>
 8007f16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f1a:	d006      	beq.n	8007f2a <UART_SetConfig+0x2b6>
 8007f1c:	e00b      	b.n	8007f36 <UART_SetConfig+0x2c2>
 8007f1e:	2300      	movs	r3, #0
 8007f20:	77fb      	strb	r3, [r7, #31]
 8007f22:	e04a      	b.n	8007fba <UART_SetConfig+0x346>
 8007f24:	2302      	movs	r3, #2
 8007f26:	77fb      	strb	r3, [r7, #31]
 8007f28:	e047      	b.n	8007fba <UART_SetConfig+0x346>
 8007f2a:	2304      	movs	r3, #4
 8007f2c:	77fb      	strb	r3, [r7, #31]
 8007f2e:	e044      	b.n	8007fba <UART_SetConfig+0x346>
 8007f30:	2308      	movs	r3, #8
 8007f32:	77fb      	strb	r3, [r7, #31]
 8007f34:	e041      	b.n	8007fba <UART_SetConfig+0x346>
 8007f36:	2310      	movs	r3, #16
 8007f38:	77fb      	strb	r3, [r7, #31]
 8007f3a:	e03e      	b.n	8007fba <UART_SetConfig+0x346>
 8007f3c:	efff69f3 	.word	0xefff69f3
 8007f40:	40011000 	.word	0x40011000
 8007f44:	40023800 	.word	0x40023800
 8007f48:	40004400 	.word	0x40004400
 8007f4c:	40004800 	.word	0x40004800
 8007f50:	40004c00 	.word	0x40004c00
 8007f54:	40005000 	.word	0x40005000
 8007f58:	40011400 	.word	0x40011400
 8007f5c:	40007800 	.word	0x40007800
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	4a71      	ldr	r2, [pc, #452]	; (800812c <UART_SetConfig+0x4b8>)
 8007f66:	4293      	cmp	r3, r2
 8007f68:	d125      	bne.n	8007fb6 <UART_SetConfig+0x342>
 8007f6a:	4b71      	ldr	r3, [pc, #452]	; (8008130 <UART_SetConfig+0x4bc>)
 8007f6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f70:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007f74:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007f78:	d017      	beq.n	8007faa <UART_SetConfig+0x336>
 8007f7a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007f7e:	d817      	bhi.n	8007fb0 <UART_SetConfig+0x33c>
 8007f80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007f84:	d00b      	beq.n	8007f9e <UART_SetConfig+0x32a>
 8007f86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007f8a:	d811      	bhi.n	8007fb0 <UART_SetConfig+0x33c>
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d003      	beq.n	8007f98 <UART_SetConfig+0x324>
 8007f90:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007f94:	d006      	beq.n	8007fa4 <UART_SetConfig+0x330>
 8007f96:	e00b      	b.n	8007fb0 <UART_SetConfig+0x33c>
 8007f98:	2300      	movs	r3, #0
 8007f9a:	77fb      	strb	r3, [r7, #31]
 8007f9c:	e00d      	b.n	8007fba <UART_SetConfig+0x346>
 8007f9e:	2302      	movs	r3, #2
 8007fa0:	77fb      	strb	r3, [r7, #31]
 8007fa2:	e00a      	b.n	8007fba <UART_SetConfig+0x346>
 8007fa4:	2304      	movs	r3, #4
 8007fa6:	77fb      	strb	r3, [r7, #31]
 8007fa8:	e007      	b.n	8007fba <UART_SetConfig+0x346>
 8007faa:	2308      	movs	r3, #8
 8007fac:	77fb      	strb	r3, [r7, #31]
 8007fae:	e004      	b.n	8007fba <UART_SetConfig+0x346>
 8007fb0:	2310      	movs	r3, #16
 8007fb2:	77fb      	strb	r3, [r7, #31]
 8007fb4:	e001      	b.n	8007fba <UART_SetConfig+0x346>
 8007fb6:	2310      	movs	r3, #16
 8007fb8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	69db      	ldr	r3, [r3, #28]
 8007fbe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007fc2:	d15a      	bne.n	800807a <UART_SetConfig+0x406>
  {
    switch (clocksource)
 8007fc4:	7ffb      	ldrb	r3, [r7, #31]
 8007fc6:	2b08      	cmp	r3, #8
 8007fc8:	d827      	bhi.n	800801a <UART_SetConfig+0x3a6>
 8007fca:	a201      	add	r2, pc, #4	; (adr r2, 8007fd0 <UART_SetConfig+0x35c>)
 8007fcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fd0:	08007ff5 	.word	0x08007ff5
 8007fd4:	08007ffd 	.word	0x08007ffd
 8007fd8:	08008005 	.word	0x08008005
 8007fdc:	0800801b 	.word	0x0800801b
 8007fe0:	0800800b 	.word	0x0800800b
 8007fe4:	0800801b 	.word	0x0800801b
 8007fe8:	0800801b 	.word	0x0800801b
 8007fec:	0800801b 	.word	0x0800801b
 8007ff0:	08008013 	.word	0x08008013
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007ff4:	f7ff f8b4 	bl	8007160 <HAL_RCC_GetPCLK1Freq>
 8007ff8:	61b8      	str	r0, [r7, #24]
        break;
 8007ffa:	e013      	b.n	8008024 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007ffc:	f7ff f8c4 	bl	8007188 <HAL_RCC_GetPCLK2Freq>
 8008000:	61b8      	str	r0, [r7, #24]
        break;
 8008002:	e00f      	b.n	8008024 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008004:	4b4b      	ldr	r3, [pc, #300]	; (8008134 <UART_SetConfig+0x4c0>)
 8008006:	61bb      	str	r3, [r7, #24]
        break;
 8008008:	e00c      	b.n	8008024 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800800a:	f7fe ffe7 	bl	8006fdc <HAL_RCC_GetSysClockFreq>
 800800e:	61b8      	str	r0, [r7, #24]
        break;
 8008010:	e008      	b.n	8008024 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008012:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008016:	61bb      	str	r3, [r7, #24]
        break;
 8008018:	e004      	b.n	8008024 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 800801a:	2300      	movs	r3, #0
 800801c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800801e:	2301      	movs	r3, #1
 8008020:	77bb      	strb	r3, [r7, #30]
        break;
 8008022:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008024:	69bb      	ldr	r3, [r7, #24]
 8008026:	2b00      	cmp	r3, #0
 8008028:	d074      	beq.n	8008114 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800802a:	69bb      	ldr	r3, [r7, #24]
 800802c:	005a      	lsls	r2, r3, #1
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	685b      	ldr	r3, [r3, #4]
 8008032:	085b      	lsrs	r3, r3, #1
 8008034:	441a      	add	r2, r3
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	685b      	ldr	r3, [r3, #4]
 800803a:	fbb2 f3f3 	udiv	r3, r2, r3
 800803e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008040:	693b      	ldr	r3, [r7, #16]
 8008042:	2b0f      	cmp	r3, #15
 8008044:	d916      	bls.n	8008074 <UART_SetConfig+0x400>
 8008046:	693b      	ldr	r3, [r7, #16]
 8008048:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800804c:	d212      	bcs.n	8008074 <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800804e:	693b      	ldr	r3, [r7, #16]
 8008050:	b29b      	uxth	r3, r3
 8008052:	f023 030f 	bic.w	r3, r3, #15
 8008056:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008058:	693b      	ldr	r3, [r7, #16]
 800805a:	085b      	lsrs	r3, r3, #1
 800805c:	b29b      	uxth	r3, r3
 800805e:	f003 0307 	and.w	r3, r3, #7
 8008062:	b29a      	uxth	r2, r3
 8008064:	89fb      	ldrh	r3, [r7, #14]
 8008066:	4313      	orrs	r3, r2
 8008068:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	89fa      	ldrh	r2, [r7, #14]
 8008070:	60da      	str	r2, [r3, #12]
 8008072:	e04f      	b.n	8008114 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8008074:	2301      	movs	r3, #1
 8008076:	77bb      	strb	r3, [r7, #30]
 8008078:	e04c      	b.n	8008114 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 800807a:	7ffb      	ldrb	r3, [r7, #31]
 800807c:	2b08      	cmp	r3, #8
 800807e:	d828      	bhi.n	80080d2 <UART_SetConfig+0x45e>
 8008080:	a201      	add	r2, pc, #4	; (adr r2, 8008088 <UART_SetConfig+0x414>)
 8008082:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008086:	bf00      	nop
 8008088:	080080ad 	.word	0x080080ad
 800808c:	080080b5 	.word	0x080080b5
 8008090:	080080bd 	.word	0x080080bd
 8008094:	080080d3 	.word	0x080080d3
 8008098:	080080c3 	.word	0x080080c3
 800809c:	080080d3 	.word	0x080080d3
 80080a0:	080080d3 	.word	0x080080d3
 80080a4:	080080d3 	.word	0x080080d3
 80080a8:	080080cb 	.word	0x080080cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80080ac:	f7ff f858 	bl	8007160 <HAL_RCC_GetPCLK1Freq>
 80080b0:	61b8      	str	r0, [r7, #24]
        break;
 80080b2:	e013      	b.n	80080dc <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80080b4:	f7ff f868 	bl	8007188 <HAL_RCC_GetPCLK2Freq>
 80080b8:	61b8      	str	r0, [r7, #24]
        break;
 80080ba:	e00f      	b.n	80080dc <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80080bc:	4b1d      	ldr	r3, [pc, #116]	; (8008134 <UART_SetConfig+0x4c0>)
 80080be:	61bb      	str	r3, [r7, #24]
        break;
 80080c0:	e00c      	b.n	80080dc <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80080c2:	f7fe ff8b 	bl	8006fdc <HAL_RCC_GetSysClockFreq>
 80080c6:	61b8      	str	r0, [r7, #24]
        break;
 80080c8:	e008      	b.n	80080dc <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80080ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80080ce:	61bb      	str	r3, [r7, #24]
        break;
 80080d0:	e004      	b.n	80080dc <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 80080d2:	2300      	movs	r3, #0
 80080d4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80080d6:	2301      	movs	r3, #1
 80080d8:	77bb      	strb	r3, [r7, #30]
        break;
 80080da:	bf00      	nop
    }

    if (pclk != 0U)
 80080dc:	69bb      	ldr	r3, [r7, #24]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d018      	beq.n	8008114 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	685b      	ldr	r3, [r3, #4]
 80080e6:	085a      	lsrs	r2, r3, #1
 80080e8:	69bb      	ldr	r3, [r7, #24]
 80080ea:	441a      	add	r2, r3
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	685b      	ldr	r3, [r3, #4]
 80080f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80080f4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80080f6:	693b      	ldr	r3, [r7, #16]
 80080f8:	2b0f      	cmp	r3, #15
 80080fa:	d909      	bls.n	8008110 <UART_SetConfig+0x49c>
 80080fc:	693b      	ldr	r3, [r7, #16]
 80080fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008102:	d205      	bcs.n	8008110 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008104:	693b      	ldr	r3, [r7, #16]
 8008106:	b29a      	uxth	r2, r3
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	60da      	str	r2, [r3, #12]
 800810e:	e001      	b.n	8008114 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8008110:	2301      	movs	r3, #1
 8008112:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2200      	movs	r2, #0
 8008118:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	2200      	movs	r2, #0
 800811e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8008120:	7fbb      	ldrb	r3, [r7, #30]
}
 8008122:	4618      	mov	r0, r3
 8008124:	3720      	adds	r7, #32
 8008126:	46bd      	mov	sp, r7
 8008128:	bd80      	pop	{r7, pc}
 800812a:	bf00      	nop
 800812c:	40007c00 	.word	0x40007c00
 8008130:	40023800 	.word	0x40023800
 8008134:	00f42400 	.word	0x00f42400

08008138 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008138:	b480      	push	{r7}
 800813a:	b083      	sub	sp, #12
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008144:	f003 0301 	and.w	r3, r3, #1
 8008148:	2b00      	cmp	r3, #0
 800814a:	d00a      	beq.n	8008162 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	685b      	ldr	r3, [r3, #4]
 8008152:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	430a      	orrs	r2, r1
 8008160:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008166:	f003 0302 	and.w	r3, r3, #2
 800816a:	2b00      	cmp	r3, #0
 800816c:	d00a      	beq.n	8008184 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	685b      	ldr	r3, [r3, #4]
 8008174:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	430a      	orrs	r2, r1
 8008182:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008188:	f003 0304 	and.w	r3, r3, #4
 800818c:	2b00      	cmp	r3, #0
 800818e:	d00a      	beq.n	80081a6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	685b      	ldr	r3, [r3, #4]
 8008196:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	430a      	orrs	r2, r1
 80081a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081aa:	f003 0308 	and.w	r3, r3, #8
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d00a      	beq.n	80081c8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	685b      	ldr	r3, [r3, #4]
 80081b8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	430a      	orrs	r2, r1
 80081c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081cc:	f003 0310 	and.w	r3, r3, #16
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d00a      	beq.n	80081ea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	689b      	ldr	r3, [r3, #8]
 80081da:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	430a      	orrs	r2, r1
 80081e8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081ee:	f003 0320 	and.w	r3, r3, #32
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d00a      	beq.n	800820c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	689b      	ldr	r3, [r3, #8]
 80081fc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	430a      	orrs	r2, r1
 800820a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008210:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008214:	2b00      	cmp	r3, #0
 8008216:	d01a      	beq.n	800824e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	685b      	ldr	r3, [r3, #4]
 800821e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	430a      	orrs	r2, r1
 800822c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008232:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008236:	d10a      	bne.n	800824e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	685b      	ldr	r3, [r3, #4]
 800823e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	430a      	orrs	r2, r1
 800824c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008252:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008256:	2b00      	cmp	r3, #0
 8008258:	d00a      	beq.n	8008270 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	685b      	ldr	r3, [r3, #4]
 8008260:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	430a      	orrs	r2, r1
 800826e:	605a      	str	r2, [r3, #4]
  }
}
 8008270:	bf00      	nop
 8008272:	370c      	adds	r7, #12
 8008274:	46bd      	mov	sp, r7
 8008276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827a:	4770      	bx	lr

0800827c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800827c:	b580      	push	{r7, lr}
 800827e:	b086      	sub	sp, #24
 8008280:	af02      	add	r7, sp, #8
 8008282:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	2200      	movs	r2, #0
 8008288:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800828c:	f7fb f966 	bl	800355c <HAL_GetTick>
 8008290:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	f003 0308 	and.w	r3, r3, #8
 800829c:	2b08      	cmp	r3, #8
 800829e:	d10e      	bne.n	80082be <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80082a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80082a4:	9300      	str	r3, [sp, #0]
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	2200      	movs	r2, #0
 80082aa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80082ae:	6878      	ldr	r0, [r7, #4]
 80082b0:	f000 f817 	bl	80082e2 <UART_WaitOnFlagUntilTimeout>
 80082b4:	4603      	mov	r3, r0
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d001      	beq.n	80082be <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80082ba:	2303      	movs	r3, #3
 80082bc:	e00d      	b.n	80082da <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	2220      	movs	r2, #32
 80082c2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	2220      	movs	r2, #32
 80082c8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	2200      	movs	r2, #0
 80082ce:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2200      	movs	r2, #0
 80082d4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80082d8:	2300      	movs	r3, #0
}
 80082da:	4618      	mov	r0, r3
 80082dc:	3710      	adds	r7, #16
 80082de:	46bd      	mov	sp, r7
 80082e0:	bd80      	pop	{r7, pc}

080082e2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80082e2:	b580      	push	{r7, lr}
 80082e4:	b09c      	sub	sp, #112	; 0x70
 80082e6:	af00      	add	r7, sp, #0
 80082e8:	60f8      	str	r0, [r7, #12]
 80082ea:	60b9      	str	r1, [r7, #8]
 80082ec:	603b      	str	r3, [r7, #0]
 80082ee:	4613      	mov	r3, r2
 80082f0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80082f2:	e0a5      	b.n	8008440 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80082f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80082f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082fa:	f000 80a1 	beq.w	8008440 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80082fe:	f7fb f92d 	bl	800355c <HAL_GetTick>
 8008302:	4602      	mov	r2, r0
 8008304:	683b      	ldr	r3, [r7, #0]
 8008306:	1ad3      	subs	r3, r2, r3
 8008308:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800830a:	429a      	cmp	r2, r3
 800830c:	d302      	bcc.n	8008314 <UART_WaitOnFlagUntilTimeout+0x32>
 800830e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008310:	2b00      	cmp	r3, #0
 8008312:	d13e      	bne.n	8008392 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800831a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800831c:	e853 3f00 	ldrex	r3, [r3]
 8008320:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008322:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008324:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008328:	667b      	str	r3, [r7, #100]	; 0x64
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	461a      	mov	r2, r3
 8008330:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008332:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008334:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008336:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008338:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800833a:	e841 2300 	strex	r3, r2, [r1]
 800833e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008340:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008342:	2b00      	cmp	r3, #0
 8008344:	d1e6      	bne.n	8008314 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	3308      	adds	r3, #8
 800834c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800834e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008350:	e853 3f00 	ldrex	r3, [r3]
 8008354:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008358:	f023 0301 	bic.w	r3, r3, #1
 800835c:	663b      	str	r3, [r7, #96]	; 0x60
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	3308      	adds	r3, #8
 8008364:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008366:	64ba      	str	r2, [r7, #72]	; 0x48
 8008368:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800836a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800836c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800836e:	e841 2300 	strex	r3, r2, [r1]
 8008372:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008374:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008376:	2b00      	cmp	r3, #0
 8008378:	d1e5      	bne.n	8008346 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	2220      	movs	r2, #32
 800837e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	2220      	movs	r2, #32
 8008384:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	2200      	movs	r2, #0
 800838a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800838e:	2303      	movs	r3, #3
 8008390:	e067      	b.n	8008462 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	f003 0304 	and.w	r3, r3, #4
 800839c:	2b00      	cmp	r3, #0
 800839e:	d04f      	beq.n	8008440 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	69db      	ldr	r3, [r3, #28]
 80083a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80083aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80083ae:	d147      	bne.n	8008440 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80083b8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083c2:	e853 3f00 	ldrex	r3, [r3]
 80083c6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80083c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083ca:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80083ce:	66fb      	str	r3, [r7, #108]	; 0x6c
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	461a      	mov	r2, r3
 80083d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80083d8:	637b      	str	r3, [r7, #52]	; 0x34
 80083da:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083dc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80083de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80083e0:	e841 2300 	strex	r3, r2, [r1]
 80083e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80083e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d1e6      	bne.n	80083ba <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	3308      	adds	r3, #8
 80083f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083f4:	697b      	ldr	r3, [r7, #20]
 80083f6:	e853 3f00 	ldrex	r3, [r3]
 80083fa:	613b      	str	r3, [r7, #16]
   return(result);
 80083fc:	693b      	ldr	r3, [r7, #16]
 80083fe:	f023 0301 	bic.w	r3, r3, #1
 8008402:	66bb      	str	r3, [r7, #104]	; 0x68
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	3308      	adds	r3, #8
 800840a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800840c:	623a      	str	r2, [r7, #32]
 800840e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008410:	69f9      	ldr	r1, [r7, #28]
 8008412:	6a3a      	ldr	r2, [r7, #32]
 8008414:	e841 2300 	strex	r3, r2, [r1]
 8008418:	61bb      	str	r3, [r7, #24]
   return(result);
 800841a:	69bb      	ldr	r3, [r7, #24]
 800841c:	2b00      	cmp	r3, #0
 800841e:	d1e5      	bne.n	80083ec <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	2220      	movs	r2, #32
 8008424:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	2220      	movs	r2, #32
 800842a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	2220      	movs	r2, #32
 8008430:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	2200      	movs	r2, #0
 8008438:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800843c:	2303      	movs	r3, #3
 800843e:	e010      	b.n	8008462 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	69da      	ldr	r2, [r3, #28]
 8008446:	68bb      	ldr	r3, [r7, #8]
 8008448:	4013      	ands	r3, r2
 800844a:	68ba      	ldr	r2, [r7, #8]
 800844c:	429a      	cmp	r2, r3
 800844e:	bf0c      	ite	eq
 8008450:	2301      	moveq	r3, #1
 8008452:	2300      	movne	r3, #0
 8008454:	b2db      	uxtb	r3, r3
 8008456:	461a      	mov	r2, r3
 8008458:	79fb      	ldrb	r3, [r7, #7]
 800845a:	429a      	cmp	r2, r3
 800845c:	f43f af4a 	beq.w	80082f4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008460:	2300      	movs	r3, #0
}
 8008462:	4618      	mov	r0, r3
 8008464:	3770      	adds	r7, #112	; 0x70
 8008466:	46bd      	mov	sp, r7
 8008468:	bd80      	pop	{r7, pc}
	...

0800846c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800846c:	b480      	push	{r7}
 800846e:	b083      	sub	sp, #12
 8008470:	af00      	add	r7, sp, #0
 8008472:	6078      	str	r0, [r7, #4]
 8008474:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8008476:	683b      	ldr	r3, [r7, #0]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	2b00      	cmp	r3, #0
 800847c:	d121      	bne.n	80084c2 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681a      	ldr	r2, [r3, #0]
 8008482:	4b27      	ldr	r3, [pc, #156]	; (8008520 <FMC_SDRAM_Init+0xb4>)
 8008484:	4013      	ands	r3, r2
 8008486:	683a      	ldr	r2, [r7, #0]
 8008488:	6851      	ldr	r1, [r2, #4]
 800848a:	683a      	ldr	r2, [r7, #0]
 800848c:	6892      	ldr	r2, [r2, #8]
 800848e:	4311      	orrs	r1, r2
 8008490:	683a      	ldr	r2, [r7, #0]
 8008492:	68d2      	ldr	r2, [r2, #12]
 8008494:	4311      	orrs	r1, r2
 8008496:	683a      	ldr	r2, [r7, #0]
 8008498:	6912      	ldr	r2, [r2, #16]
 800849a:	4311      	orrs	r1, r2
 800849c:	683a      	ldr	r2, [r7, #0]
 800849e:	6952      	ldr	r2, [r2, #20]
 80084a0:	4311      	orrs	r1, r2
 80084a2:	683a      	ldr	r2, [r7, #0]
 80084a4:	6992      	ldr	r2, [r2, #24]
 80084a6:	4311      	orrs	r1, r2
 80084a8:	683a      	ldr	r2, [r7, #0]
 80084aa:	69d2      	ldr	r2, [r2, #28]
 80084ac:	4311      	orrs	r1, r2
 80084ae:	683a      	ldr	r2, [r7, #0]
 80084b0:	6a12      	ldr	r2, [r2, #32]
 80084b2:	4311      	orrs	r1, r2
 80084b4:	683a      	ldr	r2, [r7, #0]
 80084b6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80084b8:	430a      	orrs	r2, r1
 80084ba:	431a      	orrs	r2, r3
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	601a      	str	r2, [r3, #0]
 80084c0:	e026      	b.n	8008510 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80084ca:	683b      	ldr	r3, [r7, #0]
 80084cc:	69d9      	ldr	r1, [r3, #28]
 80084ce:	683b      	ldr	r3, [r7, #0]
 80084d0:	6a1b      	ldr	r3, [r3, #32]
 80084d2:	4319      	orrs	r1, r3
 80084d4:	683b      	ldr	r3, [r7, #0]
 80084d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084d8:	430b      	orrs	r3, r1
 80084da:	431a      	orrs	r2, r3
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	685a      	ldr	r2, [r3, #4]
 80084e4:	4b0e      	ldr	r3, [pc, #56]	; (8008520 <FMC_SDRAM_Init+0xb4>)
 80084e6:	4013      	ands	r3, r2
 80084e8:	683a      	ldr	r2, [r7, #0]
 80084ea:	6851      	ldr	r1, [r2, #4]
 80084ec:	683a      	ldr	r2, [r7, #0]
 80084ee:	6892      	ldr	r2, [r2, #8]
 80084f0:	4311      	orrs	r1, r2
 80084f2:	683a      	ldr	r2, [r7, #0]
 80084f4:	68d2      	ldr	r2, [r2, #12]
 80084f6:	4311      	orrs	r1, r2
 80084f8:	683a      	ldr	r2, [r7, #0]
 80084fa:	6912      	ldr	r2, [r2, #16]
 80084fc:	4311      	orrs	r1, r2
 80084fe:	683a      	ldr	r2, [r7, #0]
 8008500:	6952      	ldr	r2, [r2, #20]
 8008502:	4311      	orrs	r1, r2
 8008504:	683a      	ldr	r2, [r7, #0]
 8008506:	6992      	ldr	r2, [r2, #24]
 8008508:	430a      	orrs	r2, r1
 800850a:	431a      	orrs	r2, r3
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8008510:	2300      	movs	r3, #0
}
 8008512:	4618      	mov	r0, r3
 8008514:	370c      	adds	r7, #12
 8008516:	46bd      	mov	sp, r7
 8008518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851c:	4770      	bx	lr
 800851e:	bf00      	nop
 8008520:	ffff8000 	.word	0xffff8000

08008524 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8008524:	b480      	push	{r7}
 8008526:	b085      	sub	sp, #20
 8008528:	af00      	add	r7, sp, #0
 800852a:	60f8      	str	r0, [r7, #12]
 800852c:	60b9      	str	r1, [r7, #8]
 800852e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	2b00      	cmp	r3, #0
 8008534:	d128      	bne.n	8008588 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	689b      	ldr	r3, [r3, #8]
 800853a:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800853e:	68bb      	ldr	r3, [r7, #8]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	1e59      	subs	r1, r3, #1
 8008544:	68bb      	ldr	r3, [r7, #8]
 8008546:	685b      	ldr	r3, [r3, #4]
 8008548:	3b01      	subs	r3, #1
 800854a:	011b      	lsls	r3, r3, #4
 800854c:	4319      	orrs	r1, r3
 800854e:	68bb      	ldr	r3, [r7, #8]
 8008550:	689b      	ldr	r3, [r3, #8]
 8008552:	3b01      	subs	r3, #1
 8008554:	021b      	lsls	r3, r3, #8
 8008556:	4319      	orrs	r1, r3
 8008558:	68bb      	ldr	r3, [r7, #8]
 800855a:	68db      	ldr	r3, [r3, #12]
 800855c:	3b01      	subs	r3, #1
 800855e:	031b      	lsls	r3, r3, #12
 8008560:	4319      	orrs	r1, r3
 8008562:	68bb      	ldr	r3, [r7, #8]
 8008564:	691b      	ldr	r3, [r3, #16]
 8008566:	3b01      	subs	r3, #1
 8008568:	041b      	lsls	r3, r3, #16
 800856a:	4319      	orrs	r1, r3
 800856c:	68bb      	ldr	r3, [r7, #8]
 800856e:	695b      	ldr	r3, [r3, #20]
 8008570:	3b01      	subs	r3, #1
 8008572:	051b      	lsls	r3, r3, #20
 8008574:	4319      	orrs	r1, r3
 8008576:	68bb      	ldr	r3, [r7, #8]
 8008578:	699b      	ldr	r3, [r3, #24]
 800857a:	3b01      	subs	r3, #1
 800857c:	061b      	lsls	r3, r3, #24
 800857e:	430b      	orrs	r3, r1
 8008580:	431a      	orrs	r2, r3
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	609a      	str	r2, [r3, #8]
 8008586:	e02d      	b.n	80085e4 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	689a      	ldr	r2, [r3, #8]
 800858c:	4b19      	ldr	r3, [pc, #100]	; (80085f4 <FMC_SDRAM_Timing_Init+0xd0>)
 800858e:	4013      	ands	r3, r2
 8008590:	68ba      	ldr	r2, [r7, #8]
 8008592:	68d2      	ldr	r2, [r2, #12]
 8008594:	3a01      	subs	r2, #1
 8008596:	0311      	lsls	r1, r2, #12
 8008598:	68ba      	ldr	r2, [r7, #8]
 800859a:	6952      	ldr	r2, [r2, #20]
 800859c:	3a01      	subs	r2, #1
 800859e:	0512      	lsls	r2, r2, #20
 80085a0:	430a      	orrs	r2, r1
 80085a2:	431a      	orrs	r2, r3
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	68db      	ldr	r3, [r3, #12]
 80085ac:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80085b0:	68bb      	ldr	r3, [r7, #8]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	1e59      	subs	r1, r3, #1
 80085b6:	68bb      	ldr	r3, [r7, #8]
 80085b8:	685b      	ldr	r3, [r3, #4]
 80085ba:	3b01      	subs	r3, #1
 80085bc:	011b      	lsls	r3, r3, #4
 80085be:	4319      	orrs	r1, r3
 80085c0:	68bb      	ldr	r3, [r7, #8]
 80085c2:	689b      	ldr	r3, [r3, #8]
 80085c4:	3b01      	subs	r3, #1
 80085c6:	021b      	lsls	r3, r3, #8
 80085c8:	4319      	orrs	r1, r3
 80085ca:	68bb      	ldr	r3, [r7, #8]
 80085cc:	691b      	ldr	r3, [r3, #16]
 80085ce:	3b01      	subs	r3, #1
 80085d0:	041b      	lsls	r3, r3, #16
 80085d2:	4319      	orrs	r1, r3
 80085d4:	68bb      	ldr	r3, [r7, #8]
 80085d6:	699b      	ldr	r3, [r3, #24]
 80085d8:	3b01      	subs	r3, #1
 80085da:	061b      	lsls	r3, r3, #24
 80085dc:	430b      	orrs	r3, r1
 80085de:	431a      	orrs	r2, r3
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 80085e4:	2300      	movs	r3, #0
}
 80085e6:	4618      	mov	r0, r3
 80085e8:	3714      	adds	r7, #20
 80085ea:	46bd      	mov	sp, r7
 80085ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f0:	4770      	bx	lr
 80085f2:	bf00      	nop
 80085f4:	ff0f0fff 	.word	0xff0f0fff

080085f8 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80085f8:	b480      	push	{r7}
 80085fa:	b085      	sub	sp, #20
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	60f8      	str	r0, [r7, #12]
 8008600:	60b9      	str	r1, [r7, #8]
 8008602:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	691a      	ldr	r2, [r3, #16]
 8008608:	4b0c      	ldr	r3, [pc, #48]	; (800863c <FMC_SDRAM_SendCommand+0x44>)
 800860a:	4013      	ands	r3, r2
 800860c:	68ba      	ldr	r2, [r7, #8]
 800860e:	6811      	ldr	r1, [r2, #0]
 8008610:	68ba      	ldr	r2, [r7, #8]
 8008612:	6852      	ldr	r2, [r2, #4]
 8008614:	4311      	orrs	r1, r2
 8008616:	68ba      	ldr	r2, [r7, #8]
 8008618:	6892      	ldr	r2, [r2, #8]
 800861a:	3a01      	subs	r2, #1
 800861c:	0152      	lsls	r2, r2, #5
 800861e:	4311      	orrs	r1, r2
 8008620:	68ba      	ldr	r2, [r7, #8]
 8008622:	68d2      	ldr	r2, [r2, #12]
 8008624:	0252      	lsls	r2, r2, #9
 8008626:	430a      	orrs	r2, r1
 8008628:	431a      	orrs	r2, r3
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 800862e:	2300      	movs	r3, #0
}
 8008630:	4618      	mov	r0, r3
 8008632:	3714      	adds	r7, #20
 8008634:	46bd      	mov	sp, r7
 8008636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863a:	4770      	bx	lr
 800863c:	ffc00000 	.word	0xffc00000

08008640 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8008640:	b480      	push	{r7}
 8008642:	b083      	sub	sp, #12
 8008644:	af00      	add	r7, sp, #0
 8008646:	6078      	str	r0, [r7, #4]
 8008648:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	695a      	ldr	r2, [r3, #20]
 800864e:	4b07      	ldr	r3, [pc, #28]	; (800866c <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 8008650:	4013      	ands	r3, r2
 8008652:	683a      	ldr	r2, [r7, #0]
 8008654:	0052      	lsls	r2, r2, #1
 8008656:	431a      	orrs	r2, r3
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800865c:	2300      	movs	r3, #0
}
 800865e:	4618      	mov	r0, r3
 8008660:	370c      	adds	r7, #12
 8008662:	46bd      	mov	sp, r7
 8008664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008668:	4770      	bx	lr
 800866a:	bf00      	nop
 800866c:	ffffc001 	.word	0xffffc001

08008670 <__errno>:
 8008670:	4b01      	ldr	r3, [pc, #4]	; (8008678 <__errno+0x8>)
 8008672:	6818      	ldr	r0, [r3, #0]
 8008674:	4770      	bx	lr
 8008676:	bf00      	nop
 8008678:	20000028 	.word	0x20000028

0800867c <__libc_init_array>:
 800867c:	b570      	push	{r4, r5, r6, lr}
 800867e:	4d0d      	ldr	r5, [pc, #52]	; (80086b4 <__libc_init_array+0x38>)
 8008680:	4c0d      	ldr	r4, [pc, #52]	; (80086b8 <__libc_init_array+0x3c>)
 8008682:	1b64      	subs	r4, r4, r5
 8008684:	10a4      	asrs	r4, r4, #2
 8008686:	2600      	movs	r6, #0
 8008688:	42a6      	cmp	r6, r4
 800868a:	d109      	bne.n	80086a0 <__libc_init_array+0x24>
 800868c:	4d0b      	ldr	r5, [pc, #44]	; (80086bc <__libc_init_array+0x40>)
 800868e:	4c0c      	ldr	r4, [pc, #48]	; (80086c0 <__libc_init_array+0x44>)
 8008690:	f000 fcaa 	bl	8008fe8 <_init>
 8008694:	1b64      	subs	r4, r4, r5
 8008696:	10a4      	asrs	r4, r4, #2
 8008698:	2600      	movs	r6, #0
 800869a:	42a6      	cmp	r6, r4
 800869c:	d105      	bne.n	80086aa <__libc_init_array+0x2e>
 800869e:	bd70      	pop	{r4, r5, r6, pc}
 80086a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80086a4:	4798      	blx	r3
 80086a6:	3601      	adds	r6, #1
 80086a8:	e7ee      	b.n	8008688 <__libc_init_array+0xc>
 80086aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80086ae:	4798      	blx	r3
 80086b0:	3601      	adds	r6, #1
 80086b2:	e7f2      	b.n	800869a <__libc_init_array+0x1e>
 80086b4:	0801ca54 	.word	0x0801ca54
 80086b8:	0801ca54 	.word	0x0801ca54
 80086bc:	0801ca54 	.word	0x0801ca54
 80086c0:	0801ca58 	.word	0x0801ca58

080086c4 <memcpy>:
 80086c4:	440a      	add	r2, r1
 80086c6:	4291      	cmp	r1, r2
 80086c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80086cc:	d100      	bne.n	80086d0 <memcpy+0xc>
 80086ce:	4770      	bx	lr
 80086d0:	b510      	push	{r4, lr}
 80086d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80086d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80086da:	4291      	cmp	r1, r2
 80086dc:	d1f9      	bne.n	80086d2 <memcpy+0xe>
 80086de:	bd10      	pop	{r4, pc}

080086e0 <memset>:
 80086e0:	4402      	add	r2, r0
 80086e2:	4603      	mov	r3, r0
 80086e4:	4293      	cmp	r3, r2
 80086e6:	d100      	bne.n	80086ea <memset+0xa>
 80086e8:	4770      	bx	lr
 80086ea:	f803 1b01 	strb.w	r1, [r3], #1
 80086ee:	e7f9      	b.n	80086e4 <memset+0x4>

080086f0 <fmaxf>:
 80086f0:	b508      	push	{r3, lr}
 80086f2:	ed2d 8b02 	vpush	{d8}
 80086f6:	eeb0 8a40 	vmov.f32	s16, s0
 80086fa:	eef0 8a60 	vmov.f32	s17, s1
 80086fe:	f000 f813 	bl	8008728 <__fpclassifyf>
 8008702:	b148      	cbz	r0, 8008718 <fmaxf+0x28>
 8008704:	eeb0 0a68 	vmov.f32	s0, s17
 8008708:	f000 f80e 	bl	8008728 <__fpclassifyf>
 800870c:	b130      	cbz	r0, 800871c <fmaxf+0x2c>
 800870e:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8008712:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008716:	dc01      	bgt.n	800871c <fmaxf+0x2c>
 8008718:	eeb0 8a68 	vmov.f32	s16, s17
 800871c:	eeb0 0a48 	vmov.f32	s0, s16
 8008720:	ecbd 8b02 	vpop	{d8}
 8008724:	bd08      	pop	{r3, pc}
	...

08008728 <__fpclassifyf>:
 8008728:	ee10 3a10 	vmov	r3, s0
 800872c:	f033 4000 	bics.w	r0, r3, #2147483648	; 0x80000000
 8008730:	d00d      	beq.n	800874e <__fpclassifyf+0x26>
 8008732:	f5a0 0300 	sub.w	r3, r0, #8388608	; 0x800000
 8008736:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800873a:	d30a      	bcc.n	8008752 <__fpclassifyf+0x2a>
 800873c:	4b07      	ldr	r3, [pc, #28]	; (800875c <__fpclassifyf+0x34>)
 800873e:	1e42      	subs	r2, r0, #1
 8008740:	429a      	cmp	r2, r3
 8008742:	d908      	bls.n	8008756 <__fpclassifyf+0x2e>
 8008744:	f1a0 43ff 	sub.w	r3, r0, #2139095040	; 0x7f800000
 8008748:	4258      	negs	r0, r3
 800874a:	4158      	adcs	r0, r3
 800874c:	4770      	bx	lr
 800874e:	2002      	movs	r0, #2
 8008750:	4770      	bx	lr
 8008752:	2004      	movs	r0, #4
 8008754:	4770      	bx	lr
 8008756:	2003      	movs	r0, #3
 8008758:	4770      	bx	lr
 800875a:	bf00      	nop
 800875c:	007ffffe 	.word	0x007ffffe

08008760 <powf>:
 8008760:	b508      	push	{r3, lr}
 8008762:	ed2d 8b04 	vpush	{d8-d9}
 8008766:	eeb0 9a40 	vmov.f32	s18, s0
 800876a:	eef0 8a60 	vmov.f32	s17, s1
 800876e:	f000 f88f 	bl	8008890 <__ieee754_powf>
 8008772:	4b43      	ldr	r3, [pc, #268]	; (8008880 <powf+0x120>)
 8008774:	f993 3000 	ldrsb.w	r3, [r3]
 8008778:	3301      	adds	r3, #1
 800877a:	eeb0 8a40 	vmov.f32	s16, s0
 800877e:	d012      	beq.n	80087a6 <powf+0x46>
 8008780:	eef4 8a68 	vcmp.f32	s17, s17
 8008784:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008788:	d60d      	bvs.n	80087a6 <powf+0x46>
 800878a:	eeb4 9a49 	vcmp.f32	s18, s18
 800878e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008792:	d70d      	bvc.n	80087b0 <powf+0x50>
 8008794:	eef5 8a40 	vcmp.f32	s17, #0.0
 8008798:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800879c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80087a0:	bf08      	it	eq
 80087a2:	eeb0 8a67 	vmoveq.f32	s16, s15
 80087a6:	eeb0 0a48 	vmov.f32	s0, s16
 80087aa:	ecbd 8b04 	vpop	{d8-d9}
 80087ae:	bd08      	pop	{r3, pc}
 80087b0:	eddf 9a34 	vldr	s19, [pc, #208]	; 8008884 <powf+0x124>
 80087b4:	eeb4 9a69 	vcmp.f32	s18, s19
 80087b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087bc:	d116      	bne.n	80087ec <powf+0x8c>
 80087be:	eef4 8a69 	vcmp.f32	s17, s19
 80087c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087c6:	d057      	beq.n	8008878 <powf+0x118>
 80087c8:	eeb0 0a68 	vmov.f32	s0, s17
 80087cc:	f000 fb2a 	bl	8008e24 <finitef>
 80087d0:	2800      	cmp	r0, #0
 80087d2:	d0e8      	beq.n	80087a6 <powf+0x46>
 80087d4:	eef4 8ae9 	vcmpe.f32	s17, s19
 80087d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087dc:	d5e3      	bpl.n	80087a6 <powf+0x46>
 80087de:	f7ff ff47 	bl	8008670 <__errno>
 80087e2:	2321      	movs	r3, #33	; 0x21
 80087e4:	6003      	str	r3, [r0, #0]
 80087e6:	ed9f 8a28 	vldr	s16, [pc, #160]	; 8008888 <powf+0x128>
 80087ea:	e7dc      	b.n	80087a6 <powf+0x46>
 80087ec:	f000 fb1a 	bl	8008e24 <finitef>
 80087f0:	bb50      	cbnz	r0, 8008848 <powf+0xe8>
 80087f2:	eeb0 0a49 	vmov.f32	s0, s18
 80087f6:	f000 fb15 	bl	8008e24 <finitef>
 80087fa:	b328      	cbz	r0, 8008848 <powf+0xe8>
 80087fc:	eeb0 0a68 	vmov.f32	s0, s17
 8008800:	f000 fb10 	bl	8008e24 <finitef>
 8008804:	b300      	cbz	r0, 8008848 <powf+0xe8>
 8008806:	eeb4 8a48 	vcmp.f32	s16, s16
 800880a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800880e:	d706      	bvc.n	800881e <powf+0xbe>
 8008810:	f7ff ff2e 	bl	8008670 <__errno>
 8008814:	2321      	movs	r3, #33	; 0x21
 8008816:	ee89 8aa9 	vdiv.f32	s16, s19, s19
 800881a:	6003      	str	r3, [r0, #0]
 800881c:	e7c3      	b.n	80087a6 <powf+0x46>
 800881e:	f7ff ff27 	bl	8008670 <__errno>
 8008822:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
 8008826:	2322      	movs	r3, #34	; 0x22
 8008828:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800882c:	6003      	str	r3, [r0, #0]
 800882e:	d508      	bpl.n	8008842 <powf+0xe2>
 8008830:	eeb0 0a68 	vmov.f32	s0, s17
 8008834:	f000 fb0a 	bl	8008e4c <rintf>
 8008838:	eeb4 0a68 	vcmp.f32	s0, s17
 800883c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008840:	d1d1      	bne.n	80087e6 <powf+0x86>
 8008842:	ed9f 8a12 	vldr	s16, [pc, #72]	; 800888c <powf+0x12c>
 8008846:	e7ae      	b.n	80087a6 <powf+0x46>
 8008848:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800884c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008850:	d1a9      	bne.n	80087a6 <powf+0x46>
 8008852:	eeb0 0a49 	vmov.f32	s0, s18
 8008856:	f000 fae5 	bl	8008e24 <finitef>
 800885a:	2800      	cmp	r0, #0
 800885c:	d0a3      	beq.n	80087a6 <powf+0x46>
 800885e:	eeb0 0a68 	vmov.f32	s0, s17
 8008862:	f000 fadf 	bl	8008e24 <finitef>
 8008866:	2800      	cmp	r0, #0
 8008868:	d09d      	beq.n	80087a6 <powf+0x46>
 800886a:	f7ff ff01 	bl	8008670 <__errno>
 800886e:	2322      	movs	r3, #34	; 0x22
 8008870:	ed9f 8a04 	vldr	s16, [pc, #16]	; 8008884 <powf+0x124>
 8008874:	6003      	str	r3, [r0, #0]
 8008876:	e796      	b.n	80087a6 <powf+0x46>
 8008878:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800887c:	e793      	b.n	80087a6 <powf+0x46>
 800887e:	bf00      	nop
 8008880:	2000008c 	.word	0x2000008c
 8008884:	00000000 	.word	0x00000000
 8008888:	ff800000 	.word	0xff800000
 800888c:	7f800000 	.word	0x7f800000

08008890 <__ieee754_powf>:
 8008890:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008894:	ee10 5a90 	vmov	r5, s1
 8008898:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 800889c:	ed2d 8b02 	vpush	{d8}
 80088a0:	eeb0 8a40 	vmov.f32	s16, s0
 80088a4:	eef0 8a60 	vmov.f32	s17, s1
 80088a8:	f000 8291 	beq.w	8008dce <__ieee754_powf+0x53e>
 80088ac:	ee10 8a10 	vmov	r8, s0
 80088b0:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 80088b4:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 80088b8:	dc06      	bgt.n	80088c8 <__ieee754_powf+0x38>
 80088ba:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 80088be:	dd0a      	ble.n	80088d6 <__ieee754_powf+0x46>
 80088c0:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 80088c4:	f000 8283 	beq.w	8008dce <__ieee754_powf+0x53e>
 80088c8:	ecbd 8b02 	vpop	{d8}
 80088cc:	48d8      	ldr	r0, [pc, #864]	; (8008c30 <__ieee754_powf+0x3a0>)
 80088ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80088d2:	f000 bab5 	b.w	8008e40 <nanf>
 80088d6:	f1b8 0f00 	cmp.w	r8, #0
 80088da:	da1f      	bge.n	800891c <__ieee754_powf+0x8c>
 80088dc:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 80088e0:	da2e      	bge.n	8008940 <__ieee754_powf+0xb0>
 80088e2:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 80088e6:	f2c0 827b 	blt.w	8008de0 <__ieee754_powf+0x550>
 80088ea:	15fb      	asrs	r3, r7, #23
 80088ec:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 80088f0:	fa47 f603 	asr.w	r6, r7, r3
 80088f4:	fa06 f303 	lsl.w	r3, r6, r3
 80088f8:	42bb      	cmp	r3, r7
 80088fa:	f040 8271 	bne.w	8008de0 <__ieee754_powf+0x550>
 80088fe:	f006 0601 	and.w	r6, r6, #1
 8008902:	f1c6 0602 	rsb	r6, r6, #2
 8008906:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 800890a:	d120      	bne.n	800894e <__ieee754_powf+0xbe>
 800890c:	2d00      	cmp	r5, #0
 800890e:	f280 8264 	bge.w	8008dda <__ieee754_powf+0x54a>
 8008912:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8008916:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800891a:	e00d      	b.n	8008938 <__ieee754_powf+0xa8>
 800891c:	2600      	movs	r6, #0
 800891e:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8008922:	d1f0      	bne.n	8008906 <__ieee754_powf+0x76>
 8008924:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8008928:	f000 8251 	beq.w	8008dce <__ieee754_powf+0x53e>
 800892c:	dd0a      	ble.n	8008944 <__ieee754_powf+0xb4>
 800892e:	2d00      	cmp	r5, #0
 8008930:	f280 8250 	bge.w	8008dd4 <__ieee754_powf+0x544>
 8008934:	ed9f 0abf 	vldr	s0, [pc, #764]	; 8008c34 <__ieee754_powf+0x3a4>
 8008938:	ecbd 8b02 	vpop	{d8}
 800893c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008940:	2602      	movs	r6, #2
 8008942:	e7ec      	b.n	800891e <__ieee754_powf+0x8e>
 8008944:	2d00      	cmp	r5, #0
 8008946:	daf5      	bge.n	8008934 <__ieee754_powf+0xa4>
 8008948:	eeb1 0a68 	vneg.f32	s0, s17
 800894c:	e7f4      	b.n	8008938 <__ieee754_powf+0xa8>
 800894e:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 8008952:	d102      	bne.n	800895a <__ieee754_powf+0xca>
 8008954:	ee28 0a08 	vmul.f32	s0, s16, s16
 8008958:	e7ee      	b.n	8008938 <__ieee754_powf+0xa8>
 800895a:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 800895e:	eeb0 0a48 	vmov.f32	s0, s16
 8008962:	d108      	bne.n	8008976 <__ieee754_powf+0xe6>
 8008964:	f1b8 0f00 	cmp.w	r8, #0
 8008968:	db05      	blt.n	8008976 <__ieee754_powf+0xe6>
 800896a:	ecbd 8b02 	vpop	{d8}
 800896e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008972:	f000 ba4d 	b.w	8008e10 <__ieee754_sqrtf>
 8008976:	f000 fa4e 	bl	8008e16 <fabsf>
 800897a:	b124      	cbz	r4, 8008986 <__ieee754_powf+0xf6>
 800897c:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 8008980:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8008984:	d117      	bne.n	80089b6 <__ieee754_powf+0x126>
 8008986:	2d00      	cmp	r5, #0
 8008988:	bfbc      	itt	lt
 800898a:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 800898e:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8008992:	f1b8 0f00 	cmp.w	r8, #0
 8008996:	dacf      	bge.n	8008938 <__ieee754_powf+0xa8>
 8008998:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 800899c:	ea54 0306 	orrs.w	r3, r4, r6
 80089a0:	d104      	bne.n	80089ac <__ieee754_powf+0x11c>
 80089a2:	ee70 7a40 	vsub.f32	s15, s0, s0
 80089a6:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 80089aa:	e7c5      	b.n	8008938 <__ieee754_powf+0xa8>
 80089ac:	2e01      	cmp	r6, #1
 80089ae:	d1c3      	bne.n	8008938 <__ieee754_powf+0xa8>
 80089b0:	eeb1 0a40 	vneg.f32	s0, s0
 80089b4:	e7c0      	b.n	8008938 <__ieee754_powf+0xa8>
 80089b6:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 80089ba:	3801      	subs	r0, #1
 80089bc:	ea56 0300 	orrs.w	r3, r6, r0
 80089c0:	d104      	bne.n	80089cc <__ieee754_powf+0x13c>
 80089c2:	ee38 8a48 	vsub.f32	s16, s16, s16
 80089c6:	ee88 0a08 	vdiv.f32	s0, s16, s16
 80089ca:	e7b5      	b.n	8008938 <__ieee754_powf+0xa8>
 80089cc:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 80089d0:	dd6b      	ble.n	8008aaa <__ieee754_powf+0x21a>
 80089d2:	4b99      	ldr	r3, [pc, #612]	; (8008c38 <__ieee754_powf+0x3a8>)
 80089d4:	429c      	cmp	r4, r3
 80089d6:	dc06      	bgt.n	80089e6 <__ieee754_powf+0x156>
 80089d8:	2d00      	cmp	r5, #0
 80089da:	daab      	bge.n	8008934 <__ieee754_powf+0xa4>
 80089dc:	ed9f 0a97 	vldr	s0, [pc, #604]	; 8008c3c <__ieee754_powf+0x3ac>
 80089e0:	ee20 0a00 	vmul.f32	s0, s0, s0
 80089e4:	e7a8      	b.n	8008938 <__ieee754_powf+0xa8>
 80089e6:	4b96      	ldr	r3, [pc, #600]	; (8008c40 <__ieee754_powf+0x3b0>)
 80089e8:	429c      	cmp	r4, r3
 80089ea:	dd02      	ble.n	80089f2 <__ieee754_powf+0x162>
 80089ec:	2d00      	cmp	r5, #0
 80089ee:	dcf5      	bgt.n	80089dc <__ieee754_powf+0x14c>
 80089f0:	e7a0      	b.n	8008934 <__ieee754_powf+0xa4>
 80089f2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80089f6:	ee30 0a67 	vsub.f32	s0, s0, s15
 80089fa:	eddf 6a92 	vldr	s13, [pc, #584]	; 8008c44 <__ieee754_powf+0x3b4>
 80089fe:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8008a02:	eee0 6a67 	vfms.f32	s13, s0, s15
 8008a06:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8008a0a:	eee6 7ac0 	vfms.f32	s15, s13, s0
 8008a0e:	ee20 7a00 	vmul.f32	s14, s0, s0
 8008a12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a16:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 8008c48 <__ieee754_powf+0x3b8>
 8008a1a:	ee67 7a67 	vnmul.f32	s15, s14, s15
 8008a1e:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 8008c4c <__ieee754_powf+0x3bc>
 8008a22:	eee0 7a07 	vfma.f32	s15, s0, s14
 8008a26:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8008c50 <__ieee754_powf+0x3c0>
 8008a2a:	eef0 6a67 	vmov.f32	s13, s15
 8008a2e:	eee0 6a07 	vfma.f32	s13, s0, s14
 8008a32:	ee16 3a90 	vmov	r3, s13
 8008a36:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8008a3a:	f023 030f 	bic.w	r3, r3, #15
 8008a3e:	ee00 3a90 	vmov	s1, r3
 8008a42:	eee0 0a47 	vfms.f32	s1, s0, s14
 8008a46:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8008a4a:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 8008a4e:	f025 050f 	bic.w	r5, r5, #15
 8008a52:	ee07 5a10 	vmov	s14, r5
 8008a56:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8008a5a:	ee38 7ac7 	vsub.f32	s14, s17, s14
 8008a5e:	ee07 3a90 	vmov	s15, r3
 8008a62:	eee7 0a27 	vfma.f32	s1, s14, s15
 8008a66:	3e01      	subs	r6, #1
 8008a68:	ea56 0200 	orrs.w	r2, r6, r0
 8008a6c:	ee07 5a10 	vmov	s14, r5
 8008a70:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008a74:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8008a78:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8008a7c:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8008a80:	ee17 4a10 	vmov	r4, s14
 8008a84:	bf08      	it	eq
 8008a86:	eeb0 8a40 	vmoveq.f32	s16, s0
 8008a8a:	2c00      	cmp	r4, #0
 8008a8c:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8008a90:	f340 8184 	ble.w	8008d9c <__ieee754_powf+0x50c>
 8008a94:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 8008a98:	f340 80fc 	ble.w	8008c94 <__ieee754_powf+0x404>
 8008a9c:	eddf 7a67 	vldr	s15, [pc, #412]	; 8008c3c <__ieee754_powf+0x3ac>
 8008aa0:	ee28 0a27 	vmul.f32	s0, s16, s15
 8008aa4:	ee20 0a27 	vmul.f32	s0, s0, s15
 8008aa8:	e746      	b.n	8008938 <__ieee754_powf+0xa8>
 8008aaa:	f018 4fff 	tst.w	r8, #2139095040	; 0x7f800000
 8008aae:	bf01      	itttt	eq
 8008ab0:	eddf 7a68 	vldreq	s15, [pc, #416]	; 8008c54 <__ieee754_powf+0x3c4>
 8008ab4:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 8008ab8:	f06f 0217 	mvneq.w	r2, #23
 8008abc:	ee17 4a90 	vmoveq	r4, s15
 8008ac0:	ea4f 53e4 	mov.w	r3, r4, asr #23
 8008ac4:	bf18      	it	ne
 8008ac6:	2200      	movne	r2, #0
 8008ac8:	3b7f      	subs	r3, #127	; 0x7f
 8008aca:	4413      	add	r3, r2
 8008acc:	4a62      	ldr	r2, [pc, #392]	; (8008c58 <__ieee754_powf+0x3c8>)
 8008ace:	f3c4 0416 	ubfx	r4, r4, #0, #23
 8008ad2:	4294      	cmp	r4, r2
 8008ad4:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 8008ad8:	dd06      	ble.n	8008ae8 <__ieee754_powf+0x258>
 8008ada:	4a60      	ldr	r2, [pc, #384]	; (8008c5c <__ieee754_powf+0x3cc>)
 8008adc:	4294      	cmp	r4, r2
 8008ade:	f340 80a4 	ble.w	8008c2a <__ieee754_powf+0x39a>
 8008ae2:	3301      	adds	r3, #1
 8008ae4:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8008ae8:	2400      	movs	r4, #0
 8008aea:	4a5d      	ldr	r2, [pc, #372]	; (8008c60 <__ieee754_powf+0x3d0>)
 8008aec:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8008af0:	ee07 1a90 	vmov	s15, r1
 8008af4:	ed92 7a00 	vldr	s14, [r2]
 8008af8:	4a5a      	ldr	r2, [pc, #360]	; (8008c64 <__ieee754_powf+0x3d4>)
 8008afa:	ee37 6a27 	vadd.f32	s12, s14, s15
 8008afe:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8008b02:	eec5 6a86 	vdiv.f32	s13, s11, s12
 8008b06:	1049      	asrs	r1, r1, #1
 8008b08:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 8008b0c:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 8008b10:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 8008b14:	ee37 5ac7 	vsub.f32	s10, s15, s14
 8008b18:	ee06 1a10 	vmov	s12, r1
 8008b1c:	ee65 4a26 	vmul.f32	s9, s10, s13
 8008b20:	ee36 7a47 	vsub.f32	s14, s12, s14
 8008b24:	ee14 7a90 	vmov	r7, s9
 8008b28:	4017      	ands	r7, r2
 8008b2a:	ee05 7a90 	vmov	s11, r7
 8008b2e:	eea5 5ac6 	vfms.f32	s10, s11, s12
 8008b32:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008b36:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8008c68 <__ieee754_powf+0x3d8>
 8008b3a:	eea5 5ae7 	vfms.f32	s10, s11, s15
 8008b3e:	ee64 7aa4 	vmul.f32	s15, s9, s9
 8008b42:	ee25 6a26 	vmul.f32	s12, s10, s13
 8008b46:	eddf 6a49 	vldr	s13, [pc, #292]	; 8008c6c <__ieee754_powf+0x3dc>
 8008b4a:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8008b4e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8008c70 <__ieee754_powf+0x3e0>
 8008b52:	eee7 6a27 	vfma.f32	s13, s14, s15
 8008b56:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8008c44 <__ieee754_powf+0x3b4>
 8008b5a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008b5e:	eddf 6a45 	vldr	s13, [pc, #276]	; 8008c74 <__ieee754_powf+0x3e4>
 8008b62:	eee7 6a27 	vfma.f32	s13, s14, s15
 8008b66:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8008c78 <__ieee754_powf+0x3e8>
 8008b6a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008b6e:	ee74 6aa5 	vadd.f32	s13, s9, s11
 8008b72:	ee27 5aa7 	vmul.f32	s10, s15, s15
 8008b76:	ee66 6a86 	vmul.f32	s13, s13, s12
 8008b7a:	eee5 6a07 	vfma.f32	s13, s10, s14
 8008b7e:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 8008b82:	eef0 7a45 	vmov.f32	s15, s10
 8008b86:	eee5 7aa5 	vfma.f32	s15, s11, s11
 8008b8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b8e:	ee17 1a90 	vmov	r1, s15
 8008b92:	4011      	ands	r1, r2
 8008b94:	ee07 1a90 	vmov	s15, r1
 8008b98:	ee37 7ac5 	vsub.f32	s14, s15, s10
 8008b9c:	eea5 7ae5 	vfms.f32	s14, s11, s11
 8008ba0:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8008ba4:	ee27 7a24 	vmul.f32	s14, s14, s9
 8008ba8:	eea6 7a27 	vfma.f32	s14, s12, s15
 8008bac:	eeb0 6a47 	vmov.f32	s12, s14
 8008bb0:	eea5 6aa7 	vfma.f32	s12, s11, s15
 8008bb4:	ee16 1a10 	vmov	r1, s12
 8008bb8:	4011      	ands	r1, r2
 8008bba:	ee06 1a90 	vmov	s13, r1
 8008bbe:	eee5 6ae7 	vfms.f32	s13, s11, s15
 8008bc2:	eddf 7a2e 	vldr	s15, [pc, #184]	; 8008c7c <__ieee754_powf+0x3ec>
 8008bc6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8008c80 <__ieee754_powf+0x3f0>
 8008bca:	ee37 7a66 	vsub.f32	s14, s14, s13
 8008bce:	ee06 1a10 	vmov	s12, r1
 8008bd2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008bd6:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8008c84 <__ieee754_powf+0x3f4>
 8008bda:	492b      	ldr	r1, [pc, #172]	; (8008c88 <__ieee754_powf+0x3f8>)
 8008bdc:	eea6 7a27 	vfma.f32	s14, s12, s15
 8008be0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008be4:	edd1 7a00 	vldr	s15, [r1]
 8008be8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008bec:	ee07 3a90 	vmov	s15, r3
 8008bf0:	4b26      	ldr	r3, [pc, #152]	; (8008c8c <__ieee754_powf+0x3fc>)
 8008bf2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8008bf6:	eef0 7a47 	vmov.f32	s15, s14
 8008bfa:	eee6 7a25 	vfma.f32	s15, s12, s11
 8008bfe:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008c02:	edd4 0a00 	vldr	s1, [r4]
 8008c06:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8008c0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c0e:	ee17 3a90 	vmov	r3, s15
 8008c12:	4013      	ands	r3, r2
 8008c14:	ee07 3a90 	vmov	s15, r3
 8008c18:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8008c1c:	ee76 6ae0 	vsub.f32	s13, s13, s1
 8008c20:	eee6 6a65 	vfms.f32	s13, s12, s11
 8008c24:	ee77 7a66 	vsub.f32	s15, s14, s13
 8008c28:	e70f      	b.n	8008a4a <__ieee754_powf+0x1ba>
 8008c2a:	2401      	movs	r4, #1
 8008c2c:	e75d      	b.n	8008aea <__ieee754_powf+0x25a>
 8008c2e:	bf00      	nop
 8008c30:	0801ca28 	.word	0x0801ca28
 8008c34:	00000000 	.word	0x00000000
 8008c38:	3f7ffff7 	.word	0x3f7ffff7
 8008c3c:	7149f2ca 	.word	0x7149f2ca
 8008c40:	3f800007 	.word	0x3f800007
 8008c44:	3eaaaaab 	.word	0x3eaaaaab
 8008c48:	3fb8aa3b 	.word	0x3fb8aa3b
 8008c4c:	36eca570 	.word	0x36eca570
 8008c50:	3fb8aa00 	.word	0x3fb8aa00
 8008c54:	4b800000 	.word	0x4b800000
 8008c58:	001cc471 	.word	0x001cc471
 8008c5c:	005db3d6 	.word	0x005db3d6
 8008c60:	0801ca2c 	.word	0x0801ca2c
 8008c64:	fffff000 	.word	0xfffff000
 8008c68:	3e6c3255 	.word	0x3e6c3255
 8008c6c:	3e53f142 	.word	0x3e53f142
 8008c70:	3e8ba305 	.word	0x3e8ba305
 8008c74:	3edb6db7 	.word	0x3edb6db7
 8008c78:	3f19999a 	.word	0x3f19999a
 8008c7c:	3f76384f 	.word	0x3f76384f
 8008c80:	3f763800 	.word	0x3f763800
 8008c84:	369dc3a0 	.word	0x369dc3a0
 8008c88:	0801ca3c 	.word	0x0801ca3c
 8008c8c:	0801ca34 	.word	0x0801ca34
 8008c90:	3338aa3c 	.word	0x3338aa3c
 8008c94:	f040 8092 	bne.w	8008dbc <__ieee754_powf+0x52c>
 8008c98:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 8008c90 <__ieee754_powf+0x400>
 8008c9c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008ca0:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8008ca4:	eef4 6ac7 	vcmpe.f32	s13, s14
 8008ca8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008cac:	f73f aef6 	bgt.w	8008a9c <__ieee754_powf+0x20c>
 8008cb0:	15db      	asrs	r3, r3, #23
 8008cb2:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 8008cb6:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8008cba:	4103      	asrs	r3, r0
 8008cbc:	4423      	add	r3, r4
 8008cbe:	4949      	ldr	r1, [pc, #292]	; (8008de4 <__ieee754_powf+0x554>)
 8008cc0:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8008cc4:	3a7f      	subs	r2, #127	; 0x7f
 8008cc6:	4111      	asrs	r1, r2
 8008cc8:	ea23 0101 	bic.w	r1, r3, r1
 8008ccc:	ee07 1a10 	vmov	s14, r1
 8008cd0:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8008cd4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8008cd8:	f1c2 0217 	rsb	r2, r2, #23
 8008cdc:	4110      	asrs	r0, r2
 8008cde:	2c00      	cmp	r4, #0
 8008ce0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008ce4:	bfb8      	it	lt
 8008ce6:	4240      	neglt	r0, r0
 8008ce8:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8008cec:	eddf 6a3e 	vldr	s13, [pc, #248]	; 8008de8 <__ieee754_powf+0x558>
 8008cf0:	ee17 3a10 	vmov	r3, s14
 8008cf4:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8008cf8:	f023 030f 	bic.w	r3, r3, #15
 8008cfc:	ee07 3a10 	vmov	s14, r3
 8008d00:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008d04:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8008d08:	eddf 7a38 	vldr	s15, [pc, #224]	; 8008dec <__ieee754_powf+0x55c>
 8008d0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d10:	eee0 7aa6 	vfma.f32	s15, s1, s13
 8008d14:	eddf 6a36 	vldr	s13, [pc, #216]	; 8008df0 <__ieee754_powf+0x560>
 8008d18:	eeb0 0a67 	vmov.f32	s0, s15
 8008d1c:	eea7 0a26 	vfma.f32	s0, s14, s13
 8008d20:	eeb0 6a40 	vmov.f32	s12, s0
 8008d24:	eea7 6a66 	vfms.f32	s12, s14, s13
 8008d28:	ee20 7a00 	vmul.f32	s14, s0, s0
 8008d2c:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8008d30:	eddf 6a30 	vldr	s13, [pc, #192]	; 8008df4 <__ieee754_powf+0x564>
 8008d34:	ed9f 6a30 	vldr	s12, [pc, #192]	; 8008df8 <__ieee754_powf+0x568>
 8008d38:	eea7 6a26 	vfma.f32	s12, s14, s13
 8008d3c:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8008dfc <__ieee754_powf+0x56c>
 8008d40:	eee6 6a07 	vfma.f32	s13, s12, s14
 8008d44:	ed9f 6a2e 	vldr	s12, [pc, #184]	; 8008e00 <__ieee754_powf+0x570>
 8008d48:	eea6 6a87 	vfma.f32	s12, s13, s14
 8008d4c:	eddf 6a2d 	vldr	s13, [pc, #180]	; 8008e04 <__ieee754_powf+0x574>
 8008d50:	eee6 6a07 	vfma.f32	s13, s12, s14
 8008d54:	eeb0 6a40 	vmov.f32	s12, s0
 8008d58:	eea6 6ac7 	vfms.f32	s12, s13, s14
 8008d5c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8008d60:	eeb0 7a46 	vmov.f32	s14, s12
 8008d64:	ee77 6a66 	vsub.f32	s13, s14, s13
 8008d68:	ee20 6a06 	vmul.f32	s12, s0, s12
 8008d6c:	eee0 7a27 	vfma.f32	s15, s0, s15
 8008d70:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8008d74:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008d78:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8008d7c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8008d80:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8008d84:	ee10 3a10 	vmov	r3, s0
 8008d88:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8008d8c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008d90:	da1a      	bge.n	8008dc8 <__ieee754_powf+0x538>
 8008d92:	f000 f8b7 	bl	8008f04 <scalbnf>
 8008d96:	ee20 0a08 	vmul.f32	s0, s0, s16
 8008d9a:	e5cd      	b.n	8008938 <__ieee754_powf+0xa8>
 8008d9c:	4a1a      	ldr	r2, [pc, #104]	; (8008e08 <__ieee754_powf+0x578>)
 8008d9e:	4293      	cmp	r3, r2
 8008da0:	dd02      	ble.n	8008da8 <__ieee754_powf+0x518>
 8008da2:	eddf 7a1a 	vldr	s15, [pc, #104]	; 8008e0c <__ieee754_powf+0x57c>
 8008da6:	e67b      	b.n	8008aa0 <__ieee754_powf+0x210>
 8008da8:	d108      	bne.n	8008dbc <__ieee754_powf+0x52c>
 8008daa:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008dae:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8008db2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008db6:	f6ff af7b 	blt.w	8008cb0 <__ieee754_powf+0x420>
 8008dba:	e7f2      	b.n	8008da2 <__ieee754_powf+0x512>
 8008dbc:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 8008dc0:	f73f af76 	bgt.w	8008cb0 <__ieee754_powf+0x420>
 8008dc4:	2000      	movs	r0, #0
 8008dc6:	e78f      	b.n	8008ce8 <__ieee754_powf+0x458>
 8008dc8:	ee00 3a10 	vmov	s0, r3
 8008dcc:	e7e3      	b.n	8008d96 <__ieee754_powf+0x506>
 8008dce:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8008dd2:	e5b1      	b.n	8008938 <__ieee754_powf+0xa8>
 8008dd4:	eeb0 0a68 	vmov.f32	s0, s17
 8008dd8:	e5ae      	b.n	8008938 <__ieee754_powf+0xa8>
 8008dda:	eeb0 0a48 	vmov.f32	s0, s16
 8008dde:	e5ab      	b.n	8008938 <__ieee754_powf+0xa8>
 8008de0:	2600      	movs	r6, #0
 8008de2:	e590      	b.n	8008906 <__ieee754_powf+0x76>
 8008de4:	007fffff 	.word	0x007fffff
 8008de8:	3f317218 	.word	0x3f317218
 8008dec:	35bfbe8c 	.word	0x35bfbe8c
 8008df0:	3f317200 	.word	0x3f317200
 8008df4:	3331bb4c 	.word	0x3331bb4c
 8008df8:	b5ddea0e 	.word	0xb5ddea0e
 8008dfc:	388ab355 	.word	0x388ab355
 8008e00:	bb360b61 	.word	0xbb360b61
 8008e04:	3e2aaaab 	.word	0x3e2aaaab
 8008e08:	43160000 	.word	0x43160000
 8008e0c:	0da24260 	.word	0x0da24260

08008e10 <__ieee754_sqrtf>:
 8008e10:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8008e14:	4770      	bx	lr

08008e16 <fabsf>:
 8008e16:	ee10 3a10 	vmov	r3, s0
 8008e1a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008e1e:	ee00 3a10 	vmov	s0, r3
 8008e22:	4770      	bx	lr

08008e24 <finitef>:
 8008e24:	b082      	sub	sp, #8
 8008e26:	ed8d 0a01 	vstr	s0, [sp, #4]
 8008e2a:	9801      	ldr	r0, [sp, #4]
 8008e2c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8008e30:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8008e34:	bfac      	ite	ge
 8008e36:	2000      	movge	r0, #0
 8008e38:	2001      	movlt	r0, #1
 8008e3a:	b002      	add	sp, #8
 8008e3c:	4770      	bx	lr
	...

08008e40 <nanf>:
 8008e40:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8008e48 <nanf+0x8>
 8008e44:	4770      	bx	lr
 8008e46:	bf00      	nop
 8008e48:	7fc00000 	.word	0x7fc00000

08008e4c <rintf>:
 8008e4c:	ee10 2a10 	vmov	r2, s0
 8008e50:	b513      	push	{r0, r1, r4, lr}
 8008e52:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8008e56:	397f      	subs	r1, #127	; 0x7f
 8008e58:	2916      	cmp	r1, #22
 8008e5a:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8008e5e:	dc47      	bgt.n	8008ef0 <rintf+0xa4>
 8008e60:	b32b      	cbz	r3, 8008eae <rintf+0x62>
 8008e62:	2900      	cmp	r1, #0
 8008e64:	ee10 3a10 	vmov	r3, s0
 8008e68:	ea4f 70d2 	mov.w	r0, r2, lsr #31
 8008e6c:	da21      	bge.n	8008eb2 <rintf+0x66>
 8008e6e:	f3c2 0316 	ubfx	r3, r2, #0, #23
 8008e72:	425b      	negs	r3, r3
 8008e74:	4921      	ldr	r1, [pc, #132]	; (8008efc <rintf+0xb0>)
 8008e76:	0a5b      	lsrs	r3, r3, #9
 8008e78:	0d12      	lsrs	r2, r2, #20
 8008e7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008e7e:	0512      	lsls	r2, r2, #20
 8008e80:	4313      	orrs	r3, r2
 8008e82:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 8008e86:	ee07 3a90 	vmov	s15, r3
 8008e8a:	edd1 6a00 	vldr	s13, [r1]
 8008e8e:	ee36 7aa7 	vadd.f32	s14, s13, s15
 8008e92:	ed8d 7a01 	vstr	s14, [sp, #4]
 8008e96:	eddd 7a01 	vldr	s15, [sp, #4]
 8008e9a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008e9e:	ee17 3a90 	vmov	r3, s15
 8008ea2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008ea6:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 8008eaa:	ee00 3a10 	vmov	s0, r3
 8008eae:	b002      	add	sp, #8
 8008eb0:	bd10      	pop	{r4, pc}
 8008eb2:	4a13      	ldr	r2, [pc, #76]	; (8008f00 <rintf+0xb4>)
 8008eb4:	410a      	asrs	r2, r1
 8008eb6:	4213      	tst	r3, r2
 8008eb8:	d0f9      	beq.n	8008eae <rintf+0x62>
 8008eba:	0854      	lsrs	r4, r2, #1
 8008ebc:	ea13 0252 	ands.w	r2, r3, r2, lsr #1
 8008ec0:	d006      	beq.n	8008ed0 <rintf+0x84>
 8008ec2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8008ec6:	ea23 0304 	bic.w	r3, r3, r4
 8008eca:	fa42 f101 	asr.w	r1, r2, r1
 8008ece:	430b      	orrs	r3, r1
 8008ed0:	4a0a      	ldr	r2, [pc, #40]	; (8008efc <rintf+0xb0>)
 8008ed2:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 8008ed6:	ed90 7a00 	vldr	s14, [r0]
 8008eda:	ee07 3a90 	vmov	s15, r3
 8008ede:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008ee2:	edcd 7a01 	vstr	s15, [sp, #4]
 8008ee6:	ed9d 0a01 	vldr	s0, [sp, #4]
 8008eea:	ee30 0a47 	vsub.f32	s0, s0, s14
 8008eee:	e7de      	b.n	8008eae <rintf+0x62>
 8008ef0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8008ef4:	d3db      	bcc.n	8008eae <rintf+0x62>
 8008ef6:	ee30 0a00 	vadd.f32	s0, s0, s0
 8008efa:	e7d8      	b.n	8008eae <rintf+0x62>
 8008efc:	0801ca44 	.word	0x0801ca44
 8008f00:	007fffff 	.word	0x007fffff

08008f04 <scalbnf>:
 8008f04:	ee10 3a10 	vmov	r3, s0
 8008f08:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8008f0c:	d025      	beq.n	8008f5a <scalbnf+0x56>
 8008f0e:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8008f12:	d302      	bcc.n	8008f1a <scalbnf+0x16>
 8008f14:	ee30 0a00 	vadd.f32	s0, s0, s0
 8008f18:	4770      	bx	lr
 8008f1a:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8008f1e:	d122      	bne.n	8008f66 <scalbnf+0x62>
 8008f20:	4b2a      	ldr	r3, [pc, #168]	; (8008fcc <scalbnf+0xc8>)
 8008f22:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8008fd0 <scalbnf+0xcc>
 8008f26:	4298      	cmp	r0, r3
 8008f28:	ee20 0a27 	vmul.f32	s0, s0, s15
 8008f2c:	db16      	blt.n	8008f5c <scalbnf+0x58>
 8008f2e:	ee10 3a10 	vmov	r3, s0
 8008f32:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8008f36:	3a19      	subs	r2, #25
 8008f38:	4402      	add	r2, r0
 8008f3a:	2afe      	cmp	r2, #254	; 0xfe
 8008f3c:	dd15      	ble.n	8008f6a <scalbnf+0x66>
 8008f3e:	ee10 3a10 	vmov	r3, s0
 8008f42:	eddf 7a24 	vldr	s15, [pc, #144]	; 8008fd4 <scalbnf+0xd0>
 8008f46:	eddf 6a24 	vldr	s13, [pc, #144]	; 8008fd8 <scalbnf+0xd4>
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	eeb0 7a67 	vmov.f32	s14, s15
 8008f50:	bfb8      	it	lt
 8008f52:	eef0 7a66 	vmovlt.f32	s15, s13
 8008f56:	ee27 0a27 	vmul.f32	s0, s14, s15
 8008f5a:	4770      	bx	lr
 8008f5c:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8008fdc <scalbnf+0xd8>
 8008f60:	ee20 0a27 	vmul.f32	s0, s0, s15
 8008f64:	4770      	bx	lr
 8008f66:	0dd2      	lsrs	r2, r2, #23
 8008f68:	e7e6      	b.n	8008f38 <scalbnf+0x34>
 8008f6a:	2a00      	cmp	r2, #0
 8008f6c:	dd06      	ble.n	8008f7c <scalbnf+0x78>
 8008f6e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008f72:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8008f76:	ee00 3a10 	vmov	s0, r3
 8008f7a:	4770      	bx	lr
 8008f7c:	f112 0f16 	cmn.w	r2, #22
 8008f80:	da1a      	bge.n	8008fb8 <scalbnf+0xb4>
 8008f82:	f24c 3350 	movw	r3, #50000	; 0xc350
 8008f86:	4298      	cmp	r0, r3
 8008f88:	ee10 3a10 	vmov	r3, s0
 8008f8c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008f90:	dd0a      	ble.n	8008fa8 <scalbnf+0xa4>
 8008f92:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8008fd4 <scalbnf+0xd0>
 8008f96:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8008fd8 <scalbnf+0xd4>
 8008f9a:	eef0 7a40 	vmov.f32	s15, s0
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	bf18      	it	ne
 8008fa2:	eeb0 0a47 	vmovne.f32	s0, s14
 8008fa6:	e7db      	b.n	8008f60 <scalbnf+0x5c>
 8008fa8:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8008fdc <scalbnf+0xd8>
 8008fac:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8008fe0 <scalbnf+0xdc>
 8008fb0:	eef0 7a40 	vmov.f32	s15, s0
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	e7f3      	b.n	8008fa0 <scalbnf+0x9c>
 8008fb8:	3219      	adds	r2, #25
 8008fba:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008fbe:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8008fc2:	eddf 7a08 	vldr	s15, [pc, #32]	; 8008fe4 <scalbnf+0xe0>
 8008fc6:	ee07 3a10 	vmov	s14, r3
 8008fca:	e7c4      	b.n	8008f56 <scalbnf+0x52>
 8008fcc:	ffff3cb0 	.word	0xffff3cb0
 8008fd0:	4c000000 	.word	0x4c000000
 8008fd4:	7149f2ca 	.word	0x7149f2ca
 8008fd8:	f149f2ca 	.word	0xf149f2ca
 8008fdc:	0da24260 	.word	0x0da24260
 8008fe0:	8da24260 	.word	0x8da24260
 8008fe4:	33000000 	.word	0x33000000

08008fe8 <_init>:
 8008fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fea:	bf00      	nop
 8008fec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008fee:	bc08      	pop	{r3}
 8008ff0:	469e      	mov	lr, r3
 8008ff2:	4770      	bx	lr

08008ff4 <_fini>:
 8008ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ff6:	bf00      	nop
 8008ff8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ffa:	bc08      	pop	{r3}
 8008ffc:	469e      	mov	lr, r3
 8008ffe:	4770      	bx	lr
