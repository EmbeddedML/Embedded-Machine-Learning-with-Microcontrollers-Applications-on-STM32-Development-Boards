
F746NG_CH6_EOC2_KeywordSpotting.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a898  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00044e40  0800aa60  0800aa60  0001aa60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0804f8a0  0804f8a0  000600a8  2**0
                  CONTENTS
  4 .ARM          00000008  0804f8a0  0804f8a0  0005f8a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0804f8a8  0804f8a8  000600a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0804f8a8  0804f8a8  0005f8a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0804f8ac  0804f8ac  0005f8ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  0804f8b0  00060000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00015140  200000a8  0804f958  000600a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200151e8  0804f958  000651e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000600a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003d46c  00000000  00000000  000600d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004da9  00000000  00000000  0009d544  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001da0  00000000  00000000  000a22f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0002b0fd  00000000  00000000  000a4090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00034caa  00000000  00000000  000cf18d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000ff545  00000000  00000000  00103e37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      000000cc  00000000  00000000  0020337c  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00003db0  00000000  00000000  00203448  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007d64  00000000  00000000  002071f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    00037334  00000000  00000000  0020ef5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	200000a8 	.word	0x200000a8
 80001e4:	00000000 	.word	0x00000000
 80001e8:	0800aa48 	.word	0x0800aa48

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	200000ac 	.word	0x200000ac
 8000204:	0800aa48 	.word	0x0800aa48

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	; 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__gedf2>:
 80009a4:	f04f 3cff 	mov.w	ip, #4294967295
 80009a8:	e006      	b.n	80009b8 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__ledf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	e002      	b.n	80009b8 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__cmpdf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c8:	bf18      	it	ne
 80009ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ce:	d01b      	beq.n	8000a08 <__cmpdf2+0x54>
 80009d0:	b001      	add	sp, #4
 80009d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009d6:	bf0c      	ite	eq
 80009d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009dc:	ea91 0f03 	teqne	r1, r3
 80009e0:	bf02      	ittt	eq
 80009e2:	ea90 0f02 	teqeq	r0, r2
 80009e6:	2000      	moveq	r0, #0
 80009e8:	4770      	bxeq	lr
 80009ea:	f110 0f00 	cmn.w	r0, #0
 80009ee:	ea91 0f03 	teq	r1, r3
 80009f2:	bf58      	it	pl
 80009f4:	4299      	cmppl	r1, r3
 80009f6:	bf08      	it	eq
 80009f8:	4290      	cmpeq	r0, r2
 80009fa:	bf2c      	ite	cs
 80009fc:	17d8      	asrcs	r0, r3, #31
 80009fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a02:	f040 0001 	orr.w	r0, r0, #1
 8000a06:	4770      	bx	lr
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__cmpdf2+0x64>
 8000a12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a16:	d107      	bne.n	8000a28 <__cmpdf2+0x74>
 8000a18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d1d6      	bne.n	80009d0 <__cmpdf2+0x1c>
 8000a22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a26:	d0d3      	beq.n	80009d0 <__cmpdf2+0x1c>
 8000a28:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop

08000a30 <__aeabi_cdrcmple>:
 8000a30:	4684      	mov	ip, r0
 8000a32:	4610      	mov	r0, r2
 8000a34:	4662      	mov	r2, ip
 8000a36:	468c      	mov	ip, r1
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4663      	mov	r3, ip
 8000a3c:	e000      	b.n	8000a40 <__aeabi_cdcmpeq>
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdcmpeq>:
 8000a40:	b501      	push	{r0, lr}
 8000a42:	f7ff ffb7 	bl	80009b4 <__cmpdf2>
 8000a46:	2800      	cmp	r0, #0
 8000a48:	bf48      	it	mi
 8000a4a:	f110 0f00 	cmnmi.w	r0, #0
 8000a4e:	bd01      	pop	{r0, pc}

08000a50 <__aeabi_dcmpeq>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff fff4 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a58:	bf0c      	ite	eq
 8000a5a:	2001      	moveq	r0, #1
 8000a5c:	2000      	movne	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmplt>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffea 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a6c:	bf34      	ite	cc
 8000a6e:	2001      	movcc	r0, #1
 8000a70:	2000      	movcs	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmple>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffe0 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a80:	bf94      	ite	ls
 8000a82:	2001      	movls	r0, #1
 8000a84:	2000      	movhi	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpge>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffce 	bl	8000a30 <__aeabi_cdrcmple>
 8000a94:	bf94      	ite	ls
 8000a96:	2001      	movls	r0, #1
 8000a98:	2000      	movhi	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmpgt>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffc4 	bl	8000a30 <__aeabi_cdrcmple>
 8000aa8:	bf34      	ite	cc
 8000aaa:	2001      	movcc	r0, #1
 8000aac:	2000      	movcs	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_d2f>:
 8000ab4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000abc:	bf24      	itt	cs
 8000abe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ac2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ac6:	d90d      	bls.n	8000ae4 <__aeabi_d2f+0x30>
 8000ac8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000acc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ad0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ad4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ad8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000adc:	bf08      	it	eq
 8000ade:	f020 0001 	biceq.w	r0, r0, #1
 8000ae2:	4770      	bx	lr
 8000ae4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ae8:	d121      	bne.n	8000b2e <__aeabi_d2f+0x7a>
 8000aea:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aee:	bfbc      	itt	lt
 8000af0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000af4:	4770      	bxlt	lr
 8000af6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000afa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000afe:	f1c2 0218 	rsb	r2, r2, #24
 8000b02:	f1c2 0c20 	rsb	ip, r2, #32
 8000b06:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b0a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b0e:	bf18      	it	ne
 8000b10:	f040 0001 	orrne.w	r0, r0, #1
 8000b14:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b18:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b1c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b20:	ea40 000c 	orr.w	r0, r0, ip
 8000b24:	fa23 f302 	lsr.w	r3, r3, r2
 8000b28:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b2c:	e7cc      	b.n	8000ac8 <__aeabi_d2f+0x14>
 8000b2e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b32:	d107      	bne.n	8000b44 <__aeabi_d2f+0x90>
 8000b34:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b38:	bf1e      	ittt	ne
 8000b3a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b3e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b42:	4770      	bxne	lr
 8000b44:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b48:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b4c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b50:	4770      	bx	lr
 8000b52:	bf00      	nop

08000b54 <__aeabi_uldivmod>:
 8000b54:	b953      	cbnz	r3, 8000b6c <__aeabi_uldivmod+0x18>
 8000b56:	b94a      	cbnz	r2, 8000b6c <__aeabi_uldivmod+0x18>
 8000b58:	2900      	cmp	r1, #0
 8000b5a:	bf08      	it	eq
 8000b5c:	2800      	cmpeq	r0, #0
 8000b5e:	bf1c      	itt	ne
 8000b60:	f04f 31ff 	movne.w	r1, #4294967295
 8000b64:	f04f 30ff 	movne.w	r0, #4294967295
 8000b68:	f000 b96e 	b.w	8000e48 <__aeabi_idiv0>
 8000b6c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b70:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b74:	f000 f806 	bl	8000b84 <__udivmoddi4>
 8000b78:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b80:	b004      	add	sp, #16
 8000b82:	4770      	bx	lr

08000b84 <__udivmoddi4>:
 8000b84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b88:	9d08      	ldr	r5, [sp, #32]
 8000b8a:	4604      	mov	r4, r0
 8000b8c:	468c      	mov	ip, r1
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	f040 8083 	bne.w	8000c9a <__udivmoddi4+0x116>
 8000b94:	428a      	cmp	r2, r1
 8000b96:	4617      	mov	r7, r2
 8000b98:	d947      	bls.n	8000c2a <__udivmoddi4+0xa6>
 8000b9a:	fab2 f282 	clz	r2, r2
 8000b9e:	b142      	cbz	r2, 8000bb2 <__udivmoddi4+0x2e>
 8000ba0:	f1c2 0020 	rsb	r0, r2, #32
 8000ba4:	fa24 f000 	lsr.w	r0, r4, r0
 8000ba8:	4091      	lsls	r1, r2
 8000baa:	4097      	lsls	r7, r2
 8000bac:	ea40 0c01 	orr.w	ip, r0, r1
 8000bb0:	4094      	lsls	r4, r2
 8000bb2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000bb6:	0c23      	lsrs	r3, r4, #16
 8000bb8:	fbbc f6f8 	udiv	r6, ip, r8
 8000bbc:	fa1f fe87 	uxth.w	lr, r7
 8000bc0:	fb08 c116 	mls	r1, r8, r6, ip
 8000bc4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bc8:	fb06 f10e 	mul.w	r1, r6, lr
 8000bcc:	4299      	cmp	r1, r3
 8000bce:	d909      	bls.n	8000be4 <__udivmoddi4+0x60>
 8000bd0:	18fb      	adds	r3, r7, r3
 8000bd2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000bd6:	f080 8119 	bcs.w	8000e0c <__udivmoddi4+0x288>
 8000bda:	4299      	cmp	r1, r3
 8000bdc:	f240 8116 	bls.w	8000e0c <__udivmoddi4+0x288>
 8000be0:	3e02      	subs	r6, #2
 8000be2:	443b      	add	r3, r7
 8000be4:	1a5b      	subs	r3, r3, r1
 8000be6:	b2a4      	uxth	r4, r4
 8000be8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bec:	fb08 3310 	mls	r3, r8, r0, r3
 8000bf0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bf4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000bf8:	45a6      	cmp	lr, r4
 8000bfa:	d909      	bls.n	8000c10 <__udivmoddi4+0x8c>
 8000bfc:	193c      	adds	r4, r7, r4
 8000bfe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c02:	f080 8105 	bcs.w	8000e10 <__udivmoddi4+0x28c>
 8000c06:	45a6      	cmp	lr, r4
 8000c08:	f240 8102 	bls.w	8000e10 <__udivmoddi4+0x28c>
 8000c0c:	3802      	subs	r0, #2
 8000c0e:	443c      	add	r4, r7
 8000c10:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c14:	eba4 040e 	sub.w	r4, r4, lr
 8000c18:	2600      	movs	r6, #0
 8000c1a:	b11d      	cbz	r5, 8000c24 <__udivmoddi4+0xa0>
 8000c1c:	40d4      	lsrs	r4, r2
 8000c1e:	2300      	movs	r3, #0
 8000c20:	e9c5 4300 	strd	r4, r3, [r5]
 8000c24:	4631      	mov	r1, r6
 8000c26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c2a:	b902      	cbnz	r2, 8000c2e <__udivmoddi4+0xaa>
 8000c2c:	deff      	udf	#255	; 0xff
 8000c2e:	fab2 f282 	clz	r2, r2
 8000c32:	2a00      	cmp	r2, #0
 8000c34:	d150      	bne.n	8000cd8 <__udivmoddi4+0x154>
 8000c36:	1bcb      	subs	r3, r1, r7
 8000c38:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c3c:	fa1f f887 	uxth.w	r8, r7
 8000c40:	2601      	movs	r6, #1
 8000c42:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c46:	0c21      	lsrs	r1, r4, #16
 8000c48:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c4c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c50:	fb08 f30c 	mul.w	r3, r8, ip
 8000c54:	428b      	cmp	r3, r1
 8000c56:	d907      	bls.n	8000c68 <__udivmoddi4+0xe4>
 8000c58:	1879      	adds	r1, r7, r1
 8000c5a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c5e:	d202      	bcs.n	8000c66 <__udivmoddi4+0xe2>
 8000c60:	428b      	cmp	r3, r1
 8000c62:	f200 80e9 	bhi.w	8000e38 <__udivmoddi4+0x2b4>
 8000c66:	4684      	mov	ip, r0
 8000c68:	1ac9      	subs	r1, r1, r3
 8000c6a:	b2a3      	uxth	r3, r4
 8000c6c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c70:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c74:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000c78:	fb08 f800 	mul.w	r8, r8, r0
 8000c7c:	45a0      	cmp	r8, r4
 8000c7e:	d907      	bls.n	8000c90 <__udivmoddi4+0x10c>
 8000c80:	193c      	adds	r4, r7, r4
 8000c82:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c86:	d202      	bcs.n	8000c8e <__udivmoddi4+0x10a>
 8000c88:	45a0      	cmp	r8, r4
 8000c8a:	f200 80d9 	bhi.w	8000e40 <__udivmoddi4+0x2bc>
 8000c8e:	4618      	mov	r0, r3
 8000c90:	eba4 0408 	sub.w	r4, r4, r8
 8000c94:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c98:	e7bf      	b.n	8000c1a <__udivmoddi4+0x96>
 8000c9a:	428b      	cmp	r3, r1
 8000c9c:	d909      	bls.n	8000cb2 <__udivmoddi4+0x12e>
 8000c9e:	2d00      	cmp	r5, #0
 8000ca0:	f000 80b1 	beq.w	8000e06 <__udivmoddi4+0x282>
 8000ca4:	2600      	movs	r6, #0
 8000ca6:	e9c5 0100 	strd	r0, r1, [r5]
 8000caa:	4630      	mov	r0, r6
 8000cac:	4631      	mov	r1, r6
 8000cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb2:	fab3 f683 	clz	r6, r3
 8000cb6:	2e00      	cmp	r6, #0
 8000cb8:	d14a      	bne.n	8000d50 <__udivmoddi4+0x1cc>
 8000cba:	428b      	cmp	r3, r1
 8000cbc:	d302      	bcc.n	8000cc4 <__udivmoddi4+0x140>
 8000cbe:	4282      	cmp	r2, r0
 8000cc0:	f200 80b8 	bhi.w	8000e34 <__udivmoddi4+0x2b0>
 8000cc4:	1a84      	subs	r4, r0, r2
 8000cc6:	eb61 0103 	sbc.w	r1, r1, r3
 8000cca:	2001      	movs	r0, #1
 8000ccc:	468c      	mov	ip, r1
 8000cce:	2d00      	cmp	r5, #0
 8000cd0:	d0a8      	beq.n	8000c24 <__udivmoddi4+0xa0>
 8000cd2:	e9c5 4c00 	strd	r4, ip, [r5]
 8000cd6:	e7a5      	b.n	8000c24 <__udivmoddi4+0xa0>
 8000cd8:	f1c2 0320 	rsb	r3, r2, #32
 8000cdc:	fa20 f603 	lsr.w	r6, r0, r3
 8000ce0:	4097      	lsls	r7, r2
 8000ce2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ce6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cea:	40d9      	lsrs	r1, r3
 8000cec:	4330      	orrs	r0, r6
 8000cee:	0c03      	lsrs	r3, r0, #16
 8000cf0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000cf4:	fa1f f887 	uxth.w	r8, r7
 8000cf8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000cfc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d00:	fb06 f108 	mul.w	r1, r6, r8
 8000d04:	4299      	cmp	r1, r3
 8000d06:	fa04 f402 	lsl.w	r4, r4, r2
 8000d0a:	d909      	bls.n	8000d20 <__udivmoddi4+0x19c>
 8000d0c:	18fb      	adds	r3, r7, r3
 8000d0e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d12:	f080 808d 	bcs.w	8000e30 <__udivmoddi4+0x2ac>
 8000d16:	4299      	cmp	r1, r3
 8000d18:	f240 808a 	bls.w	8000e30 <__udivmoddi4+0x2ac>
 8000d1c:	3e02      	subs	r6, #2
 8000d1e:	443b      	add	r3, r7
 8000d20:	1a5b      	subs	r3, r3, r1
 8000d22:	b281      	uxth	r1, r0
 8000d24:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d28:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d2c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d30:	fb00 f308 	mul.w	r3, r0, r8
 8000d34:	428b      	cmp	r3, r1
 8000d36:	d907      	bls.n	8000d48 <__udivmoddi4+0x1c4>
 8000d38:	1879      	adds	r1, r7, r1
 8000d3a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d3e:	d273      	bcs.n	8000e28 <__udivmoddi4+0x2a4>
 8000d40:	428b      	cmp	r3, r1
 8000d42:	d971      	bls.n	8000e28 <__udivmoddi4+0x2a4>
 8000d44:	3802      	subs	r0, #2
 8000d46:	4439      	add	r1, r7
 8000d48:	1acb      	subs	r3, r1, r3
 8000d4a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d4e:	e778      	b.n	8000c42 <__udivmoddi4+0xbe>
 8000d50:	f1c6 0c20 	rsb	ip, r6, #32
 8000d54:	fa03 f406 	lsl.w	r4, r3, r6
 8000d58:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d5c:	431c      	orrs	r4, r3
 8000d5e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000d62:	fa01 f306 	lsl.w	r3, r1, r6
 8000d66:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000d6a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000d6e:	431f      	orrs	r7, r3
 8000d70:	0c3b      	lsrs	r3, r7, #16
 8000d72:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d76:	fa1f f884 	uxth.w	r8, r4
 8000d7a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d7e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000d82:	fb09 fa08 	mul.w	sl, r9, r8
 8000d86:	458a      	cmp	sl, r1
 8000d88:	fa02 f206 	lsl.w	r2, r2, r6
 8000d8c:	fa00 f306 	lsl.w	r3, r0, r6
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x220>
 8000d92:	1861      	adds	r1, r4, r1
 8000d94:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d98:	d248      	bcs.n	8000e2c <__udivmoddi4+0x2a8>
 8000d9a:	458a      	cmp	sl, r1
 8000d9c:	d946      	bls.n	8000e2c <__udivmoddi4+0x2a8>
 8000d9e:	f1a9 0902 	sub.w	r9, r9, #2
 8000da2:	4421      	add	r1, r4
 8000da4:	eba1 010a 	sub.w	r1, r1, sl
 8000da8:	b2bf      	uxth	r7, r7
 8000daa:	fbb1 f0fe 	udiv	r0, r1, lr
 8000dae:	fb0e 1110 	mls	r1, lr, r0, r1
 8000db2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000db6:	fb00 f808 	mul.w	r8, r0, r8
 8000dba:	45b8      	cmp	r8, r7
 8000dbc:	d907      	bls.n	8000dce <__udivmoddi4+0x24a>
 8000dbe:	19e7      	adds	r7, r4, r7
 8000dc0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dc4:	d22e      	bcs.n	8000e24 <__udivmoddi4+0x2a0>
 8000dc6:	45b8      	cmp	r8, r7
 8000dc8:	d92c      	bls.n	8000e24 <__udivmoddi4+0x2a0>
 8000dca:	3802      	subs	r0, #2
 8000dcc:	4427      	add	r7, r4
 8000dce:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dd2:	eba7 0708 	sub.w	r7, r7, r8
 8000dd6:	fba0 8902 	umull	r8, r9, r0, r2
 8000dda:	454f      	cmp	r7, r9
 8000ddc:	46c6      	mov	lr, r8
 8000dde:	4649      	mov	r1, r9
 8000de0:	d31a      	bcc.n	8000e18 <__udivmoddi4+0x294>
 8000de2:	d017      	beq.n	8000e14 <__udivmoddi4+0x290>
 8000de4:	b15d      	cbz	r5, 8000dfe <__udivmoddi4+0x27a>
 8000de6:	ebb3 020e 	subs.w	r2, r3, lr
 8000dea:	eb67 0701 	sbc.w	r7, r7, r1
 8000dee:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000df2:	40f2      	lsrs	r2, r6
 8000df4:	ea4c 0202 	orr.w	r2, ip, r2
 8000df8:	40f7      	lsrs	r7, r6
 8000dfa:	e9c5 2700 	strd	r2, r7, [r5]
 8000dfe:	2600      	movs	r6, #0
 8000e00:	4631      	mov	r1, r6
 8000e02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e06:	462e      	mov	r6, r5
 8000e08:	4628      	mov	r0, r5
 8000e0a:	e70b      	b.n	8000c24 <__udivmoddi4+0xa0>
 8000e0c:	4606      	mov	r6, r0
 8000e0e:	e6e9      	b.n	8000be4 <__udivmoddi4+0x60>
 8000e10:	4618      	mov	r0, r3
 8000e12:	e6fd      	b.n	8000c10 <__udivmoddi4+0x8c>
 8000e14:	4543      	cmp	r3, r8
 8000e16:	d2e5      	bcs.n	8000de4 <__udivmoddi4+0x260>
 8000e18:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e1c:	eb69 0104 	sbc.w	r1, r9, r4
 8000e20:	3801      	subs	r0, #1
 8000e22:	e7df      	b.n	8000de4 <__udivmoddi4+0x260>
 8000e24:	4608      	mov	r0, r1
 8000e26:	e7d2      	b.n	8000dce <__udivmoddi4+0x24a>
 8000e28:	4660      	mov	r0, ip
 8000e2a:	e78d      	b.n	8000d48 <__udivmoddi4+0x1c4>
 8000e2c:	4681      	mov	r9, r0
 8000e2e:	e7b9      	b.n	8000da4 <__udivmoddi4+0x220>
 8000e30:	4666      	mov	r6, ip
 8000e32:	e775      	b.n	8000d20 <__udivmoddi4+0x19c>
 8000e34:	4630      	mov	r0, r6
 8000e36:	e74a      	b.n	8000cce <__udivmoddi4+0x14a>
 8000e38:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e3c:	4439      	add	r1, r7
 8000e3e:	e713      	b.n	8000c68 <__udivmoddi4+0xe4>
 8000e40:	3802      	subs	r0, #2
 8000e42:	443c      	add	r4, r7
 8000e44:	e724      	b.n	8000c90 <__udivmoddi4+0x10c>
 8000e46:	bf00      	nop

08000e48 <__aeabi_idiv0>:
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop

08000e4c <knn_cls_predict>:

static float euclid_distance(const float *sample, const float *target);
static int compare(const void *a, const void *b);

int knn_cls_predict(float *input, int *output)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	f5ad 4d9c 	sub.w	sp, sp, #19968	; 0x4e00
 8000e52:	b096      	sub	sp, #88	; 0x58
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	4b59      	ldr	r3, [pc, #356]	; (8000fbc <knn_cls_predict+0x170>)
 8000e58:	f644 6258 	movw	r2, #20056	; 0x4e58
 8000e5c:	443a      	add	r2, r7
 8000e5e:	4413      	add	r3, r2
 8000e60:	6018      	str	r0, [r3, #0]
 8000e62:	4b57      	ldr	r3, [pc, #348]	; (8000fc0 <knn_cls_predict+0x174>)
 8000e64:	f644 6258 	movw	r2, #20056	; 0x4e58
 8000e68:	443a      	add	r2, r7
 8000e6a:	4413      	add	r3, r2
 8000e6c:	6019      	str	r1, [r3, #0]
    struct indexedArr dists[NUM_SAMPLES];
    for (int i = 0; i < NUM_SAMPLES; i++)
 8000e6e:	2300      	movs	r3, #0
 8000e70:	f644 6254 	movw	r2, #20052	; 0x4e54
 8000e74:	443a      	add	r2, r7
 8000e76:	6013      	str	r3, [r2, #0]
 8000e78:	e039      	b.n	8000eee <knn_cls_predict+0xa2>
    {
        dists[i].value = euclid_distance(DATA[i], input);
 8000e7a:	f644 6354 	movw	r3, #20052	; 0x4e54
 8000e7e:	443b      	add	r3, r7
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	2268      	movs	r2, #104	; 0x68
 8000e84:	fb02 f303 	mul.w	r3, r2, r3
 8000e88:	4a4e      	ldr	r2, [pc, #312]	; (8000fc4 <knn_cls_predict+0x178>)
 8000e8a:	441a      	add	r2, r3
 8000e8c:	4b4b      	ldr	r3, [pc, #300]	; (8000fbc <knn_cls_predict+0x170>)
 8000e8e:	f644 6158 	movw	r1, #20056	; 0x4e58
 8000e92:	4439      	add	r1, r7
 8000e94:	440b      	add	r3, r1
 8000e96:	6819      	ldr	r1, [r3, #0]
 8000e98:	4610      	mov	r0, r2
 8000e9a:	f000 f89d 	bl	8000fd8 <euclid_distance>
 8000e9e:	eef0 7a40 	vmov.f32	s15, s0
 8000ea2:	4b49      	ldr	r3, [pc, #292]	; (8000fc8 <knn_cls_predict+0x17c>)
 8000ea4:	f644 6258 	movw	r2, #20056	; 0x4e58
 8000ea8:	443a      	add	r2, r7
 8000eaa:	4413      	add	r3, r2
 8000eac:	f644 6254 	movw	r2, #20052	; 0x4e54
 8000eb0:	443a      	add	r2, r7
 8000eb2:	6812      	ldr	r2, [r2, #0]
 8000eb4:	00d2      	lsls	r2, r2, #3
 8000eb6:	4413      	add	r3, r2
 8000eb8:	edc3 7a00 	vstr	s15, [r3]
        dists[i].index = i;
 8000ebc:	4a42      	ldr	r2, [pc, #264]	; (8000fc8 <knn_cls_predict+0x17c>)
 8000ebe:	f644 6358 	movw	r3, #20056	; 0x4e58
 8000ec2:	443b      	add	r3, r7
 8000ec4:	441a      	add	r2, r3
 8000ec6:	f644 6354 	movw	r3, #20052	; 0x4e54
 8000eca:	443b      	add	r3, r7
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	00db      	lsls	r3, r3, #3
 8000ed0:	4413      	add	r3, r2
 8000ed2:	f644 6254 	movw	r2, #20052	; 0x4e54
 8000ed6:	443a      	add	r2, r7
 8000ed8:	6812      	ldr	r2, [r2, #0]
 8000eda:	605a      	str	r2, [r3, #4]
    for (int i = 0; i < NUM_SAMPLES; i++)
 8000edc:	f644 6354 	movw	r3, #20052	; 0x4e54
 8000ee0:	443b      	add	r3, r7
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	3301      	adds	r3, #1
 8000ee6:	f644 6254 	movw	r2, #20052	; 0x4e54
 8000eea:	443a      	add	r2, r7
 8000eec:	6013      	str	r3, [r2, #0]
 8000eee:	f644 6354 	movw	r3, #20052	; 0x4e54
 8000ef2:	443b      	add	r3, r7
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8000efa:	4293      	cmp	r3, r2
 8000efc:	ddbd      	ble.n	8000e7a <knn_cls_predict+0x2e>
    }

    qsort(dists, NUM_SAMPLES, sizeof(struct indexedArr), compare);
 8000efe:	4832      	ldr	r0, [pc, #200]	; (8000fc8 <knn_cls_predict+0x17c>)
 8000f00:	f644 6358 	movw	r3, #20056	; 0x4e58
 8000f04:	443b      	add	r3, r7
 8000f06:	4418      	add	r0, r3
 8000f08:	4b30      	ldr	r3, [pc, #192]	; (8000fcc <knn_cls_predict+0x180>)
 8000f0a:	2208      	movs	r2, #8
 8000f0c:	f640 11c4 	movw	r1, #2500	; 0x9c4
 8000f10:	f008 fd61 	bl	80099d6 <qsort>

    int votes[NUM_CLASSES] = {0};
 8000f14:	4b2e      	ldr	r3, [pc, #184]	; (8000fd0 <knn_cls_predict+0x184>)
 8000f16:	f644 6258 	movw	r2, #20056	; 0x4e58
 8000f1a:	443a      	add	r2, r7
 8000f1c:	4413      	add	r3, r2
 8000f1e:	4618      	mov	r0, r3
 8000f20:	2328      	movs	r3, #40	; 0x28
 8000f22:	461a      	mov	r2, r3
 8000f24:	2100      	movs	r1, #0
 8000f26:	f008 fd15 	bl	8009954 <memset>
    for (int i = 0; i < NUM_NEIGHBORS; i++)
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	f644 6250 	movw	r2, #20048	; 0x4e50
 8000f30:	443a      	add	r2, r7
 8000f32:	6013      	str	r3, [r2, #0]
 8000f34:	e026      	b.n	8000f84 <knn_cls_predict+0x138>
        votes[DATA_LABELS[dists[i].index]]++;
 8000f36:	4a24      	ldr	r2, [pc, #144]	; (8000fc8 <knn_cls_predict+0x17c>)
 8000f38:	f644 6358 	movw	r3, #20056	; 0x4e58
 8000f3c:	443b      	add	r3, r7
 8000f3e:	441a      	add	r2, r3
 8000f40:	f644 6350 	movw	r3, #20048	; 0x4e50
 8000f44:	443b      	add	r3, r7
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	00db      	lsls	r3, r3, #3
 8000f4a:	4413      	add	r3, r2
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	4a21      	ldr	r2, [pc, #132]	; (8000fd4 <knn_cls_predict+0x188>)
 8000f50:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000f54:	4b1e      	ldr	r3, [pc, #120]	; (8000fd0 <knn_cls_predict+0x184>)
 8000f56:	f644 6158 	movw	r1, #20056	; 0x4e58
 8000f5a:	4439      	add	r1, r7
 8000f5c:	440b      	add	r3, r1
 8000f5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f62:	1c59      	adds	r1, r3, #1
 8000f64:	4b1a      	ldr	r3, [pc, #104]	; (8000fd0 <knn_cls_predict+0x184>)
 8000f66:	f644 6058 	movw	r0, #20056	; 0x4e58
 8000f6a:	4438      	add	r0, r7
 8000f6c:	4403      	add	r3, r0
 8000f6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (int i = 0; i < NUM_NEIGHBORS; i++)
 8000f72:	f644 6350 	movw	r3, #20048	; 0x4e50
 8000f76:	443b      	add	r3, r7
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	3301      	adds	r3, #1
 8000f7c:	f644 6250 	movw	r2, #20048	; 0x4e50
 8000f80:	443a      	add	r2, r7
 8000f82:	6013      	str	r3, [r2, #0]
 8000f84:	f644 6350 	movw	r3, #20048	; 0x4e50
 8000f88:	443b      	add	r3, r7
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	2b02      	cmp	r3, #2
 8000f8e:	ddd2      	ble.n	8000f36 <knn_cls_predict+0xea>

    memcpy(output, votes, NUM_CLASSES * sizeof(int));
 8000f90:	490f      	ldr	r1, [pc, #60]	; (8000fd0 <knn_cls_predict+0x184>)
 8000f92:	f644 6358 	movw	r3, #20056	; 0x4e58
 8000f96:	443b      	add	r3, r7
 8000f98:	4419      	add	r1, r3
 8000f9a:	4b09      	ldr	r3, [pc, #36]	; (8000fc0 <knn_cls_predict+0x174>)
 8000f9c:	f644 6258 	movw	r2, #20056	; 0x4e58
 8000fa0:	443a      	add	r2, r7
 8000fa2:	4413      	add	r3, r2
 8000fa4:	2228      	movs	r2, #40	; 0x28
 8000fa6:	6818      	ldr	r0, [r3, #0]
 8000fa8:	f008 fcc6 	bl	8009938 <memcpy>
    return 0;
 8000fac:	2300      	movs	r3, #0
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f507 479c 	add.w	r7, r7, #19968	; 0x4e00
 8000fb4:	3758      	adds	r7, #88	; 0x58
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	ffffb1ac 	.word	0xffffb1ac
 8000fc0:	ffffb1a8 	.word	0xffffb1a8
 8000fc4:	0800aa68 	.word	0x0800aa68
 8000fc8:	ffffb1d8 	.word	0xffffb1d8
 8000fcc:	08001043 	.word	0x08001043
 8000fd0:	ffffb1b0 	.word	0xffffb1b0
 8000fd4:	0804a208 	.word	0x0804a208

08000fd8 <euclid_distance>:

static float euclid_distance(const float *sample, const float *target)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b087      	sub	sp, #28
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
 8000fe0:	6039      	str	r1, [r7, #0]
    float dist = 0;
 8000fe2:	f04f 0300 	mov.w	r3, #0
 8000fe6:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < NUM_FEATURES; i++)
 8000fe8:	2300      	movs	r3, #0
 8000fea:	613b      	str	r3, [r7, #16]
 8000fec:	e01c      	b.n	8001028 <euclid_distance+0x50>
    {
        float diff = sample[i] - target[i];
 8000fee:	693b      	ldr	r3, [r7, #16]
 8000ff0:	009b      	lsls	r3, r3, #2
 8000ff2:	687a      	ldr	r2, [r7, #4]
 8000ff4:	4413      	add	r3, r2
 8000ff6:	ed93 7a00 	vldr	s14, [r3]
 8000ffa:	693b      	ldr	r3, [r7, #16]
 8000ffc:	009b      	lsls	r3, r3, #2
 8000ffe:	683a      	ldr	r2, [r7, #0]
 8001000:	4413      	add	r3, r2
 8001002:	edd3 7a00 	vldr	s15, [r3]
 8001006:	ee77 7a67 	vsub.f32	s15, s14, s15
 800100a:	edc7 7a03 	vstr	s15, [r7, #12]
        dist += diff * diff;
 800100e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001012:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001016:	ed97 7a05 	vldr	s14, [r7, #20]
 800101a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800101e:	edc7 7a05 	vstr	s15, [r7, #20]
    for (int i = 0; i < NUM_FEATURES; i++)
 8001022:	693b      	ldr	r3, [r7, #16]
 8001024:	3301      	adds	r3, #1
 8001026:	613b      	str	r3, [r7, #16]
 8001028:	693b      	ldr	r3, [r7, #16]
 800102a:	2b19      	cmp	r3, #25
 800102c:	dddf      	ble.n	8000fee <euclid_distance+0x16>
    }
    return dist;
 800102e:	697b      	ldr	r3, [r7, #20]
 8001030:	ee07 3a90 	vmov	s15, r3
}
 8001034:	eeb0 0a67 	vmov.f32	s0, s15
 8001038:	371c      	adds	r7, #28
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr

08001042 <compare>:

static int compare(const void *a, const void *b)
{
 8001042:	b480      	push	{r7}
 8001044:	b085      	sub	sp, #20
 8001046:	af00      	add	r7, sp, #0
 8001048:	6078      	str	r0, [r7, #4]
 800104a:	6039      	str	r1, [r7, #0]
    struct indexedArr *a1 = (struct indexedArr *)a;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	60fb      	str	r3, [r7, #12]
    struct indexedArr *a2 = (struct indexedArr *)b;
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	60bb      	str	r3, [r7, #8]
    if ((*a1).value < (*a2).value)
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	ed93 7a00 	vldr	s14, [r3]
 800105a:	68bb      	ldr	r3, [r7, #8]
 800105c:	edd3 7a00 	vldr	s15, [r3]
 8001060:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001064:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001068:	d502      	bpl.n	8001070 <compare+0x2e>
        return -1;
 800106a:	f04f 33ff 	mov.w	r3, #4294967295
 800106e:	e00d      	b.n	800108c <compare+0x4a>
    else if ((*a1).value > (*a2).value)
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	ed93 7a00 	vldr	s14, [r3]
 8001076:	68bb      	ldr	r3, [r7, #8]
 8001078:	edd3 7a00 	vldr	s15, [r3]
 800107c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001080:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001084:	dd01      	ble.n	800108a <compare+0x48>
        return 1;
 8001086:	2301      	movs	r3, #1
 8001088:	e000      	b.n	800108c <compare+0x4a>
    else
        return 0;
 800108a:	2300      	movs	r3, #0
}
 800108c:	4618      	mov	r0, r3
 800108e:	3714      	adds	r7, #20
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr

08001098 <ks_mfcc_init>:
static void ks_mfcc_create_dct_matrix(void);
static void ks_mfcc_create_mel_fbank(void);


int8_t ks_mfcc_init(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b084      	sub	sp, #16
 800109c:	af04      	add	r7, sp, #16
	arm_hamming_f32(windowCoefs, 1024);
 800109e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010a2:	480c      	ldr	r0, [pc, #48]	; (80010d4 <ks_mfcc_init+0x3c>)
 80010a4:	f008 fb0c 	bl	80096c0 <arm_hamming_f32>
//	for (uint32_t i = 0; i < fftLen; i++)
//	{
//		windowCoefs[i] = 0.5 - 0.5 * arm_cos_f32(2 * PI * ((float32_t) i) / ((float32_t) fftLen));
//	}
	ks_mfcc_create_mel_fbank();
 80010a8:	f000 f8da 	bl	8001260 <ks_mfcc_create_mel_fbank>
	ks_mfcc_create_dct_matrix();
 80010ac:	f000 f85c 	bl	8001168 <ks_mfcc_create_dct_matrix>
	arm_mfcc_init_1024_f32(&mfcc, nbMelFilters, nbDctOutputs, dctMatrix, filterPos, filterLengths, packedFilters, windowCoefs);
 80010b0:	4b08      	ldr	r3, [pc, #32]	; (80010d4 <ks_mfcc_init+0x3c>)
 80010b2:	9303      	str	r3, [sp, #12]
 80010b4:	4b08      	ldr	r3, [pc, #32]	; (80010d8 <ks_mfcc_init+0x40>)
 80010b6:	9302      	str	r3, [sp, #8]
 80010b8:	4b08      	ldr	r3, [pc, #32]	; (80010dc <ks_mfcc_init+0x44>)
 80010ba:	9301      	str	r3, [sp, #4]
 80010bc:	4b08      	ldr	r3, [pc, #32]	; (80010e0 <ks_mfcc_init+0x48>)
 80010be:	9300      	str	r3, [sp, #0]
 80010c0:	4b08      	ldr	r3, [pc, #32]	; (80010e4 <ks_mfcc_init+0x4c>)
 80010c2:	220d      	movs	r2, #13
 80010c4:	2114      	movs	r1, #20
 80010c6:	4808      	ldr	r0, [pc, #32]	; (80010e8 <ks_mfcc_init+0x50>)
 80010c8:	f008 fa6a 	bl	80095a0 <arm_mfcc_init_1024_f32>
	return 0;
 80010cc:	2300      	movs	r3, #0
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	20014110 	.word	0x20014110
 80010d8:	20007380 	.word	0x20007380
 80010dc:	200140c0 	.word	0x200140c0
 80010e0:	20012c58 	.word	0x20012c58
 80010e4:	20012ca8 	.word	0x20012ca8
 80010e8:	20008380 	.word	0x20008380

080010ec <ks_mfcc_extract_features>:

int8_t ks_mfcc_extract_features(float32_t *input, float32_t *output)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
 80010f4:	6039      	str	r1, [r7, #0]
	arm_mfcc_f32(&mfcc, input, output, tmpBuf);
 80010f6:	4b05      	ldr	r3, [pc, #20]	; (800110c <ks_mfcc_extract_features+0x20>)
 80010f8:	683a      	ldr	r2, [r7, #0]
 80010fa:	6879      	ldr	r1, [r7, #4]
 80010fc:	4804      	ldr	r0, [pc, #16]	; (8001110 <ks_mfcc_extract_features+0x24>)
 80010fe:	f008 fa63 	bl	80095c8 <arm_mfcc_f32>
	return 0;
 8001102:	2300      	movs	r3, #0
}
 8001104:	4618      	mov	r0, r3
 8001106:	3708      	adds	r7, #8
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	200130b8 	.word	0x200130b8
 8001110:	20008380 	.word	0x20008380

08001114 <ks_mfcc_freq2mel>:

static float32_t ks_mfcc_freq2mel(float32_t freq)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b084      	sub	sp, #16
 8001118:	af00      	add	r7, sp, #0
 800111a:	ed87 0a01 	vstr	s0, [r7, #4]
	float32_t in = (1.0f + freq / 700.0f), out;
 800111e:	ed97 7a01 	vldr	s14, [r7, #4]
 8001122:	eddf 6a0e 	vldr	s13, [pc, #56]	; 800115c <ks_mfcc_freq2mel+0x48>
 8001126:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800112a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800112e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001132:	edc7 7a03 	vstr	s15, [r7, #12]
	arm_vlog_f32(&in, &out, 1);
 8001136:	f107 0108 	add.w	r1, r7, #8
 800113a:	f107 030c 	add.w	r3, r7, #12
 800113e:	2201      	movs	r2, #1
 8001140:	4618      	mov	r0, r3
 8001142:	f007 fb01 	bl	8008748 <arm_vlog_f32>
	return (1127.0f * out);
 8001146:	edd7 7a02 	vldr	s15, [r7, #8]
 800114a:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8001160 <ks_mfcc_freq2mel+0x4c>
 800114e:	ee67 7a87 	vmul.f32	s15, s15, s14

}
 8001152:	eeb0 0a67 	vmov.f32	s0, s15
 8001156:	3710      	adds	r7, #16
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	442f0000 	.word	0x442f0000
 8001160:	448ce000 	.word	0x448ce000
 8001164:	00000000 	.word	0x00000000

08001168 <ks_mfcc_create_dct_matrix>:
	arm_vexp_f32(&in, &out, 1);
	return (700.0f * (out - 1.0f));
}

static void ks_mfcc_create_dct_matrix(void)
{
 8001168:	b5b0      	push	{r4, r5, r7, lr}
 800116a:	b086      	sub	sp, #24
 800116c:	af00      	add	r7, sp, #0
 800116e:	1d3b      	adds	r3, r7, #4
 8001170:	60bb      	str	r3, [r7, #8]
      *pOut = _sqrtf(in);
#elif defined(__GNUC_PYTHON__)
      *pOut = sqrtf(in);
#elif defined ( __GNUC__ )
  #if defined (__VFP_FP__) && !defined(__SOFTFP__)
      __ASM("VSQRT.F32 %0,%1" : "=t"(*pOut) : "t"(in));
 8001172:	eddf 7a37 	vldr	s15, [pc, #220]	; 8001250 <ks_mfcc_create_dct_matrix+0xe8>
 8001176:	eef1 7ae7 	vsqrt.f32	s15, s15
 800117a:	68bb      	ldr	r3, [r7, #8]
 800117c:	edc3 7a00 	vstr	s15, [r3]
	//arm_dct4_init_f32(S, S_RFFT, S_CFFT, N, Nby2, normalize)
	float32_t norm_mels;
	arm_sqrt_f32(2.0f/nbMelFilters, &norm_mels);
	for (int mel_idx = 0; mel_idx < nbMelFilters; mel_idx++)
 8001180:	2300      	movs	r3, #0
 8001182:	617b      	str	r3, [r7, #20]
 8001184:	e057      	b.n	8001236 <ks_mfcc_create_dct_matrix+0xce>
	{
		for (int dct_idx = 0; dct_idx < nbDctOutputs; dct_idx++)
 8001186:	2300      	movs	r3, #0
 8001188:	613b      	str	r3, [r7, #16]
 800118a:	e04e      	b.n	800122a <ks_mfcc_create_dct_matrix+0xc2>
		{
			float s = (mel_idx + 0.5) / nbMelFilters;
 800118c:	6978      	ldr	r0, [r7, #20]
 800118e:	f7ff f98d 	bl	80004ac <__aeabi_i2d>
 8001192:	f04f 0200 	mov.w	r2, #0
 8001196:	4b2f      	ldr	r3, [pc, #188]	; (8001254 <ks_mfcc_create_dct_matrix+0xec>)
 8001198:	f7ff f83c 	bl	8000214 <__adddf3>
 800119c:	4602      	mov	r2, r0
 800119e:	460b      	mov	r3, r1
 80011a0:	4610      	mov	r0, r2
 80011a2:	4619      	mov	r1, r3
 80011a4:	f04f 0200 	mov.w	r2, #0
 80011a8:	4b2b      	ldr	r3, [pc, #172]	; (8001258 <ks_mfcc_create_dct_matrix+0xf0>)
 80011aa:	f7ff fb13 	bl	80007d4 <__aeabi_ddiv>
 80011ae:	4602      	mov	r2, r0
 80011b0:	460b      	mov	r3, r1
 80011b2:	4610      	mov	r0, r2
 80011b4:	4619      	mov	r1, r3
 80011b6:	f7ff fc7d 	bl	8000ab4 <__aeabi_d2f>
 80011ba:	4603      	mov	r3, r0
 80011bc:	60fb      	str	r3, [r7, #12]
			dctMatrix[dct_idx * nbMelFilters + mel_idx] = (arm_cos_f32(dct_idx * M_PI * s) * norm_mels);
 80011be:	6938      	ldr	r0, [r7, #16]
 80011c0:	f7ff f974 	bl	80004ac <__aeabi_i2d>
 80011c4:	a320      	add	r3, pc, #128	; (adr r3, 8001248 <ks_mfcc_create_dct_matrix+0xe0>)
 80011c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ca:	f7ff f9d9 	bl	8000580 <__aeabi_dmul>
 80011ce:	4602      	mov	r2, r0
 80011d0:	460b      	mov	r3, r1
 80011d2:	4614      	mov	r4, r2
 80011d4:	461d      	mov	r5, r3
 80011d6:	68f8      	ldr	r0, [r7, #12]
 80011d8:	f7ff f97a 	bl	80004d0 <__aeabi_f2d>
 80011dc:	4602      	mov	r2, r0
 80011de:	460b      	mov	r3, r1
 80011e0:	4620      	mov	r0, r4
 80011e2:	4629      	mov	r1, r5
 80011e4:	f7ff f9cc 	bl	8000580 <__aeabi_dmul>
 80011e8:	4602      	mov	r2, r0
 80011ea:	460b      	mov	r3, r1
 80011ec:	4610      	mov	r0, r2
 80011ee:	4619      	mov	r1, r3
 80011f0:	f7ff fc60 	bl	8000ab4 <__aeabi_d2f>
 80011f4:	4603      	mov	r3, r0
 80011f6:	ee00 3a10 	vmov	s0, r3
 80011fa:	f007 fa63 	bl	80086c4 <arm_cos_f32>
 80011fe:	eeb0 7a40 	vmov.f32	s14, s0
 8001202:	edd7 7a01 	vldr	s15, [r7, #4]
 8001206:	693a      	ldr	r2, [r7, #16]
 8001208:	4613      	mov	r3, r2
 800120a:	009b      	lsls	r3, r3, #2
 800120c:	4413      	add	r3, r2
 800120e:	009b      	lsls	r3, r3, #2
 8001210:	461a      	mov	r2, r3
 8001212:	697b      	ldr	r3, [r7, #20]
 8001214:	4413      	add	r3, r2
 8001216:	ee67 7a27 	vmul.f32	s15, s14, s15
 800121a:	4a10      	ldr	r2, [pc, #64]	; (800125c <ks_mfcc_create_dct_matrix+0xf4>)
 800121c:	009b      	lsls	r3, r3, #2
 800121e:	4413      	add	r3, r2
 8001220:	edc3 7a00 	vstr	s15, [r3]
		for (int dct_idx = 0; dct_idx < nbDctOutputs; dct_idx++)
 8001224:	693b      	ldr	r3, [r7, #16]
 8001226:	3301      	adds	r3, #1
 8001228:	613b      	str	r3, [r7, #16]
 800122a:	693b      	ldr	r3, [r7, #16]
 800122c:	2b0c      	cmp	r3, #12
 800122e:	ddad      	ble.n	800118c <ks_mfcc_create_dct_matrix+0x24>
	for (int mel_idx = 0; mel_idx < nbMelFilters; mel_idx++)
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	3301      	adds	r3, #1
 8001234:	617b      	str	r3, [r7, #20]
 8001236:	697b      	ldr	r3, [r7, #20]
 8001238:	2b13      	cmp	r3, #19
 800123a:	dda4      	ble.n	8001186 <ks_mfcc_create_dct_matrix+0x1e>
		}
	}
}
 800123c:	bf00      	nop
 800123e:	bf00      	nop
 8001240:	3718      	adds	r7, #24
 8001242:	46bd      	mov	sp, r7
 8001244:	bdb0      	pop	{r4, r5, r7, pc}
 8001246:	bf00      	nop
 8001248:	54442d18 	.word	0x54442d18
 800124c:	400921fb 	.word	0x400921fb
 8001250:	3dcccccd 	.word	0x3dcccccd
 8001254:	3fe00000 	.word	0x3fe00000
 8001258:	40340000 	.word	0x40340000
 800125c:	20012ca8 	.word	0x20012ca8

08001260 <ks_mfcc_create_mel_fbank>:

float32_t filters[nbMelFilters][fftLen / 2 + 1];
float32_t spectrogram_mel[fftLen / 2];

static void ks_mfcc_create_mel_fbank(void)
{
 8001260:	b590      	push	{r4, r7, lr}
 8001262:	b093      	sub	sp, #76	; 0x4c
 8001264:	af00      	add	r7, sp, #0
	int32_t half_fft_size = fftLen / 2;
 8001266:	f44f 7300 	mov.w	r3, #512	; 0x200
 800126a:	627b      	str	r3, [r7, #36]	; 0x24


	float32_t fmin_mel = ks_mfcc_freq2mel(MEL_LOW_FREQ);
 800126c:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 8001270:	f7ff ff50 	bl	8001114 <ks_mfcc_freq2mel>
 8001274:	ed87 0a08 	vstr	s0, [r7, #32]
	float32_t fmax_mel = ks_mfcc_freq2mel(MEL_HIGH_FREQ);
 8001278:	ed9f 0a85 	vldr	s0, [pc, #532]	; 8001490 <ks_mfcc_create_mel_fbank+0x230>
 800127c:	f7ff ff4a 	bl	8001114 <ks_mfcc_freq2mel>
 8001280:	ed87 0a07 	vstr	s0, [r7, #28]
	float32_t freq_step = ((float32_t)SAMP_FREQ / (float32_t)fftLen);
 8001284:	4b83      	ldr	r3, [pc, #524]	; (8001494 <ks_mfcc_create_mel_fbank+0x234>)
 8001286:	61bb      	str	r3, [r7, #24]

	for (uint32_t freq_idx = 1; freq_idx < half_fft_size + 1; freq_idx++)
 8001288:	2301      	movs	r3, #1
 800128a:	647b      	str	r3, [r7, #68]	; 0x44
 800128c:	e01a      	b.n	80012c4 <ks_mfcc_create_mel_fbank+0x64>
	{
		float32_t linear_freq = freq_idx * freq_step;
 800128e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001290:	ee07 3a90 	vmov	s15, r3
 8001294:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001298:	ed97 7a06 	vldr	s14, [r7, #24]
 800129c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012a0:	edc7 7a00 	vstr	s15, [r7]
		spectrogram_mel[freq_idx - 1] = ks_mfcc_freq2mel(linear_freq);
 80012a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80012a6:	1e5c      	subs	r4, r3, #1
 80012a8:	ed97 0a00 	vldr	s0, [r7]
 80012ac:	f7ff ff32 	bl	8001114 <ks_mfcc_freq2mel>
 80012b0:	eef0 7a40 	vmov.f32	s15, s0
 80012b4:	4a78      	ldr	r2, [pc, #480]	; (8001498 <ks_mfcc_create_mel_fbank+0x238>)
 80012b6:	00a3      	lsls	r3, r4, #2
 80012b8:	4413      	add	r3, r2
 80012ba:	edc3 7a00 	vstr	s15, [r3]
	for (uint32_t freq_idx = 1; freq_idx < half_fft_size + 1; freq_idx++)
 80012be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80012c0:	3301      	adds	r3, #1
 80012c2:	647b      	str	r3, [r7, #68]	; 0x44
 80012c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012c6:	3301      	adds	r3, #1
 80012c8:	461a      	mov	r2, r3
 80012ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80012cc:	4293      	cmp	r3, r2
 80012ce:	d3de      	bcc.n	800128e <ks_mfcc_create_mel_fbank+0x2e>
	}

	float32_t mel_step = (fmax_mel - fmin_mel) / (nbMelFilters + 1);
 80012d0:	ed97 7a07 	vldr	s14, [r7, #28]
 80012d4:	edd7 7a08 	vldr	s15, [r7, #32]
 80012d8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80012dc:	eef3 6a05 	vmov.f32	s13, #53	; 0x41a80000  21.0
 80012e0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012e4:	edc7 7a05 	vstr	s15, [r7, #20]
	uint32_t totalLen = 0;
 80012e8:	2300      	movs	r3, #0
 80012ea:	643b      	str	r3, [r7, #64]	; 0x40
	for (uint32_t mel_idx = 0; mel_idx < nbMelFilters; mel_idx++)
 80012ec:	2300      	movs	r3, #0
 80012ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80012f0:	e0bf      	b.n	8001472 <ks_mfcc_create_mel_fbank+0x212>
	{
		float32_t mel = mel_step * mel_idx + fmin_mel;
 80012f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80012f4:	ee07 3a90 	vmov	s15, r3
 80012f8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80012fc:	edd7 7a05 	vldr	s15, [r7, #20]
 8001300:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001304:	ed97 7a08 	vldr	s14, [r7, #32]
 8001308:	ee77 7a27 	vadd.f32	s15, s14, s15
 800130c:	edc7 7a04 	vstr	s15, [r7, #16]
		bool startFound = false;
 8001310:	2300      	movs	r3, #0
 8001312:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		uint32_t startPos = 0, endPos = 0, curLen = 0;
 8001316:	2300      	movs	r3, #0
 8001318:	637b      	str	r3, [r7, #52]	; 0x34
 800131a:	2300      	movs	r3, #0
 800131c:	633b      	str	r3, [r7, #48]	; 0x30
 800131e:	2300      	movs	r3, #0
 8001320:	60fb      	str	r3, [r7, #12]
		for (uint32_t freq_idx = 0; freq_idx < half_fft_size; freq_idx++)
 8001322:	2300      	movs	r3, #0
 8001324:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001326:	e075      	b.n	8001414 <ks_mfcc_create_mel_fbank+0x1b4>
		{
			float32_t upper = (spectrogram_mel[freq_idx] - mel) / mel_step;
 8001328:	4a5b      	ldr	r2, [pc, #364]	; (8001498 <ks_mfcc_create_mel_fbank+0x238>)
 800132a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800132c:	009b      	lsls	r3, r3, #2
 800132e:	4413      	add	r3, r2
 8001330:	ed93 7a00 	vldr	s14, [r3]
 8001334:	edd7 7a04 	vldr	s15, [r7, #16]
 8001338:	ee77 6a67 	vsub.f32	s13, s14, s15
 800133c:	ed97 7a05 	vldr	s14, [r7, #20]
 8001340:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001344:	edc7 7a02 	vstr	s15, [r7, #8]
			float32_t lower = ((mel + 2.0f * mel_step) - spectrogram_mel[freq_idx]) / mel_step; //+ 2.0f;
 8001348:	edd7 7a05 	vldr	s15, [r7, #20]
 800134c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001350:	edd7 7a04 	vldr	s15, [r7, #16]
 8001354:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001358:	4a4f      	ldr	r2, [pc, #316]	; (8001498 <ks_mfcc_create_mel_fbank+0x238>)
 800135a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800135c:	009b      	lsls	r3, r3, #2
 800135e:	4413      	add	r3, r2
 8001360:	edd3 7a00 	vldr	s15, [r3]
 8001364:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001368:	ed97 7a05 	vldr	s14, [r7, #20]
 800136c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001370:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
			if (lower < 1e-5)
 8001374:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001376:	f7ff f8ab 	bl	80004d0 <__aeabi_f2d>
 800137a:	a343      	add	r3, pc, #268	; (adr r3, 8001488 <ks_mfcc_create_mel_fbank+0x228>)
 800137c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001380:	f7ff fb70 	bl	8000a64 <__aeabi_dcmplt>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d002      	beq.n	8001390 <ks_mfcc_create_mel_fbank+0x130>
			{
				lower = 0;
 800138a:	f04f 0300 	mov.w	r3, #0
 800138e:	62bb      	str	r3, [r7, #40]	; 0x28
			}
			float32_t filter_val = fmaxf(0.0f, fminf(upper, lower));
 8001390:	edd7 0a0a 	vldr	s1, [r7, #40]	; 0x28
 8001394:	ed97 0a02 	vldr	s0, [r7, #8]
 8001398:	f008 fcc9 	bl	8009d2e <fminf>
 800139c:	eef0 7a40 	vmov.f32	s15, s0
 80013a0:	eef0 0a67 	vmov.f32	s1, s15
 80013a4:	ed9f 0a3d 	vldr	s0, [pc, #244]	; 800149c <ks_mfcc_create_mel_fbank+0x23c>
 80013a8:	f008 fca6 	bl	8009cf8 <fmaxf>
 80013ac:	ed87 0a01 	vstr	s0, [r7, #4]

			filters[mel_idx][freq_idx + 1] = filter_val;
 80013b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013b2:	1c59      	adds	r1, r3, #1
 80013b4:	483a      	ldr	r0, [pc, #232]	; (80014a0 <ks_mfcc_create_mel_fbank+0x240>)
 80013b6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80013b8:	4613      	mov	r3, r2
 80013ba:	025b      	lsls	r3, r3, #9
 80013bc:	4413      	add	r3, r2
 80013be:	440b      	add	r3, r1
 80013c0:	009b      	lsls	r3, r3, #2
 80013c2:	4403      	add	r3, r0
 80013c4:	687a      	ldr	r2, [r7, #4]
 80013c6:	601a      	str	r2, [r3, #0]
			if (!startFound && (filter_val != 0.0f))
 80013c8:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80013cc:	f083 0301 	eor.w	r3, r3, #1
 80013d0:	b2db      	uxtb	r3, r3
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d00d      	beq.n	80013f2 <ks_mfcc_create_mel_fbank+0x192>
 80013d6:	edd7 7a01 	vldr	s15, [r7, #4]
 80013da:	eef5 7a40 	vcmp.f32	s15, #0.0
 80013de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013e2:	d006      	beq.n	80013f2 <ks_mfcc_create_mel_fbank+0x192>
			{
				startFound = true;
 80013e4:	2301      	movs	r3, #1
 80013e6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
				startPos = freq_idx + 1;
 80013ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013ec:	3301      	adds	r3, #1
 80013ee:	637b      	str	r3, [r7, #52]	; 0x34
 80013f0:	e00d      	b.n	800140e <ks_mfcc_create_mel_fbank+0x1ae>
			}

			else if (startFound && (filter_val == 0.0f))
 80013f2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d009      	beq.n	800140e <ks_mfcc_create_mel_fbank+0x1ae>
 80013fa:	edd7 7a01 	vldr	s15, [r7, #4]
 80013fe:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001402:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001406:	d102      	bne.n	800140e <ks_mfcc_create_mel_fbank+0x1ae>
			{
				endPos = freq_idx;
 8001408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800140a:	633b      	str	r3, [r7, #48]	; 0x30
				break;
 800140c:	e006      	b.n	800141c <ks_mfcc_create_mel_fbank+0x1bc>
		for (uint32_t freq_idx = 0; freq_idx < half_fft_size; freq_idx++)
 800140e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001410:	3301      	adds	r3, #1
 8001412:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001416:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001418:	429a      	cmp	r2, r3
 800141a:	d385      	bcc.n	8001328 <ks_mfcc_create_mel_fbank+0xc8>
			}
		}
		curLen = endPos - startPos + 1;
 800141c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800141e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001420:	1ad3      	subs	r3, r2, r3
 8001422:	3301      	adds	r3, #1
 8001424:	60fb      	str	r3, [r7, #12]
		filterLengths[mel_idx] = (endPos - startPos + 1);
 8001426:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001428:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800142a:	1ad3      	subs	r3, r2, r3
 800142c:	1c5a      	adds	r2, r3, #1
 800142e:	491d      	ldr	r1, [pc, #116]	; (80014a4 <ks_mfcc_create_mel_fbank+0x244>)
 8001430:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001432:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		filterPos[mel_idx] = startPos;
 8001436:	491c      	ldr	r1, [pc, #112]	; (80014a8 <ks_mfcc_create_mel_fbank+0x248>)
 8001438:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800143a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800143c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
//		{
//			//printf("Memory allocation failed\n");
//			return -1;
//		}

		memcpy(packedFilters + totalLen, &filters[mel_idx][startPos], curLen * sizeof(float32_t));
 8001440:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001442:	009b      	lsls	r3, r3, #2
 8001444:	4a19      	ldr	r2, [pc, #100]	; (80014ac <ks_mfcc_create_mel_fbank+0x24c>)
 8001446:	1898      	adds	r0, r3, r2
 8001448:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800144a:	4613      	mov	r3, r2
 800144c:	025b      	lsls	r3, r3, #9
 800144e:	4413      	add	r3, r2
 8001450:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001452:	4413      	add	r3, r2
 8001454:	009b      	lsls	r3, r3, #2
 8001456:	4a12      	ldr	r2, [pc, #72]	; (80014a0 <ks_mfcc_create_mel_fbank+0x240>)
 8001458:	1899      	adds	r1, r3, r2
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	009b      	lsls	r3, r3, #2
 800145e:	461a      	mov	r2, r3
 8001460:	f008 fa6a 	bl	8009938 <memcpy>
		totalLen += curLen;
 8001464:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	4413      	add	r3, r2
 800146a:	643b      	str	r3, [r7, #64]	; 0x40
	for (uint32_t mel_idx = 0; mel_idx < nbMelFilters; mel_idx++)
 800146c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800146e:	3301      	adds	r3, #1
 8001470:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001472:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001474:	2b13      	cmp	r3, #19
 8001476:	f67f af3c 	bls.w	80012f2 <ks_mfcc_create_mel_fbank+0x92>
	}
}
 800147a:	bf00      	nop
 800147c:	bf00      	nop
 800147e:	374c      	adds	r7, #76	; 0x4c
 8001480:	46bd      	mov	sp, r7
 8001482:	bd90      	pop	{r4, r7, pc}
 8001484:	f3af 8000 	nop.w
 8001488:	88e368f1 	.word	0x88e368f1
 800148c:	3ee4f8b5 	.word	0x3ee4f8b5
 8001490:	457a0000 	.word	0x457a0000
 8001494:	40fa0000 	.word	0x40fa0000
 8001498:	20008408 	.word	0x20008408
 800149c:	00000000 	.word	0x00000000
 80014a0:	20008c08 	.word	0x20008c08
 80014a4:	200140c0 	.word	0x200140c0
 80014a8:	20012c58 	.word	0x20012c58
 80014ac:	20007380 	.word	0x20007380

080014b0 <LIB_AUDIO_Init>:
  * @brief Initializes SAI2 and CODEC for 16KHz audio frequency
  * @param None
  * @retval 0 if successfully initialized
  */
int8_t LIB_AUDIO_Init(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
	if (BSP_AUDIO_IN_Init(AUDIO_FREQUENCY_16K, DEFAULT_AUDIO_IN_BIT_RESOLUTION, 1) != AUDIO_OK)
 80014b4:	2201      	movs	r2, #1
 80014b6:	2110      	movs	r1, #16
 80014b8:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
 80014bc:	f002 fe08 	bl	80040d0 <BSP_AUDIO_IN_Init>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d002      	beq.n	80014cc <LIB_AUDIO_Init+0x1c>
	{
		return ERROR;
 80014c6:	f04f 33ff 	mov.w	r3, #4294967295
 80014ca:	e000      	b.n	80014ce <LIB_AUDIO_Init+0x1e>
	}
	return OK;
 80014cc:	2300      	movs	r3, #0
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	bd80      	pop	{r7, pc}
	...

080014d4 <LIB_AUDIO_StartRecording>:
  * @param pData   	Pointer to data buffer to be filled with audio data
  * @param length	Number of data in quantity (not bytes!)
  * @retval None
  */
void LIB_AUDIO_StartRecording(uint16_t *pData, uint32_t length)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
 80014dc:	6039      	str	r1, [r7, #0]
	__remaining = length;
 80014de:	4a18      	ldr	r2, [pc, #96]	; (8001540 <LIB_AUDIO_StartRecording+0x6c>)
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	6013      	str	r3, [r2, #0]
	__pRemaining = pData;
 80014e4:	4a17      	ldr	r2, [pc, #92]	; (8001544 <LIB_AUDIO_StartRecording+0x70>)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6013      	str	r3, [r2, #0]
	__pData = pData;
 80014ea:	4a17      	ldr	r2, [pc, #92]	; (8001548 <LIB_AUDIO_StartRecording+0x74>)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6013      	str	r3, [r2, #0]
	if (__remaining / UINT16_MAX)
 80014f0:	4b13      	ldr	r3, [pc, #76]	; (8001540 <LIB_AUDIO_StartRecording+0x6c>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80014f8:	4293      	cmp	r3, r2
 80014fa:	d911      	bls.n	8001520 <LIB_AUDIO_StartRecording+0x4c>
	{
		BSP_AUDIO_IN_Record(pData, UINT16_MAX);
 80014fc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001500:	6878      	ldr	r0, [r7, #4]
 8001502:	f002 fe63 	bl	80041cc <BSP_AUDIO_IN_Record>
		__remaining = __remaining - UINT16_MAX;
 8001506:	4b0e      	ldr	r3, [pc, #56]	; (8001540 <LIB_AUDIO_StartRecording+0x6c>)
 8001508:	681a      	ldr	r2, [r3, #0]
 800150a:	4b10      	ldr	r3, [pc, #64]	; (800154c <LIB_AUDIO_StartRecording+0x78>)
 800150c:	4413      	add	r3, r2
 800150e:	4a0c      	ldr	r2, [pc, #48]	; (8001540 <LIB_AUDIO_StartRecording+0x6c>)
 8001510:	6013      	str	r3, [r2, #0]
		__pRemaining = __pRemaining + UINT16_MAX;
 8001512:	4b0c      	ldr	r3, [pc, #48]	; (8001544 <LIB_AUDIO_StartRecording+0x70>)
 8001514:	681a      	ldr	r2, [r3, #0]
 8001516:	4b0e      	ldr	r3, [pc, #56]	; (8001550 <LIB_AUDIO_StartRecording+0x7c>)
 8001518:	4413      	add	r3, r2
 800151a:	4a0a      	ldr	r2, [pc, #40]	; (8001544 <LIB_AUDIO_StartRecording+0x70>)
 800151c:	6013      	str	r3, [r2, #0]
 800151e:	e008      	b.n	8001532 <LIB_AUDIO_StartRecording+0x5e>
	}
	else
	{
		BSP_AUDIO_IN_Record(pData, __remaining);
 8001520:	4b07      	ldr	r3, [pc, #28]	; (8001540 <LIB_AUDIO_StartRecording+0x6c>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4619      	mov	r1, r3
 8001526:	6878      	ldr	r0, [r7, #4]
 8001528:	f002 fe50 	bl	80041cc <BSP_AUDIO_IN_Record>
		__remaining = 0;
 800152c:	4b04      	ldr	r3, [pc, #16]	; (8001540 <LIB_AUDIO_StartRecording+0x6c>)
 800152e:	2200      	movs	r2, #0
 8001530:	601a      	str	r2, [r3, #0]
	}
	AudioRecordComplete = 0;
 8001532:	4b08      	ldr	r3, [pc, #32]	; (8001554 <LIB_AUDIO_StartRecording+0x80>)
 8001534:	2200      	movs	r2, #0
 8001536:	701a      	strb	r2, [r3, #0]
}
 8001538:	bf00      	nop
 800153a:	3708      	adds	r7, #8
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}
 8001540:	200000c8 	.word	0x200000c8
 8001544:	200000cc 	.word	0x200000cc
 8001548:	200000d0 	.word	0x200000d0
 800154c:	ffff0001 	.word	0xffff0001
 8001550:	0001fffe 	.word	0x0001fffe
 8001554:	200000c4 	.word	0x200000c4

08001558 <LIB_AUDIO_PollForRecording>:
  * @param timeout Timeout in milliseconds
  * @retval 0 if the audio data is successfully received
  * 		-1 if timeout occured
  */
int8_t LIB_AUDIO_PollForRecording(uint16_t timeout)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b084      	sub	sp, #16
 800155c:	af00      	add	r7, sp, #0
 800155e:	4603      	mov	r3, r0
 8001560:	80fb      	strh	r3, [r7, #6]
	uint32_t tick = HAL_GetTick();
 8001562:	f003 f85f 	bl	8004624 <HAL_GetTick>
 8001566:	60f8      	str	r0, [r7, #12]
	while(HAL_GetTick() - tick < timeout)
 8001568:	e006      	b.n	8001578 <LIB_AUDIO_PollForRecording+0x20>
	{
		if (AudioRecordComplete == 1)
 800156a:	4b0a      	ldr	r3, [pc, #40]	; (8001594 <LIB_AUDIO_PollForRecording+0x3c>)
 800156c:	781b      	ldrb	r3, [r3, #0]
 800156e:	b2db      	uxtb	r3, r3
 8001570:	2b01      	cmp	r3, #1
 8001572:	d101      	bne.n	8001578 <LIB_AUDIO_PollForRecording+0x20>
		{
			return OK;
 8001574:	2300      	movs	r3, #0
 8001576:	e009      	b.n	800158c <LIB_AUDIO_PollForRecording+0x34>
	while(HAL_GetTick() - tick < timeout)
 8001578:	f003 f854 	bl	8004624 <HAL_GetTick>
 800157c:	4602      	mov	r2, r0
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	1ad2      	subs	r2, r2, r3
 8001582:	88fb      	ldrh	r3, [r7, #6]
 8001584:	429a      	cmp	r2, r3
 8001586:	d3f0      	bcc.n	800156a <LIB_AUDIO_PollForRecording+0x12>
		}
	}
	return ERROR;
 8001588:	f04f 33ff 	mov.w	r3, #4294967295
}
 800158c:	4618      	mov	r0, r3
 800158e:	3710      	adds	r7, #16
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}
 8001594:	200000c4 	.word	0x200000c4

08001598 <BSP_AUDIO_IN_TransferComplete_CallBack>:
  * @brief Callback invoked by the HAL library when transfer is complete
  * @param None
  * @retval None
  */
void BSP_AUDIO_IN_TransferComplete_CallBack(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0
	BSP_AUDIO_IN_Stop(CODEC_PDWN_SW);
 800159c:	2002      	movs	r0, #2
 800159e:	f002 fe2d 	bl	80041fc <BSP_AUDIO_IN_Stop>
	if (__remaining / UINT16_MAX)
 80015a2:	4b1b      	ldr	r3, [pc, #108]	; (8001610 <BSP_AUDIO_IN_TransferComplete_CallBack+0x78>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d913      	bls.n	80015d6 <BSP_AUDIO_IN_TransferComplete_CallBack+0x3e>
	{

		BSP_AUDIO_IN_Record(__pRemaining, UINT16_MAX);
 80015ae:	4b19      	ldr	r3, [pc, #100]	; (8001614 <BSP_AUDIO_IN_TransferComplete_CallBack+0x7c>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80015b6:	4618      	mov	r0, r3
 80015b8:	f002 fe08 	bl	80041cc <BSP_AUDIO_IN_Record>
		__pRemaining = __pRemaining + UINT16_MAX;
 80015bc:	4b15      	ldr	r3, [pc, #84]	; (8001614 <BSP_AUDIO_IN_TransferComplete_CallBack+0x7c>)
 80015be:	681a      	ldr	r2, [r3, #0]
 80015c0:	4b15      	ldr	r3, [pc, #84]	; (8001618 <BSP_AUDIO_IN_TransferComplete_CallBack+0x80>)
 80015c2:	4413      	add	r3, r2
 80015c4:	4a13      	ldr	r2, [pc, #76]	; (8001614 <BSP_AUDIO_IN_TransferComplete_CallBack+0x7c>)
 80015c6:	6013      	str	r3, [r2, #0]
		__remaining = __remaining - UINT16_MAX;
 80015c8:	4b11      	ldr	r3, [pc, #68]	; (8001610 <BSP_AUDIO_IN_TransferComplete_CallBack+0x78>)
 80015ca:	681a      	ldr	r2, [r3, #0]
 80015cc:	4b13      	ldr	r3, [pc, #76]	; (800161c <BSP_AUDIO_IN_TransferComplete_CallBack+0x84>)
 80015ce:	4413      	add	r3, r2
 80015d0:	4a0f      	ldr	r2, [pc, #60]	; (8001610 <BSP_AUDIO_IN_TransferComplete_CallBack+0x78>)
 80015d2:	6013      	str	r3, [r2, #0]
	}
	else
	{
		AudioRecordComplete = 1;
	}
}
 80015d4:	e01a      	b.n	800160c <BSP_AUDIO_IN_TransferComplete_CallBack+0x74>
	else if(__remaining % UINT16_MAX)
 80015d6:	4b0e      	ldr	r3, [pc, #56]	; (8001610 <BSP_AUDIO_IN_TransferComplete_CallBack+0x78>)
 80015d8:	6819      	ldr	r1, [r3, #0]
 80015da:	4b11      	ldr	r3, [pc, #68]	; (8001620 <BSP_AUDIO_IN_TransferComplete_CallBack+0x88>)
 80015dc:	fba3 2301 	umull	r2, r3, r3, r1
 80015e0:	0bda      	lsrs	r2, r3, #15
 80015e2:	4613      	mov	r3, r2
 80015e4:	041b      	lsls	r3, r3, #16
 80015e6:	1a9b      	subs	r3, r3, r2
 80015e8:	1aca      	subs	r2, r1, r3
 80015ea:	2a00      	cmp	r2, #0
 80015ec:	d00b      	beq.n	8001606 <BSP_AUDIO_IN_TransferComplete_CallBack+0x6e>
		BSP_AUDIO_IN_Record(__pRemaining, __remaining);
 80015ee:	4b09      	ldr	r3, [pc, #36]	; (8001614 <BSP_AUDIO_IN_TransferComplete_CallBack+0x7c>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4a07      	ldr	r2, [pc, #28]	; (8001610 <BSP_AUDIO_IN_TransferComplete_CallBack+0x78>)
 80015f4:	6812      	ldr	r2, [r2, #0]
 80015f6:	4611      	mov	r1, r2
 80015f8:	4618      	mov	r0, r3
 80015fa:	f002 fde7 	bl	80041cc <BSP_AUDIO_IN_Record>
		__remaining = 0;
 80015fe:	4b04      	ldr	r3, [pc, #16]	; (8001610 <BSP_AUDIO_IN_TransferComplete_CallBack+0x78>)
 8001600:	2200      	movs	r2, #0
 8001602:	601a      	str	r2, [r3, #0]
}
 8001604:	e002      	b.n	800160c <BSP_AUDIO_IN_TransferComplete_CallBack+0x74>
		AudioRecordComplete = 1;
 8001606:	4b07      	ldr	r3, [pc, #28]	; (8001624 <BSP_AUDIO_IN_TransferComplete_CallBack+0x8c>)
 8001608:	2201      	movs	r2, #1
 800160a:	701a      	strb	r2, [r3, #0]
}
 800160c:	bf00      	nop
 800160e:	bd80      	pop	{r7, pc}
 8001610:	200000c8 	.word	0x200000c8
 8001614:	200000cc 	.word	0x200000cc
 8001618:	0001fffe 	.word	0x0001fffe
 800161c:	ffff0001 	.word	0xffff0001
 8001620:	80008001 	.word	0x80008001
 8001624:	200000c4 	.word	0x200000c4

08001628 <DMA2_Stream7_IRQHandler>:
  * @brief DMA2 Stream 7 interrupt handler (DMA2_Stream7_IRQHandler)
  * @param None
  * @retval None
  */
void AUDIO_IN_SAIx_DMAx_IRQHandler(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(haudio_in_sai.hdmarx);
 800162c:	4b03      	ldr	r3, [pc, #12]	; (800163c <DMA2_Stream7_IRQHandler+0x14>)
 800162e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001630:	4618      	mov	r0, r3
 8001632:	f003 fb15 	bl	8004c60 <HAL_DMA_IRQHandler>
}
 8001636:	bf00      	nop
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	2000723c 	.word	0x2000723c

08001640 <LIB_SERIAL_Transmit>:
  * @param length	Number of data in quantity (not bytes!)
  * @param type 	Choose from SERIAL_DataTypeDef enum
  * @retval 0 if successfully transmitted
  */
int8_t LIB_SERIAL_Transmit(void *pData, uint32_t length, SERIAL_DataTypeDef type)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b08a      	sub	sp, #40	; 0x28
 8001644:	af00      	add	r7, sp, #0
 8001646:	60f8      	str	r0, [r7, #12]
 8001648:	60b9      	str	r1, [r7, #8]
 800164a:	4613      	mov	r3, r2
 800164c:	71fb      	strb	r3, [r7, #7]
	uint8_t __header[3] = "STW", __count = 0;
 800164e:	4a44      	ldr	r2, [pc, #272]	; (8001760 <LIB_SERIAL_Transmit+0x120>)
 8001650:	f107 0314 	add.w	r3, r7, #20
 8001654:	6812      	ldr	r2, [r2, #0]
 8001656:	4611      	mov	r1, r2
 8001658:	8019      	strh	r1, [r3, #0]
 800165a:	3302      	adds	r3, #2
 800165c:	0c12      	lsrs	r2, r2, #16
 800165e:	701a      	strb	r2, [r3, #0]
 8001660:	2300      	movs	r3, #0
 8001662:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint32_t __length = 0;
 8001666:	2300      	movs	r3, #0
 8001668:	613b      	str	r3, [r7, #16]
	uint16_t __quotient = 0, __remainder = 0;
 800166a:	2300      	movs	r3, #0
 800166c:	83fb      	strh	r3, [r7, #30]
 800166e:	2300      	movs	r3, #0
 8001670:	83bb      	strh	r3, [r7, #28]
	uint16_t divisor = UINT16_MAX;
 8001672:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001676:	837b      	strh	r3, [r7, #26]
	uint8_t * __pData = (uint8_t*) pData;
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	623b      	str	r3, [r7, #32]
	if ((type == TYPE_S8) || (type == TYPE_U8))
 800167c:	79fb      	ldrb	r3, [r7, #7]
 800167e:	2b02      	cmp	r3, #2
 8001680:	d002      	beq.n	8001688 <LIB_SERIAL_Transmit+0x48>
 8001682:	79fb      	ldrb	r3, [r7, #7]
 8001684:	2b01      	cmp	r3, #1
 8001686:	d102      	bne.n	800168e <LIB_SERIAL_Transmit+0x4e>
	{
		__length = length;
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	613b      	str	r3, [r7, #16]
 800168c:	e019      	b.n	80016c2 <LIB_SERIAL_Transmit+0x82>
	}
	else if ((type == TYPE_S16) || (type == TYPE_U16))
 800168e:	79fb      	ldrb	r3, [r7, #7]
 8001690:	2b04      	cmp	r3, #4
 8001692:	d002      	beq.n	800169a <LIB_SERIAL_Transmit+0x5a>
 8001694:	79fb      	ldrb	r3, [r7, #7]
 8001696:	2b03      	cmp	r3, #3
 8001698:	d103      	bne.n	80016a2 <LIB_SERIAL_Transmit+0x62>
	{
		__length = length * 2;
 800169a:	68bb      	ldr	r3, [r7, #8]
 800169c:	005b      	lsls	r3, r3, #1
 800169e:	613b      	str	r3, [r7, #16]
 80016a0:	e00f      	b.n	80016c2 <LIB_SERIAL_Transmit+0x82>
	}
	else if ((type == TYPE_S32) || (type == TYPE_U32) || (type == TYPE_F32))
 80016a2:	79fb      	ldrb	r3, [r7, #7]
 80016a4:	2b06      	cmp	r3, #6
 80016a6:	d005      	beq.n	80016b4 <LIB_SERIAL_Transmit+0x74>
 80016a8:	79fb      	ldrb	r3, [r7, #7]
 80016aa:	2b05      	cmp	r3, #5
 80016ac:	d002      	beq.n	80016b4 <LIB_SERIAL_Transmit+0x74>
 80016ae:	79fb      	ldrb	r3, [r7, #7]
 80016b0:	2b07      	cmp	r3, #7
 80016b2:	d103      	bne.n	80016bc <LIB_SERIAL_Transmit+0x7c>
	{
		__length = length * 4;
 80016b4:	68bb      	ldr	r3, [r7, #8]
 80016b6:	009b      	lsls	r3, r3, #2
 80016b8:	613b      	str	r3, [r7, #16]
 80016ba:	e002      	b.n	80016c2 <LIB_SERIAL_Transmit+0x82>
	}
	else
	{
		return SERIAL_ERROR;
 80016bc:	f04f 33ff 	mov.w	r3, #4294967295
 80016c0:	e04a      	b.n	8001758 <LIB_SERIAL_Transmit+0x118>
	}
	__quotient 	= __length / divisor;
 80016c2:	693a      	ldr	r2, [r7, #16]
 80016c4:	8b7b      	ldrh	r3, [r7, #26]
 80016c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80016ca:	83fb      	strh	r3, [r7, #30]
	__remainder = __length % divisor;
 80016cc:	693b      	ldr	r3, [r7, #16]
 80016ce:	8b7a      	ldrh	r2, [r7, #26]
 80016d0:	fbb3 f1f2 	udiv	r1, r3, r2
 80016d4:	fb02 f201 	mul.w	r2, r2, r1
 80016d8:	1a9b      	subs	r3, r3, r2
 80016da:	83bb      	strh	r3, [r7, #28]

	HAL_UART_Transmit(&__huart, __header, 3, 10);
 80016dc:	f107 0114 	add.w	r1, r7, #20
 80016e0:	230a      	movs	r3, #10
 80016e2:	2203      	movs	r2, #3
 80016e4:	481f      	ldr	r0, [pc, #124]	; (8001764 <LIB_SERIAL_Transmit+0x124>)
 80016e6:	f006 fb5e 	bl	8007da6 <HAL_UART_Transmit>
	HAL_UART_Transmit(&__huart, (uint8_t*)&type, 1, 10);
 80016ea:	1df9      	adds	r1, r7, #7
 80016ec:	230a      	movs	r3, #10
 80016ee:	2201      	movs	r2, #1
 80016f0:	481c      	ldr	r0, [pc, #112]	; (8001764 <LIB_SERIAL_Transmit+0x124>)
 80016f2:	f006 fb58 	bl	8007da6 <HAL_UART_Transmit>
	HAL_UART_Transmit(&__huart, (uint8_t*)&__length, 4, 10);
 80016f6:	f107 0110 	add.w	r1, r7, #16
 80016fa:	230a      	movs	r3, #10
 80016fc:	2204      	movs	r2, #4
 80016fe:	4819      	ldr	r0, [pc, #100]	; (8001764 <LIB_SERIAL_Transmit+0x124>)
 8001700:	f006 fb51 	bl	8007da6 <HAL_UART_Transmit>
	HAL_Delay(1);
 8001704:	2001      	movs	r0, #1
 8001706:	f002 ff99 	bl	800463c <HAL_Delay>

	while(__count < __quotient)
 800170a:	e011      	b.n	8001730 <LIB_SERIAL_Transmit+0xf0>
	{
		HAL_UART_Transmit(&__huart, __pData, UINT16_MAX, 1000);
 800170c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001710:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001714:	6a39      	ldr	r1, [r7, #32]
 8001716:	4813      	ldr	r0, [pc, #76]	; (8001764 <LIB_SERIAL_Transmit+0x124>)
 8001718:	f006 fb45 	bl	8007da6 <HAL_UART_Transmit>
		__count++;
 800171c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001720:	3301      	adds	r3, #1
 8001722:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		__pData += UINT16_MAX;
 8001726:	6a3a      	ldr	r2, [r7, #32]
 8001728:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800172c:	4413      	add	r3, r2
 800172e:	623b      	str	r3, [r7, #32]
	while(__count < __quotient)
 8001730:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001734:	b29b      	uxth	r3, r3
 8001736:	8bfa      	ldrh	r2, [r7, #30]
 8001738:	429a      	cmp	r2, r3
 800173a:	d8e7      	bhi.n	800170c <LIB_SERIAL_Transmit+0xcc>
	}
	if (__remainder)
 800173c:	8bbb      	ldrh	r3, [r7, #28]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d006      	beq.n	8001750 <LIB_SERIAL_Transmit+0x110>
	{
		HAL_UART_Transmit(&__huart, __pData, __remainder, 1000);
 8001742:	8bba      	ldrh	r2, [r7, #28]
 8001744:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001748:	6a39      	ldr	r1, [r7, #32]
 800174a:	4806      	ldr	r0, [pc, #24]	; (8001764 <LIB_SERIAL_Transmit+0x124>)
 800174c:	f006 fb2b 	bl	8007da6 <HAL_UART_Transmit>
	}
	HAL_Delay(1);
 8001750:	2001      	movs	r0, #1
 8001752:	f002 ff73 	bl	800463c <HAL_Delay>
	return SERIAL_OK;
 8001756:	2300      	movs	r3, #0
}
 8001758:	4618      	mov	r0, r3
 800175a:	3728      	adds	r7, #40	; 0x28
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}
 8001760:	0800aa60 	.word	0x0800aa60
 8001764:	20015110 	.word	0x20015110

08001768 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b084      	sub	sp, #16
 800176c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800176e:	f002 ff07 	bl	8004580 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001772:	f000 f87f 	bl	8001874 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001776:	f000 f915 	bl	80019a4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800177a:	f000 f8e3 	bl	8001944 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  LIB_AUDIO_Init();
 800177e:	f7ff fe97 	bl	80014b0 <LIB_AUDIO_Init>
  ks_mfcc_init();
 8001782:	f7ff fc89 	bl	8001098 <ks_mfcc_init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	/*ACQUIRE AUDIO DATA FROM MIC*/
	LIB_AUDIO_StartRecording((uint16_t*)AudioBuffer, BUFFER_SIZE);
 8001786:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800178a:	4833      	ldr	r0, [pc, #204]	; (8001858 <main+0xf0>)
 800178c:	f7ff fea2 	bl	80014d4 <LIB_AUDIO_StartRecording>
	/*WAIT UNTIL AUDIO DATA IS READY*/
	if (LIB_AUDIO_PollForRecording(5000) == 0)
 8001790:	f241 3088 	movw	r0, #5000	; 0x1388
 8001794:	f7ff fee0 	bl	8001558 <LIB_AUDIO_PollForRecording>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d1f3      	bne.n	8001786 <main+0x1e>
	{
		int16_t max = 0; uint32_t idx = 0, i = 0, j = 0;
 800179e:	2300      	movs	r3, #0
 80017a0:	80fb      	strh	r3, [r7, #6]
 80017a2:	2300      	movs	r3, #0
 80017a4:	603b      	str	r3, [r7, #0]
 80017a6:	2300      	movs	r3, #0
 80017a8:	60fb      	str	r3, [r7, #12]
 80017aa:	2300      	movs	r3, #0
 80017ac:	60bb      	str	r3, [r7, #8]
		/* DOWNSAMPLING TO MONO AND 8KHZ */
		for (i = 0; i < BUFFER_SIZE/4; ++i)
 80017ae:	2300      	movs	r3, #0
 80017b0:	60fb      	str	r3, [r7, #12]
 80017b2:	e00d      	b.n	80017d0 <main+0x68>
		{
		  AudioBufferDown[i] = AudioBuffer[j];
 80017b4:	4a28      	ldr	r2, [pc, #160]	; (8001858 <main+0xf0>)
 80017b6:	68bb      	ldr	r3, [r7, #8]
 80017b8:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 80017bc:	4a27      	ldr	r2, [pc, #156]	; (800185c <main+0xf4>)
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		  j = j + 4;
 80017c4:	68bb      	ldr	r3, [r7, #8]
 80017c6:	3304      	adds	r3, #4
 80017c8:	60bb      	str	r3, [r7, #8]
		for (i = 0; i < BUFFER_SIZE/4; ++i)
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	3301      	adds	r3, #1
 80017ce:	60fb      	str	r3, [r7, #12]
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80017d6:	d3ed      	bcc.n	80017b4 <main+0x4c>
		}
		arm_absmax_q15(AudioBufferDown, BUFFER_SIZE/4, &max, &idx);
 80017d8:	463b      	mov	r3, r7
 80017da:	1dba      	adds	r2, r7, #6
 80017dc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80017e0:	481e      	ldr	r0, [pc, #120]	; (800185c <main+0xf4>)
 80017e2:	f006 ffd9 	bl	8008798 <arm_absmax_q15>
		for (i = 0; i < BUFFER_SIZE/4; ++i)
 80017e6:	2300      	movs	r3, #0
 80017e8:	60fb      	str	r3, [r7, #12]
 80017ea:	e018      	b.n	800181e <main+0xb6>
		{
			AudioBufferF32Down[i] = (float32_t)AudioBufferDown[i]/(float32_t)max;
 80017ec:	4a1b      	ldr	r2, [pc, #108]	; (800185c <main+0xf4>)
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80017f4:	ee07 3a90 	vmov	s15, r3
 80017f8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80017fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001800:	ee07 3a90 	vmov	s15, r3
 8001804:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001808:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800180c:	4a14      	ldr	r2, [pc, #80]	; (8001860 <main+0xf8>)
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	009b      	lsls	r3, r3, #2
 8001812:	4413      	add	r3, r2
 8001814:	edc3 7a00 	vstr	s15, [r3]
		for (i = 0; i < BUFFER_SIZE/4; ++i)
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	3301      	adds	r3, #1
 800181c:	60fb      	str	r3, [r7, #12]
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001824:	d3e2      	bcc.n	80017ec <main+0x84>
		}

		/*SEND AUDIO DATA TO PC*/
		LIB_SERIAL_Transmit(AudioBufferF32Down, BUFFER_SIZE/4, TYPE_F32);
 8001826:	2207      	movs	r2, #7
 8001828:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800182c:	480c      	ldr	r0, [pc, #48]	; (8001860 <main+0xf8>)
 800182e:	f7ff ff07 	bl	8001640 <LIB_SERIAL_Transmit>

		/* FEATURE EXTRACTION */
		ks_mfcc_extract_features(AudioBufferF32Down, ExtractedFeatures);
 8001832:	490c      	ldr	r1, [pc, #48]	; (8001864 <main+0xfc>)
 8001834:	480a      	ldr	r0, [pc, #40]	; (8001860 <main+0xf8>)
 8001836:	f7ff fc59 	bl	80010ec <ks_mfcc_extract_features>
		ks_mfcc_extract_features(&AudioBufferF32Down[1024], &ExtractedFeatures[nbDctOutputs]);
 800183a:	490b      	ldr	r1, [pc, #44]	; (8001868 <main+0x100>)
 800183c:	480b      	ldr	r0, [pc, #44]	; (800186c <main+0x104>)
 800183e:	f7ff fc55 	bl	80010ec <ks_mfcc_extract_features>
		knn_cls_predict(ExtractedFeatures, output);
 8001842:	490b      	ldr	r1, [pc, #44]	; (8001870 <main+0x108>)
 8001844:	4807      	ldr	r0, [pc, #28]	; (8001864 <main+0xfc>)
 8001846:	f7ff fb01 	bl	8000e4c <knn_cls_predict>
		/*SEND INFERENCE RESULTS TO PC*/
		LIB_SERIAL_Transmit(output, sizeof(output)/sizeof(float32_t), TYPE_S32);
 800184a:	2206      	movs	r2, #6
 800184c:	210a      	movs	r1, #10
 800184e:	4808      	ldr	r0, [pc, #32]	; (8001870 <main+0x108>)
 8001850:	f7ff fef6 	bl	8001640 <LIB_SERIAL_Transmit>
	LIB_AUDIO_StartRecording((uint16_t*)AudioBuffer, BUFFER_SIZE);
 8001854:	e797      	b.n	8001786 <main+0x1e>
 8001856:	bf00      	nop
 8001858:	200000d4 	.word	0x200000d4
 800185c:	200040d4 	.word	0x200040d4
 8001860:	200050d4 	.word	0x200050d4
 8001864:	200070d4 	.word	0x200070d4
 8001868:	20007108 	.word	0x20007108
 800186c:	200060d4 	.word	0x200060d4
 8001870:	2000713c 	.word	0x2000713c

08001874 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b094      	sub	sp, #80	; 0x50
 8001878:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800187a:	f107 0320 	add.w	r3, r7, #32
 800187e:	2230      	movs	r2, #48	; 0x30
 8001880:	2100      	movs	r1, #0
 8001882:	4618      	mov	r0, r3
 8001884:	f008 f866 	bl	8009954 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001888:	f107 030c 	add.w	r3, r7, #12
 800188c:	2200      	movs	r2, #0
 800188e:	601a      	str	r2, [r3, #0]
 8001890:	605a      	str	r2, [r3, #4]
 8001892:	609a      	str	r2, [r3, #8]
 8001894:	60da      	str	r2, [r3, #12]
 8001896:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001898:	4b28      	ldr	r3, [pc, #160]	; (800193c <SystemClock_Config+0xc8>)
 800189a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189c:	4a27      	ldr	r2, [pc, #156]	; (800193c <SystemClock_Config+0xc8>)
 800189e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018a2:	6413      	str	r3, [r2, #64]	; 0x40
 80018a4:	4b25      	ldr	r3, [pc, #148]	; (800193c <SystemClock_Config+0xc8>)
 80018a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ac:	60bb      	str	r3, [r7, #8]
 80018ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80018b0:	4b23      	ldr	r3, [pc, #140]	; (8001940 <SystemClock_Config+0xcc>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80018b8:	4a21      	ldr	r2, [pc, #132]	; (8001940 <SystemClock_Config+0xcc>)
 80018ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80018be:	6013      	str	r3, [r2, #0]
 80018c0:	4b1f      	ldr	r3, [pc, #124]	; (8001940 <SystemClock_Config+0xcc>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80018c8:	607b      	str	r3, [r7, #4]
 80018ca:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80018cc:	2302      	movs	r3, #2
 80018ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018d0:	2301      	movs	r3, #1
 80018d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80018d4:	2310      	movs	r3, #16
 80018d6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018d8:	2302      	movs	r3, #2
 80018da:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80018dc:	2300      	movs	r3, #0
 80018de:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 10;
 80018e0:	230a      	movs	r3, #10
 80018e2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 210;
 80018e4:	23d2      	movs	r3, #210	; 0xd2
 80018e6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80018e8:	2302      	movs	r3, #2
 80018ea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80018ec:	2302      	movs	r3, #2
 80018ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018f0:	f107 0320 	add.w	r3, r7, #32
 80018f4:	4618      	mov	r0, r3
 80018f6:	f004 fb99 	bl	800602c <HAL_RCC_OscConfig>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d001      	beq.n	8001904 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001900:	f000 fc90 	bl	8002224 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001904:	230f      	movs	r3, #15
 8001906:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001908:	2302      	movs	r3, #2
 800190a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800190c:	2300      	movs	r3, #0
 800190e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001910:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001914:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001916:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800191a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800191c:	f107 030c 	add.w	r3, r7, #12
 8001920:	2105      	movs	r1, #5
 8001922:	4618      	mov	r0, r3
 8001924:	f004 fe26 	bl	8006574 <HAL_RCC_ClockConfig>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	d001      	beq.n	8001932 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 800192e:	f000 fc79 	bl	8002224 <Error_Handler>
  }
}
 8001932:	bf00      	nop
 8001934:	3750      	adds	r7, #80	; 0x50
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	40023800 	.word	0x40023800
 8001940:	40007000 	.word	0x40007000

08001944 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001948:	4b13      	ldr	r3, [pc, #76]	; (8001998 <MX_USART1_UART_Init+0x54>)
 800194a:	4a14      	ldr	r2, [pc, #80]	; (800199c <MX_USART1_UART_Init+0x58>)
 800194c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 2000000;
 800194e:	4b12      	ldr	r3, [pc, #72]	; (8001998 <MX_USART1_UART_Init+0x54>)
 8001950:	4a13      	ldr	r2, [pc, #76]	; (80019a0 <MX_USART1_UART_Init+0x5c>)
 8001952:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001954:	4b10      	ldr	r3, [pc, #64]	; (8001998 <MX_USART1_UART_Init+0x54>)
 8001956:	2200      	movs	r2, #0
 8001958:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800195a:	4b0f      	ldr	r3, [pc, #60]	; (8001998 <MX_USART1_UART_Init+0x54>)
 800195c:	2200      	movs	r2, #0
 800195e:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001960:	4b0d      	ldr	r3, [pc, #52]	; (8001998 <MX_USART1_UART_Init+0x54>)
 8001962:	2200      	movs	r2, #0
 8001964:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001966:	4b0c      	ldr	r3, [pc, #48]	; (8001998 <MX_USART1_UART_Init+0x54>)
 8001968:	220c      	movs	r2, #12
 800196a:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800196c:	4b0a      	ldr	r3, [pc, #40]	; (8001998 <MX_USART1_UART_Init+0x54>)
 800196e:	2200      	movs	r2, #0
 8001970:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001972:	4b09      	ldr	r3, [pc, #36]	; (8001998 <MX_USART1_UART_Init+0x54>)
 8001974:	2200      	movs	r2, #0
 8001976:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001978:	4b07      	ldr	r3, [pc, #28]	; (8001998 <MX_USART1_UART_Init+0x54>)
 800197a:	2200      	movs	r2, #0
 800197c:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800197e:	4b06      	ldr	r3, [pc, #24]	; (8001998 <MX_USART1_UART_Init+0x54>)
 8001980:	2200      	movs	r2, #0
 8001982:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001984:	4804      	ldr	r0, [pc, #16]	; (8001998 <MX_USART1_UART_Init+0x54>)
 8001986:	f006 f9c0 	bl	8007d0a <HAL_UART_Init>
 800198a:	4603      	mov	r3, r0
 800198c:	2b00      	cmp	r3, #0
 800198e:	d001      	beq.n	8001994 <MX_USART1_UART_Init+0x50>
  {
    Error_Handler();
 8001990:	f000 fc48 	bl	8002224 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001994:	bf00      	nop
 8001996:	bd80      	pop	{r7, pc}
 8001998:	20015110 	.word	0x20015110
 800199c:	40011000 	.word	0x40011000
 80019a0:	001e8480 	.word	0x001e8480

080019a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b090      	sub	sp, #64	; 0x40
 80019a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019ae:	2200      	movs	r2, #0
 80019b0:	601a      	str	r2, [r3, #0]
 80019b2:	605a      	str	r2, [r3, #4]
 80019b4:	609a      	str	r2, [r3, #8]
 80019b6:	60da      	str	r2, [r3, #12]
 80019b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80019ba:	4bad      	ldr	r3, [pc, #692]	; (8001c70 <MX_GPIO_Init+0x2cc>)
 80019bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019be:	4aac      	ldr	r2, [pc, #688]	; (8001c70 <MX_GPIO_Init+0x2cc>)
 80019c0:	f043 0310 	orr.w	r3, r3, #16
 80019c4:	6313      	str	r3, [r2, #48]	; 0x30
 80019c6:	4baa      	ldr	r3, [pc, #680]	; (8001c70 <MX_GPIO_Init+0x2cc>)
 80019c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ca:	f003 0310 	and.w	r3, r3, #16
 80019ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80019d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80019d2:	4ba7      	ldr	r3, [pc, #668]	; (8001c70 <MX_GPIO_Init+0x2cc>)
 80019d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d6:	4aa6      	ldr	r2, [pc, #664]	; (8001c70 <MX_GPIO_Init+0x2cc>)
 80019d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80019dc:	6313      	str	r3, [r2, #48]	; 0x30
 80019de:	4ba4      	ldr	r3, [pc, #656]	; (8001c70 <MX_GPIO_Init+0x2cc>)
 80019e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019e6:	627b      	str	r3, [r7, #36]	; 0x24
 80019e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019ea:	4ba1      	ldr	r3, [pc, #644]	; (8001c70 <MX_GPIO_Init+0x2cc>)
 80019ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ee:	4aa0      	ldr	r2, [pc, #640]	; (8001c70 <MX_GPIO_Init+0x2cc>)
 80019f0:	f043 0302 	orr.w	r3, r3, #2
 80019f4:	6313      	str	r3, [r2, #48]	; 0x30
 80019f6:	4b9e      	ldr	r3, [pc, #632]	; (8001c70 <MX_GPIO_Init+0x2cc>)
 80019f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fa:	f003 0302 	and.w	r3, r3, #2
 80019fe:	623b      	str	r3, [r7, #32]
 8001a00:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a02:	4b9b      	ldr	r3, [pc, #620]	; (8001c70 <MX_GPIO_Init+0x2cc>)
 8001a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a06:	4a9a      	ldr	r2, [pc, #616]	; (8001c70 <MX_GPIO_Init+0x2cc>)
 8001a08:	f043 0308 	orr.w	r3, r3, #8
 8001a0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a0e:	4b98      	ldr	r3, [pc, #608]	; (8001c70 <MX_GPIO_Init+0x2cc>)
 8001a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a12:	f003 0308 	and.w	r3, r3, #8
 8001a16:	61fb      	str	r3, [r7, #28]
 8001a18:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a1a:	4b95      	ldr	r3, [pc, #596]	; (8001c70 <MX_GPIO_Init+0x2cc>)
 8001a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1e:	4a94      	ldr	r2, [pc, #592]	; (8001c70 <MX_GPIO_Init+0x2cc>)
 8001a20:	f043 0304 	orr.w	r3, r3, #4
 8001a24:	6313      	str	r3, [r2, #48]	; 0x30
 8001a26:	4b92      	ldr	r3, [pc, #584]	; (8001c70 <MX_GPIO_Init+0x2cc>)
 8001a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a2a:	f003 0304 	and.w	r3, r3, #4
 8001a2e:	61bb      	str	r3, [r7, #24]
 8001a30:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a32:	4b8f      	ldr	r3, [pc, #572]	; (8001c70 <MX_GPIO_Init+0x2cc>)
 8001a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a36:	4a8e      	ldr	r2, [pc, #568]	; (8001c70 <MX_GPIO_Init+0x2cc>)
 8001a38:	f043 0301 	orr.w	r3, r3, #1
 8001a3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a3e:	4b8c      	ldr	r3, [pc, #560]	; (8001c70 <MX_GPIO_Init+0x2cc>)
 8001a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a42:	f003 0301 	and.w	r3, r3, #1
 8001a46:	617b      	str	r3, [r7, #20]
 8001a48:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001a4a:	4b89      	ldr	r3, [pc, #548]	; (8001c70 <MX_GPIO_Init+0x2cc>)
 8001a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4e:	4a88      	ldr	r2, [pc, #544]	; (8001c70 <MX_GPIO_Init+0x2cc>)
 8001a50:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a54:	6313      	str	r3, [r2, #48]	; 0x30
 8001a56:	4b86      	ldr	r3, [pc, #536]	; (8001c70 <MX_GPIO_Init+0x2cc>)
 8001a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a5e:	613b      	str	r3, [r7, #16]
 8001a60:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001a62:	4b83      	ldr	r3, [pc, #524]	; (8001c70 <MX_GPIO_Init+0x2cc>)
 8001a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a66:	4a82      	ldr	r2, [pc, #520]	; (8001c70 <MX_GPIO_Init+0x2cc>)
 8001a68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a6e:	4b80      	ldr	r3, [pc, #512]	; (8001c70 <MX_GPIO_Init+0x2cc>)
 8001a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a76:	60fb      	str	r3, [r7, #12]
 8001a78:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001a7a:	4b7d      	ldr	r3, [pc, #500]	; (8001c70 <MX_GPIO_Init+0x2cc>)
 8001a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7e:	4a7c      	ldr	r2, [pc, #496]	; (8001c70 <MX_GPIO_Init+0x2cc>)
 8001a80:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a84:	6313      	str	r3, [r2, #48]	; 0x30
 8001a86:	4b7a      	ldr	r3, [pc, #488]	; (8001c70 <MX_GPIO_Init+0x2cc>)
 8001a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a8e:	60bb      	str	r3, [r7, #8]
 8001a90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a92:	4b77      	ldr	r3, [pc, #476]	; (8001c70 <MX_GPIO_Init+0x2cc>)
 8001a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a96:	4a76      	ldr	r2, [pc, #472]	; (8001c70 <MX_GPIO_Init+0x2cc>)
 8001a98:	f043 0320 	orr.w	r3, r3, #32
 8001a9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a9e:	4b74      	ldr	r3, [pc, #464]	; (8001c70 <MX_GPIO_Init+0x2cc>)
 8001aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa2:	f003 0320 	and.w	r3, r3, #32
 8001aa6:	607b      	str	r3, [r7, #4]
 8001aa8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001aaa:	4b71      	ldr	r3, [pc, #452]	; (8001c70 <MX_GPIO_Init+0x2cc>)
 8001aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aae:	4a70      	ldr	r2, [pc, #448]	; (8001c70 <MX_GPIO_Init+0x2cc>)
 8001ab0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ab4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ab6:	4b6e      	ldr	r3, [pc, #440]	; (8001c70 <MX_GPIO_Init+0x2cc>)
 8001ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001abe:	603b      	str	r3, [r7, #0]
 8001ac0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	2120      	movs	r1, #32
 8001ac6:	486b      	ldr	r0, [pc, #428]	; (8001c74 <MX_GPIO_Init+0x2d0>)
 8001ac8:	f003 fce0 	bl	800548c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin, GPIO_PIN_RESET);
 8001acc:	2200      	movs	r2, #0
 8001ace:	f241 010c 	movw	r1, #4108	; 0x100c
 8001ad2:	4869      	ldr	r0, [pc, #420]	; (8001c78 <MX_GPIO_Init+0x2d4>)
 8001ad4:	f003 fcda 	bl	800548c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 8001ad8:	2200      	movs	r2, #0
 8001ada:	2108      	movs	r1, #8
 8001adc:	4867      	ldr	r0, [pc, #412]	; (8001c7c <MX_GPIO_Init+0x2d8>)
 8001ade:	f003 fcd5 	bl	800548c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ae8:	4865      	ldr	r0, [pc, #404]	; (8001c80 <MX_GPIO_Init+0x2dc>)
 8001aea:	f003 fccf 	bl	800548c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8001aee:	2200      	movs	r2, #0
 8001af0:	21c8      	movs	r1, #200	; 0xc8
 8001af2:	4864      	ldr	r0, [pc, #400]	; (8001c84 <MX_GPIO_Init+0x2e0>)
 8001af4:	f003 fcca 	bl	800548c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LCD_B0_Pin */
  GPIO_InitStruct.Pin = LCD_B0_Pin;
 8001af8:	2310      	movs	r3, #16
 8001afa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001afc:	2302      	movs	r3, #2
 8001afe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b00:	2300      	movs	r3, #0
 8001b02:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b04:	2300      	movs	r3, #0
 8001b06:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001b08:	230e      	movs	r3, #14
 8001b0a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8001b0c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b10:	4619      	mov	r1, r3
 8001b12:	485d      	ldr	r0, [pc, #372]	; (8001c88 <MX_GPIO_Init+0x2e4>)
 8001b14:	f003 fb0e 	bl	8005134 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8001b18:	2308      	movs	r3, #8
 8001b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b20:	2300      	movs	r3, #0
 8001b22:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001b24:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b28:	4619      	mov	r1, r3
 8001b2a:	4857      	ldr	r0, [pc, #348]	; (8001c88 <MX_GPIO_Init+0x2e4>)
 8001b2c:	f003 fb02 	bl	8005134 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_D2_Pin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8001b30:	2304      	movs	r3, #4
 8001b32:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b34:	2302      	movs	r3, #2
 8001b36:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b3c:	2303      	movs	r3, #3
 8001b3e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001b40:	2309      	movs	r3, #9
 8001b42:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8001b44:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b48:	4619      	mov	r1, r3
 8001b4a:	484f      	ldr	r0, [pc, #316]	; (8001c88 <MX_GPIO_Init+0x2e4>)
 8001b4c:	f003 faf2 	bl	8005134 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8001b50:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8001b54:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b56:	2302      	movs	r3, #2
 8001b58:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b5e:	2303      	movs	r3, #3
 8001b60:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001b62:	230b      	movs	r3, #11
 8001b64:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001b66:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	4845      	ldr	r0, [pc, #276]	; (8001c84 <MX_GPIO_Init+0x2e0>)
 8001b6e:	f003 fae1 	bl	8005134 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_NBL1_Pin FMC_NBL0_Pin FMC_D5_Pin FMC_D6_Pin
                           FMC_D8_Pin FMC_D11_Pin FMC_D4_Pin FMC_D7_Pin
                           FMC_D9_Pin FMC_D12_Pin FMC_D10_Pin */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8001b72:	f64f 7383 	movw	r3, #65411	; 0xff83
 8001b76:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b78:	2302      	movs	r3, #2
 8001b7a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b80:	2303      	movs	r3, #3
 8001b82:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001b84:	230c      	movs	r3, #12
 8001b86:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b88:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	483e      	ldr	r0, [pc, #248]	; (8001c88 <MX_GPIO_Init+0x2e4>)
 8001b90:	f003 fad0 	bl	8005134 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8001b94:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001b98:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b9a:	2312      	movs	r3, #18
 8001b9c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001ba6:	2304      	movs	r3, #4
 8001ba8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001baa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bae:	4619      	mov	r1, r3
 8001bb0:	4836      	ldr	r0, [pc, #216]	; (8001c8c <MX_GPIO_Init+0x2e8>)
 8001bb2:	f003 fabf 	bl	8005134 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 8001bb6:	f643 4323 	movw	r3, #15395	; 0x3c23
 8001bba:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bbc:	2302      	movs	r3, #2
 8001bbe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bc4:	2303      	movs	r3, #3
 8001bc6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001bc8:	230a      	movs	r3, #10
 8001bca:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bcc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	482e      	ldr	r0, [pc, #184]	; (8001c8c <MX_GPIO_Init+0x2e8>)
 8001bd4:	f003 faae 	bl	8005134 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 8001bd8:	2310      	movs	r3, #16
 8001bda:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bdc:	2302      	movs	r3, #2
 8001bde:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be0:	2300      	movs	r3, #0
 8001be2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001be4:	2300      	movs	r3, #0
 8001be6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001be8:	2302      	movs	r3, #2
 8001bea:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8001bec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	4826      	ldr	r0, [pc, #152]	; (8001c8c <MX_GPIO_Init+0x2e8>)
 8001bf4:	f003 fa9e 	bl	8005134 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_RX0_Pin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8001bf8:	2380      	movs	r3, #128	; 0x80
 8001bfa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bfc:	2302      	movs	r3, #2
 8001bfe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c00:	2300      	movs	r3, #0
 8001c02:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c04:	2300      	movs	r3, #0
 8001c06:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8001c08:	2308      	movs	r3, #8
 8001c0a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8001c0c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c10:	4619      	mov	r1, r3
 8001c12:	4818      	ldr	r0, [pc, #96]	; (8001c74 <MX_GPIO_Init+0x2d0>)
 8001c14:	f003 fa8e 	bl	8005134 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC_CK_Pin SDMMC_D3_Pin SDMMC_D2_Pin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8001c18:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c1e:	2302      	movs	r3, #2
 8001c20:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c22:	2300      	movs	r3, #0
 8001c24:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c26:	2303      	movs	r3, #3
 8001c28:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001c2a:	230c      	movs	r3, #12
 8001c2c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c2e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c32:	4619      	mov	r1, r3
 8001c34:	4816      	ldr	r0, [pc, #88]	; (8001c90 <MX_GPIO_Init+0x2ec>)
 8001c36:	f003 fa7d 	bl	8005134 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D6_Pin DCMI_D7_Pin */
  GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8001c3a:	2360      	movs	r3, #96	; 0x60
 8001c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c3e:	2302      	movs	r3, #2
 8001c40:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c42:	2300      	movs	r3, #0
 8001c44:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c46:	2300      	movs	r3, #0
 8001c48:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001c4a:	230d      	movs	r3, #13
 8001c4c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c4e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c52:	4619      	mov	r1, r3
 8001c54:	480c      	ldr	r0, [pc, #48]	; (8001c88 <MX_GPIO_Init+0x2e4>)
 8001c56:	f003 fa6d 	bl	8005134 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_NCS_Pin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8001c5a:	2340      	movs	r3, #64	; 0x40
 8001c5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c5e:	2302      	movs	r3, #2
 8001c60:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c62:	2300      	movs	r3, #0
 8001c64:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c66:	2303      	movs	r3, #3
 8001c68:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001c6a:	230a      	movs	r3, #10
 8001c6c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c6e:	e011      	b.n	8001c94 <MX_GPIO_Init+0x2f0>
 8001c70:	40023800 	.word	0x40023800
 8001c74:	40020c00 	.word	0x40020c00
 8001c78:	40022000 	.word	0x40022000
 8001c7c:	40022800 	.word	0x40022800
 8001c80:	40021c00 	.word	0x40021c00
 8001c84:	40021800 	.word	0x40021800
 8001c88:	40021000 	.word	0x40021000
 8001c8c:	40020400 	.word	0x40020400
 8001c90:	40020800 	.word	0x40020800
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8001c94:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c98:	4619      	mov	r1, r3
 8001c9a:	48bd      	ldr	r0, [pc, #756]	; (8001f90 <MX_GPIO_Init+0x5ec>)
 8001c9c:	f003 fa4a 	bl	8005134 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNCAS_Pin FMC_SDCLK_Pin FMC_A11_Pin FMC_A10_Pin
                           FMC_BA1_Pin FMC_BA0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8001ca0:	f248 1333 	movw	r3, #33075	; 0x8133
 8001ca4:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ca6:	2302      	movs	r3, #2
 8001ca8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001caa:	2300      	movs	r3, #0
 8001cac:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cae:	2303      	movs	r3, #3
 8001cb0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001cb2:	230c      	movs	r3, #12
 8001cb4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001cb6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001cba:	4619      	mov	r1, r3
 8001cbc:	48b5      	ldr	r0, [pc, #724]	; (8001f94 <MX_GPIO_Init+0x5f0>)
 8001cbe:	f003 fa39 	bl	8005134 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_B1_Pin LCD_B2_Pin LCD_B3_Pin LCD_G4_Pin
                           LCD_G1_Pin LCD_G3_Pin LCD_G0_Pin LCD_G2_Pin
                           LCD_R7_Pin LCD_R5_Pin LCD_R6_Pin LCD_R4_Pin
                           LCD_R3_Pin LCD_R1_Pin LCD_R2_Pin */
  GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8001cc2:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8001cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cc8:	2302      	movs	r3, #2
 8001cca:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001cd4:	230e      	movs	r3, #14
 8001cd6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001cd8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001cdc:	4619      	mov	r1, r3
 8001cde:	48ae      	ldr	r0, [pc, #696]	; (8001f98 <MX_GPIO_Init+0x5f4>)
 8001ce0:	f003 fa28 	bl	8005134 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8001ce4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ce8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cea:	2300      	movs	r3, #0
 8001cec:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001cf2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	48a7      	ldr	r0, [pc, #668]	; (8001f98 <MX_GPIO_Init+0x5f4>)
 8001cfa:	f003 fa1b 	bl	8005134 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8001cfe:	2340      	movs	r3, #64	; 0x40
 8001d00:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001d02:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001d06:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8001d0c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d10:	4619      	mov	r1, r3
 8001d12:	48a2      	ldr	r0, [pc, #648]	; (8001f9c <MX_GPIO_Init+0x5f8>)
 8001d14:	f003 fa0e 	bl	8005134 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_D2_Pin FMC_D3_Pin FMC_D1_Pin FMC_D15_Pin
                           FMC_D0_Pin FMC_D14_Pin FMC_D13_Pin */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8001d18:	f24c 7303 	movw	r3, #50947	; 0xc703
 8001d1c:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d1e:	2302      	movs	r3, #2
 8001d20:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d22:	2300      	movs	r3, #0
 8001d24:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d26:	2303      	movs	r3, #3
 8001d28:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001d2a:	230c      	movs	r3, #12
 8001d2c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d2e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d32:	4619      	mov	r1, r3
 8001d34:	4899      	ldr	r0, [pc, #612]	; (8001f9c <MX_GPIO_Init+0x5f8>)
 8001d36:	f003 f9fd 	bl	8005134 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8001d3a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d40:	2302      	movs	r3, #2
 8001d42:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d44:	2300      	movs	r3, #0
 8001d46:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d48:	2303      	movs	r3, #3
 8001d4a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001d4c:	230a      	movs	r3, #10
 8001d4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d50:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d54:	4619      	mov	r1, r3
 8001d56:	4892      	ldr	r0, [pc, #584]	; (8001fa0 <MX_GPIO_Init+0x5fc>)
 8001d58:	f003 f9ec 	bl	8005134 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DE_Pin LCD_B7_Pin LCD_B6_Pin LCD_B5_Pin
                           LCD_G6_Pin LCD_G7_Pin LCD_G5_Pin */
  GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8001d5c:	23f7      	movs	r3, #247	; 0xf7
 8001d5e:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d60:	2302      	movs	r3, #2
 8001d62:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d64:	2300      	movs	r3, #0
 8001d66:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001d6c:	230e      	movs	r3, #14
 8001d6e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8001d70:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d74:	4619      	mov	r1, r3
 8001d76:	488b      	ldr	r0, [pc, #556]	; (8001fa4 <MX_GPIO_Init+0x600>)
 8001d78:	f003 f9dc 	bl	8005134 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_B4_Pin */
  GPIO_InitStruct.Pin = LCD_B4_Pin;
 8001d7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d80:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d82:	2302      	movs	r3, #2
 8001d84:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d86:	2300      	movs	r3, #0
 8001d88:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001d8e:	2309      	movs	r3, #9
 8001d90:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8001d92:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d96:	4619      	mov	r1, r3
 8001d98:	487e      	ldr	r0, [pc, #504]	; (8001f94 <MX_GPIO_Init+0x5f0>)
 8001d9a:	f003 f9cb 	bl	8005134 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001d9e:	2320      	movs	r3, #32
 8001da0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001da2:	2301      	movs	r3, #1
 8001da4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da6:	2300      	movs	r3, #0
 8001da8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001daa:	2300      	movs	r3, #0
 8001dac:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001dae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001db2:	4619      	mov	r1, r3
 8001db4:	4879      	ldr	r0, [pc, #484]	; (8001f9c <MX_GPIO_Init+0x5f8>)
 8001db6:	f003 f9bd 	bl	8005134 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_D5_Pin */
  GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8001dba:	2308      	movs	r3, #8
 8001dbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dbe:	2302      	movs	r3, #2
 8001dc0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001dca:	230d      	movs	r3, #13
 8001dcc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8001dce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	4871      	ldr	r0, [pc, #452]	; (8001f9c <MX_GPIO_Init+0x5f8>)
 8001dd6:	f003 f9ad 	bl	8005134 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 8001dda:	f241 030c 	movw	r3, #4108	; 0x100c
 8001dde:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001de0:	2301      	movs	r3, #1
 8001de2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de4:	2300      	movs	r3, #0
 8001de6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001de8:	2300      	movs	r3, #0
 8001dea:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001dec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001df0:	4619      	mov	r1, r3
 8001df2:	486d      	ldr	r0, [pc, #436]	; (8001fa8 <MX_GPIO_Init+0x604>)
 8001df4:	f003 f99e 	bl	8005134 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8001df8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001dfc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e02:	2300      	movs	r3, #0
 8001e04:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8001e06:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	4867      	ldr	r0, [pc, #412]	; (8001fac <MX_GPIO_Init+0x608>)
 8001e0e:	f003 f991 	bl	8005134 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_A0_Pin FMC_A1_Pin FMC_A2_Pin FMC_A3_Pin
                           FMC_A4_Pin FMC_A5_Pin FMC_A6_Pin FMC_A9_Pin
                           FMC_A7_Pin FMC_A8_Pin FMC_SDNRAS_Pin */
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8001e12:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8001e16:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e18:	2302      	movs	r3, #2
 8001e1a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e20:	2303      	movs	r3, #3
 8001e22:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001e24:	230c      	movs	r3, #12
 8001e26:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001e28:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	4860      	ldr	r0, [pc, #384]	; (8001fb0 <MX_GPIO_Init+0x60c>)
 8001e30:	f003 f980 	bl	8005134 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_HSYNC_Pin LCD_VSYNC_Pin LCD_R0_Pin LCD_CLK_Pin */
  GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8001e34:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8001e38:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e3a:	2302      	movs	r3, #2
 8001e3c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e42:	2300      	movs	r3, #0
 8001e44:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001e46:	230e      	movs	r3, #14
 8001e48:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001e4a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e4e:	4619      	mov	r1, r3
 8001e50:	4855      	ldr	r0, [pc, #340]	; (8001fa8 <MX_GPIO_Init+0x604>)
 8001e52:	f003 f96f 	bl	8005134 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8001e56:	2308      	movs	r3, #8
 8001e58:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e62:	2300      	movs	r3, #0
 8001e64:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8001e66:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	484d      	ldr	r0, [pc, #308]	; (8001fa4 <MX_GPIO_Init+0x600>)
 8001e6e:	f003 f961 	bl	8005134 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_VSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8001e72:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e76:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e78:	2302      	movs	r3, #2
 8001e7a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e80:	2300      	movs	r3, #0
 8001e82:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001e84:	230d      	movs	r3, #13
 8001e86:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8001e88:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e8c:	4619      	mov	r1, r3
 8001e8e:	4841      	ldr	r0, [pc, #260]	; (8001f94 <MX_GPIO_Init+0x5f0>)
 8001e90:	f003 f950 	bl	8005134 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001e94:	2310      	movs	r3, #16
 8001e96:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001ea0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	483d      	ldr	r0, [pc, #244]	; (8001f9c <MX_GPIO_Init+0x5f8>)
 8001ea8:	f003 f944 	bl	8005134 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC_D0_Pin */
  GPIO_InitStruct.Pin = SDMMC_D0_Pin;
 8001eac:	2304      	movs	r3, #4
 8001eae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eb0:	2302      	movs	r3, #2
 8001eb2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eb8:	2303      	movs	r3, #3
 8001eba:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001ebc:	230c      	movs	r3, #12
 8001ebe:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SDMMC_D0_GPIO_Port, &GPIO_InitStruct);
 8001ec0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ec4:	4619      	mov	r1, r3
 8001ec6:	4835      	ldr	r0, [pc, #212]	; (8001f9c <MX_GPIO_Init+0x5f8>)
 8001ec8:	f003 f934 	bl	8005134 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8001ecc:	f248 0304 	movw	r3, #32772	; 0x8004
 8001ed0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001eda:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ede:	4619      	mov	r1, r3
 8001ee0:	4834      	ldr	r0, [pc, #208]	; (8001fb4 <MX_GPIO_Init+0x610>)
 8001ee2:	f003 f927 	bl	8005134 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_SCK_D13_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 8001ee6:	2302      	movs	r3, #2
 8001ee8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eea:	2302      	movs	r3, #2
 8001eec:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001ef6:	2305      	movs	r3, #5
 8001ef8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 8001efa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001efe:	4619      	mov	r1, r3
 8001f00:	4829      	ldr	r0, [pc, #164]	; (8001fa8 <MX_GPIO_Init+0x604>)
 8001f02:	f003 f917 	bl	8005134 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8001f06:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f10:	2300      	movs	r3, #0
 8001f12:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f14:	2300      	movs	r3, #0
 8001f16:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001f18:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f1c:	4619      	mov	r1, r3
 8001f1e:	4825      	ldr	r0, [pc, #148]	; (8001fb4 <MX_GPIO_Init+0x610>)
 8001f20:	f003 f908 	bl	8005134 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D4_Pin DCMI_D3_Pin DCMI_D0_Pin DCMI_D2_Pin
                           DCMI_D1_Pin */
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8001f24:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 8001f28:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |DCMI_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f2a:	2302      	movs	r3, #2
 8001f2c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f32:	2300      	movs	r3, #0
 8001f34:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001f36:	230d      	movs	r3, #13
 8001f38:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001f3a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f3e:	4619      	mov	r1, r3
 8001f40:	481c      	ldr	r0, [pc, #112]	; (8001fb4 <MX_GPIO_Init+0x610>)
 8001f42:	f003 f8f7 	bl	8005134 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_CS_D5_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8001f46:	2301      	movs	r3, #1
 8001f48:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f4a:	2302      	movs	r3, #2
 8001f4c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f52:	2300      	movs	r3, #0
 8001f54:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001f56:	2302      	movs	r3, #2
 8001f58:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8001f5a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f5e:	4619      	mov	r1, r3
 8001f60:	4811      	ldr	r0, [pc, #68]	; (8001fa8 <MX_GPIO_Init+0x604>)
 8001f62:	f003 f8e7 	bl	8005134 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D10_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8001f66:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f6c:	2302      	movs	r3, #2
 8001f6e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f70:	2300      	movs	r3, #0
 8001f72:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f74:	2300      	movs	r3, #0
 8001f76:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8001f7c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f80:	4619      	mov	r1, r3
 8001f82:	4807      	ldr	r0, [pc, #28]	; (8001fa0 <MX_GPIO_Init+0x5fc>)
 8001f84:	f003 f8d6 	bl	8005134 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8001f88:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f8c:	e014      	b.n	8001fb8 <MX_GPIO_Init+0x614>
 8001f8e:	bf00      	nop
 8001f90:	40020400 	.word	0x40020400
 8001f94:	40021800 	.word	0x40021800
 8001f98:	40022400 	.word	0x40022400
 8001f9c:	40020c00 	.word	0x40020c00
 8001fa0:	40020000 	.word	0x40020000
 8001fa4:	40022800 	.word	0x40022800
 8001fa8:	40022000 	.word	0x40022000
 8001fac:	40020800 	.word	0x40020800
 8001fb0:	40021400 	.word	0x40021400
 8001fb4:	40021c00 	.word	0x40021c00
 8001fb8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001fba:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001fbe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8001fc4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001fc8:	4619      	mov	r1, r3
 8001fca:	488e      	ldr	r0, [pc, #568]	; (8002204 <MX_GPIO_Init+0x860>)
 8001fcc:	f003 f8b2 	bl	8005134 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_RX_D0_Pin ARDUINO_TX_D1_Pin */
  GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8001fd0:	23c0      	movs	r3, #192	; 0xc0
 8001fd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fd4:	2302      	movs	r3, #2
 8001fd6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fdc:	2303      	movs	r3, #3
 8001fde:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001fe0:	2308      	movs	r3, #8
 8001fe2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fe4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001fe8:	4619      	mov	r1, r3
 8001fea:	4887      	ldr	r0, [pc, #540]	; (8002208 <MX_GPIO_Init+0x864>)
 8001fec:	f003 f8a2 	bl	8005134 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8001ff0:	2310      	movs	r3, #16
 8001ff2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ff4:	2302      	movs	r3, #2
 8001ff6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ffc:	2303      	movs	r3, #3
 8001ffe:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002000:	230a      	movs	r3, #10
 8002002:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8002004:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002008:	4619      	mov	r1, r3
 800200a:	4880      	ldr	r0, [pc, #512]	; (800220c <MX_GPIO_Init+0x868>)
 800200c:	f003 f892 	bl	8005134 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNME_Pin FMC_SDNE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8002010:	2328      	movs	r3, #40	; 0x28
 8002012:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002014:	2302      	movs	r3, #2
 8002016:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002018:	2300      	movs	r3, #0
 800201a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800201c:	2303      	movs	r3, #3
 800201e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002020:	230c      	movs	r3, #12
 8002022:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002024:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002028:	4619      	mov	r1, r3
 800202a:	4878      	ldr	r0, [pc, #480]	; (800220c <MX_GPIO_Init+0x868>)
 800202c:	f003 f882 	bl	8005134 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8002030:	23c8      	movs	r3, #200	; 0xc8
 8002032:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002034:	2301      	movs	r3, #1
 8002036:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002038:	2300      	movs	r3, #0
 800203a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800203c:	2300      	movs	r3, #0
 800203e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002040:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002044:	4619      	mov	r1, r3
 8002046:	4872      	ldr	r0, [pc, #456]	; (8002210 <MX_GPIO_Init+0x86c>)
 8002048:	f003 f874 	bl	8005134 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_A4_Pin ARDUINO_A5_Pin ARDUINO_A1_Pin ARDUINO_A2_Pin
                           ARDUINO_A3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 800204c:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8002050:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ARDUINO_A3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002052:	2303      	movs	r3, #3
 8002054:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002056:	2300      	movs	r3, #0
 8002058:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800205a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800205e:	4619      	mov	r1, r3
 8002060:	486c      	ldr	r0, [pc, #432]	; (8002214 <MX_GPIO_Init+0x870>)
 8002062:	f003 f867 	bl	8005134 <HAL_GPIO_Init>

  /*Configure GPIO pin : FMC_SDCKE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8002066:	2308      	movs	r3, #8
 8002068:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800206a:	2302      	movs	r3, #2
 800206c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800206e:	2300      	movs	r3, #0
 8002070:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002072:	2303      	movs	r3, #3
 8002074:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002076:	230c      	movs	r3, #12
 8002078:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 800207a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800207e:	4619      	mov	r1, r3
 8002080:	4861      	ldr	r0, [pc, #388]	; (8002208 <MX_GPIO_Init+0x864>)
 8002082:	f003 f857 	bl	8005134 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8002086:	2305      	movs	r3, #5
 8002088:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800208a:	2302      	movs	r3, #2
 800208c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800208e:	2300      	movs	r3, #0
 8002090:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002092:	2303      	movs	r3, #3
 8002094:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002096:	230a      	movs	r3, #10
 8002098:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800209a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800209e:	4619      	mov	r1, r3
 80020a0:	4859      	ldr	r0, [pc, #356]	; (8002208 <MX_GPIO_Init+0x864>)
 80020a2:	f003 f847 	bl	8005134 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80020a6:	2332      	movs	r3, #50	; 0x32
 80020a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020aa:	2302      	movs	r3, #2
 80020ac:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ae:	2300      	movs	r3, #0
 80020b0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020b2:	2303      	movs	r3, #3
 80020b4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80020b6:	230b      	movs	r3, #11
 80020b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80020be:	4619      	mov	r1, r3
 80020c0:	4851      	ldr	r0, [pc, #324]	; (8002208 <MX_GPIO_Init+0x864>)
 80020c2:	f003 f837 	bl	8005134 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80020c6:	2304      	movs	r3, #4
 80020c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ca:	2302      	movs	r3, #2
 80020cc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ce:	2300      	movs	r3, #0
 80020d0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020d2:	2303      	movs	r3, #3
 80020d4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80020d6:	2309      	movs	r3, #9
 80020d8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80020de:	4619      	mov	r1, r3
 80020e0:	484d      	ldr	r0, [pc, #308]	; (8002218 <MX_GPIO_Init+0x874>)
 80020e2:	f003 f827 	bl	8005134 <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 80020e6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80020ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ec:	2302      	movs	r3, #2
 80020ee:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f0:	2300      	movs	r3, #0
 80020f2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020f4:	2303      	movs	r3, #3
 80020f6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80020f8:	2309      	movs	r3, #9
 80020fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80020fc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002100:	4619      	mov	r1, r3
 8002102:	4846      	ldr	r0, [pc, #280]	; (800221c <MX_GPIO_Init+0x878>)
 8002104:	f003 f816 	bl	8005134 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8002108:	2304      	movs	r3, #4
 800210a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800210c:	2300      	movs	r3, #0
 800210e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002110:	2300      	movs	r3, #0
 8002112:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8002114:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002118:	4619      	mov	r1, r3
 800211a:	483d      	ldr	r0, [pc, #244]	; (8002210 <MX_GPIO_Init+0x86c>)
 800211c:	f003 f80a 	bl	8005134 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8002120:	2386      	movs	r3, #134	; 0x86
 8002122:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002124:	2302      	movs	r3, #2
 8002126:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002128:	2300      	movs	r3, #0
 800212a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800212c:	2303      	movs	r3, #3
 800212e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002130:	230b      	movs	r3, #11
 8002132:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002134:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002138:	4619      	mov	r1, r3
 800213a:	4839      	ldr	r0, [pc, #228]	; (8002220 <MX_GPIO_Init+0x87c>)
 800213c:	f002 fffa 	bl	8005134 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_A0_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8002140:	2301      	movs	r3, #1
 8002142:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002144:	2303      	movs	r3, #3
 8002146:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002148:	2300      	movs	r3, #0
 800214a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 800214c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002150:	4619      	mov	r1, r3
 8002152:	4833      	ldr	r0, [pc, #204]	; (8002220 <MX_GPIO_Init+0x87c>)
 8002154:	f002 ffee 	bl	8005134 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_HSYNC_Pin PA6 */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8002158:	2350      	movs	r3, #80	; 0x50
 800215a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800215c:	2302      	movs	r3, #2
 800215e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002160:	2300      	movs	r3, #0
 8002162:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002164:	2300      	movs	r3, #0
 8002166:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002168:	230d      	movs	r3, #13
 800216a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800216c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002170:	4619      	mov	r1, r3
 8002172:	482b      	ldr	r0, [pc, #172]	; (8002220 <MX_GPIO_Init+0x87c>)
 8002174:	f002 ffde 	bl	8005134 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_SCL_Pin LCD_SDA_Pin */
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8002178:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800217c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800217e:	2312      	movs	r3, #18
 8002180:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002182:	2300      	movs	r3, #0
 8002184:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002186:	2303      	movs	r3, #3
 8002188:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800218a:	2304      	movs	r3, #4
 800218c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800218e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002192:	4619      	mov	r1, r3
 8002194:	481d      	ldr	r0, [pc, #116]	; (800220c <MX_GPIO_Init+0x868>)
 8002196:	f002 ffcd 	bl	8005134 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 800219a:	2328      	movs	r3, #40	; 0x28
 800219c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800219e:	2302      	movs	r3, #2
 80021a0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a2:	2300      	movs	r3, #0
 80021a4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021a6:	2303      	movs	r3, #3
 80021a8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80021aa:	230a      	movs	r3, #10
 80021ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80021b2:	4619      	mov	r1, r3
 80021b4:	481a      	ldr	r0, [pc, #104]	; (8002220 <MX_GPIO_Init+0x87c>)
 80021b6:	f002 ffbd 	bl	8005134 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D6_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 80021ba:	2340      	movs	r3, #64	; 0x40
 80021bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021be:	2302      	movs	r3, #2
 80021c0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c2:	2300      	movs	r3, #0
 80021c4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021c6:	2300      	movs	r3, #0
 80021c8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 80021ca:	2309      	movs	r3, #9
 80021cc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 80021ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80021d2:	4619      	mov	r1, r3
 80021d4:	480d      	ldr	r0, [pc, #52]	; (800220c <MX_GPIO_Init+0x868>)
 80021d6:	f002 ffad 	bl	8005134 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 80021da:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80021de:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021e0:	2302      	movs	r3, #2
 80021e2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e4:	2300      	movs	r3, #0
 80021e6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021e8:	2300      	movs	r3, #0
 80021ea:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80021ec:	2305      	movs	r3, #5
 80021ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021f0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80021f4:	4619      	mov	r1, r3
 80021f6:	4808      	ldr	r0, [pc, #32]	; (8002218 <MX_GPIO_Init+0x874>)
 80021f8:	f002 ff9c 	bl	8005134 <HAL_GPIO_Init>

}
 80021fc:	bf00      	nop
 80021fe:	3740      	adds	r7, #64	; 0x40
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}
 8002204:	40022000 	.word	0x40022000
 8002208:	40020800 	.word	0x40020800
 800220c:	40021c00 	.word	0x40021c00
 8002210:	40021800 	.word	0x40021800
 8002214:	40021400 	.word	0x40021400
 8002218:	40020400 	.word	0x40020400
 800221c:	40020c00 	.word	0x40020c00
 8002220:	40020000 	.word	0x40020000

08002224 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002224:	b480      	push	{r7}
 8002226:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002228:	b672      	cpsid	i
}
 800222a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800222c:	e7fe      	b.n	800222c <Error_Handler+0x8>
	...

08002230 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002230:	b480      	push	{r7}
 8002232:	b083      	sub	sp, #12
 8002234:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002236:	4b0f      	ldr	r3, [pc, #60]	; (8002274 <HAL_MspInit+0x44>)
 8002238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223a:	4a0e      	ldr	r2, [pc, #56]	; (8002274 <HAL_MspInit+0x44>)
 800223c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002240:	6413      	str	r3, [r2, #64]	; 0x40
 8002242:	4b0c      	ldr	r3, [pc, #48]	; (8002274 <HAL_MspInit+0x44>)
 8002244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002246:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800224a:	607b      	str	r3, [r7, #4]
 800224c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800224e:	4b09      	ldr	r3, [pc, #36]	; (8002274 <HAL_MspInit+0x44>)
 8002250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002252:	4a08      	ldr	r2, [pc, #32]	; (8002274 <HAL_MspInit+0x44>)
 8002254:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002258:	6453      	str	r3, [r2, #68]	; 0x44
 800225a:	4b06      	ldr	r3, [pc, #24]	; (8002274 <HAL_MspInit+0x44>)
 800225c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800225e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002262:	603b      	str	r3, [r7, #0]
 8002264:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002266:	bf00      	nop
 8002268:	370c      	adds	r7, #12
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr
 8002272:	bf00      	nop
 8002274:	40023800 	.word	0x40023800

08002278 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b0ac      	sub	sp, #176	; 0xb0
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002280:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002284:	2200      	movs	r2, #0
 8002286:	601a      	str	r2, [r3, #0]
 8002288:	605a      	str	r2, [r3, #4]
 800228a:	609a      	str	r2, [r3, #8]
 800228c:	60da      	str	r2, [r3, #12]
 800228e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002290:	f107 0318 	add.w	r3, r7, #24
 8002294:	2284      	movs	r2, #132	; 0x84
 8002296:	2100      	movs	r1, #0
 8002298:	4618      	mov	r0, r3
 800229a:	f007 fb5b 	bl	8009954 <memset>
  if(huart->Instance==USART1)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a32      	ldr	r2, [pc, #200]	; (800236c <HAL_UART_MspInit+0xf4>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d15c      	bne.n	8002362 <HAL_UART_MspInit+0xea>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80022a8:	2340      	movs	r3, #64	; 0x40
 80022aa:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80022ac:	2300      	movs	r3, #0
 80022ae:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80022b0:	f107 0318 	add.w	r3, r7, #24
 80022b4:	4618      	mov	r0, r3
 80022b6:	f004 fb33 	bl	8006920 <HAL_RCCEx_PeriphCLKConfig>
 80022ba:	4603      	mov	r3, r0
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d001      	beq.n	80022c4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80022c0:	f7ff ffb0 	bl	8002224 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80022c4:	4b2a      	ldr	r3, [pc, #168]	; (8002370 <HAL_UART_MspInit+0xf8>)
 80022c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022c8:	4a29      	ldr	r2, [pc, #164]	; (8002370 <HAL_UART_MspInit+0xf8>)
 80022ca:	f043 0310 	orr.w	r3, r3, #16
 80022ce:	6453      	str	r3, [r2, #68]	; 0x44
 80022d0:	4b27      	ldr	r3, [pc, #156]	; (8002370 <HAL_UART_MspInit+0xf8>)
 80022d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022d4:	f003 0310 	and.w	r3, r3, #16
 80022d8:	617b      	str	r3, [r7, #20]
 80022da:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022dc:	4b24      	ldr	r3, [pc, #144]	; (8002370 <HAL_UART_MspInit+0xf8>)
 80022de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e0:	4a23      	ldr	r2, [pc, #140]	; (8002370 <HAL_UART_MspInit+0xf8>)
 80022e2:	f043 0302 	orr.w	r3, r3, #2
 80022e6:	6313      	str	r3, [r2, #48]	; 0x30
 80022e8:	4b21      	ldr	r3, [pc, #132]	; (8002370 <HAL_UART_MspInit+0xf8>)
 80022ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ec:	f003 0302 	and.w	r3, r3, #2
 80022f0:	613b      	str	r3, [r7, #16]
 80022f2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022f4:	4b1e      	ldr	r3, [pc, #120]	; (8002370 <HAL_UART_MspInit+0xf8>)
 80022f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f8:	4a1d      	ldr	r2, [pc, #116]	; (8002370 <HAL_UART_MspInit+0xf8>)
 80022fa:	f043 0301 	orr.w	r3, r3, #1
 80022fe:	6313      	str	r3, [r2, #48]	; 0x30
 8002300:	4b1b      	ldr	r3, [pc, #108]	; (8002370 <HAL_UART_MspInit+0xf8>)
 8002302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002304:	f003 0301 	and.w	r3, r3, #1
 8002308:	60fb      	str	r3, [r7, #12]
 800230a:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 800230c:	2380      	movs	r3, #128	; 0x80
 800230e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002312:	2302      	movs	r3, #2
 8002314:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002318:	2300      	movs	r3, #0
 800231a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800231e:	2300      	movs	r3, #0
 8002320:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002324:	2307      	movs	r3, #7
 8002326:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800232a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800232e:	4619      	mov	r1, r3
 8002330:	4810      	ldr	r0, [pc, #64]	; (8002374 <HAL_UART_MspInit+0xfc>)
 8002332:	f002 feff 	bl	8005134 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8002336:	f44f 7300 	mov.w	r3, #512	; 0x200
 800233a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800233e:	2302      	movs	r3, #2
 8002340:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002344:	2300      	movs	r3, #0
 8002346:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800234a:	2300      	movs	r3, #0
 800234c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002350:	2307      	movs	r3, #7
 8002352:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8002356:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800235a:	4619      	mov	r1, r3
 800235c:	4806      	ldr	r0, [pc, #24]	; (8002378 <HAL_UART_MspInit+0x100>)
 800235e:	f002 fee9 	bl	8005134 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002362:	bf00      	nop
 8002364:	37b0      	adds	r7, #176	; 0xb0
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	40011000 	.word	0x40011000
 8002370:	40023800 	.word	0x40023800
 8002374:	40020400 	.word	0x40020400
 8002378:	40020000 	.word	0x40020000

0800237c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800237c:	b480      	push	{r7}
 800237e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002380:	e7fe      	b.n	8002380 <NMI_Handler+0x4>

08002382 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002382:	b480      	push	{r7}
 8002384:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002386:	e7fe      	b.n	8002386 <HardFault_Handler+0x4>

08002388 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002388:	b480      	push	{r7}
 800238a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800238c:	e7fe      	b.n	800238c <MemManage_Handler+0x4>

0800238e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800238e:	b480      	push	{r7}
 8002390:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002392:	e7fe      	b.n	8002392 <BusFault_Handler+0x4>

08002394 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002394:	b480      	push	{r7}
 8002396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002398:	e7fe      	b.n	8002398 <UsageFault_Handler+0x4>

0800239a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800239a:	b480      	push	{r7}
 800239c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800239e:	bf00      	nop
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr

080023a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023a8:	b480      	push	{r7}
 80023aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023ac:	bf00      	nop
 80023ae:	46bd      	mov	sp, r7
 80023b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b4:	4770      	bx	lr

080023b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023b6:	b480      	push	{r7}
 80023b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023ba:	bf00      	nop
 80023bc:	46bd      	mov	sp, r7
 80023be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c2:	4770      	bx	lr

080023c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023c8:	f002 f918 	bl	80045fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023cc:	bf00      	nop
 80023ce:	bd80      	pop	{r7, pc}

080023d0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80023d0:	b480      	push	{r7}
 80023d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80023d4:	4b06      	ldr	r3, [pc, #24]	; (80023f0 <SystemInit+0x20>)
 80023d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023da:	4a05      	ldr	r2, [pc, #20]	; (80023f0 <SystemInit+0x20>)
 80023dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80023e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80023e4:	bf00      	nop
 80023e6:	46bd      	mov	sp, r7
 80023e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ec:	4770      	bx	lr
 80023ee:	bf00      	nop
 80023f0:	e000ed00 	.word	0xe000ed00

080023f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80023f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800242c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80023f8:	480d      	ldr	r0, [pc, #52]	; (8002430 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80023fa:	490e      	ldr	r1, [pc, #56]	; (8002434 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80023fc:	4a0e      	ldr	r2, [pc, #56]	; (8002438 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80023fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002400:	e002      	b.n	8002408 <LoopCopyDataInit>

08002402 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002402:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002404:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002406:	3304      	adds	r3, #4

08002408 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002408:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800240a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800240c:	d3f9      	bcc.n	8002402 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800240e:	4a0b      	ldr	r2, [pc, #44]	; (800243c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002410:	4c0b      	ldr	r4, [pc, #44]	; (8002440 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002412:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002414:	e001      	b.n	800241a <LoopFillZerobss>

08002416 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002416:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002418:	3204      	adds	r2, #4

0800241a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800241a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800241c:	d3fb      	bcc.n	8002416 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800241e:	f7ff ffd7 	bl	80023d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002422:	f007 fa65 	bl	80098f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002426:	f7ff f99f 	bl	8001768 <main>
  bx  lr    
 800242a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800242c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002430:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002434:	200000a8 	.word	0x200000a8
  ldr r2, =_sidata
 8002438:	0804f8b0 	.word	0x0804f8b0
  ldr r2, =_sbss
 800243c:	200000a8 	.word	0x200000a8
  ldr r4, =_ebss
 8002440:	200151e8 	.word	0x200151e8

08002444 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002444:	e7fe      	b.n	8002444 <ADC_IRQHandler>
	...

08002448 <wm8994_Init>:
  * @param Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param AudioFreq: Audio Frequency 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Init(uint16_t DeviceAddr, uint16_t OutputInputDevice, uint8_t Volume, uint32_t AudioFreq)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b088      	sub	sp, #32
 800244c:	af00      	add	r7, sp, #0
 800244e:	607b      	str	r3, [r7, #4]
 8002450:	4603      	mov	r3, r0
 8002452:	81fb      	strh	r3, [r7, #14]
 8002454:	460b      	mov	r3, r1
 8002456:	81bb      	strh	r3, [r7, #12]
 8002458:	4613      	mov	r3, r2
 800245a:	72fb      	strb	r3, [r7, #11]
  uint32_t counter = 0;
 800245c:	2300      	movs	r3, #0
 800245e:	61fb      	str	r3, [r7, #28]
  uint16_t output_device = OutputInputDevice & 0xFF;
 8002460:	89bb      	ldrh	r3, [r7, #12]
 8002462:	b2db      	uxtb	r3, r3
 8002464:	833b      	strh	r3, [r7, #24]
  uint16_t input_device = OutputInputDevice & 0xFF00;
 8002466:	89bb      	ldrh	r3, [r7, #12]
 8002468:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800246c:	82fb      	strh	r3, [r7, #22]
  uint16_t power_mgnt_reg_1 = 0;
 800246e:	2300      	movs	r3, #0
 8002470:	837b      	strh	r3, [r7, #26]
  
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();
 8002472:	f001 fc71 	bl	8003d58 <AUDIO_IO_Init>
  /* wm8994 Errata Work-Arounds */
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0003);
 8002476:	89fb      	ldrh	r3, [r7, #14]
 8002478:	b2db      	uxtb	r3, r3
 800247a:	2203      	movs	r2, #3
 800247c:	f44f 7181 	mov.w	r1, #258	; 0x102
 8002480:	4618      	mov	r0, r3
 8002482:	f001 fafb 	bl	8003a7c <CODEC_IO_Write>
 8002486:	4603      	mov	r3, r0
 8002488:	461a      	mov	r2, r3
 800248a:	69fb      	ldr	r3, [r7, #28]
 800248c:	4413      	add	r3, r2
 800248e:	61fb      	str	r3, [r7, #28]
  counter += CODEC_IO_Write(DeviceAddr, 0x817, 0x0000);
 8002490:	89fb      	ldrh	r3, [r7, #14]
 8002492:	b2db      	uxtb	r3, r3
 8002494:	2200      	movs	r2, #0
 8002496:	f640 0117 	movw	r1, #2071	; 0x817
 800249a:	4618      	mov	r0, r3
 800249c:	f001 faee 	bl	8003a7c <CODEC_IO_Write>
 80024a0:	4603      	mov	r3, r0
 80024a2:	461a      	mov	r2, r3
 80024a4:	69fb      	ldr	r3, [r7, #28]
 80024a6:	4413      	add	r3, r2
 80024a8:	61fb      	str	r3, [r7, #28]
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0000);
 80024aa:	89fb      	ldrh	r3, [r7, #14]
 80024ac:	b2db      	uxtb	r3, r3
 80024ae:	2200      	movs	r2, #0
 80024b0:	f44f 7181 	mov.w	r1, #258	; 0x102
 80024b4:	4618      	mov	r0, r3
 80024b6:	f001 fae1 	bl	8003a7c <CODEC_IO_Write>
 80024ba:	4603      	mov	r3, r0
 80024bc:	461a      	mov	r2, r3
 80024be:	69fb      	ldr	r3, [r7, #28]
 80024c0:	4413      	add	r3, r2
 80024c2:	61fb      	str	r3, [r7, #28]

  /* Enable VMID soft start (fast), Start-up Bias Current Enabled */
  counter += CODEC_IO_Write(DeviceAddr, 0x39, 0x006C);
 80024c4:	89fb      	ldrh	r3, [r7, #14]
 80024c6:	b2db      	uxtb	r3, r3
 80024c8:	226c      	movs	r2, #108	; 0x6c
 80024ca:	2139      	movs	r1, #57	; 0x39
 80024cc:	4618      	mov	r0, r3
 80024ce:	f001 fad5 	bl	8003a7c <CODEC_IO_Write>
 80024d2:	4603      	mov	r3, r0
 80024d4:	461a      	mov	r2, r3
 80024d6:	69fb      	ldr	r3, [r7, #28]
 80024d8:	4413      	add	r3, r2
 80024da:	61fb      	str	r3, [r7, #28]

    /* Enable bias generator, Enable VMID */
  if (input_device > 0)
 80024dc:	8afb      	ldrh	r3, [r7, #22]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d00c      	beq.n	80024fc <wm8994_Init+0xb4>
  {
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0013);
 80024e2:	89fb      	ldrh	r3, [r7, #14]
 80024e4:	b2db      	uxtb	r3, r3
 80024e6:	2213      	movs	r2, #19
 80024e8:	2101      	movs	r1, #1
 80024ea:	4618      	mov	r0, r3
 80024ec:	f001 fac6 	bl	8003a7c <CODEC_IO_Write>
 80024f0:	4603      	mov	r3, r0
 80024f2:	461a      	mov	r2, r3
 80024f4:	69fb      	ldr	r3, [r7, #28]
 80024f6:	4413      	add	r3, r2
 80024f8:	61fb      	str	r3, [r7, #28]
 80024fa:	e00b      	b.n	8002514 <wm8994_Init+0xcc>
  }
  else
  {
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0003);
 80024fc:	89fb      	ldrh	r3, [r7, #14]
 80024fe:	b2db      	uxtb	r3, r3
 8002500:	2203      	movs	r2, #3
 8002502:	2101      	movs	r1, #1
 8002504:	4618      	mov	r0, r3
 8002506:	f001 fab9 	bl	8003a7c <CODEC_IO_Write>
 800250a:	4603      	mov	r3, r0
 800250c:	461a      	mov	r2, r3
 800250e:	69fb      	ldr	r3, [r7, #28]
 8002510:	4413      	add	r3, r2
 8002512:	61fb      	str	r3, [r7, #28]
  }

  /* Add Delay */
  AUDIO_IO_Delay(50);
 8002514:	2032      	movs	r0, #50	; 0x32
 8002516:	f001 fc87 	bl	8003e28 <AUDIO_IO_Delay>

  /* Path Configurations for output */
  if (output_device > 0)
 800251a:	8b3b      	ldrh	r3, [r7, #24]
 800251c:	2b00      	cmp	r3, #0
 800251e:	f000 815f 	beq.w	80027e0 <wm8994_Init+0x398>
  {
    outputEnabled = 1;
 8002522:	4bae      	ldr	r3, [pc, #696]	; (80027dc <wm8994_Init+0x394>)
 8002524:	2201      	movs	r2, #1
 8002526:	601a      	str	r2, [r3, #0]

    switch (output_device)
 8002528:	8b3b      	ldrh	r3, [r7, #24]
 800252a:	2b03      	cmp	r3, #3
 800252c:	f000 808c 	beq.w	8002648 <wm8994_Init+0x200>
 8002530:	2b03      	cmp	r3, #3
 8002532:	f300 8111 	bgt.w	8002758 <wm8994_Init+0x310>
 8002536:	2b01      	cmp	r3, #1
 8002538:	d002      	beq.n	8002540 <wm8994_Init+0xf8>
 800253a:	2b02      	cmp	r3, #2
 800253c:	d042      	beq.n	80025c4 <wm8994_Init+0x17c>
 800253e:	e10b      	b.n	8002758 <wm8994_Init+0x310>
    {
    case OUTPUT_DEVICE_SPEAKER:
      /* Enable DAC1 (Left), Enable DAC1 (Right),
      Disable DAC2 (Left), Disable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0C0C);
 8002540:	89fb      	ldrh	r3, [r7, #14]
 8002542:	b2db      	uxtb	r3, r3
 8002544:	f640 420c 	movw	r2, #3084	; 0xc0c
 8002548:	2105      	movs	r1, #5
 800254a:	4618      	mov	r0, r3
 800254c:	f001 fa96 	bl	8003a7c <CODEC_IO_Write>
 8002550:	4603      	mov	r3, r0
 8002552:	461a      	mov	r2, r3
 8002554:	69fb      	ldr	r3, [r7, #28]
 8002556:	4413      	add	r3, r2
 8002558:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0000);
 800255a:	89fb      	ldrh	r3, [r7, #14]
 800255c:	b2db      	uxtb	r3, r3
 800255e:	2200      	movs	r2, #0
 8002560:	f240 6101 	movw	r1, #1537	; 0x601
 8002564:	4618      	mov	r0, r3
 8002566:	f001 fa89 	bl	8003a7c <CODEC_IO_Write>
 800256a:	4603      	mov	r3, r0
 800256c:	461a      	mov	r2, r3
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	4413      	add	r3, r2
 8002572:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0000);
 8002574:	89fb      	ldrh	r3, [r7, #14]
 8002576:	b2db      	uxtb	r3, r3
 8002578:	2200      	movs	r2, #0
 800257a:	f240 6102 	movw	r1, #1538	; 0x602
 800257e:	4618      	mov	r0, r3
 8002580:	f001 fa7c 	bl	8003a7c <CODEC_IO_Write>
 8002584:	4603      	mov	r3, r0
 8002586:	461a      	mov	r2, r3
 8002588:	69fb      	ldr	r3, [r7, #28]
 800258a:	4413      	add	r3, r2
 800258c:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 800258e:	89fb      	ldrh	r3, [r7, #14]
 8002590:	b2db      	uxtb	r3, r3
 8002592:	2202      	movs	r2, #2
 8002594:	f240 6104 	movw	r1, #1540	; 0x604
 8002598:	4618      	mov	r0, r3
 800259a:	f001 fa6f 	bl	8003a7c <CODEC_IO_Write>
 800259e:	4603      	mov	r3, r0
 80025a0:	461a      	mov	r2, r3
 80025a2:	69fb      	ldr	r3, [r7, #28]
 80025a4:	4413      	add	r3, r2
 80025a6:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 80025a8:	89fb      	ldrh	r3, [r7, #14]
 80025aa:	b2db      	uxtb	r3, r3
 80025ac:	2202      	movs	r2, #2
 80025ae:	f240 6105 	movw	r1, #1541	; 0x605
 80025b2:	4618      	mov	r0, r3
 80025b4:	f001 fa62 	bl	8003a7c <CODEC_IO_Write>
 80025b8:	4603      	mov	r3, r0
 80025ba:	461a      	mov	r2, r3
 80025bc:	69fb      	ldr	r3, [r7, #28]
 80025be:	4413      	add	r3, r2
 80025c0:	61fb      	str	r3, [r7, #28]
      break;
 80025c2:	e110      	b.n	80027e6 <wm8994_Init+0x39e>

    case OUTPUT_DEVICE_HEADPHONE:
      /* Disable DAC1 (Left), Disable DAC1 (Right),
      Enable DAC2 (Left), Enable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 80025c4:	89fb      	ldrh	r3, [r7, #14]
 80025c6:	b2db      	uxtb	r3, r3
 80025c8:	f240 3203 	movw	r2, #771	; 0x303
 80025cc:	2105      	movs	r1, #5
 80025ce:	4618      	mov	r0, r3
 80025d0:	f001 fa54 	bl	8003a7c <CODEC_IO_Write>
 80025d4:	4603      	mov	r3, r0
 80025d6:	461a      	mov	r2, r3
 80025d8:	69fb      	ldr	r3, [r7, #28]
 80025da:	4413      	add	r3, r2
 80025dc:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 80025de:	89fb      	ldrh	r3, [r7, #14]
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	2201      	movs	r2, #1
 80025e4:	f240 6101 	movw	r1, #1537	; 0x601
 80025e8:	4618      	mov	r0, r3
 80025ea:	f001 fa47 	bl	8003a7c <CODEC_IO_Write>
 80025ee:	4603      	mov	r3, r0
 80025f0:	461a      	mov	r2, r3
 80025f2:	69fb      	ldr	r3, [r7, #28]
 80025f4:	4413      	add	r3, r2
 80025f6:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 80025f8:	89fb      	ldrh	r3, [r7, #14]
 80025fa:	b2db      	uxtb	r3, r3
 80025fc:	2201      	movs	r2, #1
 80025fe:	f240 6102 	movw	r1, #1538	; 0x602
 8002602:	4618      	mov	r0, r3
 8002604:	f001 fa3a 	bl	8003a7c <CODEC_IO_Write>
 8002608:	4603      	mov	r3, r0
 800260a:	461a      	mov	r2, r3
 800260c:	69fb      	ldr	r3, [r7, #28]
 800260e:	4413      	add	r3, r2
 8002610:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 8002612:	89fb      	ldrh	r3, [r7, #14]
 8002614:	b2db      	uxtb	r3, r3
 8002616:	2200      	movs	r2, #0
 8002618:	f240 6104 	movw	r1, #1540	; 0x604
 800261c:	4618      	mov	r0, r3
 800261e:	f001 fa2d 	bl	8003a7c <CODEC_IO_Write>
 8002622:	4603      	mov	r3, r0
 8002624:	461a      	mov	r2, r3
 8002626:	69fb      	ldr	r3, [r7, #28]
 8002628:	4413      	add	r3, r2
 800262a:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 800262c:	89fb      	ldrh	r3, [r7, #14]
 800262e:	b2db      	uxtb	r3, r3
 8002630:	2200      	movs	r2, #0
 8002632:	f240 6105 	movw	r1, #1541	; 0x605
 8002636:	4618      	mov	r0, r3
 8002638:	f001 fa20 	bl	8003a7c <CODEC_IO_Write>
 800263c:	4603      	mov	r3, r0
 800263e:	461a      	mov	r2, r3
 8002640:	69fb      	ldr	r3, [r7, #28]
 8002642:	4413      	add	r3, r2
 8002644:	61fb      	str	r3, [r7, #28]
      break;
 8002646:	e0ce      	b.n	80027e6 <wm8994_Init+0x39e>

    case OUTPUT_DEVICE_BOTH:
      if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8002648:	8afb      	ldrh	r3, [r7, #22]
 800264a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800264e:	d141      	bne.n	80026d4 <wm8994_Init+0x28c>
      {
        /* Enable DAC1 (Left), Enable DAC1 (Right),
        also Enable DAC2 (Left), Enable DAC2 (Right)*/
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 8002650:	89fb      	ldrh	r3, [r7, #14]
 8002652:	b2db      	uxtb	r3, r3
 8002654:	f640 720f 	movw	r2, #3855	; 0xf0f
 8002658:	2105      	movs	r1, #5
 800265a:	4618      	mov	r0, r3
 800265c:	f001 fa0e 	bl	8003a7c <CODEC_IO_Write>
 8002660:	4603      	mov	r3, r0
 8002662:	461a      	mov	r2, r3
 8002664:	69fb      	ldr	r3, [r7, #28]
 8002666:	4413      	add	r3, r2
 8002668:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path
        Enable the AIF1 Timeslot 1 (Left) to DAC 1 (Left) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0003);
 800266a:	89fb      	ldrh	r3, [r7, #14]
 800266c:	b2db      	uxtb	r3, r3
 800266e:	2203      	movs	r2, #3
 8002670:	f240 6101 	movw	r1, #1537	; 0x601
 8002674:	4618      	mov	r0, r3
 8002676:	f001 fa01 	bl	8003a7c <CODEC_IO_Write>
 800267a:	4603      	mov	r3, r0
 800267c:	461a      	mov	r2, r3
 800267e:	69fb      	ldr	r3, [r7, #28]
 8002680:	4413      	add	r3, r2
 8002682:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path
        Enable the AIF1 Timeslot 1 (Right) to DAC 1 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0003);
 8002684:	89fb      	ldrh	r3, [r7, #14]
 8002686:	b2db      	uxtb	r3, r3
 8002688:	2203      	movs	r2, #3
 800268a:	f240 6102 	movw	r1, #1538	; 0x602
 800268e:	4618      	mov	r0, r3
 8002690:	f001 f9f4 	bl	8003a7c <CODEC_IO_Write>
 8002694:	4603      	mov	r3, r0
 8002696:	461a      	mov	r2, r3
 8002698:	69fb      	ldr	r3, [r7, #28]
 800269a:	4413      	add	r3, r2
 800269c:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Left) to DAC 2 (Left) mixer path
        Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path  */
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0003);
 800269e:	89fb      	ldrh	r3, [r7, #14]
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	2203      	movs	r2, #3
 80026a4:	f240 6104 	movw	r1, #1540	; 0x604
 80026a8:	4618      	mov	r0, r3
 80026aa:	f001 f9e7 	bl	8003a7c <CODEC_IO_Write>
 80026ae:	4603      	mov	r3, r0
 80026b0:	461a      	mov	r2, r3
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	4413      	add	r3, r2
 80026b6:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Right) to DAC 2 (Right) mixer path
        Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0003);
 80026b8:	89fb      	ldrh	r3, [r7, #14]
 80026ba:	b2db      	uxtb	r3, r3
 80026bc:	2203      	movs	r2, #3
 80026be:	f240 6105 	movw	r1, #1541	; 0x605
 80026c2:	4618      	mov	r0, r3
 80026c4:	f001 f9da 	bl	8003a7c <CODEC_IO_Write>
 80026c8:	4603      	mov	r3, r0
 80026ca:	461a      	mov	r2, r3
 80026cc:	69fb      	ldr	r3, [r7, #28]
 80026ce:	4413      	add	r3, r2
 80026d0:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
        
        /* Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);      
      }
      break;
 80026d2:	e088      	b.n	80027e6 <wm8994_Init+0x39e>
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 80026d4:	89fb      	ldrh	r3, [r7, #14]
 80026d6:	b2db      	uxtb	r3, r3
 80026d8:	f640 720f 	movw	r2, #3855	; 0xf0f
 80026dc:	2105      	movs	r1, #5
 80026de:	4618      	mov	r0, r3
 80026e0:	f001 f9cc 	bl	8003a7c <CODEC_IO_Write>
 80026e4:	4603      	mov	r3, r0
 80026e6:	461a      	mov	r2, r3
 80026e8:	69fb      	ldr	r3, [r7, #28]
 80026ea:	4413      	add	r3, r2
 80026ec:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 80026ee:	89fb      	ldrh	r3, [r7, #14]
 80026f0:	b2db      	uxtb	r3, r3
 80026f2:	2201      	movs	r2, #1
 80026f4:	f240 6101 	movw	r1, #1537	; 0x601
 80026f8:	4618      	mov	r0, r3
 80026fa:	f001 f9bf 	bl	8003a7c <CODEC_IO_Write>
 80026fe:	4603      	mov	r3, r0
 8002700:	461a      	mov	r2, r3
 8002702:	69fb      	ldr	r3, [r7, #28]
 8002704:	4413      	add	r3, r2
 8002706:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8002708:	89fb      	ldrh	r3, [r7, #14]
 800270a:	b2db      	uxtb	r3, r3
 800270c:	2201      	movs	r2, #1
 800270e:	f240 6102 	movw	r1, #1538	; 0x602
 8002712:	4618      	mov	r0, r3
 8002714:	f001 f9b2 	bl	8003a7c <CODEC_IO_Write>
 8002718:	4603      	mov	r3, r0
 800271a:	461a      	mov	r2, r3
 800271c:	69fb      	ldr	r3, [r7, #28]
 800271e:	4413      	add	r3, r2
 8002720:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8002722:	89fb      	ldrh	r3, [r7, #14]
 8002724:	b2db      	uxtb	r3, r3
 8002726:	2202      	movs	r2, #2
 8002728:	f240 6104 	movw	r1, #1540	; 0x604
 800272c:	4618      	mov	r0, r3
 800272e:	f001 f9a5 	bl	8003a7c <CODEC_IO_Write>
 8002732:	4603      	mov	r3, r0
 8002734:	461a      	mov	r2, r3
 8002736:	69fb      	ldr	r3, [r7, #28]
 8002738:	4413      	add	r3, r2
 800273a:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);      
 800273c:	89fb      	ldrh	r3, [r7, #14]
 800273e:	b2db      	uxtb	r3, r3
 8002740:	2202      	movs	r2, #2
 8002742:	f240 6105 	movw	r1, #1541	; 0x605
 8002746:	4618      	mov	r0, r3
 8002748:	f001 f998 	bl	8003a7c <CODEC_IO_Write>
 800274c:	4603      	mov	r3, r0
 800274e:	461a      	mov	r2, r3
 8002750:	69fb      	ldr	r3, [r7, #28]
 8002752:	4413      	add	r3, r2
 8002754:	61fb      	str	r3, [r7, #28]
      break;
 8002756:	e046      	b.n	80027e6 <wm8994_Init+0x39e>

    case OUTPUT_DEVICE_AUTO :
    default:
      /* Disable DAC1 (Left), Disable DAC1 (Right),
      Enable DAC2 (Left), Enable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8002758:	89fb      	ldrh	r3, [r7, #14]
 800275a:	b2db      	uxtb	r3, r3
 800275c:	f240 3203 	movw	r2, #771	; 0x303
 8002760:	2105      	movs	r1, #5
 8002762:	4618      	mov	r0, r3
 8002764:	f001 f98a 	bl	8003a7c <CODEC_IO_Write>
 8002768:	4603      	mov	r3, r0
 800276a:	461a      	mov	r2, r3
 800276c:	69fb      	ldr	r3, [r7, #28]
 800276e:	4413      	add	r3, r2
 8002770:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8002772:	89fb      	ldrh	r3, [r7, #14]
 8002774:	b2db      	uxtb	r3, r3
 8002776:	2201      	movs	r2, #1
 8002778:	f240 6101 	movw	r1, #1537	; 0x601
 800277c:	4618      	mov	r0, r3
 800277e:	f001 f97d 	bl	8003a7c <CODEC_IO_Write>
 8002782:	4603      	mov	r3, r0
 8002784:	461a      	mov	r2, r3
 8002786:	69fb      	ldr	r3, [r7, #28]
 8002788:	4413      	add	r3, r2
 800278a:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 800278c:	89fb      	ldrh	r3, [r7, #14]
 800278e:	b2db      	uxtb	r3, r3
 8002790:	2201      	movs	r2, #1
 8002792:	f240 6102 	movw	r1, #1538	; 0x602
 8002796:	4618      	mov	r0, r3
 8002798:	f001 f970 	bl	8003a7c <CODEC_IO_Write>
 800279c:	4603      	mov	r3, r0
 800279e:	461a      	mov	r2, r3
 80027a0:	69fb      	ldr	r3, [r7, #28]
 80027a2:	4413      	add	r3, r2
 80027a4:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 80027a6:	89fb      	ldrh	r3, [r7, #14]
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	2200      	movs	r2, #0
 80027ac:	f240 6104 	movw	r1, #1540	; 0x604
 80027b0:	4618      	mov	r0, r3
 80027b2:	f001 f963 	bl	8003a7c <CODEC_IO_Write>
 80027b6:	4603      	mov	r3, r0
 80027b8:	461a      	mov	r2, r3
 80027ba:	69fb      	ldr	r3, [r7, #28]
 80027bc:	4413      	add	r3, r2
 80027be:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 80027c0:	89fb      	ldrh	r3, [r7, #14]
 80027c2:	b2db      	uxtb	r3, r3
 80027c4:	2200      	movs	r2, #0
 80027c6:	f240 6105 	movw	r1, #1541	; 0x605
 80027ca:	4618      	mov	r0, r3
 80027cc:	f001 f956 	bl	8003a7c <CODEC_IO_Write>
 80027d0:	4603      	mov	r3, r0
 80027d2:	461a      	mov	r2, r3
 80027d4:	69fb      	ldr	r3, [r7, #28]
 80027d6:	4413      	add	r3, r2
 80027d8:	61fb      	str	r3, [r7, #28]
      break;
 80027da:	e004      	b.n	80027e6 <wm8994_Init+0x39e>
 80027dc:	20007164 	.word	0x20007164
    }
  }
  else
  {
    outputEnabled = 0;
 80027e0:	4b99      	ldr	r3, [pc, #612]	; (8002a48 <wm8994_Init+0x600>)
 80027e2:	2200      	movs	r2, #0
 80027e4:	601a      	str	r2, [r3, #0]
  }

  /* Path Configurations for input */
  if (input_device > 0)
 80027e6:	8afb      	ldrh	r3, [r7, #22]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	f000 81ab 	beq.w	8002b44 <wm8994_Init+0x6fc>
  {
    inputEnabled = 1;
 80027ee:	4b97      	ldr	r3, [pc, #604]	; (8002a4c <wm8994_Init+0x604>)
 80027f0:	2201      	movs	r2, #1
 80027f2:	601a      	str	r2, [r3, #0]
    switch (input_device)
 80027f4:	8afb      	ldrh	r3, [r7, #22]
 80027f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80027fa:	f000 8129 	beq.w	8002a50 <wm8994_Init+0x608>
 80027fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002802:	f300 819b 	bgt.w	8002b3c <wm8994_Init+0x6f4>
 8002806:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800280a:	d05a      	beq.n	80028c2 <wm8994_Init+0x47a>
 800280c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002810:	f300 8194 	bgt.w	8002b3c <wm8994_Init+0x6f4>
 8002814:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002818:	f000 80c6 	beq.w	80029a8 <wm8994_Init+0x560>
 800281c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002820:	f040 818c 	bne.w	8002b3c <wm8994_Init+0x6f4>
    {
    case INPUT_DEVICE_DIGITAL_MICROPHONE_2 :
      /* Enable AIF1ADC2 (Left), Enable AIF1ADC2 (Right)
       * Enable DMICDAT2 (Left), Enable DMICDAT2 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0C30);
 8002824:	89fb      	ldrh	r3, [r7, #14]
 8002826:	b2db      	uxtb	r3, r3
 8002828:	f44f 6243 	mov.w	r2, #3120	; 0xc30
 800282c:	2104      	movs	r1, #4
 800282e:	4618      	mov	r0, r3
 8002830:	f001 f924 	bl	8003a7c <CODEC_IO_Write>
 8002834:	4603      	mov	r3, r0
 8002836:	461a      	mov	r2, r3
 8002838:	69fb      	ldr	r3, [r7, #28]
 800283a:	4413      	add	r3, r2
 800283c:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 800283e:	89fb      	ldrh	r3, [r7, #14]
 8002840:	b2db      	uxtb	r3, r3
 8002842:	22db      	movs	r2, #219	; 0xdb
 8002844:	f44f 618a 	mov.w	r1, #1104	; 0x450
 8002848:	4618      	mov	r0, r3
 800284a:	f001 f917 	bl	8003a7c <CODEC_IO_Write>
 800284e:	4603      	mov	r3, r0
 8002850:	461a      	mov	r2, r3
 8002852:	69fb      	ldr	r3, [r7, #28]
 8002854:	4413      	add	r3, r2
 8002856:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6000);
 8002858:	89fb      	ldrh	r3, [r7, #14]
 800285a:	b2db      	uxtb	r3, r3
 800285c:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 8002860:	2102      	movs	r1, #2
 8002862:	4618      	mov	r0, r3
 8002864:	f001 f90a 	bl	8003a7c <CODEC_IO_Write>
 8002868:	4603      	mov	r3, r0
 800286a:	461a      	mov	r2, r3
 800286c:	69fb      	ldr	r3, [r7, #28]
 800286e:	4413      	add	r3, r2
 8002870:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 8002872:	89fb      	ldrh	r3, [r7, #14]
 8002874:	b2db      	uxtb	r3, r3
 8002876:	2202      	movs	r2, #2
 8002878:	f44f 61c1 	mov.w	r1, #1544	; 0x608
 800287c:	4618      	mov	r0, r3
 800287e:	f001 f8fd 	bl	8003a7c <CODEC_IO_Write>
 8002882:	4603      	mov	r3, r0
 8002884:	461a      	mov	r2, r3
 8002886:	69fb      	ldr	r3, [r7, #28]
 8002888:	4413      	add	r3, r2
 800288a:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 800288c:	89fb      	ldrh	r3, [r7, #14]
 800288e:	b2db      	uxtb	r3, r3
 8002890:	2202      	movs	r2, #2
 8002892:	f240 6109 	movw	r1, #1545	; 0x609
 8002896:	4618      	mov	r0, r3
 8002898:	f001 f8f0 	bl	8003a7c <CODEC_IO_Write>
 800289c:	4603      	mov	r3, r0
 800289e:	461a      	mov	r2, r3
 80028a0:	69fb      	ldr	r3, [r7, #28]
 80028a2:	4413      	add	r3, r2
 80028a4:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC2 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000E);
 80028a6:	89fb      	ldrh	r3, [r7, #14]
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	220e      	movs	r2, #14
 80028ac:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80028b0:	4618      	mov	r0, r3
 80028b2:	f001 f8e3 	bl	8003a7c <CODEC_IO_Write>
 80028b6:	4603      	mov	r3, r0
 80028b8:	461a      	mov	r2, r3
 80028ba:	69fb      	ldr	r3, [r7, #28]
 80028bc:	4413      	add	r3, r2
 80028be:	61fb      	str	r3, [r7, #28]
      break;
 80028c0:	e143      	b.n	8002b4a <wm8994_Init+0x702>

    case INPUT_DEVICE_INPUT_LINE_1 :
      /* IN1LN_TO_IN1L, IN1LP_TO_VMID, IN1RN_TO_IN1R, IN1RP_TO_VMID */
      counter += CODEC_IO_Write(DeviceAddr, 0x28, 0x0011);
 80028c2:	89fb      	ldrh	r3, [r7, #14]
 80028c4:	b2db      	uxtb	r3, r3
 80028c6:	2211      	movs	r2, #17
 80028c8:	2128      	movs	r1, #40	; 0x28
 80028ca:	4618      	mov	r0, r3
 80028cc:	f001 f8d6 	bl	8003a7c <CODEC_IO_Write>
 80028d0:	4603      	mov	r3, r0
 80028d2:	461a      	mov	r2, r3
 80028d4:	69fb      	ldr	r3, [r7, #28]
 80028d6:	4413      	add	r3, r2
 80028d8:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1L_TO_MIXINL and +30dB on IN1L PGA output */
      counter += CODEC_IO_Write(DeviceAddr, 0x29, 0x0035);
 80028da:	89fb      	ldrh	r3, [r7, #14]
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	2235      	movs	r2, #53	; 0x35
 80028e0:	2129      	movs	r1, #41	; 0x29
 80028e2:	4618      	mov	r0, r3
 80028e4:	f001 f8ca 	bl	8003a7c <CODEC_IO_Write>
 80028e8:	4603      	mov	r3, r0
 80028ea:	461a      	mov	r2, r3
 80028ec:	69fb      	ldr	r3, [r7, #28]
 80028ee:	4413      	add	r3, r2
 80028f0:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1R_TO_MIXINL, Gain = +30dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x2A, 0x0035);
 80028f2:	89fb      	ldrh	r3, [r7, #14]
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	2235      	movs	r2, #53	; 0x35
 80028f8:	212a      	movs	r1, #42	; 0x2a
 80028fa:	4618      	mov	r0, r3
 80028fc:	f001 f8be 	bl	8003a7c <CODEC_IO_Write>
 8002900:	4603      	mov	r3, r0
 8002902:	461a      	mov	r2, r3
 8002904:	69fb      	ldr	r3, [r7, #28]
 8002906:	4413      	add	r3, r2
 8002908:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0303);
 800290a:	89fb      	ldrh	r3, [r7, #14]
 800290c:	b2db      	uxtb	r3, r3
 800290e:	f240 3203 	movw	r2, #771	; 0x303
 8002912:	2104      	movs	r1, #4
 8002914:	4618      	mov	r0, r3
 8002916:	f001 f8b1 	bl	8003a7c <CODEC_IO_Write>
 800291a:	4603      	mov	r3, r0
 800291c:	461a      	mov	r2, r3
 800291e:	69fb      	ldr	r3, [r7, #28]
 8002920:	4413      	add	r3, r2
 8002922:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC1 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 8002924:	89fb      	ldrh	r3, [r7, #14]
 8002926:	b2db      	uxtb	r3, r3
 8002928:	22db      	movs	r2, #219	; 0xdb
 800292a:	f44f 6188 	mov.w	r1, #1088	; 0x440
 800292e:	4618      	mov	r0, r3
 8002930:	f001 f8a4 	bl	8003a7c <CODEC_IO_Write>
 8002934:	4603      	mov	r3, r0
 8002936:	461a      	mov	r2, r3
 8002938:	69fb      	ldr	r3, [r7, #28]
 800293a:	4413      	add	r3, r2
 800293c:	61fb      	str	r3, [r7, #28]

      /* Enable IN1L and IN1R, Disable IN2L and IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 800293e:	89fb      	ldrh	r3, [r7, #14]
 8002940:	b2db      	uxtb	r3, r3
 8002942:	f246 3250 	movw	r2, #25424	; 0x6350
 8002946:	2102      	movs	r1, #2
 8002948:	4618      	mov	r0, r3
 800294a:	f001 f897 	bl	8003a7c <CODEC_IO_Write>
 800294e:	4603      	mov	r3, r0
 8002950:	461a      	mov	r2, r3
 8002952:	69fb      	ldr	r3, [r7, #28]
 8002954:	4413      	add	r3, r2
 8002956:	61fb      	str	r3, [r7, #28]

      /* Enable the ADCL(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 8002958:	89fb      	ldrh	r3, [r7, #14]
 800295a:	b2db      	uxtb	r3, r3
 800295c:	2202      	movs	r2, #2
 800295e:	f240 6106 	movw	r1, #1542	; 0x606
 8002962:	4618      	mov	r0, r3
 8002964:	f001 f88a 	bl	8003a7c <CODEC_IO_Write>
 8002968:	4603      	mov	r3, r0
 800296a:	461a      	mov	r2, r3
 800296c:	69fb      	ldr	r3, [r7, #28]
 800296e:	4413      	add	r3, r2
 8002970:	61fb      	str	r3, [r7, #28]

      /* Enable the ADCR(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 8002972:	89fb      	ldrh	r3, [r7, #14]
 8002974:	b2db      	uxtb	r3, r3
 8002976:	2202      	movs	r2, #2
 8002978:	f240 6107 	movw	r1, #1543	; 0x607
 800297c:	4618      	mov	r0, r3
 800297e:	f001 f87d 	bl	8003a7c <CODEC_IO_Write>
 8002982:	4603      	mov	r3, r0
 8002984:	461a      	mov	r2, r3
 8002986:	69fb      	ldr	r3, [r7, #28]
 8002988:	4413      	add	r3, r2
 800298a:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 800298c:	89fb      	ldrh	r3, [r7, #14]
 800298e:	b2db      	uxtb	r3, r3
 8002990:	220d      	movs	r2, #13
 8002992:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8002996:	4618      	mov	r0, r3
 8002998:	f001 f870 	bl	8003a7c <CODEC_IO_Write>
 800299c:	4603      	mov	r3, r0
 800299e:	461a      	mov	r2, r3
 80029a0:	69fb      	ldr	r3, [r7, #28]
 80029a2:	4413      	add	r3, r2
 80029a4:	61fb      	str	r3, [r7, #28]
      break;
 80029a6:	e0d0      	b.n	8002b4a <wm8994_Init+0x702>

    case INPUT_DEVICE_DIGITAL_MICROPHONE_1 :
      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x030C);
 80029a8:	89fb      	ldrh	r3, [r7, #14]
 80029aa:	b2db      	uxtb	r3, r3
 80029ac:	f44f 7243 	mov.w	r2, #780	; 0x30c
 80029b0:	2104      	movs	r1, #4
 80029b2:	4618      	mov	r0, r3
 80029b4:	f001 f862 	bl	8003a7c <CODEC_IO_Write>
 80029b8:	4603      	mov	r3, r0
 80029ba:	461a      	mov	r2, r3
 80029bc:	69fb      	ldr	r3, [r7, #28]
 80029be:	4413      	add	r3, r2
 80029c0:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 80029c2:	89fb      	ldrh	r3, [r7, #14]
 80029c4:	b2db      	uxtb	r3, r3
 80029c6:	22db      	movs	r2, #219	; 0xdb
 80029c8:	f44f 6188 	mov.w	r1, #1088	; 0x440
 80029cc:	4618      	mov	r0, r3
 80029ce:	f001 f855 	bl	8003a7c <CODEC_IO_Write>
 80029d2:	4603      	mov	r3, r0
 80029d4:	461a      	mov	r2, r3
 80029d6:	69fb      	ldr	r3, [r7, #28]
 80029d8:	4413      	add	r3, r2
 80029da:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 80029dc:	89fb      	ldrh	r3, [r7, #14]
 80029de:	b2db      	uxtb	r3, r3
 80029e0:	f246 3250 	movw	r2, #25424	; 0x6350
 80029e4:	2102      	movs	r1, #2
 80029e6:	4618      	mov	r0, r3
 80029e8:	f001 f848 	bl	8003a7c <CODEC_IO_Write>
 80029ec:	4603      	mov	r3, r0
 80029ee:	461a      	mov	r2, r3
 80029f0:	69fb      	ldr	r3, [r7, #28]
 80029f2:	4413      	add	r3, r2
 80029f4:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 80029f6:	89fb      	ldrh	r3, [r7, #14]
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	2202      	movs	r2, #2
 80029fc:	f240 6106 	movw	r1, #1542	; 0x606
 8002a00:	4618      	mov	r0, r3
 8002a02:	f001 f83b 	bl	8003a7c <CODEC_IO_Write>
 8002a06:	4603      	mov	r3, r0
 8002a08:	461a      	mov	r2, r3
 8002a0a:	69fb      	ldr	r3, [r7, #28]
 8002a0c:	4413      	add	r3, r2
 8002a0e:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 8002a10:	89fb      	ldrh	r3, [r7, #14]
 8002a12:	b2db      	uxtb	r3, r3
 8002a14:	2202      	movs	r2, #2
 8002a16:	f240 6107 	movw	r1, #1543	; 0x607
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f001 f82e 	bl	8003a7c <CODEC_IO_Write>
 8002a20:	4603      	mov	r3, r0
 8002a22:	461a      	mov	r2, r3
 8002a24:	69fb      	ldr	r3, [r7, #28]
 8002a26:	4413      	add	r3, r2
 8002a28:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 8002a2a:	89fb      	ldrh	r3, [r7, #14]
 8002a2c:	b2db      	uxtb	r3, r3
 8002a2e:	220d      	movs	r2, #13
 8002a30:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8002a34:	4618      	mov	r0, r3
 8002a36:	f001 f821 	bl	8003a7c <CODEC_IO_Write>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	461a      	mov	r2, r3
 8002a3e:	69fb      	ldr	r3, [r7, #28]
 8002a40:	4413      	add	r3, r2
 8002a42:	61fb      	str	r3, [r7, #28]
      break; 
 8002a44:	e081      	b.n	8002b4a <wm8994_Init+0x702>
 8002a46:	bf00      	nop
 8002a48:	20007164 	.word	0x20007164
 8002a4c:	20007168 	.word	0x20007168
    case INPUT_DEVICE_DIGITAL_MIC1_MIC2 :
      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0F3C);
 8002a50:	89fb      	ldrh	r3, [r7, #14]
 8002a52:	b2db      	uxtb	r3, r3
 8002a54:	f640 723c 	movw	r2, #3900	; 0xf3c
 8002a58:	2104      	movs	r1, #4
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f001 f80e 	bl	8003a7c <CODEC_IO_Write>
 8002a60:	4603      	mov	r3, r0
 8002a62:	461a      	mov	r2, r3
 8002a64:	69fb      	ldr	r3, [r7, #28]
 8002a66:	4413      	add	r3, r2
 8002a68:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 8002a6a:	89fb      	ldrh	r3, [r7, #14]
 8002a6c:	b2db      	uxtb	r3, r3
 8002a6e:	22db      	movs	r2, #219	; 0xdb
 8002a70:	f44f 618a 	mov.w	r1, #1104	; 0x450
 8002a74:	4618      	mov	r0, r3
 8002a76:	f001 f801 	bl	8003a7c <CODEC_IO_Write>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	461a      	mov	r2, r3
 8002a7e:	69fb      	ldr	r3, [r7, #28]
 8002a80:	4413      	add	r3, r2
 8002a82:	61fb      	str	r3, [r7, #28]
      
      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 8002a84:	89fb      	ldrh	r3, [r7, #14]
 8002a86:	b2db      	uxtb	r3, r3
 8002a88:	22db      	movs	r2, #219	; 0xdb
 8002a8a:	f44f 6188 	mov.w	r1, #1088	; 0x440
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f000 fff4 	bl	8003a7c <CODEC_IO_Write>
 8002a94:	4603      	mov	r3, r0
 8002a96:	461a      	mov	r2, r3
 8002a98:	69fb      	ldr	r3, [r7, #28]
 8002a9a:	4413      	add	r3, r2
 8002a9c:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, Enable IN2L, IN2R, Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x63A0);
 8002a9e:	89fb      	ldrh	r3, [r7, #14]
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	f246 32a0 	movw	r2, #25504	; 0x63a0
 8002aa6:	2102      	movs	r1, #2
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f000 ffe7 	bl	8003a7c <CODEC_IO_Write>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	461a      	mov	r2, r3
 8002ab2:	69fb      	ldr	r3, [r7, #28]
 8002ab4:	4413      	add	r3, r2
 8002ab6:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 8002ab8:	89fb      	ldrh	r3, [r7, #14]
 8002aba:	b2db      	uxtb	r3, r3
 8002abc:	2202      	movs	r2, #2
 8002abe:	f240 6106 	movw	r1, #1542	; 0x606
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f000 ffda 	bl	8003a7c <CODEC_IO_Write>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	461a      	mov	r2, r3
 8002acc:	69fb      	ldr	r3, [r7, #28]
 8002ace:	4413      	add	r3, r2
 8002ad0:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 8002ad2:	89fb      	ldrh	r3, [r7, #14]
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	2202      	movs	r2, #2
 8002ad8:	f240 6107 	movw	r1, #1543	; 0x607
 8002adc:	4618      	mov	r0, r3
 8002ade:	f000 ffcd 	bl	8003a7c <CODEC_IO_Write>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	461a      	mov	r2, r3
 8002ae6:	69fb      	ldr	r3, [r7, #28]
 8002ae8:	4413      	add	r3, r2
 8002aea:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 8002aec:	89fb      	ldrh	r3, [r7, #14]
 8002aee:	b2db      	uxtb	r3, r3
 8002af0:	2202      	movs	r2, #2
 8002af2:	f44f 61c1 	mov.w	r1, #1544	; 0x608
 8002af6:	4618      	mov	r0, r3
 8002af8:	f000 ffc0 	bl	8003a7c <CODEC_IO_Write>
 8002afc:	4603      	mov	r3, r0
 8002afe:	461a      	mov	r2, r3
 8002b00:	69fb      	ldr	r3, [r7, #28]
 8002b02:	4413      	add	r3, r2
 8002b04:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 8002b06:	89fb      	ldrh	r3, [r7, #14]
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	2202      	movs	r2, #2
 8002b0c:	f240 6109 	movw	r1, #1545	; 0x609
 8002b10:	4618      	mov	r0, r3
 8002b12:	f000 ffb3 	bl	8003a7c <CODEC_IO_Write>
 8002b16:	4603      	mov	r3, r0
 8002b18:	461a      	mov	r2, r3
 8002b1a:	69fb      	ldr	r3, [r7, #28]
 8002b1c:	4413      	add	r3, r2
 8002b1e:	61fb      	str	r3, [r7, #28]
      
      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 8002b20:	89fb      	ldrh	r3, [r7, #14]
 8002b22:	b2db      	uxtb	r3, r3
 8002b24:	220d      	movs	r2, #13
 8002b26:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f000 ffa6 	bl	8003a7c <CODEC_IO_Write>
 8002b30:	4603      	mov	r3, r0
 8002b32:	461a      	mov	r2, r3
 8002b34:	69fb      	ldr	r3, [r7, #28]
 8002b36:	4413      	add	r3, r2
 8002b38:	61fb      	str	r3, [r7, #28]
      break;    
 8002b3a:	e006      	b.n	8002b4a <wm8994_Init+0x702>
    case INPUT_DEVICE_INPUT_LINE_2 :
    default:
      /* Actually, no other input devices supported */
      counter++;
 8002b3c:	69fb      	ldr	r3, [r7, #28]
 8002b3e:	3301      	adds	r3, #1
 8002b40:	61fb      	str	r3, [r7, #28]
      break;
 8002b42:	e002      	b.n	8002b4a <wm8994_Init+0x702>
    }
  }
  else
  {
    inputEnabled = 0;
 8002b44:	4ba4      	ldr	r3, [pc, #656]	; (8002dd8 <wm8994_Init+0x990>)
 8002b46:	2200      	movs	r2, #0
 8002b48:	601a      	str	r2, [r3, #0]
  }
  
  /*  Clock Configurations */
  switch (AudioFreq)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	4aa3      	ldr	r2, [pc, #652]	; (8002ddc <wm8994_Init+0x994>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d079      	beq.n	8002c46 <wm8994_Init+0x7fe>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	4aa1      	ldr	r2, [pc, #644]	; (8002ddc <wm8994_Init+0x994>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	f200 80ad 	bhi.w	8002cb6 <wm8994_Init+0x86e>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d061      	beq.n	8002c2a <wm8994_Init+0x7e2>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	f200 80a2 	bhi.w	8002cb6 <wm8994_Init+0x86e>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	f64a 4244 	movw	r2, #44100	; 0xac44
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	f000 808e 	beq.w	8002c9a <wm8994_Init+0x852>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	f64a 4244 	movw	r2, #44100	; 0xac44
 8002b84:	4293      	cmp	r3, r2
 8002b86:	f200 8096 	bhi.w	8002cb6 <wm8994_Init+0x86e>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8002b90:	d03d      	beq.n	8002c0e <wm8994_Init+0x7c6>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8002b98:	f200 808d 	bhi.w	8002cb6 <wm8994_Init+0x86e>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	f245 6222 	movw	r2, #22050	; 0x5622
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d06b      	beq.n	8002c7e <wm8994_Init+0x836>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	f245 6222 	movw	r2, #22050	; 0x5622
 8002bac:	4293      	cmp	r3, r2
 8002bae:	f200 8082 	bhi.w	8002cb6 <wm8994_Init+0x86e>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8002bb8:	d01b      	beq.n	8002bf2 <wm8994_Init+0x7aa>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8002bc0:	d879      	bhi.n	8002cb6 <wm8994_Init+0x86e>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8002bc8:	d005      	beq.n	8002bd6 <wm8994_Init+0x78e>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	f642 3211 	movw	r2, #11025	; 0x2b11
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d046      	beq.n	8002c62 <wm8994_Init+0x81a>
 8002bd4:	e06f      	b.n	8002cb6 <wm8994_Init+0x86e>
  {
  case  AUDIO_FREQUENCY_8K:
    /* AIF1 Sample Rate = 8 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0003);
 8002bd6:	89fb      	ldrh	r3, [r7, #14]
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	2203      	movs	r2, #3
 8002bdc:	f44f 7104 	mov.w	r1, #528	; 0x210
 8002be0:	4618      	mov	r0, r3
 8002be2:	f000 ff4b 	bl	8003a7c <CODEC_IO_Write>
 8002be6:	4603      	mov	r3, r0
 8002be8:	461a      	mov	r2, r3
 8002bea:	69fb      	ldr	r3, [r7, #28]
 8002bec:	4413      	add	r3, r2
 8002bee:	61fb      	str	r3, [r7, #28]
    break;
 8002bf0:	e06f      	b.n	8002cd2 <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_16K:
    /* AIF1 Sample Rate = 16 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0033);
 8002bf2:	89fb      	ldrh	r3, [r7, #14]
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	2233      	movs	r2, #51	; 0x33
 8002bf8:	f44f 7104 	mov.w	r1, #528	; 0x210
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f000 ff3d 	bl	8003a7c <CODEC_IO_Write>
 8002c02:	4603      	mov	r3, r0
 8002c04:	461a      	mov	r2, r3
 8002c06:	69fb      	ldr	r3, [r7, #28]
 8002c08:	4413      	add	r3, r2
 8002c0a:	61fb      	str	r3, [r7, #28]
    break;
 8002c0c:	e061      	b.n	8002cd2 <wm8994_Init+0x88a>

  case  AUDIO_FREQUENCY_32K:
    /* AIF1 Sample Rate = 32 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0063);
 8002c0e:	89fb      	ldrh	r3, [r7, #14]
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	2263      	movs	r2, #99	; 0x63
 8002c14:	f44f 7104 	mov.w	r1, #528	; 0x210
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f000 ff2f 	bl	8003a7c <CODEC_IO_Write>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	461a      	mov	r2, r3
 8002c22:	69fb      	ldr	r3, [r7, #28]
 8002c24:	4413      	add	r3, r2
 8002c26:	61fb      	str	r3, [r7, #28]
    break;
 8002c28:	e053      	b.n	8002cd2 <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_48K:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8002c2a:	89fb      	ldrh	r3, [r7, #14]
 8002c2c:	b2db      	uxtb	r3, r3
 8002c2e:	2283      	movs	r2, #131	; 0x83
 8002c30:	f44f 7104 	mov.w	r1, #528	; 0x210
 8002c34:	4618      	mov	r0, r3
 8002c36:	f000 ff21 	bl	8003a7c <CODEC_IO_Write>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	461a      	mov	r2, r3
 8002c3e:	69fb      	ldr	r3, [r7, #28]
 8002c40:	4413      	add	r3, r2
 8002c42:	61fb      	str	r3, [r7, #28]
    break;
 8002c44:	e045      	b.n	8002cd2 <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_96K:
    /* AIF1 Sample Rate = 96 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x00A3);
 8002c46:	89fb      	ldrh	r3, [r7, #14]
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	22a3      	movs	r2, #163	; 0xa3
 8002c4c:	f44f 7104 	mov.w	r1, #528	; 0x210
 8002c50:	4618      	mov	r0, r3
 8002c52:	f000 ff13 	bl	8003a7c <CODEC_IO_Write>
 8002c56:	4603      	mov	r3, r0
 8002c58:	461a      	mov	r2, r3
 8002c5a:	69fb      	ldr	r3, [r7, #28]
 8002c5c:	4413      	add	r3, r2
 8002c5e:	61fb      	str	r3, [r7, #28]
    break;
 8002c60:	e037      	b.n	8002cd2 <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_11K:
    /* AIF1 Sample Rate = 11.025 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0013);
 8002c62:	89fb      	ldrh	r3, [r7, #14]
 8002c64:	b2db      	uxtb	r3, r3
 8002c66:	2213      	movs	r2, #19
 8002c68:	f44f 7104 	mov.w	r1, #528	; 0x210
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f000 ff05 	bl	8003a7c <CODEC_IO_Write>
 8002c72:	4603      	mov	r3, r0
 8002c74:	461a      	mov	r2, r3
 8002c76:	69fb      	ldr	r3, [r7, #28]
 8002c78:	4413      	add	r3, r2
 8002c7a:	61fb      	str	r3, [r7, #28]
    break;
 8002c7c:	e029      	b.n	8002cd2 <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_22K:
    /* AIF1 Sample Rate = 22.050 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0043);
 8002c7e:	89fb      	ldrh	r3, [r7, #14]
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	2243      	movs	r2, #67	; 0x43
 8002c84:	f44f 7104 	mov.w	r1, #528	; 0x210
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f000 fef7 	bl	8003a7c <CODEC_IO_Write>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	461a      	mov	r2, r3
 8002c92:	69fb      	ldr	r3, [r7, #28]
 8002c94:	4413      	add	r3, r2
 8002c96:	61fb      	str	r3, [r7, #28]
    break;
 8002c98:	e01b      	b.n	8002cd2 <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_44K:
    /* AIF1 Sample Rate = 44.1 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0073);
 8002c9a:	89fb      	ldrh	r3, [r7, #14]
 8002c9c:	b2db      	uxtb	r3, r3
 8002c9e:	2273      	movs	r2, #115	; 0x73
 8002ca0:	f44f 7104 	mov.w	r1, #528	; 0x210
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f000 fee9 	bl	8003a7c <CODEC_IO_Write>
 8002caa:	4603      	mov	r3, r0
 8002cac:	461a      	mov	r2, r3
 8002cae:	69fb      	ldr	r3, [r7, #28]
 8002cb0:	4413      	add	r3, r2
 8002cb2:	61fb      	str	r3, [r7, #28]
    break; 
 8002cb4:	e00d      	b.n	8002cd2 <wm8994_Init+0x88a>
    
  default:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8002cb6:	89fb      	ldrh	r3, [r7, #14]
 8002cb8:	b2db      	uxtb	r3, r3
 8002cba:	2283      	movs	r2, #131	; 0x83
 8002cbc:	f44f 7104 	mov.w	r1, #528	; 0x210
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f000 fedb 	bl	8003a7c <CODEC_IO_Write>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	461a      	mov	r2, r3
 8002cca:	69fb      	ldr	r3, [r7, #28]
 8002ccc:	4413      	add	r3, r2
 8002cce:	61fb      	str	r3, [r7, #28]
    break; 
 8002cd0:	bf00      	nop
  }

  if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8002cd2:	8afb      	ldrh	r3, [r7, #22]
 8002cd4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002cd8:	d10e      	bne.n	8002cf8 <wm8994_Init+0x8b0>
  {
  /* AIF1 Word Length = 16-bits, AIF1 Format = DSP mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4018);    
 8002cda:	89fb      	ldrh	r3, [r7, #14]
 8002cdc:	b2db      	uxtb	r3, r3
 8002cde:	f244 0218 	movw	r2, #16408	; 0x4018
 8002ce2:	f44f 7140 	mov.w	r1, #768	; 0x300
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f000 fec8 	bl	8003a7c <CODEC_IO_Write>
 8002cec:	4603      	mov	r3, r0
 8002cee:	461a      	mov	r2, r3
 8002cf0:	69fb      	ldr	r3, [r7, #28]
 8002cf2:	4413      	add	r3, r2
 8002cf4:	61fb      	str	r3, [r7, #28]
 8002cf6:	e00d      	b.n	8002d14 <wm8994_Init+0x8cc>
  }
  else
  {
  /* AIF1 Word Length = 16-bits, AIF1 Format = I2S (Default Register Value) */
  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4010);
 8002cf8:	89fb      	ldrh	r3, [r7, #14]
 8002cfa:	b2db      	uxtb	r3, r3
 8002cfc:	f244 0210 	movw	r2, #16400	; 0x4010
 8002d00:	f44f 7140 	mov.w	r1, #768	; 0x300
 8002d04:	4618      	mov	r0, r3
 8002d06:	f000 feb9 	bl	8003a7c <CODEC_IO_Write>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	461a      	mov	r2, r3
 8002d0e:	69fb      	ldr	r3, [r7, #28]
 8002d10:	4413      	add	r3, r2
 8002d12:	61fb      	str	r3, [r7, #28]
  }
  
  /* slave mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x302, 0x0000);
 8002d14:	89fb      	ldrh	r3, [r7, #14]
 8002d16:	b2db      	uxtb	r3, r3
 8002d18:	2200      	movs	r2, #0
 8002d1a:	f240 3102 	movw	r1, #770	; 0x302
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f000 feac 	bl	8003a7c <CODEC_IO_Write>
 8002d24:	4603      	mov	r3, r0
 8002d26:	461a      	mov	r2, r3
 8002d28:	69fb      	ldr	r3, [r7, #28]
 8002d2a:	4413      	add	r3, r2
 8002d2c:	61fb      	str	r3, [r7, #28]
  
  /* Enable the DSP processing clock for AIF1, Enable the core clock */
  counter += CODEC_IO_Write(DeviceAddr, 0x208, 0x000A);
 8002d2e:	89fb      	ldrh	r3, [r7, #14]
 8002d30:	b2db      	uxtb	r3, r3
 8002d32:	220a      	movs	r2, #10
 8002d34:	f44f 7102 	mov.w	r1, #520	; 0x208
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f000 fe9f 	bl	8003a7c <CODEC_IO_Write>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	461a      	mov	r2, r3
 8002d42:	69fb      	ldr	r3, [r7, #28]
 8002d44:	4413      	add	r3, r2
 8002d46:	61fb      	str	r3, [r7, #28]
  
  /* Enable AIF1 Clock, AIF1 Clock Source = MCLK1 pin */
  counter += CODEC_IO_Write(DeviceAddr, 0x200, 0x0001);
 8002d48:	89fb      	ldrh	r3, [r7, #14]
 8002d4a:	b2db      	uxtb	r3, r3
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002d52:	4618      	mov	r0, r3
 8002d54:	f000 fe92 	bl	8003a7c <CODEC_IO_Write>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	461a      	mov	r2, r3
 8002d5c:	69fb      	ldr	r3, [r7, #28]
 8002d5e:	4413      	add	r3, r2
 8002d60:	61fb      	str	r3, [r7, #28]

  if (output_device > 0)  /* Audio output selected */
 8002d62:	8b3b      	ldrh	r3, [r7, #24]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	f000 817b 	beq.w	8003060 <wm8994_Init+0xc18>
  {
    if (output_device == OUTPUT_DEVICE_HEADPHONE)
 8002d6a:	8b3b      	ldrh	r3, [r7, #24]
 8002d6c:	2b02      	cmp	r3, #2
 8002d6e:	d157      	bne.n	8002e20 <wm8994_Init+0x9d8>
    {      
      /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
      counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0100);
 8002d70:	89fb      	ldrh	r3, [r7, #14]
 8002d72:	b2db      	uxtb	r3, r3
 8002d74:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d78:	212d      	movs	r1, #45	; 0x2d
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f000 fe7e 	bl	8003a7c <CODEC_IO_Write>
 8002d80:	4603      	mov	r3, r0
 8002d82:	461a      	mov	r2, r3
 8002d84:	69fb      	ldr	r3, [r7, #28]
 8002d86:	4413      	add	r3, r2
 8002d88:	61fb      	str	r3, [r7, #28]
      
      /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
      counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0100);    
 8002d8a:	89fb      	ldrh	r3, [r7, #14]
 8002d8c:	b2db      	uxtb	r3, r3
 8002d8e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d92:	212e      	movs	r1, #46	; 0x2e
 8002d94:	4618      	mov	r0, r3
 8002d96:	f000 fe71 	bl	8003a7c <CODEC_IO_Write>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	461a      	mov	r2, r3
 8002d9e:	69fb      	ldr	r3, [r7, #28]
 8002da0:	4413      	add	r3, r2
 8002da2:	61fb      	str	r3, [r7, #28]
            
      /* Startup sequence for Headphone */
      if(ColdStartup)
 8002da4:	4b0e      	ldr	r3, [pc, #56]	; (8002de0 <wm8994_Init+0x998>)
 8002da6:	781b      	ldrb	r3, [r3, #0]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d01b      	beq.n	8002de4 <wm8994_Init+0x99c>
      {
        counter += CODEC_IO_Write(DeviceAddr,0x110,0x8100);
 8002dac:	89fb      	ldrh	r3, [r7, #14]
 8002dae:	b2db      	uxtb	r3, r3
 8002db0:	f44f 4201 	mov.w	r2, #33024	; 0x8100
 8002db4:	f44f 7188 	mov.w	r1, #272	; 0x110
 8002db8:	4618      	mov	r0, r3
 8002dba:	f000 fe5f 	bl	8003a7c <CODEC_IO_Write>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	461a      	mov	r2, r3
 8002dc2:	69fb      	ldr	r3, [r7, #28]
 8002dc4:	4413      	add	r3, r2
 8002dc6:	61fb      	str	r3, [r7, #28]
        
        ColdStartup=0;
 8002dc8:	4b05      	ldr	r3, [pc, #20]	; (8002de0 <wm8994_Init+0x998>)
 8002dca:	2200      	movs	r2, #0
 8002dcc:	701a      	strb	r2, [r3, #0]
        /* Add Delay */
        AUDIO_IO_Delay(300);
 8002dce:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002dd2:	f001 f829 	bl	8003e28 <AUDIO_IO_Delay>
 8002dd6:	e016      	b.n	8002e06 <wm8994_Init+0x9be>
 8002dd8:	20007168 	.word	0x20007168
 8002ddc:	00017700 	.word	0x00017700
 8002de0:	20000034 	.word	0x20000034
      }
      else /* Headphone Warm Start-Up */
      { 
        counter += CODEC_IO_Write(DeviceAddr,0x110,0x8108);
 8002de4:	89fb      	ldrh	r3, [r7, #14]
 8002de6:	b2db      	uxtb	r3, r3
 8002de8:	f248 1208 	movw	r2, #33032	; 0x8108
 8002dec:	f44f 7188 	mov.w	r1, #272	; 0x110
 8002df0:	4618      	mov	r0, r3
 8002df2:	f000 fe43 	bl	8003a7c <CODEC_IO_Write>
 8002df6:	4603      	mov	r3, r0
 8002df8:	461a      	mov	r2, r3
 8002dfa:	69fb      	ldr	r3, [r7, #28]
 8002dfc:	4413      	add	r3, r2
 8002dfe:	61fb      	str	r3, [r7, #28]
        /* Add Delay */
        AUDIO_IO_Delay(50);
 8002e00:	2032      	movs	r0, #50	; 0x32
 8002e02:	f001 f811 	bl	8003e28 <AUDIO_IO_Delay>
      }

      /* Soft un-Mute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0000);
 8002e06:	89fb      	ldrh	r3, [r7, #14]
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8002e10:	4618      	mov	r0, r3
 8002e12:	f000 fe33 	bl	8003a7c <CODEC_IO_Write>
 8002e16:	4603      	mov	r3, r0
 8002e18:	461a      	mov	r2, r3
 8002e1a:	69fb      	ldr	r3, [r7, #28]
 8002e1c:	4413      	add	r3, r2
 8002e1e:	61fb      	str	r3, [r7, #28]
    }
    /* Analog Output Configuration */

    /* Enable SPKRVOL PGA, Enable SPKMIXR, Enable SPKLVOL PGA, Enable SPKMIXL */
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0300);
 8002e20:	89fb      	ldrh	r3, [r7, #14]
 8002e22:	b2db      	uxtb	r3, r3
 8002e24:	f44f 7240 	mov.w	r2, #768	; 0x300
 8002e28:	2103      	movs	r1, #3
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f000 fe26 	bl	8003a7c <CODEC_IO_Write>
 8002e30:	4603      	mov	r3, r0
 8002e32:	461a      	mov	r2, r3
 8002e34:	69fb      	ldr	r3, [r7, #28]
 8002e36:	4413      	add	r3, r2
 8002e38:	61fb      	str	r3, [r7, #28]

    /* Left Speaker Mixer Volume = 0dB */
    counter += CODEC_IO_Write(DeviceAddr, 0x22, 0x0000);
 8002e3a:	89fb      	ldrh	r3, [r7, #14]
 8002e3c:	b2db      	uxtb	r3, r3
 8002e3e:	2200      	movs	r2, #0
 8002e40:	2122      	movs	r1, #34	; 0x22
 8002e42:	4618      	mov	r0, r3
 8002e44:	f000 fe1a 	bl	8003a7c <CODEC_IO_Write>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	461a      	mov	r2, r3
 8002e4c:	69fb      	ldr	r3, [r7, #28]
 8002e4e:	4413      	add	r3, r2
 8002e50:	61fb      	str	r3, [r7, #28]

    /* Speaker output mode = Class D, Right Speaker Mixer Volume = 0dB ((0x23, 0x0100) = class AB)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x23, 0x0000);
 8002e52:	89fb      	ldrh	r3, [r7, #14]
 8002e54:	b2db      	uxtb	r3, r3
 8002e56:	2200      	movs	r2, #0
 8002e58:	2123      	movs	r1, #35	; 0x23
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f000 fe0e 	bl	8003a7c <CODEC_IO_Write>
 8002e60:	4603      	mov	r3, r0
 8002e62:	461a      	mov	r2, r3
 8002e64:	69fb      	ldr	r3, [r7, #28]
 8002e66:	4413      	add	r3, r2
 8002e68:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC2 (Left) to Left Speaker Mixer (SPKMIXL) path,
    Unmute DAC2 (Right) to Right Speaker Mixer (SPKMIXR) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x36, 0x0300);
 8002e6a:	89fb      	ldrh	r3, [r7, #14]
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8002e72:	2136      	movs	r1, #54	; 0x36
 8002e74:	4618      	mov	r0, r3
 8002e76:	f000 fe01 	bl	8003a7c <CODEC_IO_Write>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	461a      	mov	r2, r3
 8002e7e:	69fb      	ldr	r3, [r7, #28]
 8002e80:	4413      	add	r3, r2
 8002e82:	61fb      	str	r3, [r7, #28]

    /* Enable bias generator, Enable VMID, Enable SPKOUTL, Enable SPKOUTR */
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x3003);
 8002e84:	89fb      	ldrh	r3, [r7, #14]
 8002e86:	b2db      	uxtb	r3, r3
 8002e88:	f243 0203 	movw	r2, #12291	; 0x3003
 8002e8c:	2101      	movs	r1, #1
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f000 fdf4 	bl	8003a7c <CODEC_IO_Write>
 8002e94:	4603      	mov	r3, r0
 8002e96:	461a      	mov	r2, r3
 8002e98:	69fb      	ldr	r3, [r7, #28]
 8002e9a:	4413      	add	r3, r2
 8002e9c:	61fb      	str	r3, [r7, #28]

    /* Headphone/Speaker Enable */

    if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8002e9e:	8afb      	ldrh	r3, [r7, #22]
 8002ea0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ea4:	d10d      	bne.n	8002ec2 <wm8994_Init+0xa7a>
    {
    /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslots 0 and 1 */
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0205);
 8002ea6:	89fb      	ldrh	r3, [r7, #14]
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	f240 2205 	movw	r2, #517	; 0x205
 8002eae:	2151      	movs	r1, #81	; 0x51
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f000 fde3 	bl	8003a7c <CODEC_IO_Write>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	461a      	mov	r2, r3
 8002eba:	69fb      	ldr	r3, [r7, #28]
 8002ebc:	4413      	add	r3, r2
 8002ebe:	61fb      	str	r3, [r7, #28]
 8002ec0:	e00b      	b.n	8002eda <wm8994_Init+0xa92>
    }
    else
    {
    /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslot 0 */
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0005);      
 8002ec2:	89fb      	ldrh	r3, [r7, #14]
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	2205      	movs	r2, #5
 8002ec8:	2151      	movs	r1, #81	; 0x51
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f000 fdd6 	bl	8003a7c <CODEC_IO_Write>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	461a      	mov	r2, r3
 8002ed4:	69fb      	ldr	r3, [r7, #28]
 8002ed6:	4413      	add	r3, r2
 8002ed8:	61fb      	str	r3, [r7, #28]
    }

    /* Enable bias generator, Enable VMID, Enable HPOUT1 (Left) and Enable HPOUT1 (Right) input stages */
    /* idem for Speaker */
    power_mgnt_reg_1 |= 0x0303 | 0x3003;
 8002eda:	8b7b      	ldrh	r3, [r7, #26]
 8002edc:	f443 534c 	orr.w	r3, r3, #13056	; 0x3300
 8002ee0:	f043 0303 	orr.w	r3, r3, #3
 8002ee4:	837b      	strh	r3, [r7, #26]
    counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8002ee6:	89fb      	ldrh	r3, [r7, #14]
 8002ee8:	b2db      	uxtb	r3, r3
 8002eea:	8b7a      	ldrh	r2, [r7, #26]
 8002eec:	2101      	movs	r1, #1
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f000 fdc4 	bl	8003a7c <CODEC_IO_Write>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	461a      	mov	r2, r3
 8002ef8:	69fb      	ldr	r3, [r7, #28]
 8002efa:	4413      	add	r3, r2
 8002efc:	61fb      	str	r3, [r7, #28]

    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate stages */
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x0022);
 8002efe:	89fb      	ldrh	r3, [r7, #14]
 8002f00:	b2db      	uxtb	r3, r3
 8002f02:	2222      	movs	r2, #34	; 0x22
 8002f04:	2160      	movs	r1, #96	; 0x60
 8002f06:	4618      	mov	r0, r3
 8002f08:	f000 fdb8 	bl	8003a7c <CODEC_IO_Write>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	461a      	mov	r2, r3
 8002f10:	69fb      	ldr	r3, [r7, #28]
 8002f12:	4413      	add	r3, r2
 8002f14:	61fb      	str	r3, [r7, #28]

    /* Enable Charge Pump */
    counter += CODEC_IO_Write(DeviceAddr, 0x4C, 0x9F25);
 8002f16:	89fb      	ldrh	r3, [r7, #14]
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	f649 7225 	movw	r2, #40741	; 0x9f25
 8002f1e:	214c      	movs	r1, #76	; 0x4c
 8002f20:	4618      	mov	r0, r3
 8002f22:	f000 fdab 	bl	8003a7c <CODEC_IO_Write>
 8002f26:	4603      	mov	r3, r0
 8002f28:	461a      	mov	r2, r3
 8002f2a:	69fb      	ldr	r3, [r7, #28]
 8002f2c:	4413      	add	r3, r2
 8002f2e:	61fb      	str	r3, [r7, #28]

    /* Add Delay */
    AUDIO_IO_Delay(15);
 8002f30:	200f      	movs	r0, #15
 8002f32:	f000 ff79 	bl	8003e28 <AUDIO_IO_Delay>

    /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0001);
 8002f36:	89fb      	ldrh	r3, [r7, #14]
 8002f38:	b2db      	uxtb	r3, r3
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	212d      	movs	r1, #45	; 0x2d
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f000 fd9c 	bl	8003a7c <CODEC_IO_Write>
 8002f44:	4603      	mov	r3, r0
 8002f46:	461a      	mov	r2, r3
 8002f48:	69fb      	ldr	r3, [r7, #28]
 8002f4a:	4413      	add	r3, r2
 8002f4c:	61fb      	str	r3, [r7, #28]

    /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0001);
 8002f4e:	89fb      	ldrh	r3, [r7, #14]
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	2201      	movs	r2, #1
 8002f54:	212e      	movs	r1, #46	; 0x2e
 8002f56:	4618      	mov	r0, r3
 8002f58:	f000 fd90 	bl	8003a7c <CODEC_IO_Write>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	461a      	mov	r2, r3
 8002f60:	69fb      	ldr	r3, [r7, #28]
 8002f62:	4413      	add	r3, r2
 8002f64:	61fb      	str	r3, [r7, #28]

    /* Enable Left Output Mixer (MIXOUTL), Enable Right Output Mixer (MIXOUTR) */
    /* idem for SPKOUTL and SPKOUTR */
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0030 | 0x0300);
 8002f66:	89fb      	ldrh	r3, [r7, #14]
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	f44f 724c 	mov.w	r2, #816	; 0x330
 8002f6e:	2103      	movs	r1, #3
 8002f70:	4618      	mov	r0, r3
 8002f72:	f000 fd83 	bl	8003a7c <CODEC_IO_Write>
 8002f76:	4603      	mov	r3, r0
 8002f78:	461a      	mov	r2, r3
 8002f7a:	69fb      	ldr	r3, [r7, #28]
 8002f7c:	4413      	add	r3, r2
 8002f7e:	61fb      	str	r3, [r7, #28]

    /* Enable DC Servo and trigger start-up mode on left and right channels */
    counter += CODEC_IO_Write(DeviceAddr, 0x54, 0x0033);
 8002f80:	89fb      	ldrh	r3, [r7, #14]
 8002f82:	b2db      	uxtb	r3, r3
 8002f84:	2233      	movs	r2, #51	; 0x33
 8002f86:	2154      	movs	r1, #84	; 0x54
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f000 fd77 	bl	8003a7c <CODEC_IO_Write>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	461a      	mov	r2, r3
 8002f92:	69fb      	ldr	r3, [r7, #28]
 8002f94:	4413      	add	r3, r2
 8002f96:	61fb      	str	r3, [r7, #28]

    /* Add Delay */
    AUDIO_IO_Delay(257);
 8002f98:	f240 1001 	movw	r0, #257	; 0x101
 8002f9c:	f000 ff44 	bl	8003e28 <AUDIO_IO_Delay>

    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate and output stages. Remove clamps */
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x00EE);
 8002fa0:	89fb      	ldrh	r3, [r7, #14]
 8002fa2:	b2db      	uxtb	r3, r3
 8002fa4:	22ee      	movs	r2, #238	; 0xee
 8002fa6:	2160      	movs	r1, #96	; 0x60
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f000 fd67 	bl	8003a7c <CODEC_IO_Write>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	461a      	mov	r2, r3
 8002fb2:	69fb      	ldr	r3, [r7, #28]
 8002fb4:	4413      	add	r3, r2
 8002fb6:	61fb      	str	r3, [r7, #28]

    /* Unmutes */

    /* Unmute DAC 1 (Left) */
    counter += CODEC_IO_Write(DeviceAddr, 0x610, 0x00C0);
 8002fb8:	89fb      	ldrh	r3, [r7, #14]
 8002fba:	b2db      	uxtb	r3, r3
 8002fbc:	22c0      	movs	r2, #192	; 0xc0
 8002fbe:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f000 fd5a 	bl	8003a7c <CODEC_IO_Write>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	461a      	mov	r2, r3
 8002fcc:	69fb      	ldr	r3, [r7, #28]
 8002fce:	4413      	add	r3, r2
 8002fd0:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 1 (Right) */
    counter += CODEC_IO_Write(DeviceAddr, 0x611, 0x00C0);
 8002fd2:	89fb      	ldrh	r3, [r7, #14]
 8002fd4:	b2db      	uxtb	r3, r3
 8002fd6:	22c0      	movs	r2, #192	; 0xc0
 8002fd8:	f240 6111 	movw	r1, #1553	; 0x611
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f000 fd4d 	bl	8003a7c <CODEC_IO_Write>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	461a      	mov	r2, r3
 8002fe6:	69fb      	ldr	r3, [r7, #28]
 8002fe8:	4413      	add	r3, r2
 8002fea:	61fb      	str	r3, [r7, #28]

    /* Unmute the AIF1 Timeslot 0 DAC path */
    counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0010);
 8002fec:	89fb      	ldrh	r3, [r7, #14]
 8002fee:	b2db      	uxtb	r3, r3
 8002ff0:	2210      	movs	r2, #16
 8002ff2:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f000 fd40 	bl	8003a7c <CODEC_IO_Write>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	461a      	mov	r2, r3
 8003000:	69fb      	ldr	r3, [r7, #28]
 8003002:	4413      	add	r3, r2
 8003004:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 2 (Left) */
    counter += CODEC_IO_Write(DeviceAddr, 0x612, 0x00C0);
 8003006:	89fb      	ldrh	r3, [r7, #14]
 8003008:	b2db      	uxtb	r3, r3
 800300a:	22c0      	movs	r2, #192	; 0xc0
 800300c:	f240 6112 	movw	r1, #1554	; 0x612
 8003010:	4618      	mov	r0, r3
 8003012:	f000 fd33 	bl	8003a7c <CODEC_IO_Write>
 8003016:	4603      	mov	r3, r0
 8003018:	461a      	mov	r2, r3
 800301a:	69fb      	ldr	r3, [r7, #28]
 800301c:	4413      	add	r3, r2
 800301e:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 2 (Right) */
    counter += CODEC_IO_Write(DeviceAddr, 0x613, 0x00C0);
 8003020:	89fb      	ldrh	r3, [r7, #14]
 8003022:	b2db      	uxtb	r3, r3
 8003024:	22c0      	movs	r2, #192	; 0xc0
 8003026:	f240 6113 	movw	r1, #1555	; 0x613
 800302a:	4618      	mov	r0, r3
 800302c:	f000 fd26 	bl	8003a7c <CODEC_IO_Write>
 8003030:	4603      	mov	r3, r0
 8003032:	461a      	mov	r2, r3
 8003034:	69fb      	ldr	r3, [r7, #28]
 8003036:	4413      	add	r3, r2
 8003038:	61fb      	str	r3, [r7, #28]

    /* Unmute the AIF1 Timeslot 1 DAC2 path */
    counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0010);
 800303a:	89fb      	ldrh	r3, [r7, #14]
 800303c:	b2db      	uxtb	r3, r3
 800303e:	2210      	movs	r2, #16
 8003040:	f240 4122 	movw	r1, #1058	; 0x422
 8003044:	4618      	mov	r0, r3
 8003046:	f000 fd19 	bl	8003a7c <CODEC_IO_Write>
 800304a:	4603      	mov	r3, r0
 800304c:	461a      	mov	r2, r3
 800304e:	69fb      	ldr	r3, [r7, #28]
 8003050:	4413      	add	r3, r2
 8003052:	61fb      	str	r3, [r7, #28]
    
    /* Volume Control */
    wm8994_SetVolume(DeviceAddr, Volume);
 8003054:	7afa      	ldrb	r2, [r7, #11]
 8003056:	89fb      	ldrh	r3, [r7, #14]
 8003058:	4611      	mov	r1, r2
 800305a:	4618      	mov	r0, r3
 800305c:	f000 f984 	bl	8003368 <wm8994_SetVolume>
  }

  if (input_device > 0) /* Audio input selected */
 8003060:	8afb      	ldrh	r3, [r7, #22]
 8003062:	2b00      	cmp	r3, #0
 8003064:	f000 80a6 	beq.w	80031b4 <wm8994_Init+0xd6c>
  {
    if ((input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_1) || (input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_2))
 8003068:	8afb      	ldrh	r3, [r7, #22]
 800306a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800306e:	d003      	beq.n	8003078 <wm8994_Init+0xc30>
 8003070:	8afb      	ldrh	r3, [r7, #22]
 8003072:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003076:	d12b      	bne.n	80030d0 <wm8994_Init+0xc88>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      power_mgnt_reg_1 |= 0x0013;
 8003078:	8b7b      	ldrh	r3, [r7, #26]
 800307a:	f043 0313 	orr.w	r3, r3, #19
 800307e:	837b      	strh	r3, [r7, #26]
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8003080:	89fb      	ldrh	r3, [r7, #14]
 8003082:	b2db      	uxtb	r3, r3
 8003084:	8b7a      	ldrh	r2, [r7, #26]
 8003086:	2101      	movs	r1, #1
 8003088:	4618      	mov	r0, r3
 800308a:	f000 fcf7 	bl	8003a7c <CODEC_IO_Write>
 800308e:	4603      	mov	r3, r0
 8003090:	461a      	mov	r2, r3
 8003092:	69fb      	ldr	r3, [r7, #28]
 8003094:	4413      	add	r3, r2
 8003096:	61fb      	str	r3, [r7, #28]

      /* ADC oversample enable */
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 8003098:	89fb      	ldrh	r3, [r7, #14]
 800309a:	b2db      	uxtb	r3, r3
 800309c:	2202      	movs	r2, #2
 800309e:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 80030a2:	4618      	mov	r0, r3
 80030a4:	f000 fcea 	bl	8003a7c <CODEC_IO_Write>
 80030a8:	4603      	mov	r3, r0
 80030aa:	461a      	mov	r2, r3
 80030ac:	69fb      	ldr	r3, [r7, #28]
 80030ae:	4413      	add	r3, r2
 80030b0:	61fb      	str	r3, [r7, #28]

      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x3800);
 80030b2:	89fb      	ldrh	r3, [r7, #14]
 80030b4:	b2db      	uxtb	r3, r3
 80030b6:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80030ba:	f240 4111 	movw	r1, #1041	; 0x411
 80030be:	4618      	mov	r0, r3
 80030c0:	f000 fcdc 	bl	8003a7c <CODEC_IO_Write>
 80030c4:	4603      	mov	r3, r0
 80030c6:	461a      	mov	r2, r3
 80030c8:	69fb      	ldr	r3, [r7, #28]
 80030ca:	4413      	add	r3, r2
 80030cc:	61fb      	str	r3, [r7, #28]
 80030ce:	e06b      	b.n	80031a8 <wm8994_Init+0xd60>
    }
    else if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 80030d0:	8afb      	ldrh	r3, [r7, #22]
 80030d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80030d6:	d139      	bne.n	800314c <wm8994_Init+0xd04>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      power_mgnt_reg_1 |= 0x0013;
 80030d8:	8b7b      	ldrh	r3, [r7, #26]
 80030da:	f043 0313 	orr.w	r3, r3, #19
 80030de:	837b      	strh	r3, [r7, #26]
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 80030e0:	89fb      	ldrh	r3, [r7, #14]
 80030e2:	b2db      	uxtb	r3, r3
 80030e4:	8b7a      	ldrh	r2, [r7, #26]
 80030e6:	2101      	movs	r1, #1
 80030e8:	4618      	mov	r0, r3
 80030ea:	f000 fcc7 	bl	8003a7c <CODEC_IO_Write>
 80030ee:	4603      	mov	r3, r0
 80030f0:	461a      	mov	r2, r3
 80030f2:	69fb      	ldr	r3, [r7, #28]
 80030f4:	4413      	add	r3, r2
 80030f6:	61fb      	str	r3, [r7, #28]

      /* ADC oversample enable */
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 80030f8:	89fb      	ldrh	r3, [r7, #14]
 80030fa:	b2db      	uxtb	r3, r3
 80030fc:	2202      	movs	r2, #2
 80030fe:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 8003102:	4618      	mov	r0, r3
 8003104:	f000 fcba 	bl	8003a7c <CODEC_IO_Write>
 8003108:	4603      	mov	r3, r0
 800310a:	461a      	mov	r2, r3
 800310c:	69fb      	ldr	r3, [r7, #28]
 800310e:	4413      	add	r3, r2
 8003110:	61fb      	str	r3, [r7, #28]
    
      /* AIF ADC1 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
 8003112:	89fb      	ldrh	r3, [r7, #14]
 8003114:	b2db      	uxtb	r3, r3
 8003116:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 800311a:	f44f 6182 	mov.w	r1, #1040	; 0x410
 800311e:	4618      	mov	r0, r3
 8003120:	f000 fcac 	bl	8003a7c <CODEC_IO_Write>
 8003124:	4603      	mov	r3, r0
 8003126:	461a      	mov	r2, r3
 8003128:	69fb      	ldr	r3, [r7, #28]
 800312a:	4413      	add	r3, r2
 800312c:	61fb      	str	r3, [r7, #28]
      
      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x1800);      
 800312e:	89fb      	ldrh	r3, [r7, #14]
 8003130:	b2db      	uxtb	r3, r3
 8003132:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 8003136:	f240 4111 	movw	r1, #1041	; 0x411
 800313a:	4618      	mov	r0, r3
 800313c:	f000 fc9e 	bl	8003a7c <CODEC_IO_Write>
 8003140:	4603      	mov	r3, r0
 8003142:	461a      	mov	r2, r3
 8003144:	69fb      	ldr	r3, [r7, #28]
 8003146:	4413      	add	r3, r2
 8003148:	61fb      	str	r3, [r7, #28]
 800314a:	e02d      	b.n	80031a8 <wm8994_Init+0xd60>
    }    
    else if ((input_device == INPUT_DEVICE_INPUT_LINE_1) || (input_device == INPUT_DEVICE_INPUT_LINE_2))
 800314c:	8afb      	ldrh	r3, [r7, #22]
 800314e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003152:	d003      	beq.n	800315c <wm8994_Init+0xd14>
 8003154:	8afb      	ldrh	r3, [r7, #22]
 8003156:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800315a:	d125      	bne.n	80031a8 <wm8994_Init+0xd60>
    {

      /* Disable mute on IN1L, IN1L Volume = +0dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x18, 0x000B);
 800315c:	89fb      	ldrh	r3, [r7, #14]
 800315e:	b2db      	uxtb	r3, r3
 8003160:	220b      	movs	r2, #11
 8003162:	2118      	movs	r1, #24
 8003164:	4618      	mov	r0, r3
 8003166:	f000 fc89 	bl	8003a7c <CODEC_IO_Write>
 800316a:	4603      	mov	r3, r0
 800316c:	461a      	mov	r2, r3
 800316e:	69fb      	ldr	r3, [r7, #28]
 8003170:	4413      	add	r3, r2
 8003172:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1R, IN1R Volume = +0dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x1A, 0x000B);
 8003174:	89fb      	ldrh	r3, [r7, #14]
 8003176:	b2db      	uxtb	r3, r3
 8003178:	220b      	movs	r2, #11
 800317a:	211a      	movs	r1, #26
 800317c:	4618      	mov	r0, r3
 800317e:	f000 fc7d 	bl	8003a7c <CODEC_IO_Write>
 8003182:	4603      	mov	r3, r0
 8003184:	461a      	mov	r2, r3
 8003186:	69fb      	ldr	r3, [r7, #28]
 8003188:	4413      	add	r3, r2
 800318a:	61fb      	str	r3, [r7, #28]

      /* AIF ADC1 HPF enable, HPF cut = hifi mode fc=4Hz at fs=48kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
 800318c:	89fb      	ldrh	r3, [r7, #14]
 800318e:	b2db      	uxtb	r3, r3
 8003190:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 8003194:	f44f 6182 	mov.w	r1, #1040	; 0x410
 8003198:	4618      	mov	r0, r3
 800319a:	f000 fc6f 	bl	8003a7c <CODEC_IO_Write>
 800319e:	4603      	mov	r3, r0
 80031a0:	461a      	mov	r2, r3
 80031a2:	69fb      	ldr	r3, [r7, #28]
 80031a4:	4413      	add	r3, r2
 80031a6:	61fb      	str	r3, [r7, #28]
    }
    /* Volume Control */
    wm8994_SetVolume(DeviceAddr, Volume);
 80031a8:	7afa      	ldrb	r2, [r7, #11]
 80031aa:	89fb      	ldrh	r3, [r7, #14]
 80031ac:	4611      	mov	r1, r2
 80031ae:	4618      	mov	r0, r3
 80031b0:	f000 f8da 	bl	8003368 <wm8994_SetVolume>
  }
  /* Return communication control value */
  return counter;  
 80031b4:	69fb      	ldr	r3, [r7, #28]
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	3720      	adds	r7, #32
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}
 80031be:	bf00      	nop

080031c0 <wm8994_DeInit>:
  * @brief  Deinitializes the audio codec.
  * @param  None
  * @retval  None
  */
void wm8994_DeInit(void)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	af00      	add	r7, sp, #0
  /* Deinitialize Audio Codec interface */
  AUDIO_IO_DeInit();
 80031c4:	f000 fdd2 	bl	8003d6c <AUDIO_IO_DeInit>
}
 80031c8:	bf00      	nop
 80031ca:	bd80      	pop	{r7, pc}

080031cc <wm8994_ReadID>:
  * @brief  Get the WM8994 ID.
  * @param DeviceAddr: Device address on communication Bus.
  * @retval The WM8994 ID 
  */
uint32_t wm8994_ReadID(uint16_t DeviceAddr)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b082      	sub	sp, #8
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	4603      	mov	r3, r0
 80031d4:	80fb      	strh	r3, [r7, #6]
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();
 80031d6:	f000 fdbf 	bl	8003d58 <AUDIO_IO_Init>

  return ((uint32_t)AUDIO_IO_Read(DeviceAddr, WM8994_CHIPID_ADDR));
 80031da:	88fb      	ldrh	r3, [r7, #6]
 80031dc:	b2db      	uxtb	r3, r3
 80031de:	2100      	movs	r1, #0
 80031e0:	4618      	mov	r0, r3
 80031e2:	f000 fdf5 	bl	8003dd0 <AUDIO_IO_Read>
 80031e6:	4603      	mov	r3, r0
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	3708      	adds	r7, #8
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd80      	pop	{r7, pc}

080031f0 <wm8994_Play>:
  * @note For this codec no Play options are required.
  * @param DeviceAddr: Device address on communication Bus.   
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Play(uint16_t DeviceAddr, uint16_t* pBuffer, uint16_t Size)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b084      	sub	sp, #16
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	4603      	mov	r3, r0
 80031f8:	6039      	str	r1, [r7, #0]
 80031fa:	80fb      	strh	r3, [r7, #6]
 80031fc:	4613      	mov	r3, r2
 80031fe:	80bb      	strh	r3, [r7, #4]
  uint32_t counter = 0;
 8003200:	2300      	movs	r3, #0
 8003202:	60fb      	str	r3, [r7, #12]
 
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8003204:	88fb      	ldrh	r3, [r7, #6]
 8003206:	2100      	movs	r1, #0
 8003208:	4618      	mov	r0, r3
 800320a:	f000 f9d1 	bl	80035b0 <wm8994_SetMute>
 800320e:	4602      	mov	r2, r0
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	4413      	add	r3, r2
 8003214:	60fb      	str	r3, [r7, #12]
  
  return counter;
 8003216:	68fb      	ldr	r3, [r7, #12]
}
 8003218:	4618      	mov	r0, r3
 800321a:	3710      	adds	r7, #16
 800321c:	46bd      	mov	sp, r7
 800321e:	bd80      	pop	{r7, pc}

08003220 <wm8994_Pause>:
  * @brief Pauses playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Pause(uint16_t DeviceAddr)
{  
 8003220:	b580      	push	{r7, lr}
 8003222:	b084      	sub	sp, #16
 8003224:	af00      	add	r7, sp, #0
 8003226:	4603      	mov	r3, r0
 8003228:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 800322a:	2300      	movs	r3, #0
 800322c:	60fb      	str	r3, [r7, #12]
 
  /* Pause the audio file playing */
  /* Mute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 800322e:	88fb      	ldrh	r3, [r7, #6]
 8003230:	2101      	movs	r1, #1
 8003232:	4618      	mov	r0, r3
 8003234:	f000 f9bc 	bl	80035b0 <wm8994_SetMute>
 8003238:	4602      	mov	r2, r0
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	4413      	add	r3, r2
 800323e:	60fb      	str	r3, [r7, #12]
  
  /* Put the Codec in Power save mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x01);
 8003240:	88fb      	ldrh	r3, [r7, #6]
 8003242:	b2db      	uxtb	r3, r3
 8003244:	2201      	movs	r2, #1
 8003246:	2102      	movs	r1, #2
 8003248:	4618      	mov	r0, r3
 800324a:	f000 fc17 	bl	8003a7c <CODEC_IO_Write>
 800324e:	4603      	mov	r3, r0
 8003250:	461a      	mov	r2, r3
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	4413      	add	r3, r2
 8003256:	60fb      	str	r3, [r7, #12]
 
  return counter;
 8003258:	68fb      	ldr	r3, [r7, #12]
}
 800325a:	4618      	mov	r0, r3
 800325c:	3710      	adds	r7, #16
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}

08003262 <wm8994_Resume>:
  * @brief Resumes playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Resume(uint16_t DeviceAddr)
{
 8003262:	b580      	push	{r7, lr}
 8003264:	b084      	sub	sp, #16
 8003266:	af00      	add	r7, sp, #0
 8003268:	4603      	mov	r3, r0
 800326a:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 800326c:	2300      	movs	r3, #0
 800326e:	60fb      	str	r3, [r7, #12]
 
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8003270:	88fb      	ldrh	r3, [r7, #6]
 8003272:	2100      	movs	r1, #0
 8003274:	4618      	mov	r0, r3
 8003276:	f000 f99b 	bl	80035b0 <wm8994_SetMute>
 800327a:	4602      	mov	r2, r0
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	4413      	add	r3, r2
 8003280:	60fb      	str	r3, [r7, #12]
  
  return counter;
 8003282:	68fb      	ldr	r3, [r7, #12]
}
 8003284:	4618      	mov	r0, r3
 8003286:	3710      	adds	r7, #16
 8003288:	46bd      	mov	sp, r7
 800328a:	bd80      	pop	{r7, pc}

0800328c <wm8994_Stop>:
  *                           (user should re-Initialize the codec in order to 
  *                            play again the audio stream).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Stop(uint16_t DeviceAddr, uint32_t CodecPdwnMode)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b084      	sub	sp, #16
 8003290:	af00      	add	r7, sp, #0
 8003292:	4603      	mov	r3, r0
 8003294:	6039      	str	r1, [r7, #0]
 8003296:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8003298:	2300      	movs	r3, #0
 800329a:	60fb      	str	r3, [r7, #12]

  if (outputEnabled != 0)
 800329c:	4b31      	ldr	r3, [pc, #196]	; (8003364 <wm8994_Stop+0xd8>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d05a      	beq.n	800335a <wm8994_Stop+0xce>
  {
    /* Mute the output first */
    counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 80032a4:	88fb      	ldrh	r3, [r7, #6]
 80032a6:	2101      	movs	r1, #1
 80032a8:	4618      	mov	r0, r3
 80032aa:	f000 f981 	bl	80035b0 <wm8994_SetMute>
 80032ae:	4602      	mov	r2, r0
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	4413      	add	r3, r2
 80032b4:	60fb      	str	r3, [r7, #12]

    if (CodecPdwnMode == CODEC_PDWN_SW)
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	2b02      	cmp	r3, #2
 80032ba:	d04e      	beq.n	800335a <wm8994_Stop+0xce>
      /* Only output mute required*/
    }
    else /* CODEC_PDWN_HW */
    {
      /* Mute the AIF1 Timeslot 0 DAC1 path */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 80032bc:	88fb      	ldrh	r3, [r7, #6]
 80032be:	b2db      	uxtb	r3, r3
 80032c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032c4:	f44f 6184 	mov.w	r1, #1056	; 0x420
 80032c8:	4618      	mov	r0, r3
 80032ca:	f000 fbd7 	bl	8003a7c <CODEC_IO_Write>
 80032ce:	4603      	mov	r3, r0
 80032d0:	461a      	mov	r2, r3
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	4413      	add	r3, r2
 80032d6:	60fb      	str	r3, [r7, #12]

      /* Mute the AIF1 Timeslot 1 DAC2 path */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0200);
 80032d8:	88fb      	ldrh	r3, [r7, #6]
 80032da:	b2db      	uxtb	r3, r3
 80032dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032e0:	f240 4122 	movw	r1, #1058	; 0x422
 80032e4:	4618      	mov	r0, r3
 80032e6:	f000 fbc9 	bl	8003a7c <CODEC_IO_Write>
 80032ea:	4603      	mov	r3, r0
 80032ec:	461a      	mov	r2, r3
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	4413      	add	r3, r2
 80032f2:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1L_TO_HPOUT1L */
      counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0000);
 80032f4:	88fb      	ldrh	r3, [r7, #6]
 80032f6:	b2db      	uxtb	r3, r3
 80032f8:	2200      	movs	r2, #0
 80032fa:	212d      	movs	r1, #45	; 0x2d
 80032fc:	4618      	mov	r0, r3
 80032fe:	f000 fbbd 	bl	8003a7c <CODEC_IO_Write>
 8003302:	4603      	mov	r3, r0
 8003304:	461a      	mov	r2, r3
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	4413      	add	r3, r2
 800330a:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1R_TO_HPOUT1R */
      counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0000);
 800330c:	88fb      	ldrh	r3, [r7, #6]
 800330e:	b2db      	uxtb	r3, r3
 8003310:	2200      	movs	r2, #0
 8003312:	212e      	movs	r1, #46	; 0x2e
 8003314:	4618      	mov	r0, r3
 8003316:	f000 fbb1 	bl	8003a7c <CODEC_IO_Write>
 800331a:	4603      	mov	r3, r0
 800331c:	461a      	mov	r2, r3
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	4413      	add	r3, r2
 8003322:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1 and DAC2 */
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0000);
 8003324:	88fb      	ldrh	r3, [r7, #6]
 8003326:	b2db      	uxtb	r3, r3
 8003328:	2200      	movs	r2, #0
 800332a:	2105      	movs	r1, #5
 800332c:	4618      	mov	r0, r3
 800332e:	f000 fba5 	bl	8003a7c <CODEC_IO_Write>
 8003332:	4603      	mov	r3, r0
 8003334:	461a      	mov	r2, r3
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	4413      	add	r3, r2
 800333a:	60fb      	str	r3, [r7, #12]

      /* Reset Codec by writing in 0x0000 address register */
      counter += CODEC_IO_Write(DeviceAddr, 0x0000, 0x0000);
 800333c:	88fb      	ldrh	r3, [r7, #6]
 800333e:	b2db      	uxtb	r3, r3
 8003340:	2200      	movs	r2, #0
 8003342:	2100      	movs	r1, #0
 8003344:	4618      	mov	r0, r3
 8003346:	f000 fb99 	bl	8003a7c <CODEC_IO_Write>
 800334a:	4603      	mov	r3, r0
 800334c:	461a      	mov	r2, r3
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	4413      	add	r3, r2
 8003352:	60fb      	str	r3, [r7, #12]

      outputEnabled = 0;
 8003354:	4b03      	ldr	r3, [pc, #12]	; (8003364 <wm8994_Stop+0xd8>)
 8003356:	2200      	movs	r2, #0
 8003358:	601a      	str	r2, [r3, #0]
    }
  }
  return counter;
 800335a:	68fb      	ldr	r3, [r7, #12]
}
 800335c:	4618      	mov	r0, r3
 800335e:	3710      	adds	r7, #16
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}
 8003364:	20007164 	.word	0x20007164

08003368 <wm8994_SetVolume>:
  * @param Volume: a byte value from 0 to 255 (refer to codec registers 
  *         description for more details).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetVolume(uint16_t DeviceAddr, uint8_t Volume)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b084      	sub	sp, #16
 800336c:	af00      	add	r7, sp, #0
 800336e:	4603      	mov	r3, r0
 8003370:	460a      	mov	r2, r1
 8003372:	80fb      	strh	r3, [r7, #6]
 8003374:	4613      	mov	r3, r2
 8003376:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0;
 8003378:	2300      	movs	r3, #0
 800337a:	60fb      	str	r3, [r7, #12]
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 800337c:	797b      	ldrb	r3, [r7, #5]
 800337e:	2b64      	cmp	r3, #100	; 0x64
 8003380:	d80b      	bhi.n	800339a <wm8994_SetVolume+0x32>
 8003382:	797a      	ldrb	r2, [r7, #5]
 8003384:	4613      	mov	r3, r2
 8003386:	019b      	lsls	r3, r3, #6
 8003388:	1a9b      	subs	r3, r3, r2
 800338a:	4a86      	ldr	r2, [pc, #536]	; (80035a4 <wm8994_SetVolume+0x23c>)
 800338c:	fb82 1203 	smull	r1, r2, r2, r3
 8003390:	1152      	asrs	r2, r2, #5
 8003392:	17db      	asrs	r3, r3, #31
 8003394:	1ad3      	subs	r3, r2, r3
 8003396:	b2db      	uxtb	r3, r3
 8003398:	e000      	b.n	800339c <wm8994_SetVolume+0x34>
 800339a:	2364      	movs	r3, #100	; 0x64
 800339c:	72fb      	strb	r3, [r7, #11]

  /* Output volume */
  if (outputEnabled != 0)
 800339e:	4b82      	ldr	r3, [pc, #520]	; (80035a8 <wm8994_SetVolume+0x240>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	f000 809b 	beq.w	80034de <wm8994_SetVolume+0x176>
  {
    if(convertedvol > 0x3E)
 80033a8:	7afb      	ldrb	r3, [r7, #11]
 80033aa:	2b3e      	cmp	r3, #62	; 0x3e
 80033ac:	d93d      	bls.n	800342a <wm8994_SetVolume+0xc2>
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 80033ae:	88fb      	ldrh	r3, [r7, #6]
 80033b0:	2100      	movs	r1, #0
 80033b2:	4618      	mov	r0, r3
 80033b4:	f000 f8fc 	bl	80035b0 <wm8994_SetMute>
 80033b8:	4602      	mov	r2, r0
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	4413      	add	r3, r2
 80033be:	60fb      	str	r3, [r7, #12]

      /* Left Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, 0x3F | 0x140);
 80033c0:	88fb      	ldrh	r3, [r7, #6]
 80033c2:	b2db      	uxtb	r3, r3
 80033c4:	f240 127f 	movw	r2, #383	; 0x17f
 80033c8:	211c      	movs	r1, #28
 80033ca:	4618      	mov	r0, r3
 80033cc:	f000 fb56 	bl	8003a7c <CODEC_IO_Write>
 80033d0:	4603      	mov	r3, r0
 80033d2:	461a      	mov	r2, r3
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	4413      	add	r3, r2
 80033d8:	60fb      	str	r3, [r7, #12]

      /* Right Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, 0x3F | 0x140);
 80033da:	88fb      	ldrh	r3, [r7, #6]
 80033dc:	b2db      	uxtb	r3, r3
 80033de:	f240 127f 	movw	r2, #383	; 0x17f
 80033e2:	211d      	movs	r1, #29
 80033e4:	4618      	mov	r0, r3
 80033e6:	f000 fb49 	bl	8003a7c <CODEC_IO_Write>
 80033ea:	4603      	mov	r3, r0
 80033ec:	461a      	mov	r2, r3
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	4413      	add	r3, r2
 80033f2:	60fb      	str	r3, [r7, #12]

      /* Left Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x26, 0x3F | 0x140);
 80033f4:	88fb      	ldrh	r3, [r7, #6]
 80033f6:	b2db      	uxtb	r3, r3
 80033f8:	f240 127f 	movw	r2, #383	; 0x17f
 80033fc:	2126      	movs	r1, #38	; 0x26
 80033fe:	4618      	mov	r0, r3
 8003400:	f000 fb3c 	bl	8003a7c <CODEC_IO_Write>
 8003404:	4603      	mov	r3, r0
 8003406:	461a      	mov	r2, r3
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	4413      	add	r3, r2
 800340c:	60fb      	str	r3, [r7, #12]

      /* Right Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x27, 0x3F | 0x140);
 800340e:	88fb      	ldrh	r3, [r7, #6]
 8003410:	b2db      	uxtb	r3, r3
 8003412:	f240 127f 	movw	r2, #383	; 0x17f
 8003416:	2127      	movs	r1, #39	; 0x27
 8003418:	4618      	mov	r0, r3
 800341a:	f000 fb2f 	bl	8003a7c <CODEC_IO_Write>
 800341e:	4603      	mov	r3, r0
 8003420:	461a      	mov	r2, r3
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	4413      	add	r3, r2
 8003426:	60fb      	str	r3, [r7, #12]
 8003428:	e059      	b.n	80034de <wm8994_SetVolume+0x176>
    }
    else if (Volume == 0)
 800342a:	797b      	ldrb	r3, [r7, #5]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d109      	bne.n	8003444 <wm8994_SetVolume+0xdc>
    {
      /* Mute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8003430:	88fb      	ldrh	r3, [r7, #6]
 8003432:	2101      	movs	r1, #1
 8003434:	4618      	mov	r0, r3
 8003436:	f000 f8bb 	bl	80035b0 <wm8994_SetMute>
 800343a:	4602      	mov	r2, r0
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	4413      	add	r3, r2
 8003440:	60fb      	str	r3, [r7, #12]
 8003442:	e04c      	b.n	80034de <wm8994_SetVolume+0x176>
    }
    else
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8003444:	88fb      	ldrh	r3, [r7, #6]
 8003446:	2100      	movs	r1, #0
 8003448:	4618      	mov	r0, r3
 800344a:	f000 f8b1 	bl	80035b0 <wm8994_SetMute>
 800344e:	4602      	mov	r2, r0
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	4413      	add	r3, r2
 8003454:	60fb      	str	r3, [r7, #12]

      /* Left Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, convertedvol | 0x140);
 8003456:	88fb      	ldrh	r3, [r7, #6]
 8003458:	b2d8      	uxtb	r0, r3
 800345a:	7afb      	ldrb	r3, [r7, #11]
 800345c:	b21b      	sxth	r3, r3
 800345e:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 8003462:	b21b      	sxth	r3, r3
 8003464:	b29b      	uxth	r3, r3
 8003466:	461a      	mov	r2, r3
 8003468:	211c      	movs	r1, #28
 800346a:	f000 fb07 	bl	8003a7c <CODEC_IO_Write>
 800346e:	4603      	mov	r3, r0
 8003470:	461a      	mov	r2, r3
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	4413      	add	r3, r2
 8003476:	60fb      	str	r3, [r7, #12]

      /* Right Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, convertedvol | 0x140);
 8003478:	88fb      	ldrh	r3, [r7, #6]
 800347a:	b2d8      	uxtb	r0, r3
 800347c:	7afb      	ldrb	r3, [r7, #11]
 800347e:	b21b      	sxth	r3, r3
 8003480:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 8003484:	b21b      	sxth	r3, r3
 8003486:	b29b      	uxth	r3, r3
 8003488:	461a      	mov	r2, r3
 800348a:	211d      	movs	r1, #29
 800348c:	f000 faf6 	bl	8003a7c <CODEC_IO_Write>
 8003490:	4603      	mov	r3, r0
 8003492:	461a      	mov	r2, r3
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	4413      	add	r3, r2
 8003498:	60fb      	str	r3, [r7, #12]

      /* Left Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x26, convertedvol | 0x140);
 800349a:	88fb      	ldrh	r3, [r7, #6]
 800349c:	b2d8      	uxtb	r0, r3
 800349e:	7afb      	ldrb	r3, [r7, #11]
 80034a0:	b21b      	sxth	r3, r3
 80034a2:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 80034a6:	b21b      	sxth	r3, r3
 80034a8:	b29b      	uxth	r3, r3
 80034aa:	461a      	mov	r2, r3
 80034ac:	2126      	movs	r1, #38	; 0x26
 80034ae:	f000 fae5 	bl	8003a7c <CODEC_IO_Write>
 80034b2:	4603      	mov	r3, r0
 80034b4:	461a      	mov	r2, r3
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	4413      	add	r3, r2
 80034ba:	60fb      	str	r3, [r7, #12]

      /* Right Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x27, convertedvol | 0x140);
 80034bc:	88fb      	ldrh	r3, [r7, #6]
 80034be:	b2d8      	uxtb	r0, r3
 80034c0:	7afb      	ldrb	r3, [r7, #11]
 80034c2:	b21b      	sxth	r3, r3
 80034c4:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 80034c8:	b21b      	sxth	r3, r3
 80034ca:	b29b      	uxth	r3, r3
 80034cc:	461a      	mov	r2, r3
 80034ce:	2127      	movs	r1, #39	; 0x27
 80034d0:	f000 fad4 	bl	8003a7c <CODEC_IO_Write>
 80034d4:	4603      	mov	r3, r0
 80034d6:	461a      	mov	r2, r3
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	4413      	add	r3, r2
 80034dc:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Input volume */
  if (inputEnabled != 0)
 80034de:	4b33      	ldr	r3, [pc, #204]	; (80035ac <wm8994_SetVolume+0x244>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d059      	beq.n	800359a <wm8994_SetVolume+0x232>
  {
    convertedvol = VOLUME_IN_CONVERT(Volume);
 80034e6:	797b      	ldrb	r3, [r7, #5]
 80034e8:	2b63      	cmp	r3, #99	; 0x63
 80034ea:	d80c      	bhi.n	8003506 <wm8994_SetVolume+0x19e>
 80034ec:	797a      	ldrb	r2, [r7, #5]
 80034ee:	4613      	mov	r3, r2
 80034f0:	011b      	lsls	r3, r3, #4
 80034f2:	1a9b      	subs	r3, r3, r2
 80034f4:	011b      	lsls	r3, r3, #4
 80034f6:	4a2b      	ldr	r2, [pc, #172]	; (80035a4 <wm8994_SetVolume+0x23c>)
 80034f8:	fb82 1203 	smull	r1, r2, r2, r3
 80034fc:	1152      	asrs	r2, r2, #5
 80034fe:	17db      	asrs	r3, r3, #31
 8003500:	1ad3      	subs	r3, r2, r3
 8003502:	b2db      	uxtb	r3, r3
 8003504:	e000      	b.n	8003508 <wm8994_SetVolume+0x1a0>
 8003506:	23ef      	movs	r3, #239	; 0xef
 8003508:	72fb      	strb	r3, [r7, #11]

    /* Left AIF1 ADC1 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x400, convertedvol | 0x100);
 800350a:	88fb      	ldrh	r3, [r7, #6]
 800350c:	b2d8      	uxtb	r0, r3
 800350e:	7afb      	ldrb	r3, [r7, #11]
 8003510:	b21b      	sxth	r3, r3
 8003512:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003516:	b21b      	sxth	r3, r3
 8003518:	b29b      	uxth	r3, r3
 800351a:	461a      	mov	r2, r3
 800351c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003520:	f000 faac 	bl	8003a7c <CODEC_IO_Write>
 8003524:	4603      	mov	r3, r0
 8003526:	461a      	mov	r2, r3
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	4413      	add	r3, r2
 800352c:	60fb      	str	r3, [r7, #12]

    /* Right AIF1 ADC1 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x401, convertedvol | 0x100);
 800352e:	88fb      	ldrh	r3, [r7, #6]
 8003530:	b2d8      	uxtb	r0, r3
 8003532:	7afb      	ldrb	r3, [r7, #11]
 8003534:	b21b      	sxth	r3, r3
 8003536:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800353a:	b21b      	sxth	r3, r3
 800353c:	b29b      	uxth	r3, r3
 800353e:	461a      	mov	r2, r3
 8003540:	f240 4101 	movw	r1, #1025	; 0x401
 8003544:	f000 fa9a 	bl	8003a7c <CODEC_IO_Write>
 8003548:	4603      	mov	r3, r0
 800354a:	461a      	mov	r2, r3
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	4413      	add	r3, r2
 8003550:	60fb      	str	r3, [r7, #12]

    /* Left AIF1 ADC2 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x404, convertedvol | 0x100);
 8003552:	88fb      	ldrh	r3, [r7, #6]
 8003554:	b2d8      	uxtb	r0, r3
 8003556:	7afb      	ldrb	r3, [r7, #11]
 8003558:	b21b      	sxth	r3, r3
 800355a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800355e:	b21b      	sxth	r3, r3
 8003560:	b29b      	uxth	r3, r3
 8003562:	461a      	mov	r2, r3
 8003564:	f240 4104 	movw	r1, #1028	; 0x404
 8003568:	f000 fa88 	bl	8003a7c <CODEC_IO_Write>
 800356c:	4603      	mov	r3, r0
 800356e:	461a      	mov	r2, r3
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	4413      	add	r3, r2
 8003574:	60fb      	str	r3, [r7, #12]

    /* Right AIF1 ADC2 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x405, convertedvol | 0x100);
 8003576:	88fb      	ldrh	r3, [r7, #6]
 8003578:	b2d8      	uxtb	r0, r3
 800357a:	7afb      	ldrb	r3, [r7, #11]
 800357c:	b21b      	sxth	r3, r3
 800357e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003582:	b21b      	sxth	r3, r3
 8003584:	b29b      	uxth	r3, r3
 8003586:	461a      	mov	r2, r3
 8003588:	f240 4105 	movw	r1, #1029	; 0x405
 800358c:	f000 fa76 	bl	8003a7c <CODEC_IO_Write>
 8003590:	4603      	mov	r3, r0
 8003592:	461a      	mov	r2, r3
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	4413      	add	r3, r2
 8003598:	60fb      	str	r3, [r7, #12]
  }
  return counter;
 800359a:	68fb      	ldr	r3, [r7, #12]
}
 800359c:	4618      	mov	r0, r3
 800359e:	3710      	adds	r7, #16
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bd80      	pop	{r7, pc}
 80035a4:	51eb851f 	.word	0x51eb851f
 80035a8:	20007164 	.word	0x20007164
 80035ac:	20007168 	.word	0x20007168

080035b0 <wm8994_SetMute>:
  * @param Cmd: AUDIO_MUTE_ON to enable the mute or AUDIO_MUTE_OFF to disable the
  *             mute mode.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetMute(uint16_t DeviceAddr, uint32_t Cmd)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b084      	sub	sp, #16
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	4603      	mov	r3, r0
 80035b8:	6039      	str	r1, [r7, #0]
 80035ba:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 80035bc:	2300      	movs	r3, #0
 80035be:	60fb      	str	r3, [r7, #12]
  
  if (outputEnabled != 0)
 80035c0:	4b21      	ldr	r3, [pc, #132]	; (8003648 <wm8994_SetMute+0x98>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d039      	beq.n	800363c <wm8994_SetMute+0x8c>
  {
    /* Set the Mute mode */
    if(Cmd == AUDIO_MUTE_ON)
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	2b01      	cmp	r3, #1
 80035cc:	d11c      	bne.n	8003608 <wm8994_SetMute+0x58>
    {
      /* Soft Mute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 80035ce:	88fb      	ldrh	r3, [r7, #6]
 80035d0:	b2db      	uxtb	r3, r3
 80035d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035d6:	f44f 6184 	mov.w	r1, #1056	; 0x420
 80035da:	4618      	mov	r0, r3
 80035dc:	f000 fa4e 	bl	8003a7c <CODEC_IO_Write>
 80035e0:	4603      	mov	r3, r0
 80035e2:	461a      	mov	r2, r3
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	4413      	add	r3, r2
 80035e8:	60fb      	str	r3, [r7, #12]

      /* Soft Mute the AIF1 Timeslot 1 DAC2 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0200);
 80035ea:	88fb      	ldrh	r3, [r7, #6]
 80035ec:	b2db      	uxtb	r3, r3
 80035ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035f2:	f240 4122 	movw	r1, #1058	; 0x422
 80035f6:	4618      	mov	r0, r3
 80035f8:	f000 fa40 	bl	8003a7c <CODEC_IO_Write>
 80035fc:	4603      	mov	r3, r0
 80035fe:	461a      	mov	r2, r3
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	4413      	add	r3, r2
 8003604:	60fb      	str	r3, [r7, #12]
 8003606:	e019      	b.n	800363c <wm8994_SetMute+0x8c>
    }
    else /* AUDIO_MUTE_OFF Disable the Mute */
    {
      /* Unmute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0010);
 8003608:	88fb      	ldrh	r3, [r7, #6]
 800360a:	b2db      	uxtb	r3, r3
 800360c:	2210      	movs	r2, #16
 800360e:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8003612:	4618      	mov	r0, r3
 8003614:	f000 fa32 	bl	8003a7c <CODEC_IO_Write>
 8003618:	4603      	mov	r3, r0
 800361a:	461a      	mov	r2, r3
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	4413      	add	r3, r2
 8003620:	60fb      	str	r3, [r7, #12]

      /* Unmute the AIF1 Timeslot 1 DAC2 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0010);
 8003622:	88fb      	ldrh	r3, [r7, #6]
 8003624:	b2db      	uxtb	r3, r3
 8003626:	2210      	movs	r2, #16
 8003628:	f240 4122 	movw	r1, #1058	; 0x422
 800362c:	4618      	mov	r0, r3
 800362e:	f000 fa25 	bl	8003a7c <CODEC_IO_Write>
 8003632:	4603      	mov	r3, r0
 8003634:	461a      	mov	r2, r3
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	4413      	add	r3, r2
 800363a:	60fb      	str	r3, [r7, #12]
    }
  }
  return counter;
 800363c:	68fb      	ldr	r3, [r7, #12]
}
 800363e:	4618      	mov	r0, r3
 8003640:	3710      	adds	r7, #16
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}
 8003646:	bf00      	nop
 8003648:	20007164 	.word	0x20007164

0800364c <wm8994_SetOutputMode>:
  * @param Output: specifies the audio output target: OUTPUT_DEVICE_SPEAKER,
  *         OUTPUT_DEVICE_HEADPHONE, OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetOutputMode(uint16_t DeviceAddr, uint8_t Output)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b084      	sub	sp, #16
 8003650:	af00      	add	r7, sp, #0
 8003652:	4603      	mov	r3, r0
 8003654:	460a      	mov	r2, r1
 8003656:	80fb      	strh	r3, [r7, #6]
 8003658:	4613      	mov	r3, r2
 800365a:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0; 
 800365c:	2300      	movs	r3, #0
 800365e:	60fb      	str	r3, [r7, #12]
  
  switch (Output) 
 8003660:	797b      	ldrb	r3, [r7, #5]
 8003662:	2b03      	cmp	r3, #3
 8003664:	f000 808c 	beq.w	8003780 <wm8994_SetOutputMode+0x134>
 8003668:	2b03      	cmp	r3, #3
 800366a:	f300 80cb 	bgt.w	8003804 <wm8994_SetOutputMode+0x1b8>
 800366e:	2b01      	cmp	r3, #1
 8003670:	d002      	beq.n	8003678 <wm8994_SetOutputMode+0x2c>
 8003672:	2b02      	cmp	r3, #2
 8003674:	d042      	beq.n	80036fc <wm8994_SetOutputMode+0xb0>
 8003676:	e0c5      	b.n	8003804 <wm8994_SetOutputMode+0x1b8>
  {
  case OUTPUT_DEVICE_SPEAKER:
    /* Enable DAC1 (Left), Enable DAC1 (Right), 
    Disable DAC2 (Left), Disable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0C0C);
 8003678:	88fb      	ldrh	r3, [r7, #6]
 800367a:	b2db      	uxtb	r3, r3
 800367c:	f640 420c 	movw	r2, #3084	; 0xc0c
 8003680:	2105      	movs	r1, #5
 8003682:	4618      	mov	r0, r3
 8003684:	f000 f9fa 	bl	8003a7c <CODEC_IO_Write>
 8003688:	4603      	mov	r3, r0
 800368a:	461a      	mov	r2, r3
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	4413      	add	r3, r2
 8003690:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0000);
 8003692:	88fb      	ldrh	r3, [r7, #6]
 8003694:	b2db      	uxtb	r3, r3
 8003696:	2200      	movs	r2, #0
 8003698:	f240 6101 	movw	r1, #1537	; 0x601
 800369c:	4618      	mov	r0, r3
 800369e:	f000 f9ed 	bl	8003a7c <CODEC_IO_Write>
 80036a2:	4603      	mov	r3, r0
 80036a4:	461a      	mov	r2, r3
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	4413      	add	r3, r2
 80036aa:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0000);
 80036ac:	88fb      	ldrh	r3, [r7, #6]
 80036ae:	b2db      	uxtb	r3, r3
 80036b0:	2200      	movs	r2, #0
 80036b2:	f240 6102 	movw	r1, #1538	; 0x602
 80036b6:	4618      	mov	r0, r3
 80036b8:	f000 f9e0 	bl	8003a7c <CODEC_IO_Write>
 80036bc:	4603      	mov	r3, r0
 80036be:	461a      	mov	r2, r3
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	4413      	add	r3, r2
 80036c4:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 80036c6:	88fb      	ldrh	r3, [r7, #6]
 80036c8:	b2db      	uxtb	r3, r3
 80036ca:	2202      	movs	r2, #2
 80036cc:	f240 6104 	movw	r1, #1540	; 0x604
 80036d0:	4618      	mov	r0, r3
 80036d2:	f000 f9d3 	bl	8003a7c <CODEC_IO_Write>
 80036d6:	4603      	mov	r3, r0
 80036d8:	461a      	mov	r2, r3
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	4413      	add	r3, r2
 80036de:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 80036e0:	88fb      	ldrh	r3, [r7, #6]
 80036e2:	b2db      	uxtb	r3, r3
 80036e4:	2202      	movs	r2, #2
 80036e6:	f240 6105 	movw	r1, #1541	; 0x605
 80036ea:	4618      	mov	r0, r3
 80036ec:	f000 f9c6 	bl	8003a7c <CODEC_IO_Write>
 80036f0:	4603      	mov	r3, r0
 80036f2:	461a      	mov	r2, r3
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	4413      	add	r3, r2
 80036f8:	60fb      	str	r3, [r7, #12]
    break;
 80036fa:	e0c5      	b.n	8003888 <wm8994_SetOutputMode+0x23c>
    
  case OUTPUT_DEVICE_HEADPHONE:
    /* Disable DAC1 (Left), Disable DAC1 (Right), 
    Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 80036fc:	88fb      	ldrh	r3, [r7, #6]
 80036fe:	b2db      	uxtb	r3, r3
 8003700:	f240 3203 	movw	r2, #771	; 0x303
 8003704:	2105      	movs	r1, #5
 8003706:	4618      	mov	r0, r3
 8003708:	f000 f9b8 	bl	8003a7c <CODEC_IO_Write>
 800370c:	4603      	mov	r3, r0
 800370e:	461a      	mov	r2, r3
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	4413      	add	r3, r2
 8003714:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8003716:	88fb      	ldrh	r3, [r7, #6]
 8003718:	b2db      	uxtb	r3, r3
 800371a:	2201      	movs	r2, #1
 800371c:	f240 6101 	movw	r1, #1537	; 0x601
 8003720:	4618      	mov	r0, r3
 8003722:	f000 f9ab 	bl	8003a7c <CODEC_IO_Write>
 8003726:	4603      	mov	r3, r0
 8003728:	461a      	mov	r2, r3
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	4413      	add	r3, r2
 800372e:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8003730:	88fb      	ldrh	r3, [r7, #6]
 8003732:	b2db      	uxtb	r3, r3
 8003734:	2201      	movs	r2, #1
 8003736:	f240 6102 	movw	r1, #1538	; 0x602
 800373a:	4618      	mov	r0, r3
 800373c:	f000 f99e 	bl	8003a7c <CODEC_IO_Write>
 8003740:	4603      	mov	r3, r0
 8003742:	461a      	mov	r2, r3
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	4413      	add	r3, r2
 8003748:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 800374a:	88fb      	ldrh	r3, [r7, #6]
 800374c:	b2db      	uxtb	r3, r3
 800374e:	2200      	movs	r2, #0
 8003750:	f240 6104 	movw	r1, #1540	; 0x604
 8003754:	4618      	mov	r0, r3
 8003756:	f000 f991 	bl	8003a7c <CODEC_IO_Write>
 800375a:	4603      	mov	r3, r0
 800375c:	461a      	mov	r2, r3
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	4413      	add	r3, r2
 8003762:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8003764:	88fb      	ldrh	r3, [r7, #6]
 8003766:	b2db      	uxtb	r3, r3
 8003768:	2200      	movs	r2, #0
 800376a:	f240 6105 	movw	r1, #1541	; 0x605
 800376e:	4618      	mov	r0, r3
 8003770:	f000 f984 	bl	8003a7c <CODEC_IO_Write>
 8003774:	4603      	mov	r3, r0
 8003776:	461a      	mov	r2, r3
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	4413      	add	r3, r2
 800377c:	60fb      	str	r3, [r7, #12]
    break;
 800377e:	e083      	b.n	8003888 <wm8994_SetOutputMode+0x23c>
    
  case OUTPUT_DEVICE_BOTH:
    /* Enable DAC1 (Left), Enable DAC1 (Right), 
    also Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 8003780:	88fb      	ldrh	r3, [r7, #6]
 8003782:	b2db      	uxtb	r3, r3
 8003784:	f640 720f 	movw	r2, #3855	; 0xf0f
 8003788:	2105      	movs	r1, #5
 800378a:	4618      	mov	r0, r3
 800378c:	f000 f976 	bl	8003a7c <CODEC_IO_Write>
 8003790:	4603      	mov	r3, r0
 8003792:	461a      	mov	r2, r3
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	4413      	add	r3, r2
 8003798:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 800379a:	88fb      	ldrh	r3, [r7, #6]
 800379c:	b2db      	uxtb	r3, r3
 800379e:	2201      	movs	r2, #1
 80037a0:	f240 6101 	movw	r1, #1537	; 0x601
 80037a4:	4618      	mov	r0, r3
 80037a6:	f000 f969 	bl	8003a7c <CODEC_IO_Write>
 80037aa:	4603      	mov	r3, r0
 80037ac:	461a      	mov	r2, r3
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	4413      	add	r3, r2
 80037b2:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 80037b4:	88fb      	ldrh	r3, [r7, #6]
 80037b6:	b2db      	uxtb	r3, r3
 80037b8:	2201      	movs	r2, #1
 80037ba:	f240 6102 	movw	r1, #1538	; 0x602
 80037be:	4618      	mov	r0, r3
 80037c0:	f000 f95c 	bl	8003a7c <CODEC_IO_Write>
 80037c4:	4603      	mov	r3, r0
 80037c6:	461a      	mov	r2, r3
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	4413      	add	r3, r2
 80037cc:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 80037ce:	88fb      	ldrh	r3, [r7, #6]
 80037d0:	b2db      	uxtb	r3, r3
 80037d2:	2202      	movs	r2, #2
 80037d4:	f240 6104 	movw	r1, #1540	; 0x604
 80037d8:	4618      	mov	r0, r3
 80037da:	f000 f94f 	bl	8003a7c <CODEC_IO_Write>
 80037de:	4603      	mov	r3, r0
 80037e0:	461a      	mov	r2, r3
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	4413      	add	r3, r2
 80037e6:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 80037e8:	88fb      	ldrh	r3, [r7, #6]
 80037ea:	b2db      	uxtb	r3, r3
 80037ec:	2202      	movs	r2, #2
 80037ee:	f240 6105 	movw	r1, #1541	; 0x605
 80037f2:	4618      	mov	r0, r3
 80037f4:	f000 f942 	bl	8003a7c <CODEC_IO_Write>
 80037f8:	4603      	mov	r3, r0
 80037fa:	461a      	mov	r2, r3
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	4413      	add	r3, r2
 8003800:	60fb      	str	r3, [r7, #12]
    break;
 8003802:	e041      	b.n	8003888 <wm8994_SetOutputMode+0x23c>
    
  default:
    /* Disable DAC1 (Left), Disable DAC1 (Right), 
    Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8003804:	88fb      	ldrh	r3, [r7, #6]
 8003806:	b2db      	uxtb	r3, r3
 8003808:	f240 3203 	movw	r2, #771	; 0x303
 800380c:	2105      	movs	r1, #5
 800380e:	4618      	mov	r0, r3
 8003810:	f000 f934 	bl	8003a7c <CODEC_IO_Write>
 8003814:	4603      	mov	r3, r0
 8003816:	461a      	mov	r2, r3
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	4413      	add	r3, r2
 800381c:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 800381e:	88fb      	ldrh	r3, [r7, #6]
 8003820:	b2db      	uxtb	r3, r3
 8003822:	2201      	movs	r2, #1
 8003824:	f240 6101 	movw	r1, #1537	; 0x601
 8003828:	4618      	mov	r0, r3
 800382a:	f000 f927 	bl	8003a7c <CODEC_IO_Write>
 800382e:	4603      	mov	r3, r0
 8003830:	461a      	mov	r2, r3
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	4413      	add	r3, r2
 8003836:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8003838:	88fb      	ldrh	r3, [r7, #6]
 800383a:	b2db      	uxtb	r3, r3
 800383c:	2201      	movs	r2, #1
 800383e:	f240 6102 	movw	r1, #1538	; 0x602
 8003842:	4618      	mov	r0, r3
 8003844:	f000 f91a 	bl	8003a7c <CODEC_IO_Write>
 8003848:	4603      	mov	r3, r0
 800384a:	461a      	mov	r2, r3
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	4413      	add	r3, r2
 8003850:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 8003852:	88fb      	ldrh	r3, [r7, #6]
 8003854:	b2db      	uxtb	r3, r3
 8003856:	2200      	movs	r2, #0
 8003858:	f240 6104 	movw	r1, #1540	; 0x604
 800385c:	4618      	mov	r0, r3
 800385e:	f000 f90d 	bl	8003a7c <CODEC_IO_Write>
 8003862:	4603      	mov	r3, r0
 8003864:	461a      	mov	r2, r3
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	4413      	add	r3, r2
 800386a:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 800386c:	88fb      	ldrh	r3, [r7, #6]
 800386e:	b2db      	uxtb	r3, r3
 8003870:	2200      	movs	r2, #0
 8003872:	f240 6105 	movw	r1, #1541	; 0x605
 8003876:	4618      	mov	r0, r3
 8003878:	f000 f900 	bl	8003a7c <CODEC_IO_Write>
 800387c:	4603      	mov	r3, r0
 800387e:	461a      	mov	r2, r3
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	4413      	add	r3, r2
 8003884:	60fb      	str	r3, [r7, #12]
    break;    
 8003886:	bf00      	nop
  }  
  return counter;
 8003888:	68fb      	ldr	r3, [r7, #12]
}
 800388a:	4618      	mov	r0, r3
 800388c:	3710      	adds	r7, #16
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}
	...

08003894 <wm8994_SetFrequency>:
  * @param DeviceAddr: Device address on communication Bus.
  * @param AudioFreq: Audio frequency used to play the audio stream.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetFrequency(uint16_t DeviceAddr, uint32_t AudioFreq)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b084      	sub	sp, #16
 8003898:	af00      	add	r7, sp, #0
 800389a:	4603      	mov	r3, r0
 800389c:	6039      	str	r1, [r7, #0]
 800389e:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 80038a0:	2300      	movs	r3, #0
 80038a2:	60fb      	str	r3, [r7, #12]
 
  /*  Clock Configurations */
  switch (AudioFreq)
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	4a64      	ldr	r2, [pc, #400]	; (8003a38 <wm8994_SetFrequency+0x1a4>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d079      	beq.n	80039a0 <wm8994_SetFrequency+0x10c>
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	4a62      	ldr	r2, [pc, #392]	; (8003a38 <wm8994_SetFrequency+0x1a4>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	f200 80ad 	bhi.w	8003a10 <wm8994_SetFrequency+0x17c>
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	f64b 3280 	movw	r2, #48000	; 0xbb80
 80038bc:	4293      	cmp	r3, r2
 80038be:	d061      	beq.n	8003984 <wm8994_SetFrequency+0xf0>
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	f64b 3280 	movw	r2, #48000	; 0xbb80
 80038c6:	4293      	cmp	r3, r2
 80038c8:	f200 80a2 	bhi.w	8003a10 <wm8994_SetFrequency+0x17c>
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	f64a 4244 	movw	r2, #44100	; 0xac44
 80038d2:	4293      	cmp	r3, r2
 80038d4:	f000 808e 	beq.w	80039f4 <wm8994_SetFrequency+0x160>
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	f64a 4244 	movw	r2, #44100	; 0xac44
 80038de:	4293      	cmp	r3, r2
 80038e0:	f200 8096 	bhi.w	8003a10 <wm8994_SetFrequency+0x17c>
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 80038ea:	d03d      	beq.n	8003968 <wm8994_SetFrequency+0xd4>
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 80038f2:	f200 808d 	bhi.w	8003a10 <wm8994_SetFrequency+0x17c>
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	f245 6222 	movw	r2, #22050	; 0x5622
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d06b      	beq.n	80039d8 <wm8994_SetFrequency+0x144>
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	f245 6222 	movw	r2, #22050	; 0x5622
 8003906:	4293      	cmp	r3, r2
 8003908:	f200 8082 	bhi.w	8003a10 <wm8994_SetFrequency+0x17c>
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8003912:	d01b      	beq.n	800394c <wm8994_SetFrequency+0xb8>
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 800391a:	d879      	bhi.n	8003a10 <wm8994_SetFrequency+0x17c>
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8003922:	d005      	beq.n	8003930 <wm8994_SetFrequency+0x9c>
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	f642 3211 	movw	r2, #11025	; 0x2b11
 800392a:	4293      	cmp	r3, r2
 800392c:	d046      	beq.n	80039bc <wm8994_SetFrequency+0x128>
 800392e:	e06f      	b.n	8003a10 <wm8994_SetFrequency+0x17c>
  {
  case  AUDIO_FREQUENCY_8K:
    /* AIF1 Sample Rate = 8 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0003);
 8003930:	88fb      	ldrh	r3, [r7, #6]
 8003932:	b2db      	uxtb	r3, r3
 8003934:	2203      	movs	r2, #3
 8003936:	f44f 7104 	mov.w	r1, #528	; 0x210
 800393a:	4618      	mov	r0, r3
 800393c:	f000 f89e 	bl	8003a7c <CODEC_IO_Write>
 8003940:	4603      	mov	r3, r0
 8003942:	461a      	mov	r2, r3
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	4413      	add	r3, r2
 8003948:	60fb      	str	r3, [r7, #12]
    break;
 800394a:	e06f      	b.n	8003a2c <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_16K:
    /* AIF1 Sample Rate = 16 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0033);
 800394c:	88fb      	ldrh	r3, [r7, #6]
 800394e:	b2db      	uxtb	r3, r3
 8003950:	2233      	movs	r2, #51	; 0x33
 8003952:	f44f 7104 	mov.w	r1, #528	; 0x210
 8003956:	4618      	mov	r0, r3
 8003958:	f000 f890 	bl	8003a7c <CODEC_IO_Write>
 800395c:	4603      	mov	r3, r0
 800395e:	461a      	mov	r2, r3
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	4413      	add	r3, r2
 8003964:	60fb      	str	r3, [r7, #12]
    break;
 8003966:	e061      	b.n	8003a2c <wm8994_SetFrequency+0x198>

  case  AUDIO_FREQUENCY_32K:
    /* AIF1 Sample Rate = 32 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0063);
 8003968:	88fb      	ldrh	r3, [r7, #6]
 800396a:	b2db      	uxtb	r3, r3
 800396c:	2263      	movs	r2, #99	; 0x63
 800396e:	f44f 7104 	mov.w	r1, #528	; 0x210
 8003972:	4618      	mov	r0, r3
 8003974:	f000 f882 	bl	8003a7c <CODEC_IO_Write>
 8003978:	4603      	mov	r3, r0
 800397a:	461a      	mov	r2, r3
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	4413      	add	r3, r2
 8003980:	60fb      	str	r3, [r7, #12]
    break;
 8003982:	e053      	b.n	8003a2c <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_48K:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8003984:	88fb      	ldrh	r3, [r7, #6]
 8003986:	b2db      	uxtb	r3, r3
 8003988:	2283      	movs	r2, #131	; 0x83
 800398a:	f44f 7104 	mov.w	r1, #528	; 0x210
 800398e:	4618      	mov	r0, r3
 8003990:	f000 f874 	bl	8003a7c <CODEC_IO_Write>
 8003994:	4603      	mov	r3, r0
 8003996:	461a      	mov	r2, r3
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	4413      	add	r3, r2
 800399c:	60fb      	str	r3, [r7, #12]
    break;
 800399e:	e045      	b.n	8003a2c <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_96K:
    /* AIF1 Sample Rate = 96 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x00A3);
 80039a0:	88fb      	ldrh	r3, [r7, #6]
 80039a2:	b2db      	uxtb	r3, r3
 80039a4:	22a3      	movs	r2, #163	; 0xa3
 80039a6:	f44f 7104 	mov.w	r1, #528	; 0x210
 80039aa:	4618      	mov	r0, r3
 80039ac:	f000 f866 	bl	8003a7c <CODEC_IO_Write>
 80039b0:	4603      	mov	r3, r0
 80039b2:	461a      	mov	r2, r3
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	4413      	add	r3, r2
 80039b8:	60fb      	str	r3, [r7, #12]
    break;
 80039ba:	e037      	b.n	8003a2c <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_11K:
    /* AIF1 Sample Rate = 11.025 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0013);
 80039bc:	88fb      	ldrh	r3, [r7, #6]
 80039be:	b2db      	uxtb	r3, r3
 80039c0:	2213      	movs	r2, #19
 80039c2:	f44f 7104 	mov.w	r1, #528	; 0x210
 80039c6:	4618      	mov	r0, r3
 80039c8:	f000 f858 	bl	8003a7c <CODEC_IO_Write>
 80039cc:	4603      	mov	r3, r0
 80039ce:	461a      	mov	r2, r3
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	4413      	add	r3, r2
 80039d4:	60fb      	str	r3, [r7, #12]
    break;
 80039d6:	e029      	b.n	8003a2c <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_22K:
    /* AIF1 Sample Rate = 22.050 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0043);
 80039d8:	88fb      	ldrh	r3, [r7, #6]
 80039da:	b2db      	uxtb	r3, r3
 80039dc:	2243      	movs	r2, #67	; 0x43
 80039de:	f44f 7104 	mov.w	r1, #528	; 0x210
 80039e2:	4618      	mov	r0, r3
 80039e4:	f000 f84a 	bl	8003a7c <CODEC_IO_Write>
 80039e8:	4603      	mov	r3, r0
 80039ea:	461a      	mov	r2, r3
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	4413      	add	r3, r2
 80039f0:	60fb      	str	r3, [r7, #12]
    break;
 80039f2:	e01b      	b.n	8003a2c <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_44K:
    /* AIF1 Sample Rate = 44.1 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0073);
 80039f4:	88fb      	ldrh	r3, [r7, #6]
 80039f6:	b2db      	uxtb	r3, r3
 80039f8:	2273      	movs	r2, #115	; 0x73
 80039fa:	f44f 7104 	mov.w	r1, #528	; 0x210
 80039fe:	4618      	mov	r0, r3
 8003a00:	f000 f83c 	bl	8003a7c <CODEC_IO_Write>
 8003a04:	4603      	mov	r3, r0
 8003a06:	461a      	mov	r2, r3
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	4413      	add	r3, r2
 8003a0c:	60fb      	str	r3, [r7, #12]
    break; 
 8003a0e:	e00d      	b.n	8003a2c <wm8994_SetFrequency+0x198>
    
  default:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8003a10:	88fb      	ldrh	r3, [r7, #6]
 8003a12:	b2db      	uxtb	r3, r3
 8003a14:	2283      	movs	r2, #131	; 0x83
 8003a16:	f44f 7104 	mov.w	r1, #528	; 0x210
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f000 f82e 	bl	8003a7c <CODEC_IO_Write>
 8003a20:	4603      	mov	r3, r0
 8003a22:	461a      	mov	r2, r3
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	4413      	add	r3, r2
 8003a28:	60fb      	str	r3, [r7, #12]
    break; 
 8003a2a:	bf00      	nop
  }
  return counter;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3710      	adds	r7, #16
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}
 8003a36:	bf00      	nop
 8003a38:	00017700 	.word	0x00017700

08003a3c <wm8994_Reset>:
  * @brief Resets wm8994 registers.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Reset(uint16_t DeviceAddr)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b084      	sub	sp, #16
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	4603      	mov	r3, r0
 8003a44:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8003a46:	2300      	movs	r3, #0
 8003a48:	60fb      	str	r3, [r7, #12]
  
  /* Reset Codec by writing in 0x0000 address register */
  counter = CODEC_IO_Write(DeviceAddr, 0x0000, 0x0000);
 8003a4a:	88fb      	ldrh	r3, [r7, #6]
 8003a4c:	b2db      	uxtb	r3, r3
 8003a4e:	2200      	movs	r2, #0
 8003a50:	2100      	movs	r1, #0
 8003a52:	4618      	mov	r0, r3
 8003a54:	f000 f812 	bl	8003a7c <CODEC_IO_Write>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	60fb      	str	r3, [r7, #12]
  outputEnabled = 0;
 8003a5c:	4b05      	ldr	r3, [pc, #20]	; (8003a74 <wm8994_Reset+0x38>)
 8003a5e:	2200      	movs	r2, #0
 8003a60:	601a      	str	r2, [r3, #0]
  inputEnabled=0;
 8003a62:	4b05      	ldr	r3, [pc, #20]	; (8003a78 <wm8994_Reset+0x3c>)
 8003a64:	2200      	movs	r2, #0
 8003a66:	601a      	str	r2, [r3, #0]

  return counter;
 8003a68:	68fb      	ldr	r3, [r7, #12]
}
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	3710      	adds	r7, #16
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}
 8003a72:	bf00      	nop
 8003a74:	20007164 	.word	0x20007164
 8003a78:	20007168 	.word	0x20007168

08003a7c <CODEC_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b084      	sub	sp, #16
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	4603      	mov	r3, r0
 8003a84:	71fb      	strb	r3, [r7, #7]
 8003a86:	460b      	mov	r3, r1
 8003a88:	80bb      	strh	r3, [r7, #4]
 8003a8a:	4613      	mov	r3, r2
 8003a8c:	807b      	strh	r3, [r7, #2]
  uint32_t result = 0;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	60fb      	str	r3, [r7, #12]
  
 AUDIO_IO_Write(Addr, Reg, Value);
 8003a92:	887a      	ldrh	r2, [r7, #2]
 8003a94:	88b9      	ldrh	r1, [r7, #4]
 8003a96:	79fb      	ldrb	r3, [r7, #7]
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f000 f96f 	bl	8003d7c <AUDIO_IO_Write>
#ifdef VERIFY_WRITTENDATA
  /* Verify that the data has been correctly written */
  result = (AUDIO_IO_Read(Addr, Reg) == Value)? 0:1;
#endif /* VERIFY_WRITTENDATA */
  
  return result;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	b2db      	uxtb	r3, r3
}
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	3710      	adds	r7, #16
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}
	...

08003aac <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b08c      	sub	sp, #48	; 0x30
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	4a51      	ldr	r2, [pc, #324]	; (8003bfc <I2Cx_MspInit+0x150>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d14d      	bne.n	8003b58 <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8003abc:	4b50      	ldr	r3, [pc, #320]	; (8003c00 <I2Cx_MspInit+0x154>)
 8003abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ac0:	4a4f      	ldr	r2, [pc, #316]	; (8003c00 <I2Cx_MspInit+0x154>)
 8003ac2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ac6:	6313      	str	r3, [r2, #48]	; 0x30
 8003ac8:	4b4d      	ldr	r3, [pc, #308]	; (8003c00 <I2Cx_MspInit+0x154>)
 8003aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003acc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ad0:	61bb      	str	r3, [r7, #24]
 8003ad2:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 8003ad4:	2380      	movs	r3, #128	; 0x80
 8003ad6:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8003ad8:	2312      	movs	r3, #18
 8003ada:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8003adc:	2300      	movs	r3, #0
 8003ade:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8003ae0:	2302      	movs	r3, #2
 8003ae2:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 8003ae4:	2304      	movs	r3, #4
 8003ae6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8003ae8:	f107 031c 	add.w	r3, r7, #28
 8003aec:	4619      	mov	r1, r3
 8003aee:	4845      	ldr	r0, [pc, #276]	; (8003c04 <I2Cx_MspInit+0x158>)
 8003af0:	f001 fb20 	bl	8005134 <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 8003af4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003af8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8003afa:	f107 031c 	add.w	r3, r7, #28
 8003afe:	4619      	mov	r1, r3
 8003b00:	4840      	ldr	r0, [pc, #256]	; (8003c04 <I2Cx_MspInit+0x158>)
 8003b02:	f001 fb17 	bl	8005134 <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 8003b06:	4b3e      	ldr	r3, [pc, #248]	; (8003c00 <I2Cx_MspInit+0x154>)
 8003b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b0a:	4a3d      	ldr	r2, [pc, #244]	; (8003c00 <I2Cx_MspInit+0x154>)
 8003b0c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003b10:	6413      	str	r3, [r2, #64]	; 0x40
 8003b12:	4b3b      	ldr	r3, [pc, #236]	; (8003c00 <I2Cx_MspInit+0x154>)
 8003b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b16:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003b1a:	617b      	str	r3, [r7, #20]
 8003b1c:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 8003b1e:	4b38      	ldr	r3, [pc, #224]	; (8003c00 <I2Cx_MspInit+0x154>)
 8003b20:	6a1b      	ldr	r3, [r3, #32]
 8003b22:	4a37      	ldr	r2, [pc, #220]	; (8003c00 <I2Cx_MspInit+0x154>)
 8003b24:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003b28:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 8003b2a:	4b35      	ldr	r3, [pc, #212]	; (8003c00 <I2Cx_MspInit+0x154>)
 8003b2c:	6a1b      	ldr	r3, [r3, #32]
 8003b2e:	4a34      	ldr	r2, [pc, #208]	; (8003c00 <I2Cx_MspInit+0x154>)
 8003b30:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003b34:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8003b36:	2200      	movs	r2, #0
 8003b38:	210f      	movs	r1, #15
 8003b3a:	2048      	movs	r0, #72	; 0x48
 8003b3c:	f000 fe7d 	bl	800483a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 8003b40:	2048      	movs	r0, #72	; 0x48
 8003b42:	f000 fe96 	bl	8004872 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 8003b46:	2200      	movs	r2, #0
 8003b48:	210f      	movs	r1, #15
 8003b4a:	2049      	movs	r0, #73	; 0x49
 8003b4c:	f000 fe75 	bl	800483a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 8003b50:	2049      	movs	r0, #73	; 0x49
 8003b52:	f000 fe8e 	bl	8004872 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 8003b56:	e04d      	b.n	8003bf4 <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8003b58:	4b29      	ldr	r3, [pc, #164]	; (8003c00 <I2Cx_MspInit+0x154>)
 8003b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b5c:	4a28      	ldr	r2, [pc, #160]	; (8003c00 <I2Cx_MspInit+0x154>)
 8003b5e:	f043 0302 	orr.w	r3, r3, #2
 8003b62:	6313      	str	r3, [r2, #48]	; 0x30
 8003b64:	4b26      	ldr	r3, [pc, #152]	; (8003c00 <I2Cx_MspInit+0x154>)
 8003b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b68:	f003 0302 	and.w	r3, r3, #2
 8003b6c:	613b      	str	r3, [r7, #16]
 8003b6e:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 8003b70:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003b74:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8003b76:	2312      	movs	r3, #18
 8003b78:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8003b7e:	2302      	movs	r3, #2
 8003b80:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 8003b82:	2304      	movs	r3, #4
 8003b84:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8003b86:	f107 031c 	add.w	r3, r7, #28
 8003b8a:	4619      	mov	r1, r3
 8003b8c:	481e      	ldr	r0, [pc, #120]	; (8003c08 <I2Cx_MspInit+0x15c>)
 8003b8e:	f001 fad1 	bl	8005134 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 8003b92:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003b96:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8003b98:	f107 031c 	add.w	r3, r7, #28
 8003b9c:	4619      	mov	r1, r3
 8003b9e:	481a      	ldr	r0, [pc, #104]	; (8003c08 <I2Cx_MspInit+0x15c>)
 8003ba0:	f001 fac8 	bl	8005134 <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8003ba4:	4b16      	ldr	r3, [pc, #88]	; (8003c00 <I2Cx_MspInit+0x154>)
 8003ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba8:	4a15      	ldr	r2, [pc, #84]	; (8003c00 <I2Cx_MspInit+0x154>)
 8003baa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003bae:	6413      	str	r3, [r2, #64]	; 0x40
 8003bb0:	4b13      	ldr	r3, [pc, #76]	; (8003c00 <I2Cx_MspInit+0x154>)
 8003bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003bb8:	60fb      	str	r3, [r7, #12]
 8003bba:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 8003bbc:	4b10      	ldr	r3, [pc, #64]	; (8003c00 <I2Cx_MspInit+0x154>)
 8003bbe:	6a1b      	ldr	r3, [r3, #32]
 8003bc0:	4a0f      	ldr	r2, [pc, #60]	; (8003c00 <I2Cx_MspInit+0x154>)
 8003bc2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003bc6:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 8003bc8:	4b0d      	ldr	r3, [pc, #52]	; (8003c00 <I2Cx_MspInit+0x154>)
 8003bca:	6a1b      	ldr	r3, [r3, #32]
 8003bcc:	4a0c      	ldr	r2, [pc, #48]	; (8003c00 <I2Cx_MspInit+0x154>)
 8003bce:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003bd2:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	210f      	movs	r1, #15
 8003bd8:	201f      	movs	r0, #31
 8003bda:	f000 fe2e 	bl	800483a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 8003bde:	201f      	movs	r0, #31
 8003be0:	f000 fe47 	bl	8004872 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 8003be4:	2200      	movs	r2, #0
 8003be6:	210f      	movs	r1, #15
 8003be8:	2020      	movs	r0, #32
 8003bea:	f000 fe26 	bl	800483a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 8003bee:	2020      	movs	r0, #32
 8003bf0:	f000 fe3f 	bl	8004872 <HAL_NVIC_EnableIRQ>
}
 8003bf4:	bf00      	nop
 8003bf6:	3730      	adds	r7, #48	; 0x30
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bd80      	pop	{r7, pc}
 8003bfc:	2000716c 	.word	0x2000716c
 8003c00:	40023800 	.word	0x40023800
 8003c04:	40021c00 	.word	0x40021c00
 8003c08:	40020400 	.word	0x40020400

08003c0c <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b082      	sub	sp, #8
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 8003c14:	6878      	ldr	r0, [r7, #4]
 8003c16:	f001 ff55 	bl	8005ac4 <HAL_I2C_GetState>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d125      	bne.n	8003c6c <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	4a14      	ldr	r2, [pc, #80]	; (8003c74 <I2Cx_Init+0x68>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d103      	bne.n	8003c30 <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	4a13      	ldr	r2, [pc, #76]	; (8003c78 <I2Cx_Init+0x6c>)
 8003c2c:	601a      	str	r2, [r3, #0]
 8003c2e:	e002      	b.n	8003c36 <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	4a12      	ldr	r2, [pc, #72]	; (8003c7c <I2Cx_Init+0x70>)
 8003c34:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	4a11      	ldr	r2, [pc, #68]	; (8003c80 <I2Cx_Init+0x74>)
 8003c3a:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2201      	movs	r2, #1
 8003c46:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2200      	movs	r2, #0
 8003c52:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2200      	movs	r2, #0
 8003c58:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 8003c60:	6878      	ldr	r0, [r7, #4]
 8003c62:	f7ff ff23 	bl	8003aac <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 8003c66:	6878      	ldr	r0, [r7, #4]
 8003c68:	f001 fc2a 	bl	80054c0 <HAL_I2C_Init>
  }
}
 8003c6c:	bf00      	nop
 8003c6e:	3708      	adds	r7, #8
 8003c70:	46bd      	mov	sp, r7
 8003c72:	bd80      	pop	{r7, pc}
 8003c74:	2000716c 	.word	0x2000716c
 8003c78:	40005c00 	.word	0x40005c00
 8003c7c:	40005400 	.word	0x40005400
 8003c80:	40912732 	.word	0x40912732

08003c84 <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b08a      	sub	sp, #40	; 0x28
 8003c88:	af04      	add	r7, sp, #16
 8003c8a:	60f8      	str	r0, [r7, #12]
 8003c8c:	4608      	mov	r0, r1
 8003c8e:	4611      	mov	r1, r2
 8003c90:	461a      	mov	r2, r3
 8003c92:	4603      	mov	r3, r0
 8003c94:	72fb      	strb	r3, [r7, #11]
 8003c96:	460b      	mov	r3, r1
 8003c98:	813b      	strh	r3, [r7, #8]
 8003c9a:	4613      	mov	r3, r2
 8003c9c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8003ca2:	7afb      	ldrb	r3, [r7, #11]
 8003ca4:	b299      	uxth	r1, r3
 8003ca6:	88f8      	ldrh	r0, [r7, #6]
 8003ca8:	893a      	ldrh	r2, [r7, #8]
 8003caa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003cae:	9302      	str	r3, [sp, #8]
 8003cb0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003cb2:	9301      	str	r3, [sp, #4]
 8003cb4:	6a3b      	ldr	r3, [r7, #32]
 8003cb6:	9300      	str	r3, [sp, #0]
 8003cb8:	4603      	mov	r3, r0
 8003cba:	68f8      	ldr	r0, [r7, #12]
 8003cbc:	f001 fde8 	bl	8005890 <HAL_I2C_Mem_Read>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8003cc4:	7dfb      	ldrb	r3, [r7, #23]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d004      	beq.n	8003cd4 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8003cca:	7afb      	ldrb	r3, [r7, #11]
 8003ccc:	4619      	mov	r1, r3
 8003cce:	68f8      	ldr	r0, [r7, #12]
 8003cd0:	f000 f832 	bl	8003d38 <I2Cx_Error>
  }
  return status;    
 8003cd4:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	3718      	adds	r7, #24
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}

08003cde <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 8003cde:	b580      	push	{r7, lr}
 8003ce0:	b08a      	sub	sp, #40	; 0x28
 8003ce2:	af04      	add	r7, sp, #16
 8003ce4:	60f8      	str	r0, [r7, #12]
 8003ce6:	4608      	mov	r0, r1
 8003ce8:	4611      	mov	r1, r2
 8003cea:	461a      	mov	r2, r3
 8003cec:	4603      	mov	r3, r0
 8003cee:	72fb      	strb	r3, [r7, #11]
 8003cf0:	460b      	mov	r3, r1
 8003cf2:	813b      	strh	r3, [r7, #8]
 8003cf4:	4613      	mov	r3, r2
 8003cf6:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8003cfc:	7afb      	ldrb	r3, [r7, #11]
 8003cfe:	b299      	uxth	r1, r3
 8003d00:	88f8      	ldrh	r0, [r7, #6]
 8003d02:	893a      	ldrh	r2, [r7, #8]
 8003d04:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003d08:	9302      	str	r3, [sp, #8]
 8003d0a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003d0c:	9301      	str	r3, [sp, #4]
 8003d0e:	6a3b      	ldr	r3, [r7, #32]
 8003d10:	9300      	str	r3, [sp, #0]
 8003d12:	4603      	mov	r3, r0
 8003d14:	68f8      	ldr	r0, [r7, #12]
 8003d16:	f001 fca7 	bl	8005668 <HAL_I2C_Mem_Write>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8003d1e:	7dfb      	ldrb	r3, [r7, #23]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d004      	beq.n	8003d2e <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8003d24:	7afb      	ldrb	r3, [r7, #11]
 8003d26:	4619      	mov	r1, r3
 8003d28:	68f8      	ldr	r0, [r7, #12]
 8003d2a:	f000 f805 	bl	8003d38 <I2Cx_Error>
  }
  return status;
 8003d2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	3718      	adds	r7, #24
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bd80      	pop	{r7, pc}

08003d38 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b082      	sub	sp, #8
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
 8003d40:	460b      	mov	r3, r1
 8003d42:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8003d44:	6878      	ldr	r0, [r7, #4]
 8003d46:	f001 fc4b 	bl	80055e0 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	f7ff ff5e 	bl	8003c0c <I2Cx_Init>
}
 8003d50:	bf00      	nop
 8003d52:	3708      	adds	r7, #8
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bd80      	pop	{r7, pc}

08003d58 <AUDIO_IO_Init>:
/**
  * @brief  Initializes Audio low level.
  * @retval None
  */
void AUDIO_IO_Init(void) 
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 8003d5c:	4802      	ldr	r0, [pc, #8]	; (8003d68 <AUDIO_IO_Init+0x10>)
 8003d5e:	f7ff ff55 	bl	8003c0c <I2Cx_Init>
}
 8003d62:	bf00      	nop
 8003d64:	bd80      	pop	{r7, pc}
 8003d66:	bf00      	nop
 8003d68:	2000716c 	.word	0x2000716c

08003d6c <AUDIO_IO_DeInit>:
/**
  * @brief  Deinitializes Audio low level.
  * @retval None
  */
void AUDIO_IO_DeInit(void)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	af00      	add	r7, sp, #0
}
 8003d70:	bf00      	nop
 8003d72:	46bd      	mov	sp, r7
 8003d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d78:	4770      	bx	lr
	...

08003d7c <AUDIO_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
void AUDIO_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b086      	sub	sp, #24
 8003d80:	af02      	add	r7, sp, #8
 8003d82:	4603      	mov	r3, r0
 8003d84:	71fb      	strb	r3, [r7, #7]
 8003d86:	460b      	mov	r3, r1
 8003d88:	80bb      	strh	r3, [r7, #4]
 8003d8a:	4613      	mov	r3, r2
 8003d8c:	807b      	strh	r3, [r7, #2]
  uint16_t tmp = Value;
 8003d8e:	887b      	ldrh	r3, [r7, #2]
 8003d90:	81fb      	strh	r3, [r7, #14]
  
  Value = ((uint16_t)(tmp >> 8) & 0x00FF);
 8003d92:	89fb      	ldrh	r3, [r7, #14]
 8003d94:	0a1b      	lsrs	r3, r3, #8
 8003d96:	b29b      	uxth	r3, r3
 8003d98:	807b      	strh	r3, [r7, #2]
  
  Value |= ((uint16_t)(tmp << 8)& 0xFF00);
 8003d9a:	89fb      	ldrh	r3, [r7, #14]
 8003d9c:	021b      	lsls	r3, r3, #8
 8003d9e:	b29b      	uxth	r3, r3
 8003da0:	b21a      	sxth	r2, r3
 8003da2:	887b      	ldrh	r3, [r7, #2]
 8003da4:	b21b      	sxth	r3, r3
 8003da6:	4313      	orrs	r3, r2
 8003da8:	b21b      	sxth	r3, r3
 8003daa:	b29b      	uxth	r3, r3
 8003dac:	807b      	strh	r3, [r7, #2]
  
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT,(uint8_t*)&Value, 2);
 8003dae:	88ba      	ldrh	r2, [r7, #4]
 8003db0:	79f9      	ldrb	r1, [r7, #7]
 8003db2:	2302      	movs	r3, #2
 8003db4:	9301      	str	r3, [sp, #4]
 8003db6:	1cbb      	adds	r3, r7, #2
 8003db8:	9300      	str	r3, [sp, #0]
 8003dba:	2302      	movs	r3, #2
 8003dbc:	4803      	ldr	r0, [pc, #12]	; (8003dcc <AUDIO_IO_Write+0x50>)
 8003dbe:	f7ff ff8e 	bl	8003cde <I2Cx_WriteMultiple>
}
 8003dc2:	bf00      	nop
 8003dc4:	3710      	adds	r7, #16
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}
 8003dca:	bf00      	nop
 8003dcc:	2000716c 	.word	0x2000716c

08003dd0 <AUDIO_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @retval Data to be read
  */
uint16_t AUDIO_IO_Read(uint8_t Addr, uint16_t Reg)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b086      	sub	sp, #24
 8003dd4:	af02      	add	r7, sp, #8
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	460a      	mov	r2, r1
 8003dda:	71fb      	strb	r3, [r7, #7]
 8003ddc:	4613      	mov	r3, r2
 8003dde:	80bb      	strh	r3, [r7, #4]
  uint16_t read_value = 0, tmp = 0;
 8003de0:	2300      	movs	r3, #0
 8003de2:	81bb      	strh	r3, [r7, #12]
 8003de4:	2300      	movs	r3, #0
 8003de6:	81fb      	strh	r3, [r7, #14]
  
  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT, (uint8_t*)&read_value, 2);
 8003de8:	88ba      	ldrh	r2, [r7, #4]
 8003dea:	79f9      	ldrb	r1, [r7, #7]
 8003dec:	2302      	movs	r3, #2
 8003dee:	9301      	str	r3, [sp, #4]
 8003df0:	f107 030c 	add.w	r3, r7, #12
 8003df4:	9300      	str	r3, [sp, #0]
 8003df6:	2302      	movs	r3, #2
 8003df8:	480a      	ldr	r0, [pc, #40]	; (8003e24 <AUDIO_IO_Read+0x54>)
 8003dfa:	f7ff ff43 	bl	8003c84 <I2Cx_ReadMultiple>
  
  tmp = ((uint16_t)(read_value >> 8) & 0x00FF);
 8003dfe:	89bb      	ldrh	r3, [r7, #12]
 8003e00:	0a1b      	lsrs	r3, r3, #8
 8003e02:	81fb      	strh	r3, [r7, #14]
  
  tmp |= ((uint16_t)(read_value << 8)& 0xFF00);
 8003e04:	89bb      	ldrh	r3, [r7, #12]
 8003e06:	021b      	lsls	r3, r3, #8
 8003e08:	b29b      	uxth	r3, r3
 8003e0a:	b21a      	sxth	r2, r3
 8003e0c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003e10:	4313      	orrs	r3, r2
 8003e12:	b21b      	sxth	r3, r3
 8003e14:	81fb      	strh	r3, [r7, #14]
  
  read_value = tmp;
 8003e16:	89fb      	ldrh	r3, [r7, #14]
 8003e18:	81bb      	strh	r3, [r7, #12]
  
  return read_value;
 8003e1a:	89bb      	ldrh	r3, [r7, #12]
}
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	3710      	adds	r7, #16
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bd80      	pop	{r7, pc}
 8003e24:	2000716c 	.word	0x2000716c

08003e28 <AUDIO_IO_Delay>:
  * @brief  AUDIO Codec delay 
  * @param  Delay: Delay in ms
  * @retval None
  */
void AUDIO_IO_Delay(uint32_t Delay)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b082      	sub	sp, #8
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8003e30:	6878      	ldr	r0, [r7, #4]
 8003e32:	f000 fc03 	bl	800463c <HAL_Delay>
}
 8003e36:	bf00      	nop
 8003e38:	3708      	adds	r7, #8
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}
	...

08003e40 <HAL_SAI_ErrorCallback>:
  * @brief  SAI error callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b084      	sub	sp, #16
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  HAL_SAI_StateTypeDef audio_out_state;
  HAL_SAI_StateTypeDef audio_in_state;

  audio_out_state = HAL_SAI_GetState(&haudio_out_sai);
 8003e48:	480e      	ldr	r0, [pc, #56]	; (8003e84 <HAL_SAI_ErrorCallback+0x44>)
 8003e4a:	f003 fe71 	bl	8007b30 <HAL_SAI_GetState>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	73fb      	strb	r3, [r7, #15]
  audio_in_state = HAL_SAI_GetState(&haudio_in_sai);
 8003e52:	480d      	ldr	r0, [pc, #52]	; (8003e88 <HAL_SAI_ErrorCallback+0x48>)
 8003e54:	f003 fe6c 	bl	8007b30 <HAL_SAI_GetState>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	73bb      	strb	r3, [r7, #14]

  /* Determines if it is an audio out or audio in error */
  if ((audio_out_state == HAL_SAI_STATE_BUSY) || (audio_out_state == HAL_SAI_STATE_BUSY_TX))
 8003e5c:	7bfb      	ldrb	r3, [r7, #15]
 8003e5e:	2b02      	cmp	r3, #2
 8003e60:	d002      	beq.n	8003e68 <HAL_SAI_ErrorCallback+0x28>
 8003e62:	7bfb      	ldrb	r3, [r7, #15]
 8003e64:	2b12      	cmp	r3, #18
 8003e66:	d101      	bne.n	8003e6c <HAL_SAI_ErrorCallback+0x2c>
  {
    BSP_AUDIO_OUT_Error_CallBack();
 8003e68:	f000 f810 	bl	8003e8c <BSP_AUDIO_OUT_Error_CallBack>
  }

  if ((audio_in_state == HAL_SAI_STATE_BUSY) || (audio_in_state == HAL_SAI_STATE_BUSY_RX))
 8003e6c:	7bbb      	ldrb	r3, [r7, #14]
 8003e6e:	2b02      	cmp	r3, #2
 8003e70:	d002      	beq.n	8003e78 <HAL_SAI_ErrorCallback+0x38>
 8003e72:	7bbb      	ldrb	r3, [r7, #14]
 8003e74:	2b22      	cmp	r3, #34	; 0x22
 8003e76:	d101      	bne.n	8003e7c <HAL_SAI_ErrorCallback+0x3c>
  {
    BSP_AUDIO_IN_Error_CallBack();
 8003e78:	f000 f9fd 	bl	8004276 <BSP_AUDIO_IN_Error_CallBack>
  }
}
 8003e7c:	bf00      	nop
 8003e7e:	3710      	adds	r7, #16
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bd80      	pop	{r7, pc}
 8003e84:	200071b8 	.word	0x200071b8
 8003e88:	2000723c 	.word	0x2000723c

08003e8c <BSP_AUDIO_OUT_Error_CallBack>:
/**
  * @brief  Manages the DMA FIFO error event.
  * @retval None
  */
__weak void BSP_AUDIO_OUT_Error_CallBack(void)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	af00      	add	r7, sp, #0
}
 8003e90:	bf00      	nop
 8003e92:	46bd      	mov	sp, r7
 8003e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e98:	4770      	bx	lr
	...

08003e9c <BSP_AUDIO_OUT_MspInit>:
  * @param  hsai: SAI handle
  * @param  Params
  * @retval None
  */
__weak void BSP_AUDIO_OUT_MspInit(SAI_HandleTypeDef *hsai, void *Params)
{ 
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b08c      	sub	sp, #48	; 0x30
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
 8003ea4:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef hdma_sai_tx;
  GPIO_InitTypeDef  gpio_init_structure;  

  /* Enable SAI clock */
  AUDIO_OUT_SAIx_CLK_ENABLE();
 8003ea6:	4b63      	ldr	r3, [pc, #396]	; (8004034 <BSP_AUDIO_OUT_MspInit+0x198>)
 8003ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eaa:	4a62      	ldr	r2, [pc, #392]	; (8004034 <BSP_AUDIO_OUT_MspInit+0x198>)
 8003eac:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003eb0:	6453      	str	r3, [r2, #68]	; 0x44
 8003eb2:	4b60      	ldr	r3, [pc, #384]	; (8004034 <BSP_AUDIO_OUT_MspInit+0x198>)
 8003eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eb6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003eba:	61bb      	str	r3, [r7, #24]
 8003ebc:	69bb      	ldr	r3, [r7, #24]
  
  /* Enable GPIO clock */
  AUDIO_OUT_SAIx_MCLK_ENABLE();
 8003ebe:	4b5d      	ldr	r3, [pc, #372]	; (8004034 <BSP_AUDIO_OUT_MspInit+0x198>)
 8003ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ec2:	4a5c      	ldr	r2, [pc, #368]	; (8004034 <BSP_AUDIO_OUT_MspInit+0x198>)
 8003ec4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ec8:	6313      	str	r3, [r2, #48]	; 0x30
 8003eca:	4b5a      	ldr	r3, [pc, #360]	; (8004034 <BSP_AUDIO_OUT_MspInit+0x198>)
 8003ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ece:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ed2:	617b      	str	r3, [r7, #20]
 8003ed4:	697b      	ldr	r3, [r7, #20]
  AUDIO_OUT_SAIx_SCK_SD_ENABLE();
 8003ed6:	4b57      	ldr	r3, [pc, #348]	; (8004034 <BSP_AUDIO_OUT_MspInit+0x198>)
 8003ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eda:	4a56      	ldr	r2, [pc, #344]	; (8004034 <BSP_AUDIO_OUT_MspInit+0x198>)
 8003edc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ee0:	6313      	str	r3, [r2, #48]	; 0x30
 8003ee2:	4b54      	ldr	r3, [pc, #336]	; (8004034 <BSP_AUDIO_OUT_MspInit+0x198>)
 8003ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ee6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eea:	613b      	str	r3, [r7, #16]
 8003eec:	693b      	ldr	r3, [r7, #16]
  AUDIO_OUT_SAIx_FS_ENABLE();
 8003eee:	4b51      	ldr	r3, [pc, #324]	; (8004034 <BSP_AUDIO_OUT_MspInit+0x198>)
 8003ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ef2:	4a50      	ldr	r2, [pc, #320]	; (8004034 <BSP_AUDIO_OUT_MspInit+0x198>)
 8003ef4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ef8:	6313      	str	r3, [r2, #48]	; 0x30
 8003efa:	4b4e      	ldr	r3, [pc, #312]	; (8004034 <BSP_AUDIO_OUT_MspInit+0x198>)
 8003efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003efe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f02:	60fb      	str	r3, [r7, #12]
 8003f04:	68fb      	ldr	r3, [r7, #12]
  /* CODEC_SAI pins configuration: FS, SCK, MCK and SD pins ------------------*/
  gpio_init_structure.Pin = AUDIO_OUT_SAIx_FS_PIN;
 8003f06:	2380      	movs	r3, #128	; 0x80
 8003f08:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8003f0a:	2302      	movs	r3, #2
 8003f0c:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8003f0e:	2300      	movs	r3, #0
 8003f10:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8003f12:	2303      	movs	r3, #3
 8003f14:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 8003f16:	230a      	movs	r3, #10
 8003f18:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(AUDIO_OUT_SAIx_FS_GPIO_PORT, &gpio_init_structure);
 8003f1a:	f107 031c 	add.w	r3, r7, #28
 8003f1e:	4619      	mov	r1, r3
 8003f20:	4845      	ldr	r0, [pc, #276]	; (8004038 <BSP_AUDIO_OUT_MspInit+0x19c>)
 8003f22:	f001 f907 	bl	8005134 <HAL_GPIO_Init>

  gpio_init_structure.Pin = AUDIO_OUT_SAIx_SCK_PIN;
 8003f26:	2320      	movs	r3, #32
 8003f28:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8003f2a:	2302      	movs	r3, #2
 8003f2c:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8003f2e:	2300      	movs	r3, #0
 8003f30:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8003f32:	2303      	movs	r3, #3
 8003f34:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_SCK_AF;
 8003f36:	230a      	movs	r3, #10
 8003f38:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_SD_GPIO_PORT, &gpio_init_structure);
 8003f3a:	f107 031c 	add.w	r3, r7, #28
 8003f3e:	4619      	mov	r1, r3
 8003f40:	483d      	ldr	r0, [pc, #244]	; (8004038 <BSP_AUDIO_OUT_MspInit+0x19c>)
 8003f42:	f001 f8f7 	bl	8005134 <HAL_GPIO_Init>

  gpio_init_structure.Pin =  AUDIO_OUT_SAIx_SD_PIN;
 8003f46:	2340      	movs	r3, #64	; 0x40
 8003f48:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8003f4a:	2302      	movs	r3, #2
 8003f4c:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8003f4e:	2300      	movs	r3, #0
 8003f50:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8003f52:	2303      	movs	r3, #3
 8003f54:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 8003f56:	230a      	movs	r3, #10
 8003f58:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_SD_GPIO_PORT, &gpio_init_structure);
 8003f5a:	f107 031c 	add.w	r3, r7, #28
 8003f5e:	4619      	mov	r1, r3
 8003f60:	4835      	ldr	r0, [pc, #212]	; (8004038 <BSP_AUDIO_OUT_MspInit+0x19c>)
 8003f62:	f001 f8e7 	bl	8005134 <HAL_GPIO_Init>

  gpio_init_structure.Pin = AUDIO_OUT_SAIx_MCLK_PIN;
 8003f66:	2310      	movs	r3, #16
 8003f68:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8003f6a:	2302      	movs	r3, #2
 8003f6c:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8003f72:	2303      	movs	r3, #3
 8003f74:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 8003f76:	230a      	movs	r3, #10
 8003f78:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(AUDIO_OUT_SAIx_MCLK_GPIO_PORT, &gpio_init_structure);
 8003f7a:	f107 031c 	add.w	r3, r7, #28
 8003f7e:	4619      	mov	r1, r3
 8003f80:	482d      	ldr	r0, [pc, #180]	; (8004038 <BSP_AUDIO_OUT_MspInit+0x19c>)
 8003f82:	f001 f8d7 	bl	8005134 <HAL_GPIO_Init>

  /* Enable the DMA clock */
  AUDIO_OUT_SAIx_DMAx_CLK_ENABLE();
 8003f86:	4b2b      	ldr	r3, [pc, #172]	; (8004034 <BSP_AUDIO_OUT_MspInit+0x198>)
 8003f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f8a:	4a2a      	ldr	r2, [pc, #168]	; (8004034 <BSP_AUDIO_OUT_MspInit+0x198>)
 8003f8c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003f90:	6313      	str	r3, [r2, #48]	; 0x30
 8003f92:	4b28      	ldr	r3, [pc, #160]	; (8004034 <BSP_AUDIO_OUT_MspInit+0x198>)
 8003f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f9a:	60bb      	str	r3, [r7, #8]
 8003f9c:	68bb      	ldr	r3, [r7, #8]
    
  if(hsai->Instance == AUDIO_OUT_SAIx)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a26      	ldr	r2, [pc, #152]	; (800403c <BSP_AUDIO_OUT_MspInit+0x1a0>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d138      	bne.n	800401a <BSP_AUDIO_OUT_MspInit+0x17e>
  {
    /* Configure the hdma_saiTx handle parameters */   
    hdma_sai_tx.Init.Channel             = AUDIO_OUT_SAIx_DMAx_CHANNEL;
 8003fa8:	4b25      	ldr	r3, [pc, #148]	; (8004040 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003faa:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8003fae:	605a      	str	r2, [r3, #4]
    hdma_sai_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8003fb0:	4b23      	ldr	r3, [pc, #140]	; (8004040 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003fb2:	2240      	movs	r2, #64	; 0x40
 8003fb4:	609a      	str	r2, [r3, #8]
    hdma_sai_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8003fb6:	4b22      	ldr	r3, [pc, #136]	; (8004040 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003fb8:	2200      	movs	r2, #0
 8003fba:	60da      	str	r2, [r3, #12]
    hdma_sai_tx.Init.MemInc              = DMA_MINC_ENABLE;
 8003fbc:	4b20      	ldr	r3, [pc, #128]	; (8004040 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003fbe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003fc2:	611a      	str	r2, [r3, #16]
    hdma_sai_tx.Init.PeriphDataAlignment = AUDIO_OUT_SAIx_DMAx_PERIPH_DATA_SIZE;
 8003fc4:	4b1e      	ldr	r3, [pc, #120]	; (8004040 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003fc6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003fca:	615a      	str	r2, [r3, #20]
    hdma_sai_tx.Init.MemDataAlignment    = AUDIO_OUT_SAIx_DMAx_MEM_DATA_SIZE;
 8003fcc:	4b1c      	ldr	r3, [pc, #112]	; (8004040 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003fce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003fd2:	619a      	str	r2, [r3, #24]
    hdma_sai_tx.Init.Mode                = DMA_CIRCULAR;
 8003fd4:	4b1a      	ldr	r3, [pc, #104]	; (8004040 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003fd6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003fda:	61da      	str	r2, [r3, #28]
    hdma_sai_tx.Init.Priority            = DMA_PRIORITY_HIGH;
 8003fdc:	4b18      	ldr	r3, [pc, #96]	; (8004040 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003fde:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003fe2:	621a      	str	r2, [r3, #32]
    hdma_sai_tx.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;         
 8003fe4:	4b16      	ldr	r3, [pc, #88]	; (8004040 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003fe6:	2204      	movs	r2, #4
 8003fe8:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sai_tx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8003fea:	4b15      	ldr	r3, [pc, #84]	; (8004040 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003fec:	2203      	movs	r2, #3
 8003fee:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sai_tx.Init.MemBurst            = DMA_MBURST_SINGLE;
 8003ff0:	4b13      	ldr	r3, [pc, #76]	; (8004040 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sai_tx.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8003ff6:	4b12      	ldr	r3, [pc, #72]	; (8004040 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	631a      	str	r2, [r3, #48]	; 0x30
    
    hdma_sai_tx.Instance = AUDIO_OUT_SAIx_DMAx_STREAM;
 8003ffc:	4b10      	ldr	r3, [pc, #64]	; (8004040 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003ffe:	4a11      	ldr	r2, [pc, #68]	; (8004044 <BSP_AUDIO_OUT_MspInit+0x1a8>)
 8004000:	601a      	str	r2, [r3, #0]
    
    /* Associate the DMA handle */
    __HAL_LINKDMA(hsai, hdmatx, hdma_sai_tx);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	4a0e      	ldr	r2, [pc, #56]	; (8004040 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8004006:	66da      	str	r2, [r3, #108]	; 0x6c
 8004008:	4a0d      	ldr	r2, [pc, #52]	; (8004040 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6393      	str	r3, [r2, #56]	; 0x38
    
    /* Deinitialize the Stream for new transfer */
    HAL_DMA_DeInit(&hdma_sai_tx);
 800400e:	480c      	ldr	r0, [pc, #48]	; (8004040 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8004010:	f000 fcf8 	bl	8004a04 <HAL_DMA_DeInit>
    
    /* Configure the DMA Stream */
    HAL_DMA_Init(&hdma_sai_tx);      
 8004014:	480a      	ldr	r0, [pc, #40]	; (8004040 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8004016:	f000 fc47 	bl	80048a8 <HAL_DMA_Init>
  }
  
  /* SAI DMA IRQ Channel configuration */
  HAL_NVIC_SetPriority(AUDIO_OUT_SAIx_DMAx_IRQ, AUDIO_OUT_IRQ_PREPRIO, 0);
 800401a:	2200      	movs	r2, #0
 800401c:	210e      	movs	r1, #14
 800401e:	203c      	movs	r0, #60	; 0x3c
 8004020:	f000 fc0b 	bl	800483a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_OUT_SAIx_DMAx_IRQ); 
 8004024:	203c      	movs	r0, #60	; 0x3c
 8004026:	f000 fc24 	bl	8004872 <HAL_NVIC_EnableIRQ>
}
 800402a:	bf00      	nop
 800402c:	3730      	adds	r7, #48	; 0x30
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}
 8004032:	bf00      	nop
 8004034:	40023800 	.word	0x40023800
 8004038:	40022000 	.word	0x40022000
 800403c:	40015c04 	.word	0x40015c04
 8004040:	200072c0 	.word	0x200072c0
 8004044:	40026470 	.word	0x40026470

08004048 <BSP_AUDIO_OUT_ClockConfig>:
  * @note   This API is called by BSP_AUDIO_OUT_Init() and BSP_AUDIO_OUT_SetFrequency()
  *         Being __weak it can be overwritten by the application     
  * @retval None
  */
__weak void BSP_AUDIO_OUT_ClockConfig(SAI_HandleTypeDef *hsai, uint32_t AudioFreq, void *Params)
{ 
 8004048:	b580      	push	{r7, lr}
 800404a:	b0a6      	sub	sp, #152	; 0x98
 800404c:	af00      	add	r7, sp, #0
 800404e:	60f8      	str	r0, [r7, #12]
 8004050:	60b9      	str	r1, [r7, #8]
 8004052:	607a      	str	r2, [r7, #4]
  RCC_PeriphCLKInitTypeDef rcc_ex_clk_init_struct;

  HAL_RCCEx_GetPeriphCLKConfig(&rcc_ex_clk_init_struct);
 8004054:	f107 0314 	add.w	r3, r7, #20
 8004058:	4618      	mov	r0, r3
 800405a:	f003 f851 	bl	8007100 <HAL_RCCEx_GetPeriphCLKConfig>
  
  /* Set the PLL configuration according to the audio frequency */
  if((AudioFreq == AUDIO_FREQUENCY_11K) || (AudioFreq == AUDIO_FREQUENCY_22K) || (AudioFreq == AUDIO_FREQUENCY_44K))
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	f642 3211 	movw	r2, #11025	; 0x2b11
 8004064:	4293      	cmp	r3, r2
 8004066:	d009      	beq.n	800407c <BSP_AUDIO_OUT_ClockConfig+0x34>
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	f245 6222 	movw	r2, #22050	; 0x5622
 800406e:	4293      	cmp	r3, r2
 8004070:	d004      	beq.n	800407c <BSP_AUDIO_OUT_ClockConfig+0x34>
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	f64a 4244 	movw	r2, #44100	; 0xac44
 8004078:	4293      	cmp	r3, r2
 800407a:	d112      	bne.n	80040a2 <BSP_AUDIO_OUT_ClockConfig+0x5a>
  {
    /* Configure PLLI2S prescalers */
    /* PLLI2S_VCO: VCO_429M
    I2S_CLK(first level) = PLLI2S_VCO/PLLI2SQ = 429/2 = 214.5 Mhz
    I2S_CLK_x = I2S_CLK(first level)/PLLI2SDIVQ = 214.5/19 = 11.289 Mhz */
    rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 800407c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004080:	617b      	str	r3, [r7, #20]
    rcc_ex_clk_init_struct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
 8004082:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004086:	657b      	str	r3, [r7, #84]	; 0x54
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SN = 429;
 8004088:	f240 13ad 	movw	r3, #429	; 0x1ad
 800408c:	61bb      	str	r3, [r7, #24]
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 2;
 800408e:	2302      	movs	r3, #2
 8004090:	623b      	str	r3, [r7, #32]
    rcc_ex_clk_init_struct.PLLI2SDivQ = 19;
 8004092:	2313      	movs	r3, #19
 8004094:	63bb      	str	r3, [r7, #56]	; 0x38
    
    HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 8004096:	f107 0314 	add.w	r3, r7, #20
 800409a:	4618      	mov	r0, r3
 800409c:	f002 fc40 	bl	8006920 <HAL_RCCEx_PeriphCLKConfig>
 80040a0:	e012      	b.n	80040c8 <BSP_AUDIO_OUT_ClockConfig+0x80>
  {
    /* I2S clock config
    PLLI2S_VCO: VCO_344M
    I2S_CLK(first level) = PLLI2S_VCO/PLLI2SQ = 344/7 = 49.142 Mhz
    I2S_CLK_x = I2S_CLK(first level)/PLLI2SDIVQ = 49.142/1 = 49.142 Mhz */
    rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 80040a2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80040a6:	617b      	str	r3, [r7, #20]
    rcc_ex_clk_init_struct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
 80040a8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80040ac:	657b      	str	r3, [r7, #84]	; 0x54
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SN = 344;
 80040ae:	f44f 73ac 	mov.w	r3, #344	; 0x158
 80040b2:	61bb      	str	r3, [r7, #24]
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 7;
 80040b4:	2307      	movs	r3, #7
 80040b6:	623b      	str	r3, [r7, #32]
    rcc_ex_clk_init_struct.PLLI2SDivQ = 1;
 80040b8:	2301      	movs	r3, #1
 80040ba:	63bb      	str	r3, [r7, #56]	; 0x38
    
    HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 80040bc:	f107 0314 	add.w	r3, r7, #20
 80040c0:	4618      	mov	r0, r3
 80040c2:	f002 fc2d 	bl	8006920 <HAL_RCCEx_PeriphCLKConfig>
  }
}
 80040c6:	bf00      	nop
 80040c8:	bf00      	nop
 80040ca:	3798      	adds	r7, #152	; 0x98
 80040cc:	46bd      	mov	sp, r7
 80040ce:	bd80      	pop	{r7, pc}

080040d0 <BSP_AUDIO_IN_Init>:
  * @param  BitRes: Audio frequency to be configured.
  * @param  ChnlNbr: Channel number.
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_IN_Init(uint32_t AudioFreq, uint32_t BitRes, uint32_t ChnlNbr)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b084      	sub	sp, #16
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	60f8      	str	r0, [r7, #12]
 80040d8:	60b9      	str	r1, [r7, #8]
 80040da:	607a      	str	r2, [r7, #4]
  return BSP_AUDIO_IN_InitEx(INPUT_DEVICE_DIGITAL_MICROPHONE_2, AudioFreq, BitRes, ChnlNbr); 
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	68ba      	ldr	r2, [r7, #8]
 80040e0:	68f9      	ldr	r1, [r7, #12]
 80040e2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80040e6:	f000 f805 	bl	80040f4 <BSP_AUDIO_IN_InitEx>
 80040ea:	4603      	mov	r3, r0
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	3710      	adds	r7, #16
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}

080040f4 <BSP_AUDIO_IN_InitEx>:
  * @param  BitRes: Audio frequency to be configured.
  * @param  ChnlNbr: Channel number.
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_IN_InitEx(uint16_t InputDevice, uint32_t AudioFreq, uint32_t BitRes, uint32_t ChnlNbr)
{
 80040f4:	b590      	push	{r4, r7, lr}
 80040f6:	b089      	sub	sp, #36	; 0x24
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	60b9      	str	r1, [r7, #8]
 80040fc:	607a      	str	r2, [r7, #4]
 80040fe:	603b      	str	r3, [r7, #0]
 8004100:	4603      	mov	r3, r0
 8004102:	81fb      	strh	r3, [r7, #14]
  uint8_t ret = AUDIO_ERROR;
 8004104:	2301      	movs	r3, #1
 8004106:	77fb      	strb	r3, [r7, #31]
  uint32_t deviceid = 0x00;
 8004108:	2300      	movs	r3, #0
 800410a:	617b      	str	r3, [r7, #20]
  uint32_t slot_active;

  if ((InputDevice != INPUT_DEVICE_INPUT_LINE_1) &&       /* Only INPUT_LINE_1 and MICROPHONE_2 inputs supported */
 800410c:	89fb      	ldrh	r3, [r7, #14]
 800410e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004112:	d006      	beq.n	8004122 <BSP_AUDIO_IN_InitEx+0x2e>
 8004114:	89fb      	ldrh	r3, [r7, #14]
 8004116:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800411a:	d002      	beq.n	8004122 <BSP_AUDIO_IN_InitEx+0x2e>
      (InputDevice != INPUT_DEVICE_DIGITAL_MICROPHONE_2))
  {
    ret = AUDIO_ERROR;
 800411c:	2301      	movs	r3, #1
 800411e:	77fb      	strb	r3, [r7, #31]
 8004120:	e046      	b.n	80041b0 <BSP_AUDIO_IN_InitEx+0xbc>
  }
  else
  {
    /* Disable SAI */
    SAIx_In_DeInit();
 8004122:	f000 fa17 	bl	8004554 <SAIx_In_DeInit>

    /* PLL clock is set depending on the AudioFreq (44.1khz vs 48khz groups) */
    BSP_AUDIO_OUT_ClockConfig(&haudio_in_sai, AudioFreq, NULL); /* Clock config is shared between AUDIO IN and OUT */
 8004126:	2200      	movs	r2, #0
 8004128:	68b9      	ldr	r1, [r7, #8]
 800412a:	4824      	ldr	r0, [pc, #144]	; (80041bc <BSP_AUDIO_IN_InitEx+0xc8>)
 800412c:	f7ff ff8c 	bl	8004048 <BSP_AUDIO_OUT_ClockConfig>

    /* SAI data transfer preparation:
    Prepare the Media to be used for the audio transfer from SAI peripheral to memory */
    haudio_in_sai.Instance = AUDIO_IN_SAIx;
 8004130:	4b22      	ldr	r3, [pc, #136]	; (80041bc <BSP_AUDIO_IN_InitEx+0xc8>)
 8004132:	4a23      	ldr	r2, [pc, #140]	; (80041c0 <BSP_AUDIO_IN_InitEx+0xcc>)
 8004134:	601a      	str	r2, [r3, #0]
    if(HAL_SAI_GetState(&haudio_in_sai) == HAL_SAI_STATE_RESET)
 8004136:	4821      	ldr	r0, [pc, #132]	; (80041bc <BSP_AUDIO_IN_InitEx+0xc8>)
 8004138:	f003 fcfa 	bl	8007b30 <HAL_SAI_GetState>
 800413c:	4603      	mov	r3, r0
 800413e:	2b00      	cmp	r3, #0
 8004140:	d107      	bne.n	8004152 <BSP_AUDIO_IN_InitEx+0x5e>
    {
      /* Init the SAI MSP: this __weak function can be redefined by the application*/
      BSP_AUDIO_OUT_MspInit(&haudio_in_sai, NULL);  /* Initialize GPIOs for SAI2 block A Master signals */
 8004142:	2100      	movs	r1, #0
 8004144:	481d      	ldr	r0, [pc, #116]	; (80041bc <BSP_AUDIO_IN_InitEx+0xc8>)
 8004146:	f7ff fea9 	bl	8003e9c <BSP_AUDIO_OUT_MspInit>
      BSP_AUDIO_IN_MspInit(&haudio_in_sai, NULL);
 800414a:	2100      	movs	r1, #0
 800414c:	481b      	ldr	r0, [pc, #108]	; (80041bc <BSP_AUDIO_IN_InitEx+0xc8>)
 800414e:	f000 f899 	bl	8004284 <BSP_AUDIO_IN_MspInit>

    /* Configure SAI in master RX mode :
     *   - SAI2_block_A in master RX mode
     *   - SAI2_block_B in slave RX mode synchronous from SAI2_block_A
     */
    if (InputDevice == INPUT_DEVICE_DIGITAL_MICROPHONE_2)
 8004152:	89fb      	ldrh	r3, [r7, #14]
 8004154:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004158:	d102      	bne.n	8004160 <BSP_AUDIO_IN_InitEx+0x6c>
    {
      slot_active = CODEC_AUDIOFRAME_SLOT_13;
 800415a:	230a      	movs	r3, #10
 800415c:	61bb      	str	r3, [r7, #24]
 800415e:	e001      	b.n	8004164 <BSP_AUDIO_IN_InitEx+0x70>
    }
    else
    {
      slot_active = CODEC_AUDIOFRAME_SLOT_02;
 8004160:	2305      	movs	r3, #5
 8004162:	61bb      	str	r3, [r7, #24]
    }
    SAIx_In_Init(SAI_MODEMASTER_RX, slot_active, AudioFreq);
 8004164:	68ba      	ldr	r2, [r7, #8]
 8004166:	69b9      	ldr	r1, [r7, #24]
 8004168:	2001      	movs	r0, #1
 800416a:	f000 f93d 	bl	80043e8 <SAIx_In_Init>

    /* wm8994 codec initialization */
    deviceid = wm8994_drv.ReadID(AUDIO_I2C_ADDRESS);
 800416e:	4b15      	ldr	r3, [pc, #84]	; (80041c4 <BSP_AUDIO_IN_InitEx+0xd0>)
 8004170:	689b      	ldr	r3, [r3, #8]
 8004172:	2034      	movs	r0, #52	; 0x34
 8004174:	4798      	blx	r3
 8004176:	6178      	str	r0, [r7, #20]

    if((deviceid) == WM8994_ID)
 8004178:	697b      	ldr	r3, [r7, #20]
 800417a:	f648 1294 	movw	r2, #35220	; 0x8994
 800417e:	4293      	cmp	r3, r2
 8004180:	d109      	bne.n	8004196 <BSP_AUDIO_IN_InitEx+0xa2>
    {
      /* Reset the Codec Registers */
      wm8994_drv.Reset(AUDIO_I2C_ADDRESS);
 8004182:	4b10      	ldr	r3, [pc, #64]	; (80041c4 <BSP_AUDIO_IN_InitEx+0xd0>)
 8004184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004186:	2034      	movs	r0, #52	; 0x34
 8004188:	4798      	blx	r3
      /* Initialize the audio driver structure */
      audio_drv = &wm8994_drv;
 800418a:	4b0f      	ldr	r3, [pc, #60]	; (80041c8 <BSP_AUDIO_IN_InitEx+0xd4>)
 800418c:	4a0d      	ldr	r2, [pc, #52]	; (80041c4 <BSP_AUDIO_IN_InitEx+0xd0>)
 800418e:	601a      	str	r2, [r3, #0]
      ret = AUDIO_OK;
 8004190:	2300      	movs	r3, #0
 8004192:	77fb      	strb	r3, [r7, #31]
 8004194:	e001      	b.n	800419a <BSP_AUDIO_IN_InitEx+0xa6>
    }
    else
    {
      ret = AUDIO_ERROR;
 8004196:	2301      	movs	r3, #1
 8004198:	77fb      	strb	r3, [r7, #31]
    }

    if(ret == AUDIO_OK)
 800419a:	7ffb      	ldrb	r3, [r7, #31]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d107      	bne.n	80041b0 <BSP_AUDIO_IN_InitEx+0xbc>
    {
      /* Initialize the codec internal registers */
      audio_drv->Init(AUDIO_I2C_ADDRESS, InputDevice, 100, AudioFreq);
 80041a0:	4b09      	ldr	r3, [pc, #36]	; (80041c8 <BSP_AUDIO_IN_InitEx+0xd4>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	681c      	ldr	r4, [r3, #0]
 80041a6:	89f9      	ldrh	r1, [r7, #14]
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	2264      	movs	r2, #100	; 0x64
 80041ac:	2034      	movs	r0, #52	; 0x34
 80041ae:	47a0      	blx	r4
    }
  }
  return ret;
 80041b0:	7ffb      	ldrb	r3, [r7, #31]
}
 80041b2:	4618      	mov	r0, r3
 80041b4:	3724      	adds	r7, #36	; 0x24
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd90      	pop	{r4, r7, pc}
 80041ba:	bf00      	nop
 80041bc:	2000723c 	.word	0x2000723c
 80041c0:	40015c24 	.word	0x40015c24
 80041c4:	20000004 	.word	0x20000004
 80041c8:	200151e0 	.word	0x200151e0

080041cc <BSP_AUDIO_IN_Record>:
  * @param  size: size of the recorded buffer in number of elements (typically number of half-words)
  *               Be careful that it is not the same unit than BSP_AUDIO_OUT_Play function
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t  BSP_AUDIO_IN_Record(uint16_t* pbuf, uint32_t size)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b084      	sub	sp, #16
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
 80041d4:	6039      	str	r1, [r7, #0]
  uint32_t ret = AUDIO_ERROR;
 80041d6:	2301      	movs	r3, #1
 80041d8:	60fb      	str	r3, [r7, #12]
  
  /* Start the process receive DMA */
  HAL_SAI_Receive_DMA(&haudio_in_sai, (uint8_t*)pbuf, size);
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	b29b      	uxth	r3, r3
 80041de:	461a      	mov	r2, r3
 80041e0:	6879      	ldr	r1, [r7, #4]
 80041e2:	4805      	ldr	r0, [pc, #20]	; (80041f8 <BSP_AUDIO_IN_Record+0x2c>)
 80041e4:	f003 fc16 	bl	8007a14 <HAL_SAI_Receive_DMA>
  
  /* Return AUDIO_OK when all operations are correctly done */
  ret = AUDIO_OK;
 80041e8:	2300      	movs	r3, #0
 80041ea:	60fb      	str	r3, [r7, #12]
  
  return ret;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	b2db      	uxtb	r3, r3
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	3710      	adds	r7, #16
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd80      	pop	{r7, pc}
 80041f8:	2000723c 	.word	0x2000723c

080041fc <BSP_AUDIO_IN_Stop>:
  *           - CODEC_PDWN_HW: completely shut down the codec (physically).
  *                            Then need to reconfigure the Codec after power on.
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_IN_Stop(uint32_t Option)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b082      	sub	sp, #8
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
  /* Call the Media layer stop function */
  HAL_SAI_DMAStop(&haudio_in_sai);
 8004204:	480c      	ldr	r0, [pc, #48]	; (8004238 <BSP_AUDIO_IN_Stop+0x3c>)
 8004206:	f003 fb92 	bl	800792e <HAL_SAI_DMAStop>
  
  /* Call Audio Codec Stop function */
  if(audio_drv->Stop(AUDIO_I2C_ADDRESS, Option) != 0)
 800420a:	4b0c      	ldr	r3, [pc, #48]	; (800423c <BSP_AUDIO_IN_Stop+0x40>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	699b      	ldr	r3, [r3, #24]
 8004210:	6879      	ldr	r1, [r7, #4]
 8004212:	2034      	movs	r0, #52	; 0x34
 8004214:	4798      	blx	r3
 8004216:	4603      	mov	r3, r0
 8004218:	2b00      	cmp	r3, #0
 800421a:	d001      	beq.n	8004220 <BSP_AUDIO_IN_Stop+0x24>
  {
    return AUDIO_ERROR;
 800421c:	2301      	movs	r3, #1
 800421e:	e006      	b.n	800422e <BSP_AUDIO_IN_Stop+0x32>
  }
  else
  {
    if(Option == CODEC_PDWN_HW)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2b01      	cmp	r3, #1
 8004224:	d102      	bne.n	800422c <BSP_AUDIO_IN_Stop+0x30>
    {
      /* Wait at least 100us */
      HAL_Delay(1);
 8004226:	2001      	movs	r0, #1
 8004228:	f000 fa08 	bl	800463c <HAL_Delay>
    }
    /* Return AUDIO_OK when all operations are correctly done */
    return AUDIO_OK;
 800422c:	2300      	movs	r3, #0
  }
}
 800422e:	4618      	mov	r0, r3
 8004230:	3708      	adds	r7, #8
 8004232:	46bd      	mov	sp, r7
 8004234:	bd80      	pop	{r7, pc}
 8004236:	bf00      	nop
 8004238:	2000723c 	.word	0x2000723c
 800423c:	200151e0 	.word	0x200151e0

08004240 <HAL_SAI_RxCpltCallback>:
  * @brief  Rx Transfer completed callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b082      	sub	sp, #8
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
  /* Call the record update function to get the next buffer to fill and its size (size is ignored) */
  BSP_AUDIO_IN_TransferComplete_CallBack();
 8004248:	f7fd f9a6 	bl	8001598 <BSP_AUDIO_IN_TransferComplete_CallBack>
}
 800424c:	bf00      	nop
 800424e:	3708      	adds	r7, #8
 8004250:	46bd      	mov	sp, r7
 8004252:	bd80      	pop	{r7, pc}

08004254 <HAL_SAI_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b082      	sub	sp, #8
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
  /* Manage the remaining file size and new address offset: This function 
     should be coded by user (its prototype is already declared in stm32746g_discovery_audio.h) */
  BSP_AUDIO_IN_HalfTransfer_CallBack();
 800425c:	f000 f804 	bl	8004268 <BSP_AUDIO_IN_HalfTransfer_CallBack>
}
 8004260:	bf00      	nop
 8004262:	3708      	adds	r7, #8
 8004264:	46bd      	mov	sp, r7
 8004266:	bd80      	pop	{r7, pc}

08004268 <BSP_AUDIO_IN_HalfTransfer_CallBack>:
/**
  * @brief  Manages the DMA Half Transfer complete event.
  * @retval None
  */
__weak void BSP_AUDIO_IN_HalfTransfer_CallBack(void)
{ 
 8004268:	b480      	push	{r7}
 800426a:	af00      	add	r7, sp, #0
  /* This function should be implemented by the user application.
     It is called into this driver when the current buffer is filled
     to prepare the next buffer pointer and its size. */
}
 800426c:	bf00      	nop
 800426e:	46bd      	mov	sp, r7
 8004270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004274:	4770      	bx	lr

08004276 <BSP_AUDIO_IN_Error_CallBack>:
/**
  * @brief  Audio IN Error callback function.
  * @retval None
  */
__weak void BSP_AUDIO_IN_Error_CallBack(void)
{   
 8004276:	b480      	push	{r7}
 8004278:	af00      	add	r7, sp, #0
  /* This function is called when an Interrupt due to transfer error on or peripheral
     error occurs. */
}
 800427a:	bf00      	nop
 800427c:	46bd      	mov	sp, r7
 800427e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004282:	4770      	bx	lr

08004284 <BSP_AUDIO_IN_MspInit>:
  * @param  hsai: SAI handle
  * @param  Params
  * @retval None
  */
__weak void BSP_AUDIO_IN_MspInit(SAI_HandleTypeDef *hsai, void *Params)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b08c      	sub	sp, #48	; 0x30
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
 800428c:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef hdma_sai_rx;
  GPIO_InitTypeDef  gpio_init_structure;  

  /* Enable SAI clock */
  AUDIO_IN_SAIx_CLK_ENABLE();
 800428e:	4b50      	ldr	r3, [pc, #320]	; (80043d0 <BSP_AUDIO_IN_MspInit+0x14c>)
 8004290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004292:	4a4f      	ldr	r2, [pc, #316]	; (80043d0 <BSP_AUDIO_IN_MspInit+0x14c>)
 8004294:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004298:	6453      	str	r3, [r2, #68]	; 0x44
 800429a:	4b4d      	ldr	r3, [pc, #308]	; (80043d0 <BSP_AUDIO_IN_MspInit+0x14c>)
 800429c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800429e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80042a2:	61bb      	str	r3, [r7, #24]
 80042a4:	69bb      	ldr	r3, [r7, #24]
  
  /* Enable SD GPIO clock */
  AUDIO_IN_SAIx_SD_ENABLE();
 80042a6:	4b4a      	ldr	r3, [pc, #296]	; (80043d0 <BSP_AUDIO_IN_MspInit+0x14c>)
 80042a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042aa:	4a49      	ldr	r2, [pc, #292]	; (80043d0 <BSP_AUDIO_IN_MspInit+0x14c>)
 80042ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80042b0:	6313      	str	r3, [r2, #48]	; 0x30
 80042b2:	4b47      	ldr	r3, [pc, #284]	; (80043d0 <BSP_AUDIO_IN_MspInit+0x14c>)
 80042b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042ba:	617b      	str	r3, [r7, #20]
 80042bc:	697b      	ldr	r3, [r7, #20]
  /* CODEC_SAI pin configuration: SD pin */
  gpio_init_structure.Pin = AUDIO_IN_SAIx_SD_PIN;
 80042be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80042c2:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80042c4:	2302      	movs	r3, #2
 80042c6:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 80042c8:	2300      	movs	r3, #0
 80042ca:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80042cc:	2302      	movs	r3, #2
 80042ce:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Alternate = AUDIO_IN_SAIx_SD_AF;
 80042d0:	230a      	movs	r3, #10
 80042d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(AUDIO_IN_SAIx_SD_GPIO_PORT, &gpio_init_structure);
 80042d4:	f107 031c 	add.w	r3, r7, #28
 80042d8:	4619      	mov	r1, r3
 80042da:	483e      	ldr	r0, [pc, #248]	; (80043d4 <BSP_AUDIO_IN_MspInit+0x150>)
 80042dc:	f000 ff2a 	bl	8005134 <HAL_GPIO_Init>

  /* Enable Audio INT GPIO clock */
  AUDIO_IN_INT_GPIO_ENABLE();
 80042e0:	4b3b      	ldr	r3, [pc, #236]	; (80043d0 <BSP_AUDIO_IN_MspInit+0x14c>)
 80042e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042e4:	4a3a      	ldr	r2, [pc, #232]	; (80043d0 <BSP_AUDIO_IN_MspInit+0x14c>)
 80042e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042ea:	6313      	str	r3, [r2, #48]	; 0x30
 80042ec:	4b38      	ldr	r3, [pc, #224]	; (80043d0 <BSP_AUDIO_IN_MspInit+0x14c>)
 80042ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042f4:	613b      	str	r3, [r7, #16]
 80042f6:	693b      	ldr	r3, [r7, #16]
  /* Audio INT pin configuration: input */
  gpio_init_structure.Pin = AUDIO_IN_INT_GPIO_PIN;
 80042f8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80042fc:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_INPUT;
 80042fe:	2300      	movs	r3, #0
 8004300:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8004302:	2300      	movs	r3, #0
 8004304:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8004306:	2302      	movs	r3, #2
 8004308:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(AUDIO_IN_INT_GPIO_PORT, &gpio_init_structure);
 800430a:	f107 031c 	add.w	r3, r7, #28
 800430e:	4619      	mov	r1, r3
 8004310:	4831      	ldr	r0, [pc, #196]	; (80043d8 <BSP_AUDIO_IN_MspInit+0x154>)
 8004312:	f000 ff0f 	bl	8005134 <HAL_GPIO_Init>

  /* Enable the DMA clock */
  AUDIO_IN_SAIx_DMAx_CLK_ENABLE();
 8004316:	4b2e      	ldr	r3, [pc, #184]	; (80043d0 <BSP_AUDIO_IN_MspInit+0x14c>)
 8004318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800431a:	4a2d      	ldr	r2, [pc, #180]	; (80043d0 <BSP_AUDIO_IN_MspInit+0x14c>)
 800431c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004320:	6313      	str	r3, [r2, #48]	; 0x30
 8004322:	4b2b      	ldr	r3, [pc, #172]	; (80043d0 <BSP_AUDIO_IN_MspInit+0x14c>)
 8004324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004326:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800432a:	60fb      	str	r3, [r7, #12]
 800432c:	68fb      	ldr	r3, [r7, #12]
    
  if(hsai->Instance == AUDIO_IN_SAIx)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a2a      	ldr	r2, [pc, #168]	; (80043dc <BSP_AUDIO_IN_MspInit+0x158>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d137      	bne.n	80043a8 <BSP_AUDIO_IN_MspInit+0x124>
  {
    /* Configure the hdma_sai_rx handle parameters */
    hdma_sai_rx.Init.Channel             = AUDIO_IN_SAIx_DMAx_CHANNEL;
 8004338:	4b29      	ldr	r3, [pc, #164]	; (80043e0 <BSP_AUDIO_IN_MspInit+0x15c>)
 800433a:	2200      	movs	r2, #0
 800433c:	605a      	str	r2, [r3, #4]
    hdma_sai_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 800433e:	4b28      	ldr	r3, [pc, #160]	; (80043e0 <BSP_AUDIO_IN_MspInit+0x15c>)
 8004340:	2200      	movs	r2, #0
 8004342:	609a      	str	r2, [r3, #8]
    hdma_sai_rx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8004344:	4b26      	ldr	r3, [pc, #152]	; (80043e0 <BSP_AUDIO_IN_MspInit+0x15c>)
 8004346:	2200      	movs	r2, #0
 8004348:	60da      	str	r2, [r3, #12]
    hdma_sai_rx.Init.MemInc              = DMA_MINC_ENABLE;
 800434a:	4b25      	ldr	r3, [pc, #148]	; (80043e0 <BSP_AUDIO_IN_MspInit+0x15c>)
 800434c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004350:	611a      	str	r2, [r3, #16]
    hdma_sai_rx.Init.PeriphDataAlignment = AUDIO_IN_SAIx_DMAx_PERIPH_DATA_SIZE;
 8004352:	4b23      	ldr	r3, [pc, #140]	; (80043e0 <BSP_AUDIO_IN_MspInit+0x15c>)
 8004354:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004358:	615a      	str	r2, [r3, #20]
    hdma_sai_rx.Init.MemDataAlignment    = AUDIO_IN_SAIx_DMAx_MEM_DATA_SIZE;
 800435a:	4b21      	ldr	r3, [pc, #132]	; (80043e0 <BSP_AUDIO_IN_MspInit+0x15c>)
 800435c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004360:	619a      	str	r2, [r3, #24]
    hdma_sai_rx.Init.Mode                = DMA_CIRCULAR;
 8004362:	4b1f      	ldr	r3, [pc, #124]	; (80043e0 <BSP_AUDIO_IN_MspInit+0x15c>)
 8004364:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004368:	61da      	str	r2, [r3, #28]
    hdma_sai_rx.Init.Priority            = DMA_PRIORITY_HIGH;
 800436a:	4b1d      	ldr	r3, [pc, #116]	; (80043e0 <BSP_AUDIO_IN_MspInit+0x15c>)
 800436c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004370:	621a      	str	r2, [r3, #32]
    hdma_sai_rx.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8004372:	4b1b      	ldr	r3, [pc, #108]	; (80043e0 <BSP_AUDIO_IN_MspInit+0x15c>)
 8004374:	2200      	movs	r2, #0
 8004376:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sai_rx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8004378:	4b19      	ldr	r3, [pc, #100]	; (80043e0 <BSP_AUDIO_IN_MspInit+0x15c>)
 800437a:	2203      	movs	r2, #3
 800437c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sai_rx.Init.MemBurst            = DMA_MBURST_SINGLE;
 800437e:	4b18      	ldr	r3, [pc, #96]	; (80043e0 <BSP_AUDIO_IN_MspInit+0x15c>)
 8004380:	2200      	movs	r2, #0
 8004382:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sai_rx.Init.PeriphBurst         = DMA_MBURST_SINGLE;
 8004384:	4b16      	ldr	r3, [pc, #88]	; (80043e0 <BSP_AUDIO_IN_MspInit+0x15c>)
 8004386:	2200      	movs	r2, #0
 8004388:	631a      	str	r2, [r3, #48]	; 0x30
    
    hdma_sai_rx.Instance = AUDIO_IN_SAIx_DMAx_STREAM;
 800438a:	4b15      	ldr	r3, [pc, #84]	; (80043e0 <BSP_AUDIO_IN_MspInit+0x15c>)
 800438c:	4a15      	ldr	r2, [pc, #84]	; (80043e4 <BSP_AUDIO_IN_MspInit+0x160>)
 800438e:	601a      	str	r2, [r3, #0]
    
    /* Associate the DMA handle */
    __HAL_LINKDMA(hsai, hdmarx, hdma_sai_rx);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	4a13      	ldr	r2, [pc, #76]	; (80043e0 <BSP_AUDIO_IN_MspInit+0x15c>)
 8004394:	671a      	str	r2, [r3, #112]	; 0x70
 8004396:	4a12      	ldr	r2, [pc, #72]	; (80043e0 <BSP_AUDIO_IN_MspInit+0x15c>)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6393      	str	r3, [r2, #56]	; 0x38
    
    /* Deinitialize the Stream for new transfer */
    HAL_DMA_DeInit(&hdma_sai_rx);
 800439c:	4810      	ldr	r0, [pc, #64]	; (80043e0 <BSP_AUDIO_IN_MspInit+0x15c>)
 800439e:	f000 fb31 	bl	8004a04 <HAL_DMA_DeInit>
    
    /* Configure the DMA Stream */
    HAL_DMA_Init(&hdma_sai_rx);
 80043a2:	480f      	ldr	r0, [pc, #60]	; (80043e0 <BSP_AUDIO_IN_MspInit+0x15c>)
 80043a4:	f000 fa80 	bl	80048a8 <HAL_DMA_Init>
  }
  
  /* SAI DMA IRQ Channel configuration */
  HAL_NVIC_SetPriority(AUDIO_IN_SAIx_DMAx_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
 80043a8:	2200      	movs	r2, #0
 80043aa:	210f      	movs	r1, #15
 80043ac:	2046      	movs	r0, #70	; 0x46
 80043ae:	f000 fa44 	bl	800483a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_IN_SAIx_DMAx_IRQ);
 80043b2:	2046      	movs	r0, #70	; 0x46
 80043b4:	f000 fa5d 	bl	8004872 <HAL_NVIC_EnableIRQ>

  /* Audio INT IRQ Channel configuration */
  HAL_NVIC_SetPriority(AUDIO_IN_INT_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
 80043b8:	2200      	movs	r2, #0
 80043ba:	210f      	movs	r1, #15
 80043bc:	2028      	movs	r0, #40	; 0x28
 80043be:	f000 fa3c 	bl	800483a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_IN_INT_IRQ);
 80043c2:	2028      	movs	r0, #40	; 0x28
 80043c4:	f000 fa55 	bl	8004872 <HAL_NVIC_EnableIRQ>
}
 80043c8:	bf00      	nop
 80043ca:	3730      	adds	r7, #48	; 0x30
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bd80      	pop	{r7, pc}
 80043d0:	40023800 	.word	0x40023800
 80043d4:	40021800 	.word	0x40021800
 80043d8:	40021c00 	.word	0x40021c00
 80043dc:	40015c24 	.word	0x40015c24
 80043e0:	20007320 	.word	0x20007320
 80043e4:	400264b8 	.word	0x400264b8

080043e8 <SAIx_In_Init>:
  * @param  SlotActive: CODEC_AUDIOFRAME_SLOT_02 or CODEC_AUDIOFRAME_SLOT_13
  * @param  AudioFreq: Audio frequency to be configured for the SAI peripheral.
  * @retval None
  */
static void SAIx_In_Init(uint32_t SaiOutMode, uint32_t SlotActive, uint32_t AudioFreq)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b084      	sub	sp, #16
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	60f8      	str	r0, [r7, #12]
 80043f0:	60b9      	str	r1, [r7, #8]
 80043f2:	607a      	str	r2, [r7, #4]
  /* Initialize SAI2 block A in MASTER RX */
  /* Initialize the haudio_out_sai Instance parameter */
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 80043f4:	4b53      	ldr	r3, [pc, #332]	; (8004544 <SAIx_In_Init+0x15c>)
 80043f6:	4a54      	ldr	r2, [pc, #336]	; (8004548 <SAIx_In_Init+0x160>)
 80043f8:	601a      	str	r2, [r3, #0]

  /* Disable SAI peripheral to allow access to SAI internal registers */
  __HAL_SAI_DISABLE(&haudio_out_sai);
 80043fa:	4b52      	ldr	r3, [pc, #328]	; (8004544 <SAIx_In_Init+0x15c>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	681a      	ldr	r2, [r3, #0]
 8004400:	4b50      	ldr	r3, [pc, #320]	; (8004544 <SAIx_In_Init+0x15c>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004408:	601a      	str	r2, [r3, #0]

  /* Configure SAI_Block_x
  LSBFirst: Disabled
  DataSize: 16 */
  haudio_out_sai.Init.AudioFrequency = AudioFreq;
 800440a:	4a4e      	ldr	r2, [pc, #312]	; (8004544 <SAIx_In_Init+0x15c>)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	61d3      	str	r3, [r2, #28]
  haudio_out_sai.Init.AudioMode = SaiOutMode;
 8004410:	4a4c      	ldr	r2, [pc, #304]	; (8004544 <SAIx_In_Init+0x15c>)
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	6053      	str	r3, [r2, #4]
  haudio_out_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
 8004416:	4b4b      	ldr	r3, [pc, #300]	; (8004544 <SAIx_In_Init+0x15c>)
 8004418:	2200      	movs	r2, #0
 800441a:	615a      	str	r2, [r3, #20]
  haudio_out_sai.Init.Protocol = SAI_FREE_PROTOCOL;
 800441c:	4b49      	ldr	r3, [pc, #292]	; (8004544 <SAIx_In_Init+0x15c>)
 800441e:	2200      	movs	r2, #0
 8004420:	631a      	str	r2, [r3, #48]	; 0x30
  haudio_out_sai.Init.DataSize = SAI_DATASIZE_16;
 8004422:	4b48      	ldr	r3, [pc, #288]	; (8004544 <SAIx_In_Init+0x15c>)
 8004424:	2280      	movs	r2, #128	; 0x80
 8004426:	635a      	str	r2, [r3, #52]	; 0x34
  haudio_out_sai.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8004428:	4b46      	ldr	r3, [pc, #280]	; (8004544 <SAIx_In_Init+0x15c>)
 800442a:	2200      	movs	r2, #0
 800442c:	639a      	str	r2, [r3, #56]	; 0x38
  haudio_out_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 800442e:	4b45      	ldr	r3, [pc, #276]	; (8004544 <SAIx_In_Init+0x15c>)
 8004430:	2201      	movs	r2, #1
 8004432:	63da      	str	r2, [r3, #60]	; 0x3c
  haudio_out_sai.Init.Synchro = SAI_ASYNCHRONOUS;
 8004434:	4b43      	ldr	r3, [pc, #268]	; (8004544 <SAIx_In_Init+0x15c>)
 8004436:	2200      	movs	r2, #0
 8004438:	609a      	str	r2, [r3, #8]
  haudio_out_sai.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLED;
 800443a:	4b42      	ldr	r3, [pc, #264]	; (8004544 <SAIx_In_Init+0x15c>)
 800443c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004440:	611a      	str	r2, [r3, #16]
  haudio_out_sai.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8004442:	4b40      	ldr	r3, [pc, #256]	; (8004544 <SAIx_In_Init+0x15c>)
 8004444:	2201      	movs	r2, #1
 8004446:	619a      	str	r2, [r3, #24]
  Frame Length: 64
  Frame active Length: 32
  FS Definition: Start frame + Channel Side identification
  FS Polarity: FS active Low
  FS Offset: FS asserted one bit before the first bit of slot 0 */
  haudio_out_sai.FrameInit.FrameLength = 64;
 8004448:	4b3e      	ldr	r3, [pc, #248]	; (8004544 <SAIx_In_Init+0x15c>)
 800444a:	2240      	movs	r2, #64	; 0x40
 800444c:	641a      	str	r2, [r3, #64]	; 0x40
  haudio_out_sai.FrameInit.ActiveFrameLength = 32;
 800444e:	4b3d      	ldr	r3, [pc, #244]	; (8004544 <SAIx_In_Init+0x15c>)
 8004450:	2220      	movs	r2, #32
 8004452:	645a      	str	r2, [r3, #68]	; 0x44
  haudio_out_sai.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 8004454:	4b3b      	ldr	r3, [pc, #236]	; (8004544 <SAIx_In_Init+0x15c>)
 8004456:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800445a:	649a      	str	r2, [r3, #72]	; 0x48
  haudio_out_sai.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800445c:	4b39      	ldr	r3, [pc, #228]	; (8004544 <SAIx_In_Init+0x15c>)
 800445e:	2200      	movs	r2, #0
 8004460:	64da      	str	r2, [r3, #76]	; 0x4c
  haudio_out_sai.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 8004462:	4b38      	ldr	r3, [pc, #224]	; (8004544 <SAIx_In_Init+0x15c>)
 8004464:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8004468:	651a      	str	r2, [r3, #80]	; 0x50
  /* Configure SAI Block_x Slot
  Slot First Bit Offset: 0
  Slot Size  : 16
  Slot Number: 4
  Slot Active: All slot actives */
  haudio_out_sai.SlotInit.FirstBitOffset = 0;
 800446a:	4b36      	ldr	r3, [pc, #216]	; (8004544 <SAIx_In_Init+0x15c>)
 800446c:	2200      	movs	r2, #0
 800446e:	655a      	str	r2, [r3, #84]	; 0x54
  haudio_out_sai.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8004470:	4b34      	ldr	r3, [pc, #208]	; (8004544 <SAIx_In_Init+0x15c>)
 8004472:	2200      	movs	r2, #0
 8004474:	659a      	str	r2, [r3, #88]	; 0x58
  haudio_out_sai.SlotInit.SlotNumber = 4;
 8004476:	4b33      	ldr	r3, [pc, #204]	; (8004544 <SAIx_In_Init+0x15c>)
 8004478:	2204      	movs	r2, #4
 800447a:	65da      	str	r2, [r3, #92]	; 0x5c
  haudio_out_sai.SlotInit.SlotActive = SlotActive;
 800447c:	4a31      	ldr	r2, [pc, #196]	; (8004544 <SAIx_In_Init+0x15c>)
 800447e:	68bb      	ldr	r3, [r7, #8]
 8004480:	6613      	str	r3, [r2, #96]	; 0x60

  HAL_SAI_Init(&haudio_out_sai);
 8004482:	4830      	ldr	r0, [pc, #192]	; (8004544 <SAIx_In_Init+0x15c>)
 8004484:	f003 f88c 	bl	80075a0 <HAL_SAI_Init>

  /* Initialize SAI2 block B in SLAVE RX synchronous from SAI2 block A */
  /* Initialize the haudio_in_sai Instance parameter */
  haudio_in_sai.Instance = AUDIO_IN_SAIx;
 8004488:	4b30      	ldr	r3, [pc, #192]	; (800454c <SAIx_In_Init+0x164>)
 800448a:	4a31      	ldr	r2, [pc, #196]	; (8004550 <SAIx_In_Init+0x168>)
 800448c:	601a      	str	r2, [r3, #0]
  
  /* Disable SAI peripheral to allow access to SAI internal registers */
  __HAL_SAI_DISABLE(&haudio_in_sai);
 800448e:	4b2f      	ldr	r3, [pc, #188]	; (800454c <SAIx_In_Init+0x164>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	681a      	ldr	r2, [r3, #0]
 8004494:	4b2d      	ldr	r3, [pc, #180]	; (800454c <SAIx_In_Init+0x164>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800449c:	601a      	str	r2, [r3, #0]
  
  /* Configure SAI_Block_x
  LSBFirst: Disabled
  DataSize: 16 */
  haudio_in_sai.Init.AudioFrequency = AudioFreq;
 800449e:	4a2b      	ldr	r2, [pc, #172]	; (800454c <SAIx_In_Init+0x164>)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	61d3      	str	r3, [r2, #28]
  haudio_in_sai.Init.AudioMode = SAI_MODESLAVE_RX;
 80044a4:	4b29      	ldr	r3, [pc, #164]	; (800454c <SAIx_In_Init+0x164>)
 80044a6:	2203      	movs	r2, #3
 80044a8:	605a      	str	r2, [r3, #4]
  haudio_in_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
 80044aa:	4b28      	ldr	r3, [pc, #160]	; (800454c <SAIx_In_Init+0x164>)
 80044ac:	2200      	movs	r2, #0
 80044ae:	615a      	str	r2, [r3, #20]
  haudio_in_sai.Init.Protocol = SAI_FREE_PROTOCOL;
 80044b0:	4b26      	ldr	r3, [pc, #152]	; (800454c <SAIx_In_Init+0x164>)
 80044b2:	2200      	movs	r2, #0
 80044b4:	631a      	str	r2, [r3, #48]	; 0x30
  haudio_in_sai.Init.DataSize = SAI_DATASIZE_16;
 80044b6:	4b25      	ldr	r3, [pc, #148]	; (800454c <SAIx_In_Init+0x164>)
 80044b8:	2280      	movs	r2, #128	; 0x80
 80044ba:	635a      	str	r2, [r3, #52]	; 0x34
  haudio_in_sai.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80044bc:	4b23      	ldr	r3, [pc, #140]	; (800454c <SAIx_In_Init+0x164>)
 80044be:	2200      	movs	r2, #0
 80044c0:	639a      	str	r2, [r3, #56]	; 0x38
  haudio_in_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 80044c2:	4b22      	ldr	r3, [pc, #136]	; (800454c <SAIx_In_Init+0x164>)
 80044c4:	2201      	movs	r2, #1
 80044c6:	63da      	str	r2, [r3, #60]	; 0x3c
  haudio_in_sai.Init.Synchro = SAI_SYNCHRONOUS;
 80044c8:	4b20      	ldr	r3, [pc, #128]	; (800454c <SAIx_In_Init+0x164>)
 80044ca:	2201      	movs	r2, #1
 80044cc:	609a      	str	r2, [r3, #8]
  haudio_in_sai.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLED;
 80044ce:	4b1f      	ldr	r3, [pc, #124]	; (800454c <SAIx_In_Init+0x164>)
 80044d0:	2200      	movs	r2, #0
 80044d2:	611a      	str	r2, [r3, #16]
  haudio_in_sai.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 80044d4:	4b1d      	ldr	r3, [pc, #116]	; (800454c <SAIx_In_Init+0x164>)
 80044d6:	2201      	movs	r2, #1
 80044d8:	619a      	str	r2, [r3, #24]
  Frame Length: 64
  Frame active Length: 32
  FS Definition: Start frame + Channel Side identification
  FS Polarity: FS active Low
  FS Offset: FS asserted one bit before the first bit of slot 0 */
  haudio_in_sai.FrameInit.FrameLength = 64;
 80044da:	4b1c      	ldr	r3, [pc, #112]	; (800454c <SAIx_In_Init+0x164>)
 80044dc:	2240      	movs	r2, #64	; 0x40
 80044de:	641a      	str	r2, [r3, #64]	; 0x40
  haudio_in_sai.FrameInit.ActiveFrameLength = 32;
 80044e0:	4b1a      	ldr	r3, [pc, #104]	; (800454c <SAIx_In_Init+0x164>)
 80044e2:	2220      	movs	r2, #32
 80044e4:	645a      	str	r2, [r3, #68]	; 0x44
  haudio_in_sai.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 80044e6:	4b19      	ldr	r3, [pc, #100]	; (800454c <SAIx_In_Init+0x164>)
 80044e8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80044ec:	649a      	str	r2, [r3, #72]	; 0x48
  haudio_in_sai.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80044ee:	4b17      	ldr	r3, [pc, #92]	; (800454c <SAIx_In_Init+0x164>)
 80044f0:	2200      	movs	r2, #0
 80044f2:	64da      	str	r2, [r3, #76]	; 0x4c
  haudio_in_sai.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 80044f4:	4b15      	ldr	r3, [pc, #84]	; (800454c <SAIx_In_Init+0x164>)
 80044f6:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80044fa:	651a      	str	r2, [r3, #80]	; 0x50
  /* Configure SAI Block_x Slot
  Slot First Bit Offset: 0
  Slot Size  : 16
  Slot Number: 4
  Slot Active: All slot active */
  haudio_in_sai.SlotInit.FirstBitOffset = 0;
 80044fc:	4b13      	ldr	r3, [pc, #76]	; (800454c <SAIx_In_Init+0x164>)
 80044fe:	2200      	movs	r2, #0
 8004500:	655a      	str	r2, [r3, #84]	; 0x54
  haudio_in_sai.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8004502:	4b12      	ldr	r3, [pc, #72]	; (800454c <SAIx_In_Init+0x164>)
 8004504:	2200      	movs	r2, #0
 8004506:	659a      	str	r2, [r3, #88]	; 0x58
  haudio_in_sai.SlotInit.SlotNumber = 4;
 8004508:	4b10      	ldr	r3, [pc, #64]	; (800454c <SAIx_In_Init+0x164>)
 800450a:	2204      	movs	r2, #4
 800450c:	65da      	str	r2, [r3, #92]	; 0x5c
  haudio_in_sai.SlotInit.SlotActive = SlotActive;
 800450e:	4a0f      	ldr	r2, [pc, #60]	; (800454c <SAIx_In_Init+0x164>)
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	6613      	str	r3, [r2, #96]	; 0x60

  HAL_SAI_Init(&haudio_in_sai);
 8004514:	480d      	ldr	r0, [pc, #52]	; (800454c <SAIx_In_Init+0x164>)
 8004516:	f003 f843 	bl	80075a0 <HAL_SAI_Init>

  /* Enable SAI peripheral to generate MCLK */
  __HAL_SAI_ENABLE(&haudio_out_sai);
 800451a:	4b0a      	ldr	r3, [pc, #40]	; (8004544 <SAIx_In_Init+0x15c>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	681a      	ldr	r2, [r3, #0]
 8004520:	4b08      	ldr	r3, [pc, #32]	; (8004544 <SAIx_In_Init+0x15c>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004528:	601a      	str	r2, [r3, #0]

  /* Enable SAI peripheral */
  __HAL_SAI_ENABLE(&haudio_in_sai);
 800452a:	4b08      	ldr	r3, [pc, #32]	; (800454c <SAIx_In_Init+0x164>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	681a      	ldr	r2, [r3, #0]
 8004530:	4b06      	ldr	r3, [pc, #24]	; (800454c <SAIx_In_Init+0x164>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004538:	601a      	str	r2, [r3, #0]
}
 800453a:	bf00      	nop
 800453c:	3710      	adds	r7, #16
 800453e:	46bd      	mov	sp, r7
 8004540:	bd80      	pop	{r7, pc}
 8004542:	bf00      	nop
 8004544:	200071b8 	.word	0x200071b8
 8004548:	40015c04 	.word	0x40015c04
 800454c:	2000723c 	.word	0x2000723c
 8004550:	40015c24 	.word	0x40015c24

08004554 <SAIx_In_DeInit>:
/**
  * @brief  Deinitializes the output Audio Codec audio interface (SAI).
  * @retval None
  */
static void SAIx_In_DeInit(void)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	af00      	add	r7, sp, #0
  /* Initialize the haudio_in_sai Instance parameter */
  haudio_in_sai.Instance = AUDIO_IN_SAIx;
 8004558:	4b07      	ldr	r3, [pc, #28]	; (8004578 <SAIx_In_DeInit+0x24>)
 800455a:	4a08      	ldr	r2, [pc, #32]	; (800457c <SAIx_In_DeInit+0x28>)
 800455c:	601a      	str	r2, [r3, #0]

  /* Disable SAI peripheral */
  __HAL_SAI_DISABLE(&haudio_in_sai);
 800455e:	4b06      	ldr	r3, [pc, #24]	; (8004578 <SAIx_In_DeInit+0x24>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	681a      	ldr	r2, [r3, #0]
 8004564:	4b04      	ldr	r3, [pc, #16]	; (8004578 <SAIx_In_DeInit+0x24>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800456c:	601a      	str	r2, [r3, #0]

  HAL_SAI_DeInit(&haudio_in_sai);
 800456e:	4802      	ldr	r0, [pc, #8]	; (8004578 <SAIx_In_DeInit+0x24>)
 8004570:	f003 f994 	bl	800789c <HAL_SAI_DeInit>
}
 8004574:	bf00      	nop
 8004576:	bd80      	pop	{r7, pc}
 8004578:	2000723c 	.word	0x2000723c
 800457c:	40015c24 	.word	0x40015c24

08004580 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004584:	2003      	movs	r0, #3
 8004586:	f000 f94d 	bl	8004824 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800458a:	2000      	movs	r0, #0
 800458c:	f000 f806 	bl	800459c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004590:	f7fd fe4e 	bl	8002230 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004594:	2300      	movs	r3, #0
}
 8004596:	4618      	mov	r0, r3
 8004598:	bd80      	pop	{r7, pc}
	...

0800459c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b082      	sub	sp, #8
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80045a4:	4b12      	ldr	r3, [pc, #72]	; (80045f0 <HAL_InitTick+0x54>)
 80045a6:	681a      	ldr	r2, [r3, #0]
 80045a8:	4b12      	ldr	r3, [pc, #72]	; (80045f4 <HAL_InitTick+0x58>)
 80045aa:	781b      	ldrb	r3, [r3, #0]
 80045ac:	4619      	mov	r1, r3
 80045ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80045b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80045b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80045ba:	4618      	mov	r0, r3
 80045bc:	f000 f967 	bl	800488e <HAL_SYSTICK_Config>
 80045c0:	4603      	mov	r3, r0
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d001      	beq.n	80045ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80045c6:	2301      	movs	r3, #1
 80045c8:	e00e      	b.n	80045e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2b0f      	cmp	r3, #15
 80045ce:	d80a      	bhi.n	80045e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80045d0:	2200      	movs	r2, #0
 80045d2:	6879      	ldr	r1, [r7, #4]
 80045d4:	f04f 30ff 	mov.w	r0, #4294967295
 80045d8:	f000 f92f 	bl	800483a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80045dc:	4a06      	ldr	r2, [pc, #24]	; (80045f8 <HAL_InitTick+0x5c>)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80045e2:	2300      	movs	r3, #0
 80045e4:	e000      	b.n	80045e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80045e6:	2301      	movs	r3, #1
}
 80045e8:	4618      	mov	r0, r3
 80045ea:	3708      	adds	r7, #8
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bd80      	pop	{r7, pc}
 80045f0:	20000000 	.word	0x20000000
 80045f4:	2000003c 	.word	0x2000003c
 80045f8:	20000038 	.word	0x20000038

080045fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80045fc:	b480      	push	{r7}
 80045fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004600:	4b06      	ldr	r3, [pc, #24]	; (800461c <HAL_IncTick+0x20>)
 8004602:	781b      	ldrb	r3, [r3, #0]
 8004604:	461a      	mov	r2, r3
 8004606:	4b06      	ldr	r3, [pc, #24]	; (8004620 <HAL_IncTick+0x24>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4413      	add	r3, r2
 800460c:	4a04      	ldr	r2, [pc, #16]	; (8004620 <HAL_IncTick+0x24>)
 800460e:	6013      	str	r3, [r2, #0]
}
 8004610:	bf00      	nop
 8004612:	46bd      	mov	sp, r7
 8004614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004618:	4770      	bx	lr
 800461a:	bf00      	nop
 800461c:	2000003c 	.word	0x2000003c
 8004620:	200151e4 	.word	0x200151e4

08004624 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004624:	b480      	push	{r7}
 8004626:	af00      	add	r7, sp, #0
  return uwTick;
 8004628:	4b03      	ldr	r3, [pc, #12]	; (8004638 <HAL_GetTick+0x14>)
 800462a:	681b      	ldr	r3, [r3, #0]
}
 800462c:	4618      	mov	r0, r3
 800462e:	46bd      	mov	sp, r7
 8004630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004634:	4770      	bx	lr
 8004636:	bf00      	nop
 8004638:	200151e4 	.word	0x200151e4

0800463c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b084      	sub	sp, #16
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004644:	f7ff ffee 	bl	8004624 <HAL_GetTick>
 8004648:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004654:	d005      	beq.n	8004662 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004656:	4b0a      	ldr	r3, [pc, #40]	; (8004680 <HAL_Delay+0x44>)
 8004658:	781b      	ldrb	r3, [r3, #0]
 800465a:	461a      	mov	r2, r3
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	4413      	add	r3, r2
 8004660:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004662:	bf00      	nop
 8004664:	f7ff ffde 	bl	8004624 <HAL_GetTick>
 8004668:	4602      	mov	r2, r0
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	1ad3      	subs	r3, r2, r3
 800466e:	68fa      	ldr	r2, [r7, #12]
 8004670:	429a      	cmp	r2, r3
 8004672:	d8f7      	bhi.n	8004664 <HAL_Delay+0x28>
  {
  }
}
 8004674:	bf00      	nop
 8004676:	bf00      	nop
 8004678:	3710      	adds	r7, #16
 800467a:	46bd      	mov	sp, r7
 800467c:	bd80      	pop	{r7, pc}
 800467e:	bf00      	nop
 8004680:	2000003c 	.word	0x2000003c

08004684 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004684:	b480      	push	{r7}
 8004686:	b085      	sub	sp, #20
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	f003 0307 	and.w	r3, r3, #7
 8004692:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004694:	4b0b      	ldr	r3, [pc, #44]	; (80046c4 <__NVIC_SetPriorityGrouping+0x40>)
 8004696:	68db      	ldr	r3, [r3, #12]
 8004698:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800469a:	68ba      	ldr	r2, [r7, #8]
 800469c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80046a0:	4013      	ands	r3, r2
 80046a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80046ac:	4b06      	ldr	r3, [pc, #24]	; (80046c8 <__NVIC_SetPriorityGrouping+0x44>)
 80046ae:	4313      	orrs	r3, r2
 80046b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80046b2:	4a04      	ldr	r2, [pc, #16]	; (80046c4 <__NVIC_SetPriorityGrouping+0x40>)
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	60d3      	str	r3, [r2, #12]
}
 80046b8:	bf00      	nop
 80046ba:	3714      	adds	r7, #20
 80046bc:	46bd      	mov	sp, r7
 80046be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c2:	4770      	bx	lr
 80046c4:	e000ed00 	.word	0xe000ed00
 80046c8:	05fa0000 	.word	0x05fa0000

080046cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80046cc:	b480      	push	{r7}
 80046ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80046d0:	4b04      	ldr	r3, [pc, #16]	; (80046e4 <__NVIC_GetPriorityGrouping+0x18>)
 80046d2:	68db      	ldr	r3, [r3, #12]
 80046d4:	0a1b      	lsrs	r3, r3, #8
 80046d6:	f003 0307 	and.w	r3, r3, #7
}
 80046da:	4618      	mov	r0, r3
 80046dc:	46bd      	mov	sp, r7
 80046de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e2:	4770      	bx	lr
 80046e4:	e000ed00 	.word	0xe000ed00

080046e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80046e8:	b480      	push	{r7}
 80046ea:	b083      	sub	sp, #12
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	4603      	mov	r3, r0
 80046f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80046f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	db0b      	blt.n	8004712 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80046fa:	79fb      	ldrb	r3, [r7, #7]
 80046fc:	f003 021f 	and.w	r2, r3, #31
 8004700:	4907      	ldr	r1, [pc, #28]	; (8004720 <__NVIC_EnableIRQ+0x38>)
 8004702:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004706:	095b      	lsrs	r3, r3, #5
 8004708:	2001      	movs	r0, #1
 800470a:	fa00 f202 	lsl.w	r2, r0, r2
 800470e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004712:	bf00      	nop
 8004714:	370c      	adds	r7, #12
 8004716:	46bd      	mov	sp, r7
 8004718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471c:	4770      	bx	lr
 800471e:	bf00      	nop
 8004720:	e000e100 	.word	0xe000e100

08004724 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004724:	b480      	push	{r7}
 8004726:	b083      	sub	sp, #12
 8004728:	af00      	add	r7, sp, #0
 800472a:	4603      	mov	r3, r0
 800472c:	6039      	str	r1, [r7, #0]
 800472e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004730:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004734:	2b00      	cmp	r3, #0
 8004736:	db0a      	blt.n	800474e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	b2da      	uxtb	r2, r3
 800473c:	490c      	ldr	r1, [pc, #48]	; (8004770 <__NVIC_SetPriority+0x4c>)
 800473e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004742:	0112      	lsls	r2, r2, #4
 8004744:	b2d2      	uxtb	r2, r2
 8004746:	440b      	add	r3, r1
 8004748:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800474c:	e00a      	b.n	8004764 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	b2da      	uxtb	r2, r3
 8004752:	4908      	ldr	r1, [pc, #32]	; (8004774 <__NVIC_SetPriority+0x50>)
 8004754:	79fb      	ldrb	r3, [r7, #7]
 8004756:	f003 030f 	and.w	r3, r3, #15
 800475a:	3b04      	subs	r3, #4
 800475c:	0112      	lsls	r2, r2, #4
 800475e:	b2d2      	uxtb	r2, r2
 8004760:	440b      	add	r3, r1
 8004762:	761a      	strb	r2, [r3, #24]
}
 8004764:	bf00      	nop
 8004766:	370c      	adds	r7, #12
 8004768:	46bd      	mov	sp, r7
 800476a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476e:	4770      	bx	lr
 8004770:	e000e100 	.word	0xe000e100
 8004774:	e000ed00 	.word	0xe000ed00

08004778 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004778:	b480      	push	{r7}
 800477a:	b089      	sub	sp, #36	; 0x24
 800477c:	af00      	add	r7, sp, #0
 800477e:	60f8      	str	r0, [r7, #12]
 8004780:	60b9      	str	r1, [r7, #8]
 8004782:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	f003 0307 	and.w	r3, r3, #7
 800478a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800478c:	69fb      	ldr	r3, [r7, #28]
 800478e:	f1c3 0307 	rsb	r3, r3, #7
 8004792:	2b04      	cmp	r3, #4
 8004794:	bf28      	it	cs
 8004796:	2304      	movcs	r3, #4
 8004798:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800479a:	69fb      	ldr	r3, [r7, #28]
 800479c:	3304      	adds	r3, #4
 800479e:	2b06      	cmp	r3, #6
 80047a0:	d902      	bls.n	80047a8 <NVIC_EncodePriority+0x30>
 80047a2:	69fb      	ldr	r3, [r7, #28]
 80047a4:	3b03      	subs	r3, #3
 80047a6:	e000      	b.n	80047aa <NVIC_EncodePriority+0x32>
 80047a8:	2300      	movs	r3, #0
 80047aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80047ac:	f04f 32ff 	mov.w	r2, #4294967295
 80047b0:	69bb      	ldr	r3, [r7, #24]
 80047b2:	fa02 f303 	lsl.w	r3, r2, r3
 80047b6:	43da      	mvns	r2, r3
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	401a      	ands	r2, r3
 80047bc:	697b      	ldr	r3, [r7, #20]
 80047be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80047c0:	f04f 31ff 	mov.w	r1, #4294967295
 80047c4:	697b      	ldr	r3, [r7, #20]
 80047c6:	fa01 f303 	lsl.w	r3, r1, r3
 80047ca:	43d9      	mvns	r1, r3
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80047d0:	4313      	orrs	r3, r2
         );
}
 80047d2:	4618      	mov	r0, r3
 80047d4:	3724      	adds	r7, #36	; 0x24
 80047d6:	46bd      	mov	sp, r7
 80047d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047dc:	4770      	bx	lr
	...

080047e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b082      	sub	sp, #8
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	3b01      	subs	r3, #1
 80047ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80047f0:	d301      	bcc.n	80047f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80047f2:	2301      	movs	r3, #1
 80047f4:	e00f      	b.n	8004816 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80047f6:	4a0a      	ldr	r2, [pc, #40]	; (8004820 <SysTick_Config+0x40>)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	3b01      	subs	r3, #1
 80047fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80047fe:	210f      	movs	r1, #15
 8004800:	f04f 30ff 	mov.w	r0, #4294967295
 8004804:	f7ff ff8e 	bl	8004724 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004808:	4b05      	ldr	r3, [pc, #20]	; (8004820 <SysTick_Config+0x40>)
 800480a:	2200      	movs	r2, #0
 800480c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800480e:	4b04      	ldr	r3, [pc, #16]	; (8004820 <SysTick_Config+0x40>)
 8004810:	2207      	movs	r2, #7
 8004812:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004814:	2300      	movs	r3, #0
}
 8004816:	4618      	mov	r0, r3
 8004818:	3708      	adds	r7, #8
 800481a:	46bd      	mov	sp, r7
 800481c:	bd80      	pop	{r7, pc}
 800481e:	bf00      	nop
 8004820:	e000e010 	.word	0xe000e010

08004824 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b082      	sub	sp, #8
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800482c:	6878      	ldr	r0, [r7, #4]
 800482e:	f7ff ff29 	bl	8004684 <__NVIC_SetPriorityGrouping>
}
 8004832:	bf00      	nop
 8004834:	3708      	adds	r7, #8
 8004836:	46bd      	mov	sp, r7
 8004838:	bd80      	pop	{r7, pc}

0800483a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800483a:	b580      	push	{r7, lr}
 800483c:	b086      	sub	sp, #24
 800483e:	af00      	add	r7, sp, #0
 8004840:	4603      	mov	r3, r0
 8004842:	60b9      	str	r1, [r7, #8]
 8004844:	607a      	str	r2, [r7, #4]
 8004846:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004848:	2300      	movs	r3, #0
 800484a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800484c:	f7ff ff3e 	bl	80046cc <__NVIC_GetPriorityGrouping>
 8004850:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004852:	687a      	ldr	r2, [r7, #4]
 8004854:	68b9      	ldr	r1, [r7, #8]
 8004856:	6978      	ldr	r0, [r7, #20]
 8004858:	f7ff ff8e 	bl	8004778 <NVIC_EncodePriority>
 800485c:	4602      	mov	r2, r0
 800485e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004862:	4611      	mov	r1, r2
 8004864:	4618      	mov	r0, r3
 8004866:	f7ff ff5d 	bl	8004724 <__NVIC_SetPriority>
}
 800486a:	bf00      	nop
 800486c:	3718      	adds	r7, #24
 800486e:	46bd      	mov	sp, r7
 8004870:	bd80      	pop	{r7, pc}

08004872 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004872:	b580      	push	{r7, lr}
 8004874:	b082      	sub	sp, #8
 8004876:	af00      	add	r7, sp, #0
 8004878:	4603      	mov	r3, r0
 800487a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800487c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004880:	4618      	mov	r0, r3
 8004882:	f7ff ff31 	bl	80046e8 <__NVIC_EnableIRQ>
}
 8004886:	bf00      	nop
 8004888:	3708      	adds	r7, #8
 800488a:	46bd      	mov	sp, r7
 800488c:	bd80      	pop	{r7, pc}

0800488e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800488e:	b580      	push	{r7, lr}
 8004890:	b082      	sub	sp, #8
 8004892:	af00      	add	r7, sp, #0
 8004894:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004896:	6878      	ldr	r0, [r7, #4]
 8004898:	f7ff ffa2 	bl	80047e0 <SysTick_Config>
 800489c:	4603      	mov	r3, r0
}
 800489e:	4618      	mov	r0, r3
 80048a0:	3708      	adds	r7, #8
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bd80      	pop	{r7, pc}
	...

080048a8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b086      	sub	sp, #24
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80048b0:	2300      	movs	r3, #0
 80048b2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80048b4:	f7ff feb6 	bl	8004624 <HAL_GetTick>
 80048b8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d101      	bne.n	80048c4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80048c0:	2301      	movs	r3, #1
 80048c2:	e099      	b.n	80049f8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2202      	movs	r2, #2
 80048c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2200      	movs	r2, #0
 80048d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	681a      	ldr	r2, [r3, #0]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f022 0201 	bic.w	r2, r2, #1
 80048e2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80048e4:	e00f      	b.n	8004906 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80048e6:	f7ff fe9d 	bl	8004624 <HAL_GetTick>
 80048ea:	4602      	mov	r2, r0
 80048ec:	693b      	ldr	r3, [r7, #16]
 80048ee:	1ad3      	subs	r3, r2, r3
 80048f0:	2b05      	cmp	r3, #5
 80048f2:	d908      	bls.n	8004906 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2220      	movs	r2, #32
 80048f8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2203      	movs	r2, #3
 80048fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004902:	2303      	movs	r3, #3
 8004904:	e078      	b.n	80049f8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f003 0301 	and.w	r3, r3, #1
 8004910:	2b00      	cmp	r3, #0
 8004912:	d1e8      	bne.n	80048e6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800491c:	697a      	ldr	r2, [r7, #20]
 800491e:	4b38      	ldr	r3, [pc, #224]	; (8004a00 <HAL_DMA_Init+0x158>)
 8004920:	4013      	ands	r3, r2
 8004922:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	685a      	ldr	r2, [r3, #4]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	689b      	ldr	r3, [r3, #8]
 800492c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004932:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	691b      	ldr	r3, [r3, #16]
 8004938:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800493e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	699b      	ldr	r3, [r3, #24]
 8004944:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800494a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6a1b      	ldr	r3, [r3, #32]
 8004950:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004952:	697a      	ldr	r2, [r7, #20]
 8004954:	4313      	orrs	r3, r2
 8004956:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800495c:	2b04      	cmp	r3, #4
 800495e:	d107      	bne.n	8004970 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004968:	4313      	orrs	r3, r2
 800496a:	697a      	ldr	r2, [r7, #20]
 800496c:	4313      	orrs	r3, r2
 800496e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	697a      	ldr	r2, [r7, #20]
 8004976:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	695b      	ldr	r3, [r3, #20]
 800497e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004980:	697b      	ldr	r3, [r7, #20]
 8004982:	f023 0307 	bic.w	r3, r3, #7
 8004986:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800498c:	697a      	ldr	r2, [r7, #20]
 800498e:	4313      	orrs	r3, r2
 8004990:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004996:	2b04      	cmp	r3, #4
 8004998:	d117      	bne.n	80049ca <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800499e:	697a      	ldr	r2, [r7, #20]
 80049a0:	4313      	orrs	r3, r2
 80049a2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d00e      	beq.n	80049ca <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80049ac:	6878      	ldr	r0, [r7, #4]
 80049ae:	f000 fb45 	bl	800503c <DMA_CheckFifoParam>
 80049b2:	4603      	mov	r3, r0
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d008      	beq.n	80049ca <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2240      	movs	r2, #64	; 0x40
 80049bc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2201      	movs	r2, #1
 80049c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80049c6:	2301      	movs	r3, #1
 80049c8:	e016      	b.n	80049f8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	697a      	ldr	r2, [r7, #20]
 80049d0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80049d2:	6878      	ldr	r0, [r7, #4]
 80049d4:	f000 fafc 	bl	8004fd0 <DMA_CalcBaseAndBitshift>
 80049d8:	4603      	mov	r3, r0
 80049da:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049e0:	223f      	movs	r2, #63	; 0x3f
 80049e2:	409a      	lsls	r2, r3
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2200      	movs	r2, #0
 80049ec:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2201      	movs	r2, #1
 80049f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80049f6:	2300      	movs	r3, #0
}
 80049f8:	4618      	mov	r0, r3
 80049fa:	3718      	adds	r7, #24
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bd80      	pop	{r7, pc}
 8004a00:	f010803f 	.word	0xf010803f

08004a04 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b084      	sub	sp, #16
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d101      	bne.n	8004a16 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8004a12:	2301      	movs	r3, #1
 8004a14:	e050      	b.n	8004ab8 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004a1c:	b2db      	uxtb	r3, r3
 8004a1e:	2b02      	cmp	r3, #2
 8004a20:	d101      	bne.n	8004a26 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8004a22:	2302      	movs	r3, #2
 8004a24:	e048      	b.n	8004ab8 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	681a      	ldr	r2, [r3, #0]
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f022 0201 	bic.w	r2, r2, #1
 8004a34:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	2200      	movs	r2, #0
 8004a44:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	2200      	movs	r2, #0
 8004a54:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	2221      	movs	r2, #33	; 0x21
 8004a64:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004a66:	6878      	ldr	r0, [r7, #4]
 8004a68:	f000 fab2 	bl	8004fd0 <DMA_CalcBaseAndBitshift>
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a74:	223f      	movs	r2, #63	; 0x3f
 8004a76:	409a      	lsls	r2, r3
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2200      	movs	r2, #0
 8004a86:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2200      	movs	r2, #0
 8004a92:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2200      	movs	r2, #0
 8004a98:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004ab6:	2300      	movs	r3, #0
}
 8004ab8:	4618      	mov	r0, r3
 8004aba:	3710      	adds	r7, #16
 8004abc:	46bd      	mov	sp, r7
 8004abe:	bd80      	pop	{r7, pc}

08004ac0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b086      	sub	sp, #24
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	60f8      	str	r0, [r7, #12]
 8004ac8:	60b9      	str	r1, [r7, #8]
 8004aca:	607a      	str	r2, [r7, #4]
 8004acc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004ace:	2300      	movs	r3, #0
 8004ad0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ad6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004ade:	2b01      	cmp	r3, #1
 8004ae0:	d101      	bne.n	8004ae6 <HAL_DMA_Start_IT+0x26>
 8004ae2:	2302      	movs	r3, #2
 8004ae4:	e048      	b.n	8004b78 <HAL_DMA_Start_IT+0xb8>
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	2201      	movs	r2, #1
 8004aea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004af4:	b2db      	uxtb	r3, r3
 8004af6:	2b01      	cmp	r3, #1
 8004af8:	d137      	bne.n	8004b6a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	2202      	movs	r2, #2
 8004afe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	2200      	movs	r2, #0
 8004b06:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	687a      	ldr	r2, [r7, #4]
 8004b0c:	68b9      	ldr	r1, [r7, #8]
 8004b0e:	68f8      	ldr	r0, [r7, #12]
 8004b10:	f000 fa30 	bl	8004f74 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b18:	223f      	movs	r2, #63	; 0x3f
 8004b1a:	409a      	lsls	r2, r3
 8004b1c:	693b      	ldr	r3, [r7, #16]
 8004b1e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	681a      	ldr	r2, [r3, #0]
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f042 0216 	orr.w	r2, r2, #22
 8004b2e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	695a      	ldr	r2, [r3, #20]
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004b3e:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d007      	beq.n	8004b58 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	681a      	ldr	r2, [r3, #0]
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f042 0208 	orr.w	r2, r2, #8
 8004b56:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	681a      	ldr	r2, [r3, #0]
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f042 0201 	orr.w	r2, r2, #1
 8004b66:	601a      	str	r2, [r3, #0]
 8004b68:	e005      	b.n	8004b76 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004b72:	2302      	movs	r3, #2
 8004b74:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004b76:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	3718      	adds	r7, #24
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bd80      	pop	{r7, pc}

08004b80 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b084      	sub	sp, #16
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b8c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004b8e:	f7ff fd49 	bl	8004624 <HAL_GetTick>
 8004b92:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004b9a:	b2db      	uxtb	r3, r3
 8004b9c:	2b02      	cmp	r3, #2
 8004b9e:	d008      	beq.n	8004bb2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2280      	movs	r2, #128	; 0x80
 8004ba4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004bae:	2301      	movs	r3, #1
 8004bb0:	e052      	b.n	8004c58 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	681a      	ldr	r2, [r3, #0]
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f022 0216 	bic.w	r2, r2, #22
 8004bc0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	695a      	ldr	r2, [r3, #20]
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004bd0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d103      	bne.n	8004be2 <HAL_DMA_Abort+0x62>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d007      	beq.n	8004bf2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	681a      	ldr	r2, [r3, #0]
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f022 0208 	bic.w	r2, r2, #8
 8004bf0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	681a      	ldr	r2, [r3, #0]
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f022 0201 	bic.w	r2, r2, #1
 8004c00:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004c02:	e013      	b.n	8004c2c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004c04:	f7ff fd0e 	bl	8004624 <HAL_GetTick>
 8004c08:	4602      	mov	r2, r0
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	1ad3      	subs	r3, r2, r3
 8004c0e:	2b05      	cmp	r3, #5
 8004c10:	d90c      	bls.n	8004c2c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2220      	movs	r2, #32
 8004c16:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2203      	movs	r2, #3
 8004c1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2200      	movs	r2, #0
 8004c24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8004c28:	2303      	movs	r3, #3
 8004c2a:	e015      	b.n	8004c58 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f003 0301 	and.w	r3, r3, #1
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d1e4      	bne.n	8004c04 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c3e:	223f      	movs	r2, #63	; 0x3f
 8004c40:	409a      	lsls	r2, r3
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2201      	movs	r2, #1
 8004c4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2200      	movs	r2, #0
 8004c52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8004c56:	2300      	movs	r3, #0
}
 8004c58:	4618      	mov	r0, r3
 8004c5a:	3710      	adds	r7, #16
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bd80      	pop	{r7, pc}

08004c60 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b086      	sub	sp, #24
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8004c68:	2300      	movs	r3, #0
 8004c6a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8004c6c:	4b92      	ldr	r3, [pc, #584]	; (8004eb8 <HAL_DMA_IRQHandler+0x258>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a92      	ldr	r2, [pc, #584]	; (8004ebc <HAL_DMA_IRQHandler+0x25c>)
 8004c72:	fba2 2303 	umull	r2, r3, r2, r3
 8004c76:	0a9b      	lsrs	r3, r3, #10
 8004c78:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c7e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004c80:	693b      	ldr	r3, [r7, #16]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c8a:	2208      	movs	r2, #8
 8004c8c:	409a      	lsls	r2, r3
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	4013      	ands	r3, r2
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d01a      	beq.n	8004ccc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f003 0304 	and.w	r3, r3, #4
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d013      	beq.n	8004ccc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	681a      	ldr	r2, [r3, #0]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f022 0204 	bic.w	r2, r2, #4
 8004cb2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cb8:	2208      	movs	r2, #8
 8004cba:	409a      	lsls	r2, r3
 8004cbc:	693b      	ldr	r3, [r7, #16]
 8004cbe:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cc4:	f043 0201 	orr.w	r2, r3, #1
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cd0:	2201      	movs	r2, #1
 8004cd2:	409a      	lsls	r2, r3
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	4013      	ands	r3, r2
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d012      	beq.n	8004d02 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	695b      	ldr	r3, [r3, #20]
 8004ce2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d00b      	beq.n	8004d02 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cee:	2201      	movs	r2, #1
 8004cf0:	409a      	lsls	r2, r3
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cfa:	f043 0202 	orr.w	r2, r3, #2
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d06:	2204      	movs	r2, #4
 8004d08:	409a      	lsls	r2, r3
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	4013      	ands	r3, r2
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d012      	beq.n	8004d38 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f003 0302 	and.w	r3, r3, #2
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d00b      	beq.n	8004d38 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d24:	2204      	movs	r2, #4
 8004d26:	409a      	lsls	r2, r3
 8004d28:	693b      	ldr	r3, [r7, #16]
 8004d2a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d30:	f043 0204 	orr.w	r2, r3, #4
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d3c:	2210      	movs	r2, #16
 8004d3e:	409a      	lsls	r2, r3
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	4013      	ands	r3, r2
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d043      	beq.n	8004dd0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f003 0308 	and.w	r3, r3, #8
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d03c      	beq.n	8004dd0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d5a:	2210      	movs	r2, #16
 8004d5c:	409a      	lsls	r2, r3
 8004d5e:	693b      	ldr	r3, [r7, #16]
 8004d60:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d018      	beq.n	8004da2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d108      	bne.n	8004d90 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d024      	beq.n	8004dd0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d8a:	6878      	ldr	r0, [r7, #4]
 8004d8c:	4798      	blx	r3
 8004d8e:	e01f      	b.n	8004dd0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d01b      	beq.n	8004dd0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d9c:	6878      	ldr	r0, [r7, #4]
 8004d9e:	4798      	blx	r3
 8004da0:	e016      	b.n	8004dd0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d107      	bne.n	8004dc0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	681a      	ldr	r2, [r3, #0]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f022 0208 	bic.w	r2, r2, #8
 8004dbe:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d003      	beq.n	8004dd0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dcc:	6878      	ldr	r0, [r7, #4]
 8004dce:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dd4:	2220      	movs	r2, #32
 8004dd6:	409a      	lsls	r2, r3
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	4013      	ands	r3, r2
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	f000 808e 	beq.w	8004efe <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f003 0310 	and.w	r3, r3, #16
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	f000 8086 	beq.w	8004efe <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004df6:	2220      	movs	r2, #32
 8004df8:	409a      	lsls	r2, r3
 8004dfa:	693b      	ldr	r3, [r7, #16]
 8004dfc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004e04:	b2db      	uxtb	r3, r3
 8004e06:	2b05      	cmp	r3, #5
 8004e08:	d136      	bne.n	8004e78 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	681a      	ldr	r2, [r3, #0]
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f022 0216 	bic.w	r2, r2, #22
 8004e18:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	695a      	ldr	r2, [r3, #20]
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004e28:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d103      	bne.n	8004e3a <HAL_DMA_IRQHandler+0x1da>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d007      	beq.n	8004e4a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	681a      	ldr	r2, [r3, #0]
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f022 0208 	bic.w	r2, r2, #8
 8004e48:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e4e:	223f      	movs	r2, #63	; 0x3f
 8004e50:	409a      	lsls	r2, r3
 8004e52:	693b      	ldr	r3, [r7, #16]
 8004e54:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2201      	movs	r2, #1
 8004e5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2200      	movs	r2, #0
 8004e62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d07d      	beq.n	8004f6a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e72:	6878      	ldr	r0, [r7, #4]
 8004e74:	4798      	blx	r3
        }
        return;
 8004e76:	e078      	b.n	8004f6a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d01c      	beq.n	8004ec0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d108      	bne.n	8004ea6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d030      	beq.n	8004efe <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ea0:	6878      	ldr	r0, [r7, #4]
 8004ea2:	4798      	blx	r3
 8004ea4:	e02b      	b.n	8004efe <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d027      	beq.n	8004efe <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004eb2:	6878      	ldr	r0, [r7, #4]
 8004eb4:	4798      	blx	r3
 8004eb6:	e022      	b.n	8004efe <HAL_DMA_IRQHandler+0x29e>
 8004eb8:	20000000 	.word	0x20000000
 8004ebc:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d10f      	bne.n	8004eee <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	681a      	ldr	r2, [r3, #0]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f022 0210 	bic.w	r2, r2, #16
 8004edc:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2201      	movs	r2, #1
 8004ee2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d003      	beq.n	8004efe <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004efa:	6878      	ldr	r0, [r7, #4]
 8004efc:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d032      	beq.n	8004f6c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f0a:	f003 0301 	and.w	r3, r3, #1
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d022      	beq.n	8004f58 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2205      	movs	r2, #5
 8004f16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	681a      	ldr	r2, [r3, #0]
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f022 0201 	bic.w	r2, r2, #1
 8004f28:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	3301      	adds	r3, #1
 8004f2e:	60bb      	str	r3, [r7, #8]
 8004f30:	697a      	ldr	r2, [r7, #20]
 8004f32:	429a      	cmp	r2, r3
 8004f34:	d307      	bcc.n	8004f46 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f003 0301 	and.w	r3, r3, #1
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d1f2      	bne.n	8004f2a <HAL_DMA_IRQHandler+0x2ca>
 8004f44:	e000      	b.n	8004f48 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8004f46:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2200      	movs	r2, #0
 8004f54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d005      	beq.n	8004f6c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f64:	6878      	ldr	r0, [r7, #4]
 8004f66:	4798      	blx	r3
 8004f68:	e000      	b.n	8004f6c <HAL_DMA_IRQHandler+0x30c>
        return;
 8004f6a:	bf00      	nop
    }
  }
}
 8004f6c:	3718      	adds	r7, #24
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bd80      	pop	{r7, pc}
 8004f72:	bf00      	nop

08004f74 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004f74:	b480      	push	{r7}
 8004f76:	b085      	sub	sp, #20
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	60f8      	str	r0, [r7, #12]
 8004f7c:	60b9      	str	r1, [r7, #8]
 8004f7e:	607a      	str	r2, [r7, #4]
 8004f80:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	681a      	ldr	r2, [r3, #0]
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004f90:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	683a      	ldr	r2, [r7, #0]
 8004f98:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	689b      	ldr	r3, [r3, #8]
 8004f9e:	2b40      	cmp	r3, #64	; 0x40
 8004fa0:	d108      	bne.n	8004fb4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	687a      	ldr	r2, [r7, #4]
 8004fa8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	68ba      	ldr	r2, [r7, #8]
 8004fb0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004fb2:	e007      	b.n	8004fc4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	68ba      	ldr	r2, [r7, #8]
 8004fba:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	687a      	ldr	r2, [r7, #4]
 8004fc2:	60da      	str	r2, [r3, #12]
}
 8004fc4:	bf00      	nop
 8004fc6:	3714      	adds	r7, #20
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fce:	4770      	bx	lr

08004fd0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	b085      	sub	sp, #20
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	b2db      	uxtb	r3, r3
 8004fde:	3b10      	subs	r3, #16
 8004fe0:	4a13      	ldr	r2, [pc, #76]	; (8005030 <DMA_CalcBaseAndBitshift+0x60>)
 8004fe2:	fba2 2303 	umull	r2, r3, r2, r3
 8004fe6:	091b      	lsrs	r3, r3, #4
 8004fe8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004fea:	4a12      	ldr	r2, [pc, #72]	; (8005034 <DMA_CalcBaseAndBitshift+0x64>)
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	4413      	add	r3, r2
 8004ff0:	781b      	ldrb	r3, [r3, #0]
 8004ff2:	461a      	mov	r2, r3
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	2b03      	cmp	r3, #3
 8004ffc:	d908      	bls.n	8005010 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	461a      	mov	r2, r3
 8005004:	4b0c      	ldr	r3, [pc, #48]	; (8005038 <DMA_CalcBaseAndBitshift+0x68>)
 8005006:	4013      	ands	r3, r2
 8005008:	1d1a      	adds	r2, r3, #4
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	659a      	str	r2, [r3, #88]	; 0x58
 800500e:	e006      	b.n	800501e <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	461a      	mov	r2, r3
 8005016:	4b08      	ldr	r3, [pc, #32]	; (8005038 <DMA_CalcBaseAndBitshift+0x68>)
 8005018:	4013      	ands	r3, r2
 800501a:	687a      	ldr	r2, [r7, #4]
 800501c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005022:	4618      	mov	r0, r3
 8005024:	3714      	adds	r7, #20
 8005026:	46bd      	mov	sp, r7
 8005028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502c:	4770      	bx	lr
 800502e:	bf00      	nop
 8005030:	aaaaaaab 	.word	0xaaaaaaab
 8005034:	0804c930 	.word	0x0804c930
 8005038:	fffffc00 	.word	0xfffffc00

0800503c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800503c:	b480      	push	{r7}
 800503e:	b085      	sub	sp, #20
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005044:	2300      	movs	r3, #0
 8005046:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800504c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	699b      	ldr	r3, [r3, #24]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d11f      	bne.n	8005096 <DMA_CheckFifoParam+0x5a>
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	2b03      	cmp	r3, #3
 800505a:	d856      	bhi.n	800510a <DMA_CheckFifoParam+0xce>
 800505c:	a201      	add	r2, pc, #4	; (adr r2, 8005064 <DMA_CheckFifoParam+0x28>)
 800505e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005062:	bf00      	nop
 8005064:	08005075 	.word	0x08005075
 8005068:	08005087 	.word	0x08005087
 800506c:	08005075 	.word	0x08005075
 8005070:	0800510b 	.word	0x0800510b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005078:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800507c:	2b00      	cmp	r3, #0
 800507e:	d046      	beq.n	800510e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005080:	2301      	movs	r3, #1
 8005082:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005084:	e043      	b.n	800510e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800508a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800508e:	d140      	bne.n	8005112 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005090:	2301      	movs	r3, #1
 8005092:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005094:	e03d      	b.n	8005112 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	699b      	ldr	r3, [r3, #24]
 800509a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800509e:	d121      	bne.n	80050e4 <DMA_CheckFifoParam+0xa8>
 80050a0:	68bb      	ldr	r3, [r7, #8]
 80050a2:	2b03      	cmp	r3, #3
 80050a4:	d837      	bhi.n	8005116 <DMA_CheckFifoParam+0xda>
 80050a6:	a201      	add	r2, pc, #4	; (adr r2, 80050ac <DMA_CheckFifoParam+0x70>)
 80050a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050ac:	080050bd 	.word	0x080050bd
 80050b0:	080050c3 	.word	0x080050c3
 80050b4:	080050bd 	.word	0x080050bd
 80050b8:	080050d5 	.word	0x080050d5
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80050bc:	2301      	movs	r3, #1
 80050be:	73fb      	strb	r3, [r7, #15]
      break;
 80050c0:	e030      	b.n	8005124 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050c6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d025      	beq.n	800511a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80050ce:	2301      	movs	r3, #1
 80050d0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80050d2:	e022      	b.n	800511a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050d8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80050dc:	d11f      	bne.n	800511e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80050de:	2301      	movs	r3, #1
 80050e0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80050e2:	e01c      	b.n	800511e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	2b02      	cmp	r3, #2
 80050e8:	d903      	bls.n	80050f2 <DMA_CheckFifoParam+0xb6>
 80050ea:	68bb      	ldr	r3, [r7, #8]
 80050ec:	2b03      	cmp	r3, #3
 80050ee:	d003      	beq.n	80050f8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80050f0:	e018      	b.n	8005124 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80050f2:	2301      	movs	r3, #1
 80050f4:	73fb      	strb	r3, [r7, #15]
      break;
 80050f6:	e015      	b.n	8005124 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005100:	2b00      	cmp	r3, #0
 8005102:	d00e      	beq.n	8005122 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005104:	2301      	movs	r3, #1
 8005106:	73fb      	strb	r3, [r7, #15]
      break;
 8005108:	e00b      	b.n	8005122 <DMA_CheckFifoParam+0xe6>
      break;
 800510a:	bf00      	nop
 800510c:	e00a      	b.n	8005124 <DMA_CheckFifoParam+0xe8>
      break;
 800510e:	bf00      	nop
 8005110:	e008      	b.n	8005124 <DMA_CheckFifoParam+0xe8>
      break;
 8005112:	bf00      	nop
 8005114:	e006      	b.n	8005124 <DMA_CheckFifoParam+0xe8>
      break;
 8005116:	bf00      	nop
 8005118:	e004      	b.n	8005124 <DMA_CheckFifoParam+0xe8>
      break;
 800511a:	bf00      	nop
 800511c:	e002      	b.n	8005124 <DMA_CheckFifoParam+0xe8>
      break;   
 800511e:	bf00      	nop
 8005120:	e000      	b.n	8005124 <DMA_CheckFifoParam+0xe8>
      break;
 8005122:	bf00      	nop
    }
  } 
  
  return status; 
 8005124:	7bfb      	ldrb	r3, [r7, #15]
}
 8005126:	4618      	mov	r0, r3
 8005128:	3714      	adds	r7, #20
 800512a:	46bd      	mov	sp, r7
 800512c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005130:	4770      	bx	lr
 8005132:	bf00      	nop

08005134 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005134:	b480      	push	{r7}
 8005136:	b089      	sub	sp, #36	; 0x24
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
 800513c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800513e:	2300      	movs	r3, #0
 8005140:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8005142:	2300      	movs	r3, #0
 8005144:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8005146:	2300      	movs	r3, #0
 8005148:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800514a:	2300      	movs	r3, #0
 800514c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800514e:	2300      	movs	r3, #0
 8005150:	61fb      	str	r3, [r7, #28]
 8005152:	e175      	b.n	8005440 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8005154:	2201      	movs	r2, #1
 8005156:	69fb      	ldr	r3, [r7, #28]
 8005158:	fa02 f303 	lsl.w	r3, r2, r3
 800515c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	697a      	ldr	r2, [r7, #20]
 8005164:	4013      	ands	r3, r2
 8005166:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005168:	693a      	ldr	r2, [r7, #16]
 800516a:	697b      	ldr	r3, [r7, #20]
 800516c:	429a      	cmp	r2, r3
 800516e:	f040 8164 	bne.w	800543a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	685b      	ldr	r3, [r3, #4]
 8005176:	f003 0303 	and.w	r3, r3, #3
 800517a:	2b01      	cmp	r3, #1
 800517c:	d005      	beq.n	800518a <HAL_GPIO_Init+0x56>
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	685b      	ldr	r3, [r3, #4]
 8005182:	f003 0303 	and.w	r3, r3, #3
 8005186:	2b02      	cmp	r3, #2
 8005188:	d130      	bne.n	80051ec <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	689b      	ldr	r3, [r3, #8]
 800518e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005190:	69fb      	ldr	r3, [r7, #28]
 8005192:	005b      	lsls	r3, r3, #1
 8005194:	2203      	movs	r2, #3
 8005196:	fa02 f303 	lsl.w	r3, r2, r3
 800519a:	43db      	mvns	r3, r3
 800519c:	69ba      	ldr	r2, [r7, #24]
 800519e:	4013      	ands	r3, r2
 80051a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	68da      	ldr	r2, [r3, #12]
 80051a6:	69fb      	ldr	r3, [r7, #28]
 80051a8:	005b      	lsls	r3, r3, #1
 80051aa:	fa02 f303 	lsl.w	r3, r2, r3
 80051ae:	69ba      	ldr	r2, [r7, #24]
 80051b0:	4313      	orrs	r3, r2
 80051b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	69ba      	ldr	r2, [r7, #24]
 80051b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	685b      	ldr	r3, [r3, #4]
 80051be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80051c0:	2201      	movs	r2, #1
 80051c2:	69fb      	ldr	r3, [r7, #28]
 80051c4:	fa02 f303 	lsl.w	r3, r2, r3
 80051c8:	43db      	mvns	r3, r3
 80051ca:	69ba      	ldr	r2, [r7, #24]
 80051cc:	4013      	ands	r3, r2
 80051ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	685b      	ldr	r3, [r3, #4]
 80051d4:	091b      	lsrs	r3, r3, #4
 80051d6:	f003 0201 	and.w	r2, r3, #1
 80051da:	69fb      	ldr	r3, [r7, #28]
 80051dc:	fa02 f303 	lsl.w	r3, r2, r3
 80051e0:	69ba      	ldr	r2, [r7, #24]
 80051e2:	4313      	orrs	r3, r2
 80051e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	69ba      	ldr	r2, [r7, #24]
 80051ea:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	f003 0303 	and.w	r3, r3, #3
 80051f4:	2b03      	cmp	r3, #3
 80051f6:	d017      	beq.n	8005228 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	68db      	ldr	r3, [r3, #12]
 80051fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80051fe:	69fb      	ldr	r3, [r7, #28]
 8005200:	005b      	lsls	r3, r3, #1
 8005202:	2203      	movs	r2, #3
 8005204:	fa02 f303 	lsl.w	r3, r2, r3
 8005208:	43db      	mvns	r3, r3
 800520a:	69ba      	ldr	r2, [r7, #24]
 800520c:	4013      	ands	r3, r2
 800520e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	689a      	ldr	r2, [r3, #8]
 8005214:	69fb      	ldr	r3, [r7, #28]
 8005216:	005b      	lsls	r3, r3, #1
 8005218:	fa02 f303 	lsl.w	r3, r2, r3
 800521c:	69ba      	ldr	r2, [r7, #24]
 800521e:	4313      	orrs	r3, r2
 8005220:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	69ba      	ldr	r2, [r7, #24]
 8005226:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	f003 0303 	and.w	r3, r3, #3
 8005230:	2b02      	cmp	r3, #2
 8005232:	d123      	bne.n	800527c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8005234:	69fb      	ldr	r3, [r7, #28]
 8005236:	08da      	lsrs	r2, r3, #3
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	3208      	adds	r2, #8
 800523c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005240:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005242:	69fb      	ldr	r3, [r7, #28]
 8005244:	f003 0307 	and.w	r3, r3, #7
 8005248:	009b      	lsls	r3, r3, #2
 800524a:	220f      	movs	r2, #15
 800524c:	fa02 f303 	lsl.w	r3, r2, r3
 8005250:	43db      	mvns	r3, r3
 8005252:	69ba      	ldr	r2, [r7, #24]
 8005254:	4013      	ands	r3, r2
 8005256:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	691a      	ldr	r2, [r3, #16]
 800525c:	69fb      	ldr	r3, [r7, #28]
 800525e:	f003 0307 	and.w	r3, r3, #7
 8005262:	009b      	lsls	r3, r3, #2
 8005264:	fa02 f303 	lsl.w	r3, r2, r3
 8005268:	69ba      	ldr	r2, [r7, #24]
 800526a:	4313      	orrs	r3, r2
 800526c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800526e:	69fb      	ldr	r3, [r7, #28]
 8005270:	08da      	lsrs	r2, r3, #3
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	3208      	adds	r2, #8
 8005276:	69b9      	ldr	r1, [r7, #24]
 8005278:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005282:	69fb      	ldr	r3, [r7, #28]
 8005284:	005b      	lsls	r3, r3, #1
 8005286:	2203      	movs	r2, #3
 8005288:	fa02 f303 	lsl.w	r3, r2, r3
 800528c:	43db      	mvns	r3, r3
 800528e:	69ba      	ldr	r2, [r7, #24]
 8005290:	4013      	ands	r3, r2
 8005292:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	685b      	ldr	r3, [r3, #4]
 8005298:	f003 0203 	and.w	r2, r3, #3
 800529c:	69fb      	ldr	r3, [r7, #28]
 800529e:	005b      	lsls	r3, r3, #1
 80052a0:	fa02 f303 	lsl.w	r3, r2, r3
 80052a4:	69ba      	ldr	r2, [r7, #24]
 80052a6:	4313      	orrs	r3, r2
 80052a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	69ba      	ldr	r2, [r7, #24]
 80052ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	f000 80be 	beq.w	800543a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80052be:	4b66      	ldr	r3, [pc, #408]	; (8005458 <HAL_GPIO_Init+0x324>)
 80052c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052c2:	4a65      	ldr	r2, [pc, #404]	; (8005458 <HAL_GPIO_Init+0x324>)
 80052c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80052c8:	6453      	str	r3, [r2, #68]	; 0x44
 80052ca:	4b63      	ldr	r3, [pc, #396]	; (8005458 <HAL_GPIO_Init+0x324>)
 80052cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80052d2:	60fb      	str	r3, [r7, #12]
 80052d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80052d6:	4a61      	ldr	r2, [pc, #388]	; (800545c <HAL_GPIO_Init+0x328>)
 80052d8:	69fb      	ldr	r3, [r7, #28]
 80052da:	089b      	lsrs	r3, r3, #2
 80052dc:	3302      	adds	r3, #2
 80052de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80052e4:	69fb      	ldr	r3, [r7, #28]
 80052e6:	f003 0303 	and.w	r3, r3, #3
 80052ea:	009b      	lsls	r3, r3, #2
 80052ec:	220f      	movs	r2, #15
 80052ee:	fa02 f303 	lsl.w	r3, r2, r3
 80052f2:	43db      	mvns	r3, r3
 80052f4:	69ba      	ldr	r2, [r7, #24]
 80052f6:	4013      	ands	r3, r2
 80052f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	4a58      	ldr	r2, [pc, #352]	; (8005460 <HAL_GPIO_Init+0x32c>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d037      	beq.n	8005372 <HAL_GPIO_Init+0x23e>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	4a57      	ldr	r2, [pc, #348]	; (8005464 <HAL_GPIO_Init+0x330>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d031      	beq.n	800536e <HAL_GPIO_Init+0x23a>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	4a56      	ldr	r2, [pc, #344]	; (8005468 <HAL_GPIO_Init+0x334>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d02b      	beq.n	800536a <HAL_GPIO_Init+0x236>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	4a55      	ldr	r2, [pc, #340]	; (800546c <HAL_GPIO_Init+0x338>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d025      	beq.n	8005366 <HAL_GPIO_Init+0x232>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	4a54      	ldr	r2, [pc, #336]	; (8005470 <HAL_GPIO_Init+0x33c>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d01f      	beq.n	8005362 <HAL_GPIO_Init+0x22e>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	4a53      	ldr	r2, [pc, #332]	; (8005474 <HAL_GPIO_Init+0x340>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d019      	beq.n	800535e <HAL_GPIO_Init+0x22a>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	4a52      	ldr	r2, [pc, #328]	; (8005478 <HAL_GPIO_Init+0x344>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d013      	beq.n	800535a <HAL_GPIO_Init+0x226>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	4a51      	ldr	r2, [pc, #324]	; (800547c <HAL_GPIO_Init+0x348>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d00d      	beq.n	8005356 <HAL_GPIO_Init+0x222>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	4a50      	ldr	r2, [pc, #320]	; (8005480 <HAL_GPIO_Init+0x34c>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d007      	beq.n	8005352 <HAL_GPIO_Init+0x21e>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	4a4f      	ldr	r2, [pc, #316]	; (8005484 <HAL_GPIO_Init+0x350>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d101      	bne.n	800534e <HAL_GPIO_Init+0x21a>
 800534a:	2309      	movs	r3, #9
 800534c:	e012      	b.n	8005374 <HAL_GPIO_Init+0x240>
 800534e:	230a      	movs	r3, #10
 8005350:	e010      	b.n	8005374 <HAL_GPIO_Init+0x240>
 8005352:	2308      	movs	r3, #8
 8005354:	e00e      	b.n	8005374 <HAL_GPIO_Init+0x240>
 8005356:	2307      	movs	r3, #7
 8005358:	e00c      	b.n	8005374 <HAL_GPIO_Init+0x240>
 800535a:	2306      	movs	r3, #6
 800535c:	e00a      	b.n	8005374 <HAL_GPIO_Init+0x240>
 800535e:	2305      	movs	r3, #5
 8005360:	e008      	b.n	8005374 <HAL_GPIO_Init+0x240>
 8005362:	2304      	movs	r3, #4
 8005364:	e006      	b.n	8005374 <HAL_GPIO_Init+0x240>
 8005366:	2303      	movs	r3, #3
 8005368:	e004      	b.n	8005374 <HAL_GPIO_Init+0x240>
 800536a:	2302      	movs	r3, #2
 800536c:	e002      	b.n	8005374 <HAL_GPIO_Init+0x240>
 800536e:	2301      	movs	r3, #1
 8005370:	e000      	b.n	8005374 <HAL_GPIO_Init+0x240>
 8005372:	2300      	movs	r3, #0
 8005374:	69fa      	ldr	r2, [r7, #28]
 8005376:	f002 0203 	and.w	r2, r2, #3
 800537a:	0092      	lsls	r2, r2, #2
 800537c:	4093      	lsls	r3, r2
 800537e:	69ba      	ldr	r2, [r7, #24]
 8005380:	4313      	orrs	r3, r2
 8005382:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8005384:	4935      	ldr	r1, [pc, #212]	; (800545c <HAL_GPIO_Init+0x328>)
 8005386:	69fb      	ldr	r3, [r7, #28]
 8005388:	089b      	lsrs	r3, r3, #2
 800538a:	3302      	adds	r3, #2
 800538c:	69ba      	ldr	r2, [r7, #24]
 800538e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005392:	4b3d      	ldr	r3, [pc, #244]	; (8005488 <HAL_GPIO_Init+0x354>)
 8005394:	689b      	ldr	r3, [r3, #8]
 8005396:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005398:	693b      	ldr	r3, [r7, #16]
 800539a:	43db      	mvns	r3, r3
 800539c:	69ba      	ldr	r2, [r7, #24]
 800539e:	4013      	ands	r3, r2
 80053a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	685b      	ldr	r3, [r3, #4]
 80053a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d003      	beq.n	80053b6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80053ae:	69ba      	ldr	r2, [r7, #24]
 80053b0:	693b      	ldr	r3, [r7, #16]
 80053b2:	4313      	orrs	r3, r2
 80053b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80053b6:	4a34      	ldr	r2, [pc, #208]	; (8005488 <HAL_GPIO_Init+0x354>)
 80053b8:	69bb      	ldr	r3, [r7, #24]
 80053ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80053bc:	4b32      	ldr	r3, [pc, #200]	; (8005488 <HAL_GPIO_Init+0x354>)
 80053be:	68db      	ldr	r3, [r3, #12]
 80053c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80053c2:	693b      	ldr	r3, [r7, #16]
 80053c4:	43db      	mvns	r3, r3
 80053c6:	69ba      	ldr	r2, [r7, #24]
 80053c8:	4013      	ands	r3, r2
 80053ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d003      	beq.n	80053e0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80053d8:	69ba      	ldr	r2, [r7, #24]
 80053da:	693b      	ldr	r3, [r7, #16]
 80053dc:	4313      	orrs	r3, r2
 80053de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80053e0:	4a29      	ldr	r2, [pc, #164]	; (8005488 <HAL_GPIO_Init+0x354>)
 80053e2:	69bb      	ldr	r3, [r7, #24]
 80053e4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80053e6:	4b28      	ldr	r3, [pc, #160]	; (8005488 <HAL_GPIO_Init+0x354>)
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80053ec:	693b      	ldr	r3, [r7, #16]
 80053ee:	43db      	mvns	r3, r3
 80053f0:	69ba      	ldr	r2, [r7, #24]
 80053f2:	4013      	ands	r3, r2
 80053f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	685b      	ldr	r3, [r3, #4]
 80053fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d003      	beq.n	800540a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005402:	69ba      	ldr	r2, [r7, #24]
 8005404:	693b      	ldr	r3, [r7, #16]
 8005406:	4313      	orrs	r3, r2
 8005408:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800540a:	4a1f      	ldr	r2, [pc, #124]	; (8005488 <HAL_GPIO_Init+0x354>)
 800540c:	69bb      	ldr	r3, [r7, #24]
 800540e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005410:	4b1d      	ldr	r3, [pc, #116]	; (8005488 <HAL_GPIO_Init+0x354>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005416:	693b      	ldr	r3, [r7, #16]
 8005418:	43db      	mvns	r3, r3
 800541a:	69ba      	ldr	r2, [r7, #24]
 800541c:	4013      	ands	r3, r2
 800541e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	685b      	ldr	r3, [r3, #4]
 8005424:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005428:	2b00      	cmp	r3, #0
 800542a:	d003      	beq.n	8005434 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800542c:	69ba      	ldr	r2, [r7, #24]
 800542e:	693b      	ldr	r3, [r7, #16]
 8005430:	4313      	orrs	r3, r2
 8005432:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005434:	4a14      	ldr	r2, [pc, #80]	; (8005488 <HAL_GPIO_Init+0x354>)
 8005436:	69bb      	ldr	r3, [r7, #24]
 8005438:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800543a:	69fb      	ldr	r3, [r7, #28]
 800543c:	3301      	adds	r3, #1
 800543e:	61fb      	str	r3, [r7, #28]
 8005440:	69fb      	ldr	r3, [r7, #28]
 8005442:	2b0f      	cmp	r3, #15
 8005444:	f67f ae86 	bls.w	8005154 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8005448:	bf00      	nop
 800544a:	bf00      	nop
 800544c:	3724      	adds	r7, #36	; 0x24
 800544e:	46bd      	mov	sp, r7
 8005450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005454:	4770      	bx	lr
 8005456:	bf00      	nop
 8005458:	40023800 	.word	0x40023800
 800545c:	40013800 	.word	0x40013800
 8005460:	40020000 	.word	0x40020000
 8005464:	40020400 	.word	0x40020400
 8005468:	40020800 	.word	0x40020800
 800546c:	40020c00 	.word	0x40020c00
 8005470:	40021000 	.word	0x40021000
 8005474:	40021400 	.word	0x40021400
 8005478:	40021800 	.word	0x40021800
 800547c:	40021c00 	.word	0x40021c00
 8005480:	40022000 	.word	0x40022000
 8005484:	40022400 	.word	0x40022400
 8005488:	40013c00 	.word	0x40013c00

0800548c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800548c:	b480      	push	{r7}
 800548e:	b083      	sub	sp, #12
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
 8005494:	460b      	mov	r3, r1
 8005496:	807b      	strh	r3, [r7, #2]
 8005498:	4613      	mov	r3, r2
 800549a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800549c:	787b      	ldrb	r3, [r7, #1]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d003      	beq.n	80054aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80054a2:	887a      	ldrh	r2, [r7, #2]
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80054a8:	e003      	b.n	80054b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80054aa:	887b      	ldrh	r3, [r7, #2]
 80054ac:	041a      	lsls	r2, r3, #16
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	619a      	str	r2, [r3, #24]
}
 80054b2:	bf00      	nop
 80054b4:	370c      	adds	r7, #12
 80054b6:	46bd      	mov	sp, r7
 80054b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054bc:	4770      	bx	lr
	...

080054c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b082      	sub	sp, #8
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d101      	bne.n	80054d2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80054ce:	2301      	movs	r3, #1
 80054d0:	e07f      	b.n	80055d2 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80054d8:	b2db      	uxtb	r3, r3
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d106      	bne.n	80054ec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2200      	movs	r2, #0
 80054e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80054e6:	6878      	ldr	r0, [r7, #4]
 80054e8:	f000 f8a9 	bl	800563e <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2224      	movs	r2, #36	; 0x24
 80054f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	681a      	ldr	r2, [r3, #0]
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f022 0201 	bic.w	r2, r2, #1
 8005502:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	685a      	ldr	r2, [r3, #4]
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005510:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	689a      	ldr	r2, [r3, #8]
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005520:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	68db      	ldr	r3, [r3, #12]
 8005526:	2b01      	cmp	r3, #1
 8005528:	d107      	bne.n	800553a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	689a      	ldr	r2, [r3, #8]
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005536:	609a      	str	r2, [r3, #8]
 8005538:	e006      	b.n	8005548 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	689a      	ldr	r2, [r3, #8]
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005546:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	68db      	ldr	r3, [r3, #12]
 800554c:	2b02      	cmp	r3, #2
 800554e:	d104      	bne.n	800555a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005558:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	6859      	ldr	r1, [r3, #4]
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681a      	ldr	r2, [r3, #0]
 8005564:	4b1d      	ldr	r3, [pc, #116]	; (80055dc <HAL_I2C_Init+0x11c>)
 8005566:	430b      	orrs	r3, r1
 8005568:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	68da      	ldr	r2, [r3, #12]
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005578:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	691a      	ldr	r2, [r3, #16]
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	695b      	ldr	r3, [r3, #20]
 8005582:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	699b      	ldr	r3, [r3, #24]
 800558a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	430a      	orrs	r2, r1
 8005592:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	69d9      	ldr	r1, [r3, #28]
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6a1a      	ldr	r2, [r3, #32]
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	430a      	orrs	r2, r1
 80055a2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	681a      	ldr	r2, [r3, #0]
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f042 0201 	orr.w	r2, r2, #1
 80055b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2200      	movs	r2, #0
 80055b8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2220      	movs	r2, #32
 80055be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2200      	movs	r2, #0
 80055c6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2200      	movs	r2, #0
 80055cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80055d0:	2300      	movs	r3, #0
}
 80055d2:	4618      	mov	r0, r3
 80055d4:	3708      	adds	r7, #8
 80055d6:	46bd      	mov	sp, r7
 80055d8:	bd80      	pop	{r7, pc}
 80055da:	bf00      	nop
 80055dc:	02008000 	.word	0x02008000

080055e0 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b082      	sub	sp, #8
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d101      	bne.n	80055f2 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80055ee:	2301      	movs	r3, #1
 80055f0:	e021      	b.n	8005636 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2224      	movs	r2, #36	; 0x24
 80055f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	681a      	ldr	r2, [r3, #0]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f022 0201 	bic.w	r2, r2, #1
 8005608:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800560a:	6878      	ldr	r0, [r7, #4]
 800560c:	f000 f821 	bl	8005652 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2200      	movs	r2, #0
 8005614:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2200      	movs	r2, #0
 800561a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2200      	movs	r2, #0
 8005622:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2200      	movs	r2, #0
 8005628:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2200      	movs	r2, #0
 8005630:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005634:	2300      	movs	r3, #0
}
 8005636:	4618      	mov	r0, r3
 8005638:	3708      	adds	r7, #8
 800563a:	46bd      	mov	sp, r7
 800563c:	bd80      	pop	{r7, pc}

0800563e <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 800563e:	b480      	push	{r7}
 8005640:	b083      	sub	sp, #12
 8005642:	af00      	add	r7, sp, #0
 8005644:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8005646:	bf00      	nop
 8005648:	370c      	adds	r7, #12
 800564a:	46bd      	mov	sp, r7
 800564c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005650:	4770      	bx	lr

08005652 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8005652:	b480      	push	{r7}
 8005654:	b083      	sub	sp, #12
 8005656:	af00      	add	r7, sp, #0
 8005658:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 800565a:	bf00      	nop
 800565c:	370c      	adds	r7, #12
 800565e:	46bd      	mov	sp, r7
 8005660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005664:	4770      	bx	lr
	...

08005668 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b088      	sub	sp, #32
 800566c:	af02      	add	r7, sp, #8
 800566e:	60f8      	str	r0, [r7, #12]
 8005670:	4608      	mov	r0, r1
 8005672:	4611      	mov	r1, r2
 8005674:	461a      	mov	r2, r3
 8005676:	4603      	mov	r3, r0
 8005678:	817b      	strh	r3, [r7, #10]
 800567a:	460b      	mov	r3, r1
 800567c:	813b      	strh	r3, [r7, #8]
 800567e:	4613      	mov	r3, r2
 8005680:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005688:	b2db      	uxtb	r3, r3
 800568a:	2b20      	cmp	r3, #32
 800568c:	f040 80f9 	bne.w	8005882 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005690:	6a3b      	ldr	r3, [r7, #32]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d002      	beq.n	800569c <HAL_I2C_Mem_Write+0x34>
 8005696:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005698:	2b00      	cmp	r3, #0
 800569a:	d105      	bne.n	80056a8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80056a2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80056a4:	2301      	movs	r3, #1
 80056a6:	e0ed      	b.n	8005884 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80056ae:	2b01      	cmp	r3, #1
 80056b0:	d101      	bne.n	80056b6 <HAL_I2C_Mem_Write+0x4e>
 80056b2:	2302      	movs	r3, #2
 80056b4:	e0e6      	b.n	8005884 <HAL_I2C_Mem_Write+0x21c>
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	2201      	movs	r2, #1
 80056ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80056be:	f7fe ffb1 	bl	8004624 <HAL_GetTick>
 80056c2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80056c4:	697b      	ldr	r3, [r7, #20]
 80056c6:	9300      	str	r3, [sp, #0]
 80056c8:	2319      	movs	r3, #25
 80056ca:	2201      	movs	r2, #1
 80056cc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80056d0:	68f8      	ldr	r0, [r7, #12]
 80056d2:	f000 fad1 	bl	8005c78 <I2C_WaitOnFlagUntilTimeout>
 80056d6:	4603      	mov	r3, r0
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d001      	beq.n	80056e0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80056dc:	2301      	movs	r3, #1
 80056de:	e0d1      	b.n	8005884 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	2221      	movs	r2, #33	; 0x21
 80056e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	2240      	movs	r2, #64	; 0x40
 80056ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	2200      	movs	r2, #0
 80056f4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	6a3a      	ldr	r2, [r7, #32]
 80056fa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005700:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	2200      	movs	r2, #0
 8005706:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005708:	88f8      	ldrh	r0, [r7, #6]
 800570a:	893a      	ldrh	r2, [r7, #8]
 800570c:	8979      	ldrh	r1, [r7, #10]
 800570e:	697b      	ldr	r3, [r7, #20]
 8005710:	9301      	str	r3, [sp, #4]
 8005712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005714:	9300      	str	r3, [sp, #0]
 8005716:	4603      	mov	r3, r0
 8005718:	68f8      	ldr	r0, [r7, #12]
 800571a:	f000 f9e1 	bl	8005ae0 <I2C_RequestMemoryWrite>
 800571e:	4603      	mov	r3, r0
 8005720:	2b00      	cmp	r3, #0
 8005722:	d005      	beq.n	8005730 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	2200      	movs	r2, #0
 8005728:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800572c:	2301      	movs	r3, #1
 800572e:	e0a9      	b.n	8005884 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005734:	b29b      	uxth	r3, r3
 8005736:	2bff      	cmp	r3, #255	; 0xff
 8005738:	d90e      	bls.n	8005758 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	22ff      	movs	r2, #255	; 0xff
 800573e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005744:	b2da      	uxtb	r2, r3
 8005746:	8979      	ldrh	r1, [r7, #10]
 8005748:	2300      	movs	r3, #0
 800574a:	9300      	str	r3, [sp, #0]
 800574c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005750:	68f8      	ldr	r0, [r7, #12]
 8005752:	f000 fc39 	bl	8005fc8 <I2C_TransferConfig>
 8005756:	e00f      	b.n	8005778 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800575c:	b29a      	uxth	r2, r3
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005766:	b2da      	uxtb	r2, r3
 8005768:	8979      	ldrh	r1, [r7, #10]
 800576a:	2300      	movs	r3, #0
 800576c:	9300      	str	r3, [sp, #0]
 800576e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005772:	68f8      	ldr	r0, [r7, #12]
 8005774:	f000 fc28 	bl	8005fc8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005778:	697a      	ldr	r2, [r7, #20]
 800577a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800577c:	68f8      	ldr	r0, [r7, #12]
 800577e:	f000 fabb 	bl	8005cf8 <I2C_WaitOnTXISFlagUntilTimeout>
 8005782:	4603      	mov	r3, r0
 8005784:	2b00      	cmp	r3, #0
 8005786:	d001      	beq.n	800578c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8005788:	2301      	movs	r3, #1
 800578a:	e07b      	b.n	8005884 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005790:	781a      	ldrb	r2, [r3, #0]
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800579c:	1c5a      	adds	r2, r3, #1
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057a6:	b29b      	uxth	r3, r3
 80057a8:	3b01      	subs	r3, #1
 80057aa:	b29a      	uxth	r2, r3
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057b4:	3b01      	subs	r3, #1
 80057b6:	b29a      	uxth	r2, r3
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057c0:	b29b      	uxth	r3, r3
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d034      	beq.n	8005830 <HAL_I2C_Mem_Write+0x1c8>
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d130      	bne.n	8005830 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80057ce:	697b      	ldr	r3, [r7, #20]
 80057d0:	9300      	str	r3, [sp, #0]
 80057d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057d4:	2200      	movs	r2, #0
 80057d6:	2180      	movs	r1, #128	; 0x80
 80057d8:	68f8      	ldr	r0, [r7, #12]
 80057da:	f000 fa4d 	bl	8005c78 <I2C_WaitOnFlagUntilTimeout>
 80057de:	4603      	mov	r3, r0
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d001      	beq.n	80057e8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80057e4:	2301      	movs	r3, #1
 80057e6:	e04d      	b.n	8005884 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057ec:	b29b      	uxth	r3, r3
 80057ee:	2bff      	cmp	r3, #255	; 0xff
 80057f0:	d90e      	bls.n	8005810 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	22ff      	movs	r2, #255	; 0xff
 80057f6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057fc:	b2da      	uxtb	r2, r3
 80057fe:	8979      	ldrh	r1, [r7, #10]
 8005800:	2300      	movs	r3, #0
 8005802:	9300      	str	r3, [sp, #0]
 8005804:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005808:	68f8      	ldr	r0, [r7, #12]
 800580a:	f000 fbdd 	bl	8005fc8 <I2C_TransferConfig>
 800580e:	e00f      	b.n	8005830 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005814:	b29a      	uxth	r2, r3
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800581e:	b2da      	uxtb	r2, r3
 8005820:	8979      	ldrh	r1, [r7, #10]
 8005822:	2300      	movs	r3, #0
 8005824:	9300      	str	r3, [sp, #0]
 8005826:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800582a:	68f8      	ldr	r0, [r7, #12]
 800582c:	f000 fbcc 	bl	8005fc8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005834:	b29b      	uxth	r3, r3
 8005836:	2b00      	cmp	r3, #0
 8005838:	d19e      	bne.n	8005778 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800583a:	697a      	ldr	r2, [r7, #20]
 800583c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800583e:	68f8      	ldr	r0, [r7, #12]
 8005840:	f000 fa9a 	bl	8005d78 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005844:	4603      	mov	r3, r0
 8005846:	2b00      	cmp	r3, #0
 8005848:	d001      	beq.n	800584e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800584a:	2301      	movs	r3, #1
 800584c:	e01a      	b.n	8005884 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	2220      	movs	r2, #32
 8005854:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	6859      	ldr	r1, [r3, #4]
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681a      	ldr	r2, [r3, #0]
 8005860:	4b0a      	ldr	r3, [pc, #40]	; (800588c <HAL_I2C_Mem_Write+0x224>)
 8005862:	400b      	ands	r3, r1
 8005864:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	2220      	movs	r2, #32
 800586a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	2200      	movs	r2, #0
 8005872:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	2200      	movs	r2, #0
 800587a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800587e:	2300      	movs	r3, #0
 8005880:	e000      	b.n	8005884 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8005882:	2302      	movs	r3, #2
  }
}
 8005884:	4618      	mov	r0, r3
 8005886:	3718      	adds	r7, #24
 8005888:	46bd      	mov	sp, r7
 800588a:	bd80      	pop	{r7, pc}
 800588c:	fe00e800 	.word	0xfe00e800

08005890 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b088      	sub	sp, #32
 8005894:	af02      	add	r7, sp, #8
 8005896:	60f8      	str	r0, [r7, #12]
 8005898:	4608      	mov	r0, r1
 800589a:	4611      	mov	r1, r2
 800589c:	461a      	mov	r2, r3
 800589e:	4603      	mov	r3, r0
 80058a0:	817b      	strh	r3, [r7, #10]
 80058a2:	460b      	mov	r3, r1
 80058a4:	813b      	strh	r3, [r7, #8]
 80058a6:	4613      	mov	r3, r2
 80058a8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80058b0:	b2db      	uxtb	r3, r3
 80058b2:	2b20      	cmp	r3, #32
 80058b4:	f040 80fd 	bne.w	8005ab2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80058b8:	6a3b      	ldr	r3, [r7, #32]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d002      	beq.n	80058c4 <HAL_I2C_Mem_Read+0x34>
 80058be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d105      	bne.n	80058d0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058ca:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80058cc:	2301      	movs	r3, #1
 80058ce:	e0f1      	b.n	8005ab4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80058d6:	2b01      	cmp	r3, #1
 80058d8:	d101      	bne.n	80058de <HAL_I2C_Mem_Read+0x4e>
 80058da:	2302      	movs	r3, #2
 80058dc:	e0ea      	b.n	8005ab4 <HAL_I2C_Mem_Read+0x224>
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	2201      	movs	r2, #1
 80058e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80058e6:	f7fe fe9d 	bl	8004624 <HAL_GetTick>
 80058ea:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80058ec:	697b      	ldr	r3, [r7, #20]
 80058ee:	9300      	str	r3, [sp, #0]
 80058f0:	2319      	movs	r3, #25
 80058f2:	2201      	movs	r2, #1
 80058f4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80058f8:	68f8      	ldr	r0, [r7, #12]
 80058fa:	f000 f9bd 	bl	8005c78 <I2C_WaitOnFlagUntilTimeout>
 80058fe:	4603      	mov	r3, r0
 8005900:	2b00      	cmp	r3, #0
 8005902:	d001      	beq.n	8005908 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8005904:	2301      	movs	r3, #1
 8005906:	e0d5      	b.n	8005ab4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	2222      	movs	r2, #34	; 0x22
 800590c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	2240      	movs	r2, #64	; 0x40
 8005914:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	2200      	movs	r2, #0
 800591c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	6a3a      	ldr	r2, [r7, #32]
 8005922:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005928:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	2200      	movs	r2, #0
 800592e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005930:	88f8      	ldrh	r0, [r7, #6]
 8005932:	893a      	ldrh	r2, [r7, #8]
 8005934:	8979      	ldrh	r1, [r7, #10]
 8005936:	697b      	ldr	r3, [r7, #20]
 8005938:	9301      	str	r3, [sp, #4]
 800593a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800593c:	9300      	str	r3, [sp, #0]
 800593e:	4603      	mov	r3, r0
 8005940:	68f8      	ldr	r0, [r7, #12]
 8005942:	f000 f921 	bl	8005b88 <I2C_RequestMemoryRead>
 8005946:	4603      	mov	r3, r0
 8005948:	2b00      	cmp	r3, #0
 800594a:	d005      	beq.n	8005958 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	2200      	movs	r2, #0
 8005950:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005954:	2301      	movs	r3, #1
 8005956:	e0ad      	b.n	8005ab4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800595c:	b29b      	uxth	r3, r3
 800595e:	2bff      	cmp	r3, #255	; 0xff
 8005960:	d90e      	bls.n	8005980 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	22ff      	movs	r2, #255	; 0xff
 8005966:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800596c:	b2da      	uxtb	r2, r3
 800596e:	8979      	ldrh	r1, [r7, #10]
 8005970:	4b52      	ldr	r3, [pc, #328]	; (8005abc <HAL_I2C_Mem_Read+0x22c>)
 8005972:	9300      	str	r3, [sp, #0]
 8005974:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005978:	68f8      	ldr	r0, [r7, #12]
 800597a:	f000 fb25 	bl	8005fc8 <I2C_TransferConfig>
 800597e:	e00f      	b.n	80059a0 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005984:	b29a      	uxth	r2, r3
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800598e:	b2da      	uxtb	r2, r3
 8005990:	8979      	ldrh	r1, [r7, #10]
 8005992:	4b4a      	ldr	r3, [pc, #296]	; (8005abc <HAL_I2C_Mem_Read+0x22c>)
 8005994:	9300      	str	r3, [sp, #0]
 8005996:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800599a:	68f8      	ldr	r0, [r7, #12]
 800599c:	f000 fb14 	bl	8005fc8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80059a0:	697b      	ldr	r3, [r7, #20]
 80059a2:	9300      	str	r3, [sp, #0]
 80059a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059a6:	2200      	movs	r2, #0
 80059a8:	2104      	movs	r1, #4
 80059aa:	68f8      	ldr	r0, [r7, #12]
 80059ac:	f000 f964 	bl	8005c78 <I2C_WaitOnFlagUntilTimeout>
 80059b0:	4603      	mov	r3, r0
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d001      	beq.n	80059ba <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80059b6:	2301      	movs	r3, #1
 80059b8:	e07c      	b.n	8005ab4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059c4:	b2d2      	uxtb	r2, r2
 80059c6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059cc:	1c5a      	adds	r2, r3, #1
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059d6:	3b01      	subs	r3, #1
 80059d8:	b29a      	uxth	r2, r3
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059e2:	b29b      	uxth	r3, r3
 80059e4:	3b01      	subs	r3, #1
 80059e6:	b29a      	uxth	r2, r3
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059f0:	b29b      	uxth	r3, r3
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d034      	beq.n	8005a60 <HAL_I2C_Mem_Read+0x1d0>
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d130      	bne.n	8005a60 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80059fe:	697b      	ldr	r3, [r7, #20]
 8005a00:	9300      	str	r3, [sp, #0]
 8005a02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a04:	2200      	movs	r2, #0
 8005a06:	2180      	movs	r1, #128	; 0x80
 8005a08:	68f8      	ldr	r0, [r7, #12]
 8005a0a:	f000 f935 	bl	8005c78 <I2C_WaitOnFlagUntilTimeout>
 8005a0e:	4603      	mov	r3, r0
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d001      	beq.n	8005a18 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8005a14:	2301      	movs	r3, #1
 8005a16:	e04d      	b.n	8005ab4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a1c:	b29b      	uxth	r3, r3
 8005a1e:	2bff      	cmp	r3, #255	; 0xff
 8005a20:	d90e      	bls.n	8005a40 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	22ff      	movs	r2, #255	; 0xff
 8005a26:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a2c:	b2da      	uxtb	r2, r3
 8005a2e:	8979      	ldrh	r1, [r7, #10]
 8005a30:	2300      	movs	r3, #0
 8005a32:	9300      	str	r3, [sp, #0]
 8005a34:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005a38:	68f8      	ldr	r0, [r7, #12]
 8005a3a:	f000 fac5 	bl	8005fc8 <I2C_TransferConfig>
 8005a3e:	e00f      	b.n	8005a60 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a44:	b29a      	uxth	r2, r3
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a4e:	b2da      	uxtb	r2, r3
 8005a50:	8979      	ldrh	r1, [r7, #10]
 8005a52:	2300      	movs	r3, #0
 8005a54:	9300      	str	r3, [sp, #0]
 8005a56:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005a5a:	68f8      	ldr	r0, [r7, #12]
 8005a5c:	f000 fab4 	bl	8005fc8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a64:	b29b      	uxth	r3, r3
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d19a      	bne.n	80059a0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005a6a:	697a      	ldr	r2, [r7, #20]
 8005a6c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005a6e:	68f8      	ldr	r0, [r7, #12]
 8005a70:	f000 f982 	bl	8005d78 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005a74:	4603      	mov	r3, r0
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d001      	beq.n	8005a7e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	e01a      	b.n	8005ab4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	2220      	movs	r2, #32
 8005a84:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	6859      	ldr	r1, [r3, #4]
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681a      	ldr	r2, [r3, #0]
 8005a90:	4b0b      	ldr	r3, [pc, #44]	; (8005ac0 <HAL_I2C_Mem_Read+0x230>)
 8005a92:	400b      	ands	r3, r1
 8005a94:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	2220      	movs	r2, #32
 8005a9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005aae:	2300      	movs	r3, #0
 8005ab0:	e000      	b.n	8005ab4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8005ab2:	2302      	movs	r3, #2
  }
}
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	3718      	adds	r7, #24
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	bd80      	pop	{r7, pc}
 8005abc:	80002400 	.word	0x80002400
 8005ac0:	fe00e800 	.word	0xfe00e800

08005ac4 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8005ac4:	b480      	push	{r7}
 8005ac6:	b083      	sub	sp, #12
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ad2:	b2db      	uxtb	r3, r3
}
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	370c      	adds	r7, #12
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ade:	4770      	bx	lr

08005ae0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b086      	sub	sp, #24
 8005ae4:	af02      	add	r7, sp, #8
 8005ae6:	60f8      	str	r0, [r7, #12]
 8005ae8:	4608      	mov	r0, r1
 8005aea:	4611      	mov	r1, r2
 8005aec:	461a      	mov	r2, r3
 8005aee:	4603      	mov	r3, r0
 8005af0:	817b      	strh	r3, [r7, #10]
 8005af2:	460b      	mov	r3, r1
 8005af4:	813b      	strh	r3, [r7, #8]
 8005af6:	4613      	mov	r3, r2
 8005af8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005afa:	88fb      	ldrh	r3, [r7, #6]
 8005afc:	b2da      	uxtb	r2, r3
 8005afe:	8979      	ldrh	r1, [r7, #10]
 8005b00:	4b20      	ldr	r3, [pc, #128]	; (8005b84 <I2C_RequestMemoryWrite+0xa4>)
 8005b02:	9300      	str	r3, [sp, #0]
 8005b04:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005b08:	68f8      	ldr	r0, [r7, #12]
 8005b0a:	f000 fa5d 	bl	8005fc8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b0e:	69fa      	ldr	r2, [r7, #28]
 8005b10:	69b9      	ldr	r1, [r7, #24]
 8005b12:	68f8      	ldr	r0, [r7, #12]
 8005b14:	f000 f8f0 	bl	8005cf8 <I2C_WaitOnTXISFlagUntilTimeout>
 8005b18:	4603      	mov	r3, r0
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d001      	beq.n	8005b22 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8005b1e:	2301      	movs	r3, #1
 8005b20:	e02c      	b.n	8005b7c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005b22:	88fb      	ldrh	r3, [r7, #6]
 8005b24:	2b01      	cmp	r3, #1
 8005b26:	d105      	bne.n	8005b34 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005b28:	893b      	ldrh	r3, [r7, #8]
 8005b2a:	b2da      	uxtb	r2, r3
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	629a      	str	r2, [r3, #40]	; 0x28
 8005b32:	e015      	b.n	8005b60 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005b34:	893b      	ldrh	r3, [r7, #8]
 8005b36:	0a1b      	lsrs	r3, r3, #8
 8005b38:	b29b      	uxth	r3, r3
 8005b3a:	b2da      	uxtb	r2, r3
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b42:	69fa      	ldr	r2, [r7, #28]
 8005b44:	69b9      	ldr	r1, [r7, #24]
 8005b46:	68f8      	ldr	r0, [r7, #12]
 8005b48:	f000 f8d6 	bl	8005cf8 <I2C_WaitOnTXISFlagUntilTimeout>
 8005b4c:	4603      	mov	r3, r0
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d001      	beq.n	8005b56 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8005b52:	2301      	movs	r3, #1
 8005b54:	e012      	b.n	8005b7c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005b56:	893b      	ldrh	r3, [r7, #8]
 8005b58:	b2da      	uxtb	r2, r3
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005b60:	69fb      	ldr	r3, [r7, #28]
 8005b62:	9300      	str	r3, [sp, #0]
 8005b64:	69bb      	ldr	r3, [r7, #24]
 8005b66:	2200      	movs	r2, #0
 8005b68:	2180      	movs	r1, #128	; 0x80
 8005b6a:	68f8      	ldr	r0, [r7, #12]
 8005b6c:	f000 f884 	bl	8005c78 <I2C_WaitOnFlagUntilTimeout>
 8005b70:	4603      	mov	r3, r0
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d001      	beq.n	8005b7a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8005b76:	2301      	movs	r3, #1
 8005b78:	e000      	b.n	8005b7c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8005b7a:	2300      	movs	r3, #0
}
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	3710      	adds	r7, #16
 8005b80:	46bd      	mov	sp, r7
 8005b82:	bd80      	pop	{r7, pc}
 8005b84:	80002000 	.word	0x80002000

08005b88 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b086      	sub	sp, #24
 8005b8c:	af02      	add	r7, sp, #8
 8005b8e:	60f8      	str	r0, [r7, #12]
 8005b90:	4608      	mov	r0, r1
 8005b92:	4611      	mov	r1, r2
 8005b94:	461a      	mov	r2, r3
 8005b96:	4603      	mov	r3, r0
 8005b98:	817b      	strh	r3, [r7, #10]
 8005b9a:	460b      	mov	r3, r1
 8005b9c:	813b      	strh	r3, [r7, #8]
 8005b9e:	4613      	mov	r3, r2
 8005ba0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005ba2:	88fb      	ldrh	r3, [r7, #6]
 8005ba4:	b2da      	uxtb	r2, r3
 8005ba6:	8979      	ldrh	r1, [r7, #10]
 8005ba8:	4b20      	ldr	r3, [pc, #128]	; (8005c2c <I2C_RequestMemoryRead+0xa4>)
 8005baa:	9300      	str	r3, [sp, #0]
 8005bac:	2300      	movs	r3, #0
 8005bae:	68f8      	ldr	r0, [r7, #12]
 8005bb0:	f000 fa0a 	bl	8005fc8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005bb4:	69fa      	ldr	r2, [r7, #28]
 8005bb6:	69b9      	ldr	r1, [r7, #24]
 8005bb8:	68f8      	ldr	r0, [r7, #12]
 8005bba:	f000 f89d 	bl	8005cf8 <I2C_WaitOnTXISFlagUntilTimeout>
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d001      	beq.n	8005bc8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005bc4:	2301      	movs	r3, #1
 8005bc6:	e02c      	b.n	8005c22 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005bc8:	88fb      	ldrh	r3, [r7, #6]
 8005bca:	2b01      	cmp	r3, #1
 8005bcc:	d105      	bne.n	8005bda <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005bce:	893b      	ldrh	r3, [r7, #8]
 8005bd0:	b2da      	uxtb	r2, r3
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	629a      	str	r2, [r3, #40]	; 0x28
 8005bd8:	e015      	b.n	8005c06 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005bda:	893b      	ldrh	r3, [r7, #8]
 8005bdc:	0a1b      	lsrs	r3, r3, #8
 8005bde:	b29b      	uxth	r3, r3
 8005be0:	b2da      	uxtb	r2, r3
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005be8:	69fa      	ldr	r2, [r7, #28]
 8005bea:	69b9      	ldr	r1, [r7, #24]
 8005bec:	68f8      	ldr	r0, [r7, #12]
 8005bee:	f000 f883 	bl	8005cf8 <I2C_WaitOnTXISFlagUntilTimeout>
 8005bf2:	4603      	mov	r3, r0
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d001      	beq.n	8005bfc <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	e012      	b.n	8005c22 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005bfc:	893b      	ldrh	r3, [r7, #8]
 8005bfe:	b2da      	uxtb	r2, r3
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005c06:	69fb      	ldr	r3, [r7, #28]
 8005c08:	9300      	str	r3, [sp, #0]
 8005c0a:	69bb      	ldr	r3, [r7, #24]
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	2140      	movs	r1, #64	; 0x40
 8005c10:	68f8      	ldr	r0, [r7, #12]
 8005c12:	f000 f831 	bl	8005c78 <I2C_WaitOnFlagUntilTimeout>
 8005c16:	4603      	mov	r3, r0
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d001      	beq.n	8005c20 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	e000      	b.n	8005c22 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8005c20:	2300      	movs	r3, #0
}
 8005c22:	4618      	mov	r0, r3
 8005c24:	3710      	adds	r7, #16
 8005c26:	46bd      	mov	sp, r7
 8005c28:	bd80      	pop	{r7, pc}
 8005c2a:	bf00      	nop
 8005c2c:	80002000 	.word	0x80002000

08005c30 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005c30:	b480      	push	{r7}
 8005c32:	b083      	sub	sp, #12
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	699b      	ldr	r3, [r3, #24]
 8005c3e:	f003 0302 	and.w	r3, r3, #2
 8005c42:	2b02      	cmp	r3, #2
 8005c44:	d103      	bne.n	8005c4e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	699b      	ldr	r3, [r3, #24]
 8005c54:	f003 0301 	and.w	r3, r3, #1
 8005c58:	2b01      	cmp	r3, #1
 8005c5a:	d007      	beq.n	8005c6c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	699a      	ldr	r2, [r3, #24]
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f042 0201 	orr.w	r2, r2, #1
 8005c6a:	619a      	str	r2, [r3, #24]
  }
}
 8005c6c:	bf00      	nop
 8005c6e:	370c      	adds	r7, #12
 8005c70:	46bd      	mov	sp, r7
 8005c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c76:	4770      	bx	lr

08005c78 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b084      	sub	sp, #16
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	60f8      	str	r0, [r7, #12]
 8005c80:	60b9      	str	r1, [r7, #8]
 8005c82:	603b      	str	r3, [r7, #0]
 8005c84:	4613      	mov	r3, r2
 8005c86:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005c88:	e022      	b.n	8005cd0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c90:	d01e      	beq.n	8005cd0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c92:	f7fe fcc7 	bl	8004624 <HAL_GetTick>
 8005c96:	4602      	mov	r2, r0
 8005c98:	69bb      	ldr	r3, [r7, #24]
 8005c9a:	1ad3      	subs	r3, r2, r3
 8005c9c:	683a      	ldr	r2, [r7, #0]
 8005c9e:	429a      	cmp	r2, r3
 8005ca0:	d302      	bcc.n	8005ca8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d113      	bne.n	8005cd0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cac:	f043 0220 	orr.w	r2, r3, #32
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	2220      	movs	r2, #32
 8005cb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8005ccc:	2301      	movs	r3, #1
 8005cce:	e00f      	b.n	8005cf0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	699a      	ldr	r2, [r3, #24]
 8005cd6:	68bb      	ldr	r3, [r7, #8]
 8005cd8:	4013      	ands	r3, r2
 8005cda:	68ba      	ldr	r2, [r7, #8]
 8005cdc:	429a      	cmp	r2, r3
 8005cde:	bf0c      	ite	eq
 8005ce0:	2301      	moveq	r3, #1
 8005ce2:	2300      	movne	r3, #0
 8005ce4:	b2db      	uxtb	r3, r3
 8005ce6:	461a      	mov	r2, r3
 8005ce8:	79fb      	ldrb	r3, [r7, #7]
 8005cea:	429a      	cmp	r2, r3
 8005cec:	d0cd      	beq.n	8005c8a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005cee:	2300      	movs	r3, #0
}
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	3710      	adds	r7, #16
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	bd80      	pop	{r7, pc}

08005cf8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b084      	sub	sp, #16
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	60f8      	str	r0, [r7, #12]
 8005d00:	60b9      	str	r1, [r7, #8]
 8005d02:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005d04:	e02c      	b.n	8005d60 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d06:	687a      	ldr	r2, [r7, #4]
 8005d08:	68b9      	ldr	r1, [r7, #8]
 8005d0a:	68f8      	ldr	r0, [r7, #12]
 8005d0c:	f000 f870 	bl	8005df0 <I2C_IsErrorOccurred>
 8005d10:	4603      	mov	r3, r0
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d001      	beq.n	8005d1a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005d16:	2301      	movs	r3, #1
 8005d18:	e02a      	b.n	8005d70 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d1a:	68bb      	ldr	r3, [r7, #8]
 8005d1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d20:	d01e      	beq.n	8005d60 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d22:	f7fe fc7f 	bl	8004624 <HAL_GetTick>
 8005d26:	4602      	mov	r2, r0
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	1ad3      	subs	r3, r2, r3
 8005d2c:	68ba      	ldr	r2, [r7, #8]
 8005d2e:	429a      	cmp	r2, r3
 8005d30:	d302      	bcc.n	8005d38 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005d32:	68bb      	ldr	r3, [r7, #8]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d113      	bne.n	8005d60 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d3c:	f043 0220 	orr.w	r2, r3, #32
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	2220      	movs	r2, #32
 8005d48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	2200      	movs	r2, #0
 8005d50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	2200      	movs	r2, #0
 8005d58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005d5c:	2301      	movs	r3, #1
 8005d5e:	e007      	b.n	8005d70 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	699b      	ldr	r3, [r3, #24]
 8005d66:	f003 0302 	and.w	r3, r3, #2
 8005d6a:	2b02      	cmp	r3, #2
 8005d6c:	d1cb      	bne.n	8005d06 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005d6e:	2300      	movs	r3, #0
}
 8005d70:	4618      	mov	r0, r3
 8005d72:	3710      	adds	r7, #16
 8005d74:	46bd      	mov	sp, r7
 8005d76:	bd80      	pop	{r7, pc}

08005d78 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b084      	sub	sp, #16
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	60f8      	str	r0, [r7, #12]
 8005d80:	60b9      	str	r1, [r7, #8]
 8005d82:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005d84:	e028      	b.n	8005dd8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d86:	687a      	ldr	r2, [r7, #4]
 8005d88:	68b9      	ldr	r1, [r7, #8]
 8005d8a:	68f8      	ldr	r0, [r7, #12]
 8005d8c:	f000 f830 	bl	8005df0 <I2C_IsErrorOccurred>
 8005d90:	4603      	mov	r3, r0
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d001      	beq.n	8005d9a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005d96:	2301      	movs	r3, #1
 8005d98:	e026      	b.n	8005de8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d9a:	f7fe fc43 	bl	8004624 <HAL_GetTick>
 8005d9e:	4602      	mov	r2, r0
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	1ad3      	subs	r3, r2, r3
 8005da4:	68ba      	ldr	r2, [r7, #8]
 8005da6:	429a      	cmp	r2, r3
 8005da8:	d302      	bcc.n	8005db0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005daa:	68bb      	ldr	r3, [r7, #8]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d113      	bne.n	8005dd8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005db4:	f043 0220 	orr.w	r2, r3, #32
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	2220      	movs	r2, #32
 8005dc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	2200      	movs	r2, #0
 8005dd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	e007      	b.n	8005de8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	699b      	ldr	r3, [r3, #24]
 8005dde:	f003 0320 	and.w	r3, r3, #32
 8005de2:	2b20      	cmp	r3, #32
 8005de4:	d1cf      	bne.n	8005d86 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005de6:	2300      	movs	r3, #0
}
 8005de8:	4618      	mov	r0, r3
 8005dea:	3710      	adds	r7, #16
 8005dec:	46bd      	mov	sp, r7
 8005dee:	bd80      	pop	{r7, pc}

08005df0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b08a      	sub	sp, #40	; 0x28
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	60f8      	str	r0, [r7, #12]
 8005df8:	60b9      	str	r1, [r7, #8]
 8005dfa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	699b      	ldr	r3, [r3, #24]
 8005e08:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005e12:	69bb      	ldr	r3, [r7, #24]
 8005e14:	f003 0310 	and.w	r3, r3, #16
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d075      	beq.n	8005f08 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	2210      	movs	r2, #16
 8005e22:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005e24:	e056      	b.n	8005ed4 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005e26:	68bb      	ldr	r3, [r7, #8]
 8005e28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e2c:	d052      	beq.n	8005ed4 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005e2e:	f7fe fbf9 	bl	8004624 <HAL_GetTick>
 8005e32:	4602      	mov	r2, r0
 8005e34:	69fb      	ldr	r3, [r7, #28]
 8005e36:	1ad3      	subs	r3, r2, r3
 8005e38:	68ba      	ldr	r2, [r7, #8]
 8005e3a:	429a      	cmp	r2, r3
 8005e3c:	d302      	bcc.n	8005e44 <I2C_IsErrorOccurred+0x54>
 8005e3e:	68bb      	ldr	r3, [r7, #8]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d147      	bne.n	8005ed4 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	685b      	ldr	r3, [r3, #4]
 8005e4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e4e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005e56:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	699b      	ldr	r3, [r3, #24]
 8005e5e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005e62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e66:	d12e      	bne.n	8005ec6 <I2C_IsErrorOccurred+0xd6>
 8005e68:	697b      	ldr	r3, [r7, #20]
 8005e6a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005e6e:	d02a      	beq.n	8005ec6 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8005e70:	7cfb      	ldrb	r3, [r7, #19]
 8005e72:	2b20      	cmp	r3, #32
 8005e74:	d027      	beq.n	8005ec6 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	685a      	ldr	r2, [r3, #4]
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005e84:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005e86:	f7fe fbcd 	bl	8004624 <HAL_GetTick>
 8005e8a:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005e8c:	e01b      	b.n	8005ec6 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005e8e:	f7fe fbc9 	bl	8004624 <HAL_GetTick>
 8005e92:	4602      	mov	r2, r0
 8005e94:	69fb      	ldr	r3, [r7, #28]
 8005e96:	1ad3      	subs	r3, r2, r3
 8005e98:	2b19      	cmp	r3, #25
 8005e9a:	d914      	bls.n	8005ec6 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ea0:	f043 0220 	orr.w	r2, r3, #32
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	2220      	movs	r2, #32
 8005eac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	699b      	ldr	r3, [r3, #24]
 8005ecc:	f003 0320 	and.w	r3, r3, #32
 8005ed0:	2b20      	cmp	r3, #32
 8005ed2:	d1dc      	bne.n	8005e8e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	699b      	ldr	r3, [r3, #24]
 8005eda:	f003 0320 	and.w	r3, r3, #32
 8005ede:	2b20      	cmp	r3, #32
 8005ee0:	d003      	beq.n	8005eea <I2C_IsErrorOccurred+0xfa>
 8005ee2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d09d      	beq.n	8005e26 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005eea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d103      	bne.n	8005efa <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	2220      	movs	r2, #32
 8005ef8:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005efa:	6a3b      	ldr	r3, [r7, #32]
 8005efc:	f043 0304 	orr.w	r3, r3, #4
 8005f00:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005f02:	2301      	movs	r3, #1
 8005f04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	699b      	ldr	r3, [r3, #24]
 8005f0e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005f10:	69bb      	ldr	r3, [r7, #24]
 8005f12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d00b      	beq.n	8005f32 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005f1a:	6a3b      	ldr	r3, [r7, #32]
 8005f1c:	f043 0301 	orr.w	r3, r3, #1
 8005f20:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005f2a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005f2c:	2301      	movs	r3, #1
 8005f2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005f32:	69bb      	ldr	r3, [r7, #24]
 8005f34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d00b      	beq.n	8005f54 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005f3c:	6a3b      	ldr	r3, [r7, #32]
 8005f3e:	f043 0308 	orr.w	r3, r3, #8
 8005f42:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005f4c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005f4e:	2301      	movs	r3, #1
 8005f50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005f54:	69bb      	ldr	r3, [r7, #24]
 8005f56:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d00b      	beq.n	8005f76 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005f5e:	6a3b      	ldr	r3, [r7, #32]
 8005f60:	f043 0302 	orr.w	r3, r3, #2
 8005f64:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f6e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005f70:	2301      	movs	r3, #1
 8005f72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8005f76:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d01c      	beq.n	8005fb8 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005f7e:	68f8      	ldr	r0, [r7, #12]
 8005f80:	f7ff fe56 	bl	8005c30 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	6859      	ldr	r1, [r3, #4]
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681a      	ldr	r2, [r3, #0]
 8005f8e:	4b0d      	ldr	r3, [pc, #52]	; (8005fc4 <I2C_IsErrorOccurred+0x1d4>)
 8005f90:	400b      	ands	r3, r1
 8005f92:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f98:	6a3b      	ldr	r3, [r7, #32]
 8005f9a:	431a      	orrs	r2, r3
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	2220      	movs	r2, #32
 8005fa4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	2200      	movs	r2, #0
 8005fac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8005fb8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	3728      	adds	r7, #40	; 0x28
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	bd80      	pop	{r7, pc}
 8005fc4:	fe00e800 	.word	0xfe00e800

08005fc8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005fc8:	b480      	push	{r7}
 8005fca:	b087      	sub	sp, #28
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	60f8      	str	r0, [r7, #12]
 8005fd0:	607b      	str	r3, [r7, #4]
 8005fd2:	460b      	mov	r3, r1
 8005fd4:	817b      	strh	r3, [r7, #10]
 8005fd6:	4613      	mov	r3, r2
 8005fd8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005fda:	897b      	ldrh	r3, [r7, #10]
 8005fdc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005fe0:	7a7b      	ldrb	r3, [r7, #9]
 8005fe2:	041b      	lsls	r3, r3, #16
 8005fe4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005fe8:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005fee:	6a3b      	ldr	r3, [r7, #32]
 8005ff0:	4313      	orrs	r3, r2
 8005ff2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005ff6:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	685a      	ldr	r2, [r3, #4]
 8005ffe:	6a3b      	ldr	r3, [r7, #32]
 8006000:	0d5b      	lsrs	r3, r3, #21
 8006002:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8006006:	4b08      	ldr	r3, [pc, #32]	; (8006028 <I2C_TransferConfig+0x60>)
 8006008:	430b      	orrs	r3, r1
 800600a:	43db      	mvns	r3, r3
 800600c:	ea02 0103 	and.w	r1, r2, r3
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	697a      	ldr	r2, [r7, #20]
 8006016:	430a      	orrs	r2, r1
 8006018:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800601a:	bf00      	nop
 800601c:	371c      	adds	r7, #28
 800601e:	46bd      	mov	sp, r7
 8006020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006024:	4770      	bx	lr
 8006026:	bf00      	nop
 8006028:	03ff63ff 	.word	0x03ff63ff

0800602c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b086      	sub	sp, #24
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8006034:	2300      	movs	r3, #0
 8006036:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d101      	bne.n	8006042 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800603e:	2301      	movs	r3, #1
 8006040:	e291      	b.n	8006566 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f003 0301 	and.w	r3, r3, #1
 800604a:	2b00      	cmp	r3, #0
 800604c:	f000 8087 	beq.w	800615e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006050:	4b96      	ldr	r3, [pc, #600]	; (80062ac <HAL_RCC_OscConfig+0x280>)
 8006052:	689b      	ldr	r3, [r3, #8]
 8006054:	f003 030c 	and.w	r3, r3, #12
 8006058:	2b04      	cmp	r3, #4
 800605a:	d00c      	beq.n	8006076 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800605c:	4b93      	ldr	r3, [pc, #588]	; (80062ac <HAL_RCC_OscConfig+0x280>)
 800605e:	689b      	ldr	r3, [r3, #8]
 8006060:	f003 030c 	and.w	r3, r3, #12
 8006064:	2b08      	cmp	r3, #8
 8006066:	d112      	bne.n	800608e <HAL_RCC_OscConfig+0x62>
 8006068:	4b90      	ldr	r3, [pc, #576]	; (80062ac <HAL_RCC_OscConfig+0x280>)
 800606a:	685b      	ldr	r3, [r3, #4]
 800606c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006070:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006074:	d10b      	bne.n	800608e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006076:	4b8d      	ldr	r3, [pc, #564]	; (80062ac <HAL_RCC_OscConfig+0x280>)
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800607e:	2b00      	cmp	r3, #0
 8006080:	d06c      	beq.n	800615c <HAL_RCC_OscConfig+0x130>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	685b      	ldr	r3, [r3, #4]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d168      	bne.n	800615c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800608a:	2301      	movs	r3, #1
 800608c:	e26b      	b.n	8006566 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	685b      	ldr	r3, [r3, #4]
 8006092:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006096:	d106      	bne.n	80060a6 <HAL_RCC_OscConfig+0x7a>
 8006098:	4b84      	ldr	r3, [pc, #528]	; (80062ac <HAL_RCC_OscConfig+0x280>)
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4a83      	ldr	r2, [pc, #524]	; (80062ac <HAL_RCC_OscConfig+0x280>)
 800609e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80060a2:	6013      	str	r3, [r2, #0]
 80060a4:	e02e      	b.n	8006104 <HAL_RCC_OscConfig+0xd8>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	685b      	ldr	r3, [r3, #4]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d10c      	bne.n	80060c8 <HAL_RCC_OscConfig+0x9c>
 80060ae:	4b7f      	ldr	r3, [pc, #508]	; (80062ac <HAL_RCC_OscConfig+0x280>)
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	4a7e      	ldr	r2, [pc, #504]	; (80062ac <HAL_RCC_OscConfig+0x280>)
 80060b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80060b8:	6013      	str	r3, [r2, #0]
 80060ba:	4b7c      	ldr	r3, [pc, #496]	; (80062ac <HAL_RCC_OscConfig+0x280>)
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	4a7b      	ldr	r2, [pc, #492]	; (80062ac <HAL_RCC_OscConfig+0x280>)
 80060c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80060c4:	6013      	str	r3, [r2, #0]
 80060c6:	e01d      	b.n	8006104 <HAL_RCC_OscConfig+0xd8>
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	685b      	ldr	r3, [r3, #4]
 80060cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80060d0:	d10c      	bne.n	80060ec <HAL_RCC_OscConfig+0xc0>
 80060d2:	4b76      	ldr	r3, [pc, #472]	; (80062ac <HAL_RCC_OscConfig+0x280>)
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	4a75      	ldr	r2, [pc, #468]	; (80062ac <HAL_RCC_OscConfig+0x280>)
 80060d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80060dc:	6013      	str	r3, [r2, #0]
 80060de:	4b73      	ldr	r3, [pc, #460]	; (80062ac <HAL_RCC_OscConfig+0x280>)
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	4a72      	ldr	r2, [pc, #456]	; (80062ac <HAL_RCC_OscConfig+0x280>)
 80060e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80060e8:	6013      	str	r3, [r2, #0]
 80060ea:	e00b      	b.n	8006104 <HAL_RCC_OscConfig+0xd8>
 80060ec:	4b6f      	ldr	r3, [pc, #444]	; (80062ac <HAL_RCC_OscConfig+0x280>)
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	4a6e      	ldr	r2, [pc, #440]	; (80062ac <HAL_RCC_OscConfig+0x280>)
 80060f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80060f6:	6013      	str	r3, [r2, #0]
 80060f8:	4b6c      	ldr	r3, [pc, #432]	; (80062ac <HAL_RCC_OscConfig+0x280>)
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	4a6b      	ldr	r2, [pc, #428]	; (80062ac <HAL_RCC_OscConfig+0x280>)
 80060fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006102:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	685b      	ldr	r3, [r3, #4]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d013      	beq.n	8006134 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800610c:	f7fe fa8a 	bl	8004624 <HAL_GetTick>
 8006110:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006112:	e008      	b.n	8006126 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006114:	f7fe fa86 	bl	8004624 <HAL_GetTick>
 8006118:	4602      	mov	r2, r0
 800611a:	693b      	ldr	r3, [r7, #16]
 800611c:	1ad3      	subs	r3, r2, r3
 800611e:	2b64      	cmp	r3, #100	; 0x64
 8006120:	d901      	bls.n	8006126 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006122:	2303      	movs	r3, #3
 8006124:	e21f      	b.n	8006566 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006126:	4b61      	ldr	r3, [pc, #388]	; (80062ac <HAL_RCC_OscConfig+0x280>)
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800612e:	2b00      	cmp	r3, #0
 8006130:	d0f0      	beq.n	8006114 <HAL_RCC_OscConfig+0xe8>
 8006132:	e014      	b.n	800615e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006134:	f7fe fa76 	bl	8004624 <HAL_GetTick>
 8006138:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800613a:	e008      	b.n	800614e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800613c:	f7fe fa72 	bl	8004624 <HAL_GetTick>
 8006140:	4602      	mov	r2, r0
 8006142:	693b      	ldr	r3, [r7, #16]
 8006144:	1ad3      	subs	r3, r2, r3
 8006146:	2b64      	cmp	r3, #100	; 0x64
 8006148:	d901      	bls.n	800614e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800614a:	2303      	movs	r3, #3
 800614c:	e20b      	b.n	8006566 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800614e:	4b57      	ldr	r3, [pc, #348]	; (80062ac <HAL_RCC_OscConfig+0x280>)
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006156:	2b00      	cmp	r3, #0
 8006158:	d1f0      	bne.n	800613c <HAL_RCC_OscConfig+0x110>
 800615a:	e000      	b.n	800615e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800615c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f003 0302 	and.w	r3, r3, #2
 8006166:	2b00      	cmp	r3, #0
 8006168:	d069      	beq.n	800623e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800616a:	4b50      	ldr	r3, [pc, #320]	; (80062ac <HAL_RCC_OscConfig+0x280>)
 800616c:	689b      	ldr	r3, [r3, #8]
 800616e:	f003 030c 	and.w	r3, r3, #12
 8006172:	2b00      	cmp	r3, #0
 8006174:	d00b      	beq.n	800618e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006176:	4b4d      	ldr	r3, [pc, #308]	; (80062ac <HAL_RCC_OscConfig+0x280>)
 8006178:	689b      	ldr	r3, [r3, #8]
 800617a:	f003 030c 	and.w	r3, r3, #12
 800617e:	2b08      	cmp	r3, #8
 8006180:	d11c      	bne.n	80061bc <HAL_RCC_OscConfig+0x190>
 8006182:	4b4a      	ldr	r3, [pc, #296]	; (80062ac <HAL_RCC_OscConfig+0x280>)
 8006184:	685b      	ldr	r3, [r3, #4]
 8006186:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800618a:	2b00      	cmp	r3, #0
 800618c:	d116      	bne.n	80061bc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800618e:	4b47      	ldr	r3, [pc, #284]	; (80062ac <HAL_RCC_OscConfig+0x280>)
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f003 0302 	and.w	r3, r3, #2
 8006196:	2b00      	cmp	r3, #0
 8006198:	d005      	beq.n	80061a6 <HAL_RCC_OscConfig+0x17a>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	68db      	ldr	r3, [r3, #12]
 800619e:	2b01      	cmp	r3, #1
 80061a0:	d001      	beq.n	80061a6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80061a2:	2301      	movs	r3, #1
 80061a4:	e1df      	b.n	8006566 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80061a6:	4b41      	ldr	r3, [pc, #260]	; (80062ac <HAL_RCC_OscConfig+0x280>)
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	691b      	ldr	r3, [r3, #16]
 80061b2:	00db      	lsls	r3, r3, #3
 80061b4:	493d      	ldr	r1, [pc, #244]	; (80062ac <HAL_RCC_OscConfig+0x280>)
 80061b6:	4313      	orrs	r3, r2
 80061b8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80061ba:	e040      	b.n	800623e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	68db      	ldr	r3, [r3, #12]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d023      	beq.n	800620c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80061c4:	4b39      	ldr	r3, [pc, #228]	; (80062ac <HAL_RCC_OscConfig+0x280>)
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	4a38      	ldr	r2, [pc, #224]	; (80062ac <HAL_RCC_OscConfig+0x280>)
 80061ca:	f043 0301 	orr.w	r3, r3, #1
 80061ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061d0:	f7fe fa28 	bl	8004624 <HAL_GetTick>
 80061d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80061d6:	e008      	b.n	80061ea <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80061d8:	f7fe fa24 	bl	8004624 <HAL_GetTick>
 80061dc:	4602      	mov	r2, r0
 80061de:	693b      	ldr	r3, [r7, #16]
 80061e0:	1ad3      	subs	r3, r2, r3
 80061e2:	2b02      	cmp	r3, #2
 80061e4:	d901      	bls.n	80061ea <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80061e6:	2303      	movs	r3, #3
 80061e8:	e1bd      	b.n	8006566 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80061ea:	4b30      	ldr	r3, [pc, #192]	; (80062ac <HAL_RCC_OscConfig+0x280>)
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f003 0302 	and.w	r3, r3, #2
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d0f0      	beq.n	80061d8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80061f6:	4b2d      	ldr	r3, [pc, #180]	; (80062ac <HAL_RCC_OscConfig+0x280>)
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	691b      	ldr	r3, [r3, #16]
 8006202:	00db      	lsls	r3, r3, #3
 8006204:	4929      	ldr	r1, [pc, #164]	; (80062ac <HAL_RCC_OscConfig+0x280>)
 8006206:	4313      	orrs	r3, r2
 8006208:	600b      	str	r3, [r1, #0]
 800620a:	e018      	b.n	800623e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800620c:	4b27      	ldr	r3, [pc, #156]	; (80062ac <HAL_RCC_OscConfig+0x280>)
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	4a26      	ldr	r2, [pc, #152]	; (80062ac <HAL_RCC_OscConfig+0x280>)
 8006212:	f023 0301 	bic.w	r3, r3, #1
 8006216:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006218:	f7fe fa04 	bl	8004624 <HAL_GetTick>
 800621c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800621e:	e008      	b.n	8006232 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006220:	f7fe fa00 	bl	8004624 <HAL_GetTick>
 8006224:	4602      	mov	r2, r0
 8006226:	693b      	ldr	r3, [r7, #16]
 8006228:	1ad3      	subs	r3, r2, r3
 800622a:	2b02      	cmp	r3, #2
 800622c:	d901      	bls.n	8006232 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800622e:	2303      	movs	r3, #3
 8006230:	e199      	b.n	8006566 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006232:	4b1e      	ldr	r3, [pc, #120]	; (80062ac <HAL_RCC_OscConfig+0x280>)
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f003 0302 	and.w	r3, r3, #2
 800623a:	2b00      	cmp	r3, #0
 800623c:	d1f0      	bne.n	8006220 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f003 0308 	and.w	r3, r3, #8
 8006246:	2b00      	cmp	r3, #0
 8006248:	d038      	beq.n	80062bc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	695b      	ldr	r3, [r3, #20]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d019      	beq.n	8006286 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006252:	4b16      	ldr	r3, [pc, #88]	; (80062ac <HAL_RCC_OscConfig+0x280>)
 8006254:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006256:	4a15      	ldr	r2, [pc, #84]	; (80062ac <HAL_RCC_OscConfig+0x280>)
 8006258:	f043 0301 	orr.w	r3, r3, #1
 800625c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800625e:	f7fe f9e1 	bl	8004624 <HAL_GetTick>
 8006262:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006264:	e008      	b.n	8006278 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006266:	f7fe f9dd 	bl	8004624 <HAL_GetTick>
 800626a:	4602      	mov	r2, r0
 800626c:	693b      	ldr	r3, [r7, #16]
 800626e:	1ad3      	subs	r3, r2, r3
 8006270:	2b02      	cmp	r3, #2
 8006272:	d901      	bls.n	8006278 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006274:	2303      	movs	r3, #3
 8006276:	e176      	b.n	8006566 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006278:	4b0c      	ldr	r3, [pc, #48]	; (80062ac <HAL_RCC_OscConfig+0x280>)
 800627a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800627c:	f003 0302 	and.w	r3, r3, #2
 8006280:	2b00      	cmp	r3, #0
 8006282:	d0f0      	beq.n	8006266 <HAL_RCC_OscConfig+0x23a>
 8006284:	e01a      	b.n	80062bc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006286:	4b09      	ldr	r3, [pc, #36]	; (80062ac <HAL_RCC_OscConfig+0x280>)
 8006288:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800628a:	4a08      	ldr	r2, [pc, #32]	; (80062ac <HAL_RCC_OscConfig+0x280>)
 800628c:	f023 0301 	bic.w	r3, r3, #1
 8006290:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006292:	f7fe f9c7 	bl	8004624 <HAL_GetTick>
 8006296:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006298:	e00a      	b.n	80062b0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800629a:	f7fe f9c3 	bl	8004624 <HAL_GetTick>
 800629e:	4602      	mov	r2, r0
 80062a0:	693b      	ldr	r3, [r7, #16]
 80062a2:	1ad3      	subs	r3, r2, r3
 80062a4:	2b02      	cmp	r3, #2
 80062a6:	d903      	bls.n	80062b0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80062a8:	2303      	movs	r3, #3
 80062aa:	e15c      	b.n	8006566 <HAL_RCC_OscConfig+0x53a>
 80062ac:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80062b0:	4b91      	ldr	r3, [pc, #580]	; (80064f8 <HAL_RCC_OscConfig+0x4cc>)
 80062b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80062b4:	f003 0302 	and.w	r3, r3, #2
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d1ee      	bne.n	800629a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f003 0304 	and.w	r3, r3, #4
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	f000 80a4 	beq.w	8006412 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80062ca:	4b8b      	ldr	r3, [pc, #556]	; (80064f8 <HAL_RCC_OscConfig+0x4cc>)
 80062cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d10d      	bne.n	80062f2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80062d6:	4b88      	ldr	r3, [pc, #544]	; (80064f8 <HAL_RCC_OscConfig+0x4cc>)
 80062d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062da:	4a87      	ldr	r2, [pc, #540]	; (80064f8 <HAL_RCC_OscConfig+0x4cc>)
 80062dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80062e0:	6413      	str	r3, [r2, #64]	; 0x40
 80062e2:	4b85      	ldr	r3, [pc, #532]	; (80064f8 <HAL_RCC_OscConfig+0x4cc>)
 80062e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80062ea:	60bb      	str	r3, [r7, #8]
 80062ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80062ee:	2301      	movs	r3, #1
 80062f0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80062f2:	4b82      	ldr	r3, [pc, #520]	; (80064fc <HAL_RCC_OscConfig+0x4d0>)
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d118      	bne.n	8006330 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80062fe:	4b7f      	ldr	r3, [pc, #508]	; (80064fc <HAL_RCC_OscConfig+0x4d0>)
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	4a7e      	ldr	r2, [pc, #504]	; (80064fc <HAL_RCC_OscConfig+0x4d0>)
 8006304:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006308:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800630a:	f7fe f98b 	bl	8004624 <HAL_GetTick>
 800630e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006310:	e008      	b.n	8006324 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006312:	f7fe f987 	bl	8004624 <HAL_GetTick>
 8006316:	4602      	mov	r2, r0
 8006318:	693b      	ldr	r3, [r7, #16]
 800631a:	1ad3      	subs	r3, r2, r3
 800631c:	2b64      	cmp	r3, #100	; 0x64
 800631e:	d901      	bls.n	8006324 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8006320:	2303      	movs	r3, #3
 8006322:	e120      	b.n	8006566 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006324:	4b75      	ldr	r3, [pc, #468]	; (80064fc <HAL_RCC_OscConfig+0x4d0>)
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800632c:	2b00      	cmp	r3, #0
 800632e:	d0f0      	beq.n	8006312 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	689b      	ldr	r3, [r3, #8]
 8006334:	2b01      	cmp	r3, #1
 8006336:	d106      	bne.n	8006346 <HAL_RCC_OscConfig+0x31a>
 8006338:	4b6f      	ldr	r3, [pc, #444]	; (80064f8 <HAL_RCC_OscConfig+0x4cc>)
 800633a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800633c:	4a6e      	ldr	r2, [pc, #440]	; (80064f8 <HAL_RCC_OscConfig+0x4cc>)
 800633e:	f043 0301 	orr.w	r3, r3, #1
 8006342:	6713      	str	r3, [r2, #112]	; 0x70
 8006344:	e02d      	b.n	80063a2 <HAL_RCC_OscConfig+0x376>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	689b      	ldr	r3, [r3, #8]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d10c      	bne.n	8006368 <HAL_RCC_OscConfig+0x33c>
 800634e:	4b6a      	ldr	r3, [pc, #424]	; (80064f8 <HAL_RCC_OscConfig+0x4cc>)
 8006350:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006352:	4a69      	ldr	r2, [pc, #420]	; (80064f8 <HAL_RCC_OscConfig+0x4cc>)
 8006354:	f023 0301 	bic.w	r3, r3, #1
 8006358:	6713      	str	r3, [r2, #112]	; 0x70
 800635a:	4b67      	ldr	r3, [pc, #412]	; (80064f8 <HAL_RCC_OscConfig+0x4cc>)
 800635c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800635e:	4a66      	ldr	r2, [pc, #408]	; (80064f8 <HAL_RCC_OscConfig+0x4cc>)
 8006360:	f023 0304 	bic.w	r3, r3, #4
 8006364:	6713      	str	r3, [r2, #112]	; 0x70
 8006366:	e01c      	b.n	80063a2 <HAL_RCC_OscConfig+0x376>
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	689b      	ldr	r3, [r3, #8]
 800636c:	2b05      	cmp	r3, #5
 800636e:	d10c      	bne.n	800638a <HAL_RCC_OscConfig+0x35e>
 8006370:	4b61      	ldr	r3, [pc, #388]	; (80064f8 <HAL_RCC_OscConfig+0x4cc>)
 8006372:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006374:	4a60      	ldr	r2, [pc, #384]	; (80064f8 <HAL_RCC_OscConfig+0x4cc>)
 8006376:	f043 0304 	orr.w	r3, r3, #4
 800637a:	6713      	str	r3, [r2, #112]	; 0x70
 800637c:	4b5e      	ldr	r3, [pc, #376]	; (80064f8 <HAL_RCC_OscConfig+0x4cc>)
 800637e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006380:	4a5d      	ldr	r2, [pc, #372]	; (80064f8 <HAL_RCC_OscConfig+0x4cc>)
 8006382:	f043 0301 	orr.w	r3, r3, #1
 8006386:	6713      	str	r3, [r2, #112]	; 0x70
 8006388:	e00b      	b.n	80063a2 <HAL_RCC_OscConfig+0x376>
 800638a:	4b5b      	ldr	r3, [pc, #364]	; (80064f8 <HAL_RCC_OscConfig+0x4cc>)
 800638c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800638e:	4a5a      	ldr	r2, [pc, #360]	; (80064f8 <HAL_RCC_OscConfig+0x4cc>)
 8006390:	f023 0301 	bic.w	r3, r3, #1
 8006394:	6713      	str	r3, [r2, #112]	; 0x70
 8006396:	4b58      	ldr	r3, [pc, #352]	; (80064f8 <HAL_RCC_OscConfig+0x4cc>)
 8006398:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800639a:	4a57      	ldr	r2, [pc, #348]	; (80064f8 <HAL_RCC_OscConfig+0x4cc>)
 800639c:	f023 0304 	bic.w	r3, r3, #4
 80063a0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	689b      	ldr	r3, [r3, #8]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d015      	beq.n	80063d6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063aa:	f7fe f93b 	bl	8004624 <HAL_GetTick>
 80063ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80063b0:	e00a      	b.n	80063c8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80063b2:	f7fe f937 	bl	8004624 <HAL_GetTick>
 80063b6:	4602      	mov	r2, r0
 80063b8:	693b      	ldr	r3, [r7, #16]
 80063ba:	1ad3      	subs	r3, r2, r3
 80063bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d901      	bls.n	80063c8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80063c4:	2303      	movs	r3, #3
 80063c6:	e0ce      	b.n	8006566 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80063c8:	4b4b      	ldr	r3, [pc, #300]	; (80064f8 <HAL_RCC_OscConfig+0x4cc>)
 80063ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063cc:	f003 0302 	and.w	r3, r3, #2
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d0ee      	beq.n	80063b2 <HAL_RCC_OscConfig+0x386>
 80063d4:	e014      	b.n	8006400 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063d6:	f7fe f925 	bl	8004624 <HAL_GetTick>
 80063da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80063dc:	e00a      	b.n	80063f4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80063de:	f7fe f921 	bl	8004624 <HAL_GetTick>
 80063e2:	4602      	mov	r2, r0
 80063e4:	693b      	ldr	r3, [r7, #16]
 80063e6:	1ad3      	subs	r3, r2, r3
 80063e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d901      	bls.n	80063f4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80063f0:	2303      	movs	r3, #3
 80063f2:	e0b8      	b.n	8006566 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80063f4:	4b40      	ldr	r3, [pc, #256]	; (80064f8 <HAL_RCC_OscConfig+0x4cc>)
 80063f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063f8:	f003 0302 	and.w	r3, r3, #2
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d1ee      	bne.n	80063de <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006400:	7dfb      	ldrb	r3, [r7, #23]
 8006402:	2b01      	cmp	r3, #1
 8006404:	d105      	bne.n	8006412 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006406:	4b3c      	ldr	r3, [pc, #240]	; (80064f8 <HAL_RCC_OscConfig+0x4cc>)
 8006408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800640a:	4a3b      	ldr	r2, [pc, #236]	; (80064f8 <HAL_RCC_OscConfig+0x4cc>)
 800640c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006410:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	699b      	ldr	r3, [r3, #24]
 8006416:	2b00      	cmp	r3, #0
 8006418:	f000 80a4 	beq.w	8006564 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800641c:	4b36      	ldr	r3, [pc, #216]	; (80064f8 <HAL_RCC_OscConfig+0x4cc>)
 800641e:	689b      	ldr	r3, [r3, #8]
 8006420:	f003 030c 	and.w	r3, r3, #12
 8006424:	2b08      	cmp	r3, #8
 8006426:	d06b      	beq.n	8006500 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	699b      	ldr	r3, [r3, #24]
 800642c:	2b02      	cmp	r3, #2
 800642e:	d149      	bne.n	80064c4 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006430:	4b31      	ldr	r3, [pc, #196]	; (80064f8 <HAL_RCC_OscConfig+0x4cc>)
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	4a30      	ldr	r2, [pc, #192]	; (80064f8 <HAL_RCC_OscConfig+0x4cc>)
 8006436:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800643a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800643c:	f7fe f8f2 	bl	8004624 <HAL_GetTick>
 8006440:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006442:	e008      	b.n	8006456 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006444:	f7fe f8ee 	bl	8004624 <HAL_GetTick>
 8006448:	4602      	mov	r2, r0
 800644a:	693b      	ldr	r3, [r7, #16]
 800644c:	1ad3      	subs	r3, r2, r3
 800644e:	2b02      	cmp	r3, #2
 8006450:	d901      	bls.n	8006456 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8006452:	2303      	movs	r3, #3
 8006454:	e087      	b.n	8006566 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006456:	4b28      	ldr	r3, [pc, #160]	; (80064f8 <HAL_RCC_OscConfig+0x4cc>)
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800645e:	2b00      	cmp	r3, #0
 8006460:	d1f0      	bne.n	8006444 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	69da      	ldr	r2, [r3, #28]
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6a1b      	ldr	r3, [r3, #32]
 800646a:	431a      	orrs	r2, r3
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006470:	019b      	lsls	r3, r3, #6
 8006472:	431a      	orrs	r2, r3
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006478:	085b      	lsrs	r3, r3, #1
 800647a:	3b01      	subs	r3, #1
 800647c:	041b      	lsls	r3, r3, #16
 800647e:	431a      	orrs	r2, r3
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006484:	061b      	lsls	r3, r3, #24
 8006486:	4313      	orrs	r3, r2
 8006488:	4a1b      	ldr	r2, [pc, #108]	; (80064f8 <HAL_RCC_OscConfig+0x4cc>)
 800648a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800648e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006490:	4b19      	ldr	r3, [pc, #100]	; (80064f8 <HAL_RCC_OscConfig+0x4cc>)
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	4a18      	ldr	r2, [pc, #96]	; (80064f8 <HAL_RCC_OscConfig+0x4cc>)
 8006496:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800649a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800649c:	f7fe f8c2 	bl	8004624 <HAL_GetTick>
 80064a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80064a2:	e008      	b.n	80064b6 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80064a4:	f7fe f8be 	bl	8004624 <HAL_GetTick>
 80064a8:	4602      	mov	r2, r0
 80064aa:	693b      	ldr	r3, [r7, #16]
 80064ac:	1ad3      	subs	r3, r2, r3
 80064ae:	2b02      	cmp	r3, #2
 80064b0:	d901      	bls.n	80064b6 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80064b2:	2303      	movs	r3, #3
 80064b4:	e057      	b.n	8006566 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80064b6:	4b10      	ldr	r3, [pc, #64]	; (80064f8 <HAL_RCC_OscConfig+0x4cc>)
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d0f0      	beq.n	80064a4 <HAL_RCC_OscConfig+0x478>
 80064c2:	e04f      	b.n	8006564 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80064c4:	4b0c      	ldr	r3, [pc, #48]	; (80064f8 <HAL_RCC_OscConfig+0x4cc>)
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	4a0b      	ldr	r2, [pc, #44]	; (80064f8 <HAL_RCC_OscConfig+0x4cc>)
 80064ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80064ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064d0:	f7fe f8a8 	bl	8004624 <HAL_GetTick>
 80064d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80064d6:	e008      	b.n	80064ea <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80064d8:	f7fe f8a4 	bl	8004624 <HAL_GetTick>
 80064dc:	4602      	mov	r2, r0
 80064de:	693b      	ldr	r3, [r7, #16]
 80064e0:	1ad3      	subs	r3, r2, r3
 80064e2:	2b02      	cmp	r3, #2
 80064e4:	d901      	bls.n	80064ea <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80064e6:	2303      	movs	r3, #3
 80064e8:	e03d      	b.n	8006566 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80064ea:	4b03      	ldr	r3, [pc, #12]	; (80064f8 <HAL_RCC_OscConfig+0x4cc>)
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d1f0      	bne.n	80064d8 <HAL_RCC_OscConfig+0x4ac>
 80064f6:	e035      	b.n	8006564 <HAL_RCC_OscConfig+0x538>
 80064f8:	40023800 	.word	0x40023800
 80064fc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8006500:	4b1b      	ldr	r3, [pc, #108]	; (8006570 <HAL_RCC_OscConfig+0x544>)
 8006502:	685b      	ldr	r3, [r3, #4]
 8006504:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	699b      	ldr	r3, [r3, #24]
 800650a:	2b01      	cmp	r3, #1
 800650c:	d028      	beq.n	8006560 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006518:	429a      	cmp	r2, r3
 800651a:	d121      	bne.n	8006560 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006526:	429a      	cmp	r2, r3
 8006528:	d11a      	bne.n	8006560 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800652a:	68fa      	ldr	r2, [r7, #12]
 800652c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006530:	4013      	ands	r3, r2
 8006532:	687a      	ldr	r2, [r7, #4]
 8006534:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006536:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006538:	4293      	cmp	r3, r2
 800653a:	d111      	bne.n	8006560 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006546:	085b      	lsrs	r3, r3, #1
 8006548:	3b01      	subs	r3, #1
 800654a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800654c:	429a      	cmp	r2, r3
 800654e:	d107      	bne.n	8006560 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800655a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800655c:	429a      	cmp	r2, r3
 800655e:	d001      	beq.n	8006564 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8006560:	2301      	movs	r3, #1
 8006562:	e000      	b.n	8006566 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8006564:	2300      	movs	r3, #0
}
 8006566:	4618      	mov	r0, r3
 8006568:	3718      	adds	r7, #24
 800656a:	46bd      	mov	sp, r7
 800656c:	bd80      	pop	{r7, pc}
 800656e:	bf00      	nop
 8006570:	40023800 	.word	0x40023800

08006574 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006574:	b580      	push	{r7, lr}
 8006576:	b084      	sub	sp, #16
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
 800657c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800657e:	2300      	movs	r3, #0
 8006580:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d101      	bne.n	800658c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006588:	2301      	movs	r3, #1
 800658a:	e0d0      	b.n	800672e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800658c:	4b6a      	ldr	r3, [pc, #424]	; (8006738 <HAL_RCC_ClockConfig+0x1c4>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f003 030f 	and.w	r3, r3, #15
 8006594:	683a      	ldr	r2, [r7, #0]
 8006596:	429a      	cmp	r2, r3
 8006598:	d910      	bls.n	80065bc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800659a:	4b67      	ldr	r3, [pc, #412]	; (8006738 <HAL_RCC_ClockConfig+0x1c4>)
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f023 020f 	bic.w	r2, r3, #15
 80065a2:	4965      	ldr	r1, [pc, #404]	; (8006738 <HAL_RCC_ClockConfig+0x1c4>)
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	4313      	orrs	r3, r2
 80065a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80065aa:	4b63      	ldr	r3, [pc, #396]	; (8006738 <HAL_RCC_ClockConfig+0x1c4>)
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f003 030f 	and.w	r3, r3, #15
 80065b2:	683a      	ldr	r2, [r7, #0]
 80065b4:	429a      	cmp	r2, r3
 80065b6:	d001      	beq.n	80065bc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80065b8:	2301      	movs	r3, #1
 80065ba:	e0b8      	b.n	800672e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f003 0302 	and.w	r3, r3, #2
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d020      	beq.n	800660a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f003 0304 	and.w	r3, r3, #4
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d005      	beq.n	80065e0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80065d4:	4b59      	ldr	r3, [pc, #356]	; (800673c <HAL_RCC_ClockConfig+0x1c8>)
 80065d6:	689b      	ldr	r3, [r3, #8]
 80065d8:	4a58      	ldr	r2, [pc, #352]	; (800673c <HAL_RCC_ClockConfig+0x1c8>)
 80065da:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80065de:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f003 0308 	and.w	r3, r3, #8
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d005      	beq.n	80065f8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80065ec:	4b53      	ldr	r3, [pc, #332]	; (800673c <HAL_RCC_ClockConfig+0x1c8>)
 80065ee:	689b      	ldr	r3, [r3, #8]
 80065f0:	4a52      	ldr	r2, [pc, #328]	; (800673c <HAL_RCC_ClockConfig+0x1c8>)
 80065f2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80065f6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80065f8:	4b50      	ldr	r3, [pc, #320]	; (800673c <HAL_RCC_ClockConfig+0x1c8>)
 80065fa:	689b      	ldr	r3, [r3, #8]
 80065fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	689b      	ldr	r3, [r3, #8]
 8006604:	494d      	ldr	r1, [pc, #308]	; (800673c <HAL_RCC_ClockConfig+0x1c8>)
 8006606:	4313      	orrs	r3, r2
 8006608:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f003 0301 	and.w	r3, r3, #1
 8006612:	2b00      	cmp	r3, #0
 8006614:	d040      	beq.n	8006698 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	685b      	ldr	r3, [r3, #4]
 800661a:	2b01      	cmp	r3, #1
 800661c:	d107      	bne.n	800662e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800661e:	4b47      	ldr	r3, [pc, #284]	; (800673c <HAL_RCC_ClockConfig+0x1c8>)
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006626:	2b00      	cmp	r3, #0
 8006628:	d115      	bne.n	8006656 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800662a:	2301      	movs	r3, #1
 800662c:	e07f      	b.n	800672e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	685b      	ldr	r3, [r3, #4]
 8006632:	2b02      	cmp	r3, #2
 8006634:	d107      	bne.n	8006646 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006636:	4b41      	ldr	r3, [pc, #260]	; (800673c <HAL_RCC_ClockConfig+0x1c8>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800663e:	2b00      	cmp	r3, #0
 8006640:	d109      	bne.n	8006656 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006642:	2301      	movs	r3, #1
 8006644:	e073      	b.n	800672e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006646:	4b3d      	ldr	r3, [pc, #244]	; (800673c <HAL_RCC_ClockConfig+0x1c8>)
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f003 0302 	and.w	r3, r3, #2
 800664e:	2b00      	cmp	r3, #0
 8006650:	d101      	bne.n	8006656 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006652:	2301      	movs	r3, #1
 8006654:	e06b      	b.n	800672e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006656:	4b39      	ldr	r3, [pc, #228]	; (800673c <HAL_RCC_ClockConfig+0x1c8>)
 8006658:	689b      	ldr	r3, [r3, #8]
 800665a:	f023 0203 	bic.w	r2, r3, #3
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	685b      	ldr	r3, [r3, #4]
 8006662:	4936      	ldr	r1, [pc, #216]	; (800673c <HAL_RCC_ClockConfig+0x1c8>)
 8006664:	4313      	orrs	r3, r2
 8006666:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006668:	f7fd ffdc 	bl	8004624 <HAL_GetTick>
 800666c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800666e:	e00a      	b.n	8006686 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006670:	f7fd ffd8 	bl	8004624 <HAL_GetTick>
 8006674:	4602      	mov	r2, r0
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	1ad3      	subs	r3, r2, r3
 800667a:	f241 3288 	movw	r2, #5000	; 0x1388
 800667e:	4293      	cmp	r3, r2
 8006680:	d901      	bls.n	8006686 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8006682:	2303      	movs	r3, #3
 8006684:	e053      	b.n	800672e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006686:	4b2d      	ldr	r3, [pc, #180]	; (800673c <HAL_RCC_ClockConfig+0x1c8>)
 8006688:	689b      	ldr	r3, [r3, #8]
 800668a:	f003 020c 	and.w	r2, r3, #12
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	685b      	ldr	r3, [r3, #4]
 8006692:	009b      	lsls	r3, r3, #2
 8006694:	429a      	cmp	r2, r3
 8006696:	d1eb      	bne.n	8006670 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006698:	4b27      	ldr	r3, [pc, #156]	; (8006738 <HAL_RCC_ClockConfig+0x1c4>)
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f003 030f 	and.w	r3, r3, #15
 80066a0:	683a      	ldr	r2, [r7, #0]
 80066a2:	429a      	cmp	r2, r3
 80066a4:	d210      	bcs.n	80066c8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80066a6:	4b24      	ldr	r3, [pc, #144]	; (8006738 <HAL_RCC_ClockConfig+0x1c4>)
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f023 020f 	bic.w	r2, r3, #15
 80066ae:	4922      	ldr	r1, [pc, #136]	; (8006738 <HAL_RCC_ClockConfig+0x1c4>)
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	4313      	orrs	r3, r2
 80066b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80066b6:	4b20      	ldr	r3, [pc, #128]	; (8006738 <HAL_RCC_ClockConfig+0x1c4>)
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f003 030f 	and.w	r3, r3, #15
 80066be:	683a      	ldr	r2, [r7, #0]
 80066c0:	429a      	cmp	r2, r3
 80066c2:	d001      	beq.n	80066c8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80066c4:	2301      	movs	r3, #1
 80066c6:	e032      	b.n	800672e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f003 0304 	and.w	r3, r3, #4
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d008      	beq.n	80066e6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80066d4:	4b19      	ldr	r3, [pc, #100]	; (800673c <HAL_RCC_ClockConfig+0x1c8>)
 80066d6:	689b      	ldr	r3, [r3, #8]
 80066d8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	68db      	ldr	r3, [r3, #12]
 80066e0:	4916      	ldr	r1, [pc, #88]	; (800673c <HAL_RCC_ClockConfig+0x1c8>)
 80066e2:	4313      	orrs	r3, r2
 80066e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f003 0308 	and.w	r3, r3, #8
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d009      	beq.n	8006706 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80066f2:	4b12      	ldr	r3, [pc, #72]	; (800673c <HAL_RCC_ClockConfig+0x1c8>)
 80066f4:	689b      	ldr	r3, [r3, #8]
 80066f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	691b      	ldr	r3, [r3, #16]
 80066fe:	00db      	lsls	r3, r3, #3
 8006700:	490e      	ldr	r1, [pc, #56]	; (800673c <HAL_RCC_ClockConfig+0x1c8>)
 8006702:	4313      	orrs	r3, r2
 8006704:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006706:	f000 f821 	bl	800674c <HAL_RCC_GetSysClockFreq>
 800670a:	4602      	mov	r2, r0
 800670c:	4b0b      	ldr	r3, [pc, #44]	; (800673c <HAL_RCC_ClockConfig+0x1c8>)
 800670e:	689b      	ldr	r3, [r3, #8]
 8006710:	091b      	lsrs	r3, r3, #4
 8006712:	f003 030f 	and.w	r3, r3, #15
 8006716:	490a      	ldr	r1, [pc, #40]	; (8006740 <HAL_RCC_ClockConfig+0x1cc>)
 8006718:	5ccb      	ldrb	r3, [r1, r3]
 800671a:	fa22 f303 	lsr.w	r3, r2, r3
 800671e:	4a09      	ldr	r2, [pc, #36]	; (8006744 <HAL_RCC_ClockConfig+0x1d0>)
 8006720:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006722:	4b09      	ldr	r3, [pc, #36]	; (8006748 <HAL_RCC_ClockConfig+0x1d4>)
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	4618      	mov	r0, r3
 8006728:	f7fd ff38 	bl	800459c <HAL_InitTick>

  return HAL_OK;
 800672c:	2300      	movs	r3, #0
}
 800672e:	4618      	mov	r0, r3
 8006730:	3710      	adds	r7, #16
 8006732:	46bd      	mov	sp, r7
 8006734:	bd80      	pop	{r7, pc}
 8006736:	bf00      	nop
 8006738:	40023c00 	.word	0x40023c00
 800673c:	40023800 	.word	0x40023800
 8006740:	0804c918 	.word	0x0804c918
 8006744:	20000000 	.word	0x20000000
 8006748:	20000038 	.word	0x20000038

0800674c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800674c:	b5b0      	push	{r4, r5, r7, lr}
 800674e:	b084      	sub	sp, #16
 8006750:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8006752:	2100      	movs	r1, #0
 8006754:	6079      	str	r1, [r7, #4]
 8006756:	2100      	movs	r1, #0
 8006758:	60f9      	str	r1, [r7, #12]
 800675a:	2100      	movs	r1, #0
 800675c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 800675e:	2100      	movs	r1, #0
 8006760:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006762:	4952      	ldr	r1, [pc, #328]	; (80068ac <HAL_RCC_GetSysClockFreq+0x160>)
 8006764:	6889      	ldr	r1, [r1, #8]
 8006766:	f001 010c 	and.w	r1, r1, #12
 800676a:	2908      	cmp	r1, #8
 800676c:	d00d      	beq.n	800678a <HAL_RCC_GetSysClockFreq+0x3e>
 800676e:	2908      	cmp	r1, #8
 8006770:	f200 8094 	bhi.w	800689c <HAL_RCC_GetSysClockFreq+0x150>
 8006774:	2900      	cmp	r1, #0
 8006776:	d002      	beq.n	800677e <HAL_RCC_GetSysClockFreq+0x32>
 8006778:	2904      	cmp	r1, #4
 800677a:	d003      	beq.n	8006784 <HAL_RCC_GetSysClockFreq+0x38>
 800677c:	e08e      	b.n	800689c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800677e:	4b4c      	ldr	r3, [pc, #304]	; (80068b0 <HAL_RCC_GetSysClockFreq+0x164>)
 8006780:	60bb      	str	r3, [r7, #8]
      break;
 8006782:	e08e      	b.n	80068a2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006784:	4b4b      	ldr	r3, [pc, #300]	; (80068b4 <HAL_RCC_GetSysClockFreq+0x168>)
 8006786:	60bb      	str	r3, [r7, #8]
      break;
 8006788:	e08b      	b.n	80068a2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800678a:	4948      	ldr	r1, [pc, #288]	; (80068ac <HAL_RCC_GetSysClockFreq+0x160>)
 800678c:	6849      	ldr	r1, [r1, #4]
 800678e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8006792:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8006794:	4945      	ldr	r1, [pc, #276]	; (80068ac <HAL_RCC_GetSysClockFreq+0x160>)
 8006796:	6849      	ldr	r1, [r1, #4]
 8006798:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800679c:	2900      	cmp	r1, #0
 800679e:	d024      	beq.n	80067ea <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80067a0:	4942      	ldr	r1, [pc, #264]	; (80068ac <HAL_RCC_GetSysClockFreq+0x160>)
 80067a2:	6849      	ldr	r1, [r1, #4]
 80067a4:	0989      	lsrs	r1, r1, #6
 80067a6:	4608      	mov	r0, r1
 80067a8:	f04f 0100 	mov.w	r1, #0
 80067ac:	f240 14ff 	movw	r4, #511	; 0x1ff
 80067b0:	f04f 0500 	mov.w	r5, #0
 80067b4:	ea00 0204 	and.w	r2, r0, r4
 80067b8:	ea01 0305 	and.w	r3, r1, r5
 80067bc:	493d      	ldr	r1, [pc, #244]	; (80068b4 <HAL_RCC_GetSysClockFreq+0x168>)
 80067be:	fb01 f003 	mul.w	r0, r1, r3
 80067c2:	2100      	movs	r1, #0
 80067c4:	fb01 f102 	mul.w	r1, r1, r2
 80067c8:	1844      	adds	r4, r0, r1
 80067ca:	493a      	ldr	r1, [pc, #232]	; (80068b4 <HAL_RCC_GetSysClockFreq+0x168>)
 80067cc:	fba2 0101 	umull	r0, r1, r2, r1
 80067d0:	1863      	adds	r3, r4, r1
 80067d2:	4619      	mov	r1, r3
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	461a      	mov	r2, r3
 80067d8:	f04f 0300 	mov.w	r3, #0
 80067dc:	f7fa f9ba 	bl	8000b54 <__aeabi_uldivmod>
 80067e0:	4602      	mov	r2, r0
 80067e2:	460b      	mov	r3, r1
 80067e4:	4613      	mov	r3, r2
 80067e6:	60fb      	str	r3, [r7, #12]
 80067e8:	e04a      	b.n	8006880 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80067ea:	4b30      	ldr	r3, [pc, #192]	; (80068ac <HAL_RCC_GetSysClockFreq+0x160>)
 80067ec:	685b      	ldr	r3, [r3, #4]
 80067ee:	099b      	lsrs	r3, r3, #6
 80067f0:	461a      	mov	r2, r3
 80067f2:	f04f 0300 	mov.w	r3, #0
 80067f6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80067fa:	f04f 0100 	mov.w	r1, #0
 80067fe:	ea02 0400 	and.w	r4, r2, r0
 8006802:	ea03 0501 	and.w	r5, r3, r1
 8006806:	4620      	mov	r0, r4
 8006808:	4629      	mov	r1, r5
 800680a:	f04f 0200 	mov.w	r2, #0
 800680e:	f04f 0300 	mov.w	r3, #0
 8006812:	014b      	lsls	r3, r1, #5
 8006814:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006818:	0142      	lsls	r2, r0, #5
 800681a:	4610      	mov	r0, r2
 800681c:	4619      	mov	r1, r3
 800681e:	1b00      	subs	r0, r0, r4
 8006820:	eb61 0105 	sbc.w	r1, r1, r5
 8006824:	f04f 0200 	mov.w	r2, #0
 8006828:	f04f 0300 	mov.w	r3, #0
 800682c:	018b      	lsls	r3, r1, #6
 800682e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006832:	0182      	lsls	r2, r0, #6
 8006834:	1a12      	subs	r2, r2, r0
 8006836:	eb63 0301 	sbc.w	r3, r3, r1
 800683a:	f04f 0000 	mov.w	r0, #0
 800683e:	f04f 0100 	mov.w	r1, #0
 8006842:	00d9      	lsls	r1, r3, #3
 8006844:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006848:	00d0      	lsls	r0, r2, #3
 800684a:	4602      	mov	r2, r0
 800684c:	460b      	mov	r3, r1
 800684e:	1912      	adds	r2, r2, r4
 8006850:	eb45 0303 	adc.w	r3, r5, r3
 8006854:	f04f 0000 	mov.w	r0, #0
 8006858:	f04f 0100 	mov.w	r1, #0
 800685c:	0299      	lsls	r1, r3, #10
 800685e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8006862:	0290      	lsls	r0, r2, #10
 8006864:	4602      	mov	r2, r0
 8006866:	460b      	mov	r3, r1
 8006868:	4610      	mov	r0, r2
 800686a:	4619      	mov	r1, r3
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	461a      	mov	r2, r3
 8006870:	f04f 0300 	mov.w	r3, #0
 8006874:	f7fa f96e 	bl	8000b54 <__aeabi_uldivmod>
 8006878:	4602      	mov	r2, r0
 800687a:	460b      	mov	r3, r1
 800687c:	4613      	mov	r3, r2
 800687e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8006880:	4b0a      	ldr	r3, [pc, #40]	; (80068ac <HAL_RCC_GetSysClockFreq+0x160>)
 8006882:	685b      	ldr	r3, [r3, #4]
 8006884:	0c1b      	lsrs	r3, r3, #16
 8006886:	f003 0303 	and.w	r3, r3, #3
 800688a:	3301      	adds	r3, #1
 800688c:	005b      	lsls	r3, r3, #1
 800688e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8006890:	68fa      	ldr	r2, [r7, #12]
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	fbb2 f3f3 	udiv	r3, r2, r3
 8006898:	60bb      	str	r3, [r7, #8]
      break;
 800689a:	e002      	b.n	80068a2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800689c:	4b04      	ldr	r3, [pc, #16]	; (80068b0 <HAL_RCC_GetSysClockFreq+0x164>)
 800689e:	60bb      	str	r3, [r7, #8]
      break;
 80068a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80068a2:	68bb      	ldr	r3, [r7, #8]
}
 80068a4:	4618      	mov	r0, r3
 80068a6:	3710      	adds	r7, #16
 80068a8:	46bd      	mov	sp, r7
 80068aa:	bdb0      	pop	{r4, r5, r7, pc}
 80068ac:	40023800 	.word	0x40023800
 80068b0:	00f42400 	.word	0x00f42400
 80068b4:	017d7840 	.word	0x017d7840

080068b8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80068b8:	b480      	push	{r7}
 80068ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80068bc:	4b03      	ldr	r3, [pc, #12]	; (80068cc <HAL_RCC_GetHCLKFreq+0x14>)
 80068be:	681b      	ldr	r3, [r3, #0]
}
 80068c0:	4618      	mov	r0, r3
 80068c2:	46bd      	mov	sp, r7
 80068c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c8:	4770      	bx	lr
 80068ca:	bf00      	nop
 80068cc:	20000000 	.word	0x20000000

080068d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80068d4:	f7ff fff0 	bl	80068b8 <HAL_RCC_GetHCLKFreq>
 80068d8:	4602      	mov	r2, r0
 80068da:	4b05      	ldr	r3, [pc, #20]	; (80068f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80068dc:	689b      	ldr	r3, [r3, #8]
 80068de:	0a9b      	lsrs	r3, r3, #10
 80068e0:	f003 0307 	and.w	r3, r3, #7
 80068e4:	4903      	ldr	r1, [pc, #12]	; (80068f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80068e6:	5ccb      	ldrb	r3, [r1, r3]
 80068e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80068ec:	4618      	mov	r0, r3
 80068ee:	bd80      	pop	{r7, pc}
 80068f0:	40023800 	.word	0x40023800
 80068f4:	0804c928 	.word	0x0804c928

080068f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80068fc:	f7ff ffdc 	bl	80068b8 <HAL_RCC_GetHCLKFreq>
 8006900:	4602      	mov	r2, r0
 8006902:	4b05      	ldr	r3, [pc, #20]	; (8006918 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006904:	689b      	ldr	r3, [r3, #8]
 8006906:	0b5b      	lsrs	r3, r3, #13
 8006908:	f003 0307 	and.w	r3, r3, #7
 800690c:	4903      	ldr	r1, [pc, #12]	; (800691c <HAL_RCC_GetPCLK2Freq+0x24>)
 800690e:	5ccb      	ldrb	r3, [r1, r3]
 8006910:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006914:	4618      	mov	r0, r3
 8006916:	bd80      	pop	{r7, pc}
 8006918:	40023800 	.word	0x40023800
 800691c:	0804c928 	.word	0x0804c928

08006920 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b088      	sub	sp, #32
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8006928:	2300      	movs	r3, #0
 800692a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800692c:	2300      	movs	r3, #0
 800692e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8006930:	2300      	movs	r3, #0
 8006932:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8006934:	2300      	movs	r3, #0
 8006936:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8006938:	2300      	movs	r3, #0
 800693a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f003 0301 	and.w	r3, r3, #1
 8006944:	2b00      	cmp	r3, #0
 8006946:	d012      	beq.n	800696e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006948:	4b69      	ldr	r3, [pc, #420]	; (8006af0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800694a:	689b      	ldr	r3, [r3, #8]
 800694c:	4a68      	ldr	r2, [pc, #416]	; (8006af0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800694e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8006952:	6093      	str	r3, [r2, #8]
 8006954:	4b66      	ldr	r3, [pc, #408]	; (8006af0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006956:	689a      	ldr	r2, [r3, #8]
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800695c:	4964      	ldr	r1, [pc, #400]	; (8006af0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800695e:	4313      	orrs	r3, r2
 8006960:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006966:	2b00      	cmp	r3, #0
 8006968:	d101      	bne.n	800696e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800696a:	2301      	movs	r3, #1
 800696c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006976:	2b00      	cmp	r3, #0
 8006978:	d017      	beq.n	80069aa <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800697a:	4b5d      	ldr	r3, [pc, #372]	; (8006af0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800697c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006980:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006988:	4959      	ldr	r1, [pc, #356]	; (8006af0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800698a:	4313      	orrs	r3, r2
 800698c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006994:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006998:	d101      	bne.n	800699e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800699a:	2301      	movs	r3, #1
 800699c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d101      	bne.n	80069aa <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80069a6:	2301      	movs	r3, #1
 80069a8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d017      	beq.n	80069e6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80069b6:	4b4e      	ldr	r3, [pc, #312]	; (8006af0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80069b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80069bc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069c4:	494a      	ldr	r1, [pc, #296]	; (8006af0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80069c6:	4313      	orrs	r3, r2
 80069c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80069d4:	d101      	bne.n	80069da <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80069d6:	2301      	movs	r3, #1
 80069d8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d101      	bne.n	80069e6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80069e2:	2301      	movs	r3, #1
 80069e4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d001      	beq.n	80069f6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80069f2:	2301      	movs	r3, #1
 80069f4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f003 0320 	and.w	r3, r3, #32
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	f000 808b 	beq.w	8006b1a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006a04:	4b3a      	ldr	r3, [pc, #232]	; (8006af0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a08:	4a39      	ldr	r2, [pc, #228]	; (8006af0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006a0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a0e:	6413      	str	r3, [r2, #64]	; 0x40
 8006a10:	4b37      	ldr	r3, [pc, #220]	; (8006af0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a18:	60bb      	str	r3, [r7, #8]
 8006a1a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006a1c:	4b35      	ldr	r3, [pc, #212]	; (8006af4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	4a34      	ldr	r2, [pc, #208]	; (8006af4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006a22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a26:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a28:	f7fd fdfc 	bl	8004624 <HAL_GetTick>
 8006a2c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006a2e:	e008      	b.n	8006a42 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a30:	f7fd fdf8 	bl	8004624 <HAL_GetTick>
 8006a34:	4602      	mov	r2, r0
 8006a36:	697b      	ldr	r3, [r7, #20]
 8006a38:	1ad3      	subs	r3, r2, r3
 8006a3a:	2b64      	cmp	r3, #100	; 0x64
 8006a3c:	d901      	bls.n	8006a42 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8006a3e:	2303      	movs	r3, #3
 8006a40:	e357      	b.n	80070f2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006a42:	4b2c      	ldr	r3, [pc, #176]	; (8006af4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d0f0      	beq.n	8006a30 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006a4e:	4b28      	ldr	r3, [pc, #160]	; (8006af0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006a50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a56:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006a58:	693b      	ldr	r3, [r7, #16]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d035      	beq.n	8006aca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a66:	693a      	ldr	r2, [r7, #16]
 8006a68:	429a      	cmp	r2, r3
 8006a6a:	d02e      	beq.n	8006aca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006a6c:	4b20      	ldr	r3, [pc, #128]	; (8006af0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006a6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a74:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006a76:	4b1e      	ldr	r3, [pc, #120]	; (8006af0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006a78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a7a:	4a1d      	ldr	r2, [pc, #116]	; (8006af0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006a7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a80:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006a82:	4b1b      	ldr	r3, [pc, #108]	; (8006af0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006a84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a86:	4a1a      	ldr	r2, [pc, #104]	; (8006af0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006a88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a8c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8006a8e:	4a18      	ldr	r2, [pc, #96]	; (8006af0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006a90:	693b      	ldr	r3, [r7, #16]
 8006a92:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006a94:	4b16      	ldr	r3, [pc, #88]	; (8006af0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006a96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a98:	f003 0301 	and.w	r3, r3, #1
 8006a9c:	2b01      	cmp	r3, #1
 8006a9e:	d114      	bne.n	8006aca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006aa0:	f7fd fdc0 	bl	8004624 <HAL_GetTick>
 8006aa4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006aa6:	e00a      	b.n	8006abe <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006aa8:	f7fd fdbc 	bl	8004624 <HAL_GetTick>
 8006aac:	4602      	mov	r2, r0
 8006aae:	697b      	ldr	r3, [r7, #20]
 8006ab0:	1ad3      	subs	r3, r2, r3
 8006ab2:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	d901      	bls.n	8006abe <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8006aba:	2303      	movs	r3, #3
 8006abc:	e319      	b.n	80070f2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006abe:	4b0c      	ldr	r3, [pc, #48]	; (8006af0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ac0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ac2:	f003 0302 	and.w	r3, r3, #2
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d0ee      	beq.n	8006aa8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ace:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ad2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006ad6:	d111      	bne.n	8006afc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8006ad8:	4b05      	ldr	r3, [pc, #20]	; (8006af0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ada:	689b      	ldr	r3, [r3, #8]
 8006adc:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006ae4:	4b04      	ldr	r3, [pc, #16]	; (8006af8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006ae6:	400b      	ands	r3, r1
 8006ae8:	4901      	ldr	r1, [pc, #4]	; (8006af0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006aea:	4313      	orrs	r3, r2
 8006aec:	608b      	str	r3, [r1, #8]
 8006aee:	e00b      	b.n	8006b08 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8006af0:	40023800 	.word	0x40023800
 8006af4:	40007000 	.word	0x40007000
 8006af8:	0ffffcff 	.word	0x0ffffcff
 8006afc:	4bb1      	ldr	r3, [pc, #708]	; (8006dc4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006afe:	689b      	ldr	r3, [r3, #8]
 8006b00:	4ab0      	ldr	r2, [pc, #704]	; (8006dc4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006b02:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006b06:	6093      	str	r3, [r2, #8]
 8006b08:	4bae      	ldr	r3, [pc, #696]	; (8006dc4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006b0a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006b14:	49ab      	ldr	r1, [pc, #684]	; (8006dc4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006b16:	4313      	orrs	r3, r2
 8006b18:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f003 0310 	and.w	r3, r3, #16
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d010      	beq.n	8006b48 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006b26:	4ba7      	ldr	r3, [pc, #668]	; (8006dc4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006b28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b2c:	4aa5      	ldr	r2, [pc, #660]	; (8006dc4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006b2e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006b32:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006b36:	4ba3      	ldr	r3, [pc, #652]	; (8006dc4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006b38:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b40:	49a0      	ldr	r1, [pc, #640]	; (8006dc4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006b42:	4313      	orrs	r3, r2
 8006b44:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d00a      	beq.n	8006b6a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006b54:	4b9b      	ldr	r3, [pc, #620]	; (8006dc4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006b56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b5a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006b62:	4998      	ldr	r1, [pc, #608]	; (8006dc4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006b64:	4313      	orrs	r3, r2
 8006b66:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d00a      	beq.n	8006b8c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006b76:	4b93      	ldr	r3, [pc, #588]	; (8006dc4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006b78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b7c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006b84:	498f      	ldr	r1, [pc, #572]	; (8006dc4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006b86:	4313      	orrs	r3, r2
 8006b88:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d00a      	beq.n	8006bae <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006b98:	4b8a      	ldr	r3, [pc, #552]	; (8006dc4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006b9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b9e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ba6:	4987      	ldr	r1, [pc, #540]	; (8006dc4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006ba8:	4313      	orrs	r3, r2
 8006baa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d00a      	beq.n	8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006bba:	4b82      	ldr	r3, [pc, #520]	; (8006dc4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006bbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bc0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bc8:	497e      	ldr	r1, [pc, #504]	; (8006dc4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006bca:	4313      	orrs	r3, r2
 8006bcc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d00a      	beq.n	8006bf2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006bdc:	4b79      	ldr	r3, [pc, #484]	; (8006dc4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006bde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006be2:	f023 0203 	bic.w	r2, r3, #3
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bea:	4976      	ldr	r1, [pc, #472]	; (8006dc4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006bec:	4313      	orrs	r3, r2
 8006bee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d00a      	beq.n	8006c14 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006bfe:	4b71      	ldr	r3, [pc, #452]	; (8006dc4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006c00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c04:	f023 020c 	bic.w	r2, r3, #12
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c0c:	496d      	ldr	r1, [pc, #436]	; (8006dc4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006c0e:	4313      	orrs	r3, r2
 8006c10:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d00a      	beq.n	8006c36 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006c20:	4b68      	ldr	r3, [pc, #416]	; (8006dc4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006c22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c26:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c2e:	4965      	ldr	r1, [pc, #404]	; (8006dc4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006c30:	4313      	orrs	r3, r2
 8006c32:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d00a      	beq.n	8006c58 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006c42:	4b60      	ldr	r3, [pc, #384]	; (8006dc4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006c44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c48:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c50:	495c      	ldr	r1, [pc, #368]	; (8006dc4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006c52:	4313      	orrs	r3, r2
 8006c54:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d00a      	beq.n	8006c7a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006c64:	4b57      	ldr	r3, [pc, #348]	; (8006dc4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006c66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c6a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c72:	4954      	ldr	r1, [pc, #336]	; (8006dc4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006c74:	4313      	orrs	r3, r2
 8006c76:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d00a      	beq.n	8006c9c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8006c86:	4b4f      	ldr	r3, [pc, #316]	; (8006dc4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006c88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c8c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c94:	494b      	ldr	r1, [pc, #300]	; (8006dc4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006c96:	4313      	orrs	r3, r2
 8006c98:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d00a      	beq.n	8006cbe <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8006ca8:	4b46      	ldr	r3, [pc, #280]	; (8006dc4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006caa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cae:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006cb6:	4943      	ldr	r1, [pc, #268]	; (8006dc4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006cb8:	4313      	orrs	r3, r2
 8006cba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d00a      	beq.n	8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8006cca:	4b3e      	ldr	r3, [pc, #248]	; (8006dc4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006ccc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cd0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006cd8:	493a      	ldr	r1, [pc, #232]	; (8006dc4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006cda:	4313      	orrs	r3, r2
 8006cdc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d00a      	beq.n	8006d02 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006cec:	4b35      	ldr	r3, [pc, #212]	; (8006dc4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006cee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cf2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006cfa:	4932      	ldr	r1, [pc, #200]	; (8006dc4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006cfc:	4313      	orrs	r3, r2
 8006cfe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d011      	beq.n	8006d32 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8006d0e:	4b2d      	ldr	r3, [pc, #180]	; (8006dc4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006d10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d14:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006d1c:	4929      	ldr	r1, [pc, #164]	; (8006dc4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006d1e:	4313      	orrs	r3, r2
 8006d20:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006d28:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006d2c:	d101      	bne.n	8006d32 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8006d2e:	2301      	movs	r3, #1
 8006d30:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f003 0308 	and.w	r3, r3, #8
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d001      	beq.n	8006d42 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8006d3e:	2301      	movs	r3, #1
 8006d40:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d00a      	beq.n	8006d64 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006d4e:	4b1d      	ldr	r3, [pc, #116]	; (8006dc4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006d50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d54:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d5c:	4919      	ldr	r1, [pc, #100]	; (8006dc4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006d5e:	4313      	orrs	r3, r2
 8006d60:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d00b      	beq.n	8006d88 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006d70:	4b14      	ldr	r3, [pc, #80]	; (8006dc4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006d72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d76:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d80:	4910      	ldr	r1, [pc, #64]	; (8006dc4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006d82:	4313      	orrs	r3, r2
 8006d84:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006d88:	69fb      	ldr	r3, [r7, #28]
 8006d8a:	2b01      	cmp	r3, #1
 8006d8c:	d006      	beq.n	8006d9c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	f000 80d9 	beq.w	8006f4e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006d9c:	4b09      	ldr	r3, [pc, #36]	; (8006dc4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	4a08      	ldr	r2, [pc, #32]	; (8006dc4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006da2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006da6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006da8:	f7fd fc3c 	bl	8004624 <HAL_GetTick>
 8006dac:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006dae:	e00b      	b.n	8006dc8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006db0:	f7fd fc38 	bl	8004624 <HAL_GetTick>
 8006db4:	4602      	mov	r2, r0
 8006db6:	697b      	ldr	r3, [r7, #20]
 8006db8:	1ad3      	subs	r3, r2, r3
 8006dba:	2b64      	cmp	r3, #100	; 0x64
 8006dbc:	d904      	bls.n	8006dc8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006dbe:	2303      	movs	r3, #3
 8006dc0:	e197      	b.n	80070f2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8006dc2:	bf00      	nop
 8006dc4:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006dc8:	4b6c      	ldr	r3, [pc, #432]	; (8006f7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d1ed      	bne.n	8006db0 <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f003 0301 	and.w	r3, r3, #1
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d021      	beq.n	8006e24 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d11d      	bne.n	8006e24 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006de8:	4b64      	ldr	r3, [pc, #400]	; (8006f7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006dea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006dee:	0c1b      	lsrs	r3, r3, #16
 8006df0:	f003 0303 	and.w	r3, r3, #3
 8006df4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006df6:	4b61      	ldr	r3, [pc, #388]	; (8006f7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006df8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006dfc:	0e1b      	lsrs	r3, r3, #24
 8006dfe:	f003 030f 	and.w	r3, r3, #15
 8006e02:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	685b      	ldr	r3, [r3, #4]
 8006e08:	019a      	lsls	r2, r3, #6
 8006e0a:	693b      	ldr	r3, [r7, #16]
 8006e0c:	041b      	lsls	r3, r3, #16
 8006e0e:	431a      	orrs	r2, r3
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	061b      	lsls	r3, r3, #24
 8006e14:	431a      	orrs	r2, r3
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	689b      	ldr	r3, [r3, #8]
 8006e1a:	071b      	lsls	r3, r3, #28
 8006e1c:	4957      	ldr	r1, [pc, #348]	; (8006f7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006e1e:	4313      	orrs	r3, r2
 8006e20:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d004      	beq.n	8006e3a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e34:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e38:	d00a      	beq.n	8006e50 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d02e      	beq.n	8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e4a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006e4e:	d129      	bne.n	8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006e50:	4b4a      	ldr	r3, [pc, #296]	; (8006f7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006e52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e56:	0c1b      	lsrs	r3, r3, #16
 8006e58:	f003 0303 	and.w	r3, r3, #3
 8006e5c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006e5e:	4b47      	ldr	r3, [pc, #284]	; (8006f7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006e60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e64:	0f1b      	lsrs	r3, r3, #28
 8006e66:	f003 0307 	and.w	r3, r3, #7
 8006e6a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	685b      	ldr	r3, [r3, #4]
 8006e70:	019a      	lsls	r2, r3, #6
 8006e72:	693b      	ldr	r3, [r7, #16]
 8006e74:	041b      	lsls	r3, r3, #16
 8006e76:	431a      	orrs	r2, r3
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	68db      	ldr	r3, [r3, #12]
 8006e7c:	061b      	lsls	r3, r3, #24
 8006e7e:	431a      	orrs	r2, r3
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	071b      	lsls	r3, r3, #28
 8006e84:	493d      	ldr	r1, [pc, #244]	; (8006f7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006e86:	4313      	orrs	r3, r2
 8006e88:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006e8c:	4b3b      	ldr	r3, [pc, #236]	; (8006f7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006e8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006e92:	f023 021f 	bic.w	r2, r3, #31
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e9a:	3b01      	subs	r3, #1
 8006e9c:	4937      	ldr	r1, [pc, #220]	; (8006f7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006e9e:	4313      	orrs	r3, r2
 8006ea0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d01d      	beq.n	8006eec <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006eb0:	4b32      	ldr	r3, [pc, #200]	; (8006f7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006eb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006eb6:	0e1b      	lsrs	r3, r3, #24
 8006eb8:	f003 030f 	and.w	r3, r3, #15
 8006ebc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006ebe:	4b2f      	ldr	r3, [pc, #188]	; (8006f7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006ec0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ec4:	0f1b      	lsrs	r3, r3, #28
 8006ec6:	f003 0307 	and.w	r3, r3, #7
 8006eca:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	685b      	ldr	r3, [r3, #4]
 8006ed0:	019a      	lsls	r2, r3, #6
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	691b      	ldr	r3, [r3, #16]
 8006ed6:	041b      	lsls	r3, r3, #16
 8006ed8:	431a      	orrs	r2, r3
 8006eda:	693b      	ldr	r3, [r7, #16]
 8006edc:	061b      	lsls	r3, r3, #24
 8006ede:	431a      	orrs	r2, r3
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	071b      	lsls	r3, r3, #28
 8006ee4:	4925      	ldr	r1, [pc, #148]	; (8006f7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006ee6:	4313      	orrs	r3, r2
 8006ee8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d011      	beq.n	8006f1c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	685b      	ldr	r3, [r3, #4]
 8006efc:	019a      	lsls	r2, r3, #6
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	691b      	ldr	r3, [r3, #16]
 8006f02:	041b      	lsls	r3, r3, #16
 8006f04:	431a      	orrs	r2, r3
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	68db      	ldr	r3, [r3, #12]
 8006f0a:	061b      	lsls	r3, r3, #24
 8006f0c:	431a      	orrs	r2, r3
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	689b      	ldr	r3, [r3, #8]
 8006f12:	071b      	lsls	r3, r3, #28
 8006f14:	4919      	ldr	r1, [pc, #100]	; (8006f7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006f16:	4313      	orrs	r3, r2
 8006f18:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006f1c:	4b17      	ldr	r3, [pc, #92]	; (8006f7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	4a16      	ldr	r2, [pc, #88]	; (8006f7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006f22:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006f26:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006f28:	f7fd fb7c 	bl	8004624 <HAL_GetTick>
 8006f2c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006f2e:	e008      	b.n	8006f42 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006f30:	f7fd fb78 	bl	8004624 <HAL_GetTick>
 8006f34:	4602      	mov	r2, r0
 8006f36:	697b      	ldr	r3, [r7, #20]
 8006f38:	1ad3      	subs	r3, r2, r3
 8006f3a:	2b64      	cmp	r3, #100	; 0x64
 8006f3c:	d901      	bls.n	8006f42 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006f3e:	2303      	movs	r3, #3
 8006f40:	e0d7      	b.n	80070f2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006f42:	4b0e      	ldr	r3, [pc, #56]	; (8006f7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d0f0      	beq.n	8006f30 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8006f4e:	69bb      	ldr	r3, [r7, #24]
 8006f50:	2b01      	cmp	r3, #1
 8006f52:	f040 80cd 	bne.w	80070f0 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006f56:	4b09      	ldr	r3, [pc, #36]	; (8006f7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	4a08      	ldr	r2, [pc, #32]	; (8006f7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006f5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006f60:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006f62:	f7fd fb5f 	bl	8004624 <HAL_GetTick>
 8006f66:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006f68:	e00a      	b.n	8006f80 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006f6a:	f7fd fb5b 	bl	8004624 <HAL_GetTick>
 8006f6e:	4602      	mov	r2, r0
 8006f70:	697b      	ldr	r3, [r7, #20]
 8006f72:	1ad3      	subs	r3, r2, r3
 8006f74:	2b64      	cmp	r3, #100	; 0x64
 8006f76:	d903      	bls.n	8006f80 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006f78:	2303      	movs	r3, #3
 8006f7a:	e0ba      	b.n	80070f2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8006f7c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006f80:	4b5e      	ldr	r3, [pc, #376]	; (80070fc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006f88:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006f8c:	d0ed      	beq.n	8006f6a <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d003      	beq.n	8006fa2 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d009      	beq.n	8006fb6 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d02e      	beq.n	800700c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d12a      	bne.n	800700c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006fb6:	4b51      	ldr	r3, [pc, #324]	; (80070fc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006fb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fbc:	0c1b      	lsrs	r3, r3, #16
 8006fbe:	f003 0303 	and.w	r3, r3, #3
 8006fc2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006fc4:	4b4d      	ldr	r3, [pc, #308]	; (80070fc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006fc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fca:	0f1b      	lsrs	r3, r3, #28
 8006fcc:	f003 0307 	and.w	r3, r3, #7
 8006fd0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	695b      	ldr	r3, [r3, #20]
 8006fd6:	019a      	lsls	r2, r3, #6
 8006fd8:	693b      	ldr	r3, [r7, #16]
 8006fda:	041b      	lsls	r3, r3, #16
 8006fdc:	431a      	orrs	r2, r3
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	699b      	ldr	r3, [r3, #24]
 8006fe2:	061b      	lsls	r3, r3, #24
 8006fe4:	431a      	orrs	r2, r3
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	071b      	lsls	r3, r3, #28
 8006fea:	4944      	ldr	r1, [pc, #272]	; (80070fc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006fec:	4313      	orrs	r3, r2
 8006fee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006ff2:	4b42      	ldr	r3, [pc, #264]	; (80070fc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006ff4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ff8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007000:	3b01      	subs	r3, #1
 8007002:	021b      	lsls	r3, r3, #8
 8007004:	493d      	ldr	r1, [pc, #244]	; (80070fc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007006:	4313      	orrs	r3, r2
 8007008:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007014:	2b00      	cmp	r3, #0
 8007016:	d022      	beq.n	800705e <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800701c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007020:	d11d      	bne.n	800705e <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007022:	4b36      	ldr	r3, [pc, #216]	; (80070fc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007024:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007028:	0e1b      	lsrs	r3, r3, #24
 800702a:	f003 030f 	and.w	r3, r3, #15
 800702e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007030:	4b32      	ldr	r3, [pc, #200]	; (80070fc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007032:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007036:	0f1b      	lsrs	r3, r3, #28
 8007038:	f003 0307 	and.w	r3, r3, #7
 800703c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	695b      	ldr	r3, [r3, #20]
 8007042:	019a      	lsls	r2, r3, #6
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	6a1b      	ldr	r3, [r3, #32]
 8007048:	041b      	lsls	r3, r3, #16
 800704a:	431a      	orrs	r2, r3
 800704c:	693b      	ldr	r3, [r7, #16]
 800704e:	061b      	lsls	r3, r3, #24
 8007050:	431a      	orrs	r2, r3
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	071b      	lsls	r3, r3, #28
 8007056:	4929      	ldr	r1, [pc, #164]	; (80070fc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007058:	4313      	orrs	r3, r2
 800705a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	f003 0308 	and.w	r3, r3, #8
 8007066:	2b00      	cmp	r3, #0
 8007068:	d028      	beq.n	80070bc <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800706a:	4b24      	ldr	r3, [pc, #144]	; (80070fc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800706c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007070:	0e1b      	lsrs	r3, r3, #24
 8007072:	f003 030f 	and.w	r3, r3, #15
 8007076:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007078:	4b20      	ldr	r3, [pc, #128]	; (80070fc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800707a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800707e:	0c1b      	lsrs	r3, r3, #16
 8007080:	f003 0303 	and.w	r3, r3, #3
 8007084:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	695b      	ldr	r3, [r3, #20]
 800708a:	019a      	lsls	r2, r3, #6
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	041b      	lsls	r3, r3, #16
 8007090:	431a      	orrs	r2, r3
 8007092:	693b      	ldr	r3, [r7, #16]
 8007094:	061b      	lsls	r3, r3, #24
 8007096:	431a      	orrs	r2, r3
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	69db      	ldr	r3, [r3, #28]
 800709c:	071b      	lsls	r3, r3, #28
 800709e:	4917      	ldr	r1, [pc, #92]	; (80070fc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80070a0:	4313      	orrs	r3, r2
 80070a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80070a6:	4b15      	ldr	r3, [pc, #84]	; (80070fc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80070a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80070ac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070b4:	4911      	ldr	r1, [pc, #68]	; (80070fc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80070b6:	4313      	orrs	r3, r2
 80070b8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80070bc:	4b0f      	ldr	r3, [pc, #60]	; (80070fc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	4a0e      	ldr	r2, [pc, #56]	; (80070fc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80070c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80070c6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80070c8:	f7fd faac 	bl	8004624 <HAL_GetTick>
 80070cc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80070ce:	e008      	b.n	80070e2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80070d0:	f7fd faa8 	bl	8004624 <HAL_GetTick>
 80070d4:	4602      	mov	r2, r0
 80070d6:	697b      	ldr	r3, [r7, #20]
 80070d8:	1ad3      	subs	r3, r2, r3
 80070da:	2b64      	cmp	r3, #100	; 0x64
 80070dc:	d901      	bls.n	80070e2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80070de:	2303      	movs	r3, #3
 80070e0:	e007      	b.n	80070f2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80070e2:	4b06      	ldr	r3, [pc, #24]	; (80070fc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80070ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80070ee:	d1ef      	bne.n	80070d0 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80070f0:	2300      	movs	r3, #0
}
 80070f2:	4618      	mov	r0, r3
 80070f4:	3720      	adds	r7, #32
 80070f6:	46bd      	mov	sp, r7
 80070f8:	bd80      	pop	{r7, pc}
 80070fa:	bf00      	nop
 80070fc:	40023800 	.word	0x40023800

08007100 <HAL_RCCEx_GetPeriphCLKConfig>:
  *         RCC configuration registers.
  * @param  PeriphClkInit pointer to the configured RCC_PeriphCLKInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007100:	b480      	push	{r7}
 8007102:	b085      	sub	sp, #20
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0;
 8007108:	2300      	movs	r3, #0
 800710a:	60fb      	str	r3, [r7, #12]
                                        RCC_PERIPHCLK_USART6   | RCC_PERIPHCLK_UART7    |\
                                        RCC_PERIPHCLK_UART8    | RCC_PERIPHCLK_SDMMC1   |\
                                        RCC_PERIPHCLK_CLK48    | RCC_PERIPHCLK_SDMMC2   |\
                                        RCC_PERIPHCLK_DFSDM1   | RCC_PERIPHCLK_DFSDM1_AUDIO;
#else
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S      | RCC_PERIPHCLK_LPTIM1   |\
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	4a80      	ldr	r2, [pc, #512]	; (8007310 <HAL_RCCEx_GetPeriphCLKConfig+0x210>)
 8007110:	601a      	str	r2, [r3, #0]
                                        RCC_PERIPHCLK_UART8    | RCC_PERIPHCLK_SDMMC1   |\
                                        RCC_PERIPHCLK_CLK48;
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /* Get the PLLI2S Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 8007112:	4b80      	ldr	r3, [pc, #512]	; (8007314 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007114:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007118:	099b      	lsrs	r3, r3, #6
 800711a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	605a      	str	r2, [r3, #4]
  PeriphClkInit->PLLI2S.PLLI2SP = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007122:	4b7c      	ldr	r3, [pc, #496]	; (8007314 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007124:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007128:	0c1b      	lsrs	r3, r3, #16
 800712a:	f003 0203 	and.w	r2, r3, #3
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	611a      	str	r2, [r3, #16]
  PeriphClkInit->PLLI2S.PLLI2SQ = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007132:	4b78      	ldr	r3, [pc, #480]	; (8007314 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007134:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007138:	0e1b      	lsrs	r3, r3, #24
 800713a:	f003 020f 	and.w	r2, r3, #15
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	60da      	str	r2, [r3, #12]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007142:	4b74      	ldr	r3, [pc, #464]	; (8007314 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007144:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007148:	0f1b      	lsrs	r3, r3, #28
 800714a:	f003 0207 	and.w	r2, r3, #7
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	609a      	str	r2, [r3, #8]

  /* Get the PLLSAI Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLSAI.PLLSAIN = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> RCC_PLLSAICFGR_PLLSAIN_Pos);
 8007152:	4b70      	ldr	r3, [pc, #448]	; (8007314 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007154:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007158:	099b      	lsrs	r3, r3, #6
 800715a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	615a      	str	r2, [r3, #20]
  PeriphClkInit->PLLSAI.PLLSAIP = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007162:	4b6c      	ldr	r3, [pc, #432]	; (8007314 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007164:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007168:	0c1b      	lsrs	r3, r3, #16
 800716a:	f003 0203 	and.w	r2, r3, #3
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	621a      	str	r2, [r3, #32]
  PeriphClkInit->PLLSAI.PLLSAIQ = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007172:	4b68      	ldr	r3, [pc, #416]	; (8007314 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007174:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007178:	0e1b      	lsrs	r3, r3, #24
 800717a:	f003 020f 	and.w	r2, r3, #15
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	619a      	str	r2, [r3, #24]
  PeriphClkInit->PLLSAI.PLLSAIR = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007182:	4b64      	ldr	r3, [pc, #400]	; (8007314 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007184:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007188:	0f1b      	lsrs	r3, r3, #28
 800718a:	f003 0207 	and.w	r2, r3, #7
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	61da      	str	r2, [r3, #28]

  /* Get the PLLSAI/PLLI2S division factors -------------------------------------------*/
  PeriphClkInit->PLLI2SDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) >> RCC_DCKCFGR1_PLLI2SDIVQ_Pos);
 8007192:	4b60      	ldr	r3, [pc, #384]	; (8007314 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007194:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007198:	f003 021f 	and.w	r2, r3, #31
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	625a      	str	r2, [r3, #36]	; 0x24
  PeriphClkInit->PLLSAIDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> RCC_DCKCFGR1_PLLSAIDIVQ_Pos);
 80071a0:	4b5c      	ldr	r3, [pc, #368]	; (8007314 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80071a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80071a6:	0a1b      	lsrs	r3, r3, #8
 80071a8:	f003 021f 	and.w	r2, r3, #31
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	629a      	str	r2, [r3, #40]	; 0x28
  PeriphClkInit->PLLSAIDivR = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVR) >> RCC_DCKCFGR1_PLLSAIDIVR_Pos);
 80071b0:	4b58      	ldr	r3, [pc, #352]	; (8007314 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80071b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80071b6:	0c1b      	lsrs	r3, r3, #16
 80071b8:	f003 0203 	and.w	r2, r3, #3
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Get the SAI1 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai1ClockSelection = __HAL_RCC_GET_SAI1_SOURCE();
 80071c0:	4b54      	ldr	r3, [pc, #336]	; (8007314 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80071c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80071c6:	f403 1240 	and.w	r2, r3, #3145728	; 0x300000
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Get the SAI2 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai2ClockSelection = __HAL_RCC_GET_SAI2_SOURCE();
 80071ce:	4b51      	ldr	r3, [pc, #324]	; (8007314 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80071d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80071d4:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get the I2S clock configuration ------------------------------------------*/
  PeriphClkInit->I2sClockSelection = __HAL_RCC_GET_I2SCLKSOURCE();
 80071dc:	4b4d      	ldr	r3, [pc, #308]	; (8007314 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80071de:	689b      	ldr	r3, [r3, #8]
 80071e0:	f403 0200 	and.w	r2, r3, #8388608	; 0x800000
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Get the I2C1 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c1ClockSelection = __HAL_RCC_GET_I2C1_SOURCE();
 80071e8:	4b4a      	ldr	r3, [pc, #296]	; (8007314 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80071ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071ee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Get the I2C2 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c2ClockSelection = __HAL_RCC_GET_I2C2_SOURCE();
 80071f6:	4b47      	ldr	r3, [pc, #284]	; (8007314 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80071f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071fc:	f403 2240 	and.w	r2, r3, #786432	; 0xc0000
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	669a      	str	r2, [r3, #104]	; 0x68

  /* Get the I2C3 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c3ClockSelection = __HAL_RCC_GET_I2C3_SOURCE();
 8007204:	4b43      	ldr	r3, [pc, #268]	; (8007314 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007206:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800720a:	f403 1240 	and.w	r2, r3, #3145728	; 0x300000
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Get the I2C4 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c4ClockSelection = __HAL_RCC_GET_I2C4_SOURCE();
 8007212:	4b40      	ldr	r3, [pc, #256]	; (8007314 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007214:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007218:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	671a      	str	r2, [r3, #112]	; 0x70

  /* Get the USART1 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart1ClockSelection = __HAL_RCC_GET_USART1_SOURCE();
 8007220:	4b3c      	ldr	r3, [pc, #240]	; (8007314 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007222:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007226:	f003 0203 	and.w	r2, r3, #3
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get the USART2 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart2ClockSelection = __HAL_RCC_GET_USART2_SOURCE();
 800722e:	4b39      	ldr	r3, [pc, #228]	; (8007314 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007230:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007234:	f003 020c 	and.w	r2, r3, #12
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	649a      	str	r2, [r3, #72]	; 0x48

  /* Get the USART3 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart3ClockSelection = __HAL_RCC_GET_USART3_SOURCE();
 800723c:	4b35      	ldr	r3, [pc, #212]	; (8007314 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800723e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007242:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get the UART4 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart4ClockSelection = __HAL_RCC_GET_UART4_SOURCE();
 800724a:	4b32      	ldr	r3, [pc, #200]	; (8007314 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800724c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007250:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	651a      	str	r2, [r3, #80]	; 0x50

  /* Get the UART5 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart5ClockSelection = __HAL_RCC_GET_UART5_SOURCE();
 8007258:	4b2e      	ldr	r3, [pc, #184]	; (8007314 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800725a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800725e:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get the USART6 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart6ClockSelection = __HAL_RCC_GET_USART6_SOURCE();
 8007266:	4b2b      	ldr	r3, [pc, #172]	; (8007314 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007268:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800726c:	f403 6240 	and.w	r2, r3, #3072	; 0xc00
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	659a      	str	r2, [r3, #88]	; 0x58

  /* Get the UART7 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart7ClockSelection = __HAL_RCC_GET_UART7_SOURCE();
 8007274:	4b27      	ldr	r3, [pc, #156]	; (8007314 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007276:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800727a:	f403 5240 	and.w	r2, r3, #12288	; 0x3000
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Get the UART8 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart8ClockSelection = __HAL_RCC_GET_UART8_SOURCE();
 8007282:	4b24      	ldr	r3, [pc, #144]	; (8007314 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007284:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007288:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Get the LPTIM1 clock configuration ------------------------------------------*/
  PeriphClkInit->Lptim1ClockSelection = __HAL_RCC_GET_LPTIM1_SOURCE();
 8007290:	4b20      	ldr	r3, [pc, #128]	; (8007314 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007292:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007296:	f003 7240 	and.w	r2, r3, #50331648	; 0x3000000
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	675a      	str	r2, [r3, #116]	; 0x74

  /* Get the CEC clock configuration -----------------------------------------------*/
  PeriphClkInit->CecClockSelection = __HAL_RCC_GET_CEC_SOURCE();
 800729e:	4b1d      	ldr	r3, [pc, #116]	; (8007314 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80072a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072a4:	f003 6280 	and.w	r2, r3, #67108864	; 0x4000000
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	679a      	str	r2, [r3, #120]	; 0x78

  /* Get the CK48 clock configuration -----------------------------------------------*/
  PeriphClkInit->Clk48ClockSelection = __HAL_RCC_GET_CLK48_SOURCE();
 80072ac:	4b19      	ldr	r3, [pc, #100]	; (8007314 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80072ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072b2:	f003 6200 	and.w	r2, r3, #134217728	; 0x8000000
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Get the SDMMC1 clock configuration -----------------------------------------------*/
  PeriphClkInit->Sdmmc1ClockSelection = __HAL_RCC_GET_SDMMC1_SOURCE();
 80072ba:	4b16      	ldr	r3, [pc, #88]	; (8007314 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80072bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072c0:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  /* Get the DFSDM AUDIO clock configuration -----------------------------------------------*/
  PeriphClkInit->Dfsdm1AudioClockSelection = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /* Get the RTC Clock configuration -----------------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 80072ca:	4b12      	ldr	r3, [pc, #72]	; (8007314 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80072cc:	689b      	ldr	r3, [r3, #8]
 80072ce:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 80072d2:	60fb      	str	r3, [r7, #12]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 80072d4:	4b0f      	ldr	r3, [pc, #60]	; (8007314 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80072d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072d8:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	431a      	orrs	r2, r3
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	631a      	str	r2, [r3, #48]	; 0x30

  /* Get the TIM Prescaler configuration --------------------------------------------*/
  if ((RCC->DCKCFGR1 & RCC_DCKCFGR1_TIMPRE) == RESET)
 80072e4:	4b0b      	ldr	r3, [pc, #44]	; (8007314 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80072e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80072ea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d103      	bne.n	80072fa <HAL_RCCEx_GetPeriphCLKConfig+0x1fa>
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_DESACTIVATED;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	2200      	movs	r2, #0
 80072f6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
}
 80072f8:	e003      	b.n	8007302 <HAL_RCCEx_GetPeriphCLKConfig+0x202>
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007300:	639a      	str	r2, [r3, #56]	; 0x38
}
 8007302:	bf00      	nop
 8007304:	3714      	adds	r7, #20
 8007306:	46bd      	mov	sp, r7
 8007308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730c:	4770      	bx	lr
 800730e:	bf00      	nop
 8007310:	00fffff1 	.word	0x00fffff1
 8007314:	40023800 	.word	0x40023800

08007318 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007318:	b480      	push	{r7}
 800731a:	b087      	sub	sp, #28
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8007320:	2300      	movs	r3, #0
 8007322:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 8007324:	2300      	movs	r3, #0
 8007326:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 8007328:	2300      	movs	r3, #0
 800732a:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 800732c:	2300      	movs	r3, #0
 800732e:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007336:	f040 808c 	bne.w	8007452 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
  {
    saiclocksource = RCC->DCKCFGR1;
 800733a:	4b95      	ldr	r3, [pc, #596]	; (8007590 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800733c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007340:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 8007342:	68bb      	ldr	r3, [r7, #8]
 8007344:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8007348:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800734a:	68bb      	ldr	r3, [r7, #8]
 800734c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007350:	d07c      	beq.n	800744c <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8007352:	68bb      	ldr	r3, [r7, #8]
 8007354:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007358:	d87d      	bhi.n	8007456 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 800735a:	68bb      	ldr	r3, [r7, #8]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d004      	beq.n	800736a <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 8007360:	68bb      	ldr	r3, [r7, #8]
 8007362:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007366:	d039      	beq.n	80073dc <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8007368:	e075      	b.n	8007456 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800736a:	4b89      	ldr	r3, [pc, #548]	; (8007590 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800736c:	685b      	ldr	r3, [r3, #4]
 800736e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007372:	2b00      	cmp	r3, #0
 8007374:	d108      	bne.n	8007388 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007376:	4b86      	ldr	r3, [pc, #536]	; (8007590 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007378:	685b      	ldr	r3, [r3, #4]
 800737a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800737e:	4a85      	ldr	r2, [pc, #532]	; (8007594 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8007380:	fbb2 f3f3 	udiv	r3, r2, r3
 8007384:	613b      	str	r3, [r7, #16]
 8007386:	e007      	b.n	8007398 <HAL_RCCEx_GetPeriphCLKFreq+0x80>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8007388:	4b81      	ldr	r3, [pc, #516]	; (8007590 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800738a:	685b      	ldr	r3, [r3, #4]
 800738c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007390:	4a81      	ldr	r2, [pc, #516]	; (8007598 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8007392:	fbb2 f3f3 	udiv	r3, r2, r3
 8007396:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8007398:	4b7d      	ldr	r3, [pc, #500]	; (8007590 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800739a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800739e:	0e1b      	lsrs	r3, r3, #24
 80073a0:	f003 030f 	and.w	r3, r3, #15
 80073a4:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 80073a6:	4b7a      	ldr	r3, [pc, #488]	; (8007590 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80073a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073ac:	099b      	lsrs	r3, r3, #6
 80073ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073b2:	693a      	ldr	r2, [r7, #16]
 80073b4:	fb02 f203 	mul.w	r2, r2, r3
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80073be:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 80073c0:	4b73      	ldr	r3, [pc, #460]	; (8007590 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80073c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80073c6:	0a1b      	lsrs	r3, r3, #8
 80073c8:	f003 031f 	and.w	r3, r3, #31
 80073cc:	3301      	adds	r3, #1
 80073ce:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80073d0:	697a      	ldr	r2, [r7, #20]
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80073d8:	617b      	str	r3, [r7, #20]
        break;
 80073da:	e03d      	b.n	8007458 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80073dc:	4b6c      	ldr	r3, [pc, #432]	; (8007590 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80073de:	685b      	ldr	r3, [r3, #4]
 80073e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d108      	bne.n	80073fa <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80073e8:	4b69      	ldr	r3, [pc, #420]	; (8007590 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80073ea:	685b      	ldr	r3, [r3, #4]
 80073ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80073f0:	4a68      	ldr	r2, [pc, #416]	; (8007594 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 80073f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80073f6:	613b      	str	r3, [r7, #16]
 80073f8:	e007      	b.n	800740a <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80073fa:	4b65      	ldr	r3, [pc, #404]	; (8007590 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80073fc:	685b      	ldr	r3, [r3, #4]
 80073fe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007402:	4a65      	ldr	r2, [pc, #404]	; (8007598 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8007404:	fbb2 f3f3 	udiv	r3, r2, r3
 8007408:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800740a:	4b61      	ldr	r3, [pc, #388]	; (8007590 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800740c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007410:	0e1b      	lsrs	r3, r3, #24
 8007412:	f003 030f 	and.w	r3, r3, #15
 8007416:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8007418:	4b5d      	ldr	r3, [pc, #372]	; (8007590 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800741a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800741e:	099b      	lsrs	r3, r3, #6
 8007420:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007424:	693a      	ldr	r2, [r7, #16]
 8007426:	fb02 f203 	mul.w	r2, r2, r3
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007430:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8007432:	4b57      	ldr	r3, [pc, #348]	; (8007590 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007434:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007438:	f003 031f 	and.w	r3, r3, #31
 800743c:	3301      	adds	r3, #1
 800743e:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8007440:	697a      	ldr	r2, [r7, #20]
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	fbb2 f3f3 	udiv	r3, r2, r3
 8007448:	617b      	str	r3, [r7, #20]
        break;
 800744a:	e005      	b.n	8007458 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        frequency = EXTERNAL_CLOCK_VALUE;
 800744c:	4b53      	ldr	r3, [pc, #332]	; (800759c <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800744e:	617b      	str	r3, [r7, #20]
        break;
 8007450:	e002      	b.n	8007458 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      }
    }
  }
 8007452:	bf00      	nop
 8007454:	e000      	b.n	8007458 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        break;
 8007456:	bf00      	nop

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800745e:	f040 808c 	bne.w	800757a <HAL_RCCEx_GetPeriphCLKFreq+0x262>
  {
    saiclocksource = RCC->DCKCFGR1;
 8007462:	4b4b      	ldr	r3, [pc, #300]	; (8007590 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007464:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007468:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 800746a:	68bb      	ldr	r3, [r7, #8]
 800746c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8007470:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8007472:	68bb      	ldr	r3, [r7, #8]
 8007474:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007478:	d07c      	beq.n	8007574 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 800747a:	68bb      	ldr	r3, [r7, #8]
 800747c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007480:	d87d      	bhi.n	800757e <HAL_RCCEx_GetPeriphCLKFreq+0x266>
 8007482:	68bb      	ldr	r3, [r7, #8]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d004      	beq.n	8007492 <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 8007488:	68bb      	ldr	r3, [r7, #8]
 800748a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800748e:	d039      	beq.n	8007504 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8007490:	e075      	b.n	800757e <HAL_RCCEx_GetPeriphCLKFreq+0x266>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8007492:	4b3f      	ldr	r3, [pc, #252]	; (8007590 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007494:	685b      	ldr	r3, [r3, #4]
 8007496:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800749a:	2b00      	cmp	r3, #0
 800749c:	d108      	bne.n	80074b0 <HAL_RCCEx_GetPeriphCLKFreq+0x198>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800749e:	4b3c      	ldr	r3, [pc, #240]	; (8007590 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80074a0:	685b      	ldr	r3, [r3, #4]
 80074a2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80074a6:	4a3b      	ldr	r2, [pc, #236]	; (8007594 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 80074a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80074ac:	613b      	str	r3, [r7, #16]
 80074ae:	e007      	b.n	80074c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80074b0:	4b37      	ldr	r3, [pc, #220]	; (8007590 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80074b2:	685b      	ldr	r3, [r3, #4]
 80074b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80074b8:	4a37      	ldr	r2, [pc, #220]	; (8007598 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 80074ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80074be:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 80074c0:	4b33      	ldr	r3, [pc, #204]	; (8007590 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80074c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074c6:	0e1b      	lsrs	r3, r3, #24
 80074c8:	f003 030f 	and.w	r3, r3, #15
 80074cc:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 80074ce:	4b30      	ldr	r3, [pc, #192]	; (8007590 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80074d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074d4:	099b      	lsrs	r3, r3, #6
 80074d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074da:	693a      	ldr	r2, [r7, #16]
 80074dc:	fb02 f203 	mul.w	r2, r2, r3
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80074e6:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 80074e8:	4b29      	ldr	r3, [pc, #164]	; (8007590 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80074ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80074ee:	0a1b      	lsrs	r3, r3, #8
 80074f0:	f003 031f 	and.w	r3, r3, #31
 80074f4:	3301      	adds	r3, #1
 80074f6:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80074f8:	697a      	ldr	r2, [r7, #20]
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007500:	617b      	str	r3, [r7, #20]
        break;
 8007502:	e03d      	b.n	8007580 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8007504:	4b22      	ldr	r3, [pc, #136]	; (8007590 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007506:	685b      	ldr	r3, [r3, #4]
 8007508:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800750c:	2b00      	cmp	r3, #0
 800750e:	d108      	bne.n	8007522 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007510:	4b1f      	ldr	r3, [pc, #124]	; (8007590 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007512:	685b      	ldr	r3, [r3, #4]
 8007514:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007518:	4a1e      	ldr	r2, [pc, #120]	; (8007594 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800751a:	fbb2 f3f3 	udiv	r3, r2, r3
 800751e:	613b      	str	r3, [r7, #16]
 8007520:	e007      	b.n	8007532 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8007522:	4b1b      	ldr	r3, [pc, #108]	; (8007590 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007524:	685b      	ldr	r3, [r3, #4]
 8007526:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800752a:	4a1b      	ldr	r2, [pc, #108]	; (8007598 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800752c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007530:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8007532:	4b17      	ldr	r3, [pc, #92]	; (8007590 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007534:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007538:	0e1b      	lsrs	r3, r3, #24
 800753a:	f003 030f 	and.w	r3, r3, #15
 800753e:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8007540:	4b13      	ldr	r3, [pc, #76]	; (8007590 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007542:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007546:	099b      	lsrs	r3, r3, #6
 8007548:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800754c:	693a      	ldr	r2, [r7, #16]
 800754e:	fb02 f203 	mul.w	r2, r2, r3
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	fbb2 f3f3 	udiv	r3, r2, r3
 8007558:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800755a:	4b0d      	ldr	r3, [pc, #52]	; (8007590 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800755c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007560:	f003 031f 	and.w	r3, r3, #31
 8007564:	3301      	adds	r3, #1
 8007566:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8007568:	697a      	ldr	r2, [r7, #20]
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007570:	617b      	str	r3, [r7, #20]
        break;
 8007572:	e005      	b.n	8007580 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        frequency = EXTERNAL_CLOCK_VALUE;
 8007574:	4b09      	ldr	r3, [pc, #36]	; (800759c <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8007576:	617b      	str	r3, [r7, #20]
        break;
 8007578:	e002      	b.n	8007580 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
      }
    }
  }
 800757a:	bf00      	nop
 800757c:	e000      	b.n	8007580 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        break;
 800757e:	bf00      	nop

  return frequency;
 8007580:	697b      	ldr	r3, [r7, #20]
}
 8007582:	4618      	mov	r0, r3
 8007584:	371c      	adds	r7, #28
 8007586:	46bd      	mov	sp, r7
 8007588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758c:	4770      	bx	lr
 800758e:	bf00      	nop
 8007590:	40023800 	.word	0x40023800
 8007594:	00f42400 	.word	0x00f42400
 8007598:	017d7840 	.word	0x017d7840
 800759c:	00bb8000 	.word	0x00bb8000

080075a0 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b088      	sub	sp, #32
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 80075a8:	2300      	movs	r3, #0
 80075aa:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 80075ac:	2300      	movs	r3, #0
 80075ae:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 80075b0:	2300      	movs	r3, #0
 80075b2:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d101      	bne.n	80075be <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 80075ba:	2301      	movs	r3, #1
 80075bc:	e156      	b.n	800786c <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 80075c4:	b2db      	uxtb	r3, r3
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d106      	bne.n	80075d8 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	2200      	movs	r2, #0
 80075ce:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 80075d2:	6878      	ldr	r0, [r7, #4]
 80075d4:	f000 f997 	bl	8007906 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2202      	movs	r2, #2
 80075dc:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 80075e0:	6878      	ldr	r0, [r7, #4]
 80075e2:	f000 fae9 	bl	8007bb8 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	68db      	ldr	r3, [r3, #12]
 80075ea:	2b02      	cmp	r3, #2
 80075ec:	d00c      	beq.n	8007608 <HAL_SAI_Init+0x68>
 80075ee:	2b02      	cmp	r3, #2
 80075f0:	d80d      	bhi.n	800760e <HAL_SAI_Init+0x6e>
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d002      	beq.n	80075fc <HAL_SAI_Init+0x5c>
 80075f6:	2b01      	cmp	r3, #1
 80075f8:	d003      	beq.n	8007602 <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 80075fa:	e008      	b.n	800760e <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 80075fc:	2300      	movs	r3, #0
 80075fe:	61fb      	str	r3, [r7, #28]
      break;
 8007600:	e006      	b.n	8007610 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8007602:	2310      	movs	r3, #16
 8007604:	61fb      	str	r3, [r7, #28]
      break;
 8007606:	e003      	b.n	8007610 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8007608:	2320      	movs	r3, #32
 800760a:	61fb      	str	r3, [r7, #28]
      break;
 800760c:	e000      	b.n	8007610 <HAL_SAI_Init+0x70>
      break;
 800760e:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	689b      	ldr	r3, [r3, #8]
 8007614:	2b03      	cmp	r3, #3
 8007616:	d81e      	bhi.n	8007656 <HAL_SAI_Init+0xb6>
 8007618:	a201      	add	r2, pc, #4	; (adr r2, 8007620 <HAL_SAI_Init+0x80>)
 800761a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800761e:	bf00      	nop
 8007620:	08007631 	.word	0x08007631
 8007624:	08007637 	.word	0x08007637
 8007628:	0800763f 	.word	0x0800763f
 800762c:	08007647 	.word	0x08007647
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 8007630:	2300      	movs	r3, #0
 8007632:	617b      	str	r3, [r7, #20]
    }
    break;
 8007634:	e010      	b.n	8007658 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8007636:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800763a:	617b      	str	r3, [r7, #20]
    }
    break;
 800763c:	e00c      	b.n	8007658 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800763e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007642:	617b      	str	r3, [r7, #20]
    }
    break;
 8007644:	e008      	b.n	8007658 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8007646:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800764a:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800764c:	69fb      	ldr	r3, [r7, #28]
 800764e:	f043 0301 	orr.w	r3, r3, #1
 8007652:	61fb      	str	r3, [r7, #28]
    }
    break;
 8007654:	e000      	b.n	8007658 <HAL_SAI_Init+0xb8>
    default:
      break;
 8007656:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	4a85      	ldr	r2, [pc, #532]	; (8007874 <HAL_SAI_Init+0x2d4>)
 800765e:	4293      	cmp	r3, r2
 8007660:	d004      	beq.n	800766c <HAL_SAI_Init+0xcc>
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	4a84      	ldr	r2, [pc, #528]	; (8007878 <HAL_SAI_Init+0x2d8>)
 8007668:	4293      	cmp	r3, r2
 800766a:	d103      	bne.n	8007674 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 800766c:	4a83      	ldr	r2, [pc, #524]	; (800787c <HAL_SAI_Init+0x2dc>)
 800766e:	69fb      	ldr	r3, [r7, #28]
 8007670:	6013      	str	r3, [r2, #0]
 8007672:	e002      	b.n	800767a <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8007674:	4a82      	ldr	r2, [pc, #520]	; (8007880 <HAL_SAI_Init+0x2e0>)
 8007676:	69fb      	ldr	r3, [r7, #28]
 8007678:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	69db      	ldr	r3, [r3, #28]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d04c      	beq.n	800771c <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 8007682:	2300      	movs	r3, #0
 8007684:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	4a7a      	ldr	r2, [pc, #488]	; (8007874 <HAL_SAI_Init+0x2d4>)
 800768c:	4293      	cmp	r3, r2
 800768e:	d004      	beq.n	800769a <HAL_SAI_Init+0xfa>
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	4a78      	ldr	r2, [pc, #480]	; (8007878 <HAL_SAI_Init+0x2d8>)
 8007696:	4293      	cmp	r3, r2
 8007698:	d104      	bne.n	80076a4 <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800769a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800769e:	f7ff fe3b 	bl	8007318 <HAL_RCCEx_GetPeriphCLKFreq>
 80076a2:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	4a76      	ldr	r2, [pc, #472]	; (8007884 <HAL_SAI_Init+0x2e4>)
 80076aa:	4293      	cmp	r3, r2
 80076ac:	d004      	beq.n	80076b8 <HAL_SAI_Init+0x118>
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	4a75      	ldr	r2, [pc, #468]	; (8007888 <HAL_SAI_Init+0x2e8>)
 80076b4:	4293      	cmp	r3, r2
 80076b6:	d104      	bne.n	80076c2 <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 80076b8:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80076bc:	f7ff fe2c 	bl	8007318 <HAL_RCCEx_GetPeriphCLKFreq>
 80076c0:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 80076c2:	693a      	ldr	r2, [r7, #16]
 80076c4:	4613      	mov	r3, r2
 80076c6:	009b      	lsls	r3, r3, #2
 80076c8:	4413      	add	r3, r2
 80076ca:	005b      	lsls	r3, r3, #1
 80076cc:	461a      	mov	r2, r3
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	69db      	ldr	r3, [r3, #28]
 80076d2:	025b      	lsls	r3, r3, #9
 80076d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80076d8:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	4a6b      	ldr	r2, [pc, #428]	; (800788c <HAL_SAI_Init+0x2ec>)
 80076de:	fba2 2303 	umull	r2, r3, r2, r3
 80076e2:	08da      	lsrs	r2, r3, #3
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 80076e8:	68f9      	ldr	r1, [r7, #12]
 80076ea:	4b68      	ldr	r3, [pc, #416]	; (800788c <HAL_SAI_Init+0x2ec>)
 80076ec:	fba3 2301 	umull	r2, r3, r3, r1
 80076f0:	08da      	lsrs	r2, r3, #3
 80076f2:	4613      	mov	r3, r2
 80076f4:	009b      	lsls	r3, r3, #2
 80076f6:	4413      	add	r3, r2
 80076f8:	005b      	lsls	r3, r3, #1
 80076fa:	1aca      	subs	r2, r1, r3
 80076fc:	2a08      	cmp	r2, #8
 80076fe:	d904      	bls.n	800770a <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	6a1b      	ldr	r3, [r3, #32]
 8007704:	1c5a      	adds	r2, r3, #1
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800770e:	2b04      	cmp	r3, #4
 8007710:	d104      	bne.n	800771c <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	6a1b      	ldr	r3, [r3, #32]
 8007716:	085a      	lsrs	r2, r3, #1
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	685b      	ldr	r3, [r3, #4]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d003      	beq.n	800772c <HAL_SAI_Init+0x18c>
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	685b      	ldr	r3, [r3, #4]
 8007728:	2b02      	cmp	r3, #2
 800772a:	d109      	bne.n	8007740 <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007730:	2b01      	cmp	r3, #1
 8007732:	d101      	bne.n	8007738 <HAL_SAI_Init+0x198>
 8007734:	2300      	movs	r3, #0
 8007736:	e001      	b.n	800773c <HAL_SAI_Init+0x19c>
 8007738:	f44f 7300 	mov.w	r3, #512	; 0x200
 800773c:	61bb      	str	r3, [r7, #24]
 800773e:	e008      	b.n	8007752 <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007744:	2b01      	cmp	r3, #1
 8007746:	d102      	bne.n	800774e <HAL_SAI_Init+0x1ae>
 8007748:	f44f 7300 	mov.w	r3, #512	; 0x200
 800774c:	e000      	b.n	8007750 <HAL_SAI_Init+0x1b0>
 800774e:	2300      	movs	r3, #0
 8007750:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	6819      	ldr	r1, [r3, #0]
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681a      	ldr	r2, [r3, #0]
 800775c:	4b4c      	ldr	r3, [pc, #304]	; (8007890 <HAL_SAI_Init+0x2f0>)
 800775e:	400b      	ands	r3, r1
 8007760:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	6819      	ldr	r1, [r3, #0]
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	685a      	ldr	r2, [r3, #4]
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007770:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007776:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800777c:	431a      	orrs	r2, r3
 800777e:	69bb      	ldr	r3, [r7, #24]
 8007780:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 8007782:	697b      	ldr	r3, [r7, #20]
 8007784:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                               \
 800778a:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	691b      	ldr	r3, [r3, #16]
 8007790:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007796:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	6a1b      	ldr	r3, [r3, #32]
 800779c:	051b      	lsls	r3, r3, #20
 800779e:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	430a      	orrs	r2, r1
 80077a6:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	6859      	ldr	r1, [r3, #4]
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681a      	ldr	r2, [r3, #0]
 80077b2:	4b38      	ldr	r3, [pc, #224]	; (8007894 <HAL_SAI_Init+0x2f4>)
 80077b4:	400b      	ands	r3, r1
 80077b6:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	6859      	ldr	r1, [r3, #4]
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	699a      	ldr	r2, [r3, #24]
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077c6:	431a      	orrs	r2, r3
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077cc:	431a      	orrs	r2, r3
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	430a      	orrs	r2, r1
 80077d4:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	6899      	ldr	r1, [r3, #8]
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681a      	ldr	r2, [r3, #0]
 80077e0:	4b2d      	ldr	r3, [pc, #180]	; (8007898 <HAL_SAI_Init+0x2f8>)
 80077e2:	400b      	ands	r3, r1
 80077e4:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	6899      	ldr	r1, [r3, #8]
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077f0:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 80077f6:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 80077fc:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 8007802:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007808:	3b01      	subs	r3, #1
 800780a:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800780c:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	430a      	orrs	r2, r1
 8007814:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	68d9      	ldr	r1, [r3, #12]
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681a      	ldr	r2, [r3, #0]
 8007820:	f24f 0320 	movw	r3, #61472	; 0xf020
 8007824:	400b      	ands	r3, r1
 8007826:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	68d9      	ldr	r1, [r3, #12]
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007836:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800783c:	041b      	lsls	r3, r3, #16
 800783e:	431a      	orrs	r2, r3
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007844:	3b01      	subs	r3, #1
 8007846:	021b      	lsls	r3, r3, #8
 8007848:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	430a      	orrs	r2, r1
 8007850:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	2200      	movs	r2, #0
 8007856:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	2201      	movs	r2, #1
 800785e:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	2200      	movs	r2, #0
 8007866:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800786a:	2300      	movs	r3, #0
}
 800786c:	4618      	mov	r0, r3
 800786e:	3720      	adds	r7, #32
 8007870:	46bd      	mov	sp, r7
 8007872:	bd80      	pop	{r7, pc}
 8007874:	40015804 	.word	0x40015804
 8007878:	40015824 	.word	0x40015824
 800787c:	40015800 	.word	0x40015800
 8007880:	40015c00 	.word	0x40015c00
 8007884:	40015c04 	.word	0x40015c04
 8007888:	40015c24 	.word	0x40015c24
 800788c:	cccccccd 	.word	0xcccccccd
 8007890:	ff05c010 	.word	0xff05c010
 8007894:	ffff1ff0 	.word	0xffff1ff0
 8007898:	fff88000 	.word	0xfff88000

0800789c <HAL_SAI_DeInit>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_DeInit(SAI_HandleTypeDef *hsai)
{
 800789c:	b580      	push	{r7, lr}
 800789e:	b082      	sub	sp, #8
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
  /* Check the SAI handle allocation */
  if (hsai == NULL)
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d101      	bne.n	80078ae <HAL_SAI_DeInit+0x12>
  {
    return HAL_ERROR;
 80078aa:	2301      	movs	r3, #1
 80078ac:	e027      	b.n	80078fe <HAL_SAI_DeInit+0x62>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	2202      	movs	r2, #2
 80078b2:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disabled All interrupt and clear all the flag */
  hsai->Instance->IMR = 0;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	2200      	movs	r2, #0
 80078bc:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	f04f 32ff 	mov.w	r2, #4294967295
 80078c6:	619a      	str	r2, [r3, #24]

  /* Disable the SAI */
  SAI_Disable(hsai);
 80078c8:	6878      	ldr	r0, [r7, #4]
 80078ca:	f000 f975 	bl	8007bb8 <SAI_Disable>

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	685a      	ldr	r2, [r3, #4]
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	f042 0208 	orr.w	r2, r2, #8
 80078dc:	605a      	str	r2, [r3, #4]
  {
    hsai->MspDeInitCallback = HAL_SAI_MspDeInit;
  }
  hsai->MspDeInitCallback(hsai);
#else
  HAL_SAI_MspDeInit(hsai);
 80078de:	6878      	ldr	r0, [r7, #4]
 80078e0:	f000 f81b 	bl	800791a <HAL_SAI_MspDeInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2200      	movs	r2, #0
 80078e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_RESET;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2200      	movs	r2, #0
 80078f0:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2200      	movs	r2, #0
 80078f8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80078fc:	2300      	movs	r3, #0
}
 80078fe:	4618      	mov	r0, r3
 8007900:	3708      	adds	r7, #8
 8007902:	46bd      	mov	sp, r7
 8007904:	bd80      	pop	{r7, pc}

08007906 <HAL_SAI_MspInit>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_MspInit(SAI_HandleTypeDef *hsai)
{
 8007906:	b480      	push	{r7}
 8007908:	b083      	sub	sp, #12
 800790a:	af00      	add	r7, sp, #0
 800790c:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_MspInit could be implemented in the user file
   */
}
 800790e:	bf00      	nop
 8007910:	370c      	adds	r7, #12
 8007912:	46bd      	mov	sp, r7
 8007914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007918:	4770      	bx	lr

0800791a <HAL_SAI_MspDeInit>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_MspDeInit(SAI_HandleTypeDef *hsai)
{
 800791a:	b480      	push	{r7}
 800791c:	b083      	sub	sp, #12
 800791e:	af00      	add	r7, sp, #0
 8007920:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_MspDeInit could be implemented in the user file
   */
}
 8007922:	bf00      	nop
 8007924:	370c      	adds	r7, #12
 8007926:	46bd      	mov	sp, r7
 8007928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792c:	4770      	bx	lr

0800792e <HAL_SAI_DMAStop>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_DMAStop(SAI_HandleTypeDef *hsai)
{
 800792e:	b580      	push	{r7, lr}
 8007930:	b084      	sub	sp, #16
 8007932:	af00      	add	r7, sp, #0
 8007934:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007936:	2300      	movs	r3, #0
 8007938:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hsai);
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8007940:	2b01      	cmp	r3, #1
 8007942:	d101      	bne.n	8007948 <HAL_SAI_DMAStop+0x1a>
 8007944:	2302      	movs	r3, #2
 8007946:	e061      	b.n	8007a0c <HAL_SAI_DMAStop+0xde>
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2201      	movs	r2, #1
 800794c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  /* Disable the SAI DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	681a      	ldr	r2, [r3, #0]
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800795e:	601a      	str	r2, [r3, #0]

  /* Abort the SAI Tx DMA Stream */
  if ((hsai->hdmatx != NULL) && (hsai->State == HAL_SAI_STATE_BUSY_TX))
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007964:	2b00      	cmp	r3, #0
 8007966:	d01c      	beq.n	80079a2 <HAL_SAI_DMAStop+0x74>
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800796e:	b2db      	uxtb	r3, r3
 8007970:	2b12      	cmp	r3, #18
 8007972:	d116      	bne.n	80079a2 <HAL_SAI_DMAStop+0x74>
  {
    if (HAL_DMA_Abort(hsai->hdmatx) != HAL_OK)
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007978:	4618      	mov	r0, r3
 800797a:	f7fd f901 	bl	8004b80 <HAL_DMA_Abort>
 800797e:	4603      	mov	r3, r0
 8007980:	2b00      	cmp	r3, #0
 8007982:	d00e      	beq.n	80079a2 <HAL_SAI_DMAStop+0x74>
    {
      /* If the DMA Tx errorCode is different from DMA No Transfer then return Error */
      if (hsai->hdmatx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007988:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800798a:	2b80      	cmp	r3, #128	; 0x80
 800798c:	d009      	beq.n	80079a2 <HAL_SAI_DMAStop+0x74>
      {
        status = HAL_ERROR;
 800798e:	2301      	movs	r3, #1
 8007990:	73fb      	strb	r3, [r7, #15]
        hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007998:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
  }

  /* Abort the SAI Rx DMA Stream */
  if ((hsai->hdmarx != NULL) && (hsai->State == HAL_SAI_STATE_BUSY_RX))
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d01c      	beq.n	80079e4 <HAL_SAI_DMAStop+0xb6>
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 80079b0:	b2db      	uxtb	r3, r3
 80079b2:	2b22      	cmp	r3, #34	; 0x22
 80079b4:	d116      	bne.n	80079e4 <HAL_SAI_DMAStop+0xb6>
  {
    if (HAL_DMA_Abort(hsai->hdmarx) != HAL_OK)
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079ba:	4618      	mov	r0, r3
 80079bc:	f7fd f8e0 	bl	8004b80 <HAL_DMA_Abort>
 80079c0:	4603      	mov	r3, r0
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d00e      	beq.n	80079e4 <HAL_SAI_DMAStop+0xb6>
    {
      /* If the DMA Rx errorCode is different from DMA No Transfer then return Error */
      if (hsai->hdmarx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079cc:	2b80      	cmp	r3, #128	; 0x80
 80079ce:	d009      	beq.n	80079e4 <HAL_SAI_DMAStop+0xb6>
      {
        status = HAL_ERROR;
 80079d0:	2301      	movs	r3, #1
 80079d2:	73fb      	strb	r3, [r7, #15]
        hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80079da:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
  }

  /* Disable SAI peripheral */
  SAI_Disable(hsai);
 80079e4:	6878      	ldr	r0, [r7, #4]
 80079e6:	f000 f8e7 	bl	8007bb8 <SAI_Disable>

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	685a      	ldr	r2, [r3, #4]
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	f042 0208 	orr.w	r2, r2, #8
 80079f8:	605a      	str	r2, [r3, #4]

  /* Set hsai state to ready */
  hsai->State = HAL_SAI_STATE_READY;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	2201      	movs	r2, #1
 80079fe:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Process Unlocked */
  __HAL_UNLOCK(hsai);
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	2200      	movs	r2, #0
 8007a06:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return status;
 8007a0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	3710      	adds	r7, #16
 8007a10:	46bd      	mov	sp, r7
 8007a12:	bd80      	pop	{r7, pc}

08007a14 <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b084      	sub	sp, #16
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	60f8      	str	r0, [r7, #12]
 8007a1c:	60b9      	str	r1, [r7, #8]
 8007a1e:	4613      	mov	r3, r2
 8007a20:	80fb      	strh	r3, [r7, #6]

  if ((pData == NULL) || (Size == 0))
 8007a22:	68bb      	ldr	r3, [r7, #8]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d002      	beq.n	8007a2e <HAL_SAI_Receive_DMA+0x1a>
 8007a28:	88fb      	ldrh	r3, [r7, #6]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d101      	bne.n	8007a32 <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 8007a2e:	2301      	movs	r3, #1
 8007a30:	e074      	b.n	8007b1c <HAL_SAI_Receive_DMA+0x108>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8007a38:	b2db      	uxtb	r3, r3
 8007a3a:	2b01      	cmp	r3, #1
 8007a3c:	d16d      	bne.n	8007b1a <HAL_SAI_Receive_DMA+0x106>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8007a44:	2b01      	cmp	r3, #1
 8007a46:	d101      	bne.n	8007a4c <HAL_SAI_Receive_DMA+0x38>
 8007a48:	2302      	movs	r3, #2
 8007a4a:	e067      	b.n	8007b1c <HAL_SAI_Receive_DMA+0x108>
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	2201      	movs	r2, #1
 8007a50:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    hsai->pBuffPtr = pData;
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	68ba      	ldr	r2, [r7, #8]
 8007a58:	665a      	str	r2, [r3, #100]	; 0x64
    hsai->XferSize = Size;
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	88fa      	ldrh	r2, [r7, #6]
 8007a5e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    hsai->XferCount = Size;
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	88fa      	ldrh	r2, [r7, #6]
 8007a66:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	2222      	movs	r2, #34	; 0x22
 8007a76:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a7e:	4a29      	ldr	r2, [pc, #164]	; (8007b24 <HAL_SAI_Receive_DMA+0x110>)
 8007a80:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a86:	4a28      	ldr	r2, [pc, #160]	; (8007b28 <HAL_SAI_Receive_DMA+0x114>)
 8007a88:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a8e:	4a27      	ldr	r2, [pc, #156]	; (8007b2c <HAL_SAI_Receive_DMA+0x118>)
 8007a90:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a96:	2200      	movs	r2, #0
 8007a98:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Rx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	331c      	adds	r3, #28
 8007aa4:	4619      	mov	r1, r3
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007aaa:	461a      	mov	r2, r3
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007ab2:	f7fd f805 	bl	8004ac0 <HAL_DMA_Start_IT>
 8007ab6:	4603      	mov	r3, r0
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d005      	beq.n	8007ac8 <HAL_SAI_Receive_DMA+0xb4>
    {
      __HAL_UNLOCK(hsai);
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	2200      	movs	r2, #0
 8007ac0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      return  HAL_ERROR;
 8007ac4:	2301      	movs	r3, #1
 8007ac6:	e029      	b.n	8007b1c <HAL_SAI_Receive_DMA+0x108>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8007ac8:	2100      	movs	r1, #0
 8007aca:	68f8      	ldr	r0, [r7, #12]
 8007acc:	f000 f83e 	bl	8007b4c <SAI_InterruptFlag>
 8007ad0:	4601      	mov	r1, r0
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	691a      	ldr	r2, [r3, #16]
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	430a      	orrs	r2, r1
 8007ade:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	681a      	ldr	r2, [r3, #0]
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8007aee:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d107      	bne.n	8007b0e <HAL_SAI_Receive_DMA+0xfa>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	681a      	ldr	r2, [r3, #0]
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8007b0c:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	2200      	movs	r2, #0
 8007b12:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8007b16:	2300      	movs	r3, #0
 8007b18:	e000      	b.n	8007b1c <HAL_SAI_Receive_DMA+0x108>
  }
  else
  {
    return HAL_BUSY;
 8007b1a:	2302      	movs	r3, #2
  }
}
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	3710      	adds	r7, #16
 8007b20:	46bd      	mov	sp, r7
 8007b22:	bd80      	pop	{r7, pc}
 8007b24:	08007c89 	.word	0x08007c89
 8007b28:	08007c29 	.word	0x08007c29
 8007b2c:	08007ca5 	.word	0x08007ca5

08007b30 <HAL_SAI_GetState>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL state
  */
HAL_SAI_StateTypeDef HAL_SAI_GetState(SAI_HandleTypeDef *hsai)
{
 8007b30:	b480      	push	{r7}
 8007b32:	b083      	sub	sp, #12
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]
  return hsai->State;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8007b3e:	b2db      	uxtb	r3, r3
}
 8007b40:	4618      	mov	r0, r3
 8007b42:	370c      	adds	r7, #12
 8007b44:	46bd      	mov	sp, r7
 8007b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4a:	4770      	bx	lr

08007b4c <SAI_InterruptFlag>:
  *                the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
 */
static uint32_t SAI_InterruptFlag(SAI_HandleTypeDef *hsai, uint32_t mode)
{
 8007b4c:	b480      	push	{r7}
 8007b4e:	b085      	sub	sp, #20
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
 8007b54:	6039      	str	r1, [r7, #0]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 8007b56:	2301      	movs	r3, #1
 8007b58:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 8007b5a:	683b      	ldr	r3, [r7, #0]
 8007b5c:	2b01      	cmp	r3, #1
 8007b5e:	d103      	bne.n	8007b68 <SAI_InterruptFlag+0x1c>
  {
    tmpIT |= SAI_IT_FREQ;
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	f043 0308 	orr.w	r3, r3, #8
 8007b66:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b6c:	2b08      	cmp	r3, #8
 8007b6e:	d10b      	bne.n	8007b88 <SAI_InterruptFlag+0x3c>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8007b74:	2b03      	cmp	r3, #3
 8007b76:	d003      	beq.n	8007b80 <SAI_InterruptFlag+0x34>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	685b      	ldr	r3, [r3, #4]
 8007b7c:	2b01      	cmp	r3, #1
 8007b7e:	d103      	bne.n	8007b88 <SAI_InterruptFlag+0x3c>
  {
    tmpIT |= SAI_IT_CNRDY;
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	f043 0310 	orr.w	r3, r3, #16
 8007b86:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	685b      	ldr	r3, [r3, #4]
 8007b8c:	2b03      	cmp	r3, #3
 8007b8e:	d003      	beq.n	8007b98 <SAI_InterruptFlag+0x4c>
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	685b      	ldr	r3, [r3, #4]
 8007b94:	2b02      	cmp	r3, #2
 8007b96:	d104      	bne.n	8007ba2 <SAI_InterruptFlag+0x56>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007b9e:	60fb      	str	r3, [r7, #12]
 8007ba0:	e003      	b.n	8007baa <SAI_InterruptFlag+0x5e>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	f043 0304 	orr.w	r3, r3, #4
 8007ba8:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 8007baa:	68fb      	ldr	r3, [r7, #12]
}
 8007bac:	4618      	mov	r0, r3
 8007bae:	3714      	adds	r7, #20
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb6:	4770      	bx	lr

08007bb8 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8007bb8:	b480      	push	{r7}
 8007bba:	b085      	sub	sp, #20
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 8007bc0:	4b17      	ldr	r3, [pc, #92]	; (8007c20 <SAI_Disable+0x68>)
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	4a17      	ldr	r2, [pc, #92]	; (8007c24 <SAI_Disable+0x6c>)
 8007bc6:	fba2 2303 	umull	r2, r3, r2, r3
 8007bca:	0b1b      	lsrs	r3, r3, #12
 8007bcc:	009b      	lsls	r3, r3, #2
 8007bce:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	681a      	ldr	r2, [r3, #0]
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007be2:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	1e5a      	subs	r2, r3, #1
 8007be8:	60fa      	str	r2, [r7, #12]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d10a      	bne.n	8007c04 <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007bf4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 8007bfe:	2303      	movs	r3, #3
 8007c00:	72fb      	strb	r3, [r7, #11]
      break;
 8007c02:	e006      	b.n	8007c12 <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d1e8      	bne.n	8007be4 <SAI_Disable+0x2c>

  return status;
 8007c12:	7afb      	ldrb	r3, [r7, #11]
}
 8007c14:	4618      	mov	r0, r3
 8007c16:	3714      	adds	r7, #20
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1e:	4770      	bx	lr
 8007c20:	20000000 	.word	0x20000000
 8007c24:	95cbec1b 	.word	0x95cbec1b

08007c28 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b084      	sub	sp, #16
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c34:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	69db      	ldr	r3, [r3, #28]
 8007c3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c3e:	d01c      	beq.n	8007c7a <SAI_DMARxCplt+0x52>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	681a      	ldr	r2, [r3, #0]
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8007c4e:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	2200      	movs	r2, #0
 8007c54:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8007c58:	2100      	movs	r1, #0
 8007c5a:	68f8      	ldr	r0, [r7, #12]
 8007c5c:	f7ff ff76 	bl	8007b4c <SAI_InterruptFlag>
 8007c60:	4603      	mov	r3, r0
 8007c62:	43d9      	mvns	r1, r3
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	691a      	ldr	r2, [r3, #16]
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	400a      	ands	r2, r1
 8007c70:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	2201      	movs	r2, #1
 8007c76:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 8007c7a:	68f8      	ldr	r0, [r7, #12]
 8007c7c:	f7fc fae0 	bl	8004240 <HAL_SAI_RxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8007c80:	bf00      	nop
 8007c82:	3710      	adds	r7, #16
 8007c84:	46bd      	mov	sp, r7
 8007c86:	bd80      	pop	{r7, pc}

08007c88 <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	b084      	sub	sp, #16
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c94:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 8007c96:	68f8      	ldr	r0, [r7, #12]
 8007c98:	f7fc fadc 	bl	8004254 <HAL_SAI_RxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8007c9c:	bf00      	nop
 8007c9e:	3710      	adds	r7, #16
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	bd80      	pop	{r7, pc}

08007ca4 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b084      	sub	sp, #16
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cb0:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007cb8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if ((hsai->hdmatx->ErrorCode == HAL_DMA_ERROR_TE) || (hsai->hdmarx->ErrorCode == HAL_DMA_ERROR_TE))
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007cc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cc8:	2b01      	cmp	r3, #1
 8007cca:	d004      	beq.n	8007cd6 <SAI_DMAError+0x32>
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cd2:	2b01      	cmp	r3, #1
 8007cd4:	d112      	bne.n	8007cfc <SAI_DMAError+0x58>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	681a      	ldr	r2, [r3, #0]
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8007ce4:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    SAI_Disable(hsai);
 8007ce6:	68f8      	ldr	r0, [r7, #12]
 8007ce8:	f7ff ff66 	bl	8007bb8 <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	2201      	movs	r2, #1
 8007cf0:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  }
  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 8007cfc:	68f8      	ldr	r0, [r7, #12]
 8007cfe:	f7fc f89f 	bl	8003e40 <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8007d02:	bf00      	nop
 8007d04:	3710      	adds	r7, #16
 8007d06:	46bd      	mov	sp, r7
 8007d08:	bd80      	pop	{r7, pc}

08007d0a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007d0a:	b580      	push	{r7, lr}
 8007d0c:	b082      	sub	sp, #8
 8007d0e:	af00      	add	r7, sp, #0
 8007d10:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d101      	bne.n	8007d1c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007d18:	2301      	movs	r3, #1
 8007d1a:	e040      	b.n	8007d9e <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d106      	bne.n	8007d32 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2200      	movs	r2, #0
 8007d28:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007d2c:	6878      	ldr	r0, [r7, #4]
 8007d2e:	f7fa faa3 	bl	8002278 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	2224      	movs	r2, #36	; 0x24
 8007d36:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	681a      	ldr	r2, [r3, #0]
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	f022 0201 	bic.w	r2, r2, #1
 8007d46:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007d48:	6878      	ldr	r0, [r7, #4]
 8007d4a:	f000 f8bf 	bl	8007ecc <UART_SetConfig>
 8007d4e:	4603      	mov	r3, r0
 8007d50:	2b01      	cmp	r3, #1
 8007d52:	d101      	bne.n	8007d58 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007d54:	2301      	movs	r3, #1
 8007d56:	e022      	b.n	8007d9e <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d002      	beq.n	8007d66 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8007d60:	6878      	ldr	r0, [r7, #4]
 8007d62:	f000 fb15 	bl	8008390 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	685a      	ldr	r2, [r3, #4]
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007d74:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	689a      	ldr	r2, [r3, #8]
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007d84:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	681a      	ldr	r2, [r3, #0]
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	f042 0201 	orr.w	r2, r2, #1
 8007d94:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007d96:	6878      	ldr	r0, [r7, #4]
 8007d98:	f000 fb9c 	bl	80084d4 <UART_CheckIdleState>
 8007d9c:	4603      	mov	r3, r0
}
 8007d9e:	4618      	mov	r0, r3
 8007da0:	3708      	adds	r7, #8
 8007da2:	46bd      	mov	sp, r7
 8007da4:	bd80      	pop	{r7, pc}

08007da6 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007da6:	b580      	push	{r7, lr}
 8007da8:	b08a      	sub	sp, #40	; 0x28
 8007daa:	af02      	add	r7, sp, #8
 8007dac:	60f8      	str	r0, [r7, #12]
 8007dae:	60b9      	str	r1, [r7, #8]
 8007db0:	603b      	str	r3, [r7, #0]
 8007db2:	4613      	mov	r3, r2
 8007db4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007dba:	2b20      	cmp	r3, #32
 8007dbc:	f040 8081 	bne.w	8007ec2 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007dc0:	68bb      	ldr	r3, [r7, #8]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d002      	beq.n	8007dcc <HAL_UART_Transmit+0x26>
 8007dc6:	88fb      	ldrh	r3, [r7, #6]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d101      	bne.n	8007dd0 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007dcc:	2301      	movs	r3, #1
 8007dce:	e079      	b.n	8007ec4 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8007dd6:	2b01      	cmp	r3, #1
 8007dd8:	d101      	bne.n	8007dde <HAL_UART_Transmit+0x38>
 8007dda:	2302      	movs	r3, #2
 8007ddc:	e072      	b.n	8007ec4 <HAL_UART_Transmit+0x11e>
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	2201      	movs	r2, #1
 8007de2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	2200      	movs	r2, #0
 8007dea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	2221      	movs	r2, #33	; 0x21
 8007df2:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007df4:	f7fc fc16 	bl	8004624 <HAL_GetTick>
 8007df8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	88fa      	ldrh	r2, [r7, #6]
 8007dfe:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	88fa      	ldrh	r2, [r7, #6]
 8007e06:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	689b      	ldr	r3, [r3, #8]
 8007e0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e12:	d108      	bne.n	8007e26 <HAL_UART_Transmit+0x80>
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	691b      	ldr	r3, [r3, #16]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d104      	bne.n	8007e26 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007e20:	68bb      	ldr	r3, [r7, #8]
 8007e22:	61bb      	str	r3, [r7, #24]
 8007e24:	e003      	b.n	8007e2e <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8007e26:	68bb      	ldr	r3, [r7, #8]
 8007e28:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	2200      	movs	r2, #0
 8007e32:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8007e36:	e02c      	b.n	8007e92 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	9300      	str	r3, [sp, #0]
 8007e3c:	697b      	ldr	r3, [r7, #20]
 8007e3e:	2200      	movs	r2, #0
 8007e40:	2180      	movs	r1, #128	; 0x80
 8007e42:	68f8      	ldr	r0, [r7, #12]
 8007e44:	f000 fb79 	bl	800853a <UART_WaitOnFlagUntilTimeout>
 8007e48:	4603      	mov	r3, r0
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d001      	beq.n	8007e52 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8007e4e:	2303      	movs	r3, #3
 8007e50:	e038      	b.n	8007ec4 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8007e52:	69fb      	ldr	r3, [r7, #28]
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d10b      	bne.n	8007e70 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007e58:	69bb      	ldr	r3, [r7, #24]
 8007e5a:	881b      	ldrh	r3, [r3, #0]
 8007e5c:	461a      	mov	r2, r3
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007e66:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007e68:	69bb      	ldr	r3, [r7, #24]
 8007e6a:	3302      	adds	r3, #2
 8007e6c:	61bb      	str	r3, [r7, #24]
 8007e6e:	e007      	b.n	8007e80 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007e70:	69fb      	ldr	r3, [r7, #28]
 8007e72:	781a      	ldrb	r2, [r3, #0]
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007e7a:	69fb      	ldr	r3, [r7, #28]
 8007e7c:	3301      	adds	r3, #1
 8007e7e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007e86:	b29b      	uxth	r3, r3
 8007e88:	3b01      	subs	r3, #1
 8007e8a:	b29a      	uxth	r2, r3
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007e98:	b29b      	uxth	r3, r3
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d1cc      	bne.n	8007e38 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007e9e:	683b      	ldr	r3, [r7, #0]
 8007ea0:	9300      	str	r3, [sp, #0]
 8007ea2:	697b      	ldr	r3, [r7, #20]
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	2140      	movs	r1, #64	; 0x40
 8007ea8:	68f8      	ldr	r0, [r7, #12]
 8007eaa:	f000 fb46 	bl	800853a <UART_WaitOnFlagUntilTimeout>
 8007eae:	4603      	mov	r3, r0
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d001      	beq.n	8007eb8 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8007eb4:	2303      	movs	r3, #3
 8007eb6:	e005      	b.n	8007ec4 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	2220      	movs	r2, #32
 8007ebc:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	e000      	b.n	8007ec4 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8007ec2:	2302      	movs	r3, #2
  }
}
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	3720      	adds	r7, #32
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	bd80      	pop	{r7, pc}

08007ecc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	b088      	sub	sp, #32
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007ed4:	2300      	movs	r3, #0
 8007ed6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	689a      	ldr	r2, [r3, #8]
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	691b      	ldr	r3, [r3, #16]
 8007ee0:	431a      	orrs	r2, r3
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	695b      	ldr	r3, [r3, #20]
 8007ee6:	431a      	orrs	r2, r3
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	69db      	ldr	r3, [r3, #28]
 8007eec:	4313      	orrs	r3, r2
 8007eee:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	681a      	ldr	r2, [r3, #0]
 8007ef6:	4ba7      	ldr	r3, [pc, #668]	; (8008194 <UART_SetConfig+0x2c8>)
 8007ef8:	4013      	ands	r3, r2
 8007efa:	687a      	ldr	r2, [r7, #4]
 8007efc:	6812      	ldr	r2, [r2, #0]
 8007efe:	6979      	ldr	r1, [r7, #20]
 8007f00:	430b      	orrs	r3, r1
 8007f02:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	685b      	ldr	r3, [r3, #4]
 8007f0a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	68da      	ldr	r2, [r3, #12]
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	430a      	orrs	r2, r1
 8007f18:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	699b      	ldr	r3, [r3, #24]
 8007f1e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	6a1b      	ldr	r3, [r3, #32]
 8007f24:	697a      	ldr	r2, [r7, #20]
 8007f26:	4313      	orrs	r3, r2
 8007f28:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	689b      	ldr	r3, [r3, #8]
 8007f30:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	697a      	ldr	r2, [r7, #20]
 8007f3a:	430a      	orrs	r2, r1
 8007f3c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	4a95      	ldr	r2, [pc, #596]	; (8008198 <UART_SetConfig+0x2cc>)
 8007f44:	4293      	cmp	r3, r2
 8007f46:	d120      	bne.n	8007f8a <UART_SetConfig+0xbe>
 8007f48:	4b94      	ldr	r3, [pc, #592]	; (800819c <UART_SetConfig+0x2d0>)
 8007f4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f4e:	f003 0303 	and.w	r3, r3, #3
 8007f52:	2b03      	cmp	r3, #3
 8007f54:	d816      	bhi.n	8007f84 <UART_SetConfig+0xb8>
 8007f56:	a201      	add	r2, pc, #4	; (adr r2, 8007f5c <UART_SetConfig+0x90>)
 8007f58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f5c:	08007f6d 	.word	0x08007f6d
 8007f60:	08007f79 	.word	0x08007f79
 8007f64:	08007f73 	.word	0x08007f73
 8007f68:	08007f7f 	.word	0x08007f7f
 8007f6c:	2301      	movs	r3, #1
 8007f6e:	77fb      	strb	r3, [r7, #31]
 8007f70:	e14f      	b.n	8008212 <UART_SetConfig+0x346>
 8007f72:	2302      	movs	r3, #2
 8007f74:	77fb      	strb	r3, [r7, #31]
 8007f76:	e14c      	b.n	8008212 <UART_SetConfig+0x346>
 8007f78:	2304      	movs	r3, #4
 8007f7a:	77fb      	strb	r3, [r7, #31]
 8007f7c:	e149      	b.n	8008212 <UART_SetConfig+0x346>
 8007f7e:	2308      	movs	r3, #8
 8007f80:	77fb      	strb	r3, [r7, #31]
 8007f82:	e146      	b.n	8008212 <UART_SetConfig+0x346>
 8007f84:	2310      	movs	r3, #16
 8007f86:	77fb      	strb	r3, [r7, #31]
 8007f88:	e143      	b.n	8008212 <UART_SetConfig+0x346>
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	4a84      	ldr	r2, [pc, #528]	; (80081a0 <UART_SetConfig+0x2d4>)
 8007f90:	4293      	cmp	r3, r2
 8007f92:	d132      	bne.n	8007ffa <UART_SetConfig+0x12e>
 8007f94:	4b81      	ldr	r3, [pc, #516]	; (800819c <UART_SetConfig+0x2d0>)
 8007f96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f9a:	f003 030c 	and.w	r3, r3, #12
 8007f9e:	2b0c      	cmp	r3, #12
 8007fa0:	d828      	bhi.n	8007ff4 <UART_SetConfig+0x128>
 8007fa2:	a201      	add	r2, pc, #4	; (adr r2, 8007fa8 <UART_SetConfig+0xdc>)
 8007fa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fa8:	08007fdd 	.word	0x08007fdd
 8007fac:	08007ff5 	.word	0x08007ff5
 8007fb0:	08007ff5 	.word	0x08007ff5
 8007fb4:	08007ff5 	.word	0x08007ff5
 8007fb8:	08007fe9 	.word	0x08007fe9
 8007fbc:	08007ff5 	.word	0x08007ff5
 8007fc0:	08007ff5 	.word	0x08007ff5
 8007fc4:	08007ff5 	.word	0x08007ff5
 8007fc8:	08007fe3 	.word	0x08007fe3
 8007fcc:	08007ff5 	.word	0x08007ff5
 8007fd0:	08007ff5 	.word	0x08007ff5
 8007fd4:	08007ff5 	.word	0x08007ff5
 8007fd8:	08007fef 	.word	0x08007fef
 8007fdc:	2300      	movs	r3, #0
 8007fde:	77fb      	strb	r3, [r7, #31]
 8007fe0:	e117      	b.n	8008212 <UART_SetConfig+0x346>
 8007fe2:	2302      	movs	r3, #2
 8007fe4:	77fb      	strb	r3, [r7, #31]
 8007fe6:	e114      	b.n	8008212 <UART_SetConfig+0x346>
 8007fe8:	2304      	movs	r3, #4
 8007fea:	77fb      	strb	r3, [r7, #31]
 8007fec:	e111      	b.n	8008212 <UART_SetConfig+0x346>
 8007fee:	2308      	movs	r3, #8
 8007ff0:	77fb      	strb	r3, [r7, #31]
 8007ff2:	e10e      	b.n	8008212 <UART_SetConfig+0x346>
 8007ff4:	2310      	movs	r3, #16
 8007ff6:	77fb      	strb	r3, [r7, #31]
 8007ff8:	e10b      	b.n	8008212 <UART_SetConfig+0x346>
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	4a69      	ldr	r2, [pc, #420]	; (80081a4 <UART_SetConfig+0x2d8>)
 8008000:	4293      	cmp	r3, r2
 8008002:	d120      	bne.n	8008046 <UART_SetConfig+0x17a>
 8008004:	4b65      	ldr	r3, [pc, #404]	; (800819c <UART_SetConfig+0x2d0>)
 8008006:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800800a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800800e:	2b30      	cmp	r3, #48	; 0x30
 8008010:	d013      	beq.n	800803a <UART_SetConfig+0x16e>
 8008012:	2b30      	cmp	r3, #48	; 0x30
 8008014:	d814      	bhi.n	8008040 <UART_SetConfig+0x174>
 8008016:	2b20      	cmp	r3, #32
 8008018:	d009      	beq.n	800802e <UART_SetConfig+0x162>
 800801a:	2b20      	cmp	r3, #32
 800801c:	d810      	bhi.n	8008040 <UART_SetConfig+0x174>
 800801e:	2b00      	cmp	r3, #0
 8008020:	d002      	beq.n	8008028 <UART_SetConfig+0x15c>
 8008022:	2b10      	cmp	r3, #16
 8008024:	d006      	beq.n	8008034 <UART_SetConfig+0x168>
 8008026:	e00b      	b.n	8008040 <UART_SetConfig+0x174>
 8008028:	2300      	movs	r3, #0
 800802a:	77fb      	strb	r3, [r7, #31]
 800802c:	e0f1      	b.n	8008212 <UART_SetConfig+0x346>
 800802e:	2302      	movs	r3, #2
 8008030:	77fb      	strb	r3, [r7, #31]
 8008032:	e0ee      	b.n	8008212 <UART_SetConfig+0x346>
 8008034:	2304      	movs	r3, #4
 8008036:	77fb      	strb	r3, [r7, #31]
 8008038:	e0eb      	b.n	8008212 <UART_SetConfig+0x346>
 800803a:	2308      	movs	r3, #8
 800803c:	77fb      	strb	r3, [r7, #31]
 800803e:	e0e8      	b.n	8008212 <UART_SetConfig+0x346>
 8008040:	2310      	movs	r3, #16
 8008042:	77fb      	strb	r3, [r7, #31]
 8008044:	e0e5      	b.n	8008212 <UART_SetConfig+0x346>
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	4a57      	ldr	r2, [pc, #348]	; (80081a8 <UART_SetConfig+0x2dc>)
 800804c:	4293      	cmp	r3, r2
 800804e:	d120      	bne.n	8008092 <UART_SetConfig+0x1c6>
 8008050:	4b52      	ldr	r3, [pc, #328]	; (800819c <UART_SetConfig+0x2d0>)
 8008052:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008056:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800805a:	2bc0      	cmp	r3, #192	; 0xc0
 800805c:	d013      	beq.n	8008086 <UART_SetConfig+0x1ba>
 800805e:	2bc0      	cmp	r3, #192	; 0xc0
 8008060:	d814      	bhi.n	800808c <UART_SetConfig+0x1c0>
 8008062:	2b80      	cmp	r3, #128	; 0x80
 8008064:	d009      	beq.n	800807a <UART_SetConfig+0x1ae>
 8008066:	2b80      	cmp	r3, #128	; 0x80
 8008068:	d810      	bhi.n	800808c <UART_SetConfig+0x1c0>
 800806a:	2b00      	cmp	r3, #0
 800806c:	d002      	beq.n	8008074 <UART_SetConfig+0x1a8>
 800806e:	2b40      	cmp	r3, #64	; 0x40
 8008070:	d006      	beq.n	8008080 <UART_SetConfig+0x1b4>
 8008072:	e00b      	b.n	800808c <UART_SetConfig+0x1c0>
 8008074:	2300      	movs	r3, #0
 8008076:	77fb      	strb	r3, [r7, #31]
 8008078:	e0cb      	b.n	8008212 <UART_SetConfig+0x346>
 800807a:	2302      	movs	r3, #2
 800807c:	77fb      	strb	r3, [r7, #31]
 800807e:	e0c8      	b.n	8008212 <UART_SetConfig+0x346>
 8008080:	2304      	movs	r3, #4
 8008082:	77fb      	strb	r3, [r7, #31]
 8008084:	e0c5      	b.n	8008212 <UART_SetConfig+0x346>
 8008086:	2308      	movs	r3, #8
 8008088:	77fb      	strb	r3, [r7, #31]
 800808a:	e0c2      	b.n	8008212 <UART_SetConfig+0x346>
 800808c:	2310      	movs	r3, #16
 800808e:	77fb      	strb	r3, [r7, #31]
 8008090:	e0bf      	b.n	8008212 <UART_SetConfig+0x346>
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	4a45      	ldr	r2, [pc, #276]	; (80081ac <UART_SetConfig+0x2e0>)
 8008098:	4293      	cmp	r3, r2
 800809a:	d125      	bne.n	80080e8 <UART_SetConfig+0x21c>
 800809c:	4b3f      	ldr	r3, [pc, #252]	; (800819c <UART_SetConfig+0x2d0>)
 800809e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80080a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80080a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80080aa:	d017      	beq.n	80080dc <UART_SetConfig+0x210>
 80080ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80080b0:	d817      	bhi.n	80080e2 <UART_SetConfig+0x216>
 80080b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80080b6:	d00b      	beq.n	80080d0 <UART_SetConfig+0x204>
 80080b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80080bc:	d811      	bhi.n	80080e2 <UART_SetConfig+0x216>
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d003      	beq.n	80080ca <UART_SetConfig+0x1fe>
 80080c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80080c6:	d006      	beq.n	80080d6 <UART_SetConfig+0x20a>
 80080c8:	e00b      	b.n	80080e2 <UART_SetConfig+0x216>
 80080ca:	2300      	movs	r3, #0
 80080cc:	77fb      	strb	r3, [r7, #31]
 80080ce:	e0a0      	b.n	8008212 <UART_SetConfig+0x346>
 80080d0:	2302      	movs	r3, #2
 80080d2:	77fb      	strb	r3, [r7, #31]
 80080d4:	e09d      	b.n	8008212 <UART_SetConfig+0x346>
 80080d6:	2304      	movs	r3, #4
 80080d8:	77fb      	strb	r3, [r7, #31]
 80080da:	e09a      	b.n	8008212 <UART_SetConfig+0x346>
 80080dc:	2308      	movs	r3, #8
 80080de:	77fb      	strb	r3, [r7, #31]
 80080e0:	e097      	b.n	8008212 <UART_SetConfig+0x346>
 80080e2:	2310      	movs	r3, #16
 80080e4:	77fb      	strb	r3, [r7, #31]
 80080e6:	e094      	b.n	8008212 <UART_SetConfig+0x346>
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	4a30      	ldr	r2, [pc, #192]	; (80081b0 <UART_SetConfig+0x2e4>)
 80080ee:	4293      	cmp	r3, r2
 80080f0:	d125      	bne.n	800813e <UART_SetConfig+0x272>
 80080f2:	4b2a      	ldr	r3, [pc, #168]	; (800819c <UART_SetConfig+0x2d0>)
 80080f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80080f8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80080fc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008100:	d017      	beq.n	8008132 <UART_SetConfig+0x266>
 8008102:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008106:	d817      	bhi.n	8008138 <UART_SetConfig+0x26c>
 8008108:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800810c:	d00b      	beq.n	8008126 <UART_SetConfig+0x25a>
 800810e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008112:	d811      	bhi.n	8008138 <UART_SetConfig+0x26c>
 8008114:	2b00      	cmp	r3, #0
 8008116:	d003      	beq.n	8008120 <UART_SetConfig+0x254>
 8008118:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800811c:	d006      	beq.n	800812c <UART_SetConfig+0x260>
 800811e:	e00b      	b.n	8008138 <UART_SetConfig+0x26c>
 8008120:	2301      	movs	r3, #1
 8008122:	77fb      	strb	r3, [r7, #31]
 8008124:	e075      	b.n	8008212 <UART_SetConfig+0x346>
 8008126:	2302      	movs	r3, #2
 8008128:	77fb      	strb	r3, [r7, #31]
 800812a:	e072      	b.n	8008212 <UART_SetConfig+0x346>
 800812c:	2304      	movs	r3, #4
 800812e:	77fb      	strb	r3, [r7, #31]
 8008130:	e06f      	b.n	8008212 <UART_SetConfig+0x346>
 8008132:	2308      	movs	r3, #8
 8008134:	77fb      	strb	r3, [r7, #31]
 8008136:	e06c      	b.n	8008212 <UART_SetConfig+0x346>
 8008138:	2310      	movs	r3, #16
 800813a:	77fb      	strb	r3, [r7, #31]
 800813c:	e069      	b.n	8008212 <UART_SetConfig+0x346>
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	4a1c      	ldr	r2, [pc, #112]	; (80081b4 <UART_SetConfig+0x2e8>)
 8008144:	4293      	cmp	r3, r2
 8008146:	d137      	bne.n	80081b8 <UART_SetConfig+0x2ec>
 8008148:	4b14      	ldr	r3, [pc, #80]	; (800819c <UART_SetConfig+0x2d0>)
 800814a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800814e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8008152:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008156:	d017      	beq.n	8008188 <UART_SetConfig+0x2bc>
 8008158:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800815c:	d817      	bhi.n	800818e <UART_SetConfig+0x2c2>
 800815e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008162:	d00b      	beq.n	800817c <UART_SetConfig+0x2b0>
 8008164:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008168:	d811      	bhi.n	800818e <UART_SetConfig+0x2c2>
 800816a:	2b00      	cmp	r3, #0
 800816c:	d003      	beq.n	8008176 <UART_SetConfig+0x2aa>
 800816e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008172:	d006      	beq.n	8008182 <UART_SetConfig+0x2b6>
 8008174:	e00b      	b.n	800818e <UART_SetConfig+0x2c2>
 8008176:	2300      	movs	r3, #0
 8008178:	77fb      	strb	r3, [r7, #31]
 800817a:	e04a      	b.n	8008212 <UART_SetConfig+0x346>
 800817c:	2302      	movs	r3, #2
 800817e:	77fb      	strb	r3, [r7, #31]
 8008180:	e047      	b.n	8008212 <UART_SetConfig+0x346>
 8008182:	2304      	movs	r3, #4
 8008184:	77fb      	strb	r3, [r7, #31]
 8008186:	e044      	b.n	8008212 <UART_SetConfig+0x346>
 8008188:	2308      	movs	r3, #8
 800818a:	77fb      	strb	r3, [r7, #31]
 800818c:	e041      	b.n	8008212 <UART_SetConfig+0x346>
 800818e:	2310      	movs	r3, #16
 8008190:	77fb      	strb	r3, [r7, #31]
 8008192:	e03e      	b.n	8008212 <UART_SetConfig+0x346>
 8008194:	efff69f3 	.word	0xefff69f3
 8008198:	40011000 	.word	0x40011000
 800819c:	40023800 	.word	0x40023800
 80081a0:	40004400 	.word	0x40004400
 80081a4:	40004800 	.word	0x40004800
 80081a8:	40004c00 	.word	0x40004c00
 80081ac:	40005000 	.word	0x40005000
 80081b0:	40011400 	.word	0x40011400
 80081b4:	40007800 	.word	0x40007800
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	4a71      	ldr	r2, [pc, #452]	; (8008384 <UART_SetConfig+0x4b8>)
 80081be:	4293      	cmp	r3, r2
 80081c0:	d125      	bne.n	800820e <UART_SetConfig+0x342>
 80081c2:	4b71      	ldr	r3, [pc, #452]	; (8008388 <UART_SetConfig+0x4bc>)
 80081c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80081c8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80081cc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80081d0:	d017      	beq.n	8008202 <UART_SetConfig+0x336>
 80081d2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80081d6:	d817      	bhi.n	8008208 <UART_SetConfig+0x33c>
 80081d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80081dc:	d00b      	beq.n	80081f6 <UART_SetConfig+0x32a>
 80081de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80081e2:	d811      	bhi.n	8008208 <UART_SetConfig+0x33c>
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d003      	beq.n	80081f0 <UART_SetConfig+0x324>
 80081e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80081ec:	d006      	beq.n	80081fc <UART_SetConfig+0x330>
 80081ee:	e00b      	b.n	8008208 <UART_SetConfig+0x33c>
 80081f0:	2300      	movs	r3, #0
 80081f2:	77fb      	strb	r3, [r7, #31]
 80081f4:	e00d      	b.n	8008212 <UART_SetConfig+0x346>
 80081f6:	2302      	movs	r3, #2
 80081f8:	77fb      	strb	r3, [r7, #31]
 80081fa:	e00a      	b.n	8008212 <UART_SetConfig+0x346>
 80081fc:	2304      	movs	r3, #4
 80081fe:	77fb      	strb	r3, [r7, #31]
 8008200:	e007      	b.n	8008212 <UART_SetConfig+0x346>
 8008202:	2308      	movs	r3, #8
 8008204:	77fb      	strb	r3, [r7, #31]
 8008206:	e004      	b.n	8008212 <UART_SetConfig+0x346>
 8008208:	2310      	movs	r3, #16
 800820a:	77fb      	strb	r3, [r7, #31]
 800820c:	e001      	b.n	8008212 <UART_SetConfig+0x346>
 800820e:	2310      	movs	r3, #16
 8008210:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	69db      	ldr	r3, [r3, #28]
 8008216:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800821a:	d15a      	bne.n	80082d2 <UART_SetConfig+0x406>
  {
    switch (clocksource)
 800821c:	7ffb      	ldrb	r3, [r7, #31]
 800821e:	2b08      	cmp	r3, #8
 8008220:	d827      	bhi.n	8008272 <UART_SetConfig+0x3a6>
 8008222:	a201      	add	r2, pc, #4	; (adr r2, 8008228 <UART_SetConfig+0x35c>)
 8008224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008228:	0800824d 	.word	0x0800824d
 800822c:	08008255 	.word	0x08008255
 8008230:	0800825d 	.word	0x0800825d
 8008234:	08008273 	.word	0x08008273
 8008238:	08008263 	.word	0x08008263
 800823c:	08008273 	.word	0x08008273
 8008240:	08008273 	.word	0x08008273
 8008244:	08008273 	.word	0x08008273
 8008248:	0800826b 	.word	0x0800826b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800824c:	f7fe fb40 	bl	80068d0 <HAL_RCC_GetPCLK1Freq>
 8008250:	61b8      	str	r0, [r7, #24]
        break;
 8008252:	e013      	b.n	800827c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008254:	f7fe fb50 	bl	80068f8 <HAL_RCC_GetPCLK2Freq>
 8008258:	61b8      	str	r0, [r7, #24]
        break;
 800825a:	e00f      	b.n	800827c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800825c:	4b4b      	ldr	r3, [pc, #300]	; (800838c <UART_SetConfig+0x4c0>)
 800825e:	61bb      	str	r3, [r7, #24]
        break;
 8008260:	e00c      	b.n	800827c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008262:	f7fe fa73 	bl	800674c <HAL_RCC_GetSysClockFreq>
 8008266:	61b8      	str	r0, [r7, #24]
        break;
 8008268:	e008      	b.n	800827c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800826a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800826e:	61bb      	str	r3, [r7, #24]
        break;
 8008270:	e004      	b.n	800827c <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8008272:	2300      	movs	r3, #0
 8008274:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008276:	2301      	movs	r3, #1
 8008278:	77bb      	strb	r3, [r7, #30]
        break;
 800827a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800827c:	69bb      	ldr	r3, [r7, #24]
 800827e:	2b00      	cmp	r3, #0
 8008280:	d074      	beq.n	800836c <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008282:	69bb      	ldr	r3, [r7, #24]
 8008284:	005a      	lsls	r2, r3, #1
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	685b      	ldr	r3, [r3, #4]
 800828a:	085b      	lsrs	r3, r3, #1
 800828c:	441a      	add	r2, r3
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	685b      	ldr	r3, [r3, #4]
 8008292:	fbb2 f3f3 	udiv	r3, r2, r3
 8008296:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008298:	693b      	ldr	r3, [r7, #16]
 800829a:	2b0f      	cmp	r3, #15
 800829c:	d916      	bls.n	80082cc <UART_SetConfig+0x400>
 800829e:	693b      	ldr	r3, [r7, #16]
 80082a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80082a4:	d212      	bcs.n	80082cc <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80082a6:	693b      	ldr	r3, [r7, #16]
 80082a8:	b29b      	uxth	r3, r3
 80082aa:	f023 030f 	bic.w	r3, r3, #15
 80082ae:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80082b0:	693b      	ldr	r3, [r7, #16]
 80082b2:	085b      	lsrs	r3, r3, #1
 80082b4:	b29b      	uxth	r3, r3
 80082b6:	f003 0307 	and.w	r3, r3, #7
 80082ba:	b29a      	uxth	r2, r3
 80082bc:	89fb      	ldrh	r3, [r7, #14]
 80082be:	4313      	orrs	r3, r2
 80082c0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	89fa      	ldrh	r2, [r7, #14]
 80082c8:	60da      	str	r2, [r3, #12]
 80082ca:	e04f      	b.n	800836c <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80082cc:	2301      	movs	r3, #1
 80082ce:	77bb      	strb	r3, [r7, #30]
 80082d0:	e04c      	b.n	800836c <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 80082d2:	7ffb      	ldrb	r3, [r7, #31]
 80082d4:	2b08      	cmp	r3, #8
 80082d6:	d828      	bhi.n	800832a <UART_SetConfig+0x45e>
 80082d8:	a201      	add	r2, pc, #4	; (adr r2, 80082e0 <UART_SetConfig+0x414>)
 80082da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082de:	bf00      	nop
 80082e0:	08008305 	.word	0x08008305
 80082e4:	0800830d 	.word	0x0800830d
 80082e8:	08008315 	.word	0x08008315
 80082ec:	0800832b 	.word	0x0800832b
 80082f0:	0800831b 	.word	0x0800831b
 80082f4:	0800832b 	.word	0x0800832b
 80082f8:	0800832b 	.word	0x0800832b
 80082fc:	0800832b 	.word	0x0800832b
 8008300:	08008323 	.word	0x08008323
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008304:	f7fe fae4 	bl	80068d0 <HAL_RCC_GetPCLK1Freq>
 8008308:	61b8      	str	r0, [r7, #24]
        break;
 800830a:	e013      	b.n	8008334 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800830c:	f7fe faf4 	bl	80068f8 <HAL_RCC_GetPCLK2Freq>
 8008310:	61b8      	str	r0, [r7, #24]
        break;
 8008312:	e00f      	b.n	8008334 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008314:	4b1d      	ldr	r3, [pc, #116]	; (800838c <UART_SetConfig+0x4c0>)
 8008316:	61bb      	str	r3, [r7, #24]
        break;
 8008318:	e00c      	b.n	8008334 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800831a:	f7fe fa17 	bl	800674c <HAL_RCC_GetSysClockFreq>
 800831e:	61b8      	str	r0, [r7, #24]
        break;
 8008320:	e008      	b.n	8008334 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008322:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008326:	61bb      	str	r3, [r7, #24]
        break;
 8008328:	e004      	b.n	8008334 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 800832a:	2300      	movs	r3, #0
 800832c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800832e:	2301      	movs	r3, #1
 8008330:	77bb      	strb	r3, [r7, #30]
        break;
 8008332:	bf00      	nop
    }

    if (pclk != 0U)
 8008334:	69bb      	ldr	r3, [r7, #24]
 8008336:	2b00      	cmp	r3, #0
 8008338:	d018      	beq.n	800836c <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	685b      	ldr	r3, [r3, #4]
 800833e:	085a      	lsrs	r2, r3, #1
 8008340:	69bb      	ldr	r3, [r7, #24]
 8008342:	441a      	add	r2, r3
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	685b      	ldr	r3, [r3, #4]
 8008348:	fbb2 f3f3 	udiv	r3, r2, r3
 800834c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800834e:	693b      	ldr	r3, [r7, #16]
 8008350:	2b0f      	cmp	r3, #15
 8008352:	d909      	bls.n	8008368 <UART_SetConfig+0x49c>
 8008354:	693b      	ldr	r3, [r7, #16]
 8008356:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800835a:	d205      	bcs.n	8008368 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800835c:	693b      	ldr	r3, [r7, #16]
 800835e:	b29a      	uxth	r2, r3
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	60da      	str	r2, [r3, #12]
 8008366:	e001      	b.n	800836c <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8008368:	2301      	movs	r3, #1
 800836a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	2200      	movs	r2, #0
 8008370:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	2200      	movs	r2, #0
 8008376:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8008378:	7fbb      	ldrb	r3, [r7, #30]
}
 800837a:	4618      	mov	r0, r3
 800837c:	3720      	adds	r7, #32
 800837e:	46bd      	mov	sp, r7
 8008380:	bd80      	pop	{r7, pc}
 8008382:	bf00      	nop
 8008384:	40007c00 	.word	0x40007c00
 8008388:	40023800 	.word	0x40023800
 800838c:	00f42400 	.word	0x00f42400

08008390 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008390:	b480      	push	{r7}
 8008392:	b083      	sub	sp, #12
 8008394:	af00      	add	r7, sp, #0
 8008396:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800839c:	f003 0301 	and.w	r3, r3, #1
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d00a      	beq.n	80083ba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	685b      	ldr	r3, [r3, #4]
 80083aa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	430a      	orrs	r2, r1
 80083b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083be:	f003 0302 	and.w	r3, r3, #2
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d00a      	beq.n	80083dc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	685b      	ldr	r3, [r3, #4]
 80083cc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	430a      	orrs	r2, r1
 80083da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083e0:	f003 0304 	and.w	r3, r3, #4
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d00a      	beq.n	80083fe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	685b      	ldr	r3, [r3, #4]
 80083ee:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	430a      	orrs	r2, r1
 80083fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008402:	f003 0308 	and.w	r3, r3, #8
 8008406:	2b00      	cmp	r3, #0
 8008408:	d00a      	beq.n	8008420 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	685b      	ldr	r3, [r3, #4]
 8008410:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	430a      	orrs	r2, r1
 800841e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008424:	f003 0310 	and.w	r3, r3, #16
 8008428:	2b00      	cmp	r3, #0
 800842a:	d00a      	beq.n	8008442 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	689b      	ldr	r3, [r3, #8]
 8008432:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	430a      	orrs	r2, r1
 8008440:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008446:	f003 0320 	and.w	r3, r3, #32
 800844a:	2b00      	cmp	r3, #0
 800844c:	d00a      	beq.n	8008464 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	689b      	ldr	r3, [r3, #8]
 8008454:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	430a      	orrs	r2, r1
 8008462:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008468:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800846c:	2b00      	cmp	r3, #0
 800846e:	d01a      	beq.n	80084a6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	685b      	ldr	r3, [r3, #4]
 8008476:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	430a      	orrs	r2, r1
 8008484:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800848a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800848e:	d10a      	bne.n	80084a6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	685b      	ldr	r3, [r3, #4]
 8008496:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	430a      	orrs	r2, r1
 80084a4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d00a      	beq.n	80084c8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	685b      	ldr	r3, [r3, #4]
 80084b8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	430a      	orrs	r2, r1
 80084c6:	605a      	str	r2, [r3, #4]
  }
}
 80084c8:	bf00      	nop
 80084ca:	370c      	adds	r7, #12
 80084cc:	46bd      	mov	sp, r7
 80084ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d2:	4770      	bx	lr

080084d4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b086      	sub	sp, #24
 80084d8:	af02      	add	r7, sp, #8
 80084da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	2200      	movs	r2, #0
 80084e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80084e4:	f7fc f89e 	bl	8004624 <HAL_GetTick>
 80084e8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	f003 0308 	and.w	r3, r3, #8
 80084f4:	2b08      	cmp	r3, #8
 80084f6:	d10e      	bne.n	8008516 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80084f8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80084fc:	9300      	str	r3, [sp, #0]
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	2200      	movs	r2, #0
 8008502:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008506:	6878      	ldr	r0, [r7, #4]
 8008508:	f000 f817 	bl	800853a <UART_WaitOnFlagUntilTimeout>
 800850c:	4603      	mov	r3, r0
 800850e:	2b00      	cmp	r3, #0
 8008510:	d001      	beq.n	8008516 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008512:	2303      	movs	r3, #3
 8008514:	e00d      	b.n	8008532 <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	2220      	movs	r2, #32
 800851a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	2220      	movs	r2, #32
 8008520:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	2200      	movs	r2, #0
 8008526:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	2200      	movs	r2, #0
 800852c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8008530:	2300      	movs	r3, #0
}
 8008532:	4618      	mov	r0, r3
 8008534:	3710      	adds	r7, #16
 8008536:	46bd      	mov	sp, r7
 8008538:	bd80      	pop	{r7, pc}

0800853a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800853a:	b580      	push	{r7, lr}
 800853c:	b09c      	sub	sp, #112	; 0x70
 800853e:	af00      	add	r7, sp, #0
 8008540:	60f8      	str	r0, [r7, #12]
 8008542:	60b9      	str	r1, [r7, #8]
 8008544:	603b      	str	r3, [r7, #0]
 8008546:	4613      	mov	r3, r2
 8008548:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800854a:	e0a5      	b.n	8008698 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800854c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800854e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008552:	f000 80a1 	beq.w	8008698 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008556:	f7fc f865 	bl	8004624 <HAL_GetTick>
 800855a:	4602      	mov	r2, r0
 800855c:	683b      	ldr	r3, [r7, #0]
 800855e:	1ad3      	subs	r3, r2, r3
 8008560:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008562:	429a      	cmp	r2, r3
 8008564:	d302      	bcc.n	800856c <UART_WaitOnFlagUntilTimeout+0x32>
 8008566:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008568:	2b00      	cmp	r3, #0
 800856a:	d13e      	bne.n	80085ea <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008572:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008574:	e853 3f00 	ldrex	r3, [r3]
 8008578:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800857a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800857c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008580:	667b      	str	r3, [r7, #100]	; 0x64
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	461a      	mov	r2, r3
 8008588:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800858a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800858c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800858e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008590:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008592:	e841 2300 	strex	r3, r2, [r1]
 8008596:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008598:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800859a:	2b00      	cmp	r3, #0
 800859c:	d1e6      	bne.n	800856c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	3308      	adds	r3, #8
 80085a4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085a8:	e853 3f00 	ldrex	r3, [r3]
 80085ac:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80085ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085b0:	f023 0301 	bic.w	r3, r3, #1
 80085b4:	663b      	str	r3, [r7, #96]	; 0x60
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	3308      	adds	r3, #8
 80085bc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80085be:	64ba      	str	r2, [r7, #72]	; 0x48
 80085c0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085c2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80085c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80085c6:	e841 2300 	strex	r3, r2, [r1]
 80085ca:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80085cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d1e5      	bne.n	800859e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	2220      	movs	r2, #32
 80085d6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	2220      	movs	r2, #32
 80085dc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	2200      	movs	r2, #0
 80085e2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80085e6:	2303      	movs	r3, #3
 80085e8:	e067      	b.n	80086ba <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	f003 0304 	and.w	r3, r3, #4
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d04f      	beq.n	8008698 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	69db      	ldr	r3, [r3, #28]
 80085fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008602:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008606:	d147      	bne.n	8008698 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008610:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800861a:	e853 3f00 	ldrex	r3, [r3]
 800861e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008622:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008626:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	461a      	mov	r2, r3
 800862e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008630:	637b      	str	r3, [r7, #52]	; 0x34
 8008632:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008634:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008636:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008638:	e841 2300 	strex	r3, r2, [r1]
 800863c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800863e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008640:	2b00      	cmp	r3, #0
 8008642:	d1e6      	bne.n	8008612 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	3308      	adds	r3, #8
 800864a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800864c:	697b      	ldr	r3, [r7, #20]
 800864e:	e853 3f00 	ldrex	r3, [r3]
 8008652:	613b      	str	r3, [r7, #16]
   return(result);
 8008654:	693b      	ldr	r3, [r7, #16]
 8008656:	f023 0301 	bic.w	r3, r3, #1
 800865a:	66bb      	str	r3, [r7, #104]	; 0x68
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	3308      	adds	r3, #8
 8008662:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008664:	623a      	str	r2, [r7, #32]
 8008666:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008668:	69f9      	ldr	r1, [r7, #28]
 800866a:	6a3a      	ldr	r2, [r7, #32]
 800866c:	e841 2300 	strex	r3, r2, [r1]
 8008670:	61bb      	str	r3, [r7, #24]
   return(result);
 8008672:	69bb      	ldr	r3, [r7, #24]
 8008674:	2b00      	cmp	r3, #0
 8008676:	d1e5      	bne.n	8008644 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	2220      	movs	r2, #32
 800867c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	2220      	movs	r2, #32
 8008682:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	2220      	movs	r2, #32
 8008688:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	2200      	movs	r2, #0
 8008690:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8008694:	2303      	movs	r3, #3
 8008696:	e010      	b.n	80086ba <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	69da      	ldr	r2, [r3, #28]
 800869e:	68bb      	ldr	r3, [r7, #8]
 80086a0:	4013      	ands	r3, r2
 80086a2:	68ba      	ldr	r2, [r7, #8]
 80086a4:	429a      	cmp	r2, r3
 80086a6:	bf0c      	ite	eq
 80086a8:	2301      	moveq	r3, #1
 80086aa:	2300      	movne	r3, #0
 80086ac:	b2db      	uxtb	r3, r3
 80086ae:	461a      	mov	r2, r3
 80086b0:	79fb      	ldrb	r3, [r7, #7]
 80086b2:	429a      	cmp	r2, r3
 80086b4:	f43f af4a 	beq.w	800854c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80086b8:	2300      	movs	r3, #0
}
 80086ba:	4618      	mov	r0, r3
 80086bc:	3770      	adds	r7, #112	; 0x70
 80086be:	46bd      	mov	sp, r7
 80086c0:	bd80      	pop	{r7, pc}
	...

080086c4 <arm_cos_f32>:
  int32_t n;
  float32_t findex;

  /* input x is in radians */
  /* Scale input to [0 1] range from [0 2*PI] , divide input by 2*pi, add 0.25 (pi/2) to read sine table */
  in = x * 0.159154943092f + 0.25f;
 80086c4:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 80086c8:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 800873c <arm_cos_f32+0x78>

  /* fractional value calculation */
  fract = findex - (float32_t) index;

  /* Read two nearest values of input value from the cos table */
  a = sinTable_f32[index];
 80086cc:	4a1c      	ldr	r2, [pc, #112]	; (8008740 <arm_cos_f32+0x7c>)
  in = x * 0.159154943092f + 0.25f;
 80086ce:	eee0 7a07 	vfma.f32	s15, s0, s14
  findex = (float32_t)FAST_MATH_TABLE_SIZE * in;
 80086d2:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8008744 <arm_cos_f32+0x80>
  if (in < 0.0f)
 80086d6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
  n = (int32_t) in;
 80086da:	eebd 0ae7 	vcvt.s32.f32	s0, s15
  if (in < 0.0f)
 80086de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    n--;
 80086e2:	bf42      	ittt	mi
 80086e4:	ee10 3a10 	vmovmi	r3, s0
 80086e8:	f103 33ff 	addmi.w	r3, r3, #4294967295
 80086ec:	ee00 3a10 	vmovmi	s0, r3
  in = in - (float32_t) n;
 80086f0:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 80086f4:	ee37 0ac0 	vsub.f32	s0, s15, s0
  findex = (float32_t)FAST_MATH_TABLE_SIZE * in;
 80086f8:	ee20 0a07 	vmul.f32	s0, s0, s14
  index = (uint16_t)findex;
 80086fc:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8008700:	ee17 3a90 	vmov	r3, s15
 8008704:	b29b      	uxth	r3, r3
  if (index >= FAST_MATH_TABLE_SIZE) {
 8008706:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    index = 0;
 800870a:	bf24      	itt	cs
 800870c:	2300      	movcs	r3, #0
    findex -= (float32_t)FAST_MATH_TABLE_SIZE;
 800870e:	ee30 0a47 	vsubcs.f32	s0, s0, s14
  fract = findex - (float32_t) index;
 8008712:	ee07 3a90 	vmov	s15, r3
  a = sinTable_f32[index];
 8008716:	eb02 0183 	add.w	r1, r2, r3, lsl #2
  fract = findex - (float32_t) index;
 800871a:	eef8 7a67 	vcvt.f32.u32	s15, s15
  b = sinTable_f32[index+1];

  /* Linear interpolation process */
  cosVal = (1.0f - fract) * a + fract * b;
 800871e:	ed91 7a01 	vldr	s14, [r1, #4]
  fract = findex - (float32_t) index;
 8008722:	ee30 0a67 	vsub.f32	s0, s0, s15
  cosVal = (1.0f - fract) * a + fract * b;
 8008726:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800872a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800872e:	ee20 0a07 	vmul.f32	s0, s0, s14
 8008732:	ed91 7a00 	vldr	s14, [r1]

  /* Return output value */
  return (cosVal);
}
 8008736:	eea7 0a87 	vfma.f32	s0, s15, s14
 800873a:	4770      	bx	lr
 800873c:	3e22f983 	.word	0x3e22f983
 8008740:	0804ccc8 	.word	0x0804ccc8
 8008744:	44000000 	.word	0x44000000

08008748 <arm_vlog_f32>:

void arm_vlog_f32(
  const float32_t * pSrc,
        float32_t * pDst,
        uint32_t blockSize)
{
 8008748:	b570      	push	{r4, r5, r6, lr}
 800874a:	4605      	mov	r5, r0
 800874c:	460e      	mov	r6, r1
 800874e:	4614      	mov	r4, r2
#else
   blkCnt = blockSize;
#endif
#endif

   while (blkCnt > 0U)
 8008750:	b904      	cbnz	r4, 8008754 <arm_vlog_f32+0xc>
      *pDst++ = logf(*pSrc++);
  
      /* Decrement loop counter */
      blkCnt--;
   }
}
 8008752:	bd70      	pop	{r4, r5, r6, pc}
      *pDst++ = logf(*pSrc++);
 8008754:	ecb5 0a01 	vldmia	r5!, {s0}
      blkCnt--;
 8008758:	3c01      	subs	r4, #1
      *pDst++ = logf(*pSrc++);
 800875a:	f001 fb1f 	bl	8009d9c <logf>
 800875e:	eca6 0a01 	vstmia	r6!, {s0}
      blkCnt--;
 8008762:	e7f5      	b.n	8008750 <arm_vlog_f32+0x8>

08008764 <arm_absmax_f32>:

  /* Initialise index value to zero. */
  outIndex = 0U;

  /* Load first input value that act as reference value for comparision */
  out = fabsf(*pSrc++);
 8008764:	ecf0 7a01 	vldmia	r0!, {s15}
 8008768:	eef0 7ae7 	vabs.f32	s15, s15
{
 800876c:	b530      	push	{r4, r5, lr}

  /* Initialize blkCnt with number of samples */
  blkCnt = (blockSize - 1U);
 800876e:	1e4c      	subs	r4, r1, #1
  outIndex = 0U;
 8008770:	2500      	movs	r5, #0


  while (blkCnt > 0U)
 8008772:	b91c      	cbnz	r4, 800877c <arm_absmax_f32+0x18>
    /* Decrement loop counter */
    blkCnt--;
  }

  /* Store the maximum value and it's index into destination pointers */
  *pResult = out;
 8008774:	edc2 7a00 	vstr	s15, [r2]
  *pIndex = outIndex;
 8008778:	601d      	str	r5, [r3, #0]
}
 800877a:	bd30      	pop	{r4, r5, pc}
    maxVal = fabsf(*pSrc++);
 800877c:	ecb0 7a01 	vldmia	r0!, {s14}
 8008780:	eeb0 7ac7 	vabs.f32	s14, s14
    if (out < maxVal)
 8008784:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008788:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      outIndex = blockSize - blkCnt;
 800878c:	bf44      	itt	mi
 800878e:	1b0d      	submi	r5, r1, r4
      out = maxVal;
 8008790:	eef0 7a47 	vmovmi.f32	s15, s14
    blkCnt--;
 8008794:	3c01      	subs	r4, #1
 8008796:	e7ec      	b.n	8008772 <arm_absmax_f32+0xe>

08008798 <arm_absmax_q15>:
void arm_absmax_q15(
  const q15_t * pSrc,
        uint32_t blockSize,
        q15_t * pResult,
        uint32_t * pIndex)
{
 8008798:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        uint32_t index;                                /* index of maximum value */                         \
                                                                                                            \
  /* Initialize index value to zero. */                                                                     \
  outIndex = 0U;                                                                                            \
  /* Load first input value that act as reference value for comparision */                                  \
  out = *pSrc++;                                                                                            \
 800879c:	f9b0 4000 	ldrsh.w	r4, [r0]
  out = (out > 0) ? out : (q15_t)__QSUB16(0, out);                                                                           \
 80087a0:	2c00      	cmp	r4, #0
 80087a2:	dc03      	bgt.n	80087ac <arm_absmax_q15+0x14>

__STATIC_FORCEINLINE uint32_t __QSUB16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80087a4:	2500      	movs	r5, #0
 80087a6:	fad5 f414 	qsub16	r4, r5, r4
 80087aa:	b224      	sxth	r4, r4
  /* Initialize index of extrema value. */                                                                  \
  index = 0U;                                                                                               \
                                                                                                            \
  /* Loop unrolling: Compute 4 outputs at a time */                                                         \
  blkCnt = (blockSize - 1U) >> 2U;                                                                          \
 80087ac:	1e4e      	subs	r6, r1, #1
  index = 0U;                                                                                               \
 80087ae:	2500      	movs	r5, #0
 80087b0:	f100 0e0a 	add.w	lr, r0, #10
  blkCnt = (blockSize - 1U) >> 2U;                                                                          \
 80087b4:	ea4f 0996 	mov.w	r9, r6, lsr #2
                                                                                                            \
  while (blkCnt > 0U)                                                                                       \
 80087b8:	f026 0a03 	bic.w	sl, r6, #3
  outIndex = 0U;                                                                                            \
 80087bc:	46ac      	mov	ip, r5
 80087be:	46a8      	mov	r8, r5
  while (blkCnt > 0U)                                                                                       \
 80087c0:	4555      	cmp	r5, sl
 80087c2:	d10c      	bne.n	80087de <arm_absmax_q15+0x46>
 80087c4:	eb00 00c9 	add.w	r0, r0, r9, lsl #3
    /* Decrement loop counter */                                                                            \
    blkCnt--;                                                                                               \
  }                                                                                                         \
                                                                                                            \
  /* Loop unrolling: Compute remaining outputs */                                                           \
  blkCnt = (blockSize - 1U) % 4U;                                                                           \
 80087c8:	f006 0503 	and.w	r5, r6, #3
 80087cc:	2700      	movs	r7, #0
 80087ce:	3002      	adds	r0, #2
                                                                                                            \
                                                                                                            \
  while (blkCnt > 0U)                                                                                       \
 80087d0:	2d00      	cmp	r5, #0
 80087d2:	d13c      	bne.n	800884e <arm_absmax_q15+0xb6>
    /* Decrement loop counter */                                                                            \
    blkCnt--;                                                                                               \
  }                                                                                                         \
                                                                                                            \
  /* Store the extrema value and it's index into destination pointers */                                    \
  *pResult = out;                                                                                           \
 80087d4:	8014      	strh	r4, [r2, #0]
  *pIndex = outIndex;  
 80087d6:	f8c3 c000 	str.w	ip, [r3]
}
 80087da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    cur_absmax = *pSrc++;                                                                                     \
 80087de:	f93e 7c08 	ldrsh.w	r7, [lr, #-8]
    cur_absmax = (cur_absmax > 0) ? cur_absmax : (q15_t)__QSUB16(0, cur_absmax);                                                                \
 80087e2:	2f00      	cmp	r7, #0
 80087e4:	dc02      	bgt.n	80087ec <arm_absmax_q15+0x54>
 80087e6:	fad8 f717 	qsub16	r7, r8, r7
 80087ea:	b23f      	sxth	r7, r7
    if (cur_absmax > out)                                                                         \
 80087ec:	42bc      	cmp	r4, r7
 80087ee:	bfb8      	it	lt
 80087f0:	463c      	movlt	r4, r7
    cur_absmax = *pSrc++;                                                                                     \
 80087f2:	f93e 7c06 	ldrsh.w	r7, [lr, #-6]
 80087f6:	bfb8      	it	lt
 80087f8:	f105 0c01 	addlt.w	ip, r5, #1
    cur_absmax = (cur_absmax > 0) ? cur_absmax : (q15_t)__QSUB16(0, cur_absmax);                                                                \
 80087fc:	2f00      	cmp	r7, #0
 80087fe:	dc02      	bgt.n	8008806 <arm_absmax_q15+0x6e>
 8008800:	fad8 f717 	qsub16	r7, r8, r7
 8008804:	b23f      	sxth	r7, r7
    if (cur_absmax > out)                                                                         \
 8008806:	42bc      	cmp	r4, r7
 8008808:	bfb8      	it	lt
 800880a:	463c      	movlt	r4, r7
    cur_absmax = *pSrc++;                                                                                     \
 800880c:	f93e 7c04 	ldrsh.w	r7, [lr, #-4]
 8008810:	bfb8      	it	lt
 8008812:	f105 0c02 	addlt.w	ip, r5, #2
    cur_absmax = (cur_absmax > 0) ? cur_absmax : (q15_t)__QSUB16(0, cur_absmax);                                                                \
 8008816:	2f00      	cmp	r7, #0
 8008818:	dc02      	bgt.n	8008820 <arm_absmax_q15+0x88>
 800881a:	fad8 f717 	qsub16	r7, r8, r7
 800881e:	b23f      	sxth	r7, r7
    if (cur_absmax > out)                                                                          \
 8008820:	42bc      	cmp	r4, r7
 8008822:	bfb8      	it	lt
 8008824:	463c      	movlt	r4, r7
    cur_absmax = *pSrc++;                                                                                     \
 8008826:	f93e 7c02 	ldrsh.w	r7, [lr, #-2]
 800882a:	bfb8      	it	lt
 800882c:	f105 0c03 	addlt.w	ip, r5, #3
    cur_absmax = (cur_absmax > 0) ? cur_absmax : (q15_t)__QSUB16(0, cur_absmax);                                                                 \
 8008830:	2f00      	cmp	r7, #0
 8008832:	dc02      	bgt.n	800883a <arm_absmax_q15+0xa2>
 8008834:	fad8 f717 	qsub16	r7, r8, r7
 8008838:	b23f      	sxth	r7, r7
    if (cur_absmax > out)                                                                          \
 800883a:	42bc      	cmp	r4, r7
 800883c:	f105 0504 	add.w	r5, r5, #4
 8008840:	f10e 0e08 	add.w	lr, lr, #8
 8008844:	bfac      	ite	ge
 8008846:	4627      	movge	r7, r4
      outIndex = index + 4U;                                                                                \
 8008848:	46ac      	movlt	ip, r5
  outIndex = 0U;                                                                                            \
 800884a:	463c      	mov	r4, r7
 800884c:	e7b8      	b.n	80087c0 <arm_absmax_q15+0x28>
    cur_absmax = *pSrc++;                                                                                     \
 800884e:	f930 6b02 	ldrsh.w	r6, [r0], #2
    cur_absmax = (cur_absmax > 0) ? cur_absmax : (q15_t)__QSUB16(0, cur_absmax);                                                                 \
 8008852:	2e00      	cmp	r6, #0
 8008854:	dc02      	bgt.n	800885c <arm_absmax_q15+0xc4>
 8008856:	fad7 f616 	qsub16	r6, r7, r6
 800885a:	b236      	sxth	r6, r6
    if (cur_absmax > out)                                                                         \
 800885c:	42b4      	cmp	r4, r6
      outIndex = blockSize - blkCnt;                                                                        \
 800885e:	bfbc      	itt	lt
 8008860:	eba1 0c05 	sublt.w	ip, r1, r5
    if (cur_absmax > out)                                                                         \
 8008864:	4634      	movlt	r4, r6
    blkCnt--;                                                                                               \
 8008866:	3d01      	subs	r5, #1
 8008868:	e7b2      	b.n	80087d0 <arm_absmax_q15+0x38>

0800886a <arm_bitreversal_32>:

void arm_bitreversal_32(
        uint32_t *pSrc,
  const uint16_t bitRevLen,
  const uint16_t *pBitRevTab)
{
 800886a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t a, b, i, tmp;

  for (i = 0; i < bitRevLen; )
 800886e:	2300      	movs	r3, #0
{
 8008870:	4688      	mov	r8, r1
  {
     a = pBitRevTab[i    ] >> 2;
     b = pBitRevTab[i + 1] >> 2;
 8008872:	f102 0c02 	add.w	ip, r2, #2
  for (i = 0; i < bitRevLen; )
 8008876:	4598      	cmp	r8, r3
 8008878:	d801      	bhi.n	800887e <arm_bitreversal_32+0x14>
     pSrc[a+1] = pSrc[b+1];
     pSrc[b+1] = tmp;

    i += 2;
  }
}
 800887a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     a = pBitRevTab[i    ] >> 2;
 800887e:	f832 5013 	ldrh.w	r5, [r2, r3, lsl #1]
     b = pBitRevTab[i + 1] >> 2;
 8008882:	f83c 4013 	ldrh.w	r4, [ip, r3, lsl #1]
    i += 2;
 8008886:	3302      	adds	r3, #2
     a = pBitRevTab[i    ] >> 2;
 8008888:	08ad      	lsrs	r5, r5, #2
     b = pBitRevTab[i + 1] >> 2;
 800888a:	08a4      	lsrs	r4, r4, #2
     tmp = pSrc[a];
 800888c:	f850 e025 	ldr.w	lr, [r0, r5, lsl #2]
 8008890:	00af      	lsls	r7, r5, #2
     pSrc[a] = pSrc[b];
 8008892:	f850 1024 	ldr.w	r1, [r0, r4, lsl #2]
 8008896:	00a6      	lsls	r6, r4, #2
 8008898:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
     tmp = pSrc[a+1];
 800889c:	1d3d      	adds	r5, r7, #4
     pSrc[b] = tmp;
 800889e:	f840 e024 	str.w	lr, [r0, r4, lsl #2]
     pSrc[a+1] = pSrc[b+1];
 80088a2:	1d34      	adds	r4, r6, #4
     tmp = pSrc[a+1];
 80088a4:	5947      	ldr	r7, [r0, r5]
     pSrc[a+1] = pSrc[b+1];
 80088a6:	5906      	ldr	r6, [r0, r4]
 80088a8:	5146      	str	r6, [r0, r5]
     pSrc[b+1] = tmp;
 80088aa:	5107      	str	r7, [r0, r4]
    i += 2;
 80088ac:	e7e3      	b.n	8008876 <arm_bitreversal_32+0xc>
	...

080088b0 <arm_cfft_init_512_f32>:

  @par          Use of this function is mandatory only for the MVE version of the FFT.
                Other versions can still initialize directly the data structure using 
                variables declared in arm_const_structs.h
 */
CFFTINIT_F32(512,256)
 80088b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80088b4:	8003      	strh	r3, [r0, #0]
 80088b6:	4b04      	ldr	r3, [pc, #16]	; (80088c8 <arm_cfft_init_512_f32+0x18>)
 80088b8:	899a      	ldrh	r2, [r3, #12]
 80088ba:	8182      	strh	r2, [r0, #12]
 80088bc:	689a      	ldr	r2, [r3, #8]
 80088be:	685b      	ldr	r3, [r3, #4]
 80088c0:	6082      	str	r2, [r0, #8]
 80088c2:	6043      	str	r3, [r0, #4]
 80088c4:	2000      	movs	r0, #0
 80088c6:	4770      	bx	lr
 80088c8:	0804ccb8 	.word	0x0804ccb8

080088cc <arm_radix8_butterfly_f32>:
         pSrc[2 * i7 + 1] = t2 + r3;
         r1 = (r6 - r8) * C81;
         r6 = (r6 + r8) * C81;
         r2 = (s6 - s8) * C81;
         s6 = (s6 + s8) * C81;
         t1 = r5 - r1;
 80088cc:	eddf 5ab7 	vldr	s11, [pc, #732]	; 8008bac <arm_radix8_butterfly_f32+0x2e0>
 80088d0:	eeb0 5a65 	vmov.f32	s10, s11
{
 80088d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088d8:	ed2d 8b10 	vpush	{d8-d15}
 80088dc:	b08f      	sub	sp, #60	; 0x3c
 80088de:	9001      	str	r0, [sp, #4]
 80088e0:	9103      	str	r1, [sp, #12]
 80088e2:	920d      	str	r2, [sp, #52]	; 0x34
 80088e4:	9304      	str	r3, [sp, #16]
   n2 = fftLen;
 80088e6:	9102      	str	r1, [sp, #8]
      n2 = n2 >> 3;
 80088e8:	9b02      	ldr	r3, [sp, #8]
 80088ea:	2018      	movs	r0, #24
      i1 = 0;
 80088ec:	f04f 0900 	mov.w	r9, #0
      n2 = n2 >> 3;
 80088f0:	08d9      	lsrs	r1, r3, #3
      i1 = 0;
 80088f2:	00da      	lsls	r2, r3, #3
 80088f4:	014b      	lsls	r3, r1, #5
 80088f6:	fb00 f401 	mul.w	r4, r0, r1
 80088fa:	2028      	movs	r0, #40	; 0x28
 80088fc:	ea4f 1b01 	mov.w	fp, r1, lsl #4
 8008900:	9308      	str	r3, [sp, #32]
 8008902:	9b01      	ldr	r3, [sp, #4]
 8008904:	940c      	str	r4, [sp, #48]	; 0x30
 8008906:	eb03 1c41 	add.w	ip, r3, r1, lsl #5
 800890a:	fb00 f401 	mul.w	r4, r0, r1
 800890e:	00cb      	lsls	r3, r1, #3
 8008910:	2030      	movs	r0, #48	; 0x30
 8008912:	9406      	str	r4, [sp, #24]
 8008914:	9307      	str	r3, [sp, #28]
 8008916:	f06f 0317 	mvn.w	r3, #23
 800891a:	fb00 f401 	mul.w	r4, r0, r1
 800891e:	2038      	movs	r0, #56	; 0x38
 8008920:	434b      	muls	r3, r1
 8008922:	9405      	str	r4, [sp, #20]
 8008924:	eb0c 0703 	add.w	r7, ip, r3
 8008928:	fb00 fa01 	mul.w	sl, r0, r1
 800892c:	9801      	ldr	r0, [sp, #4]
 800892e:	eb07 1641 	add.w	r6, r7, r1, lsl #5
 8008932:	f100 0e04 	add.w	lr, r0, #4
 8008936:	18f5      	adds	r5, r6, r3
 8008938:	eb05 1441 	add.w	r4, r5, r1, lsl #5
 800893c:	4423      	add	r3, r4
 800893e:	eb03 1841 	add.w	r8, r3, r1, lsl #5
         r1 = pSrc[2 * i1] + pSrc[2 * i5];
 8008942:	eddc 7a00 	vldr	s15, [ip]
 8008946:	ed1e 7a01 	vldr	s14, [lr, #-4]
         r2 = pSrc[2 * i2] + pSrc[2 * i6];
 800894a:	edd7 3a00 	vldr	s7, [r7]
         r1 = pSrc[2 * i1] + pSrc[2 * i5];
 800894e:	ee77 6a27 	vadd.f32	s13, s14, s15
         r3 = pSrc[2 * i3] + pSrc[2 * i7];
 8008952:	edd5 4a00 	vldr	s9, [r5]
         r5 = pSrc[2 * i1] - pSrc[2 * i5];
 8008956:	ee37 7a67 	vsub.f32	s14, s14, s15
         r2 = pSrc[2 * i2] + pSrc[2 * i6];
 800895a:	edd6 7a00 	vldr	s15, [r6]
         r4 = pSrc[2 * i4] + pSrc[2 * i8];
 800895e:	ed98 3a00 	vldr	s6, [r8]
 8008962:	edd3 2a00 	vldr	s5, [r3]
         r2 = pSrc[2 * i2] + pSrc[2 * i6];
 8008966:	ee33 6aa7 	vadd.f32	s12, s7, s15
         r6 = pSrc[2 * i2] - pSrc[2 * i6];
 800896a:	ee73 3ae7 	vsub.f32	s7, s7, s15
         r3 = pSrc[2 * i3] + pSrc[2 * i7];
 800896e:	edd4 7a00 	vldr	s15, [r4]
 8008972:	ee34 4aa7 	vadd.f32	s8, s9, s15
         r7 = pSrc[2 * i3] - pSrc[2 * i7];
 8008976:	ee74 7ae7 	vsub.f32	s15, s9, s15
         r4 = pSrc[2 * i4] + pSrc[2 * i8];
 800897a:	ee72 4a83 	vadd.f32	s9, s5, s6
         t1 = r1 - r3;
 800897e:	ee36 8ac4 	vsub.f32	s16, s13, s8
         r1 = r1 + r3;
 8008982:	ee76 6a84 	vadd.f32	s13, s13, s8
         r3 = r2 - r4;
 8008986:	ee36 0a64 	vsub.f32	s0, s12, s9
         r2 = r2 + r4;
 800898a:	ee36 6a24 	vadd.f32	s12, s12, s9
         r8 = pSrc[2 * i4] - pSrc[2 * i8];
 800898e:	ee72 2ac3 	vsub.f32	s5, s5, s6
         pSrc[2 * i1] = r1 + r2;
 8008992:	ee76 4a86 	vadd.f32	s9, s13, s12
         pSrc[2 * i5] = r1 - r2;
 8008996:	ee76 6ac6 	vsub.f32	s13, s13, s12
         pSrc[2 * i1] = r1 + r2;
 800899a:	ed4e 4a01 	vstr	s9, [lr, #-4]
         pSrc[2 * i5] = r1 - r2;
 800899e:	edcc 6a00 	vstr	s13, [ip]
         r1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 80089a2:	ed9c 6a01 	vldr	s12, [ip, #4]
 80089a6:	edde 4a00 	vldr	s9, [lr]
         r2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 80089aa:	ed97 4a01 	vldr	s8, [r7, #4]
         r1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 80089ae:	ee74 6a86 	vadd.f32	s13, s9, s12
         s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 80089b2:	ed95 3a01 	vldr	s6, [r5, #4]
         s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 80089b6:	ee34 6ac6 	vsub.f32	s12, s9, s12
         r2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 80089ba:	edd6 4a01 	vldr	s9, [r6, #4]
         r4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 80089be:	edd8 1a01 	vldr	s3, [r8, #4]
         r2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 80089c2:	ee34 2a24 	vadd.f32	s4, s8, s9
         s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 80089c6:	ee34 4a64 	vsub.f32	s8, s8, s9
         s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 80089ca:	edd4 4a01 	vldr	s9, [r4, #4]
 80089ce:	ee33 1a24 	vadd.f32	s2, s6, s9
         s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 80089d2:	ee73 4a64 	vsub.f32	s9, s6, s9
         r4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 80089d6:	ed93 3a01 	vldr	s6, [r3, #4]
 80089da:	ee73 0a21 	vadd.f32	s1, s6, s3
         s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 80089de:	ee33 3a61 	vsub.f32	s6, s6, s3
         t2 = r1 - s3;
 80089e2:	ee76 1ac1 	vsub.f32	s3, s13, s2
         r1 = r1 + s3;
 80089e6:	ee76 6a81 	vadd.f32	s13, s13, s2
         s3 = r2 - r4;
 80089ea:	ee32 1a60 	vsub.f32	s2, s4, s1
         r2 = r2 + r4;
 80089ee:	ee32 2a20 	vadd.f32	s4, s4, s1
         pSrc[2 * i1 + 1] = r1 + r2;
 80089f2:	ee76 0a82 	vadd.f32	s1, s13, s4
         pSrc[2 * i5 + 1] = r1 - r2;
 80089f6:	ee76 6ac2 	vsub.f32	s13, s13, s4
         pSrc[2 * i7]     = t1 - s3;
 80089fa:	ee38 2a41 	vsub.f32	s4, s16, s2
         pSrc[2 * i1 + 1] = r1 + r2;
 80089fe:	edce 0a00 	vstr	s1, [lr]
         pSrc[2 * i5 + 1] = r1 - r2;
 8008a02:	4496      	add	lr, r2
 8008a04:	edcc 6a01 	vstr	s13, [ip, #4]
         pSrc[2 * i3]     = t1 + s3;
 8008a08:	ee78 6a01 	vadd.f32	s13, s16, s2
 8008a0c:	4494      	add	ip, r2
 8008a0e:	edc5 6a00 	vstr	s13, [r5]
         pSrc[2 * i3 + 1] = t2 - r3;
 8008a12:	ee71 6ac0 	vsub.f32	s13, s3, s0
         pSrc[2 * i7]     = t1 - s3;
 8008a16:	ed84 2a00 	vstr	s4, [r4]
         r2 = (s6 - s8) * C81;
 8008a1a:	ee34 2a43 	vsub.f32	s4, s8, s6
         s6 = (s6 + s8) * C81;
 8008a1e:	ee34 4a03 	vadd.f32	s8, s8, s6
         pSrc[2 * i3 + 1] = t2 - r3;
 8008a22:	edc5 6a01 	vstr	s13, [r5, #4]
         pSrc[2 * i7 + 1] = t2 + r3;
 8008a26:	ee70 6a21 	vadd.f32	s13, s0, s3
         r1 = (r6 - r8) * C81;
 8008a2a:	ee73 1ae2 	vsub.f32	s3, s7, s5
 8008a2e:	4415      	add	r5, r2
         t1 = r5 - r1;
 8008a30:	eeb0 3a47 	vmov.f32	s6, s14
         pSrc[2 * i7 + 1] = t2 + r3;
 8008a34:	edc4 6a01 	vstr	s13, [r4, #4]
         r6 = (r6 + r8) * C81;
 8008a38:	ee73 6aa2 	vadd.f32	s13, s7, s5
         r5 = r5 + r1;
         r8 = r7 - r6;
 8008a3c:	eef0 3a67 	vmov.f32	s7, s15
 8008a40:	4414      	add	r4, r2
         r7 = r7 + r6;
         t2 = s5 - r2;
 8008a42:	eef0 2a46 	vmov.f32	s5, s12
         r7 = r7 + r6;
 8008a46:	eee6 7aa5 	vfma.f32	s15, s13, s11
         r8 = r7 - r6;
 8008a4a:	eee6 3ae5 	vfms.f32	s7, s13, s11
         s5 = s5 + r2;
 8008a4e:	eef0 6a46 	vmov.f32	s13, s12
         s8 = s7 - s6;
         s7 = s7 + s6;
 8008a52:	eeb0 6a64 	vmov.f32	s12, s9
         t2 = s5 - r2;
 8008a56:	eee2 2a65 	vfms.f32	s5, s4, s11
         s5 = s5 + r2;
 8008a5a:	eee2 6a25 	vfma.f32	s13, s4, s11
         r5 = r5 + r1;
 8008a5e:	eea1 7aa5 	vfma.f32	s14, s3, s11
         s7 = s7 + s6;
 8008a62:	eea4 6a25 	vfma.f32	s12, s8, s11
         s8 = s7 - s6;
 8008a66:	eeb0 2a64 	vmov.f32	s4, s9
         t1 = r5 - r1;
 8008a6a:	eea1 3ae5 	vfms.f32	s6, s3, s11
         s8 = s7 - s6;
 8008a6e:	eea4 2a65 	vfms.f32	s4, s8, s11
         pSrc[2 * i2]     = r5 + s7;
 8008a72:	ee77 4a06 	vadd.f32	s9, s14, s12
         pSrc[2 * i8]     = r5 - s7;
 8008a76:	ee37 7a46 	vsub.f32	s14, s14, s12
         pSrc[2 * i2]     = r5 + s7;
 8008a7a:	edc7 4a00 	vstr	s9, [r7]
         pSrc[2 * i8]     = r5 - s7;
 8008a7e:	ed88 7a00 	vstr	s14, [r8]
         pSrc[2 * i6]     = t1 + s8;
 8008a82:	ee33 7a02 	vadd.f32	s14, s6, s4
         pSrc[2 * i4]     = t1 - s8;
 8008a86:	ee33 3a42 	vsub.f32	s6, s6, s4
         pSrc[2 * i6]     = t1 + s8;
 8008a8a:	ed86 7a00 	vstr	s14, [r6]
         pSrc[2 * i2 + 1] = s5 - r7;
 8008a8e:	ee36 7ae7 	vsub.f32	s14, s13, s15
         pSrc[2 * i8 + 1] = s5 + r7;
 8008a92:	ee77 7aa6 	vadd.f32	s15, s15, s13
         pSrc[2 * i4]     = t1 - s8;
 8008a96:	ed83 3a00 	vstr	s6, [r3]
         pSrc[2 * i2 + 1] = s5 - r7;
 8008a9a:	ed87 7a01 	vstr	s14, [r7, #4]
         pSrc[2 * i8 + 1] = s5 + r7;
 8008a9e:	4417      	add	r7, r2
 8008aa0:	edc8 7a01 	vstr	s15, [r8, #4]
         pSrc[2 * i6 + 1] = t2 - r8;
 8008aa4:	ee72 7ae3 	vsub.f32	s15, s5, s7
         pSrc[2 * i4 + 1] = t2 + r8;
 8008aa8:	ee73 3aa2 	vadd.f32	s7, s7, s5
 8008aac:	4490      	add	r8, r2
         pSrc[2 * i6 + 1] = t2 - r8;
 8008aae:	edc6 7a01 	vstr	s15, [r6, #4]
         pSrc[2 * i4 + 1] = t2 + r8;
 8008ab2:	4416      	add	r6, r2
 8008ab4:	edc3 3a01 	vstr	s7, [r3, #4]

         i1 += n1;
 8008ab8:	4413      	add	r3, r2
 8008aba:	9802      	ldr	r0, [sp, #8]
 8008abc:	4481      	add	r9, r0
      } while (i1 < fftLen);
 8008abe:	9803      	ldr	r0, [sp, #12]
 8008ac0:	4548      	cmp	r0, r9
 8008ac2:	f63f af3e 	bhi.w	8008942 <arm_radix8_butterfly_f32+0x76>

      if (n2 < 8)
 8008ac6:	2907      	cmp	r1, #7
 8008ac8:	f240 8174 	bls.w	8008db4 <arm_radix8_butterfly_f32+0x4e8>
 8008acc:	9801      	ldr	r0, [sp, #4]
         break;

      ia1 = 0;
      j = 1;
 8008ace:	2401      	movs	r4, #1
 8008ad0:	9b08      	ldr	r3, [sp, #32]
 8008ad2:	4403      	add	r3, r0
 8008ad4:	930b      	str	r3, [sp, #44]	; 0x2c
 8008ad6:	9b07      	ldr	r3, [sp, #28]
 8008ad8:	4403      	add	r3, r0
 8008ada:	930a      	str	r3, [sp, #40]	; 0x28
 8008adc:	9b06      	ldr	r3, [sp, #24]
 8008ade:	4403      	add	r3, r0
 8008ae0:	9309      	str	r3, [sp, #36]	; 0x24
 8008ae2:	eb0b 0300 	add.w	r3, fp, r0
 8008ae6:	9308      	str	r3, [sp, #32]
 8008ae8:	9b05      	ldr	r3, [sp, #20]
 8008aea:	4403      	add	r3, r0
 8008aec:	9307      	str	r3, [sp, #28]
 8008aee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008af0:	4403      	add	r3, r0
 8008af2:	9306      	str	r3, [sp, #24]
 8008af4:	eb0a 0300 	add.w	r3, sl, r0
 8008af8:	9305      	str	r3, [sp, #20]
      ia1 = 0;
 8008afa:	2300      	movs	r3, #0

      do
      {
         /*  index calculation for the coefficients */
         id  = ia1 + twidCoefModifier;
 8008afc:	9804      	ldr	r0, [sp, #16]
         si5 = pCoef[2 * ia4 + 1];
         si6 = pCoef[2 * ia5 + 1];
         si7 = pCoef[2 * ia6 + 1];
         si8 = pCoef[2 * ia7 + 1];

         i1 = j;
 8008afe:	46a3      	mov	fp, r4
         id  = ia1 + twidCoefModifier;
 8008b00:	4403      	add	r3, r0
         co2 = pCoef[2 * ia1];
 8008b02:	980d      	ldr	r0, [sp, #52]	; 0x34
 8008b04:	eb00 05c3 	add.w	r5, r0, r3, lsl #3
 8008b08:	f06f 002f 	mvn.w	r0, #47	; 0x2f
 8008b0c:	edd5 1a00 	vldr	s3, [r5]
         co3 = pCoef[2 * ia2];
 8008b10:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8008b14:	ed95 8a00 	vldr	s16, [r5]
         co4 = pCoef[2 * ia3];
 8008b18:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8008b1c:	edd5 4a00 	vldr	s9, [r5]
         co5 = pCoef[2 * ia4];
 8008b20:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8008b24:	ed95 9a00 	vldr	s18, [r5]
         co6 = pCoef[2 * ia5];
 8008b28:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8008b2c:	edd5 3a00 	vldr	s7, [r5]
         co7 = pCoef[2 * ia6];
 8008b30:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8008b34:	edd5 0a00 	vldr	s1, [r5]
         co8 = pCoef[2 * ia7];
 8008b38:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8008b3c:	edd5 2a00 	vldr	s5, [r5]
         si2 = pCoef[2 * ia1 + 1];
 8008b40:	fb00 5503 	mla	r5, r0, r3, r5
 8008b44:	9801      	ldr	r0, [sp, #4]
 8008b46:	ed95 1a01 	vldr	s2, [r5, #4]
         si3 = pCoef[2 * ia2 + 1];
 8008b4a:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8008b4e:	eb00 0ac4 	add.w	sl, r0, r4, lsl #3
 8008b52:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8008b54:	edd5 8a01 	vldr	s17, [r5, #4]
         si4 = pCoef[2 * ia3 + 1];
 8008b58:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8008b5c:	eb00 09c4 	add.w	r9, r0, r4, lsl #3
 8008b60:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008b62:	ed95 4a01 	vldr	s8, [r5, #4]
         si5 = pCoef[2 * ia4 + 1];
 8008b66:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8008b6a:	eb00 08c4 	add.w	r8, r0, r4, lsl #3
 8008b6e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008b70:	edd5 9a01 	vldr	s19, [r5, #4]
         si6 = pCoef[2 * ia5 + 1];
 8008b74:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8008b78:	eb00 0ec4 	add.w	lr, r0, r4, lsl #3
 8008b7c:	9808      	ldr	r0, [sp, #32]
 8008b7e:	ed95 3a01 	vldr	s6, [r5, #4]
         si7 = pCoef[2 * ia6 + 1];
 8008b82:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8008b86:	eb00 0cc4 	add.w	ip, r0, r4, lsl #3
 8008b8a:	9807      	ldr	r0, [sp, #28]
 8008b8c:	ed95 0a01 	vldr	s0, [r5, #4]
         si8 = pCoef[2 * ia7 + 1];
 8008b90:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8008b94:	eb00 07c4 	add.w	r7, r0, r4, lsl #3
 8008b98:	9806      	ldr	r0, [sp, #24]
 8008b9a:	ed95 2a01 	vldr	s4, [r5, #4]
         i1 = j;
 8008b9e:	eb00 06c4 	add.w	r6, r0, r4, lsl #3
 8008ba2:	9805      	ldr	r0, [sp, #20]
 8008ba4:	eb00 05c4 	add.w	r5, r0, r4, lsl #3
 8008ba8:	e002      	b.n	8008bb0 <arm_radix8_butterfly_f32+0x2e4>
 8008baa:	bf00      	nop
 8008bac:	3f3504f3 	.word	0x3f3504f3
            i4 = i3 + n2;
            i5 = i4 + n2;
            i6 = i5 + n2;
            i7 = i6 + n2;
            i8 = i7 + n2;
            r1 = pSrc[2 * i1] + pSrc[2 * i5];
 8008bb0:	edd9 7a00 	vldr	s15, [r9]
            r5 = pSrc[2 * i1] - pSrc[2 * i5];
            r2 = pSrc[2 * i2] + pSrc[2 * i6];
 8008bb4:	edd8 6a00 	vldr	s13, [r8]
 8008bb8:	ed9e 7a00 	vldr	s14, [lr]
            r1 = pSrc[2 * i1] + pSrc[2 * i5];
 8008bbc:	ed9a aa00 	vldr	s20, [sl]
            r6 = pSrc[2 * i2] - pSrc[2 * i6];
            r3 = pSrc[2 * i3] + pSrc[2 * i7];
 8008bc0:	ed9c ba00 	vldr	s22, [ip]
            r6 = pSrc[2 * i2] - pSrc[2 * i6];
 8008bc4:	ee36 dac7 	vsub.f32	s26, s13, s14
            r1 = pSrc[2 * i1] + pSrc[2 * i5];
 8008bc8:	ee3a 6a27 	vadd.f32	s12, s20, s15
            r7 = pSrc[2 * i3] - pSrc[2 * i7];
            r4 = pSrc[2 * i4] + pSrc[2 * i8];
 8008bcc:	ed96 ea00 	vldr	s28, [r6]
            r5 = pSrc[2 * i1] - pSrc[2 * i5];
 8008bd0:	ee3a aa67 	vsub.f32	s20, s20, s15
            r2 = pSrc[2 * i2] + pSrc[2 * i6];
 8008bd4:	ee76 7a87 	vadd.f32	s15, s13, s14
            r3 = pSrc[2 * i3] + pSrc[2 * i7];
 8008bd8:	edd7 6a00 	vldr	s13, [r7]
 8008bdc:	ee3b 7a26 	vadd.f32	s14, s22, s13
            r7 = pSrc[2 * i3] - pSrc[2 * i7];
 8008be0:	ee3b ba66 	vsub.f32	s22, s22, s13
            r4 = pSrc[2 * i4] + pSrc[2 * i8];
 8008be4:	edd5 6a00 	vldr	s13, [r5]
 8008be8:	ee7e aa26 	vadd.f32	s21, s28, s13
            r8 = pSrc[2 * i4] - pSrc[2 * i8];
            t1 = r1 - r3;
 8008bec:	ee36 fa47 	vsub.f32	s30, s12, s14
            r1 = r1 + r3;
 8008bf0:	ee36 6a07 	vadd.f32	s12, s12, s14
            r3 = r2 - r4;
 8008bf4:	ee77 eaea 	vsub.f32	s29, s15, s21
            r2 = r2 + r4;
 8008bf8:	ee77 7aaa 	vadd.f32	s15, s15, s21
            r8 = pSrc[2 * i4] - pSrc[2 * i8];
 8008bfc:	ee3e ea66 	vsub.f32	s28, s28, s13
            pSrc[2 * i1] = r1 + r2;
 8008c00:	ee36 7a27 	vadd.f32	s14, s12, s15
            r2 = r1 - r2;
 8008c04:	ee76 aa67 	vsub.f32	s21, s12, s15
            s1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 8008c08:	ed9a 6a01 	vldr	s12, [sl, #4]
            pSrc[2 * i1] = r1 + r2;
 8008c0c:	ed8a 7a00 	vstr	s14, [sl]
            s1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 8008c10:	edd9 7a01 	vldr	s15, [r9, #4]
            s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
            s2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 8008c14:	edd8 ca01 	vldr	s25, [r8, #4]
            s1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 8008c18:	ee36 7a27 	vadd.f32	s14, s12, s15
            s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
            s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 8008c1c:	eddc 6a01 	vldr	s13, [ip, #4]
            s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 8008c20:	ee76 ba67 	vsub.f32	s23, s12, s15
            s2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 8008c24:	edde 7a01 	vldr	s15, [lr, #4]
            s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
            s4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 8008c28:	edd6 fa01 	vldr	s31, [r6, #4]
 8008c2c:	edd5 da01 	vldr	s27, [r5, #4]
            s2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 8008c30:	ee3c 6aa7 	vadd.f32	s12, s25, s15
            s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 8008c34:	ee7c cae7 	vsub.f32	s25, s25, s15
            s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 8008c38:	edd7 7a01 	vldr	s15, [r7, #4]
 8008c3c:	ee36 caa7 	vadd.f32	s24, s13, s15
            s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 8008c40:	ee76 7ae7 	vsub.f32	s15, s13, s15
            s4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 8008c44:	ee7f 6aad 	vadd.f32	s13, s31, s27
            s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 8008c48:	ee7f daed 	vsub.f32	s27, s31, s27
            t2 = s1 - s3;
 8008c4c:	ee77 fa4c 	vsub.f32	s31, s14, s24
            s1 = s1 + s3;
 8008c50:	ee37 ca0c 	vadd.f32	s24, s14, s24
            s3 = s2 - s4;
 8008c54:	ee36 7a66 	vsub.f32	s14, s12, s13
            s2 = s2 + s4;
 8008c58:	ee36 6a26 	vadd.f32	s12, s12, s13
            r1 = t1 + s3;
 8008c5c:	ee7f 6a07 	vadd.f32	s13, s30, s14
            t1 = t1 - s3;
 8008c60:	ee3f 7a47 	vsub.f32	s14, s30, s14
            pSrc[2 * i1 + 1] = s1 + s2;
 8008c64:	ee3c fa06 	vadd.f32	s30, s24, s12
            s2 = s1 - s2;
 8008c68:	ee3c ca46 	vsub.f32	s24, s24, s12
            pSrc[2 * i1 + 1] = s1 + s2;
 8008c6c:	ed8a fa01 	vstr	s30, [sl, #4]
            s1 = t2 - r3;
 8008c70:	ee3f faee 	vsub.f32	s30, s31, s29
            t2 = t2 + r3;
            p1 = co5 * r2;
            p2 = si5 * s2;
 8008c74:	ee29 6a8c 	vmul.f32	s12, s19, s24
 8008c78:	4492      	add	sl, r2
            t2 = t2 + r3;
 8008c7a:	ee7e eaaf 	vadd.f32	s29, s29, s31
            p3 = co5 * s2;
            p4 = si5 * r2;
            pSrc[2 * i5]     = p1 + p2;
 8008c7e:	eea9 6a2a 	vfma.f32	s12, s18, s21
 8008c82:	ed89 6a00 	vstr	s12, [r9]
            pSrc[2 * i5 + 1] = p3 - p4;
 8008c86:	ee2a 6ae9 	vnmul.f32	s12, s21, s19
            p2 = si7 * t2;
            p3 = co7 * t2;
            p4 = si7 * t1;
            pSrc[2 * i7]     = p1 + p2;
            pSrc[2 * i7 + 1] = p3 - p4;
            r1 = (r6 - r8) * C81;
 8008c8a:	ee7d aa4e 	vsub.f32	s21, s26, s28
            pSrc[2 * i5 + 1] = p3 - p4;
 8008c8e:	eea9 6a0c 	vfma.f32	s12, s18, s24
            r6 = (r6 + r8) * C81;
            s1 = (s6 - s8) * C81;
            s6 = (s6 + s8) * C81;
            t1 = r5 - r1;
 8008c92:	eeb0 ca4a 	vmov.f32	s24, s20
            r5 = r5 + r1;
 8008c96:	eeaa aa85 	vfma.f32	s20, s21, s10
            t1 = r5 - r1;
 8008c9a:	eeaa cac5 	vfms.f32	s24, s21, s10
            r8 = r7 - r6;
 8008c9e:	eef0 aa4b 	vmov.f32	s21, s22
            pSrc[2 * i5 + 1] = p3 - p4;
 8008ca2:	ed89 6a01 	vstr	s12, [r9, #4]
            p2 = si3 * s1;
 8008ca6:	ee28 6a8f 	vmul.f32	s12, s17, s30
 8008caa:	4491      	add	r9, r2
            pSrc[2 * i3]     = p1 + p2;
 8008cac:	eea8 6a26 	vfma.f32	s12, s16, s13
            pSrc[2 * i3 + 1] = p3 - p4;
 8008cb0:	ee66 6ae8 	vnmul.f32	s13, s13, s17
 8008cb4:	eee8 6a0f 	vfma.f32	s13, s16, s30
            pSrc[2 * i3]     = p1 + p2;
 8008cb8:	ed8c 6a00 	vstr	s12, [ip]
            s1 = (s6 - s8) * C81;
 8008cbc:	ee3c 6aed 	vsub.f32	s12, s25, s27
            pSrc[2 * i3 + 1] = p3 - p4;
 8008cc0:	edcc 6a01 	vstr	s13, [ip, #4]
            p2 = si7 * t2;
 8008cc4:	ee60 6a2e 	vmul.f32	s13, s0, s29
 8008cc8:	4494      	add	ip, r2
            pSrc[2 * i7]     = p1 + p2;
 8008cca:	eee0 6a87 	vfma.f32	s13, s1, s14
            pSrc[2 * i7 + 1] = p3 - p4;
 8008cce:	ee27 7a40 	vnmul.f32	s14, s14, s0
 8008cd2:	eea0 7aae 	vfma.f32	s14, s1, s29
            pSrc[2 * i7]     = p1 + p2;
 8008cd6:	edc7 6a00 	vstr	s13, [r7]
            r6 = (r6 + r8) * C81;
 8008cda:	ee7d 6a0e 	vadd.f32	s13, s26, s28
            r7 = r7 + r6;
 8008cde:	eea6 ba85 	vfma.f32	s22, s13, s10
            pSrc[2 * i7 + 1] = p3 - p4;
 8008ce2:	ed87 7a01 	vstr	s14, [r7, #4]
            s6 = (s6 + s8) * C81;
 8008ce6:	ee3c 7aad 	vadd.f32	s14, s25, s27
            t2 = s5 - s1;
 8008cea:	eef0 ca6b 	vmov.f32	s25, s23
 8008cee:	4417      	add	r7, r2
            s5 = s5 + s1;
 8008cf0:	eee6 ba05 	vfma.f32	s23, s12, s10
            r8 = r7 - r6;
 8008cf4:	eee6 aac5 	vfms.f32	s21, s13, s10
            t2 = s5 - s1;
 8008cf8:	eee6 ca45 	vfms.f32	s25, s12, s10
            s5 = s5 + s1;
 8008cfc:	eeb0 6a6b 	vmov.f32	s12, s23
            s8 = s7 - s6;
 8008d00:	eef0 ba67 	vmov.f32	s23, s15
            s7 = s7 + s6;
 8008d04:	eee7 7a05 	vfma.f32	s15, s14, s10
            s8 = s7 - s6;
 8008d08:	eee7 ba45 	vfms.f32	s23, s14, s10
            r1 = r5 + s7;
 8008d0c:	ee7a 6a27 	vadd.f32	s13, s20, s15
            r5 = r5 - s7;
 8008d10:	ee7a 7a67 	vsub.f32	s15, s20, s15
            r6 = t1 + s8;
 8008d14:	ee3c 7a2b 	vadd.f32	s14, s24, s23
            t1 = t1 - s8;
 8008d18:	ee3c aa6b 	vsub.f32	s20, s24, s23
            s1 = s5 - r7;
 8008d1c:	ee36 ca4b 	vsub.f32	s24, s12, s22
            s5 = s5 + r7;
 8008d20:	ee3b 6a06 	vadd.f32	s12, s22, s12
            s6 = t2 - r8;
 8008d24:	ee3c baea 	vsub.f32	s22, s25, s21
            t2 = t2 + r8;
            p1 = co2 * r1;
            p2 = si2 * s1;
 8008d28:	ee61 ba0c 	vmul.f32	s23, s2, s24
            t2 = t2 + r8;
 8008d2c:	ee7a aaac 	vadd.f32	s21, s21, s25
            p3 = co2 * s1;
            p4 = si2 * r1;
            pSrc[2 * i2]     = p1 + p2;
 8008d30:	eee1 baa6 	vfma.f32	s23, s3, s13
            pSrc[2 * i2 + 1] = p3 - p4;
 8008d34:	ee66 6ac1 	vnmul.f32	s13, s13, s2
 8008d38:	eee1 6a8c 	vfma.f32	s13, s3, s24
            pSrc[2 * i2]     = p1 + p2;
 8008d3c:	edc8 ba00 	vstr	s23, [r8]
            pSrc[2 * i2 + 1] = p3 - p4;
 8008d40:	edc8 6a01 	vstr	s13, [r8, #4]
            p1 = co8 * r5;
            p2 = si8 * s5;
 8008d44:	ee62 6a06 	vmul.f32	s13, s4, s12
 8008d48:	4490      	add	r8, r2
            p3 = co8 * s5;
            p4 = si8 * r5;
            pSrc[2 * i8]     = p1 + p2;
 8008d4a:	eee2 6aa7 	vfma.f32	s13, s5, s15
 8008d4e:	edc5 6a00 	vstr	s13, [r5]
            pSrc[2 * i8 + 1] = p3 - p4;
 8008d52:	ee67 6ac2 	vnmul.f32	s13, s15, s4
            p1 = co6 * r6;
            p2 = si6 * s6;
 8008d56:	ee63 7a0b 	vmul.f32	s15, s6, s22
            pSrc[2 * i8 + 1] = p3 - p4;
 8008d5a:	eee2 6a86 	vfma.f32	s13, s5, s12
            p3 = co6 * s6;
            p4 = si6 * r6;
            pSrc[2 * i6]     = p1 + p2;
 8008d5e:	eee3 7a87 	vfma.f32	s15, s7, s14
            pSrc[2 * i6 + 1] = p3 - p4;
 8008d62:	ee27 7a43 	vnmul.f32	s14, s14, s6
 8008d66:	eea3 7a8b 	vfma.f32	s14, s7, s22
            pSrc[2 * i8 + 1] = p3 - p4;
 8008d6a:	edc5 6a01 	vstr	s13, [r5, #4]
            pSrc[2 * i6]     = p1 + p2;
 8008d6e:	4415      	add	r5, r2
 8008d70:	edce 7a00 	vstr	s15, [lr]
            p1 = co4 * t1;
            p2 = si4 * t2;
 8008d74:	ee64 7a2a 	vmul.f32	s15, s8, s21
            p3 = co4 * t2;
            p4 = si4 * t1;
            pSrc[2 * i4]     = p1 + p2;
 8008d78:	eee4 7a8a 	vfma.f32	s15, s9, s20
            pSrc[2 * i6 + 1] = p3 - p4;
 8008d7c:	ed8e 7a01 	vstr	s14, [lr, #4]
            pSrc[2 * i4]     = p1 + p2;
 8008d80:	4496      	add	lr, r2
 8008d82:	edc6 7a00 	vstr	s15, [r6]
            pSrc[2 * i4 + 1] = p3 - p4;
 8008d86:	ee6a 7a44 	vnmul.f32	s15, s20, s8
 8008d8a:	eee4 7aaa 	vfma.f32	s15, s9, s21
 8008d8e:	edc6 7a01 	vstr	s15, [r6, #4]

            i1 += n1;
 8008d92:	4416      	add	r6, r2
 8008d94:	9802      	ldr	r0, [sp, #8]
 8008d96:	4483      	add	fp, r0
         } while (i1 < fftLen);
 8008d98:	9803      	ldr	r0, [sp, #12]
 8008d9a:	4558      	cmp	r0, fp
 8008d9c:	f63f af08 	bhi.w	8008bb0 <arm_radix8_butterfly_f32+0x2e4>

         j++;
 8008da0:	3401      	adds	r4, #1
      } while (j < n2);
 8008da2:	42a1      	cmp	r1, r4
 8008da4:	f47f aeaa 	bne.w	8008afc <arm_radix8_butterfly_f32+0x230>

      twidCoefModifier <<= 3;
 8008da8:	9b04      	ldr	r3, [sp, #16]
 8008daa:	9102      	str	r1, [sp, #8]
 8008dac:	00db      	lsls	r3, r3, #3
 8008dae:	b29b      	uxth	r3, r3
 8008db0:	9304      	str	r3, [sp, #16]
   } while (n2 > 7);
 8008db2:	e599      	b.n	80088e8 <arm_radix8_butterfly_f32+0x1c>
}
 8008db4:	b00f      	add	sp, #60	; 0x3c
 8008db6:	ecbd 8b10 	vpop	{d8-d15}
 8008dba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008dbe:	bf00      	nop

08008dc0 <arm_cfft_radix8by2_f32>:
  @endcode

 */

void arm_cfft_radix8by2_f32 (arm_cfft_instance_f32 * S, float32_t * p1)
{
 8008dc0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008dc4:	4680      	mov	r8, r0
 8008dc6:	4608      	mov	r0, r1
  uint32_t    L  = S->fftLen;
 8008dc8:	f8b8 7000 	ldrh.w	r7, [r8]
  float32_t * pCol1, * pCol2, * pMid1, * pMid2;
  float32_t * p2 = p1 + L;
 8008dcc:	4606      	mov	r6, r0
  const float32_t * tw = (float32_t *) S->pTwiddle;
 8008dce:	f8d8 2004 	ldr.w	r2, [r8, #4]
  float32_t * p2 = p1 + L;
 8008dd2:	eb01 0987 	add.w	r9, r1, r7, lsl #2

  pCol1 = p1;
  pCol2 = p2;

  /* Define new length */
  L >>= 1;
 8008dd6:	0879      	lsrs	r1, r7, #1
  const float32_t * tw = (float32_t *) S->pTwiddle;
 8008dd8:	4694      	mov	ip, r2
  /* Initialize mid pointers */
  pMid1 = p1 + L;
  pMid2 = p2 + L;

  /* do two dot Fourier transform */
  for (l = L >> 2; l > 0; l-- )
 8008dda:	08ff      	lsrs	r7, r7, #3
 8008ddc:	464b      	mov	r3, r9
  pMid1 = p1 + L;
 8008dde:	eb00 0581 	add.w	r5, r0, r1, lsl #2
  pMid2 = p2 + L;
 8008de2:	eb09 0481 	add.w	r4, r9, r1, lsl #2
 8008de6:	eb02 1707 	add.w	r7, r2, r7, lsl #4
{
 8008dea:	ed2d 8b02 	vpush	{d8}
 8008dee:	b083      	sub	sp, #12
  for (l = L >> 2; l > 0; l-- )
 8008df0:	45bc      	cmp	ip, r7
 8008df2:	f106 0610 	add.w	r6, r6, #16
 8008df6:	f105 0510 	add.w	r5, r5, #16
 8008dfa:	f104 0410 	add.w	r4, r4, #16
 8008dfe:	f103 0310 	add.w	r3, r3, #16
 8008e02:	d110      	bne.n	8008e26 <arm_cfft_radix8by2_f32+0x66>
    *pMid2++ = m0 - m1;
    *pMid2++ = m2 + m3;
  }

  /* first col */
  arm_radix8_butterfly_f32 (pCol1, L, (float32_t *) S->pTwiddle, 2U);
 8008e04:	b289      	uxth	r1, r1
 8008e06:	2302      	movs	r3, #2
 8008e08:	9101      	str	r1, [sp, #4]
 8008e0a:	f7ff fd5f 	bl	80088cc <arm_radix8_butterfly_f32>

  /* second col */
  arm_radix8_butterfly_f32 (pCol2, L, (float32_t *) S->pTwiddle, 2U);
 8008e0e:	2302      	movs	r3, #2
 8008e10:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8008e14:	9901      	ldr	r1, [sp, #4]
 8008e16:	4648      	mov	r0, r9
}
 8008e18:	b003      	add	sp, #12
 8008e1a:	ecbd 8b02 	vpop	{d8}
 8008e1e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  arm_radix8_butterfly_f32 (pCol2, L, (float32_t *) S->pTwiddle, 2U);
 8008e22:	f7ff bd53 	b.w	80088cc <arm_radix8_butterfly_f32>
    t2[0] = p2[0];
 8008e26:	ed13 0a04 	vldr	s0, [r3, #-16]
 8008e2a:	f10c 0c10 	add.w	ip, ip, #16
    t1[0] = p1[0];
 8008e2e:	ed16 7a04 	vldr	s14, [r6, #-16]
    t2[1] = p2[1];
 8008e32:	ed53 0a03 	vldr	s1, [r3, #-12]
    *p1++ = t1[0] + t2[0];
 8008e36:	ee37 8a00 	vadd.f32	s16, s14, s0
    t1[1] = p1[1];
 8008e3a:	ed56 3a03 	vldr	s7, [r6, #-12]
    t4[0] = pMid2[0];
 8008e3e:	ed14 4a04 	vldr	s8, [r4, #-16]
    t2[0] = t1[0] - t2[0];
 8008e42:	ee37 7a40 	vsub.f32	s14, s14, s0
    t4[1] = pMid2[1];
 8008e46:	ed54 4a03 	vldr	s9, [r4, #-12]
    t2[2] = p2[2];
 8008e4a:	ed53 7a02 	vldr	s15, [r3, #-8]
    t2[3] = p2[3];
 8008e4e:	ed13 5a01 	vldr	s10, [r3, #-4]
    t3[1] = pMid1[1];
 8008e52:	ed55 2a03 	vldr	s5, [r5, #-12]
    t3[2] = pMid1[2];
 8008e56:	ed15 3a02 	vldr	s6, [r5, #-8]
    t3[3] = pMid1[3];
 8008e5a:	ed55 6a01 	vldr	s13, [r5, #-4]
    t4[2] = pMid2[2];
 8008e5e:	ed54 5a02 	vldr	s11, [r4, #-8]
    t4[3] = pMid2[3];
 8008e62:	ed14 6a01 	vldr	s12, [r4, #-4]
    t3[0] = pMid1[0];
 8008e66:	ed15 2a04 	vldr	s4, [r5, #-16]
    *p1++ = t1[0] + t2[0];
 8008e6a:	ed06 8a04 	vstr	s16, [r6, #-16]
    *p1++ = t1[1] + t2[1];
 8008e6e:	ee33 8aa0 	vadd.f32	s16, s7, s1
    t1[2] = p1[2];
 8008e72:	ed16 1a02 	vldr	s2, [r6, #-8]
    t2[1] = t1[1] - t2[1];
 8008e76:	ee73 3ae0 	vsub.f32	s7, s7, s1
    t1[3] = p1[3];
 8008e7a:	ed56 1a01 	vldr	s3, [r6, #-4]
    *p1++ = t1[1] + t2[1];
 8008e7e:	ed06 8a03 	vstr	s16, [r6, #-12]
    *p1++ = t1[2] + t2[2];
 8008e82:	ee31 8a27 	vadd.f32	s16, s2, s15
    t2[2] = t1[2] - t2[2];
 8008e86:	ee71 7a67 	vsub.f32	s15, s2, s15
    *p1++ = t1[2] + t2[2];
 8008e8a:	ed06 8a02 	vstr	s16, [r6, #-8]
    *p1++ = t1[3] + t2[3];    /* col 1 */
 8008e8e:	ee31 8a85 	vadd.f32	s16, s3, s10
    t2[3] = t1[3] - t2[3];    /* for col 2 */
 8008e92:	ee31 5ac5 	vsub.f32	s10, s3, s10
    *pMid1++ = t3[0] + t4[0];
 8008e96:	ee72 1a04 	vadd.f32	s3, s4, s8
    *p1++ = t1[3] + t2[3];    /* col 1 */
 8008e9a:	ed06 8a01 	vstr	s16, [r6, #-4]
    t4[0] = t4[0] - t3[0];
 8008e9e:	ee34 4a42 	vsub.f32	s8, s8, s4
    *pMid1++ = t3[0] + t4[0];
 8008ea2:	ed45 1a04 	vstr	s3, [r5, #-16]
    *pMid1++ = t3[1] + t4[1];
 8008ea6:	ee72 1aa4 	vadd.f32	s3, s5, s9
    t4[1] = t4[1] - t3[1];
 8008eaa:	ee74 4ae2 	vsub.f32	s9, s9, s5
    *pMid1++ = t3[1] + t4[1];
 8008eae:	ed45 1a03 	vstr	s3, [r5, #-12]
    *pMid1++ = t3[2] + t4[2];
 8008eb2:	ee73 1a25 	vadd.f32	s3, s6, s11
    t4[2] = t4[2] - t3[2];
 8008eb6:	ee75 5ac3 	vsub.f32	s11, s11, s6
    *pMid1++ = t3[2] + t4[2];
 8008eba:	ed45 1a02 	vstr	s3, [r5, #-8]
    *pMid1++ = t3[3] + t4[3]; /* col 1 */
 8008ebe:	ee76 1a86 	vadd.f32	s3, s13, s12
    t4[3] = t4[3] - t3[3];    /* for col 2 */
 8008ec2:	ee36 6a66 	vsub.f32	s12, s12, s13
    *pMid1++ = t3[3] + t4[3]; /* col 1 */
 8008ec6:	ed45 1a01 	vstr	s3, [r5, #-4]
    twI = *tw++;
 8008eca:	ed1c 3a03 	vldr	s6, [ip, #-12]
    twR = *tw++;
 8008ece:	ed5c 6a04 	vldr	s13, [ip, #-16]
    m1 = t2[1] * twI;
 8008ed2:	ee63 2a83 	vmul.f32	s5, s7, s6
    *p2++ = m0 + m1;
 8008ed6:	eee7 2a26 	vfma.f32	s5, s14, s13
    *p2++ = m2 - m3;
 8008eda:	ee23 7a47 	vnmul.f32	s14, s6, s14
 8008ede:	eea3 7aa6 	vfma.f32	s14, s7, s13
    *p2++ = m0 + m1;
 8008ee2:	ed43 2a04 	vstr	s5, [r3, #-16]
    *p2++ = m2 - m3;
 8008ee6:	ed03 7a03 	vstr	s14, [r3, #-12]
    m3 = t4[0] * twR;
 8008eea:	ee24 7a26 	vmul.f32	s14, s8, s13
    *pMid2++ = m0 - m1;
 8008eee:	ee66 6ae4 	vnmul.f32	s13, s13, s9
    *pMid2++ = m2 + m3;
 8008ef2:	eea4 7a83 	vfma.f32	s14, s9, s6
    *pMid2++ = m0 - m1;
 8008ef6:	eee4 6a03 	vfma.f32	s13, s8, s6
    *pMid2++ = m2 + m3;
 8008efa:	ed04 7a03 	vstr	s14, [r4, #-12]
    *pMid2++ = m0 - m1;
 8008efe:	ed44 6a04 	vstr	s13, [r4, #-16]
    twR = *tw++;
 8008f02:	ed1c 7a02 	vldr	s14, [ip, #-8]
    twI = *tw++;
 8008f06:	ed5c 6a01 	vldr	s13, [ip, #-4]
    m1 = t2[3] * twI;
 8008f0a:	ee65 4a26 	vmul.f32	s9, s10, s13
    *p2++ = m0 + m1;
 8008f0e:	eee7 4a87 	vfma.f32	s9, s15, s14
    *p2++ = m2 - m3;
 8008f12:	ee66 7ae7 	vnmul.f32	s15, s13, s15
 8008f16:	eee5 7a07 	vfma.f32	s15, s10, s14
    *p2++ = m0 + m1;
 8008f1a:	ed43 4a02 	vstr	s9, [r3, #-8]
    *p2++ = m2 - m3;
 8008f1e:	ed43 7a01 	vstr	s15, [r3, #-4]
    m3 = t4[2] * twR;
 8008f22:	ee65 7a87 	vmul.f32	s15, s11, s14
    *pMid2++ = m0 - m1;
 8008f26:	ee27 7a46 	vnmul.f32	s14, s14, s12
    *pMid2++ = m2 + m3;
 8008f2a:	eee6 7a26 	vfma.f32	s15, s12, s13
    *pMid2++ = m0 - m1;
 8008f2e:	eea5 7aa6 	vfma.f32	s14, s11, s13
    *pMid2++ = m2 + m3;
 8008f32:	ed44 7a01 	vstr	s15, [r4, #-4]
    *pMid2++ = m0 - m1;
 8008f36:	ed04 7a02 	vstr	s14, [r4, #-8]
  for (l = L >> 2; l > 0; l-- )
 8008f3a:	e759      	b.n	8008df0 <arm_cfft_radix8by2_f32+0x30>

08008f3c <arm_cfft_radix8by4_f32>:

void arm_cfft_radix8by4_f32 (arm_cfft_instance_f32 * S, float32_t * p1)
{
    uint32_t    L  = S->fftLen >> 1;
 8008f3c:	8803      	ldrh	r3, [r0, #0]
    twMod2 = 2;
    twMod3 = 4;
    twMod4 = 6;

    /* TOP */
    p1ap3_0 = p1[0] + p3[0];
 8008f3e:	edd1 7a00 	vldr	s15, [r1]
    uint32_t    L  = S->fftLen >> 1;
 8008f42:	085b      	lsrs	r3, r3, #1
    tw2 = tw3 = tw4 = (float32_t *) S->pTwiddle;
 8008f44:	6842      	ldr	r2, [r0, #4]
{
 8008f46:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    float32_t * p3 = p2 + L;
 8008f4a:	eb01 05c3 	add.w	r5, r1, r3, lsl #3
{
 8008f4e:	4683      	mov	fp, r0
    float32_t * p2 = p1 + L;
 8008f50:	eb01 0683 	add.w	r6, r1, r3, lsl #2
    p1ap3_0 = p1[0] + p3[0];
 8008f54:	ed95 7a00 	vldr	s14, [r5]
    float32_t * p4 = p3 + L;
 8008f58:	eb05 0483 	add.w	r4, r5, r3, lsl #2
    p1sp3_0 = p1[0] - p3[0];
    p1ap3_1 = p1[1] + p3[1];
 8008f5c:	edd5 5a01 	vldr	s11, [r5, #4]
    pEnd1 = p2 - 1;     /* points to imaginary values by default */
 8008f60:	f1a6 0904 	sub.w	r9, r6, #4
    p1ap3_0 = p1[0] + p3[0];
 8008f64:	ee37 6a87 	vadd.f32	s12, s15, s14
    p1sp3_1 = p1[1] - p3[1];

    /* col 2 */
    t2[0] = p1sp3_0 + p2[1] - p4[1];
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 8008f68:	edd4 4a00 	vldr	s9, [r4]
    p1sp3_0 = p1[0] - p3[0];
 8008f6c:	ee77 7ac7 	vsub.f32	s15, s15, s14
    p1ap3_1 = p1[1] + p3[1];
 8008f70:	ed91 7a01 	vldr	s14, [r1, #4]
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 8008f74:	edd6 3a01 	vldr	s7, [r6, #4]
 8008f78:	f1a4 0a04 	sub.w	sl, r4, #4
    p1ap3_1 = p1[1] + p3[1];
 8008f7c:	ee77 6a25 	vadd.f32	s13, s14, s11
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 8008f80:	ed94 4a01 	vldr	s8, [r4, #4]
    p1sp3_1 = p1[1] - p3[1];
 8008f84:	ee77 5a65 	vsub.f32	s11, s14, s11
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 8008f88:	ed96 7a00 	vldr	s14, [r6]
    pEnd2 = p3 - 1;
 8008f8c:	1f2f      	subs	r7, r5, #4
 8008f8e:	f105 0c10 	add.w	ip, r5, #16
    t3[1] = p1ap3_1 - p2[1] - p4[1];
    /* col 4 */
    t4[0] = p1sp3_0 - p2[1] + p4[1];
    t4[1] = p1sp3_1 + p2[0] - p4[0];
    /* col 1 */
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 8008f92:	ee37 5a06 	vadd.f32	s10, s14, s12
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 8008f96:	ee36 6a47 	vsub.f32	s12, s12, s14
{
 8008f9a:	ed2d 8b04 	vpush	{d8-d9}
 8008f9e:	b08f      	sub	sp, #60	; 0x3c
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 8008fa0:	ee35 5a24 	vadd.f32	s10, s10, s9
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 8008fa4:	ee36 6a64 	vsub.f32	s12, s12, s9
    tw2 = tw3 = tw4 = (float32_t *) S->pTwiddle;
 8008fa8:	9202      	str	r2, [sp, #8]
    L >>= 1;
 8008faa:	085a      	lsrs	r2, r3, #1
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 8008fac:	ed81 5a00 	vstr	s10, [r1]
    L >>= 1;
 8008fb0:	920a      	str	r2, [sp, #40]	; 0x28
    p1ap3_0 = p1[0] + p3[0];
 8008fb2:	460a      	mov	r2, r1
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 8008fb4:	ed96 5a01 	vldr	s10, [r6, #4]
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 8008fb8:	3208      	adds	r2, #8
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 8008fba:	ed94 3a01 	vldr	s6, [r4, #4]
 8008fbe:	ee36 5a85 	vadd.f32	s10, s13, s10
{
 8008fc2:	9100      	str	r1, [sp, #0]
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 8008fc4:	9206      	str	r2, [sp, #24]

    /* Twiddle factors are ones */
    *p2++ = t2[0];
 8008fc6:	4632      	mov	r2, r6
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 8008fc8:	ee76 6ae3 	vsub.f32	s13, s13, s7
    *p2++ = t2[0];
 8008fcc:	3208      	adds	r2, #8
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 8008fce:	ee35 5a03 	vadd.f32	s10, s10, s6
    *p2++ = t2[0];
 8008fd2:	920b      	str	r2, [sp, #44]	; 0x2c
    *p2++ = t2[1];
    *p3++ = t3[0];
 8008fd4:	462a      	mov	r2, r5
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 8008fd6:	ed81 5a01 	vstr	s10, [r1, #4]
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 8008fda:	ee33 5aa7 	vadd.f32	s10, s7, s15
    *p3++ = t3[0];
 8008fde:	3208      	adds	r2, #8
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 8008fe0:	ee77 7ae3 	vsub.f32	s15, s15, s7
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 8008fe4:	ee76 6ac4 	vsub.f32	s13, s13, s8
 8008fe8:	f106 0110 	add.w	r1, r6, #16
    *p3++ = t3[0];
 8008fec:	920c      	str	r2, [sp, #48]	; 0x30
    *p3++ = t3[1];
    *p4++ = t4[0];
 8008fee:	4622      	mov	r2, r4
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 8008ff0:	ee35 5a44 	vsub.f32	s10, s10, s8
    *p4++ = t4[0];
 8008ff4:	3208      	adds	r2, #8
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 8008ff6:	ee77 7a84 	vadd.f32	s15, s15, s8
    *p4++ = t4[0];
 8008ffa:	920d      	str	r2, [sp, #52]	; 0x34
    *p4++ = t4[1];

    tw2 += twMod2;
 8008ffc:	9a02      	ldr	r2, [sp, #8]
    *p2++ = t2[0];
 8008ffe:	ed86 5a00 	vstr	s10, [r6]
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 8009002:	ee35 5ac7 	vsub.f32	s10, s11, s14
    tw2 += twMod2;
 8009006:	3208      	adds	r2, #8
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 8009008:	ee37 7a25 	vadd.f32	s14, s14, s11
    tw2 += twMod2;
 800900c:	9207      	str	r2, [sp, #28]
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 800900e:	ee35 5a24 	vadd.f32	s10, s10, s9
    tw3 += twMod3;
 8009012:	9a02      	ldr	r2, [sp, #8]
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 8009014:	ee37 7a64 	vsub.f32	s14, s14, s9
    tw3 += twMod3;
 8009018:	3210      	adds	r2, #16
    *p2++ = t2[1];
 800901a:	ed86 5a01 	vstr	s10, [r6, #4]
    *p3++ = t3[0];
 800901e:	ed85 6a00 	vstr	s12, [r5]
    *p3++ = t3[1];
 8009022:	edc5 6a01 	vstr	s13, [r5, #4]
    *p4++ = t4[0];
 8009026:	edc4 7a00 	vstr	s15, [r4]
    *p4++ = t4[1];
 800902a:	ed84 7a01 	vstr	s14, [r4, #4]
    tw3 += twMod3;
 800902e:	9208      	str	r2, [sp, #32]
    tw4 += twMod4;
 8009030:	9a02      	ldr	r2, [sp, #8]
 8009032:	3218      	adds	r2, #24
 8009034:	9209      	str	r2, [sp, #36]	; 0x24

    for (l = (L - 2) >> 1; l > 0; l-- )
 8009036:	085a      	lsrs	r2, r3, #1
    pEnd4 = pEnd3 + L;
 8009038:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
    for (l = (L - 2) >> 1; l > 0; l-- )
 800903c:	3a02      	subs	r2, #2
 800903e:	ea4f 0852 	mov.w	r8, r2, lsr #1
 8009042:	9a07      	ldr	r2, [sp, #28]
 8009044:	9204      	str	r2, [sp, #16]
 8009046:	9a08      	ldr	r2, [sp, #32]
 8009048:	f8cd 8014 	str.w	r8, [sp, #20]
 800904c:	9203      	str	r2, [sp, #12]
 800904e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009050:	9201      	str	r2, [sp, #4]
 8009052:	9a00      	ldr	r2, [sp, #0]
 8009054:	f102 0e10 	add.w	lr, r2, #16
 8009058:	f104 0210 	add.w	r2, r4, #16
 800905c:	9804      	ldr	r0, [sp, #16]
 800905e:	f1a9 0908 	sub.w	r9, r9, #8
 8009062:	ed1c 7a02 	vldr	s14, [ip, #-8]
 8009066:	3f08      	subs	r7, #8
 8009068:	3008      	adds	r0, #8
 800906a:	ed5c 3a01 	vldr	s7, [ip, #-4]
 800906e:	ed5e 4a02 	vldr	s9, [lr, #-8]
 8009072:	f1aa 0a08 	sub.w	sl, sl, #8
 8009076:	9004      	str	r0, [sp, #16]
 8009078:	3b08      	subs	r3, #8
 800907a:	9803      	ldr	r0, [sp, #12]
 800907c:	ee74 2ac7 	vsub.f32	s5, s9, s14
 8009080:	ed1e 6a01 	vldr	s12, [lr, #-4]
 8009084:	ee74 4a87 	vadd.f32	s9, s9, s14
 8009088:	3010      	adds	r0, #16
 800908a:	ed51 5a02 	vldr	s11, [r1, #-8]
 800908e:	ee36 5a63 	vsub.f32	s10, s12, s7
 8009092:	ed51 7a01 	vldr	s15, [r1, #-4]
 8009096:	ee36 6a23 	vadd.f32	s12, s12, s7
 800909a:	9003      	str	r0, [sp, #12]
 800909c:	9801      	ldr	r0, [sp, #4]
 800909e:	ee77 6aa2 	vadd.f32	s13, s15, s5
 80090a2:	ee35 3a65 	vsub.f32	s6, s10, s11
 80090a6:	ed12 4a02 	vldr	s8, [r2, #-8]
 80090aa:	3018      	adds	r0, #24
 80090ac:	ee34 7ae5 	vsub.f32	s14, s9, s11
 80090b0:	ee76 3a67 	vsub.f32	s7, s12, s15
 80090b4:	ed12 2a01 	vldr	s4, [r2, #-4]
 80090b8:	ee35 5a85 	vadd.f32	s10, s11, s10
 80090bc:	9001      	str	r0, [sp, #4]
 80090be:	ee72 7ae7 	vsub.f32	s15, s5, s15
 80090c2:	9805      	ldr	r0, [sp, #20]
 80090c4:	ee75 5aa4 	vadd.f32	s11, s11, s9
 80090c8:	f10e 0e08 	add.w	lr, lr, #8
 80090cc:	ee76 6ac2 	vsub.f32	s13, s13, s4
 80090d0:	3108      	adds	r1, #8
 80090d2:	ee33 3a04 	vadd.f32	s6, s6, s8
 80090d6:	f10c 0c08 	add.w	ip, ip, #8
 80090da:	ee37 7a44 	vsub.f32	s14, s14, s8
 80090de:	3208      	adds	r2, #8
 80090e0:	ee73 3ac2 	vsub.f32	s7, s7, s4
 80090e4:	ee77 7a82 	vadd.f32	s15, s15, s4
 80090e8:	ee35 5a44 	vsub.f32	s10, s10, s8
 80090ec:	ee75 5a84 	vadd.f32	s11, s11, s8
 80090f0:	2800      	cmp	r0, #0
 80090f2:	d174      	bne.n	80091de <arm_cfft_radix8by4_f32+0x2a2>
 80090f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80090f6:	2718      	movs	r7, #24
 80090f8:	9b06      	ldr	r3, [sp, #24]
 80090fa:	fb07 0708 	mla	r7, r7, r8, r0
 80090fe:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8009100:	eb03 02c8 	add.w	r2, r3, r8, lsl #3
 8009104:	9b07      	ldr	r3, [sp, #28]
 8009106:	eb00 0cc8 	add.w	ip, r0, r8, lsl #3
 800910a:	980c      	ldr	r0, [sp, #48]	; 0x30
 800910c:	eb03 01c8 	add.w	r1, r3, r8, lsl #3
 8009110:	9b08      	ldr	r3, [sp, #32]
 8009112:	eb00 0ec8 	add.w	lr, r0, r8, lsl #3
 8009116:	980d      	ldr	r0, [sp, #52]	; 0x34
    t3[1] = p1ap3_1 - p2[1] - p4[1];
    /* col 4 */
    t4[0] = p1sp3_0 - p2[1] + p4[1];
    t4[1] = p1sp3_1 + p2[0] - p4[0];
    /* col 1 - Top */
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 8009118:	edc2 5a00 	vstr	s11, [r2]
 800911c:	eb03 1308 	add.w	r3, r3, r8, lsl #4
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 8009120:	eddc 5a01 	vldr	s11, [ip, #4]
 8009124:	eb00 08c8 	add.w	r8, r0, r8, lsl #3

    *p4++ = m0 + m1;
    *p4++ = m2 - m3;

    /* first col */
    arm_radix8_butterfly_f32 (pCol1, L, (float32_t *) S->pTwiddle, 4U);
 8009128:	9800      	ldr	r0, [sp, #0]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 800912a:	ee36 6a25 	vadd.f32	s12, s12, s11
 800912e:	edd8 5a01 	vldr	s11, [r8, #4]
 8009132:	ee36 6a25 	vadd.f32	s12, s12, s11
 8009136:	ed82 6a01 	vstr	s12, [r2, #4]
    twI = tw2[1];
 800913a:	edd1 4a01 	vldr	s9, [r1, #4]
    twR = tw2[0];
 800913e:	edd1 5a00 	vldr	s11, [r1]
    m1 = t2[1] * twI;
 8009142:	ee24 6a83 	vmul.f32	s12, s9, s6
    arm_radix8_butterfly_f32 (pCol1, L, (float32_t *) S->pTwiddle, 4U);
 8009146:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 800914a:	9a02      	ldr	r2, [sp, #8]
 800914c:	9101      	str	r1, [sp, #4]
    *p2++ = m0 + m1;
 800914e:	eea5 6aa6 	vfma.f32	s12, s11, s13
    *p2++ = m2 - m3;
 8009152:	ee66 6ae4 	vnmul.f32	s13, s13, s9
 8009156:	eee5 6a83 	vfma.f32	s13, s11, s6
    *p2++ = m0 + m1;
 800915a:	ed8c 6a00 	vstr	s12, [ip]
    *p2++ = m2 - m3;
 800915e:	edcc 6a01 	vstr	s13, [ip, #4]
    twI = tw3[1];
 8009162:	edd3 5a01 	vldr	s11, [r3, #4]
    twR = tw3[0];
 8009166:	ed93 6a00 	vldr	s12, [r3]
    arm_radix8_butterfly_f32 (pCol1, L, (float32_t *) S->pTwiddle, 4U);
 800916a:	2304      	movs	r3, #4
    m1 = t3[1] * twI;
 800916c:	ee65 6aa3 	vmul.f32	s13, s11, s7
    *p3++ = m0 + m1;
 8009170:	eee6 6a07 	vfma.f32	s13, s12, s14
    *p3++ = m2 - m3;
 8009174:	ee27 7a65 	vnmul.f32	s14, s14, s11
 8009178:	eea6 7a23 	vfma.f32	s14, s12, s7
    *p3++ = m0 + m1;
 800917c:	edce 6a00 	vstr	s13, [lr]
    *p3++ = m2 - m3;
 8009180:	ed8e 7a01 	vstr	s14, [lr, #4]
    twI = tw4[1];
 8009184:	ed97 6a01 	vldr	s12, [r7, #4]
    twR = tw4[0];
 8009188:	edd7 6a00 	vldr	s13, [r7]
    m1 = t4[1] * twI;
 800918c:	ee26 7a05 	vmul.f32	s14, s12, s10
    *p4++ = m0 + m1;
 8009190:	eea6 7aa7 	vfma.f32	s14, s13, s15
    *p4++ = m2 - m3;
 8009194:	ee67 7ac6 	vnmul.f32	s15, s15, s12
 8009198:	eee6 7a85 	vfma.f32	s15, s13, s10
    *p4++ = m0 + m1;
 800919c:	ed88 7a00 	vstr	s14, [r8]
    *p4++ = m2 - m3;
 80091a0:	edc8 7a01 	vstr	s15, [r8, #4]
    arm_radix8_butterfly_f32 (pCol1, L, (float32_t *) S->pTwiddle, 4U);
 80091a4:	f7ff fb92 	bl	80088cc <arm_radix8_butterfly_f32>

    /* second col */
    arm_radix8_butterfly_f32 (pCol2, L, (float32_t *) S->pTwiddle, 4U);
 80091a8:	9901      	ldr	r1, [sp, #4]
 80091aa:	f8db 2004 	ldr.w	r2, [fp, #4]
 80091ae:	4630      	mov	r0, r6
 80091b0:	2304      	movs	r3, #4
 80091b2:	9100      	str	r1, [sp, #0]
 80091b4:	f7ff fb8a 	bl	80088cc <arm_radix8_butterfly_f32>

    /* third col */
    arm_radix8_butterfly_f32 (pCol3, L, (float32_t *) S->pTwiddle, 4U);
 80091b8:	f8db 2004 	ldr.w	r2, [fp, #4]
 80091bc:	9900      	ldr	r1, [sp, #0]
 80091be:	4628      	mov	r0, r5
 80091c0:	2304      	movs	r3, #4
 80091c2:	f7ff fb83 	bl	80088cc <arm_radix8_butterfly_f32>

    /* fourth col */
    arm_radix8_butterfly_f32 (pCol4, L, (float32_t *) S->pTwiddle, 4U);
 80091c6:	2304      	movs	r3, #4
 80091c8:	f8db 2004 	ldr.w	r2, [fp, #4]
 80091cc:	4620      	mov	r0, r4
 80091ce:	9900      	ldr	r1, [sp, #0]
}
 80091d0:	b00f      	add	sp, #60	; 0x3c
 80091d2:	ecbd 8b04 	vpop	{d8-d9}
 80091d6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    arm_radix8_butterfly_f32 (pCol4, L, (float32_t *) S->pTwiddle, 4U);
 80091da:	f7ff bb77 	b.w	80088cc <arm_radix8_butterfly_f32>
      *p1++ = p1ap3_0 + p2[0] + p4[0];
 80091de:	ed4e 5a04 	vstr	s11, [lr, #-16]
      *p1++ = p1ap3_1 + p2[1] + p4[1];
 80091e2:	ed51 5a03 	vldr	s11, [r1, #-12]
      twR = *tw2++;
 80091e6:	9804      	ldr	r0, [sp, #16]
      *p1++ = p1ap3_1 + p2[1] + p4[1];
 80091e8:	ee36 6a25 	vadd.f32	s12, s12, s11
 80091ec:	ed52 5a03 	vldr	s11, [r2, #-12]
 80091f0:	ee36 6a25 	vadd.f32	s12, s12, s11
 80091f4:	ed0e 6a03 	vstr	s12, [lr, #-12]
      p1ap3_1 = pEnd1[-1] + pEnd3[-1];
 80091f8:	ed9a 6a01 	vldr	s12, [sl, #4]
 80091fc:	edd9 2a01 	vldr	s5, [r9, #4]
      p1ap3_0 = pEnd1[ 0] + pEnd3[0];
 8009200:	edd9 4a02 	vldr	s9, [r9, #8]
      p1ap3_1 = pEnd1[-1] + pEnd3[-1];
 8009204:	ee72 5a86 	vadd.f32	s11, s5, s12
      t2[2] = pEnd2[0] - pEnd4[0] + p1sp3_1;
 8009208:	edd3 0a02 	vldr	s1, [r3, #8]
      p1sp3_1 = pEnd1[-1] - pEnd3[-1];
 800920c:	ee72 2ac6 	vsub.f32	s5, s5, s12
      p1ap3_0 = pEnd1[ 0] + pEnd3[0];
 8009210:	ed9a 6a02 	vldr	s12, [sl, #8]
      t2[3] = pEnd1[0] - pEnd3[0] - pEnd2[-1] + pEnd4[-1];
 8009214:	ed93 4a01 	vldr	s8, [r3, #4]
      p1ap3_0 = pEnd1[ 0] + pEnd3[0];
 8009218:	ee74 8a86 	vadd.f32	s17, s9, s12
      t2[3] = pEnd1[0] - pEnd3[0] - pEnd2[-1] + pEnd4[-1];
 800921c:	ed97 8a01 	vldr	s16, [r7, #4]
      p1sp3_0 = pEnd1[ 0] - pEnd3[0];
 8009220:	ee74 4ac6 	vsub.f32	s9, s9, s12
      t2[2] = pEnd2[0] - pEnd4[0] + p1sp3_1;
 8009224:	ed97 6a02 	vldr	s12, [r7, #8]
      t3[2] = p1ap3_1 - pEnd2[-1] - pEnd4[-1];
 8009228:	ee35 2ac8 	vsub.f32	s4, s11, s16
      t2[2] = pEnd2[0] - pEnd4[0] + p1sp3_1;
 800922c:	ee36 9a60 	vsub.f32	s18, s12, s1
      t3[3] = p1ap3_0 - pEnd2[ 0] - pEnd4[ 0];
 8009230:	ee78 1ac6 	vsub.f32	s3, s17, s12
      *pEnd1-- = p1ap3_0 + pEnd2[ 0] + pEnd4[ 0];
 8009234:	ee36 6a28 	vadd.f32	s12, s12, s17
      t2[3] = pEnd1[0] - pEnd3[0] - pEnd2[-1] + pEnd4[-1];
 8009238:	ee34 1ac8 	vsub.f32	s2, s9, s16
      t3[2] = p1ap3_1 - pEnd2[-1] - pEnd4[-1];
 800923c:	ee32 2a44 	vsub.f32	s4, s4, s8
      *pEnd1-- = p1ap3_0 + pEnd2[ 0] + pEnd4[ 0];
 8009240:	ee36 6a20 	vadd.f32	s12, s12, s1
      t2[3] = pEnd1[0] - pEnd3[0] - pEnd2[-1] + pEnd4[-1];
 8009244:	ee31 1a04 	vadd.f32	s2, s2, s8
      t4[3] = pEnd4[-1] - pEnd2[-1] - p1sp3_0;
 8009248:	ee34 4a48 	vsub.f32	s8, s8, s16
      *pEnd1-- = p1ap3_0 + pEnd2[ 0] + pEnd4[ 0];
 800924c:	ed89 6a02 	vstr	s12, [r9, #8]
      t2[2] = pEnd2[0] - pEnd4[0] + p1sp3_1;
 8009250:	ee39 0a22 	vadd.f32	s0, s18, s5
      *pEnd1-- = p1ap3_1 + pEnd2[-1] + pEnd4[-1];
 8009254:	ed97 6a01 	vldr	s12, [r7, #4]
      t3[3] = p1ap3_0 - pEnd2[ 0] - pEnd4[ 0];
 8009258:	ee71 1ae0 	vsub.f32	s3, s3, s1
      t4[3] = pEnd4[-1] - pEnd2[-1] - p1sp3_0;
 800925c:	ee74 4a64 	vsub.f32	s9, s8, s9
      *pEnd1-- = p1ap3_1 + pEnd2[-1] + pEnd4[-1];
 8009260:	ee75 5a86 	vadd.f32	s11, s11, s12
 8009264:	ed93 6a01 	vldr	s12, [r3, #4]
      t4[2] = pEnd2[ 0] - pEnd4[ 0] - p1sp3_1;
 8009268:	ee79 2a62 	vsub.f32	s5, s18, s5
      *pEnd1-- = p1ap3_1 + pEnd2[-1] + pEnd4[-1];
 800926c:	ee75 5a86 	vadd.f32	s11, s11, s12
 8009270:	edc9 5a01 	vstr	s11, [r9, #4]
      twI = *tw2++;
 8009274:	ed50 5a01 	vldr	s11, [r0, #-4]
      twR = *tw2++;
 8009278:	ed10 6a02 	vldr	s12, [r0, #-8]
      m1 = t2[1] * twI;
 800927c:	ee25 4a83 	vmul.f32	s8, s11, s6
      twR = tw3[0];
 8009280:	9803      	ldr	r0, [sp, #12]
      *p2++ = m0 + m1;
 8009282:	eea6 4a26 	vfma.f32	s8, s12, s13
      *p2++ = m2 - m3;
 8009286:	ee66 6ae5 	vnmul.f32	s13, s13, s11
 800928a:	eee6 6a03 	vfma.f32	s13, s12, s6
      *p2++ = m0 + m1;
 800928e:	ed01 4a04 	vstr	s8, [r1, #-16]
      *p2++ = m2 - m3;
 8009292:	ed41 6a03 	vstr	s13, [r1, #-12]
      m3 = t2[3] * twR;
 8009296:	ee61 6a06 	vmul.f32	s13, s2, s12
      *pEnd2-- = m0 - m1;
 800929a:	ee26 6a40 	vnmul.f32	s12, s12, s0
      *pEnd2-- = m2 + m3;
 800929e:	eee0 6a25 	vfma.f32	s13, s0, s11
      *pEnd2-- = m0 - m1;
 80092a2:	eea1 6a25 	vfma.f32	s12, s2, s11
      *pEnd2-- = m2 + m3;
 80092a6:	edc7 6a01 	vstr	s13, [r7, #4]
      *pEnd2-- = m0 - m1;
 80092aa:	ed87 6a02 	vstr	s12, [r7, #8]
      twI = tw3[1];
 80092ae:	ed50 6a03 	vldr	s13, [r0, #-12]
      twR = tw3[0];
 80092b2:	ed10 6a04 	vldr	s12, [r0, #-16]
      m1 = t3[1] * twI;
 80092b6:	ee66 5aa3 	vmul.f32	s11, s13, s7
      twR = tw4[0];
 80092ba:	9801      	ldr	r0, [sp, #4]
      *p3++ = m0 + m1;
 80092bc:	eee6 5a07 	vfma.f32	s11, s12, s14
      *p3++ = m2 - m3;
 80092c0:	ee27 7a66 	vnmul.f32	s14, s14, s13
 80092c4:	eea6 7a23 	vfma.f32	s14, s12, s7
      *p3++ = m0 + m1;
 80092c8:	ed4c 5a04 	vstr	s11, [ip, #-16]
      *p3++ = m2 - m3;
 80092cc:	ed0c 7a03 	vstr	s14, [ip, #-12]
      m3 =  t3[3] * twI;
 80092d0:	ee21 7aa6 	vmul.f32	s14, s3, s13
      *pEnd3-- = m0 - m1;
 80092d4:	ee66 6ac2 	vnmul.f32	s13, s13, s4
      *pEnd3-- = m3 - m2;
 80092d8:	eea2 7a46 	vfms.f32	s14, s4, s12
      *pEnd3-- = m0 - m1;
 80092dc:	eee1 6ac6 	vfms.f32	s13, s3, s12
      *pEnd3-- = m3 - m2;
 80092e0:	ed8a 7a01 	vstr	s14, [sl, #4]
      *pEnd3-- = m0 - m1;
 80092e4:	edca 6a02 	vstr	s13, [sl, #8]
      twR = tw4[0];
 80092e8:	ed10 7a06 	vldr	s14, [r0, #-24]	; 0xffffffe8
      twI = tw4[1];
 80092ec:	ed50 6a05 	vldr	s13, [r0, #-20]	; 0xffffffec
    for (l = (L - 2) >> 1; l > 0; l-- )
 80092f0:	9805      	ldr	r0, [sp, #20]
      m1 = t4[1] * twI;
 80092f2:	ee26 6a85 	vmul.f32	s12, s13, s10
    for (l = (L - 2) >> 1; l > 0; l-- )
 80092f6:	3801      	subs	r0, #1
      *p4++ = m0 + m1;
 80092f8:	eea7 6a27 	vfma.f32	s12, s14, s15
    for (l = (L - 2) >> 1; l > 0; l-- )
 80092fc:	9005      	str	r0, [sp, #20]
      *p4++ = m2 - m3;
 80092fe:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8009302:	eee7 7a05 	vfma.f32	s15, s14, s10
      *p4++ = m0 + m1;
 8009306:	ed02 6a04 	vstr	s12, [r2, #-16]
      *p4++ = m2 - m3;
 800930a:	ed42 7a03 	vstr	s15, [r2, #-12]
      m3 = t4[3] * twR;
 800930e:	ee64 7a87 	vmul.f32	s15, s9, s14
      *pEnd4-- = m0 - m1;
 8009312:	ee27 7a62 	vnmul.f32	s14, s14, s5
      *pEnd4-- = m2 + m3;
 8009316:	eee2 7aa6 	vfma.f32	s15, s5, s13
      *pEnd4-- = m0 - m1;
 800931a:	eea4 7aa6 	vfma.f32	s14, s9, s13
      *pEnd4-- = m2 + m3;
 800931e:	edc3 7a01 	vstr	s15, [r3, #4]
      *pEnd4-- = m0 - m1;
 8009322:	ed83 7a02 	vstr	s14, [r3, #8]
    for (l = (L - 2) >> 1; l > 0; l-- )
 8009326:	e699      	b.n	800905c <arm_cfft_radix8by4_f32+0x120>

08009328 <arm_cfft_f32>:
        uint8_t bitReverseFlag)
{
  uint32_t  L = S->fftLen, l;
  float32_t invL, * pSrc;

  if (ifftFlag == 1U)
 8009328:	2a01      	cmp	r2, #1
{
 800932a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800932e:	4606      	mov	r6, r0
 8009330:	460c      	mov	r4, r1
 8009332:	4617      	mov	r7, r2
 8009334:	4698      	mov	r8, r3
  uint32_t  L = S->fftLen, l;
 8009336:	8805      	ldrh	r5, [r0, #0]
  if (ifftFlag == 1U)
 8009338:	d03e      	beq.n	80093b8 <arm_cfft_f32+0x90>
      *pSrc = -*pSrc;
      pSrc += 2;
    }
  }

  switch (L)
 800933a:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800933e:	d049      	beq.n	80093d4 <arm_cfft_f32+0xac>
 8009340:	d826      	bhi.n	8009390 <arm_cfft_f32+0x68>
 8009342:	2d40      	cmp	r5, #64	; 0x40
 8009344:	d031      	beq.n	80093aa <arm_cfft_f32+0x82>
 8009346:	d81c      	bhi.n	8009382 <arm_cfft_f32+0x5a>
 8009348:	2d10      	cmp	r5, #16
 800934a:	d01c      	beq.n	8009386 <arm_cfft_f32+0x5e>
 800934c:	2d20      	cmp	r5, #32
 800934e:	d041      	beq.n	80093d4 <arm_cfft_f32+0xac>
  case 4096:
    arm_radix8_butterfly_f32 ( p1, L, (float32_t *) S->pTwiddle, 1);
    break;
  }

  if ( bitReverseFlag )
 8009350:	f1b8 0f00 	cmp.w	r8, #0
 8009354:	d004      	beq.n	8009360 <arm_cfft_f32+0x38>
    arm_bitreversal_32 ((uint32_t*) p1, S->bitRevLength, S->pBitRevTable);
 8009356:	68b2      	ldr	r2, [r6, #8]
 8009358:	4620      	mov	r0, r4
 800935a:	89b1      	ldrh	r1, [r6, #12]
 800935c:	f7ff fa85 	bl	800886a <arm_bitreversal_32>

  if (ifftFlag == 1U)
 8009360:	2f01      	cmp	r7, #1
 8009362:	d10c      	bne.n	800937e <arm_cfft_f32+0x56>
  {
    invL = 1.0f / (float32_t)L;
 8009364:	ee07 5a90 	vmov	s15, r5
 8009368:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0

    /* Conjugate and scale output data */
    pSrc = p1;
    for (l= 0; l < L; l++)
 800936c:	2300      	movs	r3, #0
    invL = 1.0f / (float32_t)L;
 800936e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009372:	ee86 7aa7 	vdiv.f32	s14, s13, s15
    for (l= 0; l < L; l++)
 8009376:	42ab      	cmp	r3, r5
 8009378:	f104 0408 	add.w	r4, r4, #8
 800937c:	d32f      	bcc.n	80093de <arm_cfft_f32+0xb6>
      *pSrc++ *=   invL ;
      *pSrc    = -(*pSrc) * invL;
      pSrc++;
    }
  }
}
 800937e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  switch (L)
 8009382:	2d80      	cmp	r5, #128	; 0x80
 8009384:	d1e4      	bne.n	8009350 <arm_cfft_f32+0x28>
    arm_cfft_radix8by2_f32 ( (arm_cfft_instance_f32 *) S, p1);
 8009386:	4621      	mov	r1, r4
 8009388:	4630      	mov	r0, r6
 800938a:	f7ff fd19 	bl	8008dc0 <arm_cfft_radix8by2_f32>
    break;
 800938e:	e7df      	b.n	8009350 <arm_cfft_f32+0x28>
  switch (L)
 8009390:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 8009394:	d01e      	beq.n	80093d4 <arm_cfft_f32+0xac>
 8009396:	d805      	bhi.n	80093a4 <arm_cfft_f32+0x7c>
 8009398:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 800939c:	d005      	beq.n	80093aa <arm_cfft_f32+0x82>
 800939e:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 80093a2:	e7ef      	b.n	8009384 <arm_cfft_f32+0x5c>
 80093a4:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 80093a8:	d1d2      	bne.n	8009350 <arm_cfft_f32+0x28>
    arm_radix8_butterfly_f32 ( p1, L, (float32_t *) S->pTwiddle, 1);
 80093aa:	2301      	movs	r3, #1
 80093ac:	6872      	ldr	r2, [r6, #4]
 80093ae:	4629      	mov	r1, r5
 80093b0:	4620      	mov	r0, r4
 80093b2:	f7ff fa8b 	bl	80088cc <arm_radix8_butterfly_f32>
    break;
 80093b6:	e7cb      	b.n	8009350 <arm_cfft_f32+0x28>
    pSrc = p1 + 1;
 80093b8:	1d0a      	adds	r2, r1, #4
    for (l = 0; l < L; l++)
 80093ba:	2300      	movs	r3, #0
 80093bc:	42ab      	cmp	r3, r5
 80093be:	f102 0208 	add.w	r2, r2, #8
 80093c2:	d2ba      	bcs.n	800933a <arm_cfft_f32+0x12>
      *pSrc = -*pSrc;
 80093c4:	ed52 7a02 	vldr	s15, [r2, #-8]
    for (l = 0; l < L; l++)
 80093c8:	3301      	adds	r3, #1
      *pSrc = -*pSrc;
 80093ca:	eef1 7a67 	vneg.f32	s15, s15
 80093ce:	ed42 7a02 	vstr	s15, [r2, #-8]
    for (l = 0; l < L; l++)
 80093d2:	e7f3      	b.n	80093bc <arm_cfft_f32+0x94>
    arm_cfft_radix8by4_f32 ( (arm_cfft_instance_f32 *) S, p1);
 80093d4:	4621      	mov	r1, r4
 80093d6:	4630      	mov	r0, r6
 80093d8:	f7ff fdb0 	bl	8008f3c <arm_cfft_radix8by4_f32>
    break;
 80093dc:	e7b8      	b.n	8009350 <arm_cfft_f32+0x28>
      *pSrc++ *=   invL ;
 80093de:	ed54 7a02 	vldr	s15, [r4, #-8]
    for (l= 0; l < L; l++)
 80093e2:	3301      	adds	r3, #1
      *pSrc++ *=   invL ;
 80093e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80093e8:	ed44 7a02 	vstr	s15, [r4, #-8]
      *pSrc    = -(*pSrc) * invL;
 80093ec:	ed54 7a01 	vldr	s15, [r4, #-4]
 80093f0:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 80093f4:	ed44 7a01 	vstr	s15, [r4, #-4]
    for (l= 0; l < L; l++)
 80093f8:	e7bd      	b.n	8009376 <arm_cfft_f32+0x4e>

080093fa <stage_rfft_f32>:

   // U1 = XA(1) + XB(1); % It is real
   t1a = xBR + xAR  ;

   // U2 = XB(1) - XA(1); % It is imaginary
   t1b = xBI + xAI  ;
 80093fa:	edd1 7a01 	vldr	s15, [r1, #4]

   // real(tw * (xB - xA)) = twR * (xBR - xAR) - twI * (xBI - xAI);
   // imag(tw * (xB - xA)) = twI * (xBR - xAR) + twR * (xBI - xAI);
   *pOut++ = 0.5f * ( t1a + t1b );
 80093fe:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
   xBR = pB[0];
 8009402:	edd1 5a00 	vldr	s11, [r1]
   *pOut++ = 0.5f * ( t1a + t1b );
 8009406:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
   t1b = xBI + xAI  ;
 800940a:	ee77 7aa7 	vadd.f32	s15, s15, s15
   k = (S->Sint).fftLen - 1;
 800940e:	8803      	ldrh	r3, [r0, #0]
 8009410:	3210      	adds	r2, #16
 8009412:	3b01      	subs	r3, #1
   *pOut++ = 0.5f * ( t1a + t1b );
 8009414:	eef0 6a67 	vmov.f32	s13, s15
   *pOut++ = 0.5f * ( t1a - t1b );
 8009418:	eed5 7a86 	vfnms.f32	s15, s11, s12
   *pOut++ = 0.5f * ( t1a + t1b );
 800941c:	eee5 6a86 	vfma.f32	s13, s11, s12
{
 8009420:	b510      	push	{r4, lr}
  const float32_t * pCoeff = S->pTwiddleRFFT;       /* Points to RFFT Twiddle factors */
 8009422:	6944      	ldr	r4, [r0, #20]
   *pOut++ = 0.5f * ( t1a - t1b );
 8009424:	ee67 7a87 	vmul.f32	s15, s15, s14
   *pOut++ = 0.5f * ( t1a + t1b );
 8009428:	ee66 6a87 	vmul.f32	s13, s13, s14
 800942c:	f104 0010 	add.w	r0, r4, #16
 8009430:	f101 0410 	add.w	r4, r1, #16
 8009434:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   *pOut++ = 0.5f * ( t1a - t1b );
 8009438:	ed42 7a03 	vstr	s15, [r2, #-12]
   *pOut++ = 0.5f * ( t1a + t1b );
 800943c:	ed42 6a04 	vstr	s13, [r2, #-16]

   // XA(1) = 1/2*( U1 - imag(U2) +  i*( U1 +imag(U2) ));
   pB  = p + 2*k;
   pA += 2;
 8009440:	eef0 6a47 	vmov.f32	s13, s14
 8009444:	3908      	subs	r1, #8
         end
         XA(1) = 1/2* (XA(1) + XB(1) + TW(1) * (XB(1) - XA(1))) + i*( 1/2*( XA(1) + XB(1) + i*( XA(1) - XB(1))));
         X = XA;
      */

      xBI = pB[1];
 8009446:	ed91 4a03 	vldr	s8, [r1, #12]
      *pOut++ = 0.5f * (xAI - xBI + p1 - p2 ); //xAI


      pA += 2;
      pB -= 2;
      k--;
 800944a:	3b01      	subs	r3, #1
      xBR = pB[0];
 800944c:	ed91 7a02 	vldr	s14, [r1, #8]
      xAR = pA[0];
 8009450:	3008      	adds	r0, #8
 8009452:	ed54 3a02 	vldr	s7, [r4, #-8]
   } while (k > 0);
 8009456:	2b00      	cmp	r3, #0
      xAI = pA[1];
 8009458:	ed54 7a01 	vldr	s15, [r4, #-4]
      twR = *pCoeff++;
 800945c:	f102 0208 	add.w	r2, r2, #8
      t1a = xBR - xAR ;
 8009460:	ee37 5a63 	vsub.f32	s10, s14, s7
      twR = *pCoeff++;
 8009464:	ed50 5a04 	vldr	s11, [r0, #-16]
      t1b = xBI + xAI ;
 8009468:	ee34 6a27 	vadd.f32	s12, s8, s15
      twI = *pCoeff++;
 800946c:	ed50 4a03 	vldr	s9, [r0, #-12]
      *pOut++ = 0.5f * (xAR + xBR + p0 + p3 ); //xAR
 8009470:	ee37 7a23 	vadd.f32	s14, s14, s7
 8009474:	f104 0408 	add.w	r4, r4, #8
      *pOut++ = 0.5f * (xAI - xBI + p1 - p2 ); //xAI
 8009478:	ee77 7ac4 	vsub.f32	s15, s15, s8
 800947c:	f1a1 0108 	sub.w	r1, r1, #8
      *pOut++ = 0.5f * (xAR + xBR + p0 + p3 ); //xAR
 8009480:	eea5 7a85 	vfma.f32	s14, s11, s10
      *pOut++ = 0.5f * (xAI - xBI + p1 - p2 ); //xAI
 8009484:	eee4 7a85 	vfma.f32	s15, s9, s10
      *pOut++ = 0.5f * (xAR + xBR + p0 + p3 ); //xAR
 8009488:	eea4 7a86 	vfma.f32	s14, s9, s12
      *pOut++ = 0.5f * (xAI - xBI + p1 - p2 ); //xAI
 800948c:	eee5 7ac6 	vfms.f32	s15, s11, s12
      *pOut++ = 0.5f * (xAR + xBR + p0 + p3 ); //xAR
 8009490:	ee27 7a26 	vmul.f32	s14, s14, s13
      *pOut++ = 0.5f * (xAI - xBI + p1 - p2 ); //xAI
 8009494:	ee67 7aa6 	vmul.f32	s15, s15, s13
      *pOut++ = 0.5f * (xAR + xBR + p0 + p3 ); //xAR
 8009498:	ed02 7a04 	vstr	s14, [r2, #-16]
      *pOut++ = 0.5f * (xAI - xBI + p1 - p2 ); //xAI
 800949c:	ed42 7a03 	vstr	s15, [r2, #-12]
   } while (k > 0);
 80094a0:	dcd1      	bgt.n	8009446 <stage_rfft_f32+0x4c>
}
 80094a2:	bd10      	pop	{r4, pc}

080094a4 <merge_rfft_f32>:
        float32_t xAR, xAI, xBR, xBI;               /* temporary variables */
        float32_t t1a, t1b, r, s, t, u;             /* temporary variables */

   k = (S->Sint).fftLen - 1;

   xAR = pA[0];
 80094a4:	ed91 7a00 	vldr	s14, [r1]
   xAI = pA[1];

   pCoeff += 2 ;

   *pOut++ = 0.5f * ( xAR + xAI );
 80094a8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
   xAI = pA[1];
 80094ac:	ed91 6a01 	vldr	s12, [r1, #4]
 80094b0:	3208      	adds	r2, #8
   k = (S->Sint).fftLen - 1;
 80094b2:	8803      	ldrh	r3, [r0, #0]
   *pOut++ = 0.5f * ( xAR + xAI );
 80094b4:	ee77 6a06 	vadd.f32	s13, s14, s12
   *pOut++ = 0.5f * ( xAR - xAI );
 80094b8:	ee37 7a46 	vsub.f32	s14, s14, s12
   k = (S->Sint).fftLen - 1;
 80094bc:	3b01      	subs	r3, #1
   *pOut++ = 0.5f * ( xAR + xAI );
 80094be:	ee66 6aa7 	vmul.f32	s13, s13, s15
   *pOut++ = 0.5f * ( xAR - xAI );
 80094c2:	ee27 7a27 	vmul.f32	s14, s14, s15
{
 80094c6:	b510      	push	{r4, lr}
  const float32_t *pCoeff = S->pTwiddleRFFT;        /* Points to RFFT Twiddle factors */
 80094c8:	6944      	ldr	r4, [r0, #20]
   *pOut++ = 0.5f * ( xAR + xAI );
 80094ca:	ed42 6a02 	vstr	s13, [r2, #-8]
   *pOut++ = 0.5f * ( xAR - xAI );
 80094ce:	eef0 6a67 	vmov.f32	s13, s15
   pCoeff += 2 ;
 80094d2:	f104 0008 	add.w	r0, r4, #8

   pB  =  p + 2*k ;
   pA +=  2	   ;
 80094d6:	f101 0408 	add.w	r4, r1, #8
   pB  =  p + 2*k ;
 80094da:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   *pOut++ = 0.5f * ( xAR - xAI );
 80094de:	ed02 7a01 	vstr	s14, [r2, #-4]

   while (k > 0)
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	f102 0208 	add.w	r2, r2, #8
 80094e8:	f100 0008 	add.w	r0, r0, #8
 80094ec:	f104 0408 	add.w	r4, r4, #8
 80094f0:	f1a1 0108 	sub.w	r1, r1, #8
 80094f4:	dc00      	bgt.n	80094f8 <merge_rfft_f32+0x54>
      pA += 2;
      pB -= 2;
      k--;
   }

}
 80094f6:	bd10      	pop	{r4, pc}
      xBI =   pB[1]    ;
 80094f8:	ed91 4a03 	vldr	s8, [r1, #12]
      k--;
 80094fc:	3b01      	subs	r3, #1
      xBR =   pB[0]    ;
 80094fe:	ed91 7a02 	vldr	s14, [r1, #8]
      xAR =  pA[0];
 8009502:	ed54 3a02 	vldr	s7, [r4, #-8]
      xAI =  pA[1];
 8009506:	ed54 7a01 	vldr	s15, [r4, #-4]
      t1a = xAR - xBR ;
 800950a:	ee33 5ac7 	vsub.f32	s10, s7, s14
      twR = *pCoeff++;
 800950e:	ed50 5a02 	vldr	s11, [r0, #-8]
      t1b = xAI + xBI ;
 8009512:	ee34 6a27 	vadd.f32	s12, s8, s15
      twI = *pCoeff++;
 8009516:	ed50 4a01 	vldr	s9, [r0, #-4]
      *pOut++ = 0.5f * (xAR + xBR - r - s ); //xAR
 800951a:	ee37 7a23 	vadd.f32	s14, s14, s7
      *pOut++ = 0.5f * (xAI - xBI + t - u ); //xAI
 800951e:	ee77 7ac4 	vsub.f32	s15, s15, s8
      *pOut++ = 0.5f * (xAR + xBR - r - s ); //xAR
 8009522:	eea5 7ac5 	vfms.f32	s14, s11, s10
      *pOut++ = 0.5f * (xAI - xBI + t - u ); //xAI
 8009526:	eee4 7a85 	vfma.f32	s15, s9, s10
      *pOut++ = 0.5f * (xAR + xBR - r - s ); //xAR
 800952a:	eea4 7ac6 	vfms.f32	s14, s9, s12
      *pOut++ = 0.5f * (xAI - xBI + t - u ); //xAI
 800952e:	eee5 7ac6 	vfms.f32	s15, s11, s12
      *pOut++ = 0.5f * (xAR + xBR - r - s ); //xAR
 8009532:	ee27 7a26 	vmul.f32	s14, s14, s13
      *pOut++ = 0.5f * (xAI - xBI + t - u ); //xAI
 8009536:	ee67 7aa6 	vmul.f32	s15, s15, s13
      *pOut++ = 0.5f * (xAR + xBR - r - s ); //xAR
 800953a:	ed02 7a02 	vstr	s14, [r2, #-8]
      *pOut++ = 0.5f * (xAI - xBI + t - u ); //xAI
 800953e:	ed42 7a01 	vstr	s15, [r2, #-4]
      k--;
 8009542:	e7ce      	b.n	80094e2 <merge_rfft_f32+0x3e>

08009544 <arm_rfft_fast_f32>:
void arm_rfft_fast_f32(
  const arm_rfft_fast_instance_f32 * S,
  float32_t * p,
  float32_t * pOut,
  uint8_t ifftFlag)
{
 8009544:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009548:	4605      	mov	r5, r0
 800954a:	460f      	mov	r7, r1
 800954c:	4616      	mov	r6, r2
   const arm_cfft_instance_f32 * Sint = &(S->Sint);

   /* Calculation of Real FFT */
   if (ifftFlag)
 800954e:	461c      	mov	r4, r3
 8009550:	b14b      	cbz	r3, 8009566 <arm_rfft_fast_f32+0x22>
   {
      /*  Real FFT compression */
      merge_rfft_f32(S, p, pOut);
 8009552:	f7ff ffa7 	bl	80094a4 <merge_rfft_f32>
      /* Complex radix-4 IFFT process */
      arm_cfft_f32( Sint, pOut, ifftFlag, 1);
 8009556:	4622      	mov	r2, r4
 8009558:	4631      	mov	r1, r6
 800955a:	4628      	mov	r0, r5
 800955c:	2301      	movs	r3, #1
      arm_cfft_f32( Sint, p, ifftFlag, 1);

      /*  Real FFT extraction */
      stage_rfft_f32(S, p, pOut);
   }
}
 800955e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      arm_cfft_f32( Sint, pOut, ifftFlag, 1);
 8009562:	f7ff bee1 	b.w	8009328 <arm_cfft_f32>
      arm_cfft_f32( Sint, p, ifftFlag, 1);
 8009566:	4622      	mov	r2, r4
 8009568:	2301      	movs	r3, #1
 800956a:	f7ff fedd 	bl	8009328 <arm_cfft_f32>
      stage_rfft_f32(S, p, pOut);
 800956e:	4632      	mov	r2, r6
 8009570:	4639      	mov	r1, r7
 8009572:	4628      	mov	r0, r5
}
 8009574:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      stage_rfft_f32(S, p, pOut);
 8009578:	f7ff bf3f 	b.w	80093fa <stage_rfft_f32>

0800957c <arm_rfft_fast_init_1024_f32>:

arm_status arm_rfft_fast_init_1024_f32( arm_rfft_fast_instance_f32 * S ) {

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 800957c:	4601      	mov	r1, r0
arm_status arm_rfft_fast_init_1024_f32( arm_rfft_fast_instance_f32 * S ) {
 800957e:	b508      	push	{r3, lr}
  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 8009580:	b140      	cbz	r0, 8009594 <arm_rfft_fast_init_1024_f32+0x18>

  status=arm_cfft_init_512_f32(&(S->Sint));
 8009582:	f7ff f995 	bl	80088b0 <arm_cfft_init_512_f32>
  if (status != ARM_MATH_SUCCESS)
 8009586:	b920      	cbnz	r0, 8009592 <arm_rfft_fast_init_1024_f32+0x16>
  {
    return(status);
  }
  S->fftLenRFFT = 1024U;
 8009588:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800958c:	820b      	strh	r3, [r1, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_1024;
 800958e:	4b03      	ldr	r3, [pc, #12]	; (800959c <arm_rfft_fast_init_1024_f32+0x20>)
 8009590:	614b      	str	r3, [r1, #20]

  return ARM_MATH_SUCCESS;
}
 8009592:	bd08      	pop	{r3, pc}
  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 8009594:	f04f 30ff 	mov.w	r0, #4294967295
 8009598:	e7fb      	b.n	8009592 <arm_rfft_fast_init_1024_f32+0x16>
 800959a:	bf00      	nop
 800959c:	0804e4cc 	.word	0x0804e4cc

080095a0 <arm_mfcc_init_1024_f32>:
                   The array has the same size as the FFT length.

                   The folder Scripts is containing a Python script which can be used
                   to generate the filter, dct and window arrays.
 */
MFCC_INIT_F32(1024)
 80095a0:	b410      	push	{r4}
 80095a2:	6003      	str	r3, [r0, #0]
 80095a4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80095a8:	9b01      	ldr	r3, [sp, #4]
 80095aa:	61c2      	str	r2, [r0, #28]
 80095ac:	60c3      	str	r3, [r0, #12]
 80095ae:	9b02      	ldr	r3, [sp, #8]
 80095b0:	6103      	str	r3, [r0, #16]
 80095b2:	9b03      	ldr	r3, [sp, #12]
 80095b4:	6043      	str	r3, [r0, #4]
 80095b6:	9b04      	ldr	r3, [sp, #16]
 80095b8:	e9c0 4105 	strd	r4, r1, [r0, #20]
 80095bc:	6083      	str	r3, [r0, #8]
 80095be:	3020      	adds	r0, #32
 80095c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80095c4:	f7ff bfda 	b.w	800957c <arm_rfft_fast_init_1024_f32>

080095c8 <arm_mfcc_f32>:
  const arm_mfcc_instance_f32 * S,
  float32_t *pSrc,
  float32_t *pDst,
  float32_t *pTmp
  )
{
 80095c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80095cc:	460e      	mov	r6, r1
 80095ce:	b086      	sub	sp, #24
  float32_t maxValue;
  uint32_t  index; 
  uint32_t i;
  float32_t result;
  const float32_t *coefs=S->filterCoefs;
 80095d0:	f8d0 9004 	ldr.w	r9, [r0, #4]
{
 80095d4:	4604      	mov	r4, r0
  arm_matrix_instance_f32 pDctMat;

  /* Normalize */
  arm_absmax_f32(pSrc,S->fftLen,&maxValue,&index);
 80095d6:	6941      	ldr	r1, [r0, #20]
{
 80095d8:	4690      	mov	r8, r2
 80095da:	461d      	mov	r5, r3
  arm_absmax_f32(pSrc,S->fftLen,&maxValue,&index);
 80095dc:	aa01      	add	r2, sp, #4
 80095de:	ab02      	add	r3, sp, #8
 80095e0:	4630      	mov	r0, r6
 80095e2:	f7ff f8bf 	bl	8008764 <arm_absmax_f32>

  if (maxValue != 0.0f)
 80095e6:	eddd 7a01 	vldr	s15, [sp, #4]
 80095ea:	eef5 7a40 	vcmp.f32	s15, #0.0
 80095ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095f2:	d008      	beq.n	8009606 <arm_mfcc_f32+0x3e>
  {
     arm_scale_f32(pSrc,1.0f/maxValue,pSrc,S->fftLen);
 80095f4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80095f8:	6962      	ldr	r2, [r4, #20]
 80095fa:	4631      	mov	r1, r6
 80095fc:	4630      	mov	r0, r6
 80095fe:	ee80 0a27 	vdiv.f32	s0, s0, s15
 8009602:	f000 f8b5 	bl	8009770 <arm_scale_f32>
  }

  /* Multiply by window */
  arm_mult_f32(pSrc,S->windowCoefs,pSrc,S->fftLen);
 8009606:	6963      	ldr	r3, [r4, #20]
 8009608:	4632      	mov	r2, r6
 800960a:	68a1      	ldr	r1, [r4, #8]
 800960c:	4630      	mov	r0, r6
 800960e:	f000 f899 	bl	8009744 <arm_mult_f32>
    pTmp[2*i+1] = 0.0f;
  }
  arm_cfft_f32(&(S->cfft),pTmp,0,1);
#else
  /* Default RFFT based implementation */
  arm_rfft_fast_f32(&(S->rfft),pSrc,pTmp,0);
 8009612:	2300      	movs	r3, #0
 8009614:	462a      	mov	r2, r5
 8009616:	4631      	mov	r1, r6
 8009618:	f104 0020 	add.w	r0, r4, #32
 800961c:	f7ff ff92 	bl	8009544 <arm_rfft_fast_f32>
  /* Unpack real values */
  pTmp[S->fftLen]=pTmp[1];
 8009620:	6962      	ldr	r2, [r4, #20]
 8009622:	686b      	ldr	r3, [r5, #4]
  pTmp[S->fftLen+1]=0.0f;
  pTmp[1]=0.0f;
#endif
  arm_cmplx_mag_f32(pTmp,pSrc,S->fftLen);
 8009624:	4628      	mov	r0, r5
  pTmp[S->fftLen]=pTmp[1];
 8009626:	eb05 0182 	add.w	r1, r5, r2, lsl #2
 800962a:	600b      	str	r3, [r1, #0]
  pTmp[S->fftLen+1]=0.0f;
 800962c:	2300      	movs	r3, #0
 800962e:	604b      	str	r3, [r1, #4]
  arm_cmplx_mag_f32(pTmp,pSrc,S->fftLen);
 8009630:	4631      	mov	r1, r6
  pTmp[1]=0.0f;
 8009632:	606b      	str	r3, [r5, #4]
  arm_cmplx_mag_f32(pTmp,pSrc,S->fftLen);
 8009634:	f000 f8a6 	bl	8009784 <arm_cmplx_mag_f32>
  if (maxValue != 0.0f)
 8009638:	ed9d 0a01 	vldr	s0, [sp, #4]
 800963c:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8009640:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009644:	d004      	beq.n	8009650 <arm_mfcc_f32+0x88>
  {
     arm_scale_f32(pSrc,maxValue,pSrc,S->fftLen);
 8009646:	6962      	ldr	r2, [r4, #20]
 8009648:	4631      	mov	r1, r6
 800964a:	4630      	mov	r0, r6
 800964c:	f000 f890 	bl	8009770 <arm_scale_f32>
 8009650:	46aa      	mov	sl, r5
{
 8009652:	2700      	movs	r7, #0
  }

  /* Apply MEL filters */
  for(i=0; i<S->nbMelFilters; i++)
 8009654:	69a2      	ldr	r2, [r4, #24]
 8009656:	42ba      	cmp	r2, r7
 8009658:	d81a      	bhi.n	8009690 <arm_mfcc_f32+0xc8>
      pTmp[i] = result;

  }

  /* Compute the log */
  arm_offset_f32(pTmp,1.0e-6f,pTmp,S->nbMelFilters);
 800965a:	ed9f 0a18 	vldr	s0, [pc, #96]	; 80096bc <arm_mfcc_f32+0xf4>
 800965e:	4629      	mov	r1, r5
 8009660:	4628      	mov	r0, r5
 8009662:	f000 f87b 	bl	800975c <arm_offset_f32>
  arm_vlog_f32(pTmp,pTmp,S->nbMelFilters);
 8009666:	69a2      	ldr	r2, [r4, #24]
 8009668:	4629      	mov	r1, r5
 800966a:	4628      	mov	r0, r5
 800966c:	f7ff f86c 	bl	8008748 <arm_vlog_f32>

  /* Multiply with the DCT matrix */

  pDctMat.numRows=S->nbDctOutputs;
 8009670:	69e3      	ldr	r3, [r4, #28]
  pDctMat.numCols=S->nbMelFilters;
  pDctMat.pData=(float32_t*)S->dctCoefs;

  arm_mat_vec_mult_f32(&pDctMat, pTmp, pDst);
 8009672:	4642      	mov	r2, r8
 8009674:	4629      	mov	r1, r5
  pDctMat.numRows=S->nbDctOutputs;
 8009676:	f8ad 3010 	strh.w	r3, [sp, #16]
  arm_mat_vec_mult_f32(&pDctMat, pTmp, pDst);
 800967a:	a804      	add	r0, sp, #16
  pDctMat.numCols=S->nbMelFilters;
 800967c:	69a3      	ldr	r3, [r4, #24]
 800967e:	f8ad 3012 	strh.w	r3, [sp, #18]
  pDctMat.pData=(float32_t*)S->dctCoefs;
 8009682:	6823      	ldr	r3, [r4, #0]
 8009684:	9305      	str	r3, [sp, #20]
  arm_mat_vec_mult_f32(&pDctMat, pTmp, pDst);
 8009686:	f000 f89b 	bl	80097c0 <arm_mat_vec_mult_f32>
      

}
 800968a:	b006      	add	sp, #24
 800968c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      arm_dot_prod_f32(pSrc+S->filterPos[i],
 8009690:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
 8009694:	4649      	mov	r1, r9
 8009696:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800969a:	ab03      	add	r3, sp, #12
 800969c:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 80096a0:	eb06 0080 	add.w	r0, r6, r0, lsl #2
 80096a4:	f000 f83e 	bl	8009724 <arm_dot_prod_f32>
      coefs += S->filterLengths[i];
 80096a8:	6923      	ldr	r3, [r4, #16]
 80096aa:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
  for(i=0; i<S->nbMelFilters; i++)
 80096ae:	3701      	adds	r7, #1
      coefs += S->filterLengths[i];
 80096b0:	eb09 0983 	add.w	r9, r9, r3, lsl #2
      pTmp[i] = result;
 80096b4:	9b03      	ldr	r3, [sp, #12]
 80096b6:	f84a 3b04 	str.w	r3, [sl], #4
  for(i=0; i<S->nbMelFilters; i++)
 80096ba:	e7cb      	b.n	8009654 <arm_mfcc_f32+0x8c>
 80096bc:	358637bd 	.word	0x358637bd

080096c0 <arm_hamming_f32>:

void arm_hamming_f32(
        float32_t * pDst,
        uint32_t blockSize)
{
   float32_t k = 2.0f / ((float32_t) blockSize);
 80096c0:	ee07 1a90 	vmov	s15, r1
 80096c4:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80096c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
{
 80096cc:	b570      	push	{r4, r5, r6, lr}
 80096ce:	ed2d 8b04 	vpush	{d8-d9}
   float32_t k = 2.0f / ((float32_t) blockSize);
 80096d2:	ee87 8a27 	vdiv.f32	s16, s14, s15
{
 80096d6:	460c      	mov	r4, r1
 80096d8:	4606      	mov	r6, r0
   float32_t w;

   for(uint32_t i=0;i<blockSize;i++)
 80096da:	2500      	movs	r5, #0
   {
     w = 0.54f - 0.46f * cosf (PI * i * k);
 80096dc:	eddf 8a0e 	vldr	s17, [pc, #56]	; 8009718 <arm_hamming_f32+0x58>
 80096e0:	ed9f 9a0e 	vldr	s18, [pc, #56]	; 800971c <arm_hamming_f32+0x5c>
 80096e4:	eddf 9a0e 	vldr	s19, [pc, #56]	; 8009720 <arm_hamming_f32+0x60>
   for(uint32_t i=0;i<blockSize;i++)
 80096e8:	42a5      	cmp	r5, r4
 80096ea:	d102      	bne.n	80096f2 <arm_hamming_f32+0x32>
     pDst[i] = w;
   }
}
 80096ec:	ecbd 8b04 	vpop	{d8-d9}
 80096f0:	bd70      	pop	{r4, r5, r6, pc}
     w = 0.54f - 0.46f * cosf (PI * i * k);
 80096f2:	ee07 5a90 	vmov	s15, r5
   for(uint32_t i=0;i<blockSize;i++)
 80096f6:	3501      	adds	r5, #1
     w = 0.54f - 0.46f * cosf (PI * i * k);
 80096f8:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 80096fc:	ee20 0a28 	vmul.f32	s0, s0, s17
 8009700:	ee20 0a08 	vmul.f32	s0, s0, s16
 8009704:	f000 fab8 	bl	8009c78 <cosf>
 8009708:	eef0 7a69 	vmov.f32	s15, s19
 800970c:	eee0 7a49 	vfms.f32	s15, s0, s18
     pDst[i] = w;
 8009710:	ece6 7a01 	vstmia	r6!, {s15}
   for(uint32_t i=0;i<blockSize;i++)
 8009714:	e7e8      	b.n	80096e8 <arm_hamming_f32+0x28>
 8009716:	bf00      	nop
 8009718:	40490fdb 	.word	0x40490fdb
 800971c:	3eeb851f 	.word	0x3eeb851f
 8009720:	3f0a3d71 	.word	0x3f0a3d71

08009724 <arm_dot_prod_f32>:
  const float32_t * pSrcB,
        uint32_t blockSize,
        float32_t * result)
{
        uint32_t blkCnt;                               /* Loop counter */
        float32_t sum = 0.0f;                          /* Temporary return variable */
 8009724:	eddf 7a06 	vldr	s15, [pc, #24]	; 8009740 <arm_dot_prod_f32+0x1c>
  blkCnt = blockSize;

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */
#endif /* #if defined(ARM_MATH_NEON) */

  while (blkCnt > 0U)
 8009728:	b912      	cbnz	r2, 8009730 <arm_dot_prod_f32+0xc>
    /* Decrement loop counter */
    blkCnt--;
  }

  /* Store result in destination buffer */
  *result = sum;
 800972a:	edc3 7a00 	vstr	s15, [r3]
}
 800972e:	4770      	bx	lr
    sum += (*pSrcA++) * (*pSrcB++);
 8009730:	ecf0 6a01 	vldmia	r0!, {s13}
    blkCnt--;
 8009734:	3a01      	subs	r2, #1
    sum += (*pSrcA++) * (*pSrcB++);
 8009736:	ecb1 7a01 	vldmia	r1!, {s14}
 800973a:	eee6 7a87 	vfma.f32	s15, s13, s14
    blkCnt--;
 800973e:	e7f3      	b.n	8009728 <arm_dot_prod_f32+0x4>
 8009740:	00000000 	.word	0x00000000

08009744 <arm_mult_f32>:
  blkCnt = blockSize;

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */
#endif /* #if defined(ARM_MATH_NEON) */

  while (blkCnt > 0U)
 8009744:	b903      	cbnz	r3, 8009748 <arm_mult_f32+0x4>

    /* Decrement loop counter */
    blkCnt--;
  }

}
 8009746:	4770      	bx	lr
    *pDst++ = (*pSrcA++) * (*pSrcB++);
 8009748:	ecf0 7a01 	vldmia	r0!, {s15}
    blkCnt--;
 800974c:	3b01      	subs	r3, #1
    *pDst++ = (*pSrcA++) * (*pSrcB++);
 800974e:	ecb1 7a01 	vldmia	r1!, {s14}
 8009752:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009756:	ece2 7a01 	vstmia	r2!, {s15}
    blkCnt--;
 800975a:	e7f3      	b.n	8009744 <arm_mult_f32>

0800975c <arm_offset_f32>:
  blkCnt = blockSize;

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */
#endif /* #if defined(ARM_MATH_NEON_EXPERIMENTAL) */

  while (blkCnt > 0U)
 800975c:	b902      	cbnz	r2, 8009760 <arm_offset_f32+0x4>

    /* Decrement loop counter */
    blkCnt--;
  }

}
 800975e:	4770      	bx	lr
    *pDst++ = (*pSrc++) + offset;
 8009760:	ecf0 7a01 	vldmia	r0!, {s15}
    blkCnt--;
 8009764:	3a01      	subs	r2, #1
    *pDst++ = (*pSrc++) + offset;
 8009766:	ee77 7a80 	vadd.f32	s15, s15, s0
 800976a:	ece1 7a01 	vstmia	r1!, {s15}
    blkCnt--;
 800976e:	e7f5      	b.n	800975c <arm_offset_f32>

08009770 <arm_scale_f32>:
  blkCnt = blockSize;

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */
#endif /* #if defined(ARM_MATH_NEON_EXPERIMENTAL) */

  while (blkCnt > 0U)
 8009770:	b902      	cbnz	r2, 8009774 <arm_scale_f32+0x4>

    /* Decrement loop counter */
    blkCnt--;
  }

}
 8009772:	4770      	bx	lr
    *pDst++ = (*pSrc++) * scale;
 8009774:	ecf0 7a01 	vldmia	r0!, {s15}
    blkCnt--;
 8009778:	3a01      	subs	r2, #1
    *pDst++ = (*pSrc++) * scale;
 800977a:	ee67 7a80 	vmul.f32	s15, s15, s0
 800977e:	ece1 7a01 	vstmia	r1!, {s15}
    blkCnt--;
 8009782:	e7f5      	b.n	8009770 <arm_scale_f32>

08009784 <arm_cmplx_mag_f32>:
#else
void arm_cmplx_mag_f32(
  const float32_t * pSrc,
        float32_t * pDst,
        uint32_t numSamples)
{
 8009784:	b510      	push	{r4, lr}
 8009786:	3008      	adds	r0, #8
 */
__STATIC_FORCEINLINE arm_status arm_sqrt_f32(
  const float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 8009788:	2400      	movs	r4, #0
  blkCnt = numSamples;

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */
#endif /* #if defined(ARM_MATH_NEON) */

  while (blkCnt > 0U)
 800978a:	b902      	cbnz	r2, 800978e <arm_cmplx_mag_f32+0xa>

    /* Decrement loop counter */
    blkCnt--;
  }

}
 800978c:	bd10      	pop	{r4, pc}
    imag = *pSrc++;
 800978e:	ed50 7a01 	vldr	s15, [r0, #-4]
    arm_sqrt_f32((real * real) + (imag * imag), pDst++);
 8009792:	1d0b      	adds	r3, r1, #4
    real = *pSrc++;
 8009794:	ed10 7a02 	vldr	s14, [r0, #-8]
    arm_sqrt_f32((real * real) + (imag * imag), pDst++);
 8009798:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800979c:	eee7 7a07 	vfma.f32	s15, s14, s14
 80097a0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80097a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80097a8:	db07      	blt.n	80097ba <arm_cmplx_mag_f32+0x36>
      *pOut = _sqrtf(in);
#elif defined(__GNUC_PYTHON__)
      *pOut = sqrtf(in);
#elif defined ( __GNUC__ )
  #if defined (__VFP_FP__) && !defined(__SOFTFP__)
      __ASM("VSQRT.F32 %0,%1" : "=t"(*pOut) : "t"(in));
 80097aa:	eef1 7ae7 	vsqrt.f32	s15, s15
 80097ae:	edc1 7a00 	vstr	s15, [r1]
    blkCnt--;
 80097b2:	3a01      	subs	r2, #1
 80097b4:	3008      	adds	r0, #8
    arm_sqrt_f32((real * real) + (imag * imag), pDst++);
 80097b6:	4619      	mov	r1, r3
 80097b8:	e7e7      	b.n	800978a <arm_cmplx_mag_f32+0x6>

      return (ARM_MATH_SUCCESS);
    }
    else
    {
      *pOut = 0.0f;
 80097ba:	f843 4c04 	str.w	r4, [r3, #-4]
      return (ARM_MATH_ARGUMENT_ERROR);
 80097be:	e7f8      	b.n	80097b2 <arm_cmplx_mag_f32+0x2e>

080097c0 <arm_mat_vec_mult_f32>:
    }
}
#else

void arm_mat_vec_mult_f32(const arm_matrix_instance_f32 *pSrcMat, const float32_t *pVec, float32_t *pDst)
{
 80097c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint32_t numRows = pSrcMat->numRows;
 80097c4:	8804      	ldrh	r4, [r0, #0]
{
 80097c6:	b087      	sub	sp, #28
    uint32_t numCols = pSrcMat->numCols;
 80097c8:	8843      	ldrh	r3, [r0, #2]
    const float32_t *pSrcA = pSrcMat->pData;
 80097ca:	f04f 0c0c 	mov.w	ip, #12
 80097ce:	f8d0 8004 	ldr.w	r8, [r0, #4]
    uint16_t row, colCnt; /* loop counters */
    float32_t matData, matData2, vecData, vecData2;


    /* Process 4 rows at a time */
    row = numRows >> 2;
 80097d2:	08a0      	lsrs	r0, r4, #2
{
 80097d4:	9204      	str	r2, [sp, #16]
        /* Loop unrolling: process 2 columns per iteration */
        colCnt = numCols;

        /* Initialize pointers to the starting address of the column being processed */
        pInA1 = pSrcA + i;
        pInA2 = pInA1 + numCols;
 80097d6:	ea4f 0e83 	mov.w	lr, r3, lsl #2
    row = numRows >> 2;
 80097da:	4606      	mov	r6, r0
 80097dc:	9001      	str	r0, [sp, #4]
 80097de:	4647      	mov	r7, r8
 80097e0:	f102 0010 	add.w	r0, r2, #16
 80097e4:	eb08 05c3 	add.w	r5, r8, r3, lsl #3
 80097e8:	fb0c fc03 	mul.w	ip, ip, r3
 80097ec:	eb01 0283 	add.w	r2, r1, r3, lsl #2
 80097f0:	9205      	str	r2, [sp, #20]
    while (row > 0) {
 80097f2:	b9c6      	cbnz	r6, 8009826 <arm_mat_vec_mult_f32+0x66>
 80097f4:	9804      	ldr	r0, [sp, #16]

        float32_t sum = 0.0f;
        pInVec = pVec;
        pInA1 = pSrcA + i;

        colCnt = numCols >> 1;
 80097f6:	085e      	lsrs	r6, r3, #1
 80097f8:	9a01      	ldr	r2, [sp, #4]
 80097fa:	f004 0403 	and.w	r4, r4, #3
 80097fe:	4635      	mov	r5, r6
 8009800:	ea4f 0cc6 	mov.w	ip, r6, lsl #3
 8009804:	eb00 1202 	add.w	r2, r0, r2, lsl #4
    while (row > 0) {
 8009808:	9801      	ldr	r0, [sp, #4]
 800980a:	eb01 09c6 	add.w	r9, r1, r6, lsl #3
 800980e:	4358      	muls	r0, r3
 8009810:	eb02 0484 	add.w	r4, r2, r4, lsl #2
        }
        // process remainder of row
        colCnt = numCols & 1u;


        while (colCnt > 0) {
 8009814:	f003 0301 	and.w	r3, r3, #1
 8009818:	eb08 1800 	add.w	r8, r8, r0, lsl #4
    while (row > 0) {
 800981c:	42a2      	cmp	r2, r4
 800981e:	d13b      	bne.n	8009898 <arm_mat_vec_mult_f32+0xd8>

        *px++ = sum;
        i = i + numCols;
        row--;
    }
}
 8009820:	b007      	add	sp, #28
 8009822:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        float32_t sum4 = 0.0f;
 8009826:	eddf 7a2e 	vldr	s15, [pc, #184]	; 80098e0 <arm_mat_vec_mult_f32+0x120>
 800982a:	eb0e 0a05 	add.w	sl, lr, r5
 800982e:	eb0e 0207 	add.w	r2, lr, r7
        pInVec = pVec;
 8009832:	4689      	mov	r9, r1
        float32_t sum3 = 0.0f;
 8009834:	eef0 6a67 	vmov.f32	s13, s15
 8009838:	46d3      	mov	fp, sl
        float32_t sum2 = 0.0f;
 800983a:	eeb0 6a67 	vmov.f32	s12, s15
        float32_t sum1 = 0.0f;
 800983e:	eef0 5a67 	vmov.f32	s11, s15
 8009842:	e9cd 2202 	strd	r2, r2, [sp, #8]
        while (colCnt > 0u) {
 8009846:	9a05      	ldr	r2, [sp, #20]
 8009848:	4591      	cmp	r9, r2
 800984a:	d110      	bne.n	800986e <arm_mat_vec_mult_f32+0xae>
        *px++ = sum1;
 800984c:	9a03      	ldr	r2, [sp, #12]
        row--;
 800984e:	3e01      	subs	r6, #1
        *px++ = sum1;
 8009850:	ed40 5a04 	vstr	s11, [r0, #-16]
        *px++ = sum2;
 8009854:	eb0c 050a 	add.w	r5, ip, sl
 8009858:	4462      	add	r2, ip
 800985a:	ed00 6a03 	vstr	s12, [r0, #-12]
        *px++ = sum3;
 800985e:	ed40 6a02 	vstr	s13, [r0, #-8]
        row--;
 8009862:	b2b6      	uxth	r6, r6
        *px++ = sum4;
 8009864:	ed40 7a01 	vstr	s15, [r0, #-4]
        row--;
 8009868:	4617      	mov	r7, r2
 800986a:	3010      	adds	r0, #16
 800986c:	e7c1      	b.n	80097f2 <arm_mat_vec_mult_f32+0x32>
            vecData = *(pInVec)++;
 800986e:	ecb9 7a01 	vldmia	r9!, {s14}
            sum1 += matData * vecData;
 8009872:	ecb7 5a01 	vldmia	r7!, {s10}
            sum2 += matData * vecData;
 8009876:	9a02      	ldr	r2, [sp, #8]
            sum1 += matData * vecData;
 8009878:	eee7 5a05 	vfma.f32	s11, s14, s10
            sum2 += matData * vecData;
 800987c:	ecb2 5a01 	vldmia	r2!, {s10}
 8009880:	eea7 6a05 	vfma.f32	s12, s14, s10
            sum3 += matData * vecData;
 8009884:	ecb5 5a01 	vldmia	r5!, {s10}
            sum2 += matData * vecData;
 8009888:	9202      	str	r2, [sp, #8]
            sum3 += matData * vecData;
 800988a:	eee7 6a05 	vfma.f32	s13, s14, s10
            sum4 += matData * vecData;
 800988e:	ecbb 5a01 	vldmia	fp!, {s10}
 8009892:	eee7 7a05 	vfma.f32	s15, s14, s10
            colCnt--;
 8009896:	e7d6      	b.n	8009846 <arm_mat_vec_mult_f32+0x86>
        while (colCnt > 0) {
 8009898:	460e      	mov	r6, r1
 800989a:	4647      	mov	r7, r8
        colCnt = numCols >> 1;
 800989c:	4628      	mov	r0, r5
        float32_t sum = 0.0f;
 800989e:	eddf 7a10 	vldr	s15, [pc, #64]	; 80098e0 <arm_mat_vec_mult_f32+0x120>
        while (colCnt > 0) {
 80098a2:	3708      	adds	r7, #8
 80098a4:	3608      	adds	r6, #8
 80098a6:	b960      	cbnz	r0, 80098c2 <arm_mat_vec_mult_f32+0x102>
        while (colCnt > 0) {
 80098a8:	b13b      	cbz	r3, 80098ba <arm_mat_vec_mult_f32+0xfa>
            sum += *pInA1++ * *pInVec++;
 80098aa:	eb08 000c 	add.w	r0, r8, ip
 80098ae:	ed99 7a00 	vldr	s14, [r9]
 80098b2:	edd0 6a00 	vldr	s13, [r0]
 80098b6:	eee6 7a87 	vfma.f32	s15, s13, s14
        *px++ = sum;
 80098ba:	44f0      	add	r8, lr
 80098bc:	ece2 7a01 	vstmia	r2!, {s15}
        row--;
 80098c0:	e7ac      	b.n	800981c <arm_mat_vec_mult_f32+0x5c>
            sum += matData * vecData;
 80098c2:	ed56 6a02 	vldr	s13, [r6, #-8]
            colCnt--;
 80098c6:	3801      	subs	r0, #1
            sum += matData * vecData;
 80098c8:	ed17 7a02 	vldr	s14, [r7, #-8]
            colCnt--;
 80098cc:	b280      	uxth	r0, r0
            sum += matData * vecData;
 80098ce:	eee6 7a87 	vfma.f32	s15, s13, s14
            sum += matData2 * vecData2;
 80098d2:	ed56 6a01 	vldr	s13, [r6, #-4]
 80098d6:	ed17 7a01 	vldr	s14, [r7, #-4]
 80098da:	eee6 7a87 	vfma.f32	s15, s13, s14
            colCnt--;
 80098de:	e7e0      	b.n	80098a2 <arm_mat_vec_mult_f32+0xe2>
 80098e0:	00000000 	.word	0x00000000

080098e4 <__errno>:
 80098e4:	4b01      	ldr	r3, [pc, #4]	; (80098ec <__errno+0x8>)
 80098e6:	6818      	ldr	r0, [r3, #0]
 80098e8:	4770      	bx	lr
 80098ea:	bf00      	nop
 80098ec:	20000040 	.word	0x20000040

080098f0 <__libc_init_array>:
 80098f0:	b570      	push	{r4, r5, r6, lr}
 80098f2:	4d0d      	ldr	r5, [pc, #52]	; (8009928 <__libc_init_array+0x38>)
 80098f4:	4c0d      	ldr	r4, [pc, #52]	; (800992c <__libc_init_array+0x3c>)
 80098f6:	1b64      	subs	r4, r4, r5
 80098f8:	10a4      	asrs	r4, r4, #2
 80098fa:	2600      	movs	r6, #0
 80098fc:	42a6      	cmp	r6, r4
 80098fe:	d109      	bne.n	8009914 <__libc_init_array+0x24>
 8009900:	4d0b      	ldr	r5, [pc, #44]	; (8009930 <__libc_init_array+0x40>)
 8009902:	4c0c      	ldr	r4, [pc, #48]	; (8009934 <__libc_init_array+0x44>)
 8009904:	f001 f8a0 	bl	800aa48 <_init>
 8009908:	1b64      	subs	r4, r4, r5
 800990a:	10a4      	asrs	r4, r4, #2
 800990c:	2600      	movs	r6, #0
 800990e:	42a6      	cmp	r6, r4
 8009910:	d105      	bne.n	800991e <__libc_init_array+0x2e>
 8009912:	bd70      	pop	{r4, r5, r6, pc}
 8009914:	f855 3b04 	ldr.w	r3, [r5], #4
 8009918:	4798      	blx	r3
 800991a:	3601      	adds	r6, #1
 800991c:	e7ee      	b.n	80098fc <__libc_init_array+0xc>
 800991e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009922:	4798      	blx	r3
 8009924:	3601      	adds	r6, #1
 8009926:	e7f2      	b.n	800990e <__libc_init_array+0x1e>
 8009928:	0804f8a8 	.word	0x0804f8a8
 800992c:	0804f8a8 	.word	0x0804f8a8
 8009930:	0804f8a8 	.word	0x0804f8a8
 8009934:	0804f8ac 	.word	0x0804f8ac

08009938 <memcpy>:
 8009938:	440a      	add	r2, r1
 800993a:	4291      	cmp	r1, r2
 800993c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009940:	d100      	bne.n	8009944 <memcpy+0xc>
 8009942:	4770      	bx	lr
 8009944:	b510      	push	{r4, lr}
 8009946:	f811 4b01 	ldrb.w	r4, [r1], #1
 800994a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800994e:	4291      	cmp	r1, r2
 8009950:	d1f9      	bne.n	8009946 <memcpy+0xe>
 8009952:	bd10      	pop	{r4, pc}

08009954 <memset>:
 8009954:	4402      	add	r2, r0
 8009956:	4603      	mov	r3, r0
 8009958:	4293      	cmp	r3, r2
 800995a:	d100      	bne.n	800995e <memset+0xa>
 800995c:	4770      	bx	lr
 800995e:	f803 1b01 	strb.w	r1, [r3], #1
 8009962:	e7f9      	b.n	8009958 <memset+0x4>

08009964 <swapfunc>:
 8009964:	2b02      	cmp	r3, #2
 8009966:	b510      	push	{r4, lr}
 8009968:	d00a      	beq.n	8009980 <swapfunc+0x1c>
 800996a:	0892      	lsrs	r2, r2, #2
 800996c:	3a01      	subs	r2, #1
 800996e:	6803      	ldr	r3, [r0, #0]
 8009970:	680c      	ldr	r4, [r1, #0]
 8009972:	f840 4b04 	str.w	r4, [r0], #4
 8009976:	2a00      	cmp	r2, #0
 8009978:	f841 3b04 	str.w	r3, [r1], #4
 800997c:	dcf6      	bgt.n	800996c <swapfunc+0x8>
 800997e:	bd10      	pop	{r4, pc}
 8009980:	4402      	add	r2, r0
 8009982:	780c      	ldrb	r4, [r1, #0]
 8009984:	7803      	ldrb	r3, [r0, #0]
 8009986:	f800 4b01 	strb.w	r4, [r0], #1
 800998a:	f801 3b01 	strb.w	r3, [r1], #1
 800998e:	1a13      	subs	r3, r2, r0
 8009990:	2b00      	cmp	r3, #0
 8009992:	dcf6      	bgt.n	8009982 <swapfunc+0x1e>
 8009994:	e7f3      	b.n	800997e <swapfunc+0x1a>

08009996 <med3.isra.0>:
 8009996:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009998:	460f      	mov	r7, r1
 800999a:	4614      	mov	r4, r2
 800999c:	4606      	mov	r6, r0
 800999e:	461d      	mov	r5, r3
 80099a0:	4798      	blx	r3
 80099a2:	2800      	cmp	r0, #0
 80099a4:	4621      	mov	r1, r4
 80099a6:	4638      	mov	r0, r7
 80099a8:	da0c      	bge.n	80099c4 <med3.isra.0+0x2e>
 80099aa:	47a8      	blx	r5
 80099ac:	2800      	cmp	r0, #0
 80099ae:	da02      	bge.n	80099b6 <med3.isra.0+0x20>
 80099b0:	463c      	mov	r4, r7
 80099b2:	4620      	mov	r0, r4
 80099b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80099b6:	4621      	mov	r1, r4
 80099b8:	4630      	mov	r0, r6
 80099ba:	47a8      	blx	r5
 80099bc:	2800      	cmp	r0, #0
 80099be:	dbf8      	blt.n	80099b2 <med3.isra.0+0x1c>
 80099c0:	4634      	mov	r4, r6
 80099c2:	e7f6      	b.n	80099b2 <med3.isra.0+0x1c>
 80099c4:	47a8      	blx	r5
 80099c6:	2800      	cmp	r0, #0
 80099c8:	dcf2      	bgt.n	80099b0 <med3.isra.0+0x1a>
 80099ca:	4621      	mov	r1, r4
 80099cc:	4630      	mov	r0, r6
 80099ce:	47a8      	blx	r5
 80099d0:	2800      	cmp	r0, #0
 80099d2:	daee      	bge.n	80099b2 <med3.isra.0+0x1c>
 80099d4:	e7f4      	b.n	80099c0 <med3.isra.0+0x2a>

080099d6 <qsort>:
 80099d6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099da:	469a      	mov	sl, r3
 80099dc:	ea40 0302 	orr.w	r3, r0, r2
 80099e0:	079b      	lsls	r3, r3, #30
 80099e2:	b097      	sub	sp, #92	; 0x5c
 80099e4:	4606      	mov	r6, r0
 80099e6:	4614      	mov	r4, r2
 80099e8:	d11a      	bne.n	8009a20 <qsort+0x4a>
 80099ea:	f1b2 0804 	subs.w	r8, r2, #4
 80099ee:	bf18      	it	ne
 80099f0:	f04f 0801 	movne.w	r8, #1
 80099f4:	2300      	movs	r3, #0
 80099f6:	9302      	str	r3, [sp, #8]
 80099f8:	1933      	adds	r3, r6, r4
 80099fa:	fb04 f701 	mul.w	r7, r4, r1
 80099fe:	9301      	str	r3, [sp, #4]
 8009a00:	2906      	cmp	r1, #6
 8009a02:	eb06 0307 	add.w	r3, r6, r7
 8009a06:	9303      	str	r3, [sp, #12]
 8009a08:	d82a      	bhi.n	8009a60 <qsort+0x8a>
 8009a0a:	9b01      	ldr	r3, [sp, #4]
 8009a0c:	9a03      	ldr	r2, [sp, #12]
 8009a0e:	4293      	cmp	r3, r2
 8009a10:	d310      	bcc.n	8009a34 <qsort+0x5e>
 8009a12:	9b02      	ldr	r3, [sp, #8]
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	f040 811f 	bne.w	8009c58 <qsort+0x282>
 8009a1a:	b017      	add	sp, #92	; 0x5c
 8009a1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a20:	f04f 0802 	mov.w	r8, #2
 8009a24:	e7e6      	b.n	80099f4 <qsort+0x1e>
 8009a26:	4643      	mov	r3, r8
 8009a28:	4622      	mov	r2, r4
 8009a2a:	4639      	mov	r1, r7
 8009a2c:	4628      	mov	r0, r5
 8009a2e:	f7ff ff99 	bl	8009964 <swapfunc>
 8009a32:	e00e      	b.n	8009a52 <qsort+0x7c>
 8009a34:	9d01      	ldr	r5, [sp, #4]
 8009a36:	e00d      	b.n	8009a54 <qsort+0x7e>
 8009a38:	1b2f      	subs	r7, r5, r4
 8009a3a:	4629      	mov	r1, r5
 8009a3c:	4638      	mov	r0, r7
 8009a3e:	47d0      	blx	sl
 8009a40:	2800      	cmp	r0, #0
 8009a42:	dd09      	ble.n	8009a58 <qsort+0x82>
 8009a44:	f1b8 0f00 	cmp.w	r8, #0
 8009a48:	d1ed      	bne.n	8009a26 <qsort+0x50>
 8009a4a:	682b      	ldr	r3, [r5, #0]
 8009a4c:	683a      	ldr	r2, [r7, #0]
 8009a4e:	602a      	str	r2, [r5, #0]
 8009a50:	603b      	str	r3, [r7, #0]
 8009a52:	463d      	mov	r5, r7
 8009a54:	42ae      	cmp	r6, r5
 8009a56:	d3ef      	bcc.n	8009a38 <qsort+0x62>
 8009a58:	9b01      	ldr	r3, [sp, #4]
 8009a5a:	4423      	add	r3, r4
 8009a5c:	9301      	str	r3, [sp, #4]
 8009a5e:	e7d4      	b.n	8009a0a <qsort+0x34>
 8009a60:	ea4f 0951 	mov.w	r9, r1, lsr #1
 8009a64:	1b3f      	subs	r7, r7, r4
 8009a66:	2907      	cmp	r1, #7
 8009a68:	fb04 6909 	mla	r9, r4, r9, r6
 8009a6c:	4437      	add	r7, r6
 8009a6e:	d022      	beq.n	8009ab6 <qsort+0xe0>
 8009a70:	2928      	cmp	r1, #40	; 0x28
 8009a72:	d945      	bls.n	8009b00 <qsort+0x12a>
 8009a74:	08c9      	lsrs	r1, r1, #3
 8009a76:	fb04 f501 	mul.w	r5, r4, r1
 8009a7a:	4653      	mov	r3, sl
 8009a7c:	eb06 0245 	add.w	r2, r6, r5, lsl #1
 8009a80:	1971      	adds	r1, r6, r5
 8009a82:	4630      	mov	r0, r6
 8009a84:	f7ff ff87 	bl	8009996 <med3.isra.0>
 8009a88:	4649      	mov	r1, r9
 8009a8a:	eb09 0205 	add.w	r2, r9, r5
 8009a8e:	4653      	mov	r3, sl
 8009a90:	4683      	mov	fp, r0
 8009a92:	1b48      	subs	r0, r1, r5
 8009a94:	f7ff ff7f 	bl	8009996 <med3.isra.0>
 8009a98:	463a      	mov	r2, r7
 8009a9a:	4681      	mov	r9, r0
 8009a9c:	4653      	mov	r3, sl
 8009a9e:	1b79      	subs	r1, r7, r5
 8009aa0:	eba7 0045 	sub.w	r0, r7, r5, lsl #1
 8009aa4:	f7ff ff77 	bl	8009996 <med3.isra.0>
 8009aa8:	4602      	mov	r2, r0
 8009aaa:	4649      	mov	r1, r9
 8009aac:	4653      	mov	r3, sl
 8009aae:	4658      	mov	r0, fp
 8009ab0:	f7ff ff71 	bl	8009996 <med3.isra.0>
 8009ab4:	4681      	mov	r9, r0
 8009ab6:	f1b8 0f00 	cmp.w	r8, #0
 8009aba:	d124      	bne.n	8009b06 <qsort+0x130>
 8009abc:	6833      	ldr	r3, [r6, #0]
 8009abe:	f8d9 2000 	ldr.w	r2, [r9]
 8009ac2:	6032      	str	r2, [r6, #0]
 8009ac4:	f8c9 3000 	str.w	r3, [r9]
 8009ac8:	eb06 0b04 	add.w	fp, r6, r4
 8009acc:	46b9      	mov	r9, r7
 8009ace:	465d      	mov	r5, fp
 8009ad0:	2300      	movs	r3, #0
 8009ad2:	45bb      	cmp	fp, r7
 8009ad4:	d835      	bhi.n	8009b42 <qsort+0x16c>
 8009ad6:	4631      	mov	r1, r6
 8009ad8:	4658      	mov	r0, fp
 8009ada:	9304      	str	r3, [sp, #16]
 8009adc:	47d0      	blx	sl
 8009ade:	2800      	cmp	r0, #0
 8009ae0:	9b04      	ldr	r3, [sp, #16]
 8009ae2:	dc3e      	bgt.n	8009b62 <qsort+0x18c>
 8009ae4:	d10a      	bne.n	8009afc <qsort+0x126>
 8009ae6:	f1b8 0f00 	cmp.w	r8, #0
 8009aea:	d113      	bne.n	8009b14 <qsort+0x13e>
 8009aec:	682b      	ldr	r3, [r5, #0]
 8009aee:	f8db 2000 	ldr.w	r2, [fp]
 8009af2:	602a      	str	r2, [r5, #0]
 8009af4:	f8cb 3000 	str.w	r3, [fp]
 8009af8:	4425      	add	r5, r4
 8009afa:	2301      	movs	r3, #1
 8009afc:	44a3      	add	fp, r4
 8009afe:	e7e8      	b.n	8009ad2 <qsort+0xfc>
 8009b00:	463a      	mov	r2, r7
 8009b02:	46b3      	mov	fp, r6
 8009b04:	e7d1      	b.n	8009aaa <qsort+0xd4>
 8009b06:	4643      	mov	r3, r8
 8009b08:	4622      	mov	r2, r4
 8009b0a:	4649      	mov	r1, r9
 8009b0c:	4630      	mov	r0, r6
 8009b0e:	f7ff ff29 	bl	8009964 <swapfunc>
 8009b12:	e7d9      	b.n	8009ac8 <qsort+0xf2>
 8009b14:	4643      	mov	r3, r8
 8009b16:	4622      	mov	r2, r4
 8009b18:	4659      	mov	r1, fp
 8009b1a:	4628      	mov	r0, r5
 8009b1c:	f7ff ff22 	bl	8009964 <swapfunc>
 8009b20:	e7ea      	b.n	8009af8 <qsort+0x122>
 8009b22:	d10b      	bne.n	8009b3c <qsort+0x166>
 8009b24:	f1b8 0f00 	cmp.w	r8, #0
 8009b28:	d114      	bne.n	8009b54 <qsort+0x17e>
 8009b2a:	683b      	ldr	r3, [r7, #0]
 8009b2c:	f8d9 2000 	ldr.w	r2, [r9]
 8009b30:	603a      	str	r2, [r7, #0]
 8009b32:	f8c9 3000 	str.w	r3, [r9]
 8009b36:	eba9 0904 	sub.w	r9, r9, r4
 8009b3a:	2301      	movs	r3, #1
 8009b3c:	9f04      	ldr	r7, [sp, #16]
 8009b3e:	45bb      	cmp	fp, r7
 8009b40:	d90f      	bls.n	8009b62 <qsort+0x18c>
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d143      	bne.n	8009bce <qsort+0x1f8>
 8009b46:	9b01      	ldr	r3, [sp, #4]
 8009b48:	9a03      	ldr	r2, [sp, #12]
 8009b4a:	4293      	cmp	r3, r2
 8009b4c:	f4bf af61 	bcs.w	8009a12 <qsort+0x3c>
 8009b50:	9d01      	ldr	r5, [sp, #4]
 8009b52:	e036      	b.n	8009bc2 <qsort+0x1ec>
 8009b54:	4643      	mov	r3, r8
 8009b56:	4622      	mov	r2, r4
 8009b58:	4649      	mov	r1, r9
 8009b5a:	4638      	mov	r0, r7
 8009b5c:	f7ff ff02 	bl	8009964 <swapfunc>
 8009b60:	e7e9      	b.n	8009b36 <qsort+0x160>
 8009b62:	4631      	mov	r1, r6
 8009b64:	4638      	mov	r0, r7
 8009b66:	9305      	str	r3, [sp, #20]
 8009b68:	47d0      	blx	sl
 8009b6a:	1b3b      	subs	r3, r7, r4
 8009b6c:	2800      	cmp	r0, #0
 8009b6e:	9304      	str	r3, [sp, #16]
 8009b70:	9b05      	ldr	r3, [sp, #20]
 8009b72:	dad6      	bge.n	8009b22 <qsort+0x14c>
 8009b74:	f1b8 0f00 	cmp.w	r8, #0
 8009b78:	d006      	beq.n	8009b88 <qsort+0x1b2>
 8009b7a:	4643      	mov	r3, r8
 8009b7c:	4622      	mov	r2, r4
 8009b7e:	4639      	mov	r1, r7
 8009b80:	4658      	mov	r0, fp
 8009b82:	f7ff feef 	bl	8009964 <swapfunc>
 8009b86:	e005      	b.n	8009b94 <qsort+0x1be>
 8009b88:	f8db 3000 	ldr.w	r3, [fp]
 8009b8c:	683a      	ldr	r2, [r7, #0]
 8009b8e:	f8cb 2000 	str.w	r2, [fp]
 8009b92:	603b      	str	r3, [r7, #0]
 8009b94:	9f04      	ldr	r7, [sp, #16]
 8009b96:	e7b0      	b.n	8009afa <qsort+0x124>
 8009b98:	4643      	mov	r3, r8
 8009b9a:	4622      	mov	r2, r4
 8009b9c:	4639      	mov	r1, r7
 8009b9e:	4628      	mov	r0, r5
 8009ba0:	f7ff fee0 	bl	8009964 <swapfunc>
 8009ba4:	e00c      	b.n	8009bc0 <qsort+0x1ea>
 8009ba6:	1b2f      	subs	r7, r5, r4
 8009ba8:	4629      	mov	r1, r5
 8009baa:	4638      	mov	r0, r7
 8009bac:	47d0      	blx	sl
 8009bae:	2800      	cmp	r0, #0
 8009bb0:	dd09      	ble.n	8009bc6 <qsort+0x1f0>
 8009bb2:	f1b8 0f00 	cmp.w	r8, #0
 8009bb6:	d1ef      	bne.n	8009b98 <qsort+0x1c2>
 8009bb8:	682b      	ldr	r3, [r5, #0]
 8009bba:	683a      	ldr	r2, [r7, #0]
 8009bbc:	602a      	str	r2, [r5, #0]
 8009bbe:	603b      	str	r3, [r7, #0]
 8009bc0:	463d      	mov	r5, r7
 8009bc2:	42ae      	cmp	r6, r5
 8009bc4:	d3ef      	bcc.n	8009ba6 <qsort+0x1d0>
 8009bc6:	9b01      	ldr	r3, [sp, #4]
 8009bc8:	4423      	add	r3, r4
 8009bca:	9301      	str	r3, [sp, #4]
 8009bcc:	e7bb      	b.n	8009b46 <qsort+0x170>
 8009bce:	ebab 0305 	sub.w	r3, fp, r5
 8009bd2:	1baa      	subs	r2, r5, r6
 8009bd4:	429a      	cmp	r2, r3
 8009bd6:	bfa8      	it	ge
 8009bd8:	461a      	movge	r2, r3
 8009bda:	9301      	str	r3, [sp, #4]
 8009bdc:	b12a      	cbz	r2, 8009bea <qsort+0x214>
 8009bde:	4643      	mov	r3, r8
 8009be0:	ebab 0102 	sub.w	r1, fp, r2
 8009be4:	4630      	mov	r0, r6
 8009be6:	f7ff febd 	bl	8009964 <swapfunc>
 8009bea:	9b03      	ldr	r3, [sp, #12]
 8009bec:	eba3 0209 	sub.w	r2, r3, r9
 8009bf0:	eba9 0707 	sub.w	r7, r9, r7
 8009bf4:	1b12      	subs	r2, r2, r4
 8009bf6:	42ba      	cmp	r2, r7
 8009bf8:	bf28      	it	cs
 8009bfa:	463a      	movcs	r2, r7
 8009bfc:	b12a      	cbz	r2, 8009c0a <qsort+0x234>
 8009bfe:	9903      	ldr	r1, [sp, #12]
 8009c00:	4643      	mov	r3, r8
 8009c02:	1a89      	subs	r1, r1, r2
 8009c04:	4658      	mov	r0, fp
 8009c06:	f7ff fead 	bl	8009964 <swapfunc>
 8009c0a:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8009c0e:	9b03      	ldr	r3, [sp, #12]
 8009c10:	454f      	cmp	r7, r9
 8009c12:	eba3 0007 	sub.w	r0, r3, r7
 8009c16:	d904      	bls.n	8009c22 <qsort+0x24c>
 8009c18:	4633      	mov	r3, r6
 8009c1a:	46b9      	mov	r9, r7
 8009c1c:	9f01      	ldr	r7, [sp, #4]
 8009c1e:	4606      	mov	r6, r0
 8009c20:	4618      	mov	r0, r3
 8009c22:	42a7      	cmp	r7, r4
 8009c24:	d921      	bls.n	8009c6a <qsort+0x294>
 8009c26:	fbb7 f1f4 	udiv	r1, r7, r4
 8009c2a:	9b02      	ldr	r3, [sp, #8]
 8009c2c:	2b07      	cmp	r3, #7
 8009c2e:	d80d      	bhi.n	8009c4c <qsort+0x276>
 8009c30:	fbb9 f7f4 	udiv	r7, r9, r4
 8009c34:	aa16      	add	r2, sp, #88	; 0x58
 8009c36:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009c3a:	f843 6c40 	str.w	r6, [r3, #-64]
 8009c3e:	f843 7c3c 	str.w	r7, [r3, #-60]
 8009c42:	9b02      	ldr	r3, [sp, #8]
 8009c44:	3301      	adds	r3, #1
 8009c46:	9302      	str	r3, [sp, #8]
 8009c48:	4606      	mov	r6, r0
 8009c4a:	e6d5      	b.n	80099f8 <qsort+0x22>
 8009c4c:	4653      	mov	r3, sl
 8009c4e:	4622      	mov	r2, r4
 8009c50:	f7ff fec1 	bl	80099d6 <qsort>
 8009c54:	45a1      	cmp	r9, r4
 8009c56:	d80b      	bhi.n	8009c70 <qsort+0x29a>
 8009c58:	9b02      	ldr	r3, [sp, #8]
 8009c5a:	aa16      	add	r2, sp, #88	; 0x58
 8009c5c:	3b01      	subs	r3, #1
 8009c5e:	9302      	str	r3, [sp, #8]
 8009c60:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009c64:	e953 0110 	ldrd	r0, r1, [r3, #-64]	; 0x40
 8009c68:	e7ee      	b.n	8009c48 <qsort+0x272>
 8009c6a:	45a1      	cmp	r9, r4
 8009c6c:	f67f aed1 	bls.w	8009a12 <qsort+0x3c>
 8009c70:	fbb9 f1f4 	udiv	r1, r9, r4
 8009c74:	4630      	mov	r0, r6
 8009c76:	e7e7      	b.n	8009c48 <qsort+0x272>

08009c78 <cosf>:
 8009c78:	ee10 3a10 	vmov	r3, s0
 8009c7c:	b507      	push	{r0, r1, r2, lr}
 8009c7e:	4a1c      	ldr	r2, [pc, #112]	; (8009cf0 <cosf+0x78>)
 8009c80:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009c84:	4293      	cmp	r3, r2
 8009c86:	dc04      	bgt.n	8009c92 <cosf+0x1a>
 8009c88:	eddf 0a1a 	vldr	s1, [pc, #104]	; 8009cf4 <cosf+0x7c>
 8009c8c:	f000 fae8 	bl	800a260 <__kernel_cosf>
 8009c90:	e004      	b.n	8009c9c <cosf+0x24>
 8009c92:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8009c96:	db04      	blt.n	8009ca2 <cosf+0x2a>
 8009c98:	ee30 0a40 	vsub.f32	s0, s0, s0
 8009c9c:	b003      	add	sp, #12
 8009c9e:	f85d fb04 	ldr.w	pc, [sp], #4
 8009ca2:	4668      	mov	r0, sp
 8009ca4:	f000 f9a0 	bl	8009fe8 <__ieee754_rem_pio2f>
 8009ca8:	f000 0003 	and.w	r0, r0, #3
 8009cac:	2801      	cmp	r0, #1
 8009cae:	d007      	beq.n	8009cc0 <cosf+0x48>
 8009cb0:	2802      	cmp	r0, #2
 8009cb2:	d00e      	beq.n	8009cd2 <cosf+0x5a>
 8009cb4:	b9a0      	cbnz	r0, 8009ce0 <cosf+0x68>
 8009cb6:	eddd 0a01 	vldr	s1, [sp, #4]
 8009cba:	ed9d 0a00 	vldr	s0, [sp]
 8009cbe:	e7e5      	b.n	8009c8c <cosf+0x14>
 8009cc0:	eddd 0a01 	vldr	s1, [sp, #4]
 8009cc4:	ed9d 0a00 	vldr	s0, [sp]
 8009cc8:	f000 fdb4 	bl	800a834 <__kernel_sinf>
 8009ccc:	eeb1 0a40 	vneg.f32	s0, s0
 8009cd0:	e7e4      	b.n	8009c9c <cosf+0x24>
 8009cd2:	eddd 0a01 	vldr	s1, [sp, #4]
 8009cd6:	ed9d 0a00 	vldr	s0, [sp]
 8009cda:	f000 fac1 	bl	800a260 <__kernel_cosf>
 8009cde:	e7f5      	b.n	8009ccc <cosf+0x54>
 8009ce0:	eddd 0a01 	vldr	s1, [sp, #4]
 8009ce4:	ed9d 0a00 	vldr	s0, [sp]
 8009ce8:	2001      	movs	r0, #1
 8009cea:	f000 fda3 	bl	800a834 <__kernel_sinf>
 8009cee:	e7d5      	b.n	8009c9c <cosf+0x24>
 8009cf0:	3f490fd8 	.word	0x3f490fd8
 8009cf4:	00000000 	.word	0x00000000

08009cf8 <fmaxf>:
 8009cf8:	b508      	push	{r3, lr}
 8009cfa:	ed2d 8b02 	vpush	{d8}
 8009cfe:	eeb0 8a40 	vmov.f32	s16, s0
 8009d02:	eef0 8a60 	vmov.f32	s17, s1
 8009d06:	f000 f82d 	bl	8009d64 <__fpclassifyf>
 8009d0a:	b148      	cbz	r0, 8009d20 <fmaxf+0x28>
 8009d0c:	eeb0 0a68 	vmov.f32	s0, s17
 8009d10:	f000 f828 	bl	8009d64 <__fpclassifyf>
 8009d14:	b130      	cbz	r0, 8009d24 <fmaxf+0x2c>
 8009d16:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8009d1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d1e:	dc01      	bgt.n	8009d24 <fmaxf+0x2c>
 8009d20:	eeb0 8a68 	vmov.f32	s16, s17
 8009d24:	eeb0 0a48 	vmov.f32	s0, s16
 8009d28:	ecbd 8b02 	vpop	{d8}
 8009d2c:	bd08      	pop	{r3, pc}

08009d2e <fminf>:
 8009d2e:	b508      	push	{r3, lr}
 8009d30:	ed2d 8b02 	vpush	{d8}
 8009d34:	eeb0 8a40 	vmov.f32	s16, s0
 8009d38:	eef0 8a60 	vmov.f32	s17, s1
 8009d3c:	f000 f812 	bl	8009d64 <__fpclassifyf>
 8009d40:	b148      	cbz	r0, 8009d56 <fminf+0x28>
 8009d42:	eeb0 0a68 	vmov.f32	s0, s17
 8009d46:	f000 f80d 	bl	8009d64 <__fpclassifyf>
 8009d4a:	b130      	cbz	r0, 8009d5a <fminf+0x2c>
 8009d4c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8009d50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d54:	d401      	bmi.n	8009d5a <fminf+0x2c>
 8009d56:	eeb0 8a68 	vmov.f32	s16, s17
 8009d5a:	eeb0 0a48 	vmov.f32	s0, s16
 8009d5e:	ecbd 8b02 	vpop	{d8}
 8009d62:	bd08      	pop	{r3, pc}

08009d64 <__fpclassifyf>:
 8009d64:	ee10 3a10 	vmov	r3, s0
 8009d68:	f033 4000 	bics.w	r0, r3, #2147483648	; 0x80000000
 8009d6c:	d00d      	beq.n	8009d8a <__fpclassifyf+0x26>
 8009d6e:	f5a0 0300 	sub.w	r3, r0, #8388608	; 0x800000
 8009d72:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8009d76:	d30a      	bcc.n	8009d8e <__fpclassifyf+0x2a>
 8009d78:	4b07      	ldr	r3, [pc, #28]	; (8009d98 <__fpclassifyf+0x34>)
 8009d7a:	1e42      	subs	r2, r0, #1
 8009d7c:	429a      	cmp	r2, r3
 8009d7e:	d908      	bls.n	8009d92 <__fpclassifyf+0x2e>
 8009d80:	f1a0 43ff 	sub.w	r3, r0, #2139095040	; 0x7f800000
 8009d84:	4258      	negs	r0, r3
 8009d86:	4158      	adcs	r0, r3
 8009d88:	4770      	bx	lr
 8009d8a:	2002      	movs	r0, #2
 8009d8c:	4770      	bx	lr
 8009d8e:	2004      	movs	r0, #4
 8009d90:	4770      	bx	lr
 8009d92:	2003      	movs	r0, #3
 8009d94:	4770      	bx	lr
 8009d96:	bf00      	nop
 8009d98:	007ffffe 	.word	0x007ffffe

08009d9c <logf>:
 8009d9c:	b508      	push	{r3, lr}
 8009d9e:	ed2d 8b02 	vpush	{d8}
 8009da2:	eeb0 8a40 	vmov.f32	s16, s0
 8009da6:	f000 f82f 	bl	8009e08 <__ieee754_logf>
 8009daa:	4b14      	ldr	r3, [pc, #80]	; (8009dfc <logf+0x60>)
 8009dac:	f993 3000 	ldrsb.w	r3, [r3]
 8009db0:	3301      	adds	r3, #1
 8009db2:	d014      	beq.n	8009dde <logf+0x42>
 8009db4:	eeb4 8a48 	vcmp.f32	s16, s16
 8009db8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009dbc:	d60f      	bvs.n	8009dde <logf+0x42>
 8009dbe:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8009dc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009dc6:	dc0a      	bgt.n	8009dde <logf+0x42>
 8009dc8:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8009dcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009dd0:	d108      	bne.n	8009de4 <logf+0x48>
 8009dd2:	f7ff fd87 	bl	80098e4 <__errno>
 8009dd6:	2322      	movs	r3, #34	; 0x22
 8009dd8:	ed9f 0a09 	vldr	s0, [pc, #36]	; 8009e00 <logf+0x64>
 8009ddc:	6003      	str	r3, [r0, #0]
 8009dde:	ecbd 8b02 	vpop	{d8}
 8009de2:	bd08      	pop	{r3, pc}
 8009de4:	f7ff fd7e 	bl	80098e4 <__errno>
 8009de8:	ecbd 8b02 	vpop	{d8}
 8009dec:	2321      	movs	r3, #33	; 0x21
 8009dee:	6003      	str	r3, [r0, #0]
 8009df0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8009df4:	4803      	ldr	r0, [pc, #12]	; (8009e04 <logf+0x68>)
 8009df6:	f000 bdaf 	b.w	800a958 <nanf>
 8009dfa:	bf00      	nop
 8009dfc:	200000a4 	.word	0x200000a4
 8009e00:	ff800000 	.word	0xff800000
 8009e04:	0804f4cc 	.word	0x0804f4cc

08009e08 <__ieee754_logf>:
 8009e08:	ee10 3a10 	vmov	r3, s0
 8009e0c:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8009e10:	d106      	bne.n	8009e20 <__ieee754_logf+0x18>
 8009e12:	ed9f 7a65 	vldr	s14, [pc, #404]	; 8009fa8 <__ieee754_logf+0x1a0>
 8009e16:	eddf 7a65 	vldr	s15, [pc, #404]	; 8009fac <__ieee754_logf+0x1a4>
 8009e1a:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8009e1e:	4770      	bx	lr
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	da02      	bge.n	8009e2a <__ieee754_logf+0x22>
 8009e24:	ee30 7a40 	vsub.f32	s14, s0, s0
 8009e28:	e7f5      	b.n	8009e16 <__ieee754_logf+0xe>
 8009e2a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8009e2e:	db02      	blt.n	8009e36 <__ieee754_logf+0x2e>
 8009e30:	ee30 0a00 	vadd.f32	s0, s0, s0
 8009e34:	4770      	bx	lr
 8009e36:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009e3a:	bfb8      	it	lt
 8009e3c:	eddf 7a5c 	vldrlt	s15, [pc, #368]	; 8009fb0 <__ieee754_logf+0x1a8>
 8009e40:	485c      	ldr	r0, [pc, #368]	; (8009fb4 <__ieee754_logf+0x1ac>)
 8009e42:	bfbe      	ittt	lt
 8009e44:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8009e48:	f06f 0118 	mvnlt.w	r1, #24
 8009e4c:	ee17 3a90 	vmovlt	r3, s15
 8009e50:	ea4f 52e3 	mov.w	r2, r3, asr #23
 8009e54:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8009e58:	4418      	add	r0, r3
 8009e5a:	bfa8      	it	ge
 8009e5c:	2100      	movge	r1, #0
 8009e5e:	3a7f      	subs	r2, #127	; 0x7f
 8009e60:	440a      	add	r2, r1
 8009e62:	f400 0100 	and.w	r1, r0, #8388608	; 0x800000
 8009e66:	f081 517e 	eor.w	r1, r1, #1065353216	; 0x3f800000
 8009e6a:	4319      	orrs	r1, r3
 8009e6c:	ee00 1a10 	vmov	s0, r1
 8009e70:	4951      	ldr	r1, [pc, #324]	; (8009fb8 <__ieee754_logf+0x1b0>)
 8009e72:	eb02 52d0 	add.w	r2, r2, r0, lsr #23
 8009e76:	f103 000f 	add.w	r0, r3, #15
 8009e7a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8009e7e:	4001      	ands	r1, r0
 8009e80:	ee30 0a67 	vsub.f32	s0, s0, s15
 8009e84:	bb89      	cbnz	r1, 8009eea <__ieee754_logf+0xe2>
 8009e86:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8009e8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e8e:	d10f      	bne.n	8009eb0 <__ieee754_logf+0xa8>
 8009e90:	2a00      	cmp	r2, #0
 8009e92:	f000 8085 	beq.w	8009fa0 <__ieee754_logf+0x198>
 8009e96:	ee07 2a90 	vmov	s15, r2
 8009e9a:	ed9f 0a48 	vldr	s0, [pc, #288]	; 8009fbc <__ieee754_logf+0x1b4>
 8009e9e:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8009fc0 <__ieee754_logf+0x1b8>
 8009ea2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009ea6:	ee27 0a80 	vmul.f32	s0, s15, s0
 8009eaa:	eea7 0a87 	vfma.f32	s0, s15, s14
 8009eae:	4770      	bx	lr
 8009eb0:	eddf 6a44 	vldr	s13, [pc, #272]	; 8009fc4 <__ieee754_logf+0x1bc>
 8009eb4:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8009eb8:	eee0 7a66 	vfms.f32	s15, s0, s13
 8009ebc:	ee20 7a00 	vmul.f32	s14, s0, s0
 8009ec0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009ec4:	b912      	cbnz	r2, 8009ecc <__ieee754_logf+0xc4>
 8009ec6:	ee30 0a47 	vsub.f32	s0, s0, s14
 8009eca:	4770      	bx	lr
 8009ecc:	ee07 2a90 	vmov	s15, r2
 8009ed0:	eddf 6a3a 	vldr	s13, [pc, #232]	; 8009fbc <__ieee754_logf+0x1b4>
 8009ed4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009ed8:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8009edc:	ee37 0a40 	vsub.f32	s0, s14, s0
 8009ee0:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8009fc0 <__ieee754_logf+0x1b8>
 8009ee4:	ee97 0a87 	vfnms.f32	s0, s15, s14
 8009ee8:	4770      	bx	lr
 8009eea:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8009eee:	ee70 7a27 	vadd.f32	s15, s0, s15
 8009ef2:	eddf 5a35 	vldr	s11, [pc, #212]	; 8009fc8 <__ieee754_logf+0x1c0>
 8009ef6:	eddf 4a35 	vldr	s9, [pc, #212]	; 8009fcc <__ieee754_logf+0x1c4>
 8009efa:	4935      	ldr	r1, [pc, #212]	; (8009fd0 <__ieee754_logf+0x1c8>)
 8009efc:	ee80 6a27 	vdiv.f32	s12, s0, s15
 8009f00:	4419      	add	r1, r3
 8009f02:	f5c3 1357 	rsb	r3, r3, #3522560	; 0x35c000
 8009f06:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8009f0a:	430b      	orrs	r3, r1
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	ee07 2a90 	vmov	s15, r2
 8009f12:	ee26 5a06 	vmul.f32	s10, s12, s12
 8009f16:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8009f1a:	ee25 7a05 	vmul.f32	s14, s10, s10
 8009f1e:	eddf 7a2d 	vldr	s15, [pc, #180]	; 8009fd4 <__ieee754_logf+0x1cc>
 8009f22:	eee7 7a25 	vfma.f32	s15, s14, s11
 8009f26:	eddf 5a2c 	vldr	s11, [pc, #176]	; 8009fd8 <__ieee754_logf+0x1d0>
 8009f2a:	eee7 5a87 	vfma.f32	s11, s15, s14
 8009f2e:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8009fdc <__ieee754_logf+0x1d4>
 8009f32:	eee7 7a24 	vfma.f32	s15, s14, s9
 8009f36:	eddf 4a2a 	vldr	s9, [pc, #168]	; 8009fe0 <__ieee754_logf+0x1d8>
 8009f3a:	eee7 4a87 	vfma.f32	s9, s15, s14
 8009f3e:	eddf 7a29 	vldr	s15, [pc, #164]	; 8009fe4 <__ieee754_logf+0x1dc>
 8009f42:	eee4 7a87 	vfma.f32	s15, s9, s14
 8009f46:	ee67 7a85 	vmul.f32	s15, s15, s10
 8009f4a:	eee5 7a87 	vfma.f32	s15, s11, s14
 8009f4e:	dd1c      	ble.n	8009f8a <__ieee754_logf+0x182>
 8009f50:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8009f54:	ee20 7a07 	vmul.f32	s14, s0, s14
 8009f58:	ee27 7a00 	vmul.f32	s14, s14, s0
 8009f5c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009f60:	ee67 7a86 	vmul.f32	s15, s15, s12
 8009f64:	b922      	cbnz	r2, 8009f70 <__ieee754_logf+0x168>
 8009f66:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009f6a:	ee30 0a67 	vsub.f32	s0, s0, s15
 8009f6e:	4770      	bx	lr
 8009f70:	ed9f 6a12 	vldr	s12, [pc, #72]	; 8009fbc <__ieee754_logf+0x1b4>
 8009f74:	eee6 7a86 	vfma.f32	s15, s13, s12
 8009f78:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009f7c:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8009f80:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8009fc0 <__ieee754_logf+0x1b8>
 8009f84:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 8009f88:	4770      	bx	lr
 8009f8a:	ee70 7a67 	vsub.f32	s15, s0, s15
 8009f8e:	ee67 7a86 	vmul.f32	s15, s15, s12
 8009f92:	2a00      	cmp	r2, #0
 8009f94:	d0e9      	beq.n	8009f6a <__ieee754_logf+0x162>
 8009f96:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8009fbc <__ieee754_logf+0x1b4>
 8009f9a:	eee6 7ac7 	vfms.f32	s15, s13, s14
 8009f9e:	e7ed      	b.n	8009f7c <__ieee754_logf+0x174>
 8009fa0:	ed9f 0a02 	vldr	s0, [pc, #8]	; 8009fac <__ieee754_logf+0x1a4>
 8009fa4:	4770      	bx	lr
 8009fa6:	bf00      	nop
 8009fa8:	cc000000 	.word	0xcc000000
 8009fac:	00000000 	.word	0x00000000
 8009fb0:	4c000000 	.word	0x4c000000
 8009fb4:	004afb20 	.word	0x004afb20
 8009fb8:	007ffff0 	.word	0x007ffff0
 8009fbc:	3717f7d1 	.word	0x3717f7d1
 8009fc0:	3f317180 	.word	0x3f317180
 8009fc4:	3eaaaaab 	.word	0x3eaaaaab
 8009fc8:	3e1cd04f 	.word	0x3e1cd04f
 8009fcc:	3e178897 	.word	0x3e178897
 8009fd0:	ffcf5c30 	.word	0xffcf5c30
 8009fd4:	3e638e29 	.word	0x3e638e29
 8009fd8:	3ecccccd 	.word	0x3ecccccd
 8009fdc:	3e3a3325 	.word	0x3e3a3325
 8009fe0:	3e924925 	.word	0x3e924925
 8009fe4:	3f2aaaab 	.word	0x3f2aaaab

08009fe8 <__ieee754_rem_pio2f>:
 8009fe8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009fea:	ee10 6a10 	vmov	r6, s0
 8009fee:	4b8e      	ldr	r3, [pc, #568]	; (800a228 <__ieee754_rem_pio2f+0x240>)
 8009ff0:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8009ff4:	429d      	cmp	r5, r3
 8009ff6:	b087      	sub	sp, #28
 8009ff8:	eef0 7a40 	vmov.f32	s15, s0
 8009ffc:	4604      	mov	r4, r0
 8009ffe:	dc05      	bgt.n	800a00c <__ieee754_rem_pio2f+0x24>
 800a000:	2300      	movs	r3, #0
 800a002:	ed80 0a00 	vstr	s0, [r0]
 800a006:	6043      	str	r3, [r0, #4]
 800a008:	2000      	movs	r0, #0
 800a00a:	e01a      	b.n	800a042 <__ieee754_rem_pio2f+0x5a>
 800a00c:	4b87      	ldr	r3, [pc, #540]	; (800a22c <__ieee754_rem_pio2f+0x244>)
 800a00e:	429d      	cmp	r5, r3
 800a010:	dc46      	bgt.n	800a0a0 <__ieee754_rem_pio2f+0xb8>
 800a012:	2e00      	cmp	r6, #0
 800a014:	ed9f 0a86 	vldr	s0, [pc, #536]	; 800a230 <__ieee754_rem_pio2f+0x248>
 800a018:	4b86      	ldr	r3, [pc, #536]	; (800a234 <__ieee754_rem_pio2f+0x24c>)
 800a01a:	f025 050f 	bic.w	r5, r5, #15
 800a01e:	dd1f      	ble.n	800a060 <__ieee754_rem_pio2f+0x78>
 800a020:	429d      	cmp	r5, r3
 800a022:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800a026:	d00e      	beq.n	800a046 <__ieee754_rem_pio2f+0x5e>
 800a028:	ed9f 7a83 	vldr	s14, [pc, #524]	; 800a238 <__ieee754_rem_pio2f+0x250>
 800a02c:	ee37 0ac7 	vsub.f32	s0, s15, s14
 800a030:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800a034:	ed80 0a00 	vstr	s0, [r0]
 800a038:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a03c:	2001      	movs	r0, #1
 800a03e:	edc4 7a01 	vstr	s15, [r4, #4]
 800a042:	b007      	add	sp, #28
 800a044:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a046:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 800a23c <__ieee754_rem_pio2f+0x254>
 800a04a:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 800a240 <__ieee754_rem_pio2f+0x258>
 800a04e:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800a052:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800a056:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800a05a:	edc0 6a00 	vstr	s13, [r0]
 800a05e:	e7eb      	b.n	800a038 <__ieee754_rem_pio2f+0x50>
 800a060:	429d      	cmp	r5, r3
 800a062:	ee77 7a80 	vadd.f32	s15, s15, s0
 800a066:	d00e      	beq.n	800a086 <__ieee754_rem_pio2f+0x9e>
 800a068:	ed9f 7a73 	vldr	s14, [pc, #460]	; 800a238 <__ieee754_rem_pio2f+0x250>
 800a06c:	ee37 0a87 	vadd.f32	s0, s15, s14
 800a070:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800a074:	ed80 0a00 	vstr	s0, [r0]
 800a078:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a07c:	f04f 30ff 	mov.w	r0, #4294967295
 800a080:	edc4 7a01 	vstr	s15, [r4, #4]
 800a084:	e7dd      	b.n	800a042 <__ieee754_rem_pio2f+0x5a>
 800a086:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 800a23c <__ieee754_rem_pio2f+0x254>
 800a08a:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 800a240 <__ieee754_rem_pio2f+0x258>
 800a08e:	ee77 7a80 	vadd.f32	s15, s15, s0
 800a092:	ee77 6a87 	vadd.f32	s13, s15, s14
 800a096:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800a09a:	edc0 6a00 	vstr	s13, [r0]
 800a09e:	e7eb      	b.n	800a078 <__ieee754_rem_pio2f+0x90>
 800a0a0:	4b68      	ldr	r3, [pc, #416]	; (800a244 <__ieee754_rem_pio2f+0x25c>)
 800a0a2:	429d      	cmp	r5, r3
 800a0a4:	dc72      	bgt.n	800a18c <__ieee754_rem_pio2f+0x1a4>
 800a0a6:	f000 fc0d 	bl	800a8c4 <fabsf>
 800a0aa:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800a248 <__ieee754_rem_pio2f+0x260>
 800a0ae:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800a0b2:	eee0 7a07 	vfma.f32	s15, s0, s14
 800a0b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a0ba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a0be:	ee17 0a90 	vmov	r0, s15
 800a0c2:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800a230 <__ieee754_rem_pio2f+0x248>
 800a0c6:	eea7 0a67 	vfms.f32	s0, s14, s15
 800a0ca:	281f      	cmp	r0, #31
 800a0cc:	eddf 7a5a 	vldr	s15, [pc, #360]	; 800a238 <__ieee754_rem_pio2f+0x250>
 800a0d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a0d4:	eeb1 6a47 	vneg.f32	s12, s14
 800a0d8:	ee70 6a67 	vsub.f32	s13, s0, s15
 800a0dc:	ee16 2a90 	vmov	r2, s13
 800a0e0:	dc1c      	bgt.n	800a11c <__ieee754_rem_pio2f+0x134>
 800a0e2:	495a      	ldr	r1, [pc, #360]	; (800a24c <__ieee754_rem_pio2f+0x264>)
 800a0e4:	1e47      	subs	r7, r0, #1
 800a0e6:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 800a0ea:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 800a0ee:	428b      	cmp	r3, r1
 800a0f0:	d014      	beq.n	800a11c <__ieee754_rem_pio2f+0x134>
 800a0f2:	6022      	str	r2, [r4, #0]
 800a0f4:	ed94 7a00 	vldr	s14, [r4]
 800a0f8:	ee30 0a47 	vsub.f32	s0, s0, s14
 800a0fc:	2e00      	cmp	r6, #0
 800a0fe:	ee30 0a67 	vsub.f32	s0, s0, s15
 800a102:	ed84 0a01 	vstr	s0, [r4, #4]
 800a106:	da9c      	bge.n	800a042 <__ieee754_rem_pio2f+0x5a>
 800a108:	eeb1 7a47 	vneg.f32	s14, s14
 800a10c:	eeb1 0a40 	vneg.f32	s0, s0
 800a110:	ed84 7a00 	vstr	s14, [r4]
 800a114:	ed84 0a01 	vstr	s0, [r4, #4]
 800a118:	4240      	negs	r0, r0
 800a11a:	e792      	b.n	800a042 <__ieee754_rem_pio2f+0x5a>
 800a11c:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800a120:	15eb      	asrs	r3, r5, #23
 800a122:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 800a126:	2d08      	cmp	r5, #8
 800a128:	dde3      	ble.n	800a0f2 <__ieee754_rem_pio2f+0x10a>
 800a12a:	eddf 7a44 	vldr	s15, [pc, #272]	; 800a23c <__ieee754_rem_pio2f+0x254>
 800a12e:	eef0 6a40 	vmov.f32	s13, s0
 800a132:	eee6 6a27 	vfma.f32	s13, s12, s15
 800a136:	ee30 0a66 	vsub.f32	s0, s0, s13
 800a13a:	eea6 0a27 	vfma.f32	s0, s12, s15
 800a13e:	eddf 7a40 	vldr	s15, [pc, #256]	; 800a240 <__ieee754_rem_pio2f+0x258>
 800a142:	ee97 0a27 	vfnms.f32	s0, s14, s15
 800a146:	ee76 5ac0 	vsub.f32	s11, s13, s0
 800a14a:	eef0 7a40 	vmov.f32	s15, s0
 800a14e:	ee15 2a90 	vmov	r2, s11
 800a152:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800a156:	1a5b      	subs	r3, r3, r1
 800a158:	2b19      	cmp	r3, #25
 800a15a:	dc04      	bgt.n	800a166 <__ieee754_rem_pio2f+0x17e>
 800a15c:	edc4 5a00 	vstr	s11, [r4]
 800a160:	eeb0 0a66 	vmov.f32	s0, s13
 800a164:	e7c6      	b.n	800a0f4 <__ieee754_rem_pio2f+0x10c>
 800a166:	eddf 5a3a 	vldr	s11, [pc, #232]	; 800a250 <__ieee754_rem_pio2f+0x268>
 800a16a:	eeb0 0a66 	vmov.f32	s0, s13
 800a16e:	eea6 0a25 	vfma.f32	s0, s12, s11
 800a172:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800a176:	eddf 6a37 	vldr	s13, [pc, #220]	; 800a254 <__ieee754_rem_pio2f+0x26c>
 800a17a:	eee6 7a25 	vfma.f32	s15, s12, s11
 800a17e:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800a182:	ee30 7a67 	vsub.f32	s14, s0, s15
 800a186:	ed84 7a00 	vstr	s14, [r4]
 800a18a:	e7b3      	b.n	800a0f4 <__ieee754_rem_pio2f+0x10c>
 800a18c:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800a190:	db06      	blt.n	800a1a0 <__ieee754_rem_pio2f+0x1b8>
 800a192:	ee70 7a40 	vsub.f32	s15, s0, s0
 800a196:	edc0 7a01 	vstr	s15, [r0, #4]
 800a19a:	edc0 7a00 	vstr	s15, [r0]
 800a19e:	e733      	b.n	800a008 <__ieee754_rem_pio2f+0x20>
 800a1a0:	15ea      	asrs	r2, r5, #23
 800a1a2:	3a86      	subs	r2, #134	; 0x86
 800a1a4:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800a1a8:	ee07 3a90 	vmov	s15, r3
 800a1ac:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800a1b0:	eddf 6a29 	vldr	s13, [pc, #164]	; 800a258 <__ieee754_rem_pio2f+0x270>
 800a1b4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800a1b8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a1bc:	ed8d 7a03 	vstr	s14, [sp, #12]
 800a1c0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800a1c4:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800a1c8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800a1cc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a1d0:	ed8d 7a04 	vstr	s14, [sp, #16]
 800a1d4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800a1d8:	eef5 7a40 	vcmp.f32	s15, #0.0
 800a1dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a1e0:	edcd 7a05 	vstr	s15, [sp, #20]
 800a1e4:	d11e      	bne.n	800a224 <__ieee754_rem_pio2f+0x23c>
 800a1e6:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800a1ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a1ee:	bf14      	ite	ne
 800a1f0:	2302      	movne	r3, #2
 800a1f2:	2301      	moveq	r3, #1
 800a1f4:	4919      	ldr	r1, [pc, #100]	; (800a25c <__ieee754_rem_pio2f+0x274>)
 800a1f6:	9101      	str	r1, [sp, #4]
 800a1f8:	2102      	movs	r1, #2
 800a1fa:	9100      	str	r1, [sp, #0]
 800a1fc:	a803      	add	r0, sp, #12
 800a1fe:	4621      	mov	r1, r4
 800a200:	f000 f88e 	bl	800a320 <__kernel_rem_pio2f>
 800a204:	2e00      	cmp	r6, #0
 800a206:	f6bf af1c 	bge.w	800a042 <__ieee754_rem_pio2f+0x5a>
 800a20a:	edd4 7a00 	vldr	s15, [r4]
 800a20e:	eef1 7a67 	vneg.f32	s15, s15
 800a212:	edc4 7a00 	vstr	s15, [r4]
 800a216:	edd4 7a01 	vldr	s15, [r4, #4]
 800a21a:	eef1 7a67 	vneg.f32	s15, s15
 800a21e:	edc4 7a01 	vstr	s15, [r4, #4]
 800a222:	e779      	b.n	800a118 <__ieee754_rem_pio2f+0x130>
 800a224:	2303      	movs	r3, #3
 800a226:	e7e5      	b.n	800a1f4 <__ieee754_rem_pio2f+0x20c>
 800a228:	3f490fd8 	.word	0x3f490fd8
 800a22c:	4016cbe3 	.word	0x4016cbe3
 800a230:	3fc90f80 	.word	0x3fc90f80
 800a234:	3fc90fd0 	.word	0x3fc90fd0
 800a238:	37354443 	.word	0x37354443
 800a23c:	37354400 	.word	0x37354400
 800a240:	2e85a308 	.word	0x2e85a308
 800a244:	43490f80 	.word	0x43490f80
 800a248:	3f22f984 	.word	0x3f22f984
 800a24c:	0804f4d0 	.word	0x0804f4d0
 800a250:	2e85a300 	.word	0x2e85a300
 800a254:	248d3132 	.word	0x248d3132
 800a258:	43800000 	.word	0x43800000
 800a25c:	0804f550 	.word	0x0804f550

0800a260 <__kernel_cosf>:
 800a260:	ee10 3a10 	vmov	r3, s0
 800a264:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a268:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800a26c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800a270:	da05      	bge.n	800a27e <__kernel_cosf+0x1e>
 800a272:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800a276:	ee17 2a90 	vmov	r2, s15
 800a27a:	2a00      	cmp	r2, #0
 800a27c:	d03d      	beq.n	800a2fa <__kernel_cosf+0x9a>
 800a27e:	ee60 5a00 	vmul.f32	s11, s0, s0
 800a282:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800a300 <__kernel_cosf+0xa0>
 800a286:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800a304 <__kernel_cosf+0xa4>
 800a28a:	eddf 6a1f 	vldr	s13, [pc, #124]	; 800a308 <__kernel_cosf+0xa8>
 800a28e:	4a1f      	ldr	r2, [pc, #124]	; (800a30c <__kernel_cosf+0xac>)
 800a290:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800a294:	4293      	cmp	r3, r2
 800a296:	eddf 7a1e 	vldr	s15, [pc, #120]	; 800a310 <__kernel_cosf+0xb0>
 800a29a:	eee7 7a25 	vfma.f32	s15, s14, s11
 800a29e:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800a314 <__kernel_cosf+0xb4>
 800a2a2:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800a2a6:	eddf 7a1c 	vldr	s15, [pc, #112]	; 800a318 <__kernel_cosf+0xb8>
 800a2aa:	eee7 7a25 	vfma.f32	s15, s14, s11
 800a2ae:	eeb0 7a66 	vmov.f32	s14, s13
 800a2b2:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800a2b6:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800a2ba:	ee65 7aa6 	vmul.f32	s15, s11, s13
 800a2be:	ee67 6a25 	vmul.f32	s13, s14, s11
 800a2c2:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 800a2c6:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800a2ca:	dc04      	bgt.n	800a2d6 <__kernel_cosf+0x76>
 800a2cc:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800a2d0:	ee36 0a47 	vsub.f32	s0, s12, s14
 800a2d4:	4770      	bx	lr
 800a2d6:	4a11      	ldr	r2, [pc, #68]	; (800a31c <__kernel_cosf+0xbc>)
 800a2d8:	4293      	cmp	r3, r2
 800a2da:	bfda      	itte	le
 800a2dc:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 800a2e0:	ee06 3a90 	vmovle	s13, r3
 800a2e4:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 800a2e8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800a2ec:	ee36 0a66 	vsub.f32	s0, s12, s13
 800a2f0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a2f4:	ee30 0a67 	vsub.f32	s0, s0, s15
 800a2f8:	4770      	bx	lr
 800a2fa:	eeb0 0a46 	vmov.f32	s0, s12
 800a2fe:	4770      	bx	lr
 800a300:	ad47d74e 	.word	0xad47d74e
 800a304:	310f74f6 	.word	0x310f74f6
 800a308:	3d2aaaab 	.word	0x3d2aaaab
 800a30c:	3e999999 	.word	0x3e999999
 800a310:	b493f27c 	.word	0xb493f27c
 800a314:	37d00d01 	.word	0x37d00d01
 800a318:	bab60b61 	.word	0xbab60b61
 800a31c:	3f480000 	.word	0x3f480000

0800a320 <__kernel_rem_pio2f>:
 800a320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a324:	ed2d 8b04 	vpush	{d8-d9}
 800a328:	b0d7      	sub	sp, #348	; 0x15c
 800a32a:	4616      	mov	r6, r2
 800a32c:	4698      	mov	r8, r3
 800a32e:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800a330:	4bbb      	ldr	r3, [pc, #748]	; (800a620 <__kernel_rem_pio2f+0x300>)
 800a332:	9001      	str	r0, [sp, #4]
 800a334:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 800a338:	1d33      	adds	r3, r6, #4
 800a33a:	460d      	mov	r5, r1
 800a33c:	f108 39ff 	add.w	r9, r8, #4294967295
 800a340:	db29      	blt.n	800a396 <__kernel_rem_pio2f+0x76>
 800a342:	1ef1      	subs	r1, r6, #3
 800a344:	bf48      	it	mi
 800a346:	1d31      	addmi	r1, r6, #4
 800a348:	10c9      	asrs	r1, r1, #3
 800a34a:	1c4c      	adds	r4, r1, #1
 800a34c:	00e3      	lsls	r3, r4, #3
 800a34e:	9302      	str	r3, [sp, #8]
 800a350:	9b65      	ldr	r3, [sp, #404]	; 0x194
 800a352:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 800a630 <__kernel_rem_pio2f+0x310>
 800a356:	eba1 0009 	sub.w	r0, r1, r9
 800a35a:	eb03 0e80 	add.w	lr, r3, r0, lsl #2
 800a35e:	eba6 04c4 	sub.w	r4, r6, r4, lsl #3
 800a362:	eb07 0c09 	add.w	ip, r7, r9
 800a366:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
 800a36a:	2300      	movs	r3, #0
 800a36c:	4563      	cmp	r3, ip
 800a36e:	dd14      	ble.n	800a39a <__kernel_rem_pio2f+0x7a>
 800a370:	ab1a      	add	r3, sp, #104	; 0x68
 800a372:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 800a376:	46cc      	mov	ip, r9
 800a378:	f50d 7a84 	add.w	sl, sp, #264	; 0x108
 800a37c:	f1c8 0b01 	rsb	fp, r8, #1
 800a380:	eb0b 020c 	add.w	r2, fp, ip
 800a384:	4297      	cmp	r7, r2
 800a386:	db27      	blt.n	800a3d8 <__kernel_rem_pio2f+0xb8>
 800a388:	f8dd e004 	ldr.w	lr, [sp, #4]
 800a38c:	eddf 7aa8 	vldr	s15, [pc, #672]	; 800a630 <__kernel_rem_pio2f+0x310>
 800a390:	4618      	mov	r0, r3
 800a392:	2200      	movs	r2, #0
 800a394:	e016      	b.n	800a3c4 <__kernel_rem_pio2f+0xa4>
 800a396:	2100      	movs	r1, #0
 800a398:	e7d7      	b.n	800a34a <__kernel_rem_pio2f+0x2a>
 800a39a:	42d8      	cmn	r0, r3
 800a39c:	bf5d      	ittte	pl
 800a39e:	f85e 2023 	ldrpl.w	r2, [lr, r3, lsl #2]
 800a3a2:	ee07 2a90 	vmovpl	s15, r2
 800a3a6:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800a3aa:	eef0 7a47 	vmovmi.f32	s15, s14
 800a3ae:	ecea 7a01 	vstmia	sl!, {s15}
 800a3b2:	3301      	adds	r3, #1
 800a3b4:	e7da      	b.n	800a36c <__kernel_rem_pio2f+0x4c>
 800a3b6:	ecfe 6a01 	vldmia	lr!, {s13}
 800a3ba:	ed90 7a00 	vldr	s14, [r0]
 800a3be:	eee6 7a87 	vfma.f32	s15, s13, s14
 800a3c2:	3201      	adds	r2, #1
 800a3c4:	454a      	cmp	r2, r9
 800a3c6:	f1a0 0004 	sub.w	r0, r0, #4
 800a3ca:	ddf4      	ble.n	800a3b6 <__kernel_rem_pio2f+0x96>
 800a3cc:	ecea 7a01 	vstmia	sl!, {s15}
 800a3d0:	3304      	adds	r3, #4
 800a3d2:	f10c 0c01 	add.w	ip, ip, #1
 800a3d6:	e7d3      	b.n	800a380 <__kernel_rem_pio2f+0x60>
 800a3d8:	ab06      	add	r3, sp, #24
 800a3da:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 800a3de:	9304      	str	r3, [sp, #16]
 800a3e0:	9b65      	ldr	r3, [sp, #404]	; 0x194
 800a3e2:	eddf 8a92 	vldr	s17, [pc, #584]	; 800a62c <__kernel_rem_pio2f+0x30c>
 800a3e6:	ed9f 9a90 	vldr	s18, [pc, #576]	; 800a628 <__kernel_rem_pio2f+0x308>
 800a3ea:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800a3ee:	9303      	str	r3, [sp, #12]
 800a3f0:	46ba      	mov	sl, r7
 800a3f2:	ab56      	add	r3, sp, #344	; 0x158
 800a3f4:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 800a3f8:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 800a3fc:	ab06      	add	r3, sp, #24
 800a3fe:	4618      	mov	r0, r3
 800a400:	4652      	mov	r2, sl
 800a402:	2a00      	cmp	r2, #0
 800a404:	dc51      	bgt.n	800a4aa <__kernel_rem_pio2f+0x18a>
 800a406:	4620      	mov	r0, r4
 800a408:	9305      	str	r3, [sp, #20]
 800a40a:	f000 faab 	bl	800a964 <scalbnf>
 800a40e:	eeb0 8a40 	vmov.f32	s16, s0
 800a412:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 800a416:	ee28 0a00 	vmul.f32	s0, s16, s0
 800a41a:	f000 fa5b 	bl	800a8d4 <floorf>
 800a41e:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 800a422:	eea0 8a67 	vfms.f32	s16, s0, s15
 800a426:	2c00      	cmp	r4, #0
 800a428:	9b05      	ldr	r3, [sp, #20]
 800a42a:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800a42e:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 800a432:	edcd 7a00 	vstr	s15, [sp]
 800a436:	ee38 8a40 	vsub.f32	s16, s16, s0
 800a43a:	dd4b      	ble.n	800a4d4 <__kernel_rem_pio2f+0x1b4>
 800a43c:	f10a 3cff 	add.w	ip, sl, #4294967295
 800a440:	aa06      	add	r2, sp, #24
 800a442:	f1c4 0e08 	rsb	lr, r4, #8
 800a446:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800a44a:	ee17 1a90 	vmov	r1, s15
 800a44e:	fa42 f00e 	asr.w	r0, r2, lr
 800a452:	4401      	add	r1, r0
 800a454:	9100      	str	r1, [sp, #0]
 800a456:	fa00 f00e 	lsl.w	r0, r0, lr
 800a45a:	a906      	add	r1, sp, #24
 800a45c:	1a12      	subs	r2, r2, r0
 800a45e:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 800a462:	f1c4 0007 	rsb	r0, r4, #7
 800a466:	fa42 fb00 	asr.w	fp, r2, r0
 800a46a:	f1bb 0f00 	cmp.w	fp, #0
 800a46e:	dd43      	ble.n	800a4f8 <__kernel_rem_pio2f+0x1d8>
 800a470:	9a00      	ldr	r2, [sp, #0]
 800a472:	f04f 0e00 	mov.w	lr, #0
 800a476:	3201      	adds	r2, #1
 800a478:	9200      	str	r2, [sp, #0]
 800a47a:	4670      	mov	r0, lr
 800a47c:	45f2      	cmp	sl, lr
 800a47e:	dc6c      	bgt.n	800a55a <__kernel_rem_pio2f+0x23a>
 800a480:	2c00      	cmp	r4, #0
 800a482:	dd04      	ble.n	800a48e <__kernel_rem_pio2f+0x16e>
 800a484:	2c01      	cmp	r4, #1
 800a486:	d079      	beq.n	800a57c <__kernel_rem_pio2f+0x25c>
 800a488:	2c02      	cmp	r4, #2
 800a48a:	f000 8082 	beq.w	800a592 <__kernel_rem_pio2f+0x272>
 800a48e:	f1bb 0f02 	cmp.w	fp, #2
 800a492:	d131      	bne.n	800a4f8 <__kernel_rem_pio2f+0x1d8>
 800a494:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800a498:	ee30 8a48 	vsub.f32	s16, s0, s16
 800a49c:	b360      	cbz	r0, 800a4f8 <__kernel_rem_pio2f+0x1d8>
 800a49e:	4620      	mov	r0, r4
 800a4a0:	f000 fa60 	bl	800a964 <scalbnf>
 800a4a4:	ee38 8a40 	vsub.f32	s16, s16, s0
 800a4a8:	e026      	b.n	800a4f8 <__kernel_rem_pio2f+0x1d8>
 800a4aa:	ee60 7a28 	vmul.f32	s15, s0, s17
 800a4ae:	3a01      	subs	r2, #1
 800a4b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a4b4:	a942      	add	r1, sp, #264	; 0x108
 800a4b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a4ba:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 800a4be:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800a4c2:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800a4c6:	eca0 0a01 	vstmia	r0!, {s0}
 800a4ca:	ed9c 0a00 	vldr	s0, [ip]
 800a4ce:	ee37 0a80 	vadd.f32	s0, s15, s0
 800a4d2:	e796      	b.n	800a402 <__kernel_rem_pio2f+0xe2>
 800a4d4:	d107      	bne.n	800a4e6 <__kernel_rem_pio2f+0x1c6>
 800a4d6:	f10a 32ff 	add.w	r2, sl, #4294967295
 800a4da:	a906      	add	r1, sp, #24
 800a4dc:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800a4e0:	ea4f 2b22 	mov.w	fp, r2, asr #8
 800a4e4:	e7c1      	b.n	800a46a <__kernel_rem_pio2f+0x14a>
 800a4e6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800a4ea:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800a4ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a4f2:	da2f      	bge.n	800a554 <__kernel_rem_pio2f+0x234>
 800a4f4:	f04f 0b00 	mov.w	fp, #0
 800a4f8:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800a4fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a500:	f040 8098 	bne.w	800a634 <__kernel_rem_pio2f+0x314>
 800a504:	f10a 33ff 	add.w	r3, sl, #4294967295
 800a508:	469c      	mov	ip, r3
 800a50a:	2200      	movs	r2, #0
 800a50c:	45bc      	cmp	ip, r7
 800a50e:	da48      	bge.n	800a5a2 <__kernel_rem_pio2f+0x282>
 800a510:	2a00      	cmp	r2, #0
 800a512:	d05f      	beq.n	800a5d4 <__kernel_rem_pio2f+0x2b4>
 800a514:	aa06      	add	r2, sp, #24
 800a516:	3c08      	subs	r4, #8
 800a518:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800a51c:	2900      	cmp	r1, #0
 800a51e:	d07d      	beq.n	800a61c <__kernel_rem_pio2f+0x2fc>
 800a520:	4620      	mov	r0, r4
 800a522:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800a526:	9301      	str	r3, [sp, #4]
 800a528:	f000 fa1c 	bl	800a964 <scalbnf>
 800a52c:	9b01      	ldr	r3, [sp, #4]
 800a52e:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 800a62c <__kernel_rem_pio2f+0x30c>
 800a532:	4619      	mov	r1, r3
 800a534:	2900      	cmp	r1, #0
 800a536:	f280 80af 	bge.w	800a698 <__kernel_rem_pio2f+0x378>
 800a53a:	4618      	mov	r0, r3
 800a53c:	2400      	movs	r4, #0
 800a53e:	2800      	cmp	r0, #0
 800a540:	f2c0 80d0 	blt.w	800a6e4 <__kernel_rem_pio2f+0x3c4>
 800a544:	a942      	add	r1, sp, #264	; 0x108
 800a546:	eb01 0680 	add.w	r6, r1, r0, lsl #2
 800a54a:	4a36      	ldr	r2, [pc, #216]	; (800a624 <__kernel_rem_pio2f+0x304>)
 800a54c:	eddf 7a38 	vldr	s15, [pc, #224]	; 800a630 <__kernel_rem_pio2f+0x310>
 800a550:	2100      	movs	r1, #0
 800a552:	e0bb      	b.n	800a6cc <__kernel_rem_pio2f+0x3ac>
 800a554:	f04f 0b02 	mov.w	fp, #2
 800a558:	e78a      	b.n	800a470 <__kernel_rem_pio2f+0x150>
 800a55a:	681a      	ldr	r2, [r3, #0]
 800a55c:	b948      	cbnz	r0, 800a572 <__kernel_rem_pio2f+0x252>
 800a55e:	b11a      	cbz	r2, 800a568 <__kernel_rem_pio2f+0x248>
 800a560:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 800a564:	601a      	str	r2, [r3, #0]
 800a566:	2201      	movs	r2, #1
 800a568:	f10e 0e01 	add.w	lr, lr, #1
 800a56c:	3304      	adds	r3, #4
 800a56e:	4610      	mov	r0, r2
 800a570:	e784      	b.n	800a47c <__kernel_rem_pio2f+0x15c>
 800a572:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 800a576:	601a      	str	r2, [r3, #0]
 800a578:	4602      	mov	r2, r0
 800a57a:	e7f5      	b.n	800a568 <__kernel_rem_pio2f+0x248>
 800a57c:	f10a 3cff 	add.w	ip, sl, #4294967295
 800a580:	ab06      	add	r3, sp, #24
 800a582:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 800a586:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a58a:	aa06      	add	r2, sp, #24
 800a58c:	f842 302c 	str.w	r3, [r2, ip, lsl #2]
 800a590:	e77d      	b.n	800a48e <__kernel_rem_pio2f+0x16e>
 800a592:	f10a 3cff 	add.w	ip, sl, #4294967295
 800a596:	ab06      	add	r3, sp, #24
 800a598:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 800a59c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a5a0:	e7f3      	b.n	800a58a <__kernel_rem_pio2f+0x26a>
 800a5a2:	a906      	add	r1, sp, #24
 800a5a4:	f851 002c 	ldr.w	r0, [r1, ip, lsl #2]
 800a5a8:	f10c 3cff 	add.w	ip, ip, #4294967295
 800a5ac:	4302      	orrs	r2, r0
 800a5ae:	e7ad      	b.n	800a50c <__kernel_rem_pio2f+0x1ec>
 800a5b0:	3001      	adds	r0, #1
 800a5b2:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800a5b6:	2a00      	cmp	r2, #0
 800a5b8:	d0fa      	beq.n	800a5b0 <__kernel_rem_pio2f+0x290>
 800a5ba:	a91a      	add	r1, sp, #104	; 0x68
 800a5bc:	eb0a 0208 	add.w	r2, sl, r8
 800a5c0:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800a5c4:	f10a 0301 	add.w	r3, sl, #1
 800a5c8:	eb0a 0100 	add.w	r1, sl, r0
 800a5cc:	4299      	cmp	r1, r3
 800a5ce:	da04      	bge.n	800a5da <__kernel_rem_pio2f+0x2ba>
 800a5d0:	468a      	mov	sl, r1
 800a5d2:	e70e      	b.n	800a3f2 <__kernel_rem_pio2f+0xd2>
 800a5d4:	9b04      	ldr	r3, [sp, #16]
 800a5d6:	2001      	movs	r0, #1
 800a5d8:	e7eb      	b.n	800a5b2 <__kernel_rem_pio2f+0x292>
 800a5da:	9803      	ldr	r0, [sp, #12]
 800a5dc:	f8dd c004 	ldr.w	ip, [sp, #4]
 800a5e0:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800a5e4:	9000      	str	r0, [sp, #0]
 800a5e6:	ee07 0a90 	vmov	s15, r0
 800a5ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a5ee:	2000      	movs	r0, #0
 800a5f0:	ece2 7a01 	vstmia	r2!, {s15}
 800a5f4:	eddf 7a0e 	vldr	s15, [pc, #56]	; 800a630 <__kernel_rem_pio2f+0x310>
 800a5f8:	4696      	mov	lr, r2
 800a5fa:	4548      	cmp	r0, r9
 800a5fc:	dd06      	ble.n	800a60c <__kernel_rem_pio2f+0x2ec>
 800a5fe:	a842      	add	r0, sp, #264	; 0x108
 800a600:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800a604:	edc0 7a00 	vstr	s15, [r0]
 800a608:	3301      	adds	r3, #1
 800a60a:	e7df      	b.n	800a5cc <__kernel_rem_pio2f+0x2ac>
 800a60c:	ecfc 6a01 	vldmia	ip!, {s13}
 800a610:	ed3e 7a01 	vldmdb	lr!, {s14}
 800a614:	3001      	adds	r0, #1
 800a616:	eee6 7a87 	vfma.f32	s15, s13, s14
 800a61a:	e7ee      	b.n	800a5fa <__kernel_rem_pio2f+0x2da>
 800a61c:	3b01      	subs	r3, #1
 800a61e:	e779      	b.n	800a514 <__kernel_rem_pio2f+0x1f4>
 800a620:	0804f894 	.word	0x0804f894
 800a624:	0804f868 	.word	0x0804f868
 800a628:	43800000 	.word	0x43800000
 800a62c:	3b800000 	.word	0x3b800000
 800a630:	00000000 	.word	0x00000000
 800a634:	9b02      	ldr	r3, [sp, #8]
 800a636:	eeb0 0a48 	vmov.f32	s0, s16
 800a63a:	1b98      	subs	r0, r3, r6
 800a63c:	f000 f992 	bl	800a964 <scalbnf>
 800a640:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 800a628 <__kernel_rem_pio2f+0x308>
 800a644:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800a648:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a64c:	db1b      	blt.n	800a686 <__kernel_rem_pio2f+0x366>
 800a64e:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 800a62c <__kernel_rem_pio2f+0x30c>
 800a652:	ee60 7a27 	vmul.f32	s15, s0, s15
 800a656:	aa06      	add	r2, sp, #24
 800a658:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a65c:	a906      	add	r1, sp, #24
 800a65e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a662:	3408      	adds	r4, #8
 800a664:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800a668:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a66c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800a670:	ee10 3a10 	vmov	r3, s0
 800a674:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 800a678:	ee17 2a90 	vmov	r2, s15
 800a67c:	f10a 0301 	add.w	r3, sl, #1
 800a680:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800a684:	e74c      	b.n	800a520 <__kernel_rem_pio2f+0x200>
 800a686:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800a68a:	aa06      	add	r2, sp, #24
 800a68c:	ee10 3a10 	vmov	r3, s0
 800a690:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 800a694:	4653      	mov	r3, sl
 800a696:	e743      	b.n	800a520 <__kernel_rem_pio2f+0x200>
 800a698:	aa42      	add	r2, sp, #264	; 0x108
 800a69a:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 800a69e:	aa06      	add	r2, sp, #24
 800a6a0:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800a6a4:	9201      	str	r2, [sp, #4]
 800a6a6:	ee07 2a90 	vmov	s15, r2
 800a6aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a6ae:	3901      	subs	r1, #1
 800a6b0:	ee67 7a80 	vmul.f32	s15, s15, s0
 800a6b4:	ee20 0a07 	vmul.f32	s0, s0, s14
 800a6b8:	edc0 7a00 	vstr	s15, [r0]
 800a6bc:	e73a      	b.n	800a534 <__kernel_rem_pio2f+0x214>
 800a6be:	ecf2 6a01 	vldmia	r2!, {s13}
 800a6c2:	ecb6 7a01 	vldmia	r6!, {s14}
 800a6c6:	eee6 7a87 	vfma.f32	s15, s13, s14
 800a6ca:	3101      	adds	r1, #1
 800a6cc:	42b9      	cmp	r1, r7
 800a6ce:	dc01      	bgt.n	800a6d4 <__kernel_rem_pio2f+0x3b4>
 800a6d0:	428c      	cmp	r4, r1
 800a6d2:	daf4      	bge.n	800a6be <__kernel_rem_pio2f+0x39e>
 800a6d4:	aa56      	add	r2, sp, #344	; 0x158
 800a6d6:	eb02 0184 	add.w	r1, r2, r4, lsl #2
 800a6da:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 800a6de:	3801      	subs	r0, #1
 800a6e0:	3401      	adds	r4, #1
 800a6e2:	e72c      	b.n	800a53e <__kernel_rem_pio2f+0x21e>
 800a6e4:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800a6e6:	2a02      	cmp	r2, #2
 800a6e8:	dc0a      	bgt.n	800a700 <__kernel_rem_pio2f+0x3e0>
 800a6ea:	2a00      	cmp	r2, #0
 800a6ec:	dc61      	bgt.n	800a7b2 <__kernel_rem_pio2f+0x492>
 800a6ee:	d03c      	beq.n	800a76a <__kernel_rem_pio2f+0x44a>
 800a6f0:	9b00      	ldr	r3, [sp, #0]
 800a6f2:	f003 0007 	and.w	r0, r3, #7
 800a6f6:	b057      	add	sp, #348	; 0x15c
 800a6f8:	ecbd 8b04 	vpop	{d8-d9}
 800a6fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a700:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800a702:	2a03      	cmp	r2, #3
 800a704:	d1f4      	bne.n	800a6f0 <__kernel_rem_pio2f+0x3d0>
 800a706:	aa2e      	add	r2, sp, #184	; 0xb8
 800a708:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 800a70c:	4608      	mov	r0, r1
 800a70e:	461c      	mov	r4, r3
 800a710:	2c00      	cmp	r4, #0
 800a712:	f1a0 0004 	sub.w	r0, r0, #4
 800a716:	dc59      	bgt.n	800a7cc <__kernel_rem_pio2f+0x4ac>
 800a718:	4618      	mov	r0, r3
 800a71a:	2801      	cmp	r0, #1
 800a71c:	f1a1 0104 	sub.w	r1, r1, #4
 800a720:	dc64      	bgt.n	800a7ec <__kernel_rem_pio2f+0x4cc>
 800a722:	ed5f 7a3d 	vldr	s15, [pc, #-244]	; 800a630 <__kernel_rem_pio2f+0x310>
 800a726:	2b01      	cmp	r3, #1
 800a728:	dc70      	bgt.n	800a80c <__kernel_rem_pio2f+0x4ec>
 800a72a:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 800a72e:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 800a732:	f1bb 0f00 	cmp.w	fp, #0
 800a736:	d172      	bne.n	800a81e <__kernel_rem_pio2f+0x4fe>
 800a738:	edc5 6a00 	vstr	s13, [r5]
 800a73c:	ed85 7a01 	vstr	s14, [r5, #4]
 800a740:	edc5 7a02 	vstr	s15, [r5, #8]
 800a744:	e7d4      	b.n	800a6f0 <__kernel_rem_pio2f+0x3d0>
 800a746:	aa2e      	add	r2, sp, #184	; 0xb8
 800a748:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 800a74c:	ed91 7a00 	vldr	s14, [r1]
 800a750:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a754:	3b01      	subs	r3, #1
 800a756:	2b00      	cmp	r3, #0
 800a758:	daf5      	bge.n	800a746 <__kernel_rem_pio2f+0x426>
 800a75a:	f1bb 0f00 	cmp.w	fp, #0
 800a75e:	d001      	beq.n	800a764 <__kernel_rem_pio2f+0x444>
 800a760:	eef1 7a67 	vneg.f32	s15, s15
 800a764:	edc5 7a00 	vstr	s15, [r5]
 800a768:	e7c2      	b.n	800a6f0 <__kernel_rem_pio2f+0x3d0>
 800a76a:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 800a630 <__kernel_rem_pio2f+0x310>
 800a76e:	e7f2      	b.n	800a756 <__kernel_rem_pio2f+0x436>
 800a770:	aa2e      	add	r2, sp, #184	; 0xb8
 800a772:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 800a776:	edd0 7a00 	vldr	s15, [r0]
 800a77a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a77e:	3901      	subs	r1, #1
 800a780:	2900      	cmp	r1, #0
 800a782:	daf5      	bge.n	800a770 <__kernel_rem_pio2f+0x450>
 800a784:	f1bb 0f00 	cmp.w	fp, #0
 800a788:	d017      	beq.n	800a7ba <__kernel_rem_pio2f+0x49a>
 800a78a:	eef1 7a47 	vneg.f32	s15, s14
 800a78e:	edc5 7a00 	vstr	s15, [r5]
 800a792:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 800a796:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a79a:	a82f      	add	r0, sp, #188	; 0xbc
 800a79c:	2101      	movs	r1, #1
 800a79e:	428b      	cmp	r3, r1
 800a7a0:	da0e      	bge.n	800a7c0 <__kernel_rem_pio2f+0x4a0>
 800a7a2:	f1bb 0f00 	cmp.w	fp, #0
 800a7a6:	d001      	beq.n	800a7ac <__kernel_rem_pio2f+0x48c>
 800a7a8:	eef1 7a67 	vneg.f32	s15, s15
 800a7ac:	edc5 7a01 	vstr	s15, [r5, #4]
 800a7b0:	e79e      	b.n	800a6f0 <__kernel_rem_pio2f+0x3d0>
 800a7b2:	ed1f 7a61 	vldr	s14, [pc, #-388]	; 800a630 <__kernel_rem_pio2f+0x310>
 800a7b6:	4619      	mov	r1, r3
 800a7b8:	e7e2      	b.n	800a780 <__kernel_rem_pio2f+0x460>
 800a7ba:	eef0 7a47 	vmov.f32	s15, s14
 800a7be:	e7e6      	b.n	800a78e <__kernel_rem_pio2f+0x46e>
 800a7c0:	ecb0 7a01 	vldmia	r0!, {s14}
 800a7c4:	3101      	adds	r1, #1
 800a7c6:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a7ca:	e7e8      	b.n	800a79e <__kernel_rem_pio2f+0x47e>
 800a7cc:	edd0 7a00 	vldr	s15, [r0]
 800a7d0:	edd0 6a01 	vldr	s13, [r0, #4]
 800a7d4:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800a7d8:	3c01      	subs	r4, #1
 800a7da:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a7de:	ed80 7a00 	vstr	s14, [r0]
 800a7e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a7e6:	edc0 7a01 	vstr	s15, [r0, #4]
 800a7ea:	e791      	b.n	800a710 <__kernel_rem_pio2f+0x3f0>
 800a7ec:	edd1 7a00 	vldr	s15, [r1]
 800a7f0:	edd1 6a01 	vldr	s13, [r1, #4]
 800a7f4:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800a7f8:	3801      	subs	r0, #1
 800a7fa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a7fe:	ed81 7a00 	vstr	s14, [r1]
 800a802:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a806:	edc1 7a01 	vstr	s15, [r1, #4]
 800a80a:	e786      	b.n	800a71a <__kernel_rem_pio2f+0x3fa>
 800a80c:	aa2e      	add	r2, sp, #184	; 0xb8
 800a80e:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 800a812:	ed91 7a00 	vldr	s14, [r1]
 800a816:	3b01      	subs	r3, #1
 800a818:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a81c:	e783      	b.n	800a726 <__kernel_rem_pio2f+0x406>
 800a81e:	eef1 6a66 	vneg.f32	s13, s13
 800a822:	eeb1 7a47 	vneg.f32	s14, s14
 800a826:	edc5 6a00 	vstr	s13, [r5]
 800a82a:	ed85 7a01 	vstr	s14, [r5, #4]
 800a82e:	eef1 7a67 	vneg.f32	s15, s15
 800a832:	e785      	b.n	800a740 <__kernel_rem_pio2f+0x420>

0800a834 <__kernel_sinf>:
 800a834:	ee10 3a10 	vmov	r3, s0
 800a838:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a83c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800a840:	da04      	bge.n	800a84c <__kernel_sinf+0x18>
 800a842:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800a846:	ee17 3a90 	vmov	r3, s15
 800a84a:	b35b      	cbz	r3, 800a8a4 <__kernel_sinf+0x70>
 800a84c:	ee20 7a00 	vmul.f32	s14, s0, s0
 800a850:	eddf 7a15 	vldr	s15, [pc, #84]	; 800a8a8 <__kernel_sinf+0x74>
 800a854:	ed9f 6a15 	vldr	s12, [pc, #84]	; 800a8ac <__kernel_sinf+0x78>
 800a858:	eea7 6a27 	vfma.f32	s12, s14, s15
 800a85c:	eddf 7a14 	vldr	s15, [pc, #80]	; 800a8b0 <__kernel_sinf+0x7c>
 800a860:	eee6 7a07 	vfma.f32	s15, s12, s14
 800a864:	ed9f 6a13 	vldr	s12, [pc, #76]	; 800a8b4 <__kernel_sinf+0x80>
 800a868:	eea7 6a87 	vfma.f32	s12, s15, s14
 800a86c:	eddf 7a12 	vldr	s15, [pc, #72]	; 800a8b8 <__kernel_sinf+0x84>
 800a870:	ee60 6a07 	vmul.f32	s13, s0, s14
 800a874:	eee6 7a07 	vfma.f32	s15, s12, s14
 800a878:	b930      	cbnz	r0, 800a888 <__kernel_sinf+0x54>
 800a87a:	ed9f 6a10 	vldr	s12, [pc, #64]	; 800a8bc <__kernel_sinf+0x88>
 800a87e:	eea7 6a27 	vfma.f32	s12, s14, s15
 800a882:	eea6 0a26 	vfma.f32	s0, s12, s13
 800a886:	4770      	bx	lr
 800a888:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800a88c:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800a890:	eee0 7a86 	vfma.f32	s15, s1, s12
 800a894:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800a898:	eddf 7a09 	vldr	s15, [pc, #36]	; 800a8c0 <__kernel_sinf+0x8c>
 800a89c:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800a8a0:	ee30 0a60 	vsub.f32	s0, s0, s1
 800a8a4:	4770      	bx	lr
 800a8a6:	bf00      	nop
 800a8a8:	2f2ec9d3 	.word	0x2f2ec9d3
 800a8ac:	b2d72f34 	.word	0xb2d72f34
 800a8b0:	3638ef1b 	.word	0x3638ef1b
 800a8b4:	b9500d01 	.word	0xb9500d01
 800a8b8:	3c088889 	.word	0x3c088889
 800a8bc:	be2aaaab 	.word	0xbe2aaaab
 800a8c0:	3e2aaaab 	.word	0x3e2aaaab

0800a8c4 <fabsf>:
 800a8c4:	ee10 3a10 	vmov	r3, s0
 800a8c8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a8cc:	ee00 3a10 	vmov	s0, r3
 800a8d0:	4770      	bx	lr
	...

0800a8d4 <floorf>:
 800a8d4:	ee10 3a10 	vmov	r3, s0
 800a8d8:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800a8dc:	3a7f      	subs	r2, #127	; 0x7f
 800a8de:	2a16      	cmp	r2, #22
 800a8e0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a8e4:	dc2a      	bgt.n	800a93c <floorf+0x68>
 800a8e6:	2a00      	cmp	r2, #0
 800a8e8:	da11      	bge.n	800a90e <floorf+0x3a>
 800a8ea:	eddf 7a18 	vldr	s15, [pc, #96]	; 800a94c <floorf+0x78>
 800a8ee:	ee30 0a27 	vadd.f32	s0, s0, s15
 800a8f2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800a8f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a8fa:	dd05      	ble.n	800a908 <floorf+0x34>
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	da23      	bge.n	800a948 <floorf+0x74>
 800a900:	4a13      	ldr	r2, [pc, #76]	; (800a950 <floorf+0x7c>)
 800a902:	2900      	cmp	r1, #0
 800a904:	bf18      	it	ne
 800a906:	4613      	movne	r3, r2
 800a908:	ee00 3a10 	vmov	s0, r3
 800a90c:	4770      	bx	lr
 800a90e:	4911      	ldr	r1, [pc, #68]	; (800a954 <floorf+0x80>)
 800a910:	4111      	asrs	r1, r2
 800a912:	420b      	tst	r3, r1
 800a914:	d0fa      	beq.n	800a90c <floorf+0x38>
 800a916:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800a94c <floorf+0x78>
 800a91a:	ee30 0a27 	vadd.f32	s0, s0, s15
 800a91e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800a922:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a926:	ddef      	ble.n	800a908 <floorf+0x34>
 800a928:	2b00      	cmp	r3, #0
 800a92a:	bfbe      	ittt	lt
 800a92c:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 800a930:	fa40 f202 	asrlt.w	r2, r0, r2
 800a934:	189b      	addlt	r3, r3, r2
 800a936:	ea23 0301 	bic.w	r3, r3, r1
 800a93a:	e7e5      	b.n	800a908 <floorf+0x34>
 800a93c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800a940:	d3e4      	bcc.n	800a90c <floorf+0x38>
 800a942:	ee30 0a00 	vadd.f32	s0, s0, s0
 800a946:	4770      	bx	lr
 800a948:	2300      	movs	r3, #0
 800a94a:	e7dd      	b.n	800a908 <floorf+0x34>
 800a94c:	7149f2ca 	.word	0x7149f2ca
 800a950:	bf800000 	.word	0xbf800000
 800a954:	007fffff 	.word	0x007fffff

0800a958 <nanf>:
 800a958:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800a960 <nanf+0x8>
 800a95c:	4770      	bx	lr
 800a95e:	bf00      	nop
 800a960:	7fc00000 	.word	0x7fc00000

0800a964 <scalbnf>:
 800a964:	ee10 3a10 	vmov	r3, s0
 800a968:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800a96c:	d025      	beq.n	800a9ba <scalbnf+0x56>
 800a96e:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800a972:	d302      	bcc.n	800a97a <scalbnf+0x16>
 800a974:	ee30 0a00 	vadd.f32	s0, s0, s0
 800a978:	4770      	bx	lr
 800a97a:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800a97e:	d122      	bne.n	800a9c6 <scalbnf+0x62>
 800a980:	4b2a      	ldr	r3, [pc, #168]	; (800aa2c <scalbnf+0xc8>)
 800a982:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800aa30 <scalbnf+0xcc>
 800a986:	4298      	cmp	r0, r3
 800a988:	ee20 0a27 	vmul.f32	s0, s0, s15
 800a98c:	db16      	blt.n	800a9bc <scalbnf+0x58>
 800a98e:	ee10 3a10 	vmov	r3, s0
 800a992:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800a996:	3a19      	subs	r2, #25
 800a998:	4402      	add	r2, r0
 800a99a:	2afe      	cmp	r2, #254	; 0xfe
 800a99c:	dd15      	ble.n	800a9ca <scalbnf+0x66>
 800a99e:	ee10 3a10 	vmov	r3, s0
 800a9a2:	eddf 7a24 	vldr	s15, [pc, #144]	; 800aa34 <scalbnf+0xd0>
 800a9a6:	eddf 6a24 	vldr	s13, [pc, #144]	; 800aa38 <scalbnf+0xd4>
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	eeb0 7a67 	vmov.f32	s14, s15
 800a9b0:	bfb8      	it	lt
 800a9b2:	eef0 7a66 	vmovlt.f32	s15, s13
 800a9b6:	ee27 0a27 	vmul.f32	s0, s14, s15
 800a9ba:	4770      	bx	lr
 800a9bc:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800aa3c <scalbnf+0xd8>
 800a9c0:	ee20 0a27 	vmul.f32	s0, s0, s15
 800a9c4:	4770      	bx	lr
 800a9c6:	0dd2      	lsrs	r2, r2, #23
 800a9c8:	e7e6      	b.n	800a998 <scalbnf+0x34>
 800a9ca:	2a00      	cmp	r2, #0
 800a9cc:	dd06      	ble.n	800a9dc <scalbnf+0x78>
 800a9ce:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a9d2:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800a9d6:	ee00 3a10 	vmov	s0, r3
 800a9da:	4770      	bx	lr
 800a9dc:	f112 0f16 	cmn.w	r2, #22
 800a9e0:	da1a      	bge.n	800aa18 <scalbnf+0xb4>
 800a9e2:	f24c 3350 	movw	r3, #50000	; 0xc350
 800a9e6:	4298      	cmp	r0, r3
 800a9e8:	ee10 3a10 	vmov	r3, s0
 800a9ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a9f0:	dd0a      	ble.n	800aa08 <scalbnf+0xa4>
 800a9f2:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800aa34 <scalbnf+0xd0>
 800a9f6:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800aa38 <scalbnf+0xd4>
 800a9fa:	eef0 7a40 	vmov.f32	s15, s0
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	bf18      	it	ne
 800aa02:	eeb0 0a47 	vmovne.f32	s0, s14
 800aa06:	e7db      	b.n	800a9c0 <scalbnf+0x5c>
 800aa08:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800aa3c <scalbnf+0xd8>
 800aa0c:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800aa40 <scalbnf+0xdc>
 800aa10:	eef0 7a40 	vmov.f32	s15, s0
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	e7f3      	b.n	800aa00 <scalbnf+0x9c>
 800aa18:	3219      	adds	r2, #25
 800aa1a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800aa1e:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800aa22:	eddf 7a08 	vldr	s15, [pc, #32]	; 800aa44 <scalbnf+0xe0>
 800aa26:	ee07 3a10 	vmov	s14, r3
 800aa2a:	e7c4      	b.n	800a9b6 <scalbnf+0x52>
 800aa2c:	ffff3cb0 	.word	0xffff3cb0
 800aa30:	4c000000 	.word	0x4c000000
 800aa34:	7149f2ca 	.word	0x7149f2ca
 800aa38:	f149f2ca 	.word	0xf149f2ca
 800aa3c:	0da24260 	.word	0x0da24260
 800aa40:	8da24260 	.word	0x8da24260
 800aa44:	33000000 	.word	0x33000000

0800aa48 <_init>:
 800aa48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa4a:	bf00      	nop
 800aa4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa4e:	bc08      	pop	{r3}
 800aa50:	469e      	mov	lr, r3
 800aa52:	4770      	bx	lr

0800aa54 <_fini>:
 800aa54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa56:	bf00      	nop
 800aa58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa5a:	bc08      	pop	{r3}
 800aa5c:	469e      	mov	lr, r3
 800aa5e:	4770      	bx	lr
