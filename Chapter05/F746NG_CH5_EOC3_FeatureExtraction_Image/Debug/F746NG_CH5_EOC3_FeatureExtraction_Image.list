
F746NG_CH5_EOC3_FeatureExtraction_Image.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .qspi         00000000  90000000  90000000  00020090  2**0
                  CONTENTS
  1 .sdram_data   00145000  c0000000  c0000000  00030000  2**2
                  ALLOC
  2 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .text         00008d84  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       000004c4  08008f4c  08008f4c  00018f4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM.extab    00000000  08009410  08009410  00020090  2**0
                  CONTENTS
  6 .ARM          00000008  08009410  08009410  00019410  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .preinit_array 00000000  08009418  08009418  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  8 .init_array   00000004  08009418  08009418  00019418  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .fini_array   00000004  0800941c  0800941c  0001941c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .data         00000090  20000000  08009420  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000420  20000090  080094b0  00020090  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  200004b0  080094b0  000204b0  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 14 .debug_info   000170c9  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000033b4  00000000  00000000  00037189  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000fc0  00000000  00000000  0003a540  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00000e38  00000000  00000000  0003b500  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00028ebe  00000000  00000000  0003c338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000184e5  00000000  00000000  000651f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000f3b41  00000000  00000000  0007d6db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000053  00000000  00000000  0017121c  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000040d0  00000000  00000000  00171270  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000090 	.word	0x20000090
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08008f34 	.word	0x08008f34

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000094 	.word	0x20000094
 8000204:	08008f34 	.word	0x08008f34

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b96e 	b.w	80004fc <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9d08      	ldr	r5, [sp, #32]
 800023e:	4604      	mov	r4, r0
 8000240:	468c      	mov	ip, r1
 8000242:	2b00      	cmp	r3, #0
 8000244:	f040 8083 	bne.w	800034e <__udivmoddi4+0x116>
 8000248:	428a      	cmp	r2, r1
 800024a:	4617      	mov	r7, r2
 800024c:	d947      	bls.n	80002de <__udivmoddi4+0xa6>
 800024e:	fab2 f282 	clz	r2, r2
 8000252:	b142      	cbz	r2, 8000266 <__udivmoddi4+0x2e>
 8000254:	f1c2 0020 	rsb	r0, r2, #32
 8000258:	fa24 f000 	lsr.w	r0, r4, r0
 800025c:	4091      	lsls	r1, r2
 800025e:	4097      	lsls	r7, r2
 8000260:	ea40 0c01 	orr.w	ip, r0, r1
 8000264:	4094      	lsls	r4, r2
 8000266:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800026a:	0c23      	lsrs	r3, r4, #16
 800026c:	fbbc f6f8 	udiv	r6, ip, r8
 8000270:	fa1f fe87 	uxth.w	lr, r7
 8000274:	fb08 c116 	mls	r1, r8, r6, ip
 8000278:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027c:	fb06 f10e 	mul.w	r1, r6, lr
 8000280:	4299      	cmp	r1, r3
 8000282:	d909      	bls.n	8000298 <__udivmoddi4+0x60>
 8000284:	18fb      	adds	r3, r7, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295
 800028a:	f080 8119 	bcs.w	80004c0 <__udivmoddi4+0x288>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 8116 	bls.w	80004c0 <__udivmoddi4+0x288>
 8000294:	3e02      	subs	r6, #2
 8000296:	443b      	add	r3, r7
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002ac:	45a6      	cmp	lr, r4
 80002ae:	d909      	bls.n	80002c4 <__udivmoddi4+0x8c>
 80002b0:	193c      	adds	r4, r7, r4
 80002b2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b6:	f080 8105 	bcs.w	80004c4 <__udivmoddi4+0x28c>
 80002ba:	45a6      	cmp	lr, r4
 80002bc:	f240 8102 	bls.w	80004c4 <__udivmoddi4+0x28c>
 80002c0:	3802      	subs	r0, #2
 80002c2:	443c      	add	r4, r7
 80002c4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c8:	eba4 040e 	sub.w	r4, r4, lr
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa0>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	b902      	cbnz	r2, 80002e2 <__udivmoddi4+0xaa>
 80002e0:	deff      	udf	#255	; 0xff
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d150      	bne.n	800038c <__udivmoddi4+0x154>
 80002ea:	1bcb      	subs	r3, r1, r7
 80002ec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f0:	fa1f f887 	uxth.w	r8, r7
 80002f4:	2601      	movs	r6, #1
 80002f6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002fa:	0c21      	lsrs	r1, r4, #16
 80002fc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000300:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000304:	fb08 f30c 	mul.w	r3, r8, ip
 8000308:	428b      	cmp	r3, r1
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0xe4>
 800030c:	1879      	adds	r1, r7, r1
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0xe2>
 8000314:	428b      	cmp	r3, r1
 8000316:	f200 80e9 	bhi.w	80004ec <__udivmoddi4+0x2b4>
 800031a:	4684      	mov	ip, r0
 800031c:	1ac9      	subs	r1, r1, r3
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1110 	mls	r1, lr, r0, r1
 8000328:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x10c>
 8000334:	193c      	adds	r4, r7, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x10a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80d9 	bhi.w	80004f4 <__udivmoddi4+0x2bc>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e7bf      	b.n	80002ce <__udivmoddi4+0x96>
 800034e:	428b      	cmp	r3, r1
 8000350:	d909      	bls.n	8000366 <__udivmoddi4+0x12e>
 8000352:	2d00      	cmp	r5, #0
 8000354:	f000 80b1 	beq.w	80004ba <__udivmoddi4+0x282>
 8000358:	2600      	movs	r6, #0
 800035a:	e9c5 0100 	strd	r0, r1, [r5]
 800035e:	4630      	mov	r0, r6
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	fab3 f683 	clz	r6, r3
 800036a:	2e00      	cmp	r6, #0
 800036c:	d14a      	bne.n	8000404 <__udivmoddi4+0x1cc>
 800036e:	428b      	cmp	r3, r1
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0x140>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 80b8 	bhi.w	80004e8 <__udivmoddi4+0x2b0>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb61 0103 	sbc.w	r1, r1, r3
 800037e:	2001      	movs	r0, #1
 8000380:	468c      	mov	ip, r1
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0a8      	beq.n	80002d8 <__udivmoddi4+0xa0>
 8000386:	e9c5 4c00 	strd	r4, ip, [r5]
 800038a:	e7a5      	b.n	80002d8 <__udivmoddi4+0xa0>
 800038c:	f1c2 0320 	rsb	r3, r2, #32
 8000390:	fa20 f603 	lsr.w	r6, r0, r3
 8000394:	4097      	lsls	r7, r2
 8000396:	fa01 f002 	lsl.w	r0, r1, r2
 800039a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800039e:	40d9      	lsrs	r1, r3
 80003a0:	4330      	orrs	r0, r6
 80003a2:	0c03      	lsrs	r3, r0, #16
 80003a4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003a8:	fa1f f887 	uxth.w	r8, r7
 80003ac:	fb0e 1116 	mls	r1, lr, r6, r1
 80003b0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b4:	fb06 f108 	mul.w	r1, r6, r8
 80003b8:	4299      	cmp	r1, r3
 80003ba:	fa04 f402 	lsl.w	r4, r4, r2
 80003be:	d909      	bls.n	80003d4 <__udivmoddi4+0x19c>
 80003c0:	18fb      	adds	r3, r7, r3
 80003c2:	f106 3cff 	add.w	ip, r6, #4294967295
 80003c6:	f080 808d 	bcs.w	80004e4 <__udivmoddi4+0x2ac>
 80003ca:	4299      	cmp	r1, r3
 80003cc:	f240 808a 	bls.w	80004e4 <__udivmoddi4+0x2ac>
 80003d0:	3e02      	subs	r6, #2
 80003d2:	443b      	add	r3, r7
 80003d4:	1a5b      	subs	r3, r3, r1
 80003d6:	b281      	uxth	r1, r0
 80003d8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003dc:	fb0e 3310 	mls	r3, lr, r0, r3
 80003e0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003e4:	fb00 f308 	mul.w	r3, r0, r8
 80003e8:	428b      	cmp	r3, r1
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x1c4>
 80003ec:	1879      	adds	r1, r7, r1
 80003ee:	f100 3cff 	add.w	ip, r0, #4294967295
 80003f2:	d273      	bcs.n	80004dc <__udivmoddi4+0x2a4>
 80003f4:	428b      	cmp	r3, r1
 80003f6:	d971      	bls.n	80004dc <__udivmoddi4+0x2a4>
 80003f8:	3802      	subs	r0, #2
 80003fa:	4439      	add	r1, r7
 80003fc:	1acb      	subs	r3, r1, r3
 80003fe:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000402:	e778      	b.n	80002f6 <__udivmoddi4+0xbe>
 8000404:	f1c6 0c20 	rsb	ip, r6, #32
 8000408:	fa03 f406 	lsl.w	r4, r3, r6
 800040c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000410:	431c      	orrs	r4, r3
 8000412:	fa20 f70c 	lsr.w	r7, r0, ip
 8000416:	fa01 f306 	lsl.w	r3, r1, r6
 800041a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800041e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000422:	431f      	orrs	r7, r3
 8000424:	0c3b      	lsrs	r3, r7, #16
 8000426:	fbb1 f9fe 	udiv	r9, r1, lr
 800042a:	fa1f f884 	uxth.w	r8, r4
 800042e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000432:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000436:	fb09 fa08 	mul.w	sl, r9, r8
 800043a:	458a      	cmp	sl, r1
 800043c:	fa02 f206 	lsl.w	r2, r2, r6
 8000440:	fa00 f306 	lsl.w	r3, r0, r6
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x220>
 8000446:	1861      	adds	r1, r4, r1
 8000448:	f109 30ff 	add.w	r0, r9, #4294967295
 800044c:	d248      	bcs.n	80004e0 <__udivmoddi4+0x2a8>
 800044e:	458a      	cmp	sl, r1
 8000450:	d946      	bls.n	80004e0 <__udivmoddi4+0x2a8>
 8000452:	f1a9 0902 	sub.w	r9, r9, #2
 8000456:	4421      	add	r1, r4
 8000458:	eba1 010a 	sub.w	r1, r1, sl
 800045c:	b2bf      	uxth	r7, r7
 800045e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000462:	fb0e 1110 	mls	r1, lr, r0, r1
 8000466:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800046a:	fb00 f808 	mul.w	r8, r0, r8
 800046e:	45b8      	cmp	r8, r7
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x24a>
 8000472:	19e7      	adds	r7, r4, r7
 8000474:	f100 31ff 	add.w	r1, r0, #4294967295
 8000478:	d22e      	bcs.n	80004d8 <__udivmoddi4+0x2a0>
 800047a:	45b8      	cmp	r8, r7
 800047c:	d92c      	bls.n	80004d8 <__udivmoddi4+0x2a0>
 800047e:	3802      	subs	r0, #2
 8000480:	4427      	add	r7, r4
 8000482:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000486:	eba7 0708 	sub.w	r7, r7, r8
 800048a:	fba0 8902 	umull	r8, r9, r0, r2
 800048e:	454f      	cmp	r7, r9
 8000490:	46c6      	mov	lr, r8
 8000492:	4649      	mov	r1, r9
 8000494:	d31a      	bcc.n	80004cc <__udivmoddi4+0x294>
 8000496:	d017      	beq.n	80004c8 <__udivmoddi4+0x290>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x27a>
 800049a:	ebb3 020e 	subs.w	r2, r3, lr
 800049e:	eb67 0701 	sbc.w	r7, r7, r1
 80004a2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004a6:	40f2      	lsrs	r2, r6
 80004a8:	ea4c 0202 	orr.w	r2, ip, r2
 80004ac:	40f7      	lsrs	r7, r6
 80004ae:	e9c5 2700 	strd	r2, r7, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	462e      	mov	r6, r5
 80004bc:	4628      	mov	r0, r5
 80004be:	e70b      	b.n	80002d8 <__udivmoddi4+0xa0>
 80004c0:	4606      	mov	r6, r0
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0x60>
 80004c4:	4618      	mov	r0, r3
 80004c6:	e6fd      	b.n	80002c4 <__udivmoddi4+0x8c>
 80004c8:	4543      	cmp	r3, r8
 80004ca:	d2e5      	bcs.n	8000498 <__udivmoddi4+0x260>
 80004cc:	ebb8 0e02 	subs.w	lr, r8, r2
 80004d0:	eb69 0104 	sbc.w	r1, r9, r4
 80004d4:	3801      	subs	r0, #1
 80004d6:	e7df      	b.n	8000498 <__udivmoddi4+0x260>
 80004d8:	4608      	mov	r0, r1
 80004da:	e7d2      	b.n	8000482 <__udivmoddi4+0x24a>
 80004dc:	4660      	mov	r0, ip
 80004de:	e78d      	b.n	80003fc <__udivmoddi4+0x1c4>
 80004e0:	4681      	mov	r9, r0
 80004e2:	e7b9      	b.n	8000458 <__udivmoddi4+0x220>
 80004e4:	4666      	mov	r6, ip
 80004e6:	e775      	b.n	80003d4 <__udivmoddi4+0x19c>
 80004e8:	4630      	mov	r0, r6
 80004ea:	e74a      	b.n	8000382 <__udivmoddi4+0x14a>
 80004ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f0:	4439      	add	r1, r7
 80004f2:	e713      	b.n	800031c <__udivmoddi4+0xe4>
 80004f4:	3802      	subs	r0, #2
 80004f6:	443c      	add	r4, r7
 80004f8:	e724      	b.n	8000344 <__udivmoddi4+0x10c>
 80004fa:	bf00      	nop

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <hdr_calculate_moments>:
#include "hdr_feature_extraction.h"
#include "math.h"
#include "string.h"

int8_t hdr_calculate_moments(IMAGE_HandleTypeDef * img, HDR_FtrExtOutput *output)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	ed2d 8b02 	vpush	{d8}
 8000506:	b088      	sub	sp, #32
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
 800050c:	6039      	str	r1, [r7, #0]
	if (img->format != IMAGE_FORMAT_GRAYSCALE)
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	7a1b      	ldrb	r3, [r3, #8]
 8000512:	2b01      	cmp	r3, #1
 8000514:	d002      	beq.n	800051c <hdr_calculate_moments+0x1c>
	{
		return -1;
 8000516:	f04f 33ff 	mov.w	r3, #4294967295
 800051a:	e229      	b.n	8000970 <hdr_calculate_moments+0x470>
	}
	memset(output, 0, sizeof(HDR_FtrExtOutput));
 800051c:	22dc      	movs	r2, #220	; 0xdc
 800051e:	2100      	movs	r1, #0
 8000520:	6838      	ldr	r0, [r7, #0]
 8000522:	f008 f883 	bl	800862c <memset>
    for(uint32_t c = 0; c < img->width; c++)
 8000526:	2300      	movs	r3, #0
 8000528:	61fb      	str	r3, [r7, #28]
 800052a:	e079      	b.n	8000620 <hdr_calculate_moments+0x120>
    {
        for (uint32_t r = 0; r < img->height; r++)
 800052c:	2300      	movs	r3, #0
 800052e:	61bb      	str	r3, [r7, #24]
 8000530:	e06d      	b.n	800060e <hdr_calculate_moments+0x10e>
        {
            for(uint32_t i = 0; i < 4; i++)
 8000532:	2300      	movs	r3, #0
 8000534:	617b      	str	r3, [r7, #20]
 8000536:	e064      	b.n	8000602 <hdr_calculate_moments+0x102>
            {
                for(uint32_t j = 0; j < 4 - i; j++)
 8000538:	2300      	movs	r3, #0
 800053a:	613b      	str	r3, [r7, #16]
 800053c:	e058      	b.n	80005f0 <hdr_calculate_moments+0xf0>
                {
                	output->moments[i][j] += powf((float)c, (float)i) * powf((float)r, (float)j) * ((float)(img->pData[c * img->height + r] > 0.0f));
 800053e:	69fb      	ldr	r3, [r7, #28]
 8000540:	ee07 3a90 	vmov	s15, r3
 8000544:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000548:	697b      	ldr	r3, [r7, #20]
 800054a:	ee07 3a10 	vmov	s14, r3
 800054e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8000552:	eef0 0a47 	vmov.f32	s1, s14
 8000556:	eeb0 0a67 	vmov.f32	s0, s15
 800055a:	f008 f8a7 	bl	80086ac <powf>
 800055e:	eeb0 8a40 	vmov.f32	s16, s0
 8000562:	69bb      	ldr	r3, [r7, #24]
 8000564:	ee07 3a90 	vmov	s15, r3
 8000568:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800056c:	693b      	ldr	r3, [r7, #16]
 800056e:	ee07 3a10 	vmov	s14, r3
 8000572:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8000576:	eef0 0a47 	vmov.f32	s1, s14
 800057a:	eeb0 0a67 	vmov.f32	s0, s15
 800057e:	f008 f895 	bl	80086ac <powf>
 8000582:	eef0 7a40 	vmov.f32	s15, s0
 8000586:	ee68 7a27 	vmul.f32	s15, s16, s15
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	681a      	ldr	r2, [r3, #0]
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	88db      	ldrh	r3, [r3, #6]
 8000592:	4619      	mov	r1, r3
 8000594:	69fb      	ldr	r3, [r7, #28]
 8000596:	fb03 f101 	mul.w	r1, r3, r1
 800059a:	69bb      	ldr	r3, [r7, #24]
 800059c:	440b      	add	r3, r1
 800059e:	4413      	add	r3, r2
 80005a0:	781b      	ldrb	r3, [r3, #0]
 80005a2:	ee07 3a10 	vmov	s14, r3
 80005a6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80005aa:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80005ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80005b2:	dd02      	ble.n	80005ba <hdr_calculate_moments+0xba>
 80005b4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80005b8:	e001      	b.n	80005be <hdr_calculate_moments+0xbe>
 80005ba:	ed9f 7ada 	vldr	s14, [pc, #872]	; 8000924 <hdr_calculate_moments+0x424>
 80005be:	ee27 7a27 	vmul.f32	s14, s14, s15
 80005c2:	683a      	ldr	r2, [r7, #0]
 80005c4:	697b      	ldr	r3, [r7, #20]
 80005c6:	0099      	lsls	r1, r3, #2
 80005c8:	693b      	ldr	r3, [r7, #16]
 80005ca:	440b      	add	r3, r1
 80005cc:	009b      	lsls	r3, r3, #2
 80005ce:	4413      	add	r3, r2
 80005d0:	edd3 7a00 	vldr	s15, [r3]
 80005d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80005d8:	683a      	ldr	r2, [r7, #0]
 80005da:	697b      	ldr	r3, [r7, #20]
 80005dc:	0099      	lsls	r1, r3, #2
 80005de:	693b      	ldr	r3, [r7, #16]
 80005e0:	440b      	add	r3, r1
 80005e2:	009b      	lsls	r3, r3, #2
 80005e4:	4413      	add	r3, r2
 80005e6:	edc3 7a00 	vstr	s15, [r3]
                for(uint32_t j = 0; j < 4 - i; j++)
 80005ea:	693b      	ldr	r3, [r7, #16]
 80005ec:	3301      	adds	r3, #1
 80005ee:	613b      	str	r3, [r7, #16]
 80005f0:	697b      	ldr	r3, [r7, #20]
 80005f2:	f1c3 0304 	rsb	r3, r3, #4
 80005f6:	693a      	ldr	r2, [r7, #16]
 80005f8:	429a      	cmp	r2, r3
 80005fa:	d3a0      	bcc.n	800053e <hdr_calculate_moments+0x3e>
            for(uint32_t i = 0; i < 4; i++)
 80005fc:	697b      	ldr	r3, [r7, #20]
 80005fe:	3301      	adds	r3, #1
 8000600:	617b      	str	r3, [r7, #20]
 8000602:	697b      	ldr	r3, [r7, #20]
 8000604:	2b03      	cmp	r3, #3
 8000606:	d997      	bls.n	8000538 <hdr_calculate_moments+0x38>
        for (uint32_t r = 0; r < img->height; r++)
 8000608:	69bb      	ldr	r3, [r7, #24]
 800060a:	3301      	adds	r3, #1
 800060c:	61bb      	str	r3, [r7, #24]
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	88db      	ldrh	r3, [r3, #6]
 8000612:	461a      	mov	r2, r3
 8000614:	69bb      	ldr	r3, [r7, #24]
 8000616:	4293      	cmp	r3, r2
 8000618:	d38b      	bcc.n	8000532 <hdr_calculate_moments+0x32>
    for(uint32_t c = 0; c < img->width; c++)
 800061a:	69fb      	ldr	r3, [r7, #28]
 800061c:	3301      	adds	r3, #1
 800061e:	61fb      	str	r3, [r7, #28]
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	889b      	ldrh	r3, [r3, #4]
 8000624:	461a      	mov	r2, r3
 8000626:	69fb      	ldr	r3, [r7, #28]
 8000628:	4293      	cmp	r3, r2
 800062a:	f4ff af7f 	bcc.w	800052c <hdr_calculate_moments+0x2c>
                }
            }
        }
    }

    float centroid_x = output->moments[1][0] / output->moments[0][0];
 800062e:	683b      	ldr	r3, [r7, #0]
 8000630:	edd3 6a04 	vldr	s13, [r3, #16]
 8000634:	683b      	ldr	r3, [r7, #0]
 8000636:	ed93 7a00 	vldr	s14, [r3]
 800063a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800063e:	edc7 7a03 	vstr	s15, [r7, #12]
    float centroid_y = output->moments[0][1] / output->moments[0][0];
 8000642:	683b      	ldr	r3, [r7, #0]
 8000644:	edd3 6a01 	vldr	s13, [r3, #4]
 8000648:	683b      	ldr	r3, [r7, #0]
 800064a:	ed93 7a00 	vldr	s14, [r3]
 800064e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000652:	edc7 7a02 	vstr	s15, [r7, #8]
    output->mu[1][1] = fmaxf(output->moments[1][1] - centroid_x * output->moments[0][1],0);
 8000656:	683b      	ldr	r3, [r7, #0]
 8000658:	ed93 7a05 	vldr	s14, [r3, #20]
 800065c:	683b      	ldr	r3, [r7, #0]
 800065e:	edd3 6a01 	vldr	s13, [r3, #4]
 8000662:	edd7 7a03 	vldr	s15, [r7, #12]
 8000666:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800066a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800066e:	eddf 0aad 	vldr	s1, [pc, #692]	; 8000924 <hdr_calculate_moments+0x424>
 8000672:	eeb0 0a67 	vmov.f32	s0, s15
 8000676:	f007 ffe1 	bl	800863c <fmaxf>
 800067a:	eef0 7a40 	vmov.f32	s15, s0
 800067e:	683b      	ldr	r3, [r7, #0]
 8000680:	edc3 7a25 	vstr	s15, [r3, #148]	; 0x94
    output->mu[2][0] = fmaxf(output->moments[2][0] - centroid_x * output->moments[1][0],0);
 8000684:	683b      	ldr	r3, [r7, #0]
 8000686:	ed93 7a08 	vldr	s14, [r3, #32]
 800068a:	683b      	ldr	r3, [r7, #0]
 800068c:	edd3 6a04 	vldr	s13, [r3, #16]
 8000690:	edd7 7a03 	vldr	s15, [r7, #12]
 8000694:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000698:	ee77 7a67 	vsub.f32	s15, s14, s15
 800069c:	eddf 0aa1 	vldr	s1, [pc, #644]	; 8000924 <hdr_calculate_moments+0x424>
 80006a0:	eeb0 0a67 	vmov.f32	s0, s15
 80006a4:	f007 ffca 	bl	800863c <fmaxf>
 80006a8:	eef0 7a40 	vmov.f32	s15, s0
 80006ac:	683b      	ldr	r3, [r7, #0]
 80006ae:	edc3 7a28 	vstr	s15, [r3, #160]	; 0xa0
    output->mu[0][2] = fmaxf(output->moments[0][2] - centroid_y * output->moments[0][1],0);
 80006b2:	683b      	ldr	r3, [r7, #0]
 80006b4:	ed93 7a02 	vldr	s14, [r3, #8]
 80006b8:	683b      	ldr	r3, [r7, #0]
 80006ba:	edd3 6a01 	vldr	s13, [r3, #4]
 80006be:	edd7 7a02 	vldr	s15, [r7, #8]
 80006c2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80006c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80006ca:	eddf 0a96 	vldr	s1, [pc, #600]	; 8000924 <hdr_calculate_moments+0x424>
 80006ce:	eeb0 0a67 	vmov.f32	s0, s15
 80006d2:	f007 ffb3 	bl	800863c <fmaxf>
 80006d6:	eef0 7a40 	vmov.f32	s15, s0
 80006da:	683b      	ldr	r3, [r7, #0]
 80006dc:	edc3 7a22 	vstr	s15, [r3, #136]	; 0x88
    output->mu[3][0] = fmaxf(output->moments[3][0] - 3 * centroid_x * output->moments[2][0] + 2 * powf(centroid_x, 2) * output->moments[1][0], 0);
 80006e0:	683b      	ldr	r3, [r7, #0]
 80006e2:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 80006e6:	edd7 7a03 	vldr	s15, [r7, #12]
 80006ea:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 80006ee:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80006f2:	683b      	ldr	r3, [r7, #0]
 80006f4:	edd3 7a08 	vldr	s15, [r3, #32]
 80006f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80006fc:	ee37 8a67 	vsub.f32	s16, s14, s15
 8000700:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8000704:	ed97 0a03 	vldr	s0, [r7, #12]
 8000708:	f007 ffd0 	bl	80086ac <powf>
 800070c:	eef0 7a40 	vmov.f32	s15, s0
 8000710:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8000714:	683b      	ldr	r3, [r7, #0]
 8000716:	edd3 7a04 	vldr	s15, [r3, #16]
 800071a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800071e:	ee78 7a27 	vadd.f32	s15, s16, s15
 8000722:	eddf 0a80 	vldr	s1, [pc, #512]	; 8000924 <hdr_calculate_moments+0x424>
 8000726:	eeb0 0a67 	vmov.f32	s0, s15
 800072a:	f007 ff87 	bl	800863c <fmaxf>
 800072e:	eef0 7a40 	vmov.f32	s15, s0
 8000732:	683b      	ldr	r3, [r7, #0]
 8000734:	edc3 7a2c 	vstr	s15, [r3, #176]	; 0xb0
    output->mu[2][1] = fmaxf(output->moments[2][1] - 2 * centroid_x * output->moments[1][1] - centroid_y * output->moments[2][0] + 2 * powf(centroid_x, 2) * output->moments[0][1],0);
 8000738:	683b      	ldr	r3, [r7, #0]
 800073a:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 800073e:	edd7 7a03 	vldr	s15, [r7, #12]
 8000742:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8000746:	683b      	ldr	r3, [r7, #0]
 8000748:	edd3 7a05 	vldr	s15, [r3, #20]
 800074c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000750:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000754:	683b      	ldr	r3, [r7, #0]
 8000756:	edd3 6a08 	vldr	s13, [r3, #32]
 800075a:	edd7 7a02 	vldr	s15, [r7, #8]
 800075e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000762:	ee37 8a67 	vsub.f32	s16, s14, s15
 8000766:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 800076a:	ed97 0a03 	vldr	s0, [r7, #12]
 800076e:	f007 ff9d 	bl	80086ac <powf>
 8000772:	eef0 7a40 	vmov.f32	s15, s0
 8000776:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800077a:	683b      	ldr	r3, [r7, #0]
 800077c:	edd3 7a01 	vldr	s15, [r3, #4]
 8000780:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000784:	ee78 7a27 	vadd.f32	s15, s16, s15
 8000788:	eddf 0a66 	vldr	s1, [pc, #408]	; 8000924 <hdr_calculate_moments+0x424>
 800078c:	eeb0 0a67 	vmov.f32	s0, s15
 8000790:	f007 ff54 	bl	800863c <fmaxf>
 8000794:	eef0 7a40 	vmov.f32	s15, s0
 8000798:	683b      	ldr	r3, [r7, #0]
 800079a:	edc3 7a29 	vstr	s15, [r3, #164]	; 0xa4
    output->mu[1][2] = fmaxf(output->moments[1][2] - 2 * centroid_y * output->moments[1][1] - centroid_x * output->moments[0][2] + 2 * powf(centroid_y, 2) * output->moments[1][0],0);
 800079e:	683b      	ldr	r3, [r7, #0]
 80007a0:	ed93 7a06 	vldr	s14, [r3, #24]
 80007a4:	edd7 7a02 	vldr	s15, [r7, #8]
 80007a8:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80007ac:	683b      	ldr	r3, [r7, #0]
 80007ae:	edd3 7a05 	vldr	s15, [r3, #20]
 80007b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80007b6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80007ba:	683b      	ldr	r3, [r7, #0]
 80007bc:	edd3 6a02 	vldr	s13, [r3, #8]
 80007c0:	edd7 7a03 	vldr	s15, [r7, #12]
 80007c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80007c8:	ee37 8a67 	vsub.f32	s16, s14, s15
 80007cc:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80007d0:	ed97 0a02 	vldr	s0, [r7, #8]
 80007d4:	f007 ff6a 	bl	80086ac <powf>
 80007d8:	eef0 7a40 	vmov.f32	s15, s0
 80007dc:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80007e0:	683b      	ldr	r3, [r7, #0]
 80007e2:	edd3 7a04 	vldr	s15, [r3, #16]
 80007e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80007ea:	ee78 7a27 	vadd.f32	s15, s16, s15
 80007ee:	eddf 0a4d 	vldr	s1, [pc, #308]	; 8000924 <hdr_calculate_moments+0x424>
 80007f2:	eeb0 0a67 	vmov.f32	s0, s15
 80007f6:	f007 ff21 	bl	800863c <fmaxf>
 80007fa:	eef0 7a40 	vmov.f32	s15, s0
 80007fe:	683b      	ldr	r3, [r7, #0]
 8000800:	edc3 7a26 	vstr	s15, [r3, #152]	; 0x98
    output->mu[0][3] = fmaxf(output->moments[0][3] - 3 * centroid_y * output->moments[0][2] + 2 * powf(centroid_y, 2) * output->moments[0][1], 0);
 8000804:	683b      	ldr	r3, [r7, #0]
 8000806:	ed93 7a03 	vldr	s14, [r3, #12]
 800080a:	edd7 7a02 	vldr	s15, [r7, #8]
 800080e:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8000812:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8000816:	683b      	ldr	r3, [r7, #0]
 8000818:	edd3 7a02 	vldr	s15, [r3, #8]
 800081c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000820:	ee37 8a67 	vsub.f32	s16, s14, s15
 8000824:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8000828:	ed97 0a02 	vldr	s0, [r7, #8]
 800082c:	f007 ff3e 	bl	80086ac <powf>
 8000830:	eef0 7a40 	vmov.f32	s15, s0
 8000834:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8000838:	683b      	ldr	r3, [r7, #0]
 800083a:	edd3 7a01 	vldr	s15, [r3, #4]
 800083e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000842:	ee78 7a27 	vadd.f32	s15, s16, s15
 8000846:	eddf 0a37 	vldr	s1, [pc, #220]	; 8000924 <hdr_calculate_moments+0x424>
 800084a:	eeb0 0a67 	vmov.f32	s0, s15
 800084e:	f007 fef5 	bl	800863c <fmaxf>
 8000852:	eef0 7a40 	vmov.f32	s15, s0
 8000856:	683b      	ldr	r3, [r7, #0]
 8000858:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c
    output->nu[2][0] = output->mu[2][0] / powf(output->moments[0][0], 2.0);
 800085c:	683b      	ldr	r3, [r7, #0]
 800085e:	ed93 8a28 	vldr	s16, [r3, #160]	; 0xa0
 8000862:	683b      	ldr	r3, [r7, #0]
 8000864:	edd3 7a00 	vldr	s15, [r3]
 8000868:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 800086c:	eeb0 0a67 	vmov.f32	s0, s15
 8000870:	f007 ff1c 	bl	80086ac <powf>
 8000874:	eeb0 7a40 	vmov.f32	s14, s0
 8000878:	eec8 7a07 	vdiv.f32	s15, s16, s14
 800087c:	683b      	ldr	r3, [r7, #0]
 800087e:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
    output->nu[1][1] = output->mu[1][1] / powf(output->moments[0][0], 2.0);
 8000882:	683b      	ldr	r3, [r7, #0]
 8000884:	ed93 8a25 	vldr	s16, [r3, #148]	; 0x94
 8000888:	683b      	ldr	r3, [r7, #0]
 800088a:	edd3 7a00 	vldr	s15, [r3]
 800088e:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8000892:	eeb0 0a67 	vmov.f32	s0, s15
 8000896:	f007 ff09 	bl	80086ac <powf>
 800089a:	eeb0 7a40 	vmov.f32	s14, s0
 800089e:	eec8 7a07 	vdiv.f32	s15, s16, s14
 80008a2:	683b      	ldr	r3, [r7, #0]
 80008a4:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
    output->nu[0][2] = output->mu[0][2] / powf(output->moments[0][0], 2.0);
 80008a8:	683b      	ldr	r3, [r7, #0]
 80008aa:	ed93 8a22 	vldr	s16, [r3, #136]	; 0x88
 80008ae:	683b      	ldr	r3, [r7, #0]
 80008b0:	edd3 7a00 	vldr	s15, [r3]
 80008b4:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80008b8:	eeb0 0a67 	vmov.f32	s0, s15
 80008bc:	f007 fef6 	bl	80086ac <powf>
 80008c0:	eeb0 7a40 	vmov.f32	s14, s0
 80008c4:	eec8 7a07 	vdiv.f32	s15, s16, s14
 80008c8:	683b      	ldr	r3, [r7, #0]
 80008ca:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
    output->nu[3][0] = output->mu[3][0] / powf(output->moments[0][0], 2.5);
 80008ce:	683b      	ldr	r3, [r7, #0]
 80008d0:	ed93 8a2c 	vldr	s16, [r3, #176]	; 0xb0
 80008d4:	683b      	ldr	r3, [r7, #0]
 80008d6:	edd3 7a00 	vldr	s15, [r3]
 80008da:	eef0 0a04 	vmov.f32	s1, #4	; 0x40200000  2.5
 80008de:	eeb0 0a67 	vmov.f32	s0, s15
 80008e2:	f007 fee3 	bl	80086ac <powf>
 80008e6:	eeb0 7a40 	vmov.f32	s14, s0
 80008ea:	eec8 7a07 	vdiv.f32	s15, s16, s14
 80008ee:	683b      	ldr	r3, [r7, #0]
 80008f0:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
    output->nu[2][1] = output->mu[2][1] / powf(output->moments[0][0], 2.5);
 80008f4:	683b      	ldr	r3, [r7, #0]
 80008f6:	ed93 8a29 	vldr	s16, [r3, #164]	; 0xa4
 80008fa:	683b      	ldr	r3, [r7, #0]
 80008fc:	edd3 7a00 	vldr	s15, [r3]
 8000900:	eef0 0a04 	vmov.f32	s1, #4	; 0x40200000  2.5
 8000904:	eeb0 0a67 	vmov.f32	s0, s15
 8000908:	f007 fed0 	bl	80086ac <powf>
 800090c:	eeb0 7a40 	vmov.f32	s14, s0
 8000910:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8000914:	683b      	ldr	r3, [r7, #0]
 8000916:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
    output->nu[1][2] = output->mu[1][2] / powf(output->moments[0][0], 2.5);
 800091a:	683b      	ldr	r3, [r7, #0]
 800091c:	ed93 8a26 	vldr	s16, [r3, #152]	; 0x98
 8000920:	e002      	b.n	8000928 <hdr_calculate_moments+0x428>
 8000922:	bf00      	nop
 8000924:	00000000 	.word	0x00000000
 8000928:	683b      	ldr	r3, [r7, #0]
 800092a:	edd3 7a00 	vldr	s15, [r3]
 800092e:	eef0 0a04 	vmov.f32	s1, #4	; 0x40200000  2.5
 8000932:	eeb0 0a67 	vmov.f32	s0, s15
 8000936:	f007 feb9 	bl	80086ac <powf>
 800093a:	eeb0 7a40 	vmov.f32	s14, s0
 800093e:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8000942:	683b      	ldr	r3, [r7, #0]
 8000944:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
    output->nu[0][3] = output->mu[0][3] / powf(output->moments[0][0], 2.5);
 8000948:	683b      	ldr	r3, [r7, #0]
 800094a:	ed93 8a23 	vldr	s16, [r3, #140]	; 0x8c
 800094e:	683b      	ldr	r3, [r7, #0]
 8000950:	edd3 7a00 	vldr	s15, [r3]
 8000954:	eef0 0a04 	vmov.f32	s1, #4	; 0x40200000  2.5
 8000958:	eeb0 0a67 	vmov.f32	s0, s15
 800095c:	f007 fea6 	bl	80086ac <powf>
 8000960:	eeb0 7a40 	vmov.f32	s14, s0
 8000964:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8000968:	683b      	ldr	r3, [r7, #0]
 800096a:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
    return 0;
 800096e:	2300      	movs	r3, #0
}
 8000970:	4618      	mov	r0, r3
 8000972:	3720      	adds	r7, #32
 8000974:	46bd      	mov	sp, r7
 8000976:	ecbd 8b02 	vpop	{d8}
 800097a:	bd80      	pop	{r7, pc}

0800097c <hdr_calculate_hu_moments>:


void hdr_calculate_hu_moments(HDR_FtrExtOutput *output)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	ed2d 8b04 	vpush	{d8-d9}
 8000982:	b082      	sub	sp, #8
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
	output->hu_moments[0] = output->nu[2][0] + output->nu[0][2];
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	ed93 7a18 	vldr	s14, [r3, #96]	; 0x60
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8000994:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	edc3 7a30 	vstr	s15, [r3, #192]	; 0xc0
	output->hu_moments[1] = powf(output->nu[2][0] - output->nu[0][2], 2) + 4 * powf(output->nu[1][1], 2);
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	ed93 7a18 	vldr	s14, [r3, #96]	; 0x60
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 80009aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80009ae:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80009b2:	eeb0 0a67 	vmov.f32	s0, s15
 80009b6:	f007 fe79 	bl	80086ac <powf>
 80009ba:	eeb0 8a40 	vmov.f32	s16, s0
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80009c4:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80009c8:	eeb0 0a67 	vmov.f32	s0, s15
 80009cc:	f007 fe6e 	bl	80086ac <powf>
 80009d0:	eef0 7a40 	vmov.f32	s15, s0
 80009d4:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80009d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80009dc:	ee78 7a27 	vadd.f32	s15, s16, s15
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	edc3 7a31 	vstr	s15, [r3, #196]	; 0xc4
	output->hu_moments[2] = powf(output->nu[3][0] -3 * output->nu[1][2], 2) + powf(3 * output->nu[2][1] - output->nu[0][3], 2);
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	ed93 7a1c 	vldr	s14, [r3, #112]	; 0x70
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 80009f2:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 80009f6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80009fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80009fe:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8000a02:	eeb0 0a67 	vmov.f32	s0, s15
 8000a06:	f007 fe51 	bl	80086ac <powf>
 8000a0a:	eeb0 8a40 	vmov.f32	s16, s0
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8000a14:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8000a18:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8000a22:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000a26:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8000a2a:	eeb0 0a67 	vmov.f32	s0, s15
 8000a2e:	f007 fe3d 	bl	80086ac <powf>
 8000a32:	eef0 7a40 	vmov.f32	s15, s0
 8000a36:	ee78 7a27 	vadd.f32	s15, s16, s15
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	edc3 7a32 	vstr	s15, [r3, #200]	; 0xc8
	output->hu_moments[3] = powf(output->nu[3][0] + output->nu[1][2], 2) + powf(output->nu[2][1] + output->nu[0][3], 2);
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	ed93 7a1c 	vldr	s14, [r3, #112]	; 0x70
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8000a4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000a50:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8000a54:	eeb0 0a67 	vmov.f32	s0, s15
 8000a58:	f007 fe28 	bl	80086ac <powf>
 8000a5c:	eeb0 8a40 	vmov.f32	s16, s0
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	ed93 7a19 	vldr	s14, [r3, #100]	; 0x64
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8000a6c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000a70:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8000a74:	eeb0 0a67 	vmov.f32	s0, s15
 8000a78:	f007 fe18 	bl	80086ac <powf>
 8000a7c:	eef0 7a40 	vmov.f32	s15, s0
 8000a80:	ee78 7a27 	vadd.f32	s15, s16, s15
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	edc3 7a33 	vstr	s15, [r3, #204]	; 0xcc
	output->hu_moments[4] = (output->nu[3][0] - 3 * output->nu[1][2])
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	ed93 7a1c 	vldr	s14, [r3, #112]	; 0x70
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8000a96:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8000a9a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000a9e:	ee37 7a67 	vsub.f32	s14, s14, s15
					* (output->nu[3][0] + output->nu[1][2])
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	edd3 6a1c 	vldr	s13, [r3, #112]	; 0x70
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8000aae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8000ab2:	ee27 8a27 	vmul.f32	s16, s14, s15
					* (powf(output->nu[3][0] + output->nu[1][2], 2) - 3 * powf(output->nu[2][1] + output->nu[0][3], 2))
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	ed93 7a1c 	vldr	s14, [r3, #112]	; 0x70
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8000ac2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ac6:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8000aca:	eeb0 0a67 	vmov.f32	s0, s15
 8000ace:	f007 fded 	bl	80086ac <powf>
 8000ad2:	eef0 8a40 	vmov.f32	s17, s0
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	ed93 7a19 	vldr	s14, [r3, #100]	; 0x64
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8000ae2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ae6:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8000aea:	eeb0 0a67 	vmov.f32	s0, s15
 8000aee:	f007 fddd 	bl	80086ac <powf>
 8000af2:	eef0 7a40 	vmov.f32	s15, s0
 8000af6:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8000afa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000afe:	ee78 7ae7 	vsub.f32	s15, s17, s15
 8000b02:	ee28 8a27 	vmul.f32	s16, s16, s15
					+ (3 * output->nu[2][1] - output->nu[0][3])
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8000b0c:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8000b10:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8000b1a:	ee37 7a67 	vsub.f32	s14, s14, s15
					* (output->nu[2][1] + output->nu[0][3])
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	edd3 6a19 	vldr	s13, [r3, #100]	; 0x64
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8000b2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8000b2e:	ee67 8a27 	vmul.f32	s17, s14, s15
					* (3 * powf(output->nu[3][0] + output->nu[1][2], 2) - powf(output->nu[2][1] + output->nu[0][3],2));
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	ed93 7a1c 	vldr	s14, [r3, #112]	; 0x70
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8000b3e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b42:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8000b46:	eeb0 0a67 	vmov.f32	s0, s15
 8000b4a:	f007 fdaf 	bl	80086ac <powf>
 8000b4e:	eef0 7a40 	vmov.f32	s15, s0
 8000b52:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8000b56:	ee27 9a87 	vmul.f32	s18, s15, s14
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	ed93 7a19 	vldr	s14, [r3, #100]	; 0x64
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8000b66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b6a:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8000b6e:	eeb0 0a67 	vmov.f32	s0, s15
 8000b72:	f007 fd9b 	bl	80086ac <powf>
 8000b76:	eef0 7a40 	vmov.f32	s15, s0
 8000b7a:	ee79 7a67 	vsub.f32	s15, s18, s15
 8000b7e:	ee68 7aa7 	vmul.f32	s15, s17, s15
					+ (3 * output->nu[2][1] - output->nu[0][3])
 8000b82:	ee78 7a27 	vadd.f32	s15, s16, s15
	output->hu_moments[4] = (output->nu[3][0] - 3 * output->nu[1][2])
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	edc3 7a34 	vstr	s15, [r3, #208]	; 0xd0
	output->hu_moments[5] = (output->nu[2][0]- output->nu[0][2])
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	ed93 7a18 	vldr	s14, [r3, #96]	; 0x60
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8000b98:	ee37 8a67 	vsub.f32	s16, s14, s15
					* (powf(output->nu[3][0]+ output->nu[1][2],2) - powf(output->nu[2][1] + output->nu[0][3],2))
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	ed93 7a1c 	vldr	s14, [r3, #112]	; 0x70
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8000ba8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000bac:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8000bb0:	eeb0 0a67 	vmov.f32	s0, s15
 8000bb4:	f007 fd7a 	bl	80086ac <powf>
 8000bb8:	eef0 8a40 	vmov.f32	s17, s0
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	ed93 7a19 	vldr	s14, [r3, #100]	; 0x64
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8000bc8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000bcc:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8000bd0:	eeb0 0a67 	vmov.f32	s0, s15
 8000bd4:	f007 fd6a 	bl	80086ac <powf>
 8000bd8:	eef0 7a40 	vmov.f32	s15, s0
 8000bdc:	ee78 7ae7 	vsub.f32	s15, s17, s15
 8000be0:	ee28 7a27 	vmul.f32	s14, s16, s15
					+ 4 * output->nu[1][1] * (output->nu[3][0] + output->nu[1][2]) * (output->nu[2][1] + output->nu[0][3]);
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8000bea:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8000bee:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	ed93 6a1c 	vldr	s12, [r3, #112]	; 0x70
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8000bfe:	ee76 7a27 	vadd.f32	s15, s12, s15
 8000c02:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	ed93 6a19 	vldr	s12, [r3, #100]	; 0x64
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8000c12:	ee76 7a27 	vadd.f32	s15, s12, s15
 8000c16:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000c1a:	ee77 7a27 	vadd.f32	s15, s14, s15
	output->hu_moments[5] = (output->nu[2][0]- output->nu[0][2])
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	edc3 7a35 	vstr	s15, [r3, #212]	; 0xd4
	output->hu_moments[6] = (3 * output->nu[2][1] - output->nu[0][3])
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8000c2a:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8000c2e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8000c38:	ee37 7a67 	vsub.f32	s14, s14, s15
					* (output->nu[3][0] + output->nu[1][2])
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	edd3 6a1c 	vldr	s13, [r3, #112]	; 0x70
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8000c48:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8000c4c:	ee27 8a27 	vmul.f32	s16, s14, s15
					* (powf(output->nu[3][0] + output->nu[1][2], 2) - 3 * powf(output->nu[2][1] + output->nu[0][3], 2))
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	ed93 7a1c 	vldr	s14, [r3, #112]	; 0x70
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8000c5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c60:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8000c64:	eeb0 0a67 	vmov.f32	s0, s15
 8000c68:	f007 fd20 	bl	80086ac <powf>
 8000c6c:	eef0 8a40 	vmov.f32	s17, s0
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	ed93 7a19 	vldr	s14, [r3, #100]	; 0x64
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8000c7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c80:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8000c84:	eeb0 0a67 	vmov.f32	s0, s15
 8000c88:	f007 fd10 	bl	80086ac <powf>
 8000c8c:	eef0 7a40 	vmov.f32	s15, s0
 8000c90:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8000c94:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c98:	ee78 7ae7 	vsub.f32	s15, s17, s15
 8000c9c:	ee28 8a27 	vmul.f32	s16, s16, s15
					- (output->nu[3][0]-3 * output->nu[1][2]) * (output->nu[2][1] + output->nu[0][3]) * (3 * powf(output->nu[3][0] + output->nu[1][2],2) - powf(output->nu[2][1] + output->nu[0][3], 2));
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	ed93 7a1c 	vldr	s14, [r3, #112]	; 0x70
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8000cac:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8000cb0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000cb4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	edd3 6a19 	vldr	s13, [r3, #100]	; 0x64
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8000cc4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8000cc8:	ee67 8a27 	vmul.f32	s17, s14, s15
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	ed93 7a1c 	vldr	s14, [r3, #112]	; 0x70
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8000cd8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000cdc:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8000ce0:	eeb0 0a67 	vmov.f32	s0, s15
 8000ce4:	f007 fce2 	bl	80086ac <powf>
 8000ce8:	eef0 7a40 	vmov.f32	s15, s0
 8000cec:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8000cf0:	ee27 9a87 	vmul.f32	s18, s15, s14
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	ed93 7a19 	vldr	s14, [r3, #100]	; 0x64
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8000d00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d04:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8000d08:	eeb0 0a67 	vmov.f32	s0, s15
 8000d0c:	f007 fcce 	bl	80086ac <powf>
 8000d10:	eef0 7a40 	vmov.f32	s15, s0
 8000d14:	ee79 7a67 	vsub.f32	s15, s18, s15
 8000d18:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8000d1c:	ee78 7a67 	vsub.f32	s15, s16, s15
	output->hu_moments[6] = (3 * output->nu[2][1] - output->nu[0][3])
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	edc3 7a36 	vstr	s15, [r3, #216]	; 0xd8
}
 8000d26:	bf00      	nop
 8000d28:	3708      	adds	r7, #8
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	ecbd 8b04 	vpop	{d8-d9}
 8000d30:	bd80      	pop	{r7, pc}

08000d32 <LIB_IMAGE_InitStruct>:
  * @param width   width of the image
  * @param format  Choose IMAGE_FORMAT_GRAYSCALE, IMAGE_FORMAT_RGB565, or IMAGE_FORMAT_RGB888
  * @retval 0 if successfully initialized
  */
int8_t LIB_IMAGE_InitStruct(IMAGE_HandleTypeDef * img, uint8_t *pImg, uint16_t height, uint16_t width, IMAGE_Format format)
{
 8000d32:	b480      	push	{r7}
 8000d34:	b085      	sub	sp, #20
 8000d36:	af00      	add	r7, sp, #0
 8000d38:	60f8      	str	r0, [r7, #12]
 8000d3a:	60b9      	str	r1, [r7, #8]
 8000d3c:	4611      	mov	r1, r2
 8000d3e:	461a      	mov	r2, r3
 8000d40:	460b      	mov	r3, r1
 8000d42:	80fb      	strh	r3, [r7, #6]
 8000d44:	4613      	mov	r3, r2
 8000d46:	80bb      	strh	r3, [r7, #4]
	__LIB_IMAGE_CHECK_PARAM(img);
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d102      	bne.n	8000d54 <LIB_IMAGE_InitStruct+0x22>
 8000d4e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d52:	e031      	b.n	8000db8 <LIB_IMAGE_InitStruct+0x86>
	__LIB_IMAGE_CHECK_PARAM(pImg);
 8000d54:	68bb      	ldr	r3, [r7, #8]
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d102      	bne.n	8000d60 <LIB_IMAGE_InitStruct+0x2e>
 8000d5a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d5e:	e02b      	b.n	8000db8 <LIB_IMAGE_InitStruct+0x86>
	__LIB_IMAGE_CHECK_PARAM(format);
 8000d60:	7e3b      	ldrb	r3, [r7, #24]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d102      	bne.n	8000d6c <LIB_IMAGE_InitStruct+0x3a>
 8000d66:	f04f 33ff 	mov.w	r3, #4294967295
 8000d6a:	e025      	b.n	8000db8 <LIB_IMAGE_InitStruct+0x86>
	__LIB_IMAGE_CHECK_PARAM(width);
 8000d6c:	88bb      	ldrh	r3, [r7, #4]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d102      	bne.n	8000d78 <LIB_IMAGE_InitStruct+0x46>
 8000d72:	f04f 33ff 	mov.w	r3, #4294967295
 8000d76:	e01f      	b.n	8000db8 <LIB_IMAGE_InitStruct+0x86>
	__LIB_IMAGE_CHECK_PARAM(height);
 8000d78:	88fb      	ldrh	r3, [r7, #6]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d102      	bne.n	8000d84 <LIB_IMAGE_InitStruct+0x52>
 8000d7e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d82:	e019      	b.n	8000db8 <LIB_IMAGE_InitStruct+0x86>
	img->format = format;
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	7e3a      	ldrb	r2, [r7, #24]
 8000d88:	721a      	strb	r2, [r3, #8]
	img->height = height;
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	88fa      	ldrh	r2, [r7, #6]
 8000d8e:	80da      	strh	r2, [r3, #6]
	img->width 	= width;
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	88ba      	ldrh	r2, [r7, #4]
 8000d94:	809a      	strh	r2, [r3, #4]
	img->pData 	= pImg;
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	68ba      	ldr	r2, [r7, #8]
 8000d9a:	601a      	str	r2, [r3, #0]
	img->size 	= (uint32_t)img->format * (uint32_t)img->height * (uint32_t)img->width;
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	7a1b      	ldrb	r3, [r3, #8]
 8000da0:	461a      	mov	r2, r3
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	88db      	ldrh	r3, [r3, #6]
 8000da6:	fb03 f302 	mul.w	r3, r3, r2
 8000daa:	68fa      	ldr	r2, [r7, #12]
 8000dac:	8892      	ldrh	r2, [r2, #4]
 8000dae:	fb02 f203 	mul.w	r2, r2, r3
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	60da      	str	r2, [r3, #12]
	return IMAGE_OK;
 8000db6:	2300      	movs	r3, #0
}
 8000db8:	4618      	mov	r0, r3
 8000dba:	3714      	adds	r7, #20
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr

08000dc4 <LIB_MPU_Init>:
 */

#include "lib_mpu.h"

void LIB_MPU_Init(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b084      	sub	sp, #16
 8000dc8:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000dca:	463b      	mov	r3, r7
 8000dcc:	2200      	movs	r2, #0
 8000dce:	601a      	str	r2, [r3, #0]
 8000dd0:	605a      	str	r2, [r3, #4]
 8000dd2:	609a      	str	r2, [r3, #8]
 8000dd4:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000dd6:	f002 fcb7 	bl	8003748 <HAL_MPU_Disable>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000dda:	2301      	movs	r3, #1
 8000ddc:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000dde:	2300      	movs	r3, #0
 8000de0:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0xC0000000;
 8000de2:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8000de6:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_8MB;
 8000de8:	2316      	movs	r3, #22
 8000dea:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8000dec:	2300      	movs	r3, #0
 8000dee:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000df0:	2300      	movs	r3, #0
 8000df2:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000df4:	2303      	movs	r3, #3
 8000df6:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8000e00:	2301      	movs	r3, #1
 8000e02:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8000e04:	2301      	movs	r3, #1
 8000e06:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000e08:	463b      	mov	r3, r7
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f002 fcd4 	bl	80037b8 <HAL_MPU_ConfigRegion>

  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000e10:	2004      	movs	r0, #4
 8000e12:	f002 fcb1 	bl	8003778 <HAL_MPU_Enable>
}
 8000e16:	bf00      	nop
 8000e18:	3710      	adds	r7, #16
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
	...

08000e20 <LIB_OV5640_Init>:
  * @param  resolution from LIB_OV5640_Resolution enum
  * @param  format	from LIB_OV5640_Format enum
  * @retval 0 if successfully initialized
  */
int8_t LIB_OV5640_Init(LIB_OV5640_Resolution resolution, LIB_OV5640_Format format)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	4603      	mov	r3, r0
 8000e28:	460a      	mov	r2, r1
 8000e2a:	71fb      	strb	r3, [r7, #7]
 8000e2c:	4613      	mov	r3, r2
 8000e2e:	71bb      	strb	r3, [r7, #6]
	LIB_DMA_Init();
 8000e30:	f000 f87a 	bl	8000f28 <LIB_DMA_Init>
	LIB_DCMI_MspInit(&__hdcmi);
 8000e34:	4812      	ldr	r0, [pc, #72]	; (8000e80 <LIB_OV5640_Init+0x60>)
 8000e36:	f000 f8d1 	bl	8000fdc <LIB_DCMI_MspInit>
	LIB_DCMI_Init();
 8000e3a:	f000 f89d 	bl	8000f78 <LIB_DCMI_Init>
	LIB_I2C_MspInit(&hi2c1);
 8000e3e:	4811      	ldr	r0, [pc, #68]	; (8000e84 <LIB_OV5640_Init+0x64>)
 8000e40:	f000 f9ea 	bl	8001218 <LIB_I2C_MspInit>
	LIB_I2C1_Init();
 8000e44:	f000 f9be 	bl	80011c4 <LIB_I2C1_Init>
	ov5640.IO.WriteReg = __OV5640_WriteReg_Func;
 8000e48:	4b0f      	ldr	r3, [pc, #60]	; (8000e88 <LIB_OV5640_Init+0x68>)
 8000e4a:	4a10      	ldr	r2, [pc, #64]	; (8000e8c <LIB_OV5640_Init+0x6c>)
 8000e4c:	60da      	str	r2, [r3, #12]
	ov5640.IO.ReadReg  = __OV5640_ReadReg_Func;
 8000e4e:	4b0e      	ldr	r3, [pc, #56]	; (8000e88 <LIB_OV5640_Init+0x68>)
 8000e50:	4a0f      	ldr	r2, [pc, #60]	; (8000e90 <LIB_OV5640_Init+0x70>)
 8000e52:	611a      	str	r2, [r3, #16]
	ov5640.IO.GetTick  = __OV5640_GetTick_Func;
 8000e54:	4b0c      	ldr	r3, [pc, #48]	; (8000e88 <LIB_OV5640_Init+0x68>)
 8000e56:	4a0f      	ldr	r2, [pc, #60]	; (8000e94 <LIB_OV5640_Init+0x74>)
 8000e58:	615a      	str	r2, [r3, #20]
	ov5640.IO.Address  = 0x78U;
 8000e5a:	4b0b      	ldr	r3, [pc, #44]	; (8000e88 <LIB_OV5640_Init+0x68>)
 8000e5c:	2278      	movs	r2, #120	; 0x78
 8000e5e:	811a      	strh	r2, [r3, #8]
	OV5640_RegisterBusIO(&ov5640, &ov5640.IO);
 8000e60:	4909      	ldr	r1, [pc, #36]	; (8000e88 <LIB_OV5640_Init+0x68>)
 8000e62:	4809      	ldr	r0, [pc, #36]	; (8000e88 <LIB_OV5640_Init+0x68>)
 8000e64:	f001 fabc 	bl	80023e0 <OV5640_RegisterBusIO>
	return OV5640_Init(&ov5640, resolution, format);
 8000e68:	79fb      	ldrb	r3, [r7, #7]
 8000e6a:	79ba      	ldrb	r2, [r7, #6]
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	4806      	ldr	r0, [pc, #24]	; (8000e88 <LIB_OV5640_Init+0x68>)
 8000e70:	f001 faf8 	bl	8002464 <OV5640_Init>
 8000e74:	4603      	mov	r3, r0
 8000e76:	b25b      	sxtb	r3, r3
}
 8000e78:	4618      	mov	r0, r3
 8000e7a:	3708      	adds	r7, #8
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	20000214 	.word	0x20000214
 8000e84:	20000168 	.word	0x20000168
 8000e88:	200000ac 	.word	0x200000ac
 8000e8c:	0800131d 	.word	0x0800131d
 8000e90:	080012dd 	.word	0x080012dd
 8000e94:	0800135d 	.word	0x0800135d

08000e98 <LIB_OV5640_CaptureSnapshot>:
  * @param  img pointer to image object
  * @param  timeout max time allowed in ms to capture one shot
  * @retval 0 if successfully captured
  */
int8_t LIB_OV5640_CaptureSnapshot(IMAGE_HandleTypeDef * img, uint32_t timeout)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b086      	sub	sp, #24
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
 8000ea0:	6039      	str	r1, [r7, #0]
	int8_t status = OV5640_ERROR;
 8000ea2:	23ff      	movs	r3, #255	; 0xff
 8000ea4:	75fb      	strb	r3, [r7, #23]
	uint32_t currentFrameCount = ov5640FrameCount, currentTick;
 8000ea6:	4b15      	ldr	r3, [pc, #84]	; (8000efc <LIB_OV5640_CaptureSnapshot+0x64>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	613b      	str	r3, [r7, #16]
	HAL_DCMI_Start_DMA(&__hdcmi, DCMI_MODE_CONTINUOUS, (uint32_t)img->pData, img->size);
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	461a      	mov	r2, r3
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	68db      	ldr	r3, [r3, #12]
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	4811      	ldr	r0, [pc, #68]	; (8000f00 <LIB_OV5640_CaptureSnapshot+0x68>)
 8000eba:	f002 fd3b 	bl	8003934 <HAL_DCMI_Start_DMA>
	currentTick = HAL_GetTick();
 8000ebe:	f002 fb01 	bl	80034c4 <HAL_GetTick>
 8000ec2:	60f8      	str	r0, [r7, #12]
	while((HAL_GetTick() - currentTick) < timeout)
 8000ec4:	e008      	b.n	8000ed8 <LIB_OV5640_CaptureSnapshot+0x40>
	{
		if ((ov5640FrameCount - currentFrameCount) > 4)
 8000ec6:	4b0d      	ldr	r3, [pc, #52]	; (8000efc <LIB_OV5640_CaptureSnapshot+0x64>)
 8000ec8:	681a      	ldr	r2, [r3, #0]
 8000eca:	693b      	ldr	r3, [r7, #16]
 8000ecc:	1ad3      	subs	r3, r2, r3
 8000ece:	2b04      	cmp	r3, #4
 8000ed0:	d902      	bls.n	8000ed8 <LIB_OV5640_CaptureSnapshot+0x40>
		{
			status = OV5640_OK;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	75fb      	strb	r3, [r7, #23]
			break;
 8000ed6:	e007      	b.n	8000ee8 <LIB_OV5640_CaptureSnapshot+0x50>
	while((HAL_GetTick() - currentTick) < timeout)
 8000ed8:	f002 faf4 	bl	80034c4 <HAL_GetTick>
 8000edc:	4602      	mov	r2, r0
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	1ad3      	subs	r3, r2, r3
 8000ee2:	683a      	ldr	r2, [r7, #0]
 8000ee4:	429a      	cmp	r2, r3
 8000ee6:	d8ee      	bhi.n	8000ec6 <LIB_OV5640_CaptureSnapshot+0x2e>
		}
	}
	HAL_DCMI_Stop(&__hdcmi);
 8000ee8:	4805      	ldr	r0, [pc, #20]	; (8000f00 <LIB_OV5640_CaptureSnapshot+0x68>)
 8000eea:	f002 fdd1 	bl	8003a90 <HAL_DCMI_Stop>
	return status;
 8000eee:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	3718      	adds	r7, #24
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	200000d4 	.word	0x200000d4
 8000f00:	20000214 	.word	0x20000214

08000f04 <HAL_DCMI_FrameEventCallback>:
{
	return ov5640FrameCount;
}

void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *__hdcmi)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b083      	sub	sp, #12
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
	ov5640FrameCount++;
 8000f0c:	4b05      	ldr	r3, [pc, #20]	; (8000f24 <HAL_DCMI_FrameEventCallback+0x20>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	3301      	adds	r3, #1
 8000f12:	4a04      	ldr	r2, [pc, #16]	; (8000f24 <HAL_DCMI_FrameEventCallback+0x20>)
 8000f14:	6013      	str	r3, [r2, #0]
}
 8000f16:	bf00      	nop
 8000f18:	370c      	adds	r7, #12
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop
 8000f24:	200000d4 	.word	0x200000d4

08000f28 <LIB_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void LIB_DMA_Init(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000f2e:	4b0c      	ldr	r3, [pc, #48]	; (8000f60 <LIB_DMA_Init+0x38>)
 8000f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f32:	4a0b      	ldr	r2, [pc, #44]	; (8000f60 <LIB_DMA_Init+0x38>)
 8000f34:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000f38:	6313      	str	r3, [r2, #48]	; 0x30
 8000f3a:	4b09      	ldr	r3, [pc, #36]	; (8000f60 <LIB_DMA_Init+0x38>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f42:	607b      	str	r3, [r7, #4]
 8000f44:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 15, 0);
 8000f46:	2200      	movs	r2, #0
 8000f48:	210f      	movs	r1, #15
 8000f4a:	2039      	movs	r0, #57	; 0x39
 8000f4c:	f002 fbc5 	bl	80036da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000f50:	2039      	movs	r0, #57	; 0x39
 8000f52:	f002 fbde 	bl	8003712 <HAL_NVIC_EnableIRQ>

}
 8000f56:	bf00      	nop
 8000f58:	3708      	adds	r7, #8
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	40023800 	.word	0x40023800

08000f64 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
    HAL_DMA_IRQHandler(&__hdma_dcmi);
 8000f68:	4802      	ldr	r0, [pc, #8]	; (8000f74 <DMA2_Stream1_IRQHandler+0x10>)
 8000f6a:	f003 f947 	bl	80041fc <HAL_DMA_IRQHandler>
}
 8000f6e:	bf00      	nop
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	200001b4 	.word	0x200001b4

08000f78 <LIB_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static int8_t LIB_DCMI_Init(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
    __hdcmi.Instance = DCMI;
 8000f7c:	4b15      	ldr	r3, [pc, #84]	; (8000fd4 <LIB_DCMI_Init+0x5c>)
 8000f7e:	4a16      	ldr	r2, [pc, #88]	; (8000fd8 <LIB_DCMI_Init+0x60>)
 8000f80:	601a      	str	r2, [r3, #0]
    __hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8000f82:	4b14      	ldr	r3, [pc, #80]	; (8000fd4 <LIB_DCMI_Init+0x5c>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	605a      	str	r2, [r3, #4]
    __hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_RISING;
 8000f88:	4b12      	ldr	r3, [pc, #72]	; (8000fd4 <LIB_DCMI_Init+0x5c>)
 8000f8a:	2220      	movs	r2, #32
 8000f8c:	609a      	str	r2, [r3, #8]
    __hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_HIGH;
 8000f8e:	4b11      	ldr	r3, [pc, #68]	; (8000fd4 <LIB_DCMI_Init+0x5c>)
 8000f90:	2280      	movs	r2, #128	; 0x80
 8000f92:	60da      	str	r2, [r3, #12]
    __hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_HIGH;
 8000f94:	4b0f      	ldr	r3, [pc, #60]	; (8000fd4 <LIB_DCMI_Init+0x5c>)
 8000f96:	2240      	movs	r2, #64	; 0x40
 8000f98:	611a      	str	r2, [r3, #16]
    __hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8000f9a:	4b0e      	ldr	r3, [pc, #56]	; (8000fd4 <LIB_DCMI_Init+0x5c>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	615a      	str	r2, [r3, #20]
    __hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8000fa0:	4b0c      	ldr	r3, [pc, #48]	; (8000fd4 <LIB_DCMI_Init+0x5c>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	619a      	str	r2, [r3, #24]
    __hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8000fa6:	4b0b      	ldr	r3, [pc, #44]	; (8000fd4 <LIB_DCMI_Init+0x5c>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	621a      	str	r2, [r3, #32]
    __hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8000fac:	4b09      	ldr	r3, [pc, #36]	; (8000fd4 <LIB_DCMI_Init+0x5c>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	625a      	str	r2, [r3, #36]	; 0x24
    __hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8000fb2:	4b08      	ldr	r3, [pc, #32]	; (8000fd4 <LIB_DCMI_Init+0x5c>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	629a      	str	r2, [r3, #40]	; 0x28
    __hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8000fb8:	4b06      	ldr	r3, [pc, #24]	; (8000fd4 <LIB_DCMI_Init+0x5c>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	62da      	str	r2, [r3, #44]	; 0x2c
    __hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8000fbe:	4b05      	ldr	r3, [pc, #20]	; (8000fd4 <LIB_DCMI_Init+0x5c>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	631a      	str	r2, [r3, #48]	; 0x30
    return HAL_DCMI_Init(&__hdcmi);
 8000fc4:	4803      	ldr	r0, [pc, #12]	; (8000fd4 <LIB_DCMI_Init+0x5c>)
 8000fc6:	f002 fc3b 	bl	8003840 <HAL_DCMI_Init>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	b25b      	sxtb	r3, r3
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	20000214 	.word	0x20000214
 8000fd8:	50050000 	.word	0x50050000

08000fdc <LIB_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param __hdcmi: DCMI handle pointer
* @retval None
*/
static void LIB_DCMI_MspInit(DCMI_HandleTypeDef* __hdcmi)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b08e      	sub	sp, #56	; 0x38
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fe8:	2200      	movs	r2, #0
 8000fea:	601a      	str	r2, [r3, #0]
 8000fec:	605a      	str	r2, [r3, #4]
 8000fee:	609a      	str	r2, [r3, #8]
 8000ff0:	60da      	str	r2, [r3, #12]
 8000ff2:	611a      	str	r2, [r3, #16]
	/* Peripheral clock enable */
	__HAL_RCC_DCMI_CLK_ENABLE();
 8000ff4:	4b6b      	ldr	r3, [pc, #428]	; (80011a4 <LIB_DCMI_MspInit+0x1c8>)
 8000ff6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ff8:	4a6a      	ldr	r2, [pc, #424]	; (80011a4 <LIB_DCMI_MspInit+0x1c8>)
 8000ffa:	f043 0301 	orr.w	r3, r3, #1
 8000ffe:	6353      	str	r3, [r2, #52]	; 0x34
 8001000:	4b68      	ldr	r3, [pc, #416]	; (80011a4 <LIB_DCMI_MspInit+0x1c8>)
 8001002:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001004:	f003 0301 	and.w	r3, r3, #1
 8001008:	623b      	str	r3, [r7, #32]
 800100a:	6a3b      	ldr	r3, [r7, #32]

	__HAL_RCC_GPIOE_CLK_ENABLE();
 800100c:	4b65      	ldr	r3, [pc, #404]	; (80011a4 <LIB_DCMI_MspInit+0x1c8>)
 800100e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001010:	4a64      	ldr	r2, [pc, #400]	; (80011a4 <LIB_DCMI_MspInit+0x1c8>)
 8001012:	f043 0310 	orr.w	r3, r3, #16
 8001016:	6313      	str	r3, [r2, #48]	; 0x30
 8001018:	4b62      	ldr	r3, [pc, #392]	; (80011a4 <LIB_DCMI_MspInit+0x1c8>)
 800101a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101c:	f003 0310 	and.w	r3, r3, #16
 8001020:	61fb      	str	r3, [r7, #28]
 8001022:	69fb      	ldr	r3, [r7, #28]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001024:	4b5f      	ldr	r3, [pc, #380]	; (80011a4 <LIB_DCMI_MspInit+0x1c8>)
 8001026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001028:	4a5e      	ldr	r2, [pc, #376]	; (80011a4 <LIB_DCMI_MspInit+0x1c8>)
 800102a:	f043 0308 	orr.w	r3, r3, #8
 800102e:	6313      	str	r3, [r2, #48]	; 0x30
 8001030:	4b5c      	ldr	r3, [pc, #368]	; (80011a4 <LIB_DCMI_MspInit+0x1c8>)
 8001032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001034:	f003 0308 	and.w	r3, r3, #8
 8001038:	61bb      	str	r3, [r7, #24]
 800103a:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 800103c:	4b59      	ldr	r3, [pc, #356]	; (80011a4 <LIB_DCMI_MspInit+0x1c8>)
 800103e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001040:	4a58      	ldr	r2, [pc, #352]	; (80011a4 <LIB_DCMI_MspInit+0x1c8>)
 8001042:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001046:	6313      	str	r3, [r2, #48]	; 0x30
 8001048:	4b56      	ldr	r3, [pc, #344]	; (80011a4 <LIB_DCMI_MspInit+0x1c8>)
 800104a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001050:	617b      	str	r3, [r7, #20]
 8001052:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001054:	4b53      	ldr	r3, [pc, #332]	; (80011a4 <LIB_DCMI_MspInit+0x1c8>)
 8001056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001058:	4a52      	ldr	r2, [pc, #328]	; (80011a4 <LIB_DCMI_MspInit+0x1c8>)
 800105a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800105e:	6313      	str	r3, [r2, #48]	; 0x30
 8001060:	4b50      	ldr	r3, [pc, #320]	; (80011a4 <LIB_DCMI_MspInit+0x1c8>)
 8001062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001064:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001068:	613b      	str	r3, [r7, #16]
 800106a:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800106c:	4b4d      	ldr	r3, [pc, #308]	; (80011a4 <LIB_DCMI_MspInit+0x1c8>)
 800106e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001070:	4a4c      	ldr	r2, [pc, #304]	; (80011a4 <LIB_DCMI_MspInit+0x1c8>)
 8001072:	f043 0301 	orr.w	r3, r3, #1
 8001076:	6313      	str	r3, [r2, #48]	; 0x30
 8001078:	4b4a      	ldr	r3, [pc, #296]	; (80011a4 <LIB_DCMI_MspInit+0x1c8>)
 800107a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107c:	f003 0301 	and.w	r3, r3, #1
 8001080:	60fb      	str	r3, [r7, #12]
 8001082:	68fb      	ldr	r3, [r7, #12]

	GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8001084:	2360      	movs	r3, #96	; 0x60
 8001086:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001088:	2302      	movs	r3, #2
 800108a:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108c:	2300      	movs	r3, #0
 800108e:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001090:	2300      	movs	r3, #0
 8001092:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001094:	230d      	movs	r3, #13
 8001096:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001098:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800109c:	4619      	mov	r1, r3
 800109e:	4842      	ldr	r0, [pc, #264]	; (80011a8 <LIB_DCMI_MspInit+0x1cc>)
 80010a0:	f004 fc8c 	bl	80059bc <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = DCMI_D5_Pin;
 80010a4:	2308      	movs	r3, #8
 80010a6:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a8:	2302      	movs	r3, #2
 80010aa:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ac:	2300      	movs	r3, #0
 80010ae:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b0:	2300      	movs	r3, #0
 80010b2:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80010b4:	230d      	movs	r3, #13
 80010b6:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 80010b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010bc:	4619      	mov	r1, r3
 80010be:	483b      	ldr	r0, [pc, #236]	; (80011ac <LIB_DCMI_MspInit+0x1d0>)
 80010c0:	f004 fc7c 	bl	80059bc <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 80010c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010c8:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ca:	2302      	movs	r3, #2
 80010cc:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ce:	2300      	movs	r3, #0
 80010d0:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d2:	2300      	movs	r3, #0
 80010d4:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80010d6:	230d      	movs	r3, #13
 80010d8:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 80010da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010de:	4619      	mov	r1, r3
 80010e0:	4833      	ldr	r0, [pc, #204]	; (80011b0 <LIB_DCMI_MspInit+0x1d4>)
 80010e2:	f004 fc6b 	bl	80059bc <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 80010e6:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 80010ea:	627b      	str	r3, [r7, #36]	; 0x24
							|DCMI_D1_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ec:	2302      	movs	r3, #2
 80010ee:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f0:	2300      	movs	r3, #0
 80010f2:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f4:	2300      	movs	r3, #0
 80010f6:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80010f8:	230d      	movs	r3, #13
 80010fa:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80010fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001100:	4619      	mov	r1, r3
 8001102:	482c      	ldr	r0, [pc, #176]	; (80011b4 <LIB_DCMI_MspInit+0x1d8>)
 8001104:	f004 fc5a 	bl	80059bc <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8001108:	2350      	movs	r3, #80	; 0x50
 800110a:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800110c:	2302      	movs	r3, #2
 800110e:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001110:	2300      	movs	r3, #0
 8001112:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001114:	2300      	movs	r3, #0
 8001116:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001118:	230d      	movs	r3, #13
 800111a:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800111c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001120:	4619      	mov	r1, r3
 8001122:	4825      	ldr	r0, [pc, #148]	; (80011b8 <LIB_DCMI_MspInit+0x1dc>)
 8001124:	f004 fc4a 	bl	80059bc <HAL_GPIO_Init>

	/* DCMI DMA Init */
	/* DCMI Init */
	__hdma_dcmi.Instance = DMA2_Stream1;
 8001128:	4b24      	ldr	r3, [pc, #144]	; (80011bc <LIB_DCMI_MspInit+0x1e0>)
 800112a:	4a25      	ldr	r2, [pc, #148]	; (80011c0 <LIB_DCMI_MspInit+0x1e4>)
 800112c:	601a      	str	r2, [r3, #0]
	__hdma_dcmi.Init.Channel = DMA_CHANNEL_1;
 800112e:	4b23      	ldr	r3, [pc, #140]	; (80011bc <LIB_DCMI_MspInit+0x1e0>)
 8001130:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001134:	605a      	str	r2, [r3, #4]
	__hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001136:	4b21      	ldr	r3, [pc, #132]	; (80011bc <LIB_DCMI_MspInit+0x1e0>)
 8001138:	2200      	movs	r2, #0
 800113a:	609a      	str	r2, [r3, #8]
	__hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 800113c:	4b1f      	ldr	r3, [pc, #124]	; (80011bc <LIB_DCMI_MspInit+0x1e0>)
 800113e:	2200      	movs	r2, #0
 8001140:	60da      	str	r2, [r3, #12]
	__hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 8001142:	4b1e      	ldr	r3, [pc, #120]	; (80011bc <LIB_DCMI_MspInit+0x1e0>)
 8001144:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001148:	611a      	str	r2, [r3, #16]
	__hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800114a:	4b1c      	ldr	r3, [pc, #112]	; (80011bc <LIB_DCMI_MspInit+0x1e0>)
 800114c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001150:	615a      	str	r2, [r3, #20]
	__hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001152:	4b1a      	ldr	r3, [pc, #104]	; (80011bc <LIB_DCMI_MspInit+0x1e0>)
 8001154:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001158:	619a      	str	r2, [r3, #24]
	__hdma_dcmi.Init.Mode = DMA_CIRCULAR;
 800115a:	4b18      	ldr	r3, [pc, #96]	; (80011bc <LIB_DCMI_MspInit+0x1e0>)
 800115c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001160:	61da      	str	r2, [r3, #28]
	__hdma_dcmi.Init.Priority = DMA_PRIORITY_HIGH;
 8001162:	4b16      	ldr	r3, [pc, #88]	; (80011bc <LIB_DCMI_MspInit+0x1e0>)
 8001164:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001168:	621a      	str	r2, [r3, #32]
	__hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800116a:	4b14      	ldr	r3, [pc, #80]	; (80011bc <LIB_DCMI_MspInit+0x1e0>)
 800116c:	2200      	movs	r2, #0
 800116e:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_DMA_Init(&__hdma_dcmi) != HAL_OK)
 8001170:	4812      	ldr	r0, [pc, #72]	; (80011bc <LIB_DCMI_MspInit+0x1e0>)
 8001172:	f002 fe45 	bl	8003e00 <HAL_DMA_Init>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d10e      	bne.n	800119a <LIB_DCMI_MspInit+0x1be>
	{
		return;
	}

	__HAL_LINKDMA(__hdcmi,DMA_Handle,__hdma_dcmi);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	4a0f      	ldr	r2, [pc, #60]	; (80011bc <LIB_DCMI_MspInit+0x1e0>)
 8001180:	649a      	str	r2, [r3, #72]	; 0x48
 8001182:	4a0e      	ldr	r2, [pc, #56]	; (80011bc <LIB_DCMI_MspInit+0x1e0>)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	6393      	str	r3, [r2, #56]	; 0x38

	/* DCMI interrupt Init */
	HAL_NVIC_SetPriority(DCMI_IRQn, 15, 0);
 8001188:	2200      	movs	r2, #0
 800118a:	210f      	movs	r1, #15
 800118c:	204e      	movs	r0, #78	; 0x4e
 800118e:	f002 faa4 	bl	80036da <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DCMI_IRQn);
 8001192:	204e      	movs	r0, #78	; 0x4e
 8001194:	f002 fabd 	bl	8003712 <HAL_NVIC_EnableIRQ>
 8001198:	e000      	b.n	800119c <LIB_DCMI_MspInit+0x1c0>
		return;
 800119a:	bf00      	nop

}
 800119c:	3738      	adds	r7, #56	; 0x38
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	40023800 	.word	0x40023800
 80011a8:	40021000 	.word	0x40021000
 80011ac:	40020c00 	.word	0x40020c00
 80011b0:	40021800 	.word	0x40021800
 80011b4:	40021c00 	.word	0x40021c00
 80011b8:	40020000 	.word	0x40020000
 80011bc:	200001b4 	.word	0x200001b4
 80011c0:	40026428 	.word	0x40026428

080011c4 <LIB_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static int8_t LIB_I2C1_Init(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0
	hi2c1.Instance = I2C1;
 80011c8:	4b10      	ldr	r3, [pc, #64]	; (800120c <LIB_I2C1_Init+0x48>)
 80011ca:	4a11      	ldr	r2, [pc, #68]	; (8001210 <LIB_I2C1_Init+0x4c>)
 80011cc:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x00A0A3F7;
 80011ce:	4b0f      	ldr	r3, [pc, #60]	; (800120c <LIB_I2C1_Init+0x48>)
 80011d0:	4a10      	ldr	r2, [pc, #64]	; (8001214 <LIB_I2C1_Init+0x50>)
 80011d2:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 80011d4:	4b0d      	ldr	r3, [pc, #52]	; (800120c <LIB_I2C1_Init+0x48>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011da:	4b0c      	ldr	r3, [pc, #48]	; (800120c <LIB_I2C1_Init+0x48>)
 80011dc:	2201      	movs	r2, #1
 80011de:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011e0:	4b0a      	ldr	r3, [pc, #40]	; (800120c <LIB_I2C1_Init+0x48>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 80011e6:	4b09      	ldr	r3, [pc, #36]	; (800120c <LIB_I2C1_Init+0x48>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80011ec:	4b07      	ldr	r3, [pc, #28]	; (800120c <LIB_I2C1_Init+0x48>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011f2:	4b06      	ldr	r3, [pc, #24]	; (800120c <LIB_I2C1_Init+0x48>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011f8:	4b04      	ldr	r3, [pc, #16]	; (800120c <LIB_I2C1_Init+0x48>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	621a      	str	r2, [r3, #32]
	return HAL_I2C_Init(&hi2c1);
 80011fe:	4803      	ldr	r0, [pc, #12]	; (800120c <LIB_I2C1_Init+0x48>)
 8001200:	f004 fda2 	bl	8005d48 <HAL_I2C_Init>
 8001204:	4603      	mov	r3, r0
 8001206:	b25b      	sxtb	r3, r3
}
 8001208:	4618      	mov	r0, r3
 800120a:	bd80      	pop	{r7, pc}
 800120c:	20000168 	.word	0x20000168
 8001210:	40005400 	.word	0x40005400
 8001214:	00a0a3f7 	.word	0x00a0a3f7

08001218 <LIB_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
static void LIB_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b0aa      	sub	sp, #168	; 0xa8
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001220:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001224:	2200      	movs	r2, #0
 8001226:	601a      	str	r2, [r3, #0]
 8001228:	605a      	str	r2, [r3, #4]
 800122a:	609a      	str	r2, [r3, #8]
 800122c:	60da      	str	r2, [r3, #12]
 800122e:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001230:	f107 0310 	add.w	r3, r7, #16
 8001234:	2284      	movs	r2, #132	; 0x84
 8001236:	2100      	movs	r1, #0
 8001238:	4618      	mov	r0, r3
 800123a:	f007 f9f7 	bl	800862c <memset>
	/** Initializes the peripherals clock
	*/
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800123e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001242:	613b      	str	r3, [r7, #16]
	PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001244:	2300      	movs	r3, #0
 8001246:	677b      	str	r3, [r7, #116]	; 0x74
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001248:	f107 0310 	add.w	r3, r7, #16
 800124c:	4618      	mov	r0, r3
 800124e:	f005 ff63 	bl	8007118 <HAL_RCCEx_PeriphCLKConfig>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d12e      	bne.n	80012b6 <LIB_I2C_MspInit+0x9e>
	{
	  return;
	}

	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001258:	4b19      	ldr	r3, [pc, #100]	; (80012c0 <LIB_I2C_MspInit+0xa8>)
 800125a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125c:	4a18      	ldr	r2, [pc, #96]	; (80012c0 <LIB_I2C_MspInit+0xa8>)
 800125e:	f043 0302 	orr.w	r3, r3, #2
 8001262:	6313      	str	r3, [r2, #48]	; 0x30
 8001264:	4b16      	ldr	r3, [pc, #88]	; (80012c0 <LIB_I2C_MspInit+0xa8>)
 8001266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001268:	f003 0302 	and.w	r3, r3, #2
 800126c:	60fb      	str	r3, [r7, #12]
 800126e:	68fb      	ldr	r3, [r7, #12]
	/**I2C1 GPIO Configuration
	PB8     ------> I2C1_SCL
	PB9     ------> I2C1_SDA
	*/
	GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001270:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001274:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001278:	2312      	movs	r3, #18
 800127a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127e:	2300      	movs	r3, #0
 8001280:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001284:	2300      	movs	r3, #0
 8001286:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800128a:	2304      	movs	r3, #4
 800128c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001290:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001294:	4619      	mov	r1, r3
 8001296:	480b      	ldr	r0, [pc, #44]	; (80012c4 <LIB_I2C_MspInit+0xac>)
 8001298:	f004 fb90 	bl	80059bc <HAL_GPIO_Init>

	/* Peripheral clock enable */
	__HAL_RCC_I2C1_CLK_ENABLE();
 800129c:	4b08      	ldr	r3, [pc, #32]	; (80012c0 <LIB_I2C_MspInit+0xa8>)
 800129e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a0:	4a07      	ldr	r2, [pc, #28]	; (80012c0 <LIB_I2C_MspInit+0xa8>)
 80012a2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80012a6:	6413      	str	r3, [r2, #64]	; 0x40
 80012a8:	4b05      	ldr	r3, [pc, #20]	; (80012c0 <LIB_I2C_MspInit+0xa8>)
 80012aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012b0:	60bb      	str	r3, [r7, #8]
 80012b2:	68bb      	ldr	r3, [r7, #8]
 80012b4:	e000      	b.n	80012b8 <LIB_I2C_MspInit+0xa0>
	  return;
 80012b6:	bf00      	nop

}
 80012b8:	37a8      	adds	r7, #168	; 0xa8
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	40023800 	.word	0x40023800
 80012c4:	40020400 	.word	0x40020400

080012c8 <DCMI_IRQHandler>:

/**
  * @brief This function handles DCMI global interrupt.
  */
void DCMI_IRQHandler(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
    HAL_DCMI_IRQHandler(&__hdcmi);
 80012cc:	4802      	ldr	r0, [pc, #8]	; (80012d8 <DCMI_IRQHandler+0x10>)
 80012ce:	f002 fc3d 	bl	8003b4c <HAL_DCMI_IRQHandler>
}
 80012d2:	bf00      	nop
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	20000214 	.word	0x20000214

080012dc <__OV5640_ReadReg_Func>:
/**
  * @brief  reads OV5640 registers.
  * @retval 0 if successfully read.
  */
static int32_t __OV5640_ReadReg_Func(uint16_t devAddr, uint16_t Reg, uint8_t* pData, uint16_t Length)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b088      	sub	sp, #32
 80012e0:	af04      	add	r7, sp, #16
 80012e2:	60ba      	str	r2, [r7, #8]
 80012e4:	461a      	mov	r2, r3
 80012e6:	4603      	mov	r3, r0
 80012e8:	81fb      	strh	r3, [r7, #14]
 80012ea:	460b      	mov	r3, r1
 80012ec:	81bb      	strh	r3, [r7, #12]
 80012ee:	4613      	mov	r3, r2
 80012f0:	80fb      	strh	r3, [r7, #6]
	return HAL_I2C_Mem_Read(&hi2c1, devAddr , Reg, I2C_MEMADD_SIZE_16BIT, pData, Length, 1000);
 80012f2:	89ba      	ldrh	r2, [r7, #12]
 80012f4:	89f9      	ldrh	r1, [r7, #14]
 80012f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012fa:	9302      	str	r3, [sp, #8]
 80012fc:	88fb      	ldrh	r3, [r7, #6]
 80012fe:	9301      	str	r3, [sp, #4]
 8001300:	68bb      	ldr	r3, [r7, #8]
 8001302:	9300      	str	r3, [sp, #0]
 8001304:	2302      	movs	r3, #2
 8001306:	4804      	ldr	r0, [pc, #16]	; (8001318 <__OV5640_ReadReg_Func+0x3c>)
 8001308:	f004 fecc 	bl	80060a4 <HAL_I2C_Mem_Read>
 800130c:	4603      	mov	r3, r0
}
 800130e:	4618      	mov	r0, r3
 8001310:	3710      	adds	r7, #16
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	20000168 	.word	0x20000168

0800131c <__OV5640_WriteReg_Func>:
/**
  * @brief  writes to OV5640 registers.
  * @retval 0 if successfully written.
  */
static int32_t __OV5640_WriteReg_Func(uint16_t devAddr, uint16_t Reg, uint8_t* pData, uint16_t Length)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b088      	sub	sp, #32
 8001320:	af04      	add	r7, sp, #16
 8001322:	60ba      	str	r2, [r7, #8]
 8001324:	461a      	mov	r2, r3
 8001326:	4603      	mov	r3, r0
 8001328:	81fb      	strh	r3, [r7, #14]
 800132a:	460b      	mov	r3, r1
 800132c:	81bb      	strh	r3, [r7, #12]
 800132e:	4613      	mov	r3, r2
 8001330:	80fb      	strh	r3, [r7, #6]
	return HAL_I2C_Mem_Write(&hi2c1, devAddr, Reg, I2C_MEMADD_SIZE_16BIT, pData, Length, 1000);
 8001332:	89ba      	ldrh	r2, [r7, #12]
 8001334:	89f9      	ldrh	r1, [r7, #14]
 8001336:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800133a:	9302      	str	r3, [sp, #8]
 800133c:	88fb      	ldrh	r3, [r7, #6]
 800133e:	9301      	str	r3, [sp, #4]
 8001340:	68bb      	ldr	r3, [r7, #8]
 8001342:	9300      	str	r3, [sp, #0]
 8001344:	2302      	movs	r3, #2
 8001346:	4804      	ldr	r0, [pc, #16]	; (8001358 <__OV5640_WriteReg_Func+0x3c>)
 8001348:	f004 fd98 	bl	8005e7c <HAL_I2C_Mem_Write>
 800134c:	4603      	mov	r3, r0
}
 800134e:	4618      	mov	r0, r3
 8001350:	3710      	adds	r7, #16
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	20000168 	.word	0x20000168

0800135c <__OV5640_GetTick_Func>:
/**
  * @brief  returns the current tick value.
  * @retval the current tick value.
  */
static int32_t __OV5640_GetTick_Func(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0
	return (int32_t)HAL_GetTick();
 8001360:	f002 f8b0 	bl	80034c4 <HAL_GetTick>
 8001364:	4603      	mov	r3, r0
}
 8001366:	4618      	mov	r0, r3
 8001368:	bd80      	pop	{r7, pc}

0800136a <LIB_RGB2GRAY_Convert565>:
 *      Author: Eren Atmaca
 */
#include "lib_rgb2gray.h"

void LIB_RGB2GRAY_Convert565(IMAGE_HandleTypeDef *pImgSrc, IMAGE_HandleTypeDef *pImgDest)
{
 800136a:	b480      	push	{r7}
 800136c:	b085      	sub	sp, #20
 800136e:	af00      	add	r7, sp, #0
 8001370:	6078      	str	r0, [r7, #4]
 8001372:	6039      	str	r1, [r7, #0]
	uint8_t r8, g8, b8;
	uint32_t i = 0;
 8001374:	2300      	movs	r3, #0
 8001376:	60fb      	str	r3, [r7, #12]
	for (i = 0; i < pImgSrc->size; i=i+2)
 8001378:	2300      	movs	r3, #0
 800137a:	60fb      	str	r3, [r7, #12]
 800137c:	e041      	b.n	8001402 <LIB_RGB2GRAY_Convert565+0x98>
	{
		//r8 = pImgSrc->pData[i] & 0xF8;
		//g8 = (((pImgSrc->pData[i] & 0x07) << 3) | ((pImgSrc->pData[i+1] >> 5) & 0x07)) << 2;
		//b8 = (pImgSrc->pData[i+1] & 0x1F) << 3;
		r8 = (pImgSrc->pData[i + 1] & 0xF8) << 3;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681a      	ldr	r2, [r3, #0]
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	3301      	adds	r3, #1
 8001386:	4413      	add	r3, r2
 8001388:	781b      	ldrb	r3, [r3, #0]
 800138a:	00db      	lsls	r3, r3, #3
 800138c:	b2db      	uxtb	r3, r3
 800138e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001392:	72fb      	strb	r3, [r7, #11]
		g8 = (((pImgSrc->pData[i + 1] & 0x07) << 5) | ((pImgSrc->pData[i] & 0xE0) >> 3));
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681a      	ldr	r2, [r3, #0]
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	3301      	adds	r3, #1
 800139c:	4413      	add	r3, r2
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	015b      	lsls	r3, r3, #5
 80013a2:	b25a      	sxtb	r2, r3
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6819      	ldr	r1, [r3, #0]
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	440b      	add	r3, r1
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	10db      	asrs	r3, r3, #3
 80013b0:	b25b      	sxtb	r3, r3
 80013b2:	f003 031c 	and.w	r3, r3, #28
 80013b6:	b25b      	sxtb	r3, r3
 80013b8:	4313      	orrs	r3, r2
 80013ba:	b25b      	sxtb	r3, r3
 80013bc:	72bb      	strb	r3, [r7, #10]
		b8 = (pImgSrc->pData[i] & 0x1F) << 3;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681a      	ldr	r2, [r3, #0]
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	4413      	add	r3, r2
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	00db      	lsls	r3, r3, #3
 80013ca:	727b      	strb	r3, [r7, #9]
		pImgDest->pData[i/2] = (uint8_t)((77 * r8 + 150 * g8 +  29 * b8) >> 8);
 80013cc:	7afb      	ldrb	r3, [r7, #11]
 80013ce:	224d      	movs	r2, #77	; 0x4d
 80013d0:	fb02 f203 	mul.w	r2, r2, r3
 80013d4:	7abb      	ldrb	r3, [r7, #10]
 80013d6:	2196      	movs	r1, #150	; 0x96
 80013d8:	fb01 f303 	mul.w	r3, r1, r3
 80013dc:	18d1      	adds	r1, r2, r3
 80013de:	7a7a      	ldrb	r2, [r7, #9]
 80013e0:	4613      	mov	r3, r2
 80013e2:	00db      	lsls	r3, r3, #3
 80013e4:	1a9b      	subs	r3, r3, r2
 80013e6:	009b      	lsls	r3, r3, #2
 80013e8:	4413      	add	r3, r2
 80013ea:	440b      	add	r3, r1
 80013ec:	1219      	asrs	r1, r3, #8
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	681a      	ldr	r2, [r3, #0]
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	085b      	lsrs	r3, r3, #1
 80013f6:	4413      	add	r3, r2
 80013f8:	b2ca      	uxtb	r2, r1
 80013fa:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < pImgSrc->size; i=i+2)
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	3302      	adds	r3, #2
 8001400:	60fb      	str	r3, [r7, #12]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	68db      	ldr	r3, [r3, #12]
 8001406:	68fa      	ldr	r2, [r7, #12]
 8001408:	429a      	cmp	r2, r3
 800140a:	d3b8      	bcc.n	800137e <LIB_RGB2GRAY_Convert565+0x14>
	}
}
 800140c:	bf00      	nop
 800140e:	bf00      	nop
 8001410:	3714      	adds	r7, #20
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr
	...

0800141c <LIB_SERIAL_Transmit>:
  * @param length	Number of data in quantity (not bytes!)
  * @param type 	Choose from SERIAL_DataTypeDef enum
  * @retval 0 if successfully transmitted
  */
int8_t LIB_SERIAL_Transmit(void *pData, uint32_t length, SERIAL_DataTypeDef type)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b08a      	sub	sp, #40	; 0x28
 8001420:	af00      	add	r7, sp, #0
 8001422:	60f8      	str	r0, [r7, #12]
 8001424:	60b9      	str	r1, [r7, #8]
 8001426:	4613      	mov	r3, r2
 8001428:	71fb      	strb	r3, [r7, #7]
	uint8_t __header[3] = "STW", __count = 0;
 800142a:	4a44      	ldr	r2, [pc, #272]	; (800153c <LIB_SERIAL_Transmit+0x120>)
 800142c:	f107 0314 	add.w	r3, r7, #20
 8001430:	6812      	ldr	r2, [r2, #0]
 8001432:	4611      	mov	r1, r2
 8001434:	8019      	strh	r1, [r3, #0]
 8001436:	3302      	adds	r3, #2
 8001438:	0c12      	lsrs	r2, r2, #16
 800143a:	701a      	strb	r2, [r3, #0]
 800143c:	2300      	movs	r3, #0
 800143e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint32_t __length = 0;
 8001442:	2300      	movs	r3, #0
 8001444:	613b      	str	r3, [r7, #16]
	uint16_t __quotient = 0, __remainder = 0;
 8001446:	2300      	movs	r3, #0
 8001448:	83fb      	strh	r3, [r7, #30]
 800144a:	2300      	movs	r3, #0
 800144c:	83bb      	strh	r3, [r7, #28]
	uint16_t divisor = UINT16_MAX;
 800144e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001452:	837b      	strh	r3, [r7, #26]
	uint8_t * __pData = (uint8_t*) pData;
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	623b      	str	r3, [r7, #32]
	if ((type == TYPE_S8) || (type == TYPE_U8))
 8001458:	79fb      	ldrb	r3, [r7, #7]
 800145a:	2b02      	cmp	r3, #2
 800145c:	d002      	beq.n	8001464 <LIB_SERIAL_Transmit+0x48>
 800145e:	79fb      	ldrb	r3, [r7, #7]
 8001460:	2b01      	cmp	r3, #1
 8001462:	d102      	bne.n	800146a <LIB_SERIAL_Transmit+0x4e>
	{
		__length = length;
 8001464:	68bb      	ldr	r3, [r7, #8]
 8001466:	613b      	str	r3, [r7, #16]
 8001468:	e019      	b.n	800149e <LIB_SERIAL_Transmit+0x82>
	}
	else if ((type == TYPE_S16) || (type == TYPE_U16))
 800146a:	79fb      	ldrb	r3, [r7, #7]
 800146c:	2b04      	cmp	r3, #4
 800146e:	d002      	beq.n	8001476 <LIB_SERIAL_Transmit+0x5a>
 8001470:	79fb      	ldrb	r3, [r7, #7]
 8001472:	2b03      	cmp	r3, #3
 8001474:	d103      	bne.n	800147e <LIB_SERIAL_Transmit+0x62>
	{
		__length = length * 2;
 8001476:	68bb      	ldr	r3, [r7, #8]
 8001478:	005b      	lsls	r3, r3, #1
 800147a:	613b      	str	r3, [r7, #16]
 800147c:	e00f      	b.n	800149e <LIB_SERIAL_Transmit+0x82>
	}
	else if ((type == TYPE_S32) || (type == TYPE_U32) || (type == TYPE_F32))
 800147e:	79fb      	ldrb	r3, [r7, #7]
 8001480:	2b06      	cmp	r3, #6
 8001482:	d005      	beq.n	8001490 <LIB_SERIAL_Transmit+0x74>
 8001484:	79fb      	ldrb	r3, [r7, #7]
 8001486:	2b05      	cmp	r3, #5
 8001488:	d002      	beq.n	8001490 <LIB_SERIAL_Transmit+0x74>
 800148a:	79fb      	ldrb	r3, [r7, #7]
 800148c:	2b07      	cmp	r3, #7
 800148e:	d103      	bne.n	8001498 <LIB_SERIAL_Transmit+0x7c>
	{
		__length = length * 4;
 8001490:	68bb      	ldr	r3, [r7, #8]
 8001492:	009b      	lsls	r3, r3, #2
 8001494:	613b      	str	r3, [r7, #16]
 8001496:	e002      	b.n	800149e <LIB_SERIAL_Transmit+0x82>
	}
	else
	{
		return SERIAL_ERROR;
 8001498:	f04f 33ff 	mov.w	r3, #4294967295
 800149c:	e04a      	b.n	8001534 <LIB_SERIAL_Transmit+0x118>
	}
	__quotient 	= __length / divisor;
 800149e:	693a      	ldr	r2, [r7, #16]
 80014a0:	8b7b      	ldrh	r3, [r7, #26]
 80014a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80014a6:	83fb      	strh	r3, [r7, #30]
	__remainder = __length % divisor;
 80014a8:	693b      	ldr	r3, [r7, #16]
 80014aa:	8b7a      	ldrh	r2, [r7, #26]
 80014ac:	fbb3 f1f2 	udiv	r1, r3, r2
 80014b0:	fb02 f201 	mul.w	r2, r2, r1
 80014b4:	1a9b      	subs	r3, r3, r2
 80014b6:	83bb      	strh	r3, [r7, #28]

	HAL_UART_Transmit(&__huart, __header, 3, 10);
 80014b8:	f107 0114 	add.w	r1, r7, #20
 80014bc:	230a      	movs	r3, #10
 80014be:	2203      	movs	r2, #3
 80014c0:	481f      	ldr	r0, [pc, #124]	; (8001540 <LIB_SERIAL_Transmit+0x124>)
 80014c2:	f006 faf8 	bl	8007ab6 <HAL_UART_Transmit>
	HAL_UART_Transmit(&__huart, (uint8_t*)&type, 1, 10);
 80014c6:	1df9      	adds	r1, r7, #7
 80014c8:	230a      	movs	r3, #10
 80014ca:	2201      	movs	r2, #1
 80014cc:	481c      	ldr	r0, [pc, #112]	; (8001540 <LIB_SERIAL_Transmit+0x124>)
 80014ce:	f006 faf2 	bl	8007ab6 <HAL_UART_Transmit>
	HAL_UART_Transmit(&__huart, (uint8_t*)&__length, 4, 10);
 80014d2:	f107 0110 	add.w	r1, r7, #16
 80014d6:	230a      	movs	r3, #10
 80014d8:	2204      	movs	r2, #4
 80014da:	4819      	ldr	r0, [pc, #100]	; (8001540 <LIB_SERIAL_Transmit+0x124>)
 80014dc:	f006 faeb 	bl	8007ab6 <HAL_UART_Transmit>
	HAL_Delay(1);
 80014e0:	2001      	movs	r0, #1
 80014e2:	f001 fffb 	bl	80034dc <HAL_Delay>

	while(__count < __quotient)
 80014e6:	e011      	b.n	800150c <LIB_SERIAL_Transmit+0xf0>
	{
		HAL_UART_Transmit(&__huart, __pData, UINT16_MAX, 1000);
 80014e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014f0:	6a39      	ldr	r1, [r7, #32]
 80014f2:	4813      	ldr	r0, [pc, #76]	; (8001540 <LIB_SERIAL_Transmit+0x124>)
 80014f4:	f006 fadf 	bl	8007ab6 <HAL_UART_Transmit>
		__count++;
 80014f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80014fc:	3301      	adds	r3, #1
 80014fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		__pData += UINT16_MAX;
 8001502:	6a3a      	ldr	r2, [r7, #32]
 8001504:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001508:	4413      	add	r3, r2
 800150a:	623b      	str	r3, [r7, #32]
	while(__count < __quotient)
 800150c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001510:	b29b      	uxth	r3, r3
 8001512:	8bfa      	ldrh	r2, [r7, #30]
 8001514:	429a      	cmp	r2, r3
 8001516:	d8e7      	bhi.n	80014e8 <LIB_SERIAL_Transmit+0xcc>
	}
	if (__remainder)
 8001518:	8bbb      	ldrh	r3, [r7, #28]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d006      	beq.n	800152c <LIB_SERIAL_Transmit+0x110>
	{
		HAL_UART_Transmit(&__huart, __pData, __remainder, 1000);
 800151e:	8bba      	ldrh	r2, [r7, #28]
 8001520:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001524:	6a39      	ldr	r1, [r7, #32]
 8001526:	4806      	ldr	r0, [pc, #24]	; (8001540 <LIB_SERIAL_Transmit+0x124>)
 8001528:	f006 fac5 	bl	8007ab6 <HAL_UART_Transmit>
	}
	HAL_Delay(1);
 800152c:	2001      	movs	r0, #1
 800152e:	f001 ffd5 	bl	80034dc <HAL_Delay>
	return SERIAL_OK;
 8001532:	2300      	movs	r3, #0
}
 8001534:	4618      	mov	r0, r3
 8001536:	3728      	adds	r7, #40	; 0x28
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}
 800153c:	08008f4c 	.word	0x08008f4c
 8001540:	20000390 	.word	0x20000390

08001544 <LIB_SERIAL_IMG_Transmit>:
  * @brief Transmits an image with its required information
  * @param img Pointer to image structure
  * @retval 0 if successfully transmitted
  */
int8_t LIB_SERIAL_IMG_Transmit(IMAGE_HandleTypeDef * img)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b088      	sub	sp, #32
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
	uint8_t __header[3] = "STW", __count = 0;
 800154c:	4a34      	ldr	r2, [pc, #208]	; (8001620 <LIB_SERIAL_IMG_Transmit+0xdc>)
 800154e:	f107 030c 	add.w	r3, r7, #12
 8001552:	6812      	ldr	r2, [r2, #0]
 8001554:	4611      	mov	r1, r2
 8001556:	8019      	strh	r1, [r3, #0]
 8001558:	3302      	adds	r3, #2
 800155a:	0c12      	lsrs	r2, r2, #16
 800155c:	701a      	strb	r2, [r3, #0]
 800155e:	2300      	movs	r3, #0
 8001560:	77fb      	strb	r3, [r7, #31]
	uint16_t __quotient = 0, __remainder = 0;
 8001562:	2300      	movs	r3, #0
 8001564:	82fb      	strh	r3, [r7, #22]
 8001566:	2300      	movs	r3, #0
 8001568:	82bb      	strh	r3, [r7, #20]
	uint16_t divisor = UINT16_MAX;
 800156a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800156e:	827b      	strh	r3, [r7, #18]
	uint8_t * __pData = img->pData;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	61bb      	str	r3, [r7, #24]

	__quotient 	= img->size / divisor;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	68da      	ldr	r2, [r3, #12]
 800157a:	8a7b      	ldrh	r3, [r7, #18]
 800157c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001580:	82fb      	strh	r3, [r7, #22]
	__remainder = img->size % divisor;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	68db      	ldr	r3, [r3, #12]
 8001586:	8a7a      	ldrh	r2, [r7, #18]
 8001588:	fbb3 f1f2 	udiv	r1, r3, r2
 800158c:	fb02 f201 	mul.w	r2, r2, r1
 8001590:	1a9b      	subs	r3, r3, r2
 8001592:	82bb      	strh	r3, [r7, #20]

	HAL_UART_Transmit(&__huart, __header, 3, 10);
 8001594:	f107 010c 	add.w	r1, r7, #12
 8001598:	230a      	movs	r3, #10
 800159a:	2203      	movs	r2, #3
 800159c:	4821      	ldr	r0, [pc, #132]	; (8001624 <LIB_SERIAL_IMG_Transmit+0xe0>)
 800159e:	f006 fa8a 	bl	8007ab6 <HAL_UART_Transmit>
	HAL_UART_Transmit(&__huart, (uint8_t*)&img->height, 2, 10);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	1d99      	adds	r1, r3, #6
 80015a6:	230a      	movs	r3, #10
 80015a8:	2202      	movs	r2, #2
 80015aa:	481e      	ldr	r0, [pc, #120]	; (8001624 <LIB_SERIAL_IMG_Transmit+0xe0>)
 80015ac:	f006 fa83 	bl	8007ab6 <HAL_UART_Transmit>
	HAL_UART_Transmit(&__huart, (uint8_t*)&img->width,  2, 10);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	1d19      	adds	r1, r3, #4
 80015b4:	230a      	movs	r3, #10
 80015b6:	2202      	movs	r2, #2
 80015b8:	481a      	ldr	r0, [pc, #104]	; (8001624 <LIB_SERIAL_IMG_Transmit+0xe0>)
 80015ba:	f006 fa7c 	bl	8007ab6 <HAL_UART_Transmit>
	HAL_UART_Transmit(&__huart, (uint8_t*)&img->format, 1, 10);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	f103 0108 	add.w	r1, r3, #8
 80015c4:	230a      	movs	r3, #10
 80015c6:	2201      	movs	r2, #1
 80015c8:	4816      	ldr	r0, [pc, #88]	; (8001624 <LIB_SERIAL_IMG_Transmit+0xe0>)
 80015ca:	f006 fa74 	bl	8007ab6 <HAL_UART_Transmit>
	while(__count < __quotient)
 80015ce:	e00f      	b.n	80015f0 <LIB_SERIAL_IMG_Transmit+0xac>
	{
		HAL_UART_Transmit(&__huart, __pData, UINT16_MAX, 1000);
 80015d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80015d8:	69b9      	ldr	r1, [r7, #24]
 80015da:	4812      	ldr	r0, [pc, #72]	; (8001624 <LIB_SERIAL_IMG_Transmit+0xe0>)
 80015dc:	f006 fa6b 	bl	8007ab6 <HAL_UART_Transmit>
		__count++;
 80015e0:	7ffb      	ldrb	r3, [r7, #31]
 80015e2:	3301      	adds	r3, #1
 80015e4:	77fb      	strb	r3, [r7, #31]
		__pData += UINT16_MAX;
 80015e6:	69ba      	ldr	r2, [r7, #24]
 80015e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015ec:	4413      	add	r3, r2
 80015ee:	61bb      	str	r3, [r7, #24]
	while(__count < __quotient)
 80015f0:	7ffb      	ldrb	r3, [r7, #31]
 80015f2:	b29b      	uxth	r3, r3
 80015f4:	8afa      	ldrh	r2, [r7, #22]
 80015f6:	429a      	cmp	r2, r3
 80015f8:	d8ea      	bhi.n	80015d0 <LIB_SERIAL_IMG_Transmit+0x8c>
	}
	if (__remainder)
 80015fa:	8abb      	ldrh	r3, [r7, #20]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d006      	beq.n	800160e <LIB_SERIAL_IMG_Transmit+0xca>
	{
		HAL_UART_Transmit(&__huart, __pData, __remainder, 1000);
 8001600:	8aba      	ldrh	r2, [r7, #20]
 8001602:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001606:	69b9      	ldr	r1, [r7, #24]
 8001608:	4806      	ldr	r0, [pc, #24]	; (8001624 <LIB_SERIAL_IMG_Transmit+0xe0>)
 800160a:	f006 fa54 	bl	8007ab6 <HAL_UART_Transmit>
	}
	HAL_Delay(1);
 800160e:	2001      	movs	r0, #1
 8001610:	f001 ff64 	bl	80034dc <HAL_Delay>
	return SERIAL_OK;
 8001614:	2300      	movs	r3, #0
}
 8001616:	4618      	mov	r0, r3
 8001618:	3720      	adds	r7, #32
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	08008f54 	.word	0x08008f54
 8001624:	20000390 	.word	0x20000390

08001628 <LIB_SW_Init>:
											((format) == IMAGE_FORMAT_RGB565) || \
											((format) == IMAGE_FORMAT_RGB888))
#define IS_PARAM_NON_ZERO(prm) 		((prm) != 0)

int8_t LIB_SW_Init(SW_TypeDef * sw)
{
 8001628:	b480      	push	{r7}
 800162a:	b083      	sub	sp, #12
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
	if(IS_PARAM_IN_INTERVAL(sw->input_image->height) &&
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	88db      	ldrh	r3, [r3, #6]
 8001636:	2b13      	cmp	r3, #19
 8001638:	d957      	bls.n	80016ea <LIB_SW_Init+0xc2>
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	88db      	ldrh	r3, [r3, #6]
 8001640:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8001644:	d851      	bhi.n	80016ea <LIB_SW_Init+0xc2>
			IS_PARAM_IN_INTERVAL(sw->input_image->width) &&
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	889b      	ldrh	r3, [r3, #4]
	if(IS_PARAM_IN_INTERVAL(sw->input_image->height) &&
 800164c:	2b13      	cmp	r3, #19
 800164e:	d94c      	bls.n	80016ea <LIB_SW_Init+0xc2>
			IS_PARAM_IN_INTERVAL(sw->input_image->width) &&
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	889b      	ldrh	r3, [r3, #4]
 8001656:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800165a:	d846      	bhi.n	80016ea <LIB_SW_Init+0xc2>
			IS_PARAM_IN_INTERVAL(sw->output_image->height) &&
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	88db      	ldrh	r3, [r3, #6]
			IS_PARAM_IN_INTERVAL(sw->input_image->width) &&
 8001662:	2b13      	cmp	r3, #19
 8001664:	d941      	bls.n	80016ea <LIB_SW_Init+0xc2>
			IS_PARAM_IN_INTERVAL(sw->output_image->height) &&
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	88db      	ldrh	r3, [r3, #6]
 800166c:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8001670:	d83b      	bhi.n	80016ea <LIB_SW_Init+0xc2>
			IS_PARAM_IN_INTERVAL(sw->output_image->width) &&
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	889b      	ldrh	r3, [r3, #4]
			IS_PARAM_IN_INTERVAL(sw->output_image->height) &&
 8001678:	2b13      	cmp	r3, #19
 800167a:	d936      	bls.n	80016ea <LIB_SW_Init+0xc2>
			IS_PARAM_IN_INTERVAL(sw->output_image->width) &&
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	889b      	ldrh	r3, [r3, #4]
 8001682:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8001686:	d830      	bhi.n	80016ea <LIB_SW_Init+0xc2>
			IS_FORMAT_VALID(sw->input_image->format))
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	7a1b      	ldrb	r3, [r3, #8]
			IS_PARAM_IN_INTERVAL(sw->output_image->width) &&
 800168e:	2b01      	cmp	r3, #1
 8001690:	d009      	beq.n	80016a6 <LIB_SW_Init+0x7e>
			IS_FORMAT_VALID(sw->input_image->format))
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	7a1b      	ldrb	r3, [r3, #8]
 8001698:	2b02      	cmp	r3, #2
 800169a:	d004      	beq.n	80016a6 <LIB_SW_Init+0x7e>
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	7a1b      	ldrb	r3, [r3, #8]
 80016a2:	2b03      	cmp	r3, #3
 80016a4:	d121      	bne.n	80016ea <LIB_SW_Init+0xc2>
	{
		sw->params.nHeight 	= sw->input_image->height / sw->output_image->height;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	88da      	ldrh	r2, [r3, #6]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	88db      	ldrh	r3, [r3, #6]
 80016b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80016b6:	b29b      	uxth	r3, r3
 80016b8:	461a      	mov	r2, r3
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	60da      	str	r2, [r3, #12]
		sw->params.nWidth 	= sw->input_image->width  / sw->output_image->width;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	889a      	ldrh	r2, [r3, #4]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	889b      	ldrh	r3, [r3, #4]
 80016ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80016ce:	b29b      	uxth	r3, r3
 80016d0:	461a      	mov	r2, r3
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	609a      	str	r2, [r3, #8]
		sw->params.currentHeight 	= 0;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	f04f 0200 	mov.w	r2, #0
 80016dc:	615a      	str	r2, [r3, #20]
		sw->params.currentWidth		= 0;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	f04f 0200 	mov.w	r2, #0
 80016e4:	611a      	str	r2, [r3, #16]

		return OK;
 80016e6:	2300      	movs	r3, #0
 80016e8:	e001      	b.n	80016ee <LIB_SW_Init+0xc6>
	}
	return ERROR;
 80016ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	370c      	adds	r7, #12
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr

080016fa <LIB_SW_GetWindow>:
	}

}

int8_t LIB_SW_GetWindow(SW_TypeDef * sw)
{
 80016fa:	b480      	push	{r7}
 80016fc:	b08b      	sub	sp, #44	; 0x2c
 80016fe:	af00      	add	r7, sp, #0
 8001700:	6078      	str	r0, [r7, #4]
	if(!(IS_PARAM_NON_ZERO(sw->input_image->pData) && IS_PARAM_NON_ZERO(sw->output_image->pData)))
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d004      	beq.n	8001716 <LIB_SW_GetWindow+0x1c>
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d102      	bne.n	800171c <LIB_SW_GetWindow+0x22>
	{
		return ERROR;
 8001716:	f04f 33ff 	mov.w	r3, #4294967295
 800171a:	e087      	b.n	800182c <LIB_SW_GetWindow+0x132>
	}
	float heightIndexf = sw->params.currentHeight * sw->input_image->width  * sw->input_image->format * sw->output_image->height;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	ed93 7a05 	vldr	s14, [r3, #20]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	889b      	ldrh	r3, [r3, #4]
 8001728:	ee07 3a90 	vmov	s15, r3
 800172c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001730:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	7a1b      	ldrb	r3, [r3, #8]
 800173a:	ee07 3a90 	vmov	s15, r3
 800173e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001742:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	88db      	ldrh	r3, [r3, #6]
 800174c:	ee07 3a90 	vmov	s15, r3
 8001750:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001754:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001758:	edc7 7a06 	vstr	s15, [r7, #24]
	float widthIndexf  = sw->params.currentWidth  * sw->output_image->width * sw->input_image->format;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	ed93 7a04 	vldr	s14, [r3, #16]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	889b      	ldrh	r3, [r3, #4]
 8001768:	ee07 3a90 	vmov	s15, r3
 800176c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001770:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	7a1b      	ldrb	r3, [r3, #8]
 800177a:	ee07 3a90 	vmov	s15, r3
 800177e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001782:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001786:	edc7 7a05 	vstr	s15, [r7, #20]
	uint32_t heightIndex = heightIndexf;
 800178a:	edd7 7a06 	vldr	s15, [r7, #24]
 800178e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001792:	ee17 3a90 	vmov	r3, s15
 8001796:	613b      	str	r3, [r7, #16]
	uint32_t widthIndex  = widthIndexf;
 8001798:	edd7 7a05 	vldr	s15, [r7, #20]
 800179c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80017a0:	ee17 3a90 	vmov	r3, s15
 80017a4:	60fb      	str	r3, [r7, #12]
	uint32_t x = 0;
 80017a6:	2300      	movs	r3, #0
 80017a8:	627b      	str	r3, [r7, #36]	; 0x24
	for (uint32_t i = 0;i < sw->output_image->height; i++)
 80017aa:	2300      	movs	r3, #0
 80017ac:	623b      	str	r3, [r7, #32]
 80017ae:	e035      	b.n	800181c <LIB_SW_GetWindow+0x122>
	{
		for (uint32_t j = 0; j < sw->output_image->width * sw->input_image->format; j++)
 80017b0:	2300      	movs	r3, #0
 80017b2:	61fb      	str	r3, [r7, #28]
 80017b4:	e022      	b.n	80017fc <LIB_SW_GetWindow+0x102>
		{
			sw->output_image->pData[x] = sw->input_image->pData[(j + widthIndex) +  (heightIndex + (i * sw->input_image->width * sw->input_image->format)) ];
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	69f9      	ldr	r1, [r7, #28]
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	4419      	add	r1, r3
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	889b      	ldrh	r3, [r3, #4]
 80017c8:	4618      	mov	r0, r3
 80017ca:	6a3b      	ldr	r3, [r7, #32]
 80017cc:	fb03 f300 	mul.w	r3, r3, r0
 80017d0:	6878      	ldr	r0, [r7, #4]
 80017d2:	6800      	ldr	r0, [r0, #0]
 80017d4:	7a00      	ldrb	r0, [r0, #8]
 80017d6:	fb00 f003 	mul.w	r0, r0, r3
 80017da:	693b      	ldr	r3, [r7, #16]
 80017dc:	4403      	add	r3, r0
 80017de:	440b      	add	r3, r1
 80017e0:	441a      	add	r2, r3
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	6819      	ldr	r1, [r3, #0]
 80017e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ea:	440b      	add	r3, r1
 80017ec:	7812      	ldrb	r2, [r2, #0]
 80017ee:	701a      	strb	r2, [r3, #0]
			x++;
 80017f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f2:	3301      	adds	r3, #1
 80017f4:	627b      	str	r3, [r7, #36]	; 0x24
		for (uint32_t j = 0; j < sw->output_image->width * sw->input_image->format; j++)
 80017f6:	69fb      	ldr	r3, [r7, #28]
 80017f8:	3301      	adds	r3, #1
 80017fa:	61fb      	str	r3, [r7, #28]
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	889b      	ldrh	r3, [r3, #4]
 8001802:	461a      	mov	r2, r3
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	7a1b      	ldrb	r3, [r3, #8]
 800180a:	fb03 f302 	mul.w	r3, r3, r2
 800180e:	461a      	mov	r2, r3
 8001810:	69fb      	ldr	r3, [r7, #28]
 8001812:	4293      	cmp	r3, r2
 8001814:	d3cf      	bcc.n	80017b6 <LIB_SW_GetWindow+0xbc>
	for (uint32_t i = 0;i < sw->output_image->height; i++)
 8001816:	6a3b      	ldr	r3, [r7, #32]
 8001818:	3301      	adds	r3, #1
 800181a:	623b      	str	r3, [r7, #32]
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	88db      	ldrh	r3, [r3, #6]
 8001822:	461a      	mov	r2, r3
 8001824:	6a3b      	ldr	r3, [r7, #32]
 8001826:	4293      	cmp	r3, r2
 8001828:	d3c2      	bcc.n	80017b0 <LIB_SW_GetWindow+0xb6>
		}
	}
	return OK;
 800182a:	2300      	movs	r3, #0
}
 800182c:	4618      	mov	r0, r3
 800182e:	372c      	adds	r7, #44	; 0x2c
 8001830:	46bd      	mov	sp, r7
 8001832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001836:	4770      	bx	lr

08001838 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800183c:	f3bf 8f4f 	dsb	sy
}
 8001840:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001842:	f3bf 8f6f 	isb	sy
}
 8001846:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001848:	4b0d      	ldr	r3, [pc, #52]	; (8001880 <SCB_EnableICache+0x48>)
 800184a:	2200      	movs	r2, #0
 800184c:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001850:	f3bf 8f4f 	dsb	sy
}
 8001854:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001856:	f3bf 8f6f 	isb	sy
}
 800185a:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800185c:	4b08      	ldr	r3, [pc, #32]	; (8001880 <SCB_EnableICache+0x48>)
 800185e:	695b      	ldr	r3, [r3, #20]
 8001860:	4a07      	ldr	r2, [pc, #28]	; (8001880 <SCB_EnableICache+0x48>)
 8001862:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001866:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001868:	f3bf 8f4f 	dsb	sy
}
 800186c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800186e:	f3bf 8f6f 	isb	sy
}
 8001872:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8001874:	bf00      	nop
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr
 800187e:	bf00      	nop
 8001880:	e000ed00 	.word	0xe000ed00

08001884 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8001884:	b480      	push	{r7}
 8001886:	b085      	sub	sp, #20
 8001888:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800188a:	4b1f      	ldr	r3, [pc, #124]	; (8001908 <SCB_EnableDCache+0x84>)
 800188c:	2200      	movs	r2, #0
 800188e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001892:	f3bf 8f4f 	dsb	sy
}
 8001896:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001898:	4b1b      	ldr	r3, [pc, #108]	; (8001908 <SCB_EnableDCache+0x84>)
 800189a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800189e:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	0b5b      	lsrs	r3, r3, #13
 80018a4:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80018a8:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	08db      	lsrs	r3, r3, #3
 80018ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80018b2:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	015a      	lsls	r2, r3, #5
 80018b8:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80018bc:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80018be:	68ba      	ldr	r2, [r7, #8]
 80018c0:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80018c2:	4911      	ldr	r1, [pc, #68]	; (8001908 <SCB_EnableDCache+0x84>)
 80018c4:	4313      	orrs	r3, r2
 80018c6:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80018ca:	68bb      	ldr	r3, [r7, #8]
 80018cc:	1e5a      	subs	r2, r3, #1
 80018ce:	60ba      	str	r2, [r7, #8]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d1ef      	bne.n	80018b4 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	1e5a      	subs	r2, r3, #1
 80018d8:	60fa      	str	r2, [r7, #12]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d1e5      	bne.n	80018aa <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 80018de:	f3bf 8f4f 	dsb	sy
}
 80018e2:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80018e4:	4b08      	ldr	r3, [pc, #32]	; (8001908 <SCB_EnableDCache+0x84>)
 80018e6:	695b      	ldr	r3, [r3, #20]
 80018e8:	4a07      	ldr	r2, [pc, #28]	; (8001908 <SCB_EnableDCache+0x84>)
 80018ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018ee:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80018f0:	f3bf 8f4f 	dsb	sy
}
 80018f4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80018f6:	f3bf 8f6f 	isb	sy
}
 80018fa:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 80018fc:	bf00      	nop
 80018fe:	3714      	adds	r7, #20
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr
 8001908:	e000ed00 	.word	0xe000ed00

0800190c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b084      	sub	sp, #16
 8001910:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8001912:	f7ff ff91 	bl	8001838 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8001916:	f7ff ffb5 	bl	8001884 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800191a:	f001 fd81 	bl	8003420 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800191e:	f000 f887 	bl	8001a30 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001922:	f000 f99f 	bl	8001c64 <MX_GPIO_Init>
  MX_DCMI_Init();
 8001926:	f000 f8eb 	bl	8001b00 <MX_DCMI_Init>
  MX_FMC_Init();
 800192a:	f000 f94d 	bl	8001bc8 <MX_FMC_Init>
  MX_USART1_UART_Init();
 800192e:	f000 f91b 	bl	8001b68 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  LIB_MPU_Init();
 8001932:	f7ff fa47 	bl	8000dc4 <LIB_MPU_Init>
  LIB_IMAGE_InitStruct(&img, (uint8_t*)pImage, IMAGE_RESOLUTION_VGA_HEIGHT, IMAGE_RESOLUTION_VGA_WIDTH, IMAGE_FORMAT_RGB565);
 8001936:	2302      	movs	r3, #2
 8001938:	9300      	str	r3, [sp, #0]
 800193a:	f44f 7320 	mov.w	r3, #640	; 0x280
 800193e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001942:	4932      	ldr	r1, [pc, #200]	; (8001a0c <main+0x100>)
 8001944:	4832      	ldr	r0, [pc, #200]	; (8001a10 <main+0x104>)
 8001946:	f7ff f9f4 	bl	8000d32 <LIB_IMAGE_InitStruct>
  LIB_IMAGE_InitStruct(&cropped, (uint8_t*)pImageCropped, 320, 320, IMAGE_FORMAT_RGB565);
 800194a:	2302      	movs	r3, #2
 800194c:	9300      	str	r3, [sp, #0]
 800194e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001952:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001956:	492f      	ldr	r1, [pc, #188]	; (8001a14 <main+0x108>)
 8001958:	482f      	ldr	r0, [pc, #188]	; (8001a18 <main+0x10c>)
 800195a:	f7ff f9ea 	bl	8000d32 <LIB_IMAGE_InitStruct>
  LIB_IMAGE_InitStruct(&croppedGray, (uint8_t*)pImageCroppedGray, 320, 320, IMAGE_FORMAT_GRAYSCALE);
 800195e:	2301      	movs	r3, #1
 8001960:	9300      	str	r3, [sp, #0]
 8001962:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001966:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800196a:	492c      	ldr	r1, [pc, #176]	; (8001a1c <main+0x110>)
 800196c:	482c      	ldr	r0, [pc, #176]	; (8001a20 <main+0x114>)
 800196e:	f7ff f9e0 	bl	8000d32 <LIB_IMAGE_InitStruct>
  LIB_SW_Init(&sw);
 8001972:	482c      	ldr	r0, [pc, #176]	; (8001a24 <main+0x118>)
 8001974:	f7ff fe58 	bl	8001628 <LIB_SW_Init>
  BSP_SDRAM_Init();
 8001978:	f001 fb9c 	bl	80030b4 <BSP_SDRAM_Init>
  LIB_OV5640_Init(OV5640_RESOLUTION_R640x480, OV5640_FORMAT_RGB565);
 800197c:	2100      	movs	r1, #0
 800197e:	2003      	movs	r0, #3
 8001980:	f7ff fa4e 	bl	8000e20 <LIB_OV5640_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	if (!LIB_OV5640_CaptureSnapshot(&img, 5000))
 8001984:	f241 3188 	movw	r1, #5000	; 0x1388
 8001988:	4821      	ldr	r0, [pc, #132]	; (8001a10 <main+0x104>)
 800198a:	f7ff fa85 	bl	8000e98 <LIB_OV5640_CaptureSnapshot>
 800198e:	4603      	mov	r3, r0
 8001990:	2b00      	cmp	r3, #0
 8001992:	d1f7      	bne.n	8001984 <main+0x78>
	{
		// Preprocess Image
		LIB_SW_GetWindow(&sw);
 8001994:	4823      	ldr	r0, [pc, #140]	; (8001a24 <main+0x118>)
 8001996:	f7ff feb0 	bl	80016fa <LIB_SW_GetWindow>
		LIB_RGB2GRAY_Convert565(&cropped, &croppedGray);
 800199a:	4921      	ldr	r1, [pc, #132]	; (8001a20 <main+0x114>)
 800199c:	481e      	ldr	r0, [pc, #120]	; (8001a18 <main+0x10c>)
 800199e:	f7ff fce4 	bl	800136a <LIB_RGB2GRAY_Convert565>
		uint32_t i;
		for (i = 0; i < croppedGray.height * cropped.width; ++i)
 80019a2:	2300      	movs	r3, #0
 80019a4:	607b      	str	r3, [r7, #4]
 80019a6:	e011      	b.n	80019cc <main+0xc0>
		{
			pImageCroppedGrayF32[i] = (float)croppedGray.pData[i];
 80019a8:	4b1d      	ldr	r3, [pc, #116]	; (8001a20 <main+0x114>)
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	4413      	add	r3, r2
 80019b0:	781b      	ldrb	r3, [r3, #0]
 80019b2:	ee07 3a90 	vmov	s15, r3
 80019b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80019ba:	4a1b      	ldr	r2, [pc, #108]	; (8001a28 <main+0x11c>)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	009b      	lsls	r3, r3, #2
 80019c0:	4413      	add	r3, r2
 80019c2:	edc3 7a00 	vstr	s15, [r3]
		for (i = 0; i < croppedGray.height * cropped.width; ++i)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	3301      	adds	r3, #1
 80019ca:	607b      	str	r3, [r7, #4]
 80019cc:	4b14      	ldr	r3, [pc, #80]	; (8001a20 <main+0x114>)
 80019ce:	88db      	ldrh	r3, [r3, #6]
 80019d0:	461a      	mov	r2, r3
 80019d2:	4b11      	ldr	r3, [pc, #68]	; (8001a18 <main+0x10c>)
 80019d4:	889b      	ldrh	r3, [r3, #4]
 80019d6:	fb03 f302 	mul.w	r3, r3, r2
 80019da:	461a      	mov	r2, r3
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	4293      	cmp	r3, r2
 80019e0:	d3e2      	bcc.n	80019a8 <main+0x9c>
		}
		// Transmit Image to PC
		LIB_SERIAL_IMG_Transmit(&croppedGray);
 80019e2:	480f      	ldr	r0, [pc, #60]	; (8001a20 <main+0x114>)
 80019e4:	f7ff fdae 	bl	8001544 <LIB_SERIAL_IMG_Transmit>

		// Extract Features
		hdr_calculate_moments(&croppedGray, &output);
 80019e8:	4910      	ldr	r1, [pc, #64]	; (8001a2c <main+0x120>)
 80019ea:	480d      	ldr	r0, [pc, #52]	; (8001a20 <main+0x114>)
 80019ec:	f7fe fd88 	bl	8000500 <hdr_calculate_moments>
		hdr_calculate_hu_moments(&output);
 80019f0:	480e      	ldr	r0, [pc, #56]	; (8001a2c <main+0x120>)
 80019f2:	f7fe ffc3 	bl	800097c <hdr_calculate_hu_moments>
		// Transmit Moments to PC
		LIB_SERIAL_Transmit(&output, sizeof(output)/sizeof(float), TYPE_F32);
 80019f6:	2207      	movs	r2, #7
 80019f8:	2137      	movs	r1, #55	; 0x37
 80019fa:	480c      	ldr	r0, [pc, #48]	; (8001a2c <main+0x120>)
 80019fc:	f7ff fd0e 	bl	800141c <LIB_SERIAL_Transmit>
		HAL_Delay(1000);
 8001a00:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a04:	f001 fd6a 	bl	80034dc <HAL_Delay>
	if (!LIB_OV5640_CaptureSnapshot(&img, 5000))
 8001a08:	e7bc      	b.n	8001984 <main+0x78>
 8001a0a:	bf00      	nop
 8001a0c:	c0000000 	.word	0xc0000000
 8001a10:	20000414 	.word	0x20000414
 8001a14:	c0096000 	.word	0xc0096000
 8001a18:	20000424 	.word	0x20000424
 8001a1c:	c00c8000 	.word	0xc00c8000
 8001a20:	20000468 	.word	0x20000468
 8001a24:	20000000 	.word	0x20000000
 8001a28:	c00e1000 	.word	0xc00e1000
 8001a2c:	20000264 	.word	0x20000264

08001a30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b094      	sub	sp, #80	; 0x50
 8001a34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a36:	f107 0320 	add.w	r3, r7, #32
 8001a3a:	2230      	movs	r2, #48	; 0x30
 8001a3c:	2100      	movs	r1, #0
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f006 fdf4 	bl	800862c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a44:	f107 030c 	add.w	r3, r7, #12
 8001a48:	2200      	movs	r2, #0
 8001a4a:	601a      	str	r2, [r3, #0]
 8001a4c:	605a      	str	r2, [r3, #4]
 8001a4e:	609a      	str	r2, [r3, #8]
 8001a50:	60da      	str	r2, [r3, #12]
 8001a52:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a54:	4b28      	ldr	r3, [pc, #160]	; (8001af8 <SystemClock_Config+0xc8>)
 8001a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a58:	4a27      	ldr	r2, [pc, #156]	; (8001af8 <SystemClock_Config+0xc8>)
 8001a5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a5e:	6413      	str	r3, [r2, #64]	; 0x40
 8001a60:	4b25      	ldr	r3, [pc, #148]	; (8001af8 <SystemClock_Config+0xc8>)
 8001a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a68:	60bb      	str	r3, [r7, #8]
 8001a6a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001a6c:	4b23      	ldr	r3, [pc, #140]	; (8001afc <SystemClock_Config+0xcc>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001a74:	4a21      	ldr	r2, [pc, #132]	; (8001afc <SystemClock_Config+0xcc>)
 8001a76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a7a:	6013      	str	r3, [r2, #0]
 8001a7c:	4b1f      	ldr	r3, [pc, #124]	; (8001afc <SystemClock_Config+0xcc>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001a84:	607b      	str	r3, [r7, #4]
 8001a86:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001a88:	2302      	movs	r3, #2
 8001a8a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a90:	2310      	movs	r3, #16
 8001a92:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a94:	2302      	movs	r3, #2
 8001a96:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 10;
 8001a9c:	230a      	movs	r3, #10
 8001a9e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 210;
 8001aa0:	23d2      	movs	r3, #210	; 0xd2
 8001aa2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001aa4:	2302      	movs	r3, #2
 8001aa6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001aa8:	2302      	movs	r3, #2
 8001aaa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001aac:	f107 0320 	add.w	r3, r7, #32
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f004 feb7 	bl	8006824 <HAL_RCC_OscConfig>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d001      	beq.n	8001ac0 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001abc:	f000 fc8a 	bl	80023d4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ac0:	230f      	movs	r3, #15
 8001ac2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ac4:	2302      	movs	r3, #2
 8001ac6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001acc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001ad0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001ad2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ad6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001ad8:	f107 030c 	add.w	r3, r7, #12
 8001adc:	2105      	movs	r1, #5
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f005 f944 	bl	8006d6c <HAL_RCC_ClockConfig>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d001      	beq.n	8001aee <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8001aea:	f000 fc73 	bl	80023d4 <Error_Handler>
  }
}
 8001aee:	bf00      	nop
 8001af0:	3750      	adds	r7, #80	; 0x50
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	40023800 	.word	0x40023800
 8001afc:	40007000 	.word	0x40007000

08001b00 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8001b04:	4b16      	ldr	r3, [pc, #88]	; (8001b60 <MX_DCMI_Init+0x60>)
 8001b06:	4a17      	ldr	r2, [pc, #92]	; (8001b64 <MX_DCMI_Init+0x64>)
 8001b08:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8001b0a:	4b15      	ldr	r3, [pc, #84]	; (8001b60 <MX_DCMI_Init+0x60>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 8001b10:	4b13      	ldr	r3, [pc, #76]	; (8001b60 <MX_DCMI_Init+0x60>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 8001b16:	4b12      	ldr	r3, [pc, #72]	; (8001b60 <MX_DCMI_Init+0x60>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8001b1c:	4b10      	ldr	r3, [pc, #64]	; (8001b60 <MX_DCMI_Init+0x60>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8001b22:	4b0f      	ldr	r3, [pc, #60]	; (8001b60 <MX_DCMI_Init+0x60>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8001b28:	4b0d      	ldr	r3, [pc, #52]	; (8001b60 <MX_DCMI_Init+0x60>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8001b2e:	4b0c      	ldr	r3, [pc, #48]	; (8001b60 <MX_DCMI_Init+0x60>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8001b34:	4b0a      	ldr	r3, [pc, #40]	; (8001b60 <MX_DCMI_Init+0x60>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8001b3a:	4b09      	ldr	r3, [pc, #36]	; (8001b60 <MX_DCMI_Init+0x60>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8001b40:	4b07      	ldr	r3, [pc, #28]	; (8001b60 <MX_DCMI_Init+0x60>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8001b46:	4b06      	ldr	r3, [pc, #24]	; (8001b60 <MX_DCMI_Init+0x60>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8001b4c:	4804      	ldr	r0, [pc, #16]	; (8001b60 <MX_DCMI_Init+0x60>)
 8001b4e:	f001 fe77 	bl	8003840 <HAL_DCMI_Init>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d001      	beq.n	8001b5c <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8001b58:	f000 fc3c 	bl	80023d4 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8001b5c:	bf00      	nop
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	20000340 	.word	0x20000340
 8001b64:	50050000 	.word	0x50050000

08001b68 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001b6c:	4b13      	ldr	r3, [pc, #76]	; (8001bbc <MX_USART1_UART_Init+0x54>)
 8001b6e:	4a14      	ldr	r2, [pc, #80]	; (8001bc0 <MX_USART1_UART_Init+0x58>)
 8001b70:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 2000000;
 8001b72:	4b12      	ldr	r3, [pc, #72]	; (8001bbc <MX_USART1_UART_Init+0x54>)
 8001b74:	4a13      	ldr	r2, [pc, #76]	; (8001bc4 <MX_USART1_UART_Init+0x5c>)
 8001b76:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b78:	4b10      	ldr	r3, [pc, #64]	; (8001bbc <MX_USART1_UART_Init+0x54>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001b7e:	4b0f      	ldr	r3, [pc, #60]	; (8001bbc <MX_USART1_UART_Init+0x54>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001b84:	4b0d      	ldr	r3, [pc, #52]	; (8001bbc <MX_USART1_UART_Init+0x54>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001b8a:	4b0c      	ldr	r3, [pc, #48]	; (8001bbc <MX_USART1_UART_Init+0x54>)
 8001b8c:	220c      	movs	r2, #12
 8001b8e:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b90:	4b0a      	ldr	r3, [pc, #40]	; (8001bbc <MX_USART1_UART_Init+0x54>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b96:	4b09      	ldr	r3, [pc, #36]	; (8001bbc <MX_USART1_UART_Init+0x54>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b9c:	4b07      	ldr	r3, [pc, #28]	; (8001bbc <MX_USART1_UART_Init+0x54>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ba2:	4b06      	ldr	r3, [pc, #24]	; (8001bbc <MX_USART1_UART_Init+0x54>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001ba8:	4804      	ldr	r0, [pc, #16]	; (8001bbc <MX_USART1_UART_Init+0x54>)
 8001baa:	f005 ff36 	bl	8007a1a <HAL_UART_Init>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d001      	beq.n	8001bb8 <MX_USART1_UART_Init+0x50>
  {
    Error_Handler();
 8001bb4:	f000 fc0e 	bl	80023d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001bb8:	bf00      	nop
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	20000390 	.word	0x20000390
 8001bc0:	40011000 	.word	0x40011000
 8001bc4:	001e8480 	.word	0x001e8480

08001bc8 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b088      	sub	sp, #32
 8001bcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8001bce:	1d3b      	adds	r3, r7, #4
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	601a      	str	r2, [r3, #0]
 8001bd4:	605a      	str	r2, [r3, #4]
 8001bd6:	609a      	str	r2, [r3, #8]
 8001bd8:	60da      	str	r2, [r3, #12]
 8001bda:	611a      	str	r2, [r3, #16]
 8001bdc:	615a      	str	r2, [r3, #20]
 8001bde:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001be0:	4b1e      	ldr	r3, [pc, #120]	; (8001c5c <MX_FMC_Init+0x94>)
 8001be2:	4a1f      	ldr	r2, [pc, #124]	; (8001c60 <MX_FMC_Init+0x98>)
 8001be4:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8001be6:	4b1d      	ldr	r3, [pc, #116]	; (8001c5c <MX_FMC_Init+0x94>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001bec:	4b1b      	ldr	r3, [pc, #108]	; (8001c5c <MX_FMC_Init+0x94>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8001bf2:	4b1a      	ldr	r3, [pc, #104]	; (8001c5c <MX_FMC_Init+0x94>)
 8001bf4:	2204      	movs	r2, #4
 8001bf6:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8001bf8:	4b18      	ldr	r3, [pc, #96]	; (8001c5c <MX_FMC_Init+0x94>)
 8001bfa:	2210      	movs	r2, #16
 8001bfc:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001bfe:	4b17      	ldr	r3, [pc, #92]	; (8001c5c <MX_FMC_Init+0x94>)
 8001c00:	2240      	movs	r2, #64	; 0x40
 8001c02:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 8001c04:	4b15      	ldr	r3, [pc, #84]	; (8001c5c <MX_FMC_Init+0x94>)
 8001c06:	2280      	movs	r2, #128	; 0x80
 8001c08:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001c0a:	4b14      	ldr	r3, [pc, #80]	; (8001c5c <MX_FMC_Init+0x94>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 8001c10:	4b12      	ldr	r3, [pc, #72]	; (8001c5c <MX_FMC_Init+0x94>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8001c16:	4b11      	ldr	r3, [pc, #68]	; (8001c5c <MX_FMC_Init+0x94>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8001c1c:	4b0f      	ldr	r3, [pc, #60]	; (8001c5c <MX_FMC_Init+0x94>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 8001c22:	2310      	movs	r3, #16
 8001c24:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 8001c26:	2310      	movs	r3, #16
 8001c28:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 8001c2a:	2310      	movs	r3, #16
 8001c2c:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 8001c2e:	2310      	movs	r3, #16
 8001c30:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 8001c32:	2310      	movs	r3, #16
 8001c34:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 8001c36:	2310      	movs	r3, #16
 8001c38:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 8001c3a:	2310      	movs	r3, #16
 8001c3c:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001c3e:	1d3b      	adds	r3, r7, #4
 8001c40:	4619      	mov	r1, r3
 8001c42:	4806      	ldr	r0, [pc, #24]	; (8001c5c <MX_FMC_Init+0x94>)
 8001c44:	f005 fe58 	bl	80078f8 <HAL_SDRAM_Init>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d001      	beq.n	8001c52 <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 8001c4e:	f000 fbc1 	bl	80023d4 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8001c52:	bf00      	nop
 8001c54:	3720      	adds	r7, #32
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	20000434 	.word	0x20000434
 8001c60:	a0000140 	.word	0xa0000140

08001c64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b090      	sub	sp, #64	; 0x40
 8001c68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c6a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c6e:	2200      	movs	r2, #0
 8001c70:	601a      	str	r2, [r3, #0]
 8001c72:	605a      	str	r2, [r3, #4]
 8001c74:	609a      	str	r2, [r3, #8]
 8001c76:	60da      	str	r2, [r3, #12]
 8001c78:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c7a:	4bad      	ldr	r3, [pc, #692]	; (8001f30 <MX_GPIO_Init+0x2cc>)
 8001c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c7e:	4aac      	ldr	r2, [pc, #688]	; (8001f30 <MX_GPIO_Init+0x2cc>)
 8001c80:	f043 0310 	orr.w	r3, r3, #16
 8001c84:	6313      	str	r3, [r2, #48]	; 0x30
 8001c86:	4baa      	ldr	r3, [pc, #680]	; (8001f30 <MX_GPIO_Init+0x2cc>)
 8001c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8a:	f003 0310 	and.w	r3, r3, #16
 8001c8e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001c92:	4ba7      	ldr	r3, [pc, #668]	; (8001f30 <MX_GPIO_Init+0x2cc>)
 8001c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c96:	4aa6      	ldr	r2, [pc, #664]	; (8001f30 <MX_GPIO_Init+0x2cc>)
 8001c98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c9e:	4ba4      	ldr	r3, [pc, #656]	; (8001f30 <MX_GPIO_Init+0x2cc>)
 8001ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ca6:	627b      	str	r3, [r7, #36]	; 0x24
 8001ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001caa:	4ba1      	ldr	r3, [pc, #644]	; (8001f30 <MX_GPIO_Init+0x2cc>)
 8001cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cae:	4aa0      	ldr	r2, [pc, #640]	; (8001f30 <MX_GPIO_Init+0x2cc>)
 8001cb0:	f043 0302 	orr.w	r3, r3, #2
 8001cb4:	6313      	str	r3, [r2, #48]	; 0x30
 8001cb6:	4b9e      	ldr	r3, [pc, #632]	; (8001f30 <MX_GPIO_Init+0x2cc>)
 8001cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cba:	f003 0302 	and.w	r3, r3, #2
 8001cbe:	623b      	str	r3, [r7, #32]
 8001cc0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001cc2:	4b9b      	ldr	r3, [pc, #620]	; (8001f30 <MX_GPIO_Init+0x2cc>)
 8001cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc6:	4a9a      	ldr	r2, [pc, #616]	; (8001f30 <MX_GPIO_Init+0x2cc>)
 8001cc8:	f043 0308 	orr.w	r3, r3, #8
 8001ccc:	6313      	str	r3, [r2, #48]	; 0x30
 8001cce:	4b98      	ldr	r3, [pc, #608]	; (8001f30 <MX_GPIO_Init+0x2cc>)
 8001cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd2:	f003 0308 	and.w	r3, r3, #8
 8001cd6:	61fb      	str	r3, [r7, #28]
 8001cd8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cda:	4b95      	ldr	r3, [pc, #596]	; (8001f30 <MX_GPIO_Init+0x2cc>)
 8001cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cde:	4a94      	ldr	r2, [pc, #592]	; (8001f30 <MX_GPIO_Init+0x2cc>)
 8001ce0:	f043 0304 	orr.w	r3, r3, #4
 8001ce4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ce6:	4b92      	ldr	r3, [pc, #584]	; (8001f30 <MX_GPIO_Init+0x2cc>)
 8001ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cea:	f003 0304 	and.w	r3, r3, #4
 8001cee:	61bb      	str	r3, [r7, #24]
 8001cf0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cf2:	4b8f      	ldr	r3, [pc, #572]	; (8001f30 <MX_GPIO_Init+0x2cc>)
 8001cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf6:	4a8e      	ldr	r2, [pc, #568]	; (8001f30 <MX_GPIO_Init+0x2cc>)
 8001cf8:	f043 0301 	orr.w	r3, r3, #1
 8001cfc:	6313      	str	r3, [r2, #48]	; 0x30
 8001cfe:	4b8c      	ldr	r3, [pc, #560]	; (8001f30 <MX_GPIO_Init+0x2cc>)
 8001d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d02:	f003 0301 	and.w	r3, r3, #1
 8001d06:	617b      	str	r3, [r7, #20]
 8001d08:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001d0a:	4b89      	ldr	r3, [pc, #548]	; (8001f30 <MX_GPIO_Init+0x2cc>)
 8001d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d0e:	4a88      	ldr	r2, [pc, #544]	; (8001f30 <MX_GPIO_Init+0x2cc>)
 8001d10:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d14:	6313      	str	r3, [r2, #48]	; 0x30
 8001d16:	4b86      	ldr	r3, [pc, #536]	; (8001f30 <MX_GPIO_Init+0x2cc>)
 8001d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d1e:	613b      	str	r3, [r7, #16]
 8001d20:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001d22:	4b83      	ldr	r3, [pc, #524]	; (8001f30 <MX_GPIO_Init+0x2cc>)
 8001d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d26:	4a82      	ldr	r2, [pc, #520]	; (8001f30 <MX_GPIO_Init+0x2cc>)
 8001d28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d2e:	4b80      	ldr	r3, [pc, #512]	; (8001f30 <MX_GPIO_Init+0x2cc>)
 8001d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d36:	60fb      	str	r3, [r7, #12]
 8001d38:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001d3a:	4b7d      	ldr	r3, [pc, #500]	; (8001f30 <MX_GPIO_Init+0x2cc>)
 8001d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3e:	4a7c      	ldr	r2, [pc, #496]	; (8001f30 <MX_GPIO_Init+0x2cc>)
 8001d40:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d44:	6313      	str	r3, [r2, #48]	; 0x30
 8001d46:	4b7a      	ldr	r3, [pc, #488]	; (8001f30 <MX_GPIO_Init+0x2cc>)
 8001d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d4e:	60bb      	str	r3, [r7, #8]
 8001d50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001d52:	4b77      	ldr	r3, [pc, #476]	; (8001f30 <MX_GPIO_Init+0x2cc>)
 8001d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d56:	4a76      	ldr	r2, [pc, #472]	; (8001f30 <MX_GPIO_Init+0x2cc>)
 8001d58:	f043 0320 	orr.w	r3, r3, #32
 8001d5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d5e:	4b74      	ldr	r3, [pc, #464]	; (8001f30 <MX_GPIO_Init+0x2cc>)
 8001d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d62:	f003 0320 	and.w	r3, r3, #32
 8001d66:	607b      	str	r3, [r7, #4]
 8001d68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d6a:	4b71      	ldr	r3, [pc, #452]	; (8001f30 <MX_GPIO_Init+0x2cc>)
 8001d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6e:	4a70      	ldr	r2, [pc, #448]	; (8001f30 <MX_GPIO_Init+0x2cc>)
 8001d70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d74:	6313      	str	r3, [r2, #48]	; 0x30
 8001d76:	4b6e      	ldr	r3, [pc, #440]	; (8001f30 <MX_GPIO_Init+0x2cc>)
 8001d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d7e:	603b      	str	r3, [r7, #0]
 8001d80:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001d82:	2201      	movs	r2, #1
 8001d84:	2120      	movs	r1, #32
 8001d86:	486b      	ldr	r0, [pc, #428]	; (8001f34 <MX_GPIO_Init+0x2d0>)
 8001d88:	f003 ffc4 	bl	8005d14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin, GPIO_PIN_RESET);
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	f241 010c 	movw	r1, #4108	; 0x100c
 8001d92:	4869      	ldr	r0, [pc, #420]	; (8001f38 <MX_GPIO_Init+0x2d4>)
 8001d94:	f003 ffbe 	bl	8005d14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 8001d98:	2200      	movs	r2, #0
 8001d9a:	2108      	movs	r1, #8
 8001d9c:	4867      	ldr	r0, [pc, #412]	; (8001f3c <MX_GPIO_Init+0x2d8>)
 8001d9e:	f003 ffb9 	bl	8005d14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8001da2:	2200      	movs	r2, #0
 8001da4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001da8:	4865      	ldr	r0, [pc, #404]	; (8001f40 <MX_GPIO_Init+0x2dc>)
 8001daa:	f003 ffb3 	bl	8005d14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8001dae:	2200      	movs	r2, #0
 8001db0:	21c8      	movs	r1, #200	; 0xc8
 8001db2:	4864      	ldr	r0, [pc, #400]	; (8001f44 <MX_GPIO_Init+0x2e0>)
 8001db4:	f003 ffae 	bl	8005d14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LCD_B0_Pin */
  GPIO_InitStruct.Pin = LCD_B0_Pin;
 8001db8:	2310      	movs	r3, #16
 8001dba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dbc:	2302      	movs	r3, #2
 8001dbe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001dc8:	230e      	movs	r3, #14
 8001dca:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8001dcc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	485d      	ldr	r0, [pc, #372]	; (8001f48 <MX_GPIO_Init+0x2e4>)
 8001dd4:	f003 fdf2 	bl	80059bc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8001dd8:	2308      	movs	r3, #8
 8001dda:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de0:	2300      	movs	r3, #0
 8001de2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001de4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001de8:	4619      	mov	r1, r3
 8001dea:	4857      	ldr	r0, [pc, #348]	; (8001f48 <MX_GPIO_Init+0x2e4>)
 8001dec:	f003 fde6 	bl	80059bc <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_D2_Pin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8001df0:	2304      	movs	r3, #4
 8001df2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001df4:	2302      	movs	r3, #2
 8001df6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dfc:	2303      	movs	r3, #3
 8001dfe:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001e00:	2309      	movs	r3, #9
 8001e02:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8001e04:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e08:	4619      	mov	r1, r3
 8001e0a:	484f      	ldr	r0, [pc, #316]	; (8001f48 <MX_GPIO_Init+0x2e4>)
 8001e0c:	f003 fdd6 	bl	80059bc <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8001e10:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8001e14:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e16:	2302      	movs	r3, #2
 8001e18:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e1e:	2303      	movs	r3, #3
 8001e20:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001e22:	230b      	movs	r3, #11
 8001e24:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001e26:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	4845      	ldr	r0, [pc, #276]	; (8001f44 <MX_GPIO_Init+0x2e0>)
 8001e2e:	f003 fdc5 	bl	80059bc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8001e32:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001e36:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e38:	2312      	movs	r3, #18
 8001e3a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e40:	2300      	movs	r3, #0
 8001e42:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001e44:	2304      	movs	r3, #4
 8001e46:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e48:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	483f      	ldr	r0, [pc, #252]	; (8001f4c <MX_GPIO_Init+0x2e8>)
 8001e50:	f003 fdb4 	bl	80059bc <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 8001e54:	f643 4323 	movw	r3, #15395	; 0x3c23
 8001e58:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e5a:	2302      	movs	r3, #2
 8001e5c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e62:	2303      	movs	r3, #3
 8001e64:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001e66:	230a      	movs	r3, #10
 8001e68:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e6a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e6e:	4619      	mov	r1, r3
 8001e70:	4836      	ldr	r0, [pc, #216]	; (8001f4c <MX_GPIO_Init+0x2e8>)
 8001e72:	f003 fda3 	bl	80059bc <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 8001e76:	2310      	movs	r3, #16
 8001e78:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e7a:	2302      	movs	r3, #2
 8001e7c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e82:	2300      	movs	r3, #0
 8001e84:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001e86:	2302      	movs	r3, #2
 8001e88:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8001e8a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e8e:	4619      	mov	r1, r3
 8001e90:	482e      	ldr	r0, [pc, #184]	; (8001f4c <MX_GPIO_Init+0x2e8>)
 8001e92:	f003 fd93 	bl	80059bc <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_RX0_Pin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8001e96:	2380      	movs	r3, #128	; 0x80
 8001e98:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e9a:	2302      	movs	r3, #2
 8001e9c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8001ea6:	2308      	movs	r3, #8
 8001ea8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8001eaa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001eae:	4619      	mov	r1, r3
 8001eb0:	4820      	ldr	r0, [pc, #128]	; (8001f34 <MX_GPIO_Init+0x2d0>)
 8001eb2:	f003 fd83 	bl	80059bc <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC_CK_Pin SDMMC_D3_Pin SDMMC_D2_Pin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8001eb6:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001eba:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ebc:	2302      	movs	r3, #2
 8001ebe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ec4:	2303      	movs	r3, #3
 8001ec6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001ec8:	230c      	movs	r3, #12
 8001eca:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ecc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	481f      	ldr	r0, [pc, #124]	; (8001f50 <MX_GPIO_Init+0x2ec>)
 8001ed4:	f003 fd72 	bl	80059bc <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D9_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8001ed8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001edc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ede:	2302      	movs	r3, #2
 8001ee0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001eea:	2301      	movs	r3, #1
 8001eec:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8001eee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	4817      	ldr	r0, [pc, #92]	; (8001f54 <MX_GPIO_Init+0x2f0>)
 8001ef6:	f003 fd61 	bl	80059bc <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_NCS_Pin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8001efa:	2340      	movs	r3, #64	; 0x40
 8001efc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001efe:	2302      	movs	r3, #2
 8001f00:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f02:	2300      	movs	r3, #0
 8001f04:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f06:	2303      	movs	r3, #3
 8001f08:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001f0a:	230a      	movs	r3, #10
 8001f0c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8001f0e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f12:	4619      	mov	r1, r3
 8001f14:	480d      	ldr	r0, [pc, #52]	; (8001f4c <MX_GPIO_Init+0x2e8>)
 8001f16:	f003 fd51 	bl	80059bc <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_B1_Pin LCD_B2_Pin LCD_B3_Pin LCD_G4_Pin
                           LCD_G1_Pin LCD_G3_Pin LCD_G0_Pin LCD_G2_Pin
                           LCD_R7_Pin LCD_R5_Pin LCD_R6_Pin LCD_R4_Pin
                           LCD_R3_Pin LCD_R1_Pin LCD_R2_Pin */
  GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8001f1a:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8001f1e:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f20:	2302      	movs	r3, #2
 8001f22:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f24:	2300      	movs	r3, #0
 8001f26:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001f2c:	230e      	movs	r3, #14
 8001f2e:	e013      	b.n	8001f58 <MX_GPIO_Init+0x2f4>
 8001f30:	40023800 	.word	0x40023800
 8001f34:	40020c00 	.word	0x40020c00
 8001f38:	40022000 	.word	0x40022000
 8001f3c:	40022800 	.word	0x40022800
 8001f40:	40021c00 	.word	0x40021c00
 8001f44:	40021800 	.word	0x40021800
 8001f48:	40021000 	.word	0x40021000
 8001f4c:	40020400 	.word	0x40020400
 8001f50:	40020800 	.word	0x40020800
 8001f54:	40020000 	.word	0x40020000
 8001f58:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001f5a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f5e:	4619      	mov	r1, r3
 8001f60:	48bc      	ldr	r0, [pc, #752]	; (8002254 <MX_GPIO_Init+0x5f0>)
 8001f62:	f003 fd2b 	bl	80059bc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8001f66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f70:	2300      	movs	r3, #0
 8001f72:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001f74:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f78:	4619      	mov	r1, r3
 8001f7a:	48b6      	ldr	r0, [pc, #728]	; (8002254 <MX_GPIO_Init+0x5f0>)
 8001f7c:	f003 fd1e 	bl	80059bc <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8001f80:	2340      	movs	r3, #64	; 0x40
 8001f82:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001f84:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001f88:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8001f8e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f92:	4619      	mov	r1, r3
 8001f94:	48b0      	ldr	r0, [pc, #704]	; (8002258 <MX_GPIO_Init+0x5f4>)
 8001f96:	f003 fd11 	bl	80059bc <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8001f9a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001f9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fa0:	2302      	movs	r3, #2
 8001fa2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fa8:	2303      	movs	r3, #3
 8001faa:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001fac:	230a      	movs	r3, #10
 8001fae:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fb0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001fb4:	4619      	mov	r1, r3
 8001fb6:	48a9      	ldr	r0, [pc, #676]	; (800225c <MX_GPIO_Init+0x5f8>)
 8001fb8:	f003 fd00 	bl	80059bc <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI2_MCLKA_Pin SAI2_SCKA_Pin SAI2_FSA_Pin SAI2_SDA_Pin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8001fbc:	23f0      	movs	r3, #240	; 0xf0
 8001fbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fc0:	2302      	movs	r3, #2
 8001fc2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8001fcc:	230a      	movs	r3, #10
 8001fce:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001fd0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	48a2      	ldr	r0, [pc, #648]	; (8002260 <MX_GPIO_Init+0x5fc>)
 8001fd8:	f003 fcf0 	bl	80059bc <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DE_Pin LCD_B7_Pin LCD_B6_Pin LCD_B5_Pin
                           LCD_G6_Pin LCD_G7_Pin LCD_G5_Pin */
  GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8001fdc:	23f7      	movs	r3, #247	; 0xf7
 8001fde:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fe0:	2302      	movs	r3, #2
 8001fe2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001fec:	230e      	movs	r3, #14
 8001fee:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8001ff0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	489b      	ldr	r0, [pc, #620]	; (8002264 <MX_GPIO_Init+0x600>)
 8001ff8:	f003 fce0 	bl	80059bc <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_B4_Pin */
  GPIO_InitStruct.Pin = LCD_B4_Pin;
 8001ffc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002000:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002002:	2302      	movs	r3, #2
 8002004:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002006:	2300      	movs	r3, #0
 8002008:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800200a:	2300      	movs	r3, #0
 800200c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800200e:	2309      	movs	r3, #9
 8002010:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8002012:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002016:	4619      	mov	r1, r3
 8002018:	4893      	ldr	r0, [pc, #588]	; (8002268 <MX_GPIO_Init+0x604>)
 800201a:	f003 fccf 	bl	80059bc <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI2_SDB_Pin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 800201e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002022:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002024:	2302      	movs	r3, #2
 8002026:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002028:	2300      	movs	r3, #0
 800202a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800202c:	2300      	movs	r3, #0
 800202e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8002030:	230a      	movs	r3, #10
 8002032:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8002034:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002038:	4619      	mov	r1, r3
 800203a:	488b      	ldr	r0, [pc, #556]	; (8002268 <MX_GPIO_Init+0x604>)
 800203c:	f003 fcbe 	bl	80059bc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8002040:	2320      	movs	r3, #32
 8002042:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002044:	2301      	movs	r3, #1
 8002046:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002048:	2300      	movs	r3, #0
 800204a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800204c:	2300      	movs	r3, #0
 800204e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002050:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002054:	4619      	mov	r1, r3
 8002056:	4880      	ldr	r0, [pc, #512]	; (8002258 <MX_GPIO_Init+0x5f4>)
 8002058:	f003 fcb0 	bl	80059bc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 800205c:	f241 030c 	movw	r3, #4108	; 0x100c
 8002060:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002062:	2301      	movs	r3, #1
 8002064:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002066:	2300      	movs	r3, #0
 8002068:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800206a:	2300      	movs	r3, #0
 800206c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800206e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002072:	4619      	mov	r1, r3
 8002074:	487a      	ldr	r0, [pc, #488]	; (8002260 <MX_GPIO_Init+0x5fc>)
 8002076:	f003 fca1 	bl	80059bc <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 800207a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800207e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002080:	2300      	movs	r3, #0
 8002082:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002084:	2300      	movs	r3, #0
 8002086:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8002088:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800208c:	4619      	mov	r1, r3
 800208e:	4877      	ldr	r0, [pc, #476]	; (800226c <MX_GPIO_Init+0x608>)
 8002090:	f003 fc94 	bl	80059bc <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_HSYNC_Pin LCD_VSYNC_Pin LCD_R0_Pin LCD_CLK_Pin */
  GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8002094:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8002098:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800209a:	2302      	movs	r3, #2
 800209c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800209e:	2300      	movs	r3, #0
 80020a0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020a2:	2300      	movs	r3, #0
 80020a4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80020a6:	230e      	movs	r3, #14
 80020a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80020aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80020ae:	4619      	mov	r1, r3
 80020b0:	486b      	ldr	r0, [pc, #428]	; (8002260 <MX_GPIO_Init+0x5fc>)
 80020b2:	f003 fc83 	bl	80059bc <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 80020b6:	2308      	movs	r3, #8
 80020b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020ba:	2301      	movs	r3, #1
 80020bc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020be:	2300      	movs	r3, #0
 80020c0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020c2:	2300      	movs	r3, #0
 80020c4:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 80020c6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80020ca:	4619      	mov	r1, r3
 80020cc:	4865      	ldr	r0, [pc, #404]	; (8002264 <MX_GPIO_Init+0x600>)
 80020ce:	f003 fc75 	bl	80059bc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80020d2:	2310      	movs	r3, #16
 80020d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020d6:	2300      	movs	r3, #0
 80020d8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020da:	2300      	movs	r3, #0
 80020dc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80020de:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80020e2:	4619      	mov	r1, r3
 80020e4:	485c      	ldr	r0, [pc, #368]	; (8002258 <MX_GPIO_Init+0x5f4>)
 80020e6:	f003 fc69 	bl	80059bc <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC_D0_Pin */
  GPIO_InitStruct.Pin = SDMMC_D0_Pin;
 80020ea:	2304      	movs	r3, #4
 80020ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ee:	2302      	movs	r3, #2
 80020f0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f2:	2300      	movs	r3, #0
 80020f4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020f6:	2303      	movs	r3, #3
 80020f8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80020fa:	230c      	movs	r3, #12
 80020fc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SDMMC_D0_GPIO_Port, &GPIO_InitStruct);
 80020fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002102:	4619      	mov	r1, r3
 8002104:	4854      	ldr	r0, [pc, #336]	; (8002258 <MX_GPIO_Init+0x5f4>)
 8002106:	f003 fc59 	bl	80059bc <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 800210a:	f248 0304 	movw	r3, #32772	; 0x8004
 800210e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002110:	2300      	movs	r3, #0
 8002112:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002114:	2300      	movs	r3, #0
 8002116:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002118:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800211c:	4619      	mov	r1, r3
 800211e:	4854      	ldr	r0, [pc, #336]	; (8002270 <MX_GPIO_Init+0x60c>)
 8002120:	f003 fc4c 	bl	80059bc <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_SCK_D13_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 8002124:	2302      	movs	r3, #2
 8002126:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002128:	2302      	movs	r3, #2
 800212a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800212c:	2300      	movs	r3, #0
 800212e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002130:	2300      	movs	r3, #0
 8002132:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002134:	2305      	movs	r3, #5
 8002136:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 8002138:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800213c:	4619      	mov	r1, r3
 800213e:	4848      	ldr	r0, [pc, #288]	; (8002260 <MX_GPIO_Init+0x5fc>)
 8002140:	f003 fc3c 	bl	80059bc <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8002144:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002148:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800214a:	2301      	movs	r3, #1
 800214c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800214e:	2300      	movs	r3, #0
 8002150:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002152:	2300      	movs	r3, #0
 8002154:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8002156:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800215a:	4619      	mov	r1, r3
 800215c:	4844      	ldr	r0, [pc, #272]	; (8002270 <MX_GPIO_Init+0x60c>)
 800215e:	f003 fc2d 	bl	80059bc <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_CS_D5_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8002162:	2301      	movs	r3, #1
 8002164:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002166:	2302      	movs	r3, #2
 8002168:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800216a:	2300      	movs	r3, #0
 800216c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800216e:	2300      	movs	r3, #0
 8002170:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002172:	2302      	movs	r3, #2
 8002174:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8002176:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800217a:	4619      	mov	r1, r3
 800217c:	4838      	ldr	r0, [pc, #224]	; (8002260 <MX_GPIO_Init+0x5fc>)
 800217e:	f003 fc1d 	bl	80059bc <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D10_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8002182:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002186:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002188:	2302      	movs	r3, #2
 800218a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800218c:	2300      	movs	r3, #0
 800218e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002190:	2300      	movs	r3, #0
 8002192:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002194:	2301      	movs	r3, #1
 8002196:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8002198:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800219c:	4619      	mov	r1, r3
 800219e:	482f      	ldr	r0, [pc, #188]	; (800225c <MX_GPIO_Init+0x5f8>)
 80021a0:	f003 fc0c 	bl	80059bc <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 80021a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80021a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80021aa:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80021ae:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b0:	2300      	movs	r3, #0
 80021b2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 80021b4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80021b8:	4619      	mov	r1, r3
 80021ba:	4829      	ldr	r0, [pc, #164]	; (8002260 <MX_GPIO_Init+0x5fc>)
 80021bc:	f003 fbfe 	bl	80059bc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_RX_D0_Pin ARDUINO_TX_D1_Pin */
  GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 80021c0:	23c0      	movs	r3, #192	; 0xc0
 80021c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021c4:	2302      	movs	r3, #2
 80021c6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c8:	2300      	movs	r3, #0
 80021ca:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021cc:	2303      	movs	r3, #3
 80021ce:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80021d0:	2308      	movs	r3, #8
 80021d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021d4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80021d8:	4619      	mov	r1, r3
 80021da:	4824      	ldr	r0, [pc, #144]	; (800226c <MX_GPIO_Init+0x608>)
 80021dc:	f003 fbee 	bl	80059bc <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 80021e0:	2310      	movs	r3, #16
 80021e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021e4:	2302      	movs	r3, #2
 80021e6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e8:	2300      	movs	r3, #0
 80021ea:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021ec:	2303      	movs	r3, #3
 80021ee:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80021f0:	230a      	movs	r3, #10
 80021f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 80021f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80021f8:	4619      	mov	r1, r3
 80021fa:	481d      	ldr	r0, [pc, #116]	; (8002270 <MX_GPIO_Init+0x60c>)
 80021fc:	f003 fbde 	bl	80059bc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8002200:	23c8      	movs	r3, #200	; 0xc8
 8002202:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002204:	2301      	movs	r3, #1
 8002206:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002208:	2300      	movs	r3, #0
 800220a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800220c:	2300      	movs	r3, #0
 800220e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002210:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002214:	4619      	mov	r1, r3
 8002216:	4814      	ldr	r0, [pc, #80]	; (8002268 <MX_GPIO_Init+0x604>)
 8002218:	f003 fbd0 	bl	80059bc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_A4_Pin ARDUINO_A5_Pin ARDUINO_A1_Pin ARDUINO_A2_Pin
                           ARDUINO_A3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 800221c:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8002220:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ARDUINO_A3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002222:	2303      	movs	r3, #3
 8002224:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002226:	2300      	movs	r3, #0
 8002228:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800222a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800222e:	4619      	mov	r1, r3
 8002230:	4810      	ldr	r0, [pc, #64]	; (8002274 <MX_GPIO_Init+0x610>)
 8002232:	f003 fbc3 	bl	80059bc <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8002236:	2305      	movs	r3, #5
 8002238:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800223a:	2302      	movs	r3, #2
 800223c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800223e:	2300      	movs	r3, #0
 8002240:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002242:	2303      	movs	r3, #3
 8002244:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002246:	230a      	movs	r3, #10
 8002248:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800224a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800224e:	4619      	mov	r1, r3
 8002250:	e012      	b.n	8002278 <MX_GPIO_Init+0x614>
 8002252:	bf00      	nop
 8002254:	40022400 	.word	0x40022400
 8002258:	40020c00 	.word	0x40020c00
 800225c:	40020000 	.word	0x40020000
 8002260:	40022000 	.word	0x40022000
 8002264:	40022800 	.word	0x40022800
 8002268:	40021800 	.word	0x40021800
 800226c:	40020800 	.word	0x40020800
 8002270:	40021c00 	.word	0x40021c00
 8002274:	40021400 	.word	0x40021400
 8002278:	4850      	ldr	r0, [pc, #320]	; (80023bc <MX_GPIO_Init+0x758>)
 800227a:	f003 fb9f 	bl	80059bc <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800227e:	2332      	movs	r3, #50	; 0x32
 8002280:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002282:	2302      	movs	r3, #2
 8002284:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002286:	2300      	movs	r3, #0
 8002288:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800228a:	2303      	movs	r3, #3
 800228c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800228e:	230b      	movs	r3, #11
 8002290:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002292:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002296:	4619      	mov	r1, r3
 8002298:	4848      	ldr	r0, [pc, #288]	; (80023bc <MX_GPIO_Init+0x758>)
 800229a:	f003 fb8f 	bl	80059bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800229e:	2304      	movs	r3, #4
 80022a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022a2:	2302      	movs	r3, #2
 80022a4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a6:	2300      	movs	r3, #0
 80022a8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022aa:	2303      	movs	r3, #3
 80022ac:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80022ae:	2309      	movs	r3, #9
 80022b0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80022b6:	4619      	mov	r1, r3
 80022b8:	4841      	ldr	r0, [pc, #260]	; (80023c0 <MX_GPIO_Init+0x75c>)
 80022ba:	f003 fb7f 	bl	80059bc <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 80022be:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80022c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022c4:	2302      	movs	r3, #2
 80022c6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c8:	2300      	movs	r3, #0
 80022ca:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022cc:	2303      	movs	r3, #3
 80022ce:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80022d0:	2309      	movs	r3, #9
 80022d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80022d4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80022d8:	4619      	mov	r1, r3
 80022da:	483a      	ldr	r0, [pc, #232]	; (80023c4 <MX_GPIO_Init+0x760>)
 80022dc:	f003 fb6e 	bl	80059bc <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 80022e0:	2304      	movs	r3, #4
 80022e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022e4:	2300      	movs	r3, #0
 80022e6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e8:	2300      	movs	r3, #0
 80022ea:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 80022ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80022f0:	4619      	mov	r1, r3
 80022f2:	4835      	ldr	r0, [pc, #212]	; (80023c8 <MX_GPIO_Init+0x764>)
 80022f4:	f003 fb62 	bl	80059bc <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80022f8:	2386      	movs	r3, #134	; 0x86
 80022fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022fc:	2302      	movs	r3, #2
 80022fe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002300:	2300      	movs	r3, #0
 8002302:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002304:	2303      	movs	r3, #3
 8002306:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002308:	230b      	movs	r3, #11
 800230a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800230c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002310:	4619      	mov	r1, r3
 8002312:	482e      	ldr	r0, [pc, #184]	; (80023cc <MX_GPIO_Init+0x768>)
 8002314:	f003 fb52 	bl	80059bc <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_A0_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8002318:	2301      	movs	r3, #1
 800231a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800231c:	2303      	movs	r3, #3
 800231e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002320:	2300      	movs	r3, #0
 8002322:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8002324:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002328:	4619      	mov	r1, r3
 800232a:	4828      	ldr	r0, [pc, #160]	; (80023cc <MX_GPIO_Init+0x768>)
 800232c:	f003 fb46 	bl	80059bc <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_SCL_Pin LCD_SDA_Pin */
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8002330:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002334:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002336:	2312      	movs	r3, #18
 8002338:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800233a:	2300      	movs	r3, #0
 800233c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800233e:	2303      	movs	r3, #3
 8002340:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002342:	2304      	movs	r3, #4
 8002344:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002346:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800234a:	4619      	mov	r1, r3
 800234c:	4820      	ldr	r0, [pc, #128]	; (80023d0 <MX_GPIO_Init+0x76c>)
 800234e:	f003 fb35 	bl	80059bc <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8002352:	2328      	movs	r3, #40	; 0x28
 8002354:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002356:	2302      	movs	r3, #2
 8002358:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800235a:	2300      	movs	r3, #0
 800235c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800235e:	2303      	movs	r3, #3
 8002360:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002362:	230a      	movs	r3, #10
 8002364:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002366:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800236a:	4619      	mov	r1, r3
 800236c:	4817      	ldr	r0, [pc, #92]	; (80023cc <MX_GPIO_Init+0x768>)
 800236e:	f003 fb25 	bl	80059bc <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D6_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8002372:	2340      	movs	r3, #64	; 0x40
 8002374:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002376:	2302      	movs	r3, #2
 8002378:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800237a:	2300      	movs	r3, #0
 800237c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800237e:	2300      	movs	r3, #0
 8002380:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8002382:	2309      	movs	r3, #9
 8002384:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8002386:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800238a:	4619      	mov	r1, r3
 800238c:	4810      	ldr	r0, [pc, #64]	; (80023d0 <MX_GPIO_Init+0x76c>)
 800238e:	f003 fb15 	bl	80059bc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8002392:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002396:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002398:	2302      	movs	r3, #2
 800239a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800239c:	2300      	movs	r3, #0
 800239e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023a0:	2300      	movs	r3, #0
 80023a2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80023a4:	2305      	movs	r3, #5
 80023a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023a8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80023ac:	4619      	mov	r1, r3
 80023ae:	4804      	ldr	r0, [pc, #16]	; (80023c0 <MX_GPIO_Init+0x75c>)
 80023b0:	f003 fb04 	bl	80059bc <HAL_GPIO_Init>

}
 80023b4:	bf00      	nop
 80023b6:	3740      	adds	r7, #64	; 0x40
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}
 80023bc:	40020800 	.word	0x40020800
 80023c0:	40020400 	.word	0x40020400
 80023c4:	40020c00 	.word	0x40020c00
 80023c8:	40021800 	.word	0x40021800
 80023cc:	40020000 	.word	0x40020000
 80023d0:	40021c00 	.word	0x40021c00

080023d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80023d4:	b480      	push	{r7}
 80023d6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80023d8:	b672      	cpsid	i
}
 80023da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80023dc:	e7fe      	b.n	80023dc <Error_Handler+0x8>
	...

080023e0 <OV5640_RegisterBusIO>:
  * @brief  Register component IO bus
  * @param  Component object pointer
  * @retval Component status
  */
int32_t OV5640_RegisterBusIO(OV5640_Object_t *pObj, OV5640_IO_t *pIO)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b084      	sub	sp, #16
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
 80023e8:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d103      	bne.n	80023f8 <OV5640_RegisterBusIO+0x18>
  {
    ret = OV5640_ERROR;
 80023f0:	f04f 33ff 	mov.w	r3, #4294967295
 80023f4:	60fb      	str	r3, [r7, #12]
 80023f6:	e02c      	b.n	8002452 <OV5640_RegisterBusIO+0x72>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	685a      	ldr	r2, [r3, #4]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	891a      	ldrh	r2, [r3, #8]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	68da      	ldr	r2, [r3, #12]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	691a      	ldr	r2, [r3, #16]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	695a      	ldr	r2, [r3, #20]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	615a      	str	r2, [r3, #20]

    pObj->Ctx.ReadReg  = OV5640_ReadRegWrap;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	4a0c      	ldr	r2, [pc, #48]	; (800245c <OV5640_RegisterBusIO+0x7c>)
 800242c:	61da      	str	r2, [r3, #28]
    pObj->Ctx.WriteReg = OV5640_WriteRegWrap;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	4a0b      	ldr	r2, [pc, #44]	; (8002460 <OV5640_RegisterBusIO+0x80>)
 8002432:	619a      	str	r2, [r3, #24]
    pObj->Ctx.handle   = pObj;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	687a      	ldr	r2, [r7, #4]
 8002438:	621a      	str	r2, [r3, #32]

    if (pObj->IO.Init != NULL)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d004      	beq.n	800244c <OV5640_RegisterBusIO+0x6c>
    {
      ret = pObj->IO.Init();
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4798      	blx	r3
 8002448:	60f8      	str	r0, [r7, #12]
 800244a:	e002      	b.n	8002452 <OV5640_RegisterBusIO+0x72>
    }
    else
    {
      ret = OV5640_ERROR;
 800244c:	f04f 33ff 	mov.w	r3, #4294967295
 8002450:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8002452:	68fb      	ldr	r3, [r7, #12]
}
 8002454:	4618      	mov	r0, r3
 8002456:	3710      	adds	r7, #16
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}
 800245c:	08002b2d 	.word	0x08002b2d
 8002460:	08002b5f 	.word	0x08002b5f

08002464 <OV5640_Init>:
  * @param  Resolution  Camera resolution
  * @param  PixelFormat pixel format to be configured
  * @retval Component status
  */
int32_t OV5640_Init(OV5640_Object_t *pObj, uint32_t Resolution, uint32_t PixelFormat)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b088      	sub	sp, #32
 8002468:	af00      	add	r7, sp, #0
 800246a:	60f8      	str	r0, [r7, #12]
 800246c:	60b9      	str	r1, [r7, #8]
 800246e:	607a      	str	r2, [r7, #4]
  uint32_t index;
  int32_t ret = OV5640_OK;
 8002470:	2300      	movs	r3, #0
 8002472:	61bb      	str	r3, [r7, #24]
    {OV5640_AEC_CTRL1F, 0x14},
    {OV5640_SYSTEM_CTROL0, 0x02},
  };
  uint8_t tmp;

  if (pObj->IsInitialized == 0U)
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800247a:	2b00      	cmp	r3, #0
 800247c:	d165      	bne.n	800254a <OV5640_Init+0xe6>
  {
    /* Check if resolution is supported */
    if ((Resolution > OV5640_R800x480) ||
 800247e:	68bb      	ldr	r3, [r7, #8]
 8002480:	2b04      	cmp	r3, #4
 8002482:	d80e      	bhi.n	80024a2 <OV5640_Init+0x3e>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d00f      	beq.n	80024aa <OV5640_Init+0x46>
        ((PixelFormat != OV5640_RGB565) && (PixelFormat != OV5640_YUV422) &&
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2b02      	cmp	r3, #2
 800248e:	d00c      	beq.n	80024aa <OV5640_Init+0x46>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2b01      	cmp	r3, #1
 8002494:	d009      	beq.n	80024aa <OV5640_Init+0x46>
         (PixelFormat != OV5640_RGB888) && (PixelFormat != OV5640_Y8) &&
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2b07      	cmp	r3, #7
 800249a:	d006      	beq.n	80024aa <OV5640_Init+0x46>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2b08      	cmp	r3, #8
 80024a0:	d003      	beq.n	80024aa <OV5640_Init+0x46>
         (PixelFormat != OV5640_JPEG)))
    {
      ret = OV5640_ERROR;
 80024a2:	f04f 33ff 	mov.w	r3, #4294967295
 80024a6:	61bb      	str	r3, [r7, #24]
 80024a8:	e04f      	b.n	800254a <OV5640_Init+0xe6>
    }
    else
    {
      /* Set common parameters for all resolutions */
      for (index = 0; index < (sizeof(OV5640_Common) / 4U) ; index++)
 80024aa:	2300      	movs	r3, #0
 80024ac:	61fb      	str	r3, [r7, #28]
 80024ae:	e01f      	b.n	80024f0 <OV5640_Init+0x8c>
      {
        if (ret != OV5640_ERROR)
 80024b0:	69bb      	ldr	r3, [r7, #24]
 80024b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024b6:	d018      	beq.n	80024ea <OV5640_Init+0x86>
        {
          tmp = (uint8_t)OV5640_Common[index][1];
 80024b8:	4a26      	ldr	r2, [pc, #152]	; (8002554 <OV5640_Init+0xf0>)
 80024ba:	69fb      	ldr	r3, [r7, #28]
 80024bc:	009b      	lsls	r3, r3, #2
 80024be:	4413      	add	r3, r2
 80024c0:	885b      	ldrh	r3, [r3, #2]
 80024c2:	b2db      	uxtb	r3, r3
 80024c4:	75fb      	strb	r3, [r7, #23]

          if (ov5640_write_reg(&pObj->Ctx, OV5640_Common[index][0], &tmp, 1) != OV5640_OK)
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	f103 0018 	add.w	r0, r3, #24
 80024cc:	4a21      	ldr	r2, [pc, #132]	; (8002554 <OV5640_Init+0xf0>)
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 80024d4:	f107 0217 	add.w	r2, r7, #23
 80024d8:	2301      	movs	r3, #1
 80024da:	f000 fb70 	bl	8002bbe <ov5640_write_reg>
 80024de:	4603      	mov	r3, r0
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d002      	beq.n	80024ea <OV5640_Init+0x86>
          {
            ret = OV5640_ERROR;
 80024e4:	f04f 33ff 	mov.w	r3, #4294967295
 80024e8:	61bb      	str	r3, [r7, #24]
      for (index = 0; index < (sizeof(OV5640_Common) / 4U) ; index++)
 80024ea:	69fb      	ldr	r3, [r7, #28]
 80024ec:	3301      	adds	r3, #1
 80024ee:	61fb      	str	r3, [r7, #28]
 80024f0:	69fb      	ldr	r3, [r7, #28]
 80024f2:	2bfd      	cmp	r3, #253	; 0xfd
 80024f4:	d9dc      	bls.n	80024b0 <OV5640_Init+0x4c>
          }
        }
      }

      if (ret == OV5640_OK)
 80024f6:	69bb      	ldr	r3, [r7, #24]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d126      	bne.n	800254a <OV5640_Init+0xe6>
      {
        /* Set specific parameters for each resolution */
        if (OV5640_SetResolution(pObj, Resolution) != OV5640_OK)
 80024fc:	68b9      	ldr	r1, [r7, #8]
 80024fe:	68f8      	ldr	r0, [r7, #12]
 8002500:	f000 f9be 	bl	8002880 <OV5640_SetResolution>
 8002504:	4603      	mov	r3, r0
 8002506:	2b00      	cmp	r3, #0
 8002508:	d003      	beq.n	8002512 <OV5640_Init+0xae>
        {
          ret = OV5640_ERROR;
 800250a:	f04f 33ff 	mov.w	r3, #4294967295
 800250e:	61bb      	str	r3, [r7, #24]
 8002510:	e01b      	b.n	800254a <OV5640_Init+0xe6>
        }/* Set specific parameters for each pixel format */
        else if (OV5640_SetPixelFormat(pObj, PixelFormat) != OV5640_OK)
 8002512:	6879      	ldr	r1, [r7, #4]
 8002514:	68f8      	ldr	r0, [r7, #12]
 8002516:	f000 f81f 	bl	8002558 <OV5640_SetPixelFormat>
 800251a:	4603      	mov	r3, r0
 800251c:	2b00      	cmp	r3, #0
 800251e:	d003      	beq.n	8002528 <OV5640_Init+0xc4>
        {
          ret = OV5640_ERROR;
 8002520:	f04f 33ff 	mov.w	r3, #4294967295
 8002524:	61bb      	str	r3, [r7, #24]
 8002526:	e010      	b.n	800254a <OV5640_Init+0xe6>
        }/* Set PixelClock, Href and VSync Polarity */
        else if (OV5640_SetPolarities(pObj, OV5640_POLARITY_PCLK_HIGH, OV5640_POLARITY_HREF_HIGH,
 8002528:	2300      	movs	r3, #0
 800252a:	2201      	movs	r2, #1
 800252c:	2101      	movs	r1, #1
 800252e:	68f8      	ldr	r0, [r7, #12]
 8002530:	f000 fa9c 	bl	8002a6c <OV5640_SetPolarities>
 8002534:	4603      	mov	r3, r0
 8002536:	2b00      	cmp	r3, #0
 8002538:	d003      	beq.n	8002542 <OV5640_Init+0xde>
                                      OV5640_POLARITY_VSYNC_HIGH) != OV5640_OK)
        {
          ret = OV5640_ERROR;
 800253a:	f04f 33ff 	mov.w	r3, #4294967295
 800253e:	61bb      	str	r3, [r7, #24]
 8002540:	e003      	b.n	800254a <OV5640_Init+0xe6>
        }
        else
        {
          pObj->IsInitialized = 1U;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	2201      	movs	r2, #1
 8002546:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }
      }
    }
  }

  return ret;
 800254a:	69bb      	ldr	r3, [r7, #24]
}
 800254c:	4618      	mov	r0, r3
 800254e:	3720      	adds	r7, #32
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}
 8002554:	08008f5c 	.word	0x08008f5c

08002558 <OV5640_SetPixelFormat>:
  * @param  pObj  pointer to component object
  * @param  PixelFormat pixel format to be configured
  * @retval Component status
  */
int32_t OV5640_SetPixelFormat(OV5640_Object_t *pObj, uint32_t PixelFormat)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b086      	sub	sp, #24
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
 8002560:	6039      	str	r1, [r7, #0]
  int32_t ret = OV5640_OK;
 8002562:	2300      	movs	r3, #0
 8002564:	617b      	str	r3, [r7, #20]
    {OV5640_FORMAT_CTRL00, 0x30},
    {OV5640_FORMAT_MUX_CTRL, 0x00},
  };

  /* Check if PixelFormat is supported */
  if ((PixelFormat != OV5640_RGB565) && (PixelFormat != OV5640_YUV422) &&
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d00f      	beq.n	800258c <OV5640_SetPixelFormat+0x34>
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	2b02      	cmp	r3, #2
 8002570:	d00c      	beq.n	800258c <OV5640_SetPixelFormat+0x34>
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	2b01      	cmp	r3, #1
 8002576:	d009      	beq.n	800258c <OV5640_SetPixelFormat+0x34>
      (PixelFormat != OV5640_RGB888) && (PixelFormat != OV5640_Y8) &&
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	2b07      	cmp	r3, #7
 800257c:	d006      	beq.n	800258c <OV5640_SetPixelFormat+0x34>
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	2b08      	cmp	r3, #8
 8002582:	d003      	beq.n	800258c <OV5640_SetPixelFormat+0x34>
      (PixelFormat != OV5640_JPEG))
  {
    /* Pixel format not supported */
    ret = OV5640_ERROR;
 8002584:	f04f 33ff 	mov.w	r3, #4294967295
 8002588:	617b      	str	r3, [r7, #20]
 800258a:	e16a      	b.n	8002862 <OV5640_SetPixelFormat+0x30a>
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	3b01      	subs	r3, #1
 8002590:	2b07      	cmp	r3, #7
 8002592:	f200 80c3 	bhi.w	800271c <OV5640_SetPixelFormat+0x1c4>
 8002596:	a201      	add	r2, pc, #4	; (adr r2, 800259c <OV5640_SetPixelFormat+0x44>)
 8002598:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800259c:	08002615 	.word	0x08002615
 80025a0:	080025bd 	.word	0x080025bd
 80025a4:	0800271d 	.word	0x0800271d
 80025a8:	0800271d 	.word	0x0800271d
 80025ac:	0800271d 	.word	0x0800271d
 80025b0:	0800271d 	.word	0x0800271d
 80025b4:	0800266d 	.word	0x0800266d
 80025b8:	080026c5 	.word	0x080026c5
  {
    /* Set specific parameters for each PixelFormat */
    switch (PixelFormat)
    {
      case OV5640_YUV422:
        for (index = 0; index < (sizeof(OV5640_PF_YUV422) / 4U); index++)
 80025bc:	2300      	movs	r3, #0
 80025be:	613b      	str	r3, [r7, #16]
 80025c0:	e024      	b.n	800260c <OV5640_SetPixelFormat+0xb4>
        {
          if (ret != OV5640_ERROR)
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025c8:	d01d      	beq.n	8002606 <OV5640_SetPixelFormat+0xae>
          {
            tmp = (uint8_t)OV5640_PF_YUV422[index][1];
 80025ca:	4aa8      	ldr	r2, [pc, #672]	; (800286c <OV5640_SetPixelFormat+0x314>)
 80025cc:	693b      	ldr	r3, [r7, #16]
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	4413      	add	r3, r2
 80025d2:	885b      	ldrh	r3, [r3, #2]
 80025d4:	b2db      	uxtb	r3, r3
 80025d6:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_YUV422[index][0], &tmp, 1) != OV5640_OK)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	f103 0018 	add.w	r0, r3, #24
 80025de:	4aa3      	ldr	r2, [pc, #652]	; (800286c <OV5640_SetPixelFormat+0x314>)
 80025e0:	693b      	ldr	r3, [r7, #16]
 80025e2:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 80025e6:	f107 020f 	add.w	r2, r7, #15
 80025ea:	2301      	movs	r3, #1
 80025ec:	f000 fae7 	bl	8002bbe <ov5640_write_reg>
 80025f0:	4603      	mov	r3, r0
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d003      	beq.n	80025fe <OV5640_SetPixelFormat+0xa6>
            {
              ret = OV5640_ERROR;
 80025f6:	f04f 33ff 	mov.w	r3, #4294967295
 80025fa:	617b      	str	r3, [r7, #20]
 80025fc:	e003      	b.n	8002606 <OV5640_SetPixelFormat+0xae>
            }
            else
            {
              (void)OV5640_Delay(pObj, 1);
 80025fe:	2101      	movs	r1, #1
 8002600:	6878      	ldr	r0, [r7, #4]
 8002602:	f000 fa79 	bl	8002af8 <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_YUV422) / 4U); index++)
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	3301      	adds	r3, #1
 800260a:	613b      	str	r3, [r7, #16]
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	2b01      	cmp	r3, #1
 8002610:	d9d7      	bls.n	80025c2 <OV5640_SetPixelFormat+0x6a>
            }
          }
        }
        break;
 8002612:	e0af      	b.n	8002774 <OV5640_SetPixelFormat+0x21c>

      case OV5640_RGB888:
        for (index = 0; index < (sizeof(OV5640_PF_RGB888) / 4U); index++)
 8002614:	2300      	movs	r3, #0
 8002616:	613b      	str	r3, [r7, #16]
 8002618:	e024      	b.n	8002664 <OV5640_SetPixelFormat+0x10c>
        {
          if (ret != OV5640_ERROR)
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002620:	d01d      	beq.n	800265e <OV5640_SetPixelFormat+0x106>
          {
            tmp = (uint8_t)OV5640_PF_RGB888[index][1];
 8002622:	4a93      	ldr	r2, [pc, #588]	; (8002870 <OV5640_SetPixelFormat+0x318>)
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	009b      	lsls	r3, r3, #2
 8002628:	4413      	add	r3, r2
 800262a:	885b      	ldrh	r3, [r3, #2]
 800262c:	b2db      	uxtb	r3, r3
 800262e:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_RGB888[index][0], &tmp, 1) != OV5640_OK)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	f103 0018 	add.w	r0, r3, #24
 8002636:	4a8e      	ldr	r2, [pc, #568]	; (8002870 <OV5640_SetPixelFormat+0x318>)
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 800263e:	f107 020f 	add.w	r2, r7, #15
 8002642:	2301      	movs	r3, #1
 8002644:	f000 fabb 	bl	8002bbe <ov5640_write_reg>
 8002648:	4603      	mov	r3, r0
 800264a:	2b00      	cmp	r3, #0
 800264c:	d003      	beq.n	8002656 <OV5640_SetPixelFormat+0xfe>
            {
              ret = OV5640_ERROR;
 800264e:	f04f 33ff 	mov.w	r3, #4294967295
 8002652:	617b      	str	r3, [r7, #20]
 8002654:	e003      	b.n	800265e <OV5640_SetPixelFormat+0x106>
            }
            else
            {
              (void)OV5640_Delay(pObj, 1);
 8002656:	2101      	movs	r1, #1
 8002658:	6878      	ldr	r0, [r7, #4]
 800265a:	f000 fa4d 	bl	8002af8 <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_RGB888) / 4U); index++)
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	3301      	adds	r3, #1
 8002662:	613b      	str	r3, [r7, #16]
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	2b01      	cmp	r3, #1
 8002668:	d9d7      	bls.n	800261a <OV5640_SetPixelFormat+0xc2>
            }
          }
        }
        break;
 800266a:	e083      	b.n	8002774 <OV5640_SetPixelFormat+0x21c>

      case OV5640_Y8:
        for (index = 0; index < (sizeof(OV5640_PF_Y8) / 4U); index++)
 800266c:	2300      	movs	r3, #0
 800266e:	613b      	str	r3, [r7, #16]
 8002670:	e024      	b.n	80026bc <OV5640_SetPixelFormat+0x164>
        {
          if (ret != OV5640_ERROR)
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002678:	d01d      	beq.n	80026b6 <OV5640_SetPixelFormat+0x15e>
          {
            tmp = (uint8_t)OV5640_PF_Y8[index][1];
 800267a:	4a7e      	ldr	r2, [pc, #504]	; (8002874 <OV5640_SetPixelFormat+0x31c>)
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	009b      	lsls	r3, r3, #2
 8002680:	4413      	add	r3, r2
 8002682:	885b      	ldrh	r3, [r3, #2]
 8002684:	b2db      	uxtb	r3, r3
 8002686:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_Y8[index][0], &tmp, 1) != OV5640_OK)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	f103 0018 	add.w	r0, r3, #24
 800268e:	4a79      	ldr	r2, [pc, #484]	; (8002874 <OV5640_SetPixelFormat+0x31c>)
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8002696:	f107 020f 	add.w	r2, r7, #15
 800269a:	2301      	movs	r3, #1
 800269c:	f000 fa8f 	bl	8002bbe <ov5640_write_reg>
 80026a0:	4603      	mov	r3, r0
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d003      	beq.n	80026ae <OV5640_SetPixelFormat+0x156>
            {
              ret = OV5640_ERROR;
 80026a6:	f04f 33ff 	mov.w	r3, #4294967295
 80026aa:	617b      	str	r3, [r7, #20]
 80026ac:	e003      	b.n	80026b6 <OV5640_SetPixelFormat+0x15e>
            }
            else
            {
              (void)OV5640_Delay(pObj, 1);
 80026ae:	2101      	movs	r1, #1
 80026b0:	6878      	ldr	r0, [r7, #4]
 80026b2:	f000 fa21 	bl	8002af8 <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_Y8) / 4U); index++)
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	3301      	adds	r3, #1
 80026ba:	613b      	str	r3, [r7, #16]
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	2b01      	cmp	r3, #1
 80026c0:	d9d7      	bls.n	8002672 <OV5640_SetPixelFormat+0x11a>
            }
          }
        }
        break;
 80026c2:	e057      	b.n	8002774 <OV5640_SetPixelFormat+0x21c>

      case OV5640_JPEG:
        for (index = 0; index < (sizeof(OV5640_PF_JPEG) / 4U); index++)
 80026c4:	2300      	movs	r3, #0
 80026c6:	613b      	str	r3, [r7, #16]
 80026c8:	e024      	b.n	8002714 <OV5640_SetPixelFormat+0x1bc>
        {
          if (ret != OV5640_ERROR)
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026d0:	d01d      	beq.n	800270e <OV5640_SetPixelFormat+0x1b6>
          {
            tmp = (uint8_t)OV5640_PF_JPEG[index][1];
 80026d2:	4a69      	ldr	r2, [pc, #420]	; (8002878 <OV5640_SetPixelFormat+0x320>)
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	009b      	lsls	r3, r3, #2
 80026d8:	4413      	add	r3, r2
 80026da:	885b      	ldrh	r3, [r3, #2]
 80026dc:	b2db      	uxtb	r3, r3
 80026de:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_JPEG[index][0], &tmp, 1) != OV5640_OK)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	f103 0018 	add.w	r0, r3, #24
 80026e6:	4a64      	ldr	r2, [pc, #400]	; (8002878 <OV5640_SetPixelFormat+0x320>)
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 80026ee:	f107 020f 	add.w	r2, r7, #15
 80026f2:	2301      	movs	r3, #1
 80026f4:	f000 fa63 	bl	8002bbe <ov5640_write_reg>
 80026f8:	4603      	mov	r3, r0
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d003      	beq.n	8002706 <OV5640_SetPixelFormat+0x1ae>
            {
              ret = OV5640_ERROR;
 80026fe:	f04f 33ff 	mov.w	r3, #4294967295
 8002702:	617b      	str	r3, [r7, #20]
 8002704:	e003      	b.n	800270e <OV5640_SetPixelFormat+0x1b6>
            }
            else
            {
              (void)OV5640_Delay(pObj, 1);
 8002706:	2101      	movs	r1, #1
 8002708:	6878      	ldr	r0, [r7, #4]
 800270a:	f000 f9f5 	bl	8002af8 <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_JPEG) / 4U); index++)
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	3301      	adds	r3, #1
 8002712:	613b      	str	r3, [r7, #16]
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	2b01      	cmp	r3, #1
 8002718:	d9d7      	bls.n	80026ca <OV5640_SetPixelFormat+0x172>
            }
          }
        }
        break;
 800271a:	e02b      	b.n	8002774 <OV5640_SetPixelFormat+0x21c>

      case OV5640_RGB565:
      default:
        for (index = 0; index < (sizeof(OV5640_PF_RGB565) / 4U); index++)
 800271c:	2300      	movs	r3, #0
 800271e:	613b      	str	r3, [r7, #16]
 8002720:	e024      	b.n	800276c <OV5640_SetPixelFormat+0x214>
        {
          if (ret != OV5640_ERROR)
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002728:	d01d      	beq.n	8002766 <OV5640_SetPixelFormat+0x20e>
          {
            tmp = (uint8_t)OV5640_PF_RGB565[index][1];
 800272a:	4a54      	ldr	r2, [pc, #336]	; (800287c <OV5640_SetPixelFormat+0x324>)
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	009b      	lsls	r3, r3, #2
 8002730:	4413      	add	r3, r2
 8002732:	885b      	ldrh	r3, [r3, #2]
 8002734:	b2db      	uxtb	r3, r3
 8002736:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_RGB565[index][0], &tmp, 1) != OV5640_OK)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	f103 0018 	add.w	r0, r3, #24
 800273e:	4a4f      	ldr	r2, [pc, #316]	; (800287c <OV5640_SetPixelFormat+0x324>)
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8002746:	f107 020f 	add.w	r2, r7, #15
 800274a:	2301      	movs	r3, #1
 800274c:	f000 fa37 	bl	8002bbe <ov5640_write_reg>
 8002750:	4603      	mov	r3, r0
 8002752:	2b00      	cmp	r3, #0
 8002754:	d003      	beq.n	800275e <OV5640_SetPixelFormat+0x206>
            {
              ret = OV5640_ERROR;
 8002756:	f04f 33ff 	mov.w	r3, #4294967295
 800275a:	617b      	str	r3, [r7, #20]
 800275c:	e003      	b.n	8002766 <OV5640_SetPixelFormat+0x20e>
            }
            else
            {
              (void)OV5640_Delay(pObj, 1);
 800275e:	2101      	movs	r1, #1
 8002760:	6878      	ldr	r0, [r7, #4]
 8002762:	f000 f9c9 	bl	8002af8 <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_RGB565) / 4U); index++)
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	3301      	adds	r3, #1
 800276a:	613b      	str	r3, [r7, #16]
 800276c:	693b      	ldr	r3, [r7, #16]
 800276e:	2b01      	cmp	r3, #1
 8002770:	d9d7      	bls.n	8002722 <OV5640_SetPixelFormat+0x1ca>
            }
          }
        }
        break;
 8002772:	bf00      	nop

    }

    if (PixelFormat == OV5640_JPEG)
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	2b08      	cmp	r3, #8
 8002778:	d173      	bne.n	8002862 <OV5640_SetPixelFormat+0x30a>
    {
      if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp, 1) != OV5640_OK)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	f103 0018 	add.w	r0, r3, #24
 8002780:	f107 020f 	add.w	r2, r7, #15
 8002784:	2301      	movs	r3, #1
 8002786:	f643 0121 	movw	r1, #14369	; 0x3821
 800278a:	f000 fa01 	bl	8002b90 <ov5640_read_reg>
 800278e:	4603      	mov	r3, r0
 8002790:	2b00      	cmp	r3, #0
 8002792:	d003      	beq.n	800279c <OV5640_SetPixelFormat+0x244>
      {
        ret = OV5640_ERROR;
 8002794:	f04f 33ff 	mov.w	r3, #4294967295
 8002798:	617b      	str	r3, [r7, #20]
 800279a:	e062      	b.n	8002862 <OV5640_SetPixelFormat+0x30a>
      }
      else
      {
        tmp |= (1 << 5);
 800279c:	7bfb      	ldrb	r3, [r7, #15]
 800279e:	f043 0320 	orr.w	r3, r3, #32
 80027a2:	b2db      	uxtb	r3, r3
 80027a4:	73fb      	strb	r3, [r7, #15]
        if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp, 1) != OV5640_OK)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	f103 0018 	add.w	r0, r3, #24
 80027ac:	f107 020f 	add.w	r2, r7, #15
 80027b0:	2301      	movs	r3, #1
 80027b2:	f643 0121 	movw	r1, #14369	; 0x3821
 80027b6:	f000 fa02 	bl	8002bbe <ov5640_write_reg>
 80027ba:	4603      	mov	r3, r0
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d003      	beq.n	80027c8 <OV5640_SetPixelFormat+0x270>
        {
          ret = OV5640_ERROR;
 80027c0:	f04f 33ff 	mov.w	r3, #4294967295
 80027c4:	617b      	str	r3, [r7, #20]
 80027c6:	e04c      	b.n	8002862 <OV5640_SetPixelFormat+0x30a>
        }
        else
        {
          if (ov5640_read_reg(&pObj->Ctx, OV5640_SYSREM_RESET02, &tmp, 1) != OV5640_OK)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	f103 0018 	add.w	r0, r3, #24
 80027ce:	f107 020f 	add.w	r2, r7, #15
 80027d2:	2301      	movs	r3, #1
 80027d4:	f243 0102 	movw	r1, #12290	; 0x3002
 80027d8:	f000 f9da 	bl	8002b90 <ov5640_read_reg>
 80027dc:	4603      	mov	r3, r0
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d003      	beq.n	80027ea <OV5640_SetPixelFormat+0x292>
          {
            ret = OV5640_ERROR;
 80027e2:	f04f 33ff 	mov.w	r3, #4294967295
 80027e6:	617b      	str	r3, [r7, #20]
 80027e8:	e03b      	b.n	8002862 <OV5640_SetPixelFormat+0x30a>
          }
          else
          {
            tmp &= ~((1 << 4) | (1 << 3) | (1 << 2));
 80027ea:	7bfb      	ldrb	r3, [r7, #15]
 80027ec:	f023 031c 	bic.w	r3, r3, #28
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_SYSREM_RESET02, &tmp, 1) != OV5640_OK)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	f103 0018 	add.w	r0, r3, #24
 80027fa:	f107 020f 	add.w	r2, r7, #15
 80027fe:	2301      	movs	r3, #1
 8002800:	f243 0102 	movw	r1, #12290	; 0x3002
 8002804:	f000 f9db 	bl	8002bbe <ov5640_write_reg>
 8002808:	4603      	mov	r3, r0
 800280a:	2b00      	cmp	r3, #0
 800280c:	d003      	beq.n	8002816 <OV5640_SetPixelFormat+0x2be>
            {
              ret = OV5640_ERROR;
 800280e:	f04f 33ff 	mov.w	r3, #4294967295
 8002812:	617b      	str	r3, [r7, #20]
 8002814:	e025      	b.n	8002862 <OV5640_SetPixelFormat+0x30a>
            }
            else
            {
              if (ov5640_read_reg(&pObj->Ctx, OV5640_CLOCK_ENABLE02, &tmp, 1) != OV5640_OK)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	f103 0018 	add.w	r0, r3, #24
 800281c:	f107 020f 	add.w	r2, r7, #15
 8002820:	2301      	movs	r3, #1
 8002822:	f243 0106 	movw	r1, #12294	; 0x3006
 8002826:	f000 f9b3 	bl	8002b90 <ov5640_read_reg>
 800282a:	4603      	mov	r3, r0
 800282c:	2b00      	cmp	r3, #0
 800282e:	d003      	beq.n	8002838 <OV5640_SetPixelFormat+0x2e0>
              {
                ret = OV5640_ERROR;
 8002830:	f04f 33ff 	mov.w	r3, #4294967295
 8002834:	617b      	str	r3, [r7, #20]
 8002836:	e014      	b.n	8002862 <OV5640_SetPixelFormat+0x30a>
              }
              else
              {
                tmp |= ((1 << 5) | (1 << 3));
 8002838:	7bfb      	ldrb	r3, [r7, #15]
 800283a:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 800283e:	b2db      	uxtb	r3, r3
 8002840:	73fb      	strb	r3, [r7, #15]
                if (ov5640_write_reg(&pObj->Ctx, OV5640_CLOCK_ENABLE02, &tmp, 1) != OV5640_OK)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	f103 0018 	add.w	r0, r3, #24
 8002848:	f107 020f 	add.w	r2, r7, #15
 800284c:	2301      	movs	r3, #1
 800284e:	f243 0106 	movw	r1, #12294	; 0x3006
 8002852:	f000 f9b4 	bl	8002bbe <ov5640_write_reg>
 8002856:	4603      	mov	r3, r0
 8002858:	2b00      	cmp	r3, #0
 800285a:	d002      	beq.n	8002862 <OV5640_SetPixelFormat+0x30a>
                {
                  ret = OV5640_ERROR;
 800285c:	f04f 33ff 	mov.w	r3, #4294967295
 8002860:	617b      	str	r3, [r7, #20]
          }
        }
      }
    }
  }
  return ret;
 8002862:	697b      	ldr	r3, [r7, #20]
}
 8002864:	4618      	mov	r0, r3
 8002866:	3718      	adds	r7, #24
 8002868:	46bd      	mov	sp, r7
 800286a:	bd80      	pop	{r7, pc}
 800286c:	08009354 	.word	0x08009354
 8002870:	0800935c 	.word	0x0800935c
 8002874:	08009364 	.word	0x08009364
 8002878:	0800936c 	.word	0x0800936c
 800287c:	08009374 	.word	0x08009374

08002880 <OV5640_SetResolution>:
  * @param  pObj  pointer to component object
  * @param  Resolution  Camera resolution
  * @retval Component status
  */
int32_t OV5640_SetResolution(OV5640_Object_t *pObj, uint32_t Resolution)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b086      	sub	sp, #24
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
 8002888:	6039      	str	r1, [r7, #0]
  int32_t ret = OV5640_OK;
 800288a:	2300      	movs	r3, #0
 800288c:	617b      	str	r3, [r7, #20]
    {OV5640_TIMING_DVPVO_HIGH, 0x00},
    {OV5640_TIMING_DVPVO_LOW, 0x78},
  };

  /* Check if resolution is supported */
  if (Resolution > OV5640_R800x480)
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	2b04      	cmp	r3, #4
 8002892:	d903      	bls.n	800289c <OV5640_SetResolution+0x1c>
  {
    ret = OV5640_ERROR;
 8002894:	f04f 33ff 	mov.w	r3, #4294967295
 8002898:	617b      	str	r3, [r7, #20]
 800289a:	e0d8      	b.n	8002a4e <OV5640_SetResolution+0x1ce>
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	2b04      	cmp	r3, #4
 80028a0:	f200 80d1 	bhi.w	8002a46 <OV5640_SetResolution+0x1c6>
 80028a4:	a201      	add	r2, pc, #4	; (adr r2, 80028ac <OV5640_SetResolution+0x2c>)
 80028a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028aa:	bf00      	nop
 80028ac:	080028c1 	.word	0x080028c1
 80028b0:	0800290f 	.word	0x0800290f
 80028b4:	0800295d 	.word	0x0800295d
 80028b8:	080029ab 	.word	0x080029ab
 80028bc:	080029f9 	.word	0x080029f9
  {
    /* Initialize OV5640 */
    switch (Resolution)
    {
      case OV5640_R160x120:
        for (index = 0; index < (sizeof(OV5640_QQVGA) / 4U); index++)
 80028c0:	2300      	movs	r3, #0
 80028c2:	613b      	str	r3, [r7, #16]
 80028c4:	e01f      	b.n	8002906 <OV5640_SetResolution+0x86>
        {
          if (ret != OV5640_ERROR)
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028cc:	d018      	beq.n	8002900 <OV5640_SetResolution+0x80>
          {
            tmp = (uint8_t)OV5640_QQVGA[index][1];
 80028ce:	4a62      	ldr	r2, [pc, #392]	; (8002a58 <OV5640_SetResolution+0x1d8>)
 80028d0:	693b      	ldr	r3, [r7, #16]
 80028d2:	009b      	lsls	r3, r3, #2
 80028d4:	4413      	add	r3, r2
 80028d6:	885b      	ldrh	r3, [r3, #2]
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_QQVGA[index][0], &tmp, 1) != OV5640_OK)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	f103 0018 	add.w	r0, r3, #24
 80028e2:	4a5d      	ldr	r2, [pc, #372]	; (8002a58 <OV5640_SetResolution+0x1d8>)
 80028e4:	693b      	ldr	r3, [r7, #16]
 80028e6:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 80028ea:	f107 020f 	add.w	r2, r7, #15
 80028ee:	2301      	movs	r3, #1
 80028f0:	f000 f965 	bl	8002bbe <ov5640_write_reg>
 80028f4:	4603      	mov	r3, r0
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d002      	beq.n	8002900 <OV5640_SetResolution+0x80>
            {
              ret = OV5640_ERROR;
 80028fa:	f04f 33ff 	mov.w	r3, #4294967295
 80028fe:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_QQVGA) / 4U); index++)
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	3301      	adds	r3, #1
 8002904:	613b      	str	r3, [r7, #16]
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	2b03      	cmp	r3, #3
 800290a:	d9dc      	bls.n	80028c6 <OV5640_SetResolution+0x46>
            }
          }
        }
        break;
 800290c:	e09f      	b.n	8002a4e <OV5640_SetResolution+0x1ce>
      case OV5640_R320x240:
        for (index = 0; index < (sizeof(OV5640_QVGA) / 4U); index++)
 800290e:	2300      	movs	r3, #0
 8002910:	613b      	str	r3, [r7, #16]
 8002912:	e01f      	b.n	8002954 <OV5640_SetResolution+0xd4>
        {
          if (ret != OV5640_ERROR)
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	f1b3 3fff 	cmp.w	r3, #4294967295
 800291a:	d018      	beq.n	800294e <OV5640_SetResolution+0xce>
          {
            tmp = (uint8_t)OV5640_QVGA[index][1];
 800291c:	4a4f      	ldr	r2, [pc, #316]	; (8002a5c <OV5640_SetResolution+0x1dc>)
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	009b      	lsls	r3, r3, #2
 8002922:	4413      	add	r3, r2
 8002924:	885b      	ldrh	r3, [r3, #2]
 8002926:	b2db      	uxtb	r3, r3
 8002928:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_QVGA[index][0], &tmp, 1) != OV5640_OK)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	f103 0018 	add.w	r0, r3, #24
 8002930:	4a4a      	ldr	r2, [pc, #296]	; (8002a5c <OV5640_SetResolution+0x1dc>)
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8002938:	f107 020f 	add.w	r2, r7, #15
 800293c:	2301      	movs	r3, #1
 800293e:	f000 f93e 	bl	8002bbe <ov5640_write_reg>
 8002942:	4603      	mov	r3, r0
 8002944:	2b00      	cmp	r3, #0
 8002946:	d002      	beq.n	800294e <OV5640_SetResolution+0xce>
            {
              ret = OV5640_ERROR;
 8002948:	f04f 33ff 	mov.w	r3, #4294967295
 800294c:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_QVGA) / 4U); index++)
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	3301      	adds	r3, #1
 8002952:	613b      	str	r3, [r7, #16]
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	2b03      	cmp	r3, #3
 8002958:	d9dc      	bls.n	8002914 <OV5640_SetResolution+0x94>
            }
          }
        }
        break;
 800295a:	e078      	b.n	8002a4e <OV5640_SetResolution+0x1ce>
      case OV5640_R480x272:
        for (index = 0; index < (sizeof(OV5640_480x272) / 4U); index++)
 800295c:	2300      	movs	r3, #0
 800295e:	613b      	str	r3, [r7, #16]
 8002960:	e01f      	b.n	80029a2 <OV5640_SetResolution+0x122>
        {
          if (ret != OV5640_ERROR)
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002968:	d018      	beq.n	800299c <OV5640_SetResolution+0x11c>
          {
            tmp = (uint8_t)OV5640_480x272[index][1];
 800296a:	4a3d      	ldr	r2, [pc, #244]	; (8002a60 <OV5640_SetResolution+0x1e0>)
 800296c:	693b      	ldr	r3, [r7, #16]
 800296e:	009b      	lsls	r3, r3, #2
 8002970:	4413      	add	r3, r2
 8002972:	885b      	ldrh	r3, [r3, #2]
 8002974:	b2db      	uxtb	r3, r3
 8002976:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_480x272[index][0], &tmp, 1) != OV5640_OK)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	f103 0018 	add.w	r0, r3, #24
 800297e:	4a38      	ldr	r2, [pc, #224]	; (8002a60 <OV5640_SetResolution+0x1e0>)
 8002980:	693b      	ldr	r3, [r7, #16]
 8002982:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8002986:	f107 020f 	add.w	r2, r7, #15
 800298a:	2301      	movs	r3, #1
 800298c:	f000 f917 	bl	8002bbe <ov5640_write_reg>
 8002990:	4603      	mov	r3, r0
 8002992:	2b00      	cmp	r3, #0
 8002994:	d002      	beq.n	800299c <OV5640_SetResolution+0x11c>
            {
              ret = OV5640_ERROR;
 8002996:	f04f 33ff 	mov.w	r3, #4294967295
 800299a:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_480x272) / 4U); index++)
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	3301      	adds	r3, #1
 80029a0:	613b      	str	r3, [r7, #16]
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	2b03      	cmp	r3, #3
 80029a6:	d9dc      	bls.n	8002962 <OV5640_SetResolution+0xe2>
            }
          }
        }
        break;
 80029a8:	e051      	b.n	8002a4e <OV5640_SetResolution+0x1ce>
      case OV5640_R640x480:
        for (index = 0; index < (sizeof(OV5640_VGA) / 4U); index++)
 80029aa:	2300      	movs	r3, #0
 80029ac:	613b      	str	r3, [r7, #16]
 80029ae:	e01f      	b.n	80029f0 <OV5640_SetResolution+0x170>
        {
          if (ret != OV5640_ERROR)
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029b6:	d018      	beq.n	80029ea <OV5640_SetResolution+0x16a>
          {
            tmp = (uint8_t)OV5640_VGA[index][1];
 80029b8:	4a2a      	ldr	r2, [pc, #168]	; (8002a64 <OV5640_SetResolution+0x1e4>)
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	009b      	lsls	r3, r3, #2
 80029be:	4413      	add	r3, r2
 80029c0:	885b      	ldrh	r3, [r3, #2]
 80029c2:	b2db      	uxtb	r3, r3
 80029c4:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_VGA[index][0], &tmp, 1) != OV5640_OK)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	f103 0018 	add.w	r0, r3, #24
 80029cc:	4a25      	ldr	r2, [pc, #148]	; (8002a64 <OV5640_SetResolution+0x1e4>)
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 80029d4:	f107 020f 	add.w	r2, r7, #15
 80029d8:	2301      	movs	r3, #1
 80029da:	f000 f8f0 	bl	8002bbe <ov5640_write_reg>
 80029de:	4603      	mov	r3, r0
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d002      	beq.n	80029ea <OV5640_SetResolution+0x16a>
            {
              ret = OV5640_ERROR;
 80029e4:	f04f 33ff 	mov.w	r3, #4294967295
 80029e8:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_VGA) / 4U); index++)
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	3301      	adds	r3, #1
 80029ee:	613b      	str	r3, [r7, #16]
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	2b03      	cmp	r3, #3
 80029f4:	d9dc      	bls.n	80029b0 <OV5640_SetResolution+0x130>
            }
          }
        }
        break;
 80029f6:	e02a      	b.n	8002a4e <OV5640_SetResolution+0x1ce>
      case OV5640_R800x480:
        for (index = 0; index < (sizeof(OV5640_WVGA) / 4U); index++)
 80029f8:	2300      	movs	r3, #0
 80029fa:	613b      	str	r3, [r7, #16]
 80029fc:	e01f      	b.n	8002a3e <OV5640_SetResolution+0x1be>
        {
          if (ret != OV5640_ERROR)
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a04:	d018      	beq.n	8002a38 <OV5640_SetResolution+0x1b8>
          {
            tmp = (uint8_t)OV5640_WVGA[index][1];
 8002a06:	4a18      	ldr	r2, [pc, #96]	; (8002a68 <OV5640_SetResolution+0x1e8>)
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	009b      	lsls	r3, r3, #2
 8002a0c:	4413      	add	r3, r2
 8002a0e:	885b      	ldrh	r3, [r3, #2]
 8002a10:	b2db      	uxtb	r3, r3
 8002a12:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_WVGA[index][0], &tmp, 1) != OV5640_OK)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	f103 0018 	add.w	r0, r3, #24
 8002a1a:	4a13      	ldr	r2, [pc, #76]	; (8002a68 <OV5640_SetResolution+0x1e8>)
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8002a22:	f107 020f 	add.w	r2, r7, #15
 8002a26:	2301      	movs	r3, #1
 8002a28:	f000 f8c9 	bl	8002bbe <ov5640_write_reg>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d002      	beq.n	8002a38 <OV5640_SetResolution+0x1b8>
            {
              ret = OV5640_ERROR;
 8002a32:	f04f 33ff 	mov.w	r3, #4294967295
 8002a36:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_WVGA) / 4U); index++)
 8002a38:	693b      	ldr	r3, [r7, #16]
 8002a3a:	3301      	adds	r3, #1
 8002a3c:	613b      	str	r3, [r7, #16]
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	2b03      	cmp	r3, #3
 8002a42:	d9dc      	bls.n	80029fe <OV5640_SetResolution+0x17e>
            }
          }
        }
        break;
 8002a44:	e003      	b.n	8002a4e <OV5640_SetResolution+0x1ce>
      default:
        ret = OV5640_ERROR;
 8002a46:	f04f 33ff 	mov.w	r3, #4294967295
 8002a4a:	617b      	str	r3, [r7, #20]
        break;
 8002a4c:	bf00      	nop
    }
  }

  return ret;
 8002a4e:	697b      	ldr	r3, [r7, #20]
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	3718      	adds	r7, #24
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}
 8002a58:	0800937c 	.word	0x0800937c
 8002a5c:	0800938c 	.word	0x0800938c
 8002a60:	0800939c 	.word	0x0800939c
 8002a64:	080093ac 	.word	0x080093ac
 8002a68:	080093bc 	.word	0x080093bc

08002a6c <OV5640_SetPolarities>:
  * @param  VsyncPolarity Polarity of the Vsync
  * @retval Component status
  */
int32_t OV5640_SetPolarities(OV5640_Object_t *pObj, uint32_t PclkPolarity, uint32_t HrefPolarity,
                             uint32_t VsyncPolarity)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b086      	sub	sp, #24
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	60f8      	str	r0, [r7, #12]
 8002a74:	60b9      	str	r1, [r7, #8]
 8002a76:	607a      	str	r2, [r7, #4]
 8002a78:	603b      	str	r3, [r7, #0]
  uint8_t tmp;
  int32_t ret = OV5640_OK;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	617b      	str	r3, [r7, #20]

  if ((pObj == NULL) || ((PclkPolarity != OV5640_POLARITY_PCLK_LOW) && (PclkPolarity != OV5640_POLARITY_PCLK_HIGH)) ||
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d011      	beq.n	8002aa8 <OV5640_SetPolarities+0x3c>
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d002      	beq.n	8002a90 <OV5640_SetPolarities+0x24>
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	2b01      	cmp	r3, #1
 8002a8e:	d10b      	bne.n	8002aa8 <OV5640_SetPolarities+0x3c>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d002      	beq.n	8002a9c <OV5640_SetPolarities+0x30>
      ((HrefPolarity != OV5640_POLARITY_HREF_LOW) && (HrefPolarity != OV5640_POLARITY_HREF_HIGH)) ||
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	d105      	bne.n	8002aa8 <OV5640_SetPolarities+0x3c>
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	2b01      	cmp	r3, #1
 8002aa0:	d006      	beq.n	8002ab0 <OV5640_SetPolarities+0x44>
      ((VsyncPolarity != OV5640_POLARITY_VSYNC_LOW) && (VsyncPolarity != OV5640_POLARITY_VSYNC_HIGH)))
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d003      	beq.n	8002ab0 <OV5640_SetPolarities+0x44>
  {
    ret = OV5640_ERROR;
 8002aa8:	f04f 33ff 	mov.w	r3, #4294967295
 8002aac:	617b      	str	r3, [r7, #20]
 8002aae:	e01e      	b.n	8002aee <OV5640_SetPolarities+0x82>
  }
  else
  {
    tmp = (uint8_t)(PclkPolarity << 5U) | (HrefPolarity << 1U) | VsyncPolarity;
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	b2db      	uxtb	r3, r3
 8002ab4:	015b      	lsls	r3, r3, #5
 8002ab6:	b2da      	uxtb	r2, r3
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	b2db      	uxtb	r3, r3
 8002abc:	005b      	lsls	r3, r3, #1
 8002abe:	b2db      	uxtb	r3, r3
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	b2da      	uxtb	r2, r3
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	b2db      	uxtb	r3, r3
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	b2db      	uxtb	r3, r3
 8002acc:	74fb      	strb	r3, [r7, #19]

    if (ov5640_write_reg(&pObj->Ctx, OV5640_POLARITY_CTRL, &tmp, 1) != OV5640_OK)
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	f103 0018 	add.w	r0, r3, #24
 8002ad4:	f107 0213 	add.w	r2, r7, #19
 8002ad8:	2301      	movs	r3, #1
 8002ada:	f244 7140 	movw	r1, #18240	; 0x4740
 8002ade:	f000 f86e 	bl	8002bbe <ov5640_write_reg>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d002      	beq.n	8002aee <OV5640_SetPolarities+0x82>
    {
      ret = OV5640_ERROR;
 8002ae8:	f04f 33ff 	mov.w	r3, #4294967295
 8002aec:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8002aee:	697b      	ldr	r3, [r7, #20]
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	3718      	adds	r7, #24
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}

08002af8 <OV5640_Delay>:
  * @param pObj   pointer to component object
  * @param Delay  specifies the delay time length, in milliseconds
  * @retval OV5640_OK
  */
static int32_t OV5640_Delay(OV5640_Object_t *pObj, uint32_t Delay)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b084      	sub	sp, #16
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
 8002b00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  tickstart = pObj->IO.GetTick();
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	695b      	ldr	r3, [r3, #20]
 8002b06:	4798      	blx	r3
 8002b08:	4603      	mov	r3, r0
 8002b0a:	60fb      	str	r3, [r7, #12]
  while ((pObj->IO.GetTick() - tickstart) < Delay)
 8002b0c:	bf00      	nop
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	695b      	ldr	r3, [r3, #20]
 8002b12:	4798      	blx	r3
 8002b14:	4603      	mov	r3, r0
 8002b16:	461a      	mov	r2, r3
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	1ad3      	subs	r3, r2, r3
 8002b1c:	683a      	ldr	r2, [r7, #0]
 8002b1e:	429a      	cmp	r2, r3
 8002b20:	d8f5      	bhi.n	8002b0e <OV5640_Delay+0x16>
  {
  }
  return OV5640_OK;
 8002b22:	2300      	movs	r3, #0
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	3710      	adds	r7, #16
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd80      	pop	{r7, pc}

08002b2c <OV5640_ReadRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OV5640_ReadRegWrap(void *handle, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8002b2c:	b590      	push	{r4, r7, lr}
 8002b2e:	b087      	sub	sp, #28
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	60f8      	str	r0, [r7, #12]
 8002b34:	607a      	str	r2, [r7, #4]
 8002b36:	461a      	mov	r2, r3
 8002b38:	460b      	mov	r3, r1
 8002b3a:	817b      	strh	r3, [r7, #10]
 8002b3c:	4613      	mov	r3, r2
 8002b3e:	813b      	strh	r3, [r7, #8]
  OV5640_Object_t *pObj = (OV5640_Object_t *)handle;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	691c      	ldr	r4, [r3, #16]
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	8918      	ldrh	r0, [r3, #8]
 8002b4c:	893b      	ldrh	r3, [r7, #8]
 8002b4e:	8979      	ldrh	r1, [r7, #10]
 8002b50:	687a      	ldr	r2, [r7, #4]
 8002b52:	47a0      	blx	r4
 8002b54:	4603      	mov	r3, r0
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	371c      	adds	r7, #28
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd90      	pop	{r4, r7, pc}

08002b5e <OV5640_WriteRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OV5640_WriteRegWrap(void *handle, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8002b5e:	b590      	push	{r4, r7, lr}
 8002b60:	b087      	sub	sp, #28
 8002b62:	af00      	add	r7, sp, #0
 8002b64:	60f8      	str	r0, [r7, #12]
 8002b66:	607a      	str	r2, [r7, #4]
 8002b68:	461a      	mov	r2, r3
 8002b6a:	460b      	mov	r3, r1
 8002b6c:	817b      	strh	r3, [r7, #10]
 8002b6e:	4613      	mov	r3, r2
 8002b70:	813b      	strh	r3, [r7, #8]
  OV5640_Object_t *pObj = (OV5640_Object_t *)handle;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	68dc      	ldr	r4, [r3, #12]
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	8918      	ldrh	r0, [r3, #8]
 8002b7e:	893b      	ldrh	r3, [r7, #8]
 8002b80:	8979      	ldrh	r1, [r7, #10]
 8002b82:	687a      	ldr	r2, [r7, #4]
 8002b84:	47a0      	blx	r4
 8002b86:	4603      	mov	r3, r0
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	371c      	adds	r7, #28
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd90      	pop	{r4, r7, pc}

08002b90 <ov5640_read_reg>:
  * @param  pdata Pointer to data buffer
  * @param  length Number of data to read
  * @retval Component status
  */
int32_t ov5640_read_reg(ov5640_ctx_t *ctx, uint16_t reg, uint8_t *pdata, uint16_t length)
{
 8002b90:	b590      	push	{r4, r7, lr}
 8002b92:	b085      	sub	sp, #20
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	60f8      	str	r0, [r7, #12]
 8002b98:	607a      	str	r2, [r7, #4]
 8002b9a:	461a      	mov	r2, r3
 8002b9c:	460b      	mov	r3, r1
 8002b9e:	817b      	strh	r3, [r7, #10]
 8002ba0:	4613      	mov	r3, r2
 8002ba2:	813b      	strh	r3, [r7, #8]
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	685c      	ldr	r4, [r3, #4]
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	6898      	ldr	r0, [r3, #8]
 8002bac:	893b      	ldrh	r3, [r7, #8]
 8002bae:	8979      	ldrh	r1, [r7, #10]
 8002bb0:	687a      	ldr	r2, [r7, #4]
 8002bb2:	47a0      	blx	r4
 8002bb4:	4603      	mov	r3, r0
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	3714      	adds	r7, #20
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd90      	pop	{r4, r7, pc}

08002bbe <ov5640_write_reg>:
  * @param  pdata Pointer to data buffer
  * @param  length Number of data to write
  * @retval Component status
  */
int32_t ov5640_write_reg(ov5640_ctx_t *ctx, uint16_t reg, uint8_t *data, uint16_t length)
{
 8002bbe:	b590      	push	{r4, r7, lr}
 8002bc0:	b085      	sub	sp, #20
 8002bc2:	af00      	add	r7, sp, #0
 8002bc4:	60f8      	str	r0, [r7, #12]
 8002bc6:	607a      	str	r2, [r7, #4]
 8002bc8:	461a      	mov	r2, r3
 8002bca:	460b      	mov	r3, r1
 8002bcc:	817b      	strh	r3, [r7, #10]
 8002bce:	4613      	mov	r3, r2
 8002bd0:	813b      	strh	r3, [r7, #8]
  return ctx->WriteReg(ctx->handle, reg, data, length);
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681c      	ldr	r4, [r3, #0]
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	6898      	ldr	r0, [r3, #8]
 8002bda:	893b      	ldrh	r3, [r7, #8]
 8002bdc:	8979      	ldrh	r1, [r7, #10]
 8002bde:	687a      	ldr	r2, [r7, #4]
 8002be0:	47a0      	blx	r4
 8002be2:	4603      	mov	r3, r0
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	3714      	adds	r7, #20
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd90      	pop	{r4, r7, pc}

08002bec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b083      	sub	sp, #12
 8002bf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002bf2:	4b0f      	ldr	r3, [pc, #60]	; (8002c30 <HAL_MspInit+0x44>)
 8002bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf6:	4a0e      	ldr	r2, [pc, #56]	; (8002c30 <HAL_MspInit+0x44>)
 8002bf8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bfc:	6413      	str	r3, [r2, #64]	; 0x40
 8002bfe:	4b0c      	ldr	r3, [pc, #48]	; (8002c30 <HAL_MspInit+0x44>)
 8002c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c06:	607b      	str	r3, [r7, #4]
 8002c08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c0a:	4b09      	ldr	r3, [pc, #36]	; (8002c30 <HAL_MspInit+0x44>)
 8002c0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c0e:	4a08      	ldr	r2, [pc, #32]	; (8002c30 <HAL_MspInit+0x44>)
 8002c10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c14:	6453      	str	r3, [r2, #68]	; 0x44
 8002c16:	4b06      	ldr	r3, [pc, #24]	; (8002c30 <HAL_MspInit+0x44>)
 8002c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c1e:	603b      	str	r3, [r7, #0]
 8002c20:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c22:	bf00      	nop
 8002c24:	370c      	adds	r7, #12
 8002c26:	46bd      	mov	sp, r7
 8002c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2c:	4770      	bx	lr
 8002c2e:	bf00      	nop
 8002c30:	40023800 	.word	0x40023800

08002c34 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b08e      	sub	sp, #56	; 0x38
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c40:	2200      	movs	r2, #0
 8002c42:	601a      	str	r2, [r3, #0]
 8002c44:	605a      	str	r2, [r3, #4]
 8002c46:	609a      	str	r2, [r3, #8]
 8002c48:	60da      	str	r2, [r3, #12]
 8002c4a:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a50      	ldr	r2, [pc, #320]	; (8002d94 <HAL_DCMI_MspInit+0x160>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	f040 809a 	bne.w	8002d8c <HAL_DCMI_MspInit+0x158>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8002c58:	4b4f      	ldr	r3, [pc, #316]	; (8002d98 <HAL_DCMI_MspInit+0x164>)
 8002c5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c5c:	4a4e      	ldr	r2, [pc, #312]	; (8002d98 <HAL_DCMI_MspInit+0x164>)
 8002c5e:	f043 0301 	orr.w	r3, r3, #1
 8002c62:	6353      	str	r3, [r2, #52]	; 0x34
 8002c64:	4b4c      	ldr	r3, [pc, #304]	; (8002d98 <HAL_DCMI_MspInit+0x164>)
 8002c66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c68:	f003 0301 	and.w	r3, r3, #1
 8002c6c:	623b      	str	r3, [r7, #32]
 8002c6e:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002c70:	4b49      	ldr	r3, [pc, #292]	; (8002d98 <HAL_DCMI_MspInit+0x164>)
 8002c72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c74:	4a48      	ldr	r2, [pc, #288]	; (8002d98 <HAL_DCMI_MspInit+0x164>)
 8002c76:	f043 0310 	orr.w	r3, r3, #16
 8002c7a:	6313      	str	r3, [r2, #48]	; 0x30
 8002c7c:	4b46      	ldr	r3, [pc, #280]	; (8002d98 <HAL_DCMI_MspInit+0x164>)
 8002c7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c80:	f003 0310 	and.w	r3, r3, #16
 8002c84:	61fb      	str	r3, [r7, #28]
 8002c86:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c88:	4b43      	ldr	r3, [pc, #268]	; (8002d98 <HAL_DCMI_MspInit+0x164>)
 8002c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c8c:	4a42      	ldr	r2, [pc, #264]	; (8002d98 <HAL_DCMI_MspInit+0x164>)
 8002c8e:	f043 0308 	orr.w	r3, r3, #8
 8002c92:	6313      	str	r3, [r2, #48]	; 0x30
 8002c94:	4b40      	ldr	r3, [pc, #256]	; (8002d98 <HAL_DCMI_MspInit+0x164>)
 8002c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c98:	f003 0308 	and.w	r3, r3, #8
 8002c9c:	61bb      	str	r3, [r7, #24]
 8002c9e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002ca0:	4b3d      	ldr	r3, [pc, #244]	; (8002d98 <HAL_DCMI_MspInit+0x164>)
 8002ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca4:	4a3c      	ldr	r2, [pc, #240]	; (8002d98 <HAL_DCMI_MspInit+0x164>)
 8002ca6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002caa:	6313      	str	r3, [r2, #48]	; 0x30
 8002cac:	4b3a      	ldr	r3, [pc, #232]	; (8002d98 <HAL_DCMI_MspInit+0x164>)
 8002cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cb4:	617b      	str	r3, [r7, #20]
 8002cb6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002cb8:	4b37      	ldr	r3, [pc, #220]	; (8002d98 <HAL_DCMI_MspInit+0x164>)
 8002cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cbc:	4a36      	ldr	r2, [pc, #216]	; (8002d98 <HAL_DCMI_MspInit+0x164>)
 8002cbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cc2:	6313      	str	r3, [r2, #48]	; 0x30
 8002cc4:	4b34      	ldr	r3, [pc, #208]	; (8002d98 <HAL_DCMI_MspInit+0x164>)
 8002cc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ccc:	613b      	str	r3, [r7, #16]
 8002cce:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cd0:	4b31      	ldr	r3, [pc, #196]	; (8002d98 <HAL_DCMI_MspInit+0x164>)
 8002cd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd4:	4a30      	ldr	r2, [pc, #192]	; (8002d98 <HAL_DCMI_MspInit+0x164>)
 8002cd6:	f043 0301 	orr.w	r3, r3, #1
 8002cda:	6313      	str	r3, [r2, #48]	; 0x30
 8002cdc:	4b2e      	ldr	r3, [pc, #184]	; (8002d98 <HAL_DCMI_MspInit+0x164>)
 8002cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce0:	f003 0301 	and.w	r3, r3, #1
 8002ce4:	60fb      	str	r3, [r7, #12]
 8002ce6:	68fb      	ldr	r3, [r7, #12]
    PH9     ------> DCMI_D0
    PH11     ------> DCMI_D2
    PA6     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1
    */
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8002ce8:	2360      	movs	r3, #96	; 0x60
 8002cea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cec:	2302      	movs	r3, #2
 8002cee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002cf8:	230d      	movs	r3, #13
 8002cfa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002cfc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d00:	4619      	mov	r1, r3
 8002d02:	4826      	ldr	r0, [pc, #152]	; (8002d9c <HAL_DCMI_MspInit+0x168>)
 8002d04:	f002 fe5a 	bl	80059bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8002d08:	2308      	movs	r3, #8
 8002d0a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d0c:	2302      	movs	r3, #2
 8002d0e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d10:	2300      	movs	r3, #0
 8002d12:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d14:	2300      	movs	r3, #0
 8002d16:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002d18:	230d      	movs	r3, #13
 8002d1a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8002d1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d20:	4619      	mov	r1, r3
 8002d22:	481f      	ldr	r0, [pc, #124]	; (8002da0 <HAL_DCMI_MspInit+0x16c>)
 8002d24:	f002 fe4a 	bl	80059bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8002d28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d2c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d2e:	2302      	movs	r3, #2
 8002d30:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d32:	2300      	movs	r3, #0
 8002d34:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d36:	2300      	movs	r3, #0
 8002d38:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002d3a:	230d      	movs	r3, #13
 8002d3c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8002d3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d42:	4619      	mov	r1, r3
 8002d44:	4817      	ldr	r0, [pc, #92]	; (8002da4 <HAL_DCMI_MspInit+0x170>)
 8002d46:	f002 fe39 	bl	80059bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8002d4a:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 8002d4e:	627b      	str	r3, [r7, #36]	; 0x24
                          |DCMI_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d50:	2302      	movs	r3, #2
 8002d52:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d54:	2300      	movs	r3, #0
 8002d56:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002d5c:	230d      	movs	r3, #13
 8002d5e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002d60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d64:	4619      	mov	r1, r3
 8002d66:	4810      	ldr	r0, [pc, #64]	; (8002da8 <HAL_DCMI_MspInit+0x174>)
 8002d68:	f002 fe28 	bl	80059bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8002d6c:	2350      	movs	r3, #80	; 0x50
 8002d6e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d70:	2302      	movs	r3, #2
 8002d72:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d74:	2300      	movs	r3, #0
 8002d76:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002d7c:	230d      	movs	r3, #13
 8002d7e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d84:	4619      	mov	r1, r3
 8002d86:	4809      	ldr	r0, [pc, #36]	; (8002dac <HAL_DCMI_MspInit+0x178>)
 8002d88:	f002 fe18 	bl	80059bc <HAL_GPIO_Init>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 8002d8c:	bf00      	nop
 8002d8e:	3738      	adds	r7, #56	; 0x38
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}
 8002d94:	50050000 	.word	0x50050000
 8002d98:	40023800 	.word	0x40023800
 8002d9c:	40021000 	.word	0x40021000
 8002da0:	40020c00 	.word	0x40020c00
 8002da4:	40021800 	.word	0x40021800
 8002da8:	40021c00 	.word	0x40021c00
 8002dac:	40020000 	.word	0x40020000

08002db0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b0ac      	sub	sp, #176	; 0xb0
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002db8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	601a      	str	r2, [r3, #0]
 8002dc0:	605a      	str	r2, [r3, #4]
 8002dc2:	609a      	str	r2, [r3, #8]
 8002dc4:	60da      	str	r2, [r3, #12]
 8002dc6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002dc8:	f107 0318 	add.w	r3, r7, #24
 8002dcc:	2284      	movs	r2, #132	; 0x84
 8002dce:	2100      	movs	r1, #0
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f005 fc2b 	bl	800862c <memset>
  if(huart->Instance==USART1)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a32      	ldr	r2, [pc, #200]	; (8002ea4 <HAL_UART_MspInit+0xf4>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d15c      	bne.n	8002e9a <HAL_UART_MspInit+0xea>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002de0:	2340      	movs	r3, #64	; 0x40
 8002de2:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002de4:	2300      	movs	r3, #0
 8002de6:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002de8:	f107 0318 	add.w	r3, r7, #24
 8002dec:	4618      	mov	r0, r3
 8002dee:	f004 f993 	bl	8007118 <HAL_RCCEx_PeriphCLKConfig>
 8002df2:	4603      	mov	r3, r0
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d001      	beq.n	8002dfc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002df8:	f7ff faec 	bl	80023d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002dfc:	4b2a      	ldr	r3, [pc, #168]	; (8002ea8 <HAL_UART_MspInit+0xf8>)
 8002dfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e00:	4a29      	ldr	r2, [pc, #164]	; (8002ea8 <HAL_UART_MspInit+0xf8>)
 8002e02:	f043 0310 	orr.w	r3, r3, #16
 8002e06:	6453      	str	r3, [r2, #68]	; 0x44
 8002e08:	4b27      	ldr	r3, [pc, #156]	; (8002ea8 <HAL_UART_MspInit+0xf8>)
 8002e0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e0c:	f003 0310 	and.w	r3, r3, #16
 8002e10:	617b      	str	r3, [r7, #20]
 8002e12:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e14:	4b24      	ldr	r3, [pc, #144]	; (8002ea8 <HAL_UART_MspInit+0xf8>)
 8002e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e18:	4a23      	ldr	r2, [pc, #140]	; (8002ea8 <HAL_UART_MspInit+0xf8>)
 8002e1a:	f043 0302 	orr.w	r3, r3, #2
 8002e1e:	6313      	str	r3, [r2, #48]	; 0x30
 8002e20:	4b21      	ldr	r3, [pc, #132]	; (8002ea8 <HAL_UART_MspInit+0xf8>)
 8002e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e24:	f003 0302 	and.w	r3, r3, #2
 8002e28:	613b      	str	r3, [r7, #16]
 8002e2a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e2c:	4b1e      	ldr	r3, [pc, #120]	; (8002ea8 <HAL_UART_MspInit+0xf8>)
 8002e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e30:	4a1d      	ldr	r2, [pc, #116]	; (8002ea8 <HAL_UART_MspInit+0xf8>)
 8002e32:	f043 0301 	orr.w	r3, r3, #1
 8002e36:	6313      	str	r3, [r2, #48]	; 0x30
 8002e38:	4b1b      	ldr	r3, [pc, #108]	; (8002ea8 <HAL_UART_MspInit+0xf8>)
 8002e3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e3c:	f003 0301 	and.w	r3, r3, #1
 8002e40:	60fb      	str	r3, [r7, #12]
 8002e42:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8002e44:	2380      	movs	r3, #128	; 0x80
 8002e46:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e4a:	2302      	movs	r3, #2
 8002e4c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e50:	2300      	movs	r3, #0
 8002e52:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e56:	2300      	movs	r3, #0
 8002e58:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002e5c:	2307      	movs	r3, #7
 8002e5e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8002e62:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002e66:	4619      	mov	r1, r3
 8002e68:	4810      	ldr	r0, [pc, #64]	; (8002eac <HAL_UART_MspInit+0xfc>)
 8002e6a:	f002 fda7 	bl	80059bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8002e6e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e72:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e76:	2302      	movs	r3, #2
 8002e78:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e82:	2300      	movs	r3, #0
 8002e84:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002e88:	2307      	movs	r3, #7
 8002e8a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8002e8e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002e92:	4619      	mov	r1, r3
 8002e94:	4806      	ldr	r0, [pc, #24]	; (8002eb0 <HAL_UART_MspInit+0x100>)
 8002e96:	f002 fd91 	bl	80059bc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002e9a:	bf00      	nop
 8002e9c:	37b0      	adds	r7, #176	; 0xb0
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}
 8002ea2:	bf00      	nop
 8002ea4:	40011000 	.word	0x40011000
 8002ea8:	40023800 	.word	0x40023800
 8002eac:	40020400 	.word	0x40020400
 8002eb0:	40020000 	.word	0x40020000

08002eb4 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b086      	sub	sp, #24
 8002eb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8002eba:	1d3b      	adds	r3, r7, #4
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	601a      	str	r2, [r3, #0]
 8002ec0:	605a      	str	r2, [r3, #4]
 8002ec2:	609a      	str	r2, [r3, #8]
 8002ec4:	60da      	str	r2, [r3, #12]
 8002ec6:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8002ec8:	4b3a      	ldr	r3, [pc, #232]	; (8002fb4 <HAL_FMC_MspInit+0x100>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d16d      	bne.n	8002fac <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 8002ed0:	4b38      	ldr	r3, [pc, #224]	; (8002fb4 <HAL_FMC_MspInit+0x100>)
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002ed6:	4b38      	ldr	r3, [pc, #224]	; (8002fb8 <HAL_FMC_MspInit+0x104>)
 8002ed8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eda:	4a37      	ldr	r2, [pc, #220]	; (8002fb8 <HAL_FMC_MspInit+0x104>)
 8002edc:	f043 0301 	orr.w	r3, r3, #1
 8002ee0:	6393      	str	r3, [r2, #56]	; 0x38
 8002ee2:	4b35      	ldr	r3, [pc, #212]	; (8002fb8 <HAL_FMC_MspInit+0x104>)
 8002ee4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ee6:	f003 0301 	and.w	r3, r3, #1
 8002eea:	603b      	str	r3, [r7, #0]
 8002eec:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8002eee:	f64f 7383 	movw	r3, #65411	; 0xff83
 8002ef2:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ef4:	2302      	movs	r3, #2
 8002ef6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002efc:	2303      	movs	r3, #3
 8002efe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002f00:	230c      	movs	r3, #12
 8002f02:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002f04:	1d3b      	adds	r3, r7, #4
 8002f06:	4619      	mov	r1, r3
 8002f08:	482c      	ldr	r0, [pc, #176]	; (8002fbc <HAL_FMC_MspInit+0x108>)
 8002f0a:	f002 fd57 	bl	80059bc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8002f0e:	f248 1333 	movw	r3, #33075	; 0x8133
 8002f12:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f14:	2302      	movs	r3, #2
 8002f16:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f1c:	2303      	movs	r3, #3
 8002f1e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002f20:	230c      	movs	r3, #12
 8002f22:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002f24:	1d3b      	adds	r3, r7, #4
 8002f26:	4619      	mov	r1, r3
 8002f28:	4825      	ldr	r0, [pc, #148]	; (8002fc0 <HAL_FMC_MspInit+0x10c>)
 8002f2a:	f002 fd47 	bl	80059bc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8002f2e:	f24c 7303 	movw	r3, #50947	; 0xc703
 8002f32:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f34:	2302      	movs	r3, #2
 8002f36:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f3c:	2303      	movs	r3, #3
 8002f3e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002f40:	230c      	movs	r3, #12
 8002f42:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002f44:	1d3b      	adds	r3, r7, #4
 8002f46:	4619      	mov	r1, r3
 8002f48:	481e      	ldr	r0, [pc, #120]	; (8002fc4 <HAL_FMC_MspInit+0x110>)
 8002f4a:	f002 fd37 	bl	80059bc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8002f4e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8002f52:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f54:	2302      	movs	r3, #2
 8002f56:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f58:	2300      	movs	r3, #0
 8002f5a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f5c:	2303      	movs	r3, #3
 8002f5e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002f60:	230c      	movs	r3, #12
 8002f62:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002f64:	1d3b      	adds	r3, r7, #4
 8002f66:	4619      	mov	r1, r3
 8002f68:	4817      	ldr	r0, [pc, #92]	; (8002fc8 <HAL_FMC_MspInit+0x114>)
 8002f6a:	f002 fd27 	bl	80059bc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8002f6e:	2328      	movs	r3, #40	; 0x28
 8002f70:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f72:	2302      	movs	r3, #2
 8002f74:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f76:	2300      	movs	r3, #0
 8002f78:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f7a:	2303      	movs	r3, #3
 8002f7c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002f7e:	230c      	movs	r3, #12
 8002f80:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002f82:	1d3b      	adds	r3, r7, #4
 8002f84:	4619      	mov	r1, r3
 8002f86:	4811      	ldr	r0, [pc, #68]	; (8002fcc <HAL_FMC_MspInit+0x118>)
 8002f88:	f002 fd18 	bl	80059bc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8002f8c:	2308      	movs	r3, #8
 8002f8e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f90:	2302      	movs	r3, #2
 8002f92:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f94:	2300      	movs	r3, #0
 8002f96:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f98:	2303      	movs	r3, #3
 8002f9a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002f9c:	230c      	movs	r3, #12
 8002f9e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8002fa0:	1d3b      	adds	r3, r7, #4
 8002fa2:	4619      	mov	r1, r3
 8002fa4:	480a      	ldr	r0, [pc, #40]	; (8002fd0 <HAL_FMC_MspInit+0x11c>)
 8002fa6:	f002 fd09 	bl	80059bc <HAL_GPIO_Init>
 8002faa:	e000      	b.n	8002fae <HAL_FMC_MspInit+0xfa>
    return;
 8002fac:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8002fae:	3718      	adds	r7, #24
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}
 8002fb4:	200000d8 	.word	0x200000d8
 8002fb8:	40023800 	.word	0x40023800
 8002fbc:	40021000 	.word	0x40021000
 8002fc0:	40021800 	.word	0x40021800
 8002fc4:	40020c00 	.word	0x40020c00
 8002fc8:	40021400 	.word	0x40021400
 8002fcc:	40021c00 	.word	0x40021c00
 8002fd0:	40020800 	.word	0x40020800

08002fd4 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b082      	sub	sp, #8
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8002fdc:	f7ff ff6a 	bl	8002eb4 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8002fe0:	bf00      	nop
 8002fe2:	3708      	adds	r7, #8
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}

08002fe8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002fec:	e7fe      	b.n	8002fec <NMI_Handler+0x4>

08002fee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002fee:	b480      	push	{r7}
 8002ff0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ff2:	e7fe      	b.n	8002ff2 <HardFault_Handler+0x4>

08002ff4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ff8:	e7fe      	b.n	8002ff8 <MemManage_Handler+0x4>

08002ffa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ffa:	b480      	push	{r7}
 8002ffc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ffe:	e7fe      	b.n	8002ffe <BusFault_Handler+0x4>

08003000 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003000:	b480      	push	{r7}
 8003002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003004:	e7fe      	b.n	8003004 <UsageFault_Handler+0x4>

08003006 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003006:	b480      	push	{r7}
 8003008:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800300a:	bf00      	nop
 800300c:	46bd      	mov	sp, r7
 800300e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003012:	4770      	bx	lr

08003014 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003014:	b480      	push	{r7}
 8003016:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003018:	bf00      	nop
 800301a:	46bd      	mov	sp, r7
 800301c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003020:	4770      	bx	lr

08003022 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003022:	b480      	push	{r7}
 8003024:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003026:	bf00      	nop
 8003028:	46bd      	mov	sp, r7
 800302a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302e:	4770      	bx	lr

08003030 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003034:	f000 fa32 	bl	800349c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003038:	bf00      	nop
 800303a:	bd80      	pop	{r7, pc}

0800303c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800303c:	b480      	push	{r7}
 800303e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003040:	4b06      	ldr	r3, [pc, #24]	; (800305c <SystemInit+0x20>)
 8003042:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003046:	4a05      	ldr	r2, [pc, #20]	; (800305c <SystemInit+0x20>)
 8003048:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800304c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003050:	bf00      	nop
 8003052:	46bd      	mov	sp, r7
 8003054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003058:	4770      	bx	lr
 800305a:	bf00      	nop
 800305c:	e000ed00 	.word	0xe000ed00

08003060 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003060:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003098 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003064:	480d      	ldr	r0, [pc, #52]	; (800309c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003066:	490e      	ldr	r1, [pc, #56]	; (80030a0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003068:	4a0e      	ldr	r2, [pc, #56]	; (80030a4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800306a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800306c:	e002      	b.n	8003074 <LoopCopyDataInit>

0800306e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800306e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003070:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003072:	3304      	adds	r3, #4

08003074 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003074:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003076:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003078:	d3f9      	bcc.n	800306e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800307a:	4a0b      	ldr	r2, [pc, #44]	; (80030a8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800307c:	4c0b      	ldr	r4, [pc, #44]	; (80030ac <LoopFillZerobss+0x26>)
  movs r3, #0
 800307e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003080:	e001      	b.n	8003086 <LoopFillZerobss>

08003082 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003082:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003084:	3204      	adds	r2, #4

08003086 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003086:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003088:	d3fb      	bcc.n	8003082 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800308a:	f7ff ffd7 	bl	800303c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800308e:	f005 faa9 	bl	80085e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003092:	f7fe fc3b 	bl	800190c <main>
  bx  lr    
 8003096:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003098:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800309c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80030a0:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 80030a4:	08009420 	.word	0x08009420
  ldr r2, =_sbss
 80030a8:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 80030ac:	200004b0 	.word	0x200004b0

080030b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80030b0:	e7fe      	b.n	80030b0 <ADC_IRQHandler>
	...

080030b4 <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 80030b4:	b580      	push	{r7, lr}
 80030b6:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 80030b8:	4b29      	ldr	r3, [pc, #164]	; (8003160 <BSP_SDRAM_Init+0xac>)
 80030ba:	4a2a      	ldr	r2, [pc, #168]	; (8003164 <BSP_SDRAM_Init+0xb0>)
 80030bc:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 80030be:	4b2a      	ldr	r3, [pc, #168]	; (8003168 <BSP_SDRAM_Init+0xb4>)
 80030c0:	2202      	movs	r2, #2
 80030c2:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 80030c4:	4b28      	ldr	r3, [pc, #160]	; (8003168 <BSP_SDRAM_Init+0xb4>)
 80030c6:	2207      	movs	r2, #7
 80030c8:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 80030ca:	4b27      	ldr	r3, [pc, #156]	; (8003168 <BSP_SDRAM_Init+0xb4>)
 80030cc:	2204      	movs	r2, #4
 80030ce:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 80030d0:	4b25      	ldr	r3, [pc, #148]	; (8003168 <BSP_SDRAM_Init+0xb4>)
 80030d2:	2207      	movs	r2, #7
 80030d4:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 80030d6:	4b24      	ldr	r3, [pc, #144]	; (8003168 <BSP_SDRAM_Init+0xb4>)
 80030d8:	2202      	movs	r2, #2
 80030da:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 80030dc:	4b22      	ldr	r3, [pc, #136]	; (8003168 <BSP_SDRAM_Init+0xb4>)
 80030de:	2202      	movs	r2, #2
 80030e0:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 80030e2:	4b21      	ldr	r3, [pc, #132]	; (8003168 <BSP_SDRAM_Init+0xb4>)
 80030e4:	2202      	movs	r2, #2
 80030e6:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 80030e8:	4b1d      	ldr	r3, [pc, #116]	; (8003160 <BSP_SDRAM_Init+0xac>)
 80030ea:	2200      	movs	r2, #0
 80030ec:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80030ee:	4b1c      	ldr	r3, [pc, #112]	; (8003160 <BSP_SDRAM_Init+0xac>)
 80030f0:	2200      	movs	r2, #0
 80030f2:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 80030f4:	4b1a      	ldr	r3, [pc, #104]	; (8003160 <BSP_SDRAM_Init+0xac>)
 80030f6:	2204      	movs	r2, #4
 80030f8:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 80030fa:	4b19      	ldr	r3, [pc, #100]	; (8003160 <BSP_SDRAM_Init+0xac>)
 80030fc:	2210      	movs	r2, #16
 80030fe:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8003100:	4b17      	ldr	r3, [pc, #92]	; (8003160 <BSP_SDRAM_Init+0xac>)
 8003102:	2240      	movs	r2, #64	; 0x40
 8003104:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 8003106:	4b16      	ldr	r3, [pc, #88]	; (8003160 <BSP_SDRAM_Init+0xac>)
 8003108:	f44f 7280 	mov.w	r2, #256	; 0x100
 800310c:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800310e:	4b14      	ldr	r3, [pc, #80]	; (8003160 <BSP_SDRAM_Init+0xac>)
 8003110:	2200      	movs	r2, #0
 8003112:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8003114:	4b12      	ldr	r3, [pc, #72]	; (8003160 <BSP_SDRAM_Init+0xac>)
 8003116:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800311a:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 800311c:	4b10      	ldr	r3, [pc, #64]	; (8003160 <BSP_SDRAM_Init+0xac>)
 800311e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003122:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8003124:	4b0e      	ldr	r3, [pc, #56]	; (8003160 <BSP_SDRAM_Init+0xac>)
 8003126:	2200      	movs	r2, #0
 8003128:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 800312a:	2100      	movs	r1, #0
 800312c:	480c      	ldr	r0, [pc, #48]	; (8003160 <BSP_SDRAM_Init+0xac>)
 800312e:	f000 f87f 	bl	8003230 <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8003132:	490d      	ldr	r1, [pc, #52]	; (8003168 <BSP_SDRAM_Init+0xb4>)
 8003134:	480a      	ldr	r0, [pc, #40]	; (8003160 <BSP_SDRAM_Init+0xac>)
 8003136:	f004 fbdf 	bl	80078f8 <HAL_SDRAM_Init>
 800313a:	4603      	mov	r3, r0
 800313c:	2b00      	cmp	r3, #0
 800313e:	d003      	beq.n	8003148 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8003140:	4b0a      	ldr	r3, [pc, #40]	; (800316c <BSP_SDRAM_Init+0xb8>)
 8003142:	2201      	movs	r2, #1
 8003144:	701a      	strb	r2, [r3, #0]
 8003146:	e002      	b.n	800314e <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8003148:	4b08      	ldr	r3, [pc, #32]	; (800316c <BSP_SDRAM_Init+0xb8>)
 800314a:	2200      	movs	r2, #0
 800314c:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 800314e:	f240 6003 	movw	r0, #1539	; 0x603
 8003152:	f000 f80d 	bl	8003170 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8003156:	4b05      	ldr	r3, [pc, #20]	; (800316c <BSP_SDRAM_Init+0xb8>)
 8003158:	781b      	ldrb	r3, [r3, #0]
}
 800315a:	4618      	mov	r0, r3
 800315c:	bd80      	pop	{r7, pc}
 800315e:	bf00      	nop
 8003160:	20000478 	.word	0x20000478
 8003164:	a0000140 	.word	0xa0000140
 8003168:	200000dc 	.word	0x200000dc
 800316c:	2000001c 	.word	0x2000001c

08003170 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b084      	sub	sp, #16
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8003178:	2300      	movs	r3, #0
 800317a:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 800317c:	4b2a      	ldr	r3, [pc, #168]	; (8003228 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800317e:	2201      	movs	r2, #1
 8003180:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003182:	4b29      	ldr	r3, [pc, #164]	; (8003228 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003184:	2210      	movs	r2, #16
 8003186:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8003188:	4b27      	ldr	r3, [pc, #156]	; (8003228 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800318a:	2201      	movs	r2, #1
 800318c:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800318e:	4b26      	ldr	r3, [pc, #152]	; (8003228 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003190:	2200      	movs	r2, #0
 8003192:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003194:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003198:	4923      	ldr	r1, [pc, #140]	; (8003228 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800319a:	4824      	ldr	r0, [pc, #144]	; (800322c <BSP_SDRAM_Initialization_sequence+0xbc>)
 800319c:	f004 fbe0 	bl	8007960 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 80031a0:	2001      	movs	r0, #1
 80031a2:	f000 f99b 	bl	80034dc <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 80031a6:	4b20      	ldr	r3, [pc, #128]	; (8003228 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80031a8:	2202      	movs	r2, #2
 80031aa:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80031ac:	4b1e      	ldr	r3, [pc, #120]	; (8003228 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80031ae:	2210      	movs	r2, #16
 80031b0:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80031b2:	4b1d      	ldr	r3, [pc, #116]	; (8003228 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80031b4:	2201      	movs	r2, #1
 80031b6:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80031b8:	4b1b      	ldr	r3, [pc, #108]	; (8003228 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80031ba:	2200      	movs	r2, #0
 80031bc:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 80031be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80031c2:	4919      	ldr	r1, [pc, #100]	; (8003228 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80031c4:	4819      	ldr	r0, [pc, #100]	; (800322c <BSP_SDRAM_Initialization_sequence+0xbc>)
 80031c6:	f004 fbcb 	bl	8007960 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80031ca:	4b17      	ldr	r3, [pc, #92]	; (8003228 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80031cc:	2203      	movs	r2, #3
 80031ce:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80031d0:	4b15      	ldr	r3, [pc, #84]	; (8003228 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80031d2:	2210      	movs	r2, #16
 80031d4:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 80031d6:	4b14      	ldr	r3, [pc, #80]	; (8003228 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80031d8:	2208      	movs	r2, #8
 80031da:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80031dc:	4b12      	ldr	r3, [pc, #72]	; (8003228 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80031de:	2200      	movs	r2, #0
 80031e0:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80031e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80031e6:	4910      	ldr	r1, [pc, #64]	; (8003228 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80031e8:	4810      	ldr	r0, [pc, #64]	; (800322c <BSP_SDRAM_Initialization_sequence+0xbc>)
 80031ea:	f004 fbb9 	bl	8007960 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 80031ee:	f44f 7308 	mov.w	r3, #544	; 0x220
 80031f2:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 80031f4:	4b0c      	ldr	r3, [pc, #48]	; (8003228 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80031f6:	2204      	movs	r2, #4
 80031f8:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80031fa:	4b0b      	ldr	r3, [pc, #44]	; (8003228 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80031fc:	2210      	movs	r2, #16
 80031fe:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8003200:	4b09      	ldr	r3, [pc, #36]	; (8003228 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003202:	2201      	movs	r2, #1
 8003204:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	4a07      	ldr	r2, [pc, #28]	; (8003228 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800320a:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800320c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003210:	4905      	ldr	r1, [pc, #20]	; (8003228 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003212:	4806      	ldr	r0, [pc, #24]	; (800322c <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003214:	f004 fba4 	bl	8007960 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8003218:	6879      	ldr	r1, [r7, #4]
 800321a:	4804      	ldr	r0, [pc, #16]	; (800322c <BSP_SDRAM_Initialization_sequence+0xbc>)
 800321c:	f004 fbd5 	bl	80079ca <HAL_SDRAM_ProgramRefreshRate>
}
 8003220:	bf00      	nop
 8003222:	3710      	adds	r7, #16
 8003224:	46bd      	mov	sp, r7
 8003226:	bd80      	pop	{r7, pc}
 8003228:	200000f8 	.word	0x200000f8
 800322c:	20000478 	.word	0x20000478

08003230 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 8003230:	b580      	push	{r7, lr}
 8003232:	b090      	sub	sp, #64	; 0x40
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
 8003238:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 800323a:	4b70      	ldr	r3, [pc, #448]	; (80033fc <BSP_SDRAM_MspInit+0x1cc>)
 800323c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800323e:	4a6f      	ldr	r2, [pc, #444]	; (80033fc <BSP_SDRAM_MspInit+0x1cc>)
 8003240:	f043 0301 	orr.w	r3, r3, #1
 8003244:	6393      	str	r3, [r2, #56]	; 0x38
 8003246:	4b6d      	ldr	r3, [pc, #436]	; (80033fc <BSP_SDRAM_MspInit+0x1cc>)
 8003248:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800324a:	f003 0301 	and.w	r3, r3, #1
 800324e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003250:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8003252:	4b6a      	ldr	r3, [pc, #424]	; (80033fc <BSP_SDRAM_MspInit+0x1cc>)
 8003254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003256:	4a69      	ldr	r2, [pc, #420]	; (80033fc <BSP_SDRAM_MspInit+0x1cc>)
 8003258:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800325c:	6313      	str	r3, [r2, #48]	; 0x30
 800325e:	4b67      	ldr	r3, [pc, #412]	; (80033fc <BSP_SDRAM_MspInit+0x1cc>)
 8003260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003262:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003266:	627b      	str	r3, [r7, #36]	; 0x24
 8003268:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800326a:	4b64      	ldr	r3, [pc, #400]	; (80033fc <BSP_SDRAM_MspInit+0x1cc>)
 800326c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800326e:	4a63      	ldr	r2, [pc, #396]	; (80033fc <BSP_SDRAM_MspInit+0x1cc>)
 8003270:	f043 0304 	orr.w	r3, r3, #4
 8003274:	6313      	str	r3, [r2, #48]	; 0x30
 8003276:	4b61      	ldr	r3, [pc, #388]	; (80033fc <BSP_SDRAM_MspInit+0x1cc>)
 8003278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800327a:	f003 0304 	and.w	r3, r3, #4
 800327e:	623b      	str	r3, [r7, #32]
 8003280:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003282:	4b5e      	ldr	r3, [pc, #376]	; (80033fc <BSP_SDRAM_MspInit+0x1cc>)
 8003284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003286:	4a5d      	ldr	r2, [pc, #372]	; (80033fc <BSP_SDRAM_MspInit+0x1cc>)
 8003288:	f043 0308 	orr.w	r3, r3, #8
 800328c:	6313      	str	r3, [r2, #48]	; 0x30
 800328e:	4b5b      	ldr	r3, [pc, #364]	; (80033fc <BSP_SDRAM_MspInit+0x1cc>)
 8003290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003292:	f003 0308 	and.w	r3, r3, #8
 8003296:	61fb      	str	r3, [r7, #28]
 8003298:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800329a:	4b58      	ldr	r3, [pc, #352]	; (80033fc <BSP_SDRAM_MspInit+0x1cc>)
 800329c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800329e:	4a57      	ldr	r2, [pc, #348]	; (80033fc <BSP_SDRAM_MspInit+0x1cc>)
 80032a0:	f043 0310 	orr.w	r3, r3, #16
 80032a4:	6313      	str	r3, [r2, #48]	; 0x30
 80032a6:	4b55      	ldr	r3, [pc, #340]	; (80033fc <BSP_SDRAM_MspInit+0x1cc>)
 80032a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032aa:	f003 0310 	and.w	r3, r3, #16
 80032ae:	61bb      	str	r3, [r7, #24]
 80032b0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80032b2:	4b52      	ldr	r3, [pc, #328]	; (80033fc <BSP_SDRAM_MspInit+0x1cc>)
 80032b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032b6:	4a51      	ldr	r2, [pc, #324]	; (80033fc <BSP_SDRAM_MspInit+0x1cc>)
 80032b8:	f043 0320 	orr.w	r3, r3, #32
 80032bc:	6313      	str	r3, [r2, #48]	; 0x30
 80032be:	4b4f      	ldr	r3, [pc, #316]	; (80033fc <BSP_SDRAM_MspInit+0x1cc>)
 80032c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c2:	f003 0320 	and.w	r3, r3, #32
 80032c6:	617b      	str	r3, [r7, #20]
 80032c8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80032ca:	4b4c      	ldr	r3, [pc, #304]	; (80033fc <BSP_SDRAM_MspInit+0x1cc>)
 80032cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ce:	4a4b      	ldr	r2, [pc, #300]	; (80033fc <BSP_SDRAM_MspInit+0x1cc>)
 80032d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80032d4:	6313      	str	r3, [r2, #48]	; 0x30
 80032d6:	4b49      	ldr	r3, [pc, #292]	; (80033fc <BSP_SDRAM_MspInit+0x1cc>)
 80032d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032de:	613b      	str	r3, [r7, #16]
 80032e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80032e2:	4b46      	ldr	r3, [pc, #280]	; (80033fc <BSP_SDRAM_MspInit+0x1cc>)
 80032e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e6:	4a45      	ldr	r2, [pc, #276]	; (80033fc <BSP_SDRAM_MspInit+0x1cc>)
 80032e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032ec:	6313      	str	r3, [r2, #48]	; 0x30
 80032ee:	4b43      	ldr	r3, [pc, #268]	; (80033fc <BSP_SDRAM_MspInit+0x1cc>)
 80032f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032f6:	60fb      	str	r3, [r7, #12]
 80032f8:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80032fa:	2302      	movs	r3, #2
 80032fc:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80032fe:	2301      	movs	r3, #1
 8003300:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8003302:	2302      	movs	r3, #2
 8003304:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8003306:	230c      	movs	r3, #12
 8003308:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 800330a:	2308      	movs	r3, #8
 800330c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 800330e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003312:	4619      	mov	r1, r3
 8003314:	483a      	ldr	r0, [pc, #232]	; (8003400 <BSP_SDRAM_MspInit+0x1d0>)
 8003316:	f002 fb51 	bl	80059bc <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 800331a:	f24c 7303 	movw	r3, #50947	; 0xc703
 800331e:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8003320:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003324:	4619      	mov	r1, r3
 8003326:	4837      	ldr	r0, [pc, #220]	; (8003404 <BSP_SDRAM_MspInit+0x1d4>)
 8003328:	f002 fb48 	bl	80059bc <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 800332c:	f64f 7383 	movw	r3, #65411	; 0xff83
 8003330:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8003332:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003336:	4619      	mov	r1, r3
 8003338:	4833      	ldr	r0, [pc, #204]	; (8003408 <BSP_SDRAM_MspInit+0x1d8>)
 800333a:	f002 fb3f 	bl	80059bc <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 800333e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8003342:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8003344:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003348:	4619      	mov	r1, r3
 800334a:	4830      	ldr	r0, [pc, #192]	; (800340c <BSP_SDRAM_MspInit+0x1dc>)
 800334c:	f002 fb36 	bl	80059bc <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 8003350:	f248 1333 	movw	r3, #33075	; 0x8133
 8003354:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8003356:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800335a:	4619      	mov	r1, r3
 800335c:	482c      	ldr	r0, [pc, #176]	; (8003410 <BSP_SDRAM_MspInit+0x1e0>)
 800335e:	f002 fb2d 	bl	80059bc <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 8003362:	2328      	movs	r3, #40	; 0x28
 8003364:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8003366:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800336a:	4619      	mov	r1, r3
 800336c:	4829      	ldr	r0, [pc, #164]	; (8003414 <BSP_SDRAM_MspInit+0x1e4>)
 800336e:	f002 fb25 	bl	80059bc <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8003372:	4b29      	ldr	r3, [pc, #164]	; (8003418 <BSP_SDRAM_MspInit+0x1e8>)
 8003374:	2200      	movs	r2, #0
 8003376:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8003378:	4b27      	ldr	r3, [pc, #156]	; (8003418 <BSP_SDRAM_MspInit+0x1e8>)
 800337a:	2280      	movs	r2, #128	; 0x80
 800337c:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 800337e:	4b26      	ldr	r3, [pc, #152]	; (8003418 <BSP_SDRAM_MspInit+0x1e8>)
 8003380:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003384:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8003386:	4b24      	ldr	r3, [pc, #144]	; (8003418 <BSP_SDRAM_MspInit+0x1e8>)
 8003388:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800338c:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800338e:	4b22      	ldr	r3, [pc, #136]	; (8003418 <BSP_SDRAM_MspInit+0x1e8>)
 8003390:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003394:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8003396:	4b20      	ldr	r3, [pc, #128]	; (8003418 <BSP_SDRAM_MspInit+0x1e8>)
 8003398:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800339c:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 800339e:	4b1e      	ldr	r3, [pc, #120]	; (8003418 <BSP_SDRAM_MspInit+0x1e8>)
 80033a0:	2200      	movs	r2, #0
 80033a2:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 80033a4:	4b1c      	ldr	r3, [pc, #112]	; (8003418 <BSP_SDRAM_MspInit+0x1e8>)
 80033a6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80033aa:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 80033ac:	4b1a      	ldr	r3, [pc, #104]	; (8003418 <BSP_SDRAM_MspInit+0x1e8>)
 80033ae:	2200      	movs	r2, #0
 80033b0:	625a      	str	r2, [r3, #36]	; 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80033b2:	4b19      	ldr	r3, [pc, #100]	; (8003418 <BSP_SDRAM_MspInit+0x1e8>)
 80033b4:	2203      	movs	r2, #3
 80033b6:	629a      	str	r2, [r3, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 80033b8:	4b17      	ldr	r3, [pc, #92]	; (8003418 <BSP_SDRAM_MspInit+0x1e8>)
 80033ba:	2200      	movs	r2, #0
 80033bc:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 80033be:	4b16      	ldr	r3, [pc, #88]	; (8003418 <BSP_SDRAM_MspInit+0x1e8>)
 80033c0:	2200      	movs	r2, #0
 80033c2:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 80033c4:	4b14      	ldr	r3, [pc, #80]	; (8003418 <BSP_SDRAM_MspInit+0x1e8>)
 80033c6:	4a15      	ldr	r2, [pc, #84]	; (800341c <BSP_SDRAM_MspInit+0x1ec>)
 80033c8:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	4a12      	ldr	r2, [pc, #72]	; (8003418 <BSP_SDRAM_MspInit+0x1e8>)
 80033ce:	631a      	str	r2, [r3, #48]	; 0x30
 80033d0:	4a11      	ldr	r2, [pc, #68]	; (8003418 <BSP_SDRAM_MspInit+0x1e8>)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 80033d6:	4810      	ldr	r0, [pc, #64]	; (8003418 <BSP_SDRAM_MspInit+0x1e8>)
 80033d8:	f000 fdc0 	bl	8003f5c <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 80033dc:	480e      	ldr	r0, [pc, #56]	; (8003418 <BSP_SDRAM_MspInit+0x1e8>)
 80033de:	f000 fd0f 	bl	8003e00 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 80033e2:	2200      	movs	r2, #0
 80033e4:	210f      	movs	r1, #15
 80033e6:	2038      	movs	r0, #56	; 0x38
 80033e8:	f000 f977 	bl	80036da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 80033ec:	2038      	movs	r0, #56	; 0x38
 80033ee:	f000 f990 	bl	8003712 <HAL_NVIC_EnableIRQ>
}
 80033f2:	bf00      	nop
 80033f4:	3740      	adds	r7, #64	; 0x40
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}
 80033fa:	bf00      	nop
 80033fc:	40023800 	.word	0x40023800
 8003400:	40020800 	.word	0x40020800
 8003404:	40020c00 	.word	0x40020c00
 8003408:	40021000 	.word	0x40021000
 800340c:	40021400 	.word	0x40021400
 8003410:	40021800 	.word	0x40021800
 8003414:	40021c00 	.word	0x40021c00
 8003418:	20000108 	.word	0x20000108
 800341c:	40026410 	.word	0x40026410

08003420 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003424:	2003      	movs	r0, #3
 8003426:	f000 f94d 	bl	80036c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800342a:	2000      	movs	r0, #0
 800342c:	f000 f806 	bl	800343c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003430:	f7ff fbdc 	bl	8002bec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003434:	2300      	movs	r3, #0
}
 8003436:	4618      	mov	r0, r3
 8003438:	bd80      	pop	{r7, pc}
	...

0800343c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b082      	sub	sp, #8
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003444:	4b12      	ldr	r3, [pc, #72]	; (8003490 <HAL_InitTick+0x54>)
 8003446:	681a      	ldr	r2, [r3, #0]
 8003448:	4b12      	ldr	r3, [pc, #72]	; (8003494 <HAL_InitTick+0x58>)
 800344a:	781b      	ldrb	r3, [r3, #0]
 800344c:	4619      	mov	r1, r3
 800344e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003452:	fbb3 f3f1 	udiv	r3, r3, r1
 8003456:	fbb2 f3f3 	udiv	r3, r2, r3
 800345a:	4618      	mov	r0, r3
 800345c:	f000 f967 	bl	800372e <HAL_SYSTICK_Config>
 8003460:	4603      	mov	r3, r0
 8003462:	2b00      	cmp	r3, #0
 8003464:	d001      	beq.n	800346a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	e00e      	b.n	8003488 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2b0f      	cmp	r3, #15
 800346e:	d80a      	bhi.n	8003486 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003470:	2200      	movs	r2, #0
 8003472:	6879      	ldr	r1, [r7, #4]
 8003474:	f04f 30ff 	mov.w	r0, #4294967295
 8003478:	f000 f92f 	bl	80036da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800347c:	4a06      	ldr	r2, [pc, #24]	; (8003498 <HAL_InitTick+0x5c>)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003482:	2300      	movs	r3, #0
 8003484:	e000      	b.n	8003488 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003486:	2301      	movs	r3, #1
}
 8003488:	4618      	mov	r0, r3
 800348a:	3708      	adds	r7, #8
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}
 8003490:	20000018 	.word	0x20000018
 8003494:	20000024 	.word	0x20000024
 8003498:	20000020 	.word	0x20000020

0800349c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800349c:	b480      	push	{r7}
 800349e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80034a0:	4b06      	ldr	r3, [pc, #24]	; (80034bc <HAL_IncTick+0x20>)
 80034a2:	781b      	ldrb	r3, [r3, #0]
 80034a4:	461a      	mov	r2, r3
 80034a6:	4b06      	ldr	r3, [pc, #24]	; (80034c0 <HAL_IncTick+0x24>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4413      	add	r3, r2
 80034ac:	4a04      	ldr	r2, [pc, #16]	; (80034c0 <HAL_IncTick+0x24>)
 80034ae:	6013      	str	r3, [r2, #0]
}
 80034b0:	bf00      	nop
 80034b2:	46bd      	mov	sp, r7
 80034b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b8:	4770      	bx	lr
 80034ba:	bf00      	nop
 80034bc:	20000024 	.word	0x20000024
 80034c0:	200004ac 	.word	0x200004ac

080034c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80034c4:	b480      	push	{r7}
 80034c6:	af00      	add	r7, sp, #0
  return uwTick;
 80034c8:	4b03      	ldr	r3, [pc, #12]	; (80034d8 <HAL_GetTick+0x14>)
 80034ca:	681b      	ldr	r3, [r3, #0]
}
 80034cc:	4618      	mov	r0, r3
 80034ce:	46bd      	mov	sp, r7
 80034d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d4:	4770      	bx	lr
 80034d6:	bf00      	nop
 80034d8:	200004ac 	.word	0x200004ac

080034dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b084      	sub	sp, #16
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80034e4:	f7ff ffee 	bl	80034c4 <HAL_GetTick>
 80034e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034f4:	d005      	beq.n	8003502 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80034f6:	4b0a      	ldr	r3, [pc, #40]	; (8003520 <HAL_Delay+0x44>)
 80034f8:	781b      	ldrb	r3, [r3, #0]
 80034fa:	461a      	mov	r2, r3
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	4413      	add	r3, r2
 8003500:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003502:	bf00      	nop
 8003504:	f7ff ffde 	bl	80034c4 <HAL_GetTick>
 8003508:	4602      	mov	r2, r0
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	1ad3      	subs	r3, r2, r3
 800350e:	68fa      	ldr	r2, [r7, #12]
 8003510:	429a      	cmp	r2, r3
 8003512:	d8f7      	bhi.n	8003504 <HAL_Delay+0x28>
  {
  }
}
 8003514:	bf00      	nop
 8003516:	bf00      	nop
 8003518:	3710      	adds	r7, #16
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}
 800351e:	bf00      	nop
 8003520:	20000024 	.word	0x20000024

08003524 <__NVIC_SetPriorityGrouping>:
{
 8003524:	b480      	push	{r7}
 8003526:	b085      	sub	sp, #20
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	f003 0307 	and.w	r3, r3, #7
 8003532:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003534:	4b0b      	ldr	r3, [pc, #44]	; (8003564 <__NVIC_SetPriorityGrouping+0x40>)
 8003536:	68db      	ldr	r3, [r3, #12]
 8003538:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800353a:	68ba      	ldr	r2, [r7, #8]
 800353c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003540:	4013      	ands	r3, r2
 8003542:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800354c:	4b06      	ldr	r3, [pc, #24]	; (8003568 <__NVIC_SetPriorityGrouping+0x44>)
 800354e:	4313      	orrs	r3, r2
 8003550:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003552:	4a04      	ldr	r2, [pc, #16]	; (8003564 <__NVIC_SetPriorityGrouping+0x40>)
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	60d3      	str	r3, [r2, #12]
}
 8003558:	bf00      	nop
 800355a:	3714      	adds	r7, #20
 800355c:	46bd      	mov	sp, r7
 800355e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003562:	4770      	bx	lr
 8003564:	e000ed00 	.word	0xe000ed00
 8003568:	05fa0000 	.word	0x05fa0000

0800356c <__NVIC_GetPriorityGrouping>:
{
 800356c:	b480      	push	{r7}
 800356e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003570:	4b04      	ldr	r3, [pc, #16]	; (8003584 <__NVIC_GetPriorityGrouping+0x18>)
 8003572:	68db      	ldr	r3, [r3, #12]
 8003574:	0a1b      	lsrs	r3, r3, #8
 8003576:	f003 0307 	and.w	r3, r3, #7
}
 800357a:	4618      	mov	r0, r3
 800357c:	46bd      	mov	sp, r7
 800357e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003582:	4770      	bx	lr
 8003584:	e000ed00 	.word	0xe000ed00

08003588 <__NVIC_EnableIRQ>:
{
 8003588:	b480      	push	{r7}
 800358a:	b083      	sub	sp, #12
 800358c:	af00      	add	r7, sp, #0
 800358e:	4603      	mov	r3, r0
 8003590:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003592:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003596:	2b00      	cmp	r3, #0
 8003598:	db0b      	blt.n	80035b2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800359a:	79fb      	ldrb	r3, [r7, #7]
 800359c:	f003 021f 	and.w	r2, r3, #31
 80035a0:	4907      	ldr	r1, [pc, #28]	; (80035c0 <__NVIC_EnableIRQ+0x38>)
 80035a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035a6:	095b      	lsrs	r3, r3, #5
 80035a8:	2001      	movs	r0, #1
 80035aa:	fa00 f202 	lsl.w	r2, r0, r2
 80035ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80035b2:	bf00      	nop
 80035b4:	370c      	adds	r7, #12
 80035b6:	46bd      	mov	sp, r7
 80035b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035bc:	4770      	bx	lr
 80035be:	bf00      	nop
 80035c0:	e000e100 	.word	0xe000e100

080035c4 <__NVIC_SetPriority>:
{
 80035c4:	b480      	push	{r7}
 80035c6:	b083      	sub	sp, #12
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	4603      	mov	r3, r0
 80035cc:	6039      	str	r1, [r7, #0]
 80035ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	db0a      	blt.n	80035ee <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	b2da      	uxtb	r2, r3
 80035dc:	490c      	ldr	r1, [pc, #48]	; (8003610 <__NVIC_SetPriority+0x4c>)
 80035de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035e2:	0112      	lsls	r2, r2, #4
 80035e4:	b2d2      	uxtb	r2, r2
 80035e6:	440b      	add	r3, r1
 80035e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80035ec:	e00a      	b.n	8003604 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	b2da      	uxtb	r2, r3
 80035f2:	4908      	ldr	r1, [pc, #32]	; (8003614 <__NVIC_SetPriority+0x50>)
 80035f4:	79fb      	ldrb	r3, [r7, #7]
 80035f6:	f003 030f 	and.w	r3, r3, #15
 80035fa:	3b04      	subs	r3, #4
 80035fc:	0112      	lsls	r2, r2, #4
 80035fe:	b2d2      	uxtb	r2, r2
 8003600:	440b      	add	r3, r1
 8003602:	761a      	strb	r2, [r3, #24]
}
 8003604:	bf00      	nop
 8003606:	370c      	adds	r7, #12
 8003608:	46bd      	mov	sp, r7
 800360a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360e:	4770      	bx	lr
 8003610:	e000e100 	.word	0xe000e100
 8003614:	e000ed00 	.word	0xe000ed00

08003618 <NVIC_EncodePriority>:
{
 8003618:	b480      	push	{r7}
 800361a:	b089      	sub	sp, #36	; 0x24
 800361c:	af00      	add	r7, sp, #0
 800361e:	60f8      	str	r0, [r7, #12]
 8003620:	60b9      	str	r1, [r7, #8]
 8003622:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	f003 0307 	and.w	r3, r3, #7
 800362a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800362c:	69fb      	ldr	r3, [r7, #28]
 800362e:	f1c3 0307 	rsb	r3, r3, #7
 8003632:	2b04      	cmp	r3, #4
 8003634:	bf28      	it	cs
 8003636:	2304      	movcs	r3, #4
 8003638:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800363a:	69fb      	ldr	r3, [r7, #28]
 800363c:	3304      	adds	r3, #4
 800363e:	2b06      	cmp	r3, #6
 8003640:	d902      	bls.n	8003648 <NVIC_EncodePriority+0x30>
 8003642:	69fb      	ldr	r3, [r7, #28]
 8003644:	3b03      	subs	r3, #3
 8003646:	e000      	b.n	800364a <NVIC_EncodePriority+0x32>
 8003648:	2300      	movs	r3, #0
 800364a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800364c:	f04f 32ff 	mov.w	r2, #4294967295
 8003650:	69bb      	ldr	r3, [r7, #24]
 8003652:	fa02 f303 	lsl.w	r3, r2, r3
 8003656:	43da      	mvns	r2, r3
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	401a      	ands	r2, r3
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003660:	f04f 31ff 	mov.w	r1, #4294967295
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	fa01 f303 	lsl.w	r3, r1, r3
 800366a:	43d9      	mvns	r1, r3
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003670:	4313      	orrs	r3, r2
}
 8003672:	4618      	mov	r0, r3
 8003674:	3724      	adds	r7, #36	; 0x24
 8003676:	46bd      	mov	sp, r7
 8003678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367c:	4770      	bx	lr
	...

08003680 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b082      	sub	sp, #8
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	3b01      	subs	r3, #1
 800368c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003690:	d301      	bcc.n	8003696 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003692:	2301      	movs	r3, #1
 8003694:	e00f      	b.n	80036b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003696:	4a0a      	ldr	r2, [pc, #40]	; (80036c0 <SysTick_Config+0x40>)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	3b01      	subs	r3, #1
 800369c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800369e:	210f      	movs	r1, #15
 80036a0:	f04f 30ff 	mov.w	r0, #4294967295
 80036a4:	f7ff ff8e 	bl	80035c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80036a8:	4b05      	ldr	r3, [pc, #20]	; (80036c0 <SysTick_Config+0x40>)
 80036aa:	2200      	movs	r2, #0
 80036ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80036ae:	4b04      	ldr	r3, [pc, #16]	; (80036c0 <SysTick_Config+0x40>)
 80036b0:	2207      	movs	r2, #7
 80036b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80036b4:	2300      	movs	r3, #0
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	3708      	adds	r7, #8
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}
 80036be:	bf00      	nop
 80036c0:	e000e010 	.word	0xe000e010

080036c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b082      	sub	sp, #8
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80036cc:	6878      	ldr	r0, [r7, #4]
 80036ce:	f7ff ff29 	bl	8003524 <__NVIC_SetPriorityGrouping>
}
 80036d2:	bf00      	nop
 80036d4:	3708      	adds	r7, #8
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}

080036da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80036da:	b580      	push	{r7, lr}
 80036dc:	b086      	sub	sp, #24
 80036de:	af00      	add	r7, sp, #0
 80036e0:	4603      	mov	r3, r0
 80036e2:	60b9      	str	r1, [r7, #8]
 80036e4:	607a      	str	r2, [r7, #4]
 80036e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80036e8:	2300      	movs	r3, #0
 80036ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80036ec:	f7ff ff3e 	bl	800356c <__NVIC_GetPriorityGrouping>
 80036f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80036f2:	687a      	ldr	r2, [r7, #4]
 80036f4:	68b9      	ldr	r1, [r7, #8]
 80036f6:	6978      	ldr	r0, [r7, #20]
 80036f8:	f7ff ff8e 	bl	8003618 <NVIC_EncodePriority>
 80036fc:	4602      	mov	r2, r0
 80036fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003702:	4611      	mov	r1, r2
 8003704:	4618      	mov	r0, r3
 8003706:	f7ff ff5d 	bl	80035c4 <__NVIC_SetPriority>
}
 800370a:	bf00      	nop
 800370c:	3718      	adds	r7, #24
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}

08003712 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003712:	b580      	push	{r7, lr}
 8003714:	b082      	sub	sp, #8
 8003716:	af00      	add	r7, sp, #0
 8003718:	4603      	mov	r3, r0
 800371a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800371c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003720:	4618      	mov	r0, r3
 8003722:	f7ff ff31 	bl	8003588 <__NVIC_EnableIRQ>
}
 8003726:	bf00      	nop
 8003728:	3708      	adds	r7, #8
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}

0800372e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800372e:	b580      	push	{r7, lr}
 8003730:	b082      	sub	sp, #8
 8003732:	af00      	add	r7, sp, #0
 8003734:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003736:	6878      	ldr	r0, [r7, #4]
 8003738:	f7ff ffa2 	bl	8003680 <SysTick_Config>
 800373c:	4603      	mov	r3, r0
}
 800373e:	4618      	mov	r0, r3
 8003740:	3708      	adds	r7, #8
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}
	...

08003748 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8003748:	b480      	push	{r7}
 800374a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800374c:	f3bf 8f5f 	dmb	sy
}
 8003750:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8003752:	4b07      	ldr	r3, [pc, #28]	; (8003770 <HAL_MPU_Disable+0x28>)
 8003754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003756:	4a06      	ldr	r2, [pc, #24]	; (8003770 <HAL_MPU_Disable+0x28>)
 8003758:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800375c:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800375e:	4b05      	ldr	r3, [pc, #20]	; (8003774 <HAL_MPU_Disable+0x2c>)
 8003760:	2200      	movs	r2, #0
 8003762:	605a      	str	r2, [r3, #4]
}
 8003764:	bf00      	nop
 8003766:	46bd      	mov	sp, r7
 8003768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376c:	4770      	bx	lr
 800376e:	bf00      	nop
 8003770:	e000ed00 	.word	0xe000ed00
 8003774:	e000ed90 	.word	0xe000ed90

08003778 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8003778:	b480      	push	{r7}
 800377a:	b083      	sub	sp, #12
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8003780:	4a0b      	ldr	r2, [pc, #44]	; (80037b0 <HAL_MPU_Enable+0x38>)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	f043 0301 	orr.w	r3, r3, #1
 8003788:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800378a:	4b0a      	ldr	r3, [pc, #40]	; (80037b4 <HAL_MPU_Enable+0x3c>)
 800378c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800378e:	4a09      	ldr	r2, [pc, #36]	; (80037b4 <HAL_MPU_Enable+0x3c>)
 8003790:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003794:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8003796:	f3bf 8f4f 	dsb	sy
}
 800379a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800379c:	f3bf 8f6f 	isb	sy
}
 80037a0:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80037a2:	bf00      	nop
 80037a4:	370c      	adds	r7, #12
 80037a6:	46bd      	mov	sp, r7
 80037a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ac:	4770      	bx	lr
 80037ae:	bf00      	nop
 80037b0:	e000ed90 	.word	0xe000ed90
 80037b4:	e000ed00 	.word	0xe000ed00

080037b8 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b083      	sub	sp, #12
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	785a      	ldrb	r2, [r3, #1]
 80037c4:	4b1d      	ldr	r3, [pc, #116]	; (800383c <HAL_MPU_ConfigRegion+0x84>)
 80037c6:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != RESET)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	781b      	ldrb	r3, [r3, #0]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d029      	beq.n	8003824 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 80037d0:	4a1a      	ldr	r2, [pc, #104]	; (800383c <HAL_MPU_ConfigRegion+0x84>)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	7b1b      	ldrb	r3, [r3, #12]
 80037dc:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	7adb      	ldrb	r3, [r3, #11]
 80037e2:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80037e4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	7a9b      	ldrb	r3, [r3, #10]
 80037ea:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80037ec:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	7b5b      	ldrb	r3, [r3, #13]
 80037f2:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80037f4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	7b9b      	ldrb	r3, [r3, #14]
 80037fa:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80037fc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	7bdb      	ldrb	r3, [r3, #15]
 8003802:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003804:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	7a5b      	ldrb	r3, [r3, #9]
 800380a:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800380c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	7a1b      	ldrb	r3, [r3, #8]
 8003812:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003814:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8003816:	687a      	ldr	r2, [r7, #4]
 8003818:	7812      	ldrb	r2, [r2, #0]
 800381a:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800381c:	4a07      	ldr	r2, [pc, #28]	; (800383c <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800381e:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003820:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8003822:	e005      	b.n	8003830 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8003824:	4b05      	ldr	r3, [pc, #20]	; (800383c <HAL_MPU_ConfigRegion+0x84>)
 8003826:	2200      	movs	r2, #0
 8003828:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 800382a:	4b04      	ldr	r3, [pc, #16]	; (800383c <HAL_MPU_ConfigRegion+0x84>)
 800382c:	2200      	movs	r2, #0
 800382e:	611a      	str	r2, [r3, #16]
}
 8003830:	bf00      	nop
 8003832:	370c      	adds	r7, #12
 8003834:	46bd      	mov	sp, r7
 8003836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383a:	4770      	bx	lr
 800383c:	e000ed90 	.word	0xe000ed90

08003840 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b082      	sub	sp, #8
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d101      	bne.n	8003852 <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	e069      	b.n	8003926 <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003858:	b2db      	uxtb	r3, r3
 800385a:	2b00      	cmp	r3, #0
 800385c:	d102      	bne.n	8003864 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	f7ff f9e8 	bl	8002c34 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2202      	movs	r2, #2
 8003868:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

#ifdef DCMI_CR_BSM
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	699b      	ldr	r3, [r3, #24]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d002      	beq.n	800387a <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2200      	movs	r2, #0
 8003878:	625a      	str	r2, [r3, #36]	; 0x24
  }
#endif
  /* Configures the HS, VS, DE and PC polarity */
#ifdef DCMI_CR_BSM
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	6819      	ldr	r1, [r3, #0]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	4b2a      	ldr	r3, [pc, #168]	; (8003930 <HAL_DCMI_Init+0xf0>)
 8003886:	400b      	ands	r3, r1
 8003888:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	6819      	ldr	r1, [r3, #0]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	685a      	ldr	r2, [r3, #4]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	695b      	ldr	r3, [r3, #20]
 8003898:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 800389e:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	691b      	ldr	r3, [r3, #16]
 80038a4:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 80038aa:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	699b      	ldr	r3, [r3, #24]
 80038b0:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80038b6:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038bc:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80038c2:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038c8:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80038ce:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	430a      	orrs	r2, r1
 80038d6:	601a      	str	r2, [r3, #0]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
                                    hdcmi->Init.JPEGMode);
#endif

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	2b10      	cmp	r3, #16
 80038de:	d112      	bne.n	8003906 <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	7f1b      	ldrb	r3, [r3, #28]
 80038e4:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	7f5b      	ldrb	r3, [r3, #29]
 80038ea:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80038ec:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	7f9b      	ldrb	r3, [r3, #30]
 80038f2:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 80038f4:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	7fdb      	ldrb	r3, [r3, #31]
 80038fc:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8003902:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8003904:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	68da      	ldr	r2, [r3, #12]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f042 021e 	orr.w	r2, r2, #30
 8003914:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2200      	movs	r2, #0
 800391a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2201      	movs	r2, #1
 8003920:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003924:	2300      	movs	r3, #0
}
 8003926:	4618      	mov	r0, r3
 8003928:	3708      	adds	r7, #8
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}
 800392e:	bf00      	nop
 8003930:	ffe0f007 	.word	0xffe0f007

08003934 <HAL_DCMI_Start_DMA>:
  * @param  pData     The destination memory Buffer address (LCD Frame buffer).
  * @param  Length    The length of capture to be transferred.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Start_DMA(DCMI_HandleTypeDef *hdcmi, uint32_t DCMI_Mode, uint32_t pData, uint32_t Length)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b088      	sub	sp, #32
 8003938:	af02      	add	r7, sp, #8
 800393a:	60f8      	str	r0, [r7, #12]
 800393c:	60b9      	str	r1, [r7, #8]
 800393e:	607a      	str	r2, [r7, #4]
 8003940:	603b      	str	r3, [r7, #0]
  /* Initialize the second memory address */
  uint32_t SecondMemAddress = 0;
 8003942:	2300      	movs	r3, #0
 8003944:	617b      	str	r3, [r7, #20]

  /* Check function parameters */
  assert_param(IS_DCMI_CAPTURE_MODE(DCMI_Mode));

  /* Process Locked */
  __HAL_LOCK(hdcmi);
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800394c:	2b01      	cmp	r3, #1
 800394e:	d101      	bne.n	8003954 <HAL_DCMI_Start_DMA+0x20>
 8003950:	2302      	movs	r3, #2
 8003952:	e095      	b.n	8003a80 <HAL_DCMI_Start_DMA+0x14c>
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	2201      	movs	r2, #1
 8003958:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	2202      	movs	r2, #2
 8003960:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Enable DCMI by setting DCMIEN bit */
  __HAL_DCMI_ENABLE(hdcmi);
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	681a      	ldr	r2, [r3, #0]
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003972:	601a      	str	r2, [r3, #0]

  /* Configure the DCMI Mode */
  hdcmi->Instance->CR &= ~(DCMI_CR_CM);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f022 0202 	bic.w	r2, r2, #2
 8003982:	601a      	str	r2, [r3, #0]
  hdcmi->Instance->CR |= (uint32_t)(DCMI_Mode);
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	6819      	ldr	r1, [r3, #0]
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	68ba      	ldr	r2, [r7, #8]
 8003990:	430a      	orrs	r2, r1
 8003992:	601a      	str	r2, [r3, #0]

  /* Set the DMA memory0 conversion complete callback */
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003998:	4a3b      	ldr	r2, [pc, #236]	; (8003a88 <HAL_DCMI_Start_DMA+0x154>)
 800399a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039a0:	4a3a      	ldr	r2, [pc, #232]	; (8003a8c <HAL_DCMI_Start_DMA+0x158>)
 80039a2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the dma abort callback */
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039a8:	2200      	movs	r2, #0
 80039aa:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset transfer counters value */
  hdcmi->XferCount = 0;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	2200      	movs	r2, #0
 80039b0:	639a      	str	r2, [r3, #56]	; 0x38
  hdcmi->XferTransferNumber = 0;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	2200      	movs	r2, #0
 80039b6:	641a      	str	r2, [r3, #64]	; 0x40
  hdcmi->XferSize = 0;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	2200      	movs	r2, #0
 80039bc:	63da      	str	r2, [r3, #60]	; 0x3c
  hdcmi->pBuffPtr = 0;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	2200      	movs	r2, #0
 80039c2:	645a      	str	r2, [r3, #68]	; 0x44

  if (Length <= 0xFFFFU)
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039ca:	d20e      	bcs.n	80039ea <HAL_DCMI_Start_DMA+0xb6>
  {
    /* Enable the DMA Stream */
    if (HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, Length) != HAL_OK)
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	3328      	adds	r3, #40	; 0x28
 80039d6:	4619      	mov	r1, r3
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	687a      	ldr	r2, [r7, #4]
 80039dc:	f000 fb1c 	bl	8004018 <HAL_DMA_Start_IT>
 80039e0:	4603      	mov	r3, r0
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d03f      	beq.n	8003a66 <HAL_DCMI_Start_DMA+0x132>
    {
      return HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	e04a      	b.n	8003a80 <HAL_DCMI_Start_DMA+0x14c>
    }
  }
  else /* DCMI_DOUBLE_BUFFER Mode */
  {
    /* Set the DMA memory1 conversion complete callback */
    hdcmi->DMA_Handle->XferM1CpltCallback = DCMI_DMAXferCplt;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039ee:	4a26      	ldr	r2, [pc, #152]	; (8003a88 <HAL_DCMI_Start_DMA+0x154>)
 80039f0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize transfer parameters */
    hdcmi->XferCount = 1;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	2201      	movs	r2, #1
 80039f6:	639a      	str	r2, [r3, #56]	; 0x38
    hdcmi->XferSize = Length;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	683a      	ldr	r2, [r7, #0]
 80039fc:	63da      	str	r2, [r3, #60]	; 0x3c
    hdcmi->pBuffPtr = pData;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	687a      	ldr	r2, [r7, #4]
 8003a02:	645a      	str	r2, [r3, #68]	; 0x44

    /* Get the number of buffer */
    while (hdcmi->XferSize > 0xFFFFU)
 8003a04:	e009      	b.n	8003a1a <HAL_DCMI_Start_DMA+0xe6>
    {
      hdcmi->XferSize = (hdcmi->XferSize / 2U);
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a0a:	085a      	lsrs	r2, r3, #1
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	63da      	str	r2, [r3, #60]	; 0x3c
      hdcmi->XferCount = hdcmi->XferCount * 2U;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a14:	005a      	lsls	r2, r3, #1
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	639a      	str	r2, [r3, #56]	; 0x38
    while (hdcmi->XferSize > 0xFFFFU)
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a22:	d2f0      	bcs.n	8003a06 <HAL_DCMI_Start_DMA+0xd2>
    }

    /* Update DCMI counter  and transfer number*/
    hdcmi->XferCount = (hdcmi->XferCount - 2U);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a28:	1e9a      	subs	r2, r3, #2
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	639a      	str	r2, [r3, #56]	; 0x38
    hdcmi->XferTransferNumber = hdcmi->XferCount;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	641a      	str	r2, [r3, #64]	; 0x40

    /* Update second memory address */
    SecondMemAddress = (uint32_t)(pData + (4 * hdcmi->XferSize));
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a3a:	009b      	lsls	r3, r3, #2
 8003a3c:	687a      	ldr	r2, [r7, #4]
 8003a3e:	4413      	add	r3, r2
 8003a40:	617b      	str	r3, [r7, #20]

    /* Start DMA multi buffer transfer */
    if (HAL_DMAEx_MultiBufferStart_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, SecondMemAddress, hdcmi->XferSize) != HAL_OK)
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	3328      	adds	r3, #40	; 0x28
 8003a4c:	4619      	mov	r1, r3
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a52:	9300      	str	r3, [sp, #0]
 8003a54:	697b      	ldr	r3, [r7, #20]
 8003a56:	687a      	ldr	r2, [r7, #4]
 8003a58:	f000 fe3a 	bl	80046d0 <HAL_DMAEx_MultiBufferStart_IT>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d001      	beq.n	8003a66 <HAL_DCMI_Start_DMA+0x132>
    {
      return HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	e00c      	b.n	8003a80 <HAL_DCMI_Start_DMA+0x14c>
    }
  }

  /* Enable Capture */
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	681a      	ldr	r2, [r3, #0]
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f042 0201 	orr.w	r2, r2, #1
 8003a74:	601a      	str	r2, [r3, #0]

  /* Release Lock */
  __HAL_UNLOCK(hdcmi);
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Return function status */
  return HAL_OK;
 8003a7e:	2300      	movs	r3, #0
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	3718      	adds	r7, #24
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bd80      	pop	{r7, pc}
 8003a88:	08003c9d 	.word	0x08003c9d
 8003a8c:	08003dc7 	.word	0x08003dc7

08003a90 <HAL_DCMI_Stop>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Stop(DCMI_HandleTypeDef *hdcmi)
{
 8003a90:	b590      	push	{r4, r7, lr}
 8003a92:	b085      	sub	sp, #20
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  register uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
 8003a98:	4b2a      	ldr	r3, [pc, #168]	; (8003b44 <HAL_DCMI_Stop+0xb4>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a2a      	ldr	r2, [pc, #168]	; (8003b48 <HAL_DCMI_Stop+0xb8>)
 8003a9e:	fba2 2303 	umull	r2, r3, r2, r3
 8003aa2:	0a5b      	lsrs	r3, r3, #9
 8003aa4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003aa8:	fb02 f403 	mul.w	r4, r2, r3
  HAL_StatusTypeDef status = HAL_OK;
 8003aac:	2300      	movs	r3, #0
 8003aae:	73fb      	strb	r3, [r7, #15]

  /* Process locked */
  __HAL_LOCK(hdcmi);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003ab6:	2b01      	cmp	r3, #1
 8003ab8:	d101      	bne.n	8003abe <HAL_DCMI_Stop+0x2e>
 8003aba:	2302      	movs	r3, #2
 8003abc:	e03d      	b.n	8003b3a <HAL_DCMI_Stop+0xaa>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2201      	movs	r2, #1
 8003ac2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2202      	movs	r2, #2
 8003aca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Disable Capture */
  hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	681a      	ldr	r2, [r3, #0]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f022 0201 	bic.w	r2, r2, #1
 8003adc:	601a      	str	r2, [r3, #0]

  /* Check if the DCMI capture effectively disabled */
  do
  {
    if (count-- == 0U)
 8003ade:	4623      	mov	r3, r4
 8003ae0:	1e5c      	subs	r4, r3, #1
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d108      	bne.n	8003af8 <HAL_DCMI_Stop+0x68>
    {
      /* Update error code */
      hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003aea:	f043 0220 	orr.w	r2, r3, #32
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	64da      	str	r2, [r3, #76]	; 0x4c

      status = HAL_TIMEOUT;
 8003af2:	2303      	movs	r3, #3
 8003af4:	73fb      	strb	r3, [r7, #15]
      break;
 8003af6:	e006      	b.n	8003b06 <HAL_DCMI_Stop+0x76>
    }
  }
  while ((hdcmi->Instance->CR & DCMI_CR_CAPTURE) != 0U);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f003 0301 	and.w	r3, r3, #1
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d1eb      	bne.n	8003ade <HAL_DCMI_Stop+0x4e>

  /* Disable the DCMI */
  __HAL_DCMI_DISABLE(hdcmi);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	681a      	ldr	r2, [r3, #0]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003b14:	601a      	str	r2, [r3, #0]

  /* Disable the DMA */
  (void)HAL_DMA_Abort(hdcmi->DMA_Handle);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f000 fadc 	bl	80040d8 <HAL_DMA_Abort>

  /* Update error code */
  hdcmi->ErrorCode |= HAL_DCMI_ERROR_NONE;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Change DCMI state */
  hdcmi->State = HAL_DCMI_STATE_READY;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2200      	movs	r2, #0
 8003b34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Return function status */
  return status;
 8003b38:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	3714      	adds	r7, #20
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd90      	pop	{r4, r7, pc}
 8003b42:	bf00      	nop
 8003b44:	20000018 	.word	0x20000018
 8003b48:	10624dd3 	.word	0x10624dd3

08003b4c <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b084      	sub	sp, #16
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	691b      	ldr	r3, [r3, #16]
 8003b5a:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if ((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	f003 0304 	and.w	r3, r3, #4
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d016      	beq.n	8003b94 <HAL_DCMI_IRQHandler+0x48>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	2204      	movs	r2, #4
 8003b6c:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b72:	f043 0202 	orr.w	r2, r3, #2
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2204      	movs	r2, #4
 8003b7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b86:	4a35      	ldr	r2, [pc, #212]	; (8003c5c <HAL_DCMI_IRQHandler+0x110>)
 8003b88:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f000 fb12 	bl	80041b8 <HAL_DMA_Abort_IT>
  }
  /* Overflow interrupt management ********************************************/
  if ((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	f003 0302 	and.w	r3, r3, #2
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d01e      	beq.n	8003bdc <HAL_DCMI_IRQHandler+0x90>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	2202      	movs	r2, #2
 8003ba4:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003baa:	f043 0201 	orr.w	r2, r3, #1
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2204      	movs	r2, #4
 8003bb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bbe:	4a27      	ldr	r2, [pc, #156]	; (8003c5c <HAL_DCMI_IRQHandler+0x110>)
 8003bc0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    if (HAL_DMA_Abort_IT(hdcmi->DMA_Handle) != HAL_OK)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f000 faf6 	bl	80041b8 <HAL_DMA_Abort_IT>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d004      	beq.n	8003bdc <HAL_DCMI_IRQHandler+0x90>
    {
      DCMI_DMAError(hdcmi->DMA_Handle);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f000 f8f5 	bl	8003dc6 <DCMI_DMAError>
    }
  }
  /* Line Interrupt management ************************************************/
  if ((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	f003 0310 	and.w	r3, r3, #16
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d006      	beq.n	8003bf4 <HAL_DCMI_IRQHandler+0xa8>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	2210      	movs	r2, #16
 8003bec:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else
    HAL_DCMI_LineEventCallback(hdcmi);
 8003bee:	6878      	ldr	r0, [r7, #4]
 8003bf0:	f000 f840 	bl	8003c74 <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* VSYNC interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	f003 0308 	and.w	r3, r3, #8
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d006      	beq.n	8003c0c <HAL_DCMI_IRQHandler+0xc0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	2208      	movs	r2, #8
 8003c04:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else
    HAL_DCMI_VsyncEventCallback(hdcmi);
 8003c06:	6878      	ldr	r0, [r7, #4]
 8003c08:	f000 f83e 	bl	8003c88 <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* FRAME interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	f003 0301 	and.w	r3, r3, #1
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d01d      	beq.n	8003c52 <HAL_DCMI_IRQHandler+0x106>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f003 0302 	and.w	r3, r3, #2
 8003c20:	2b02      	cmp	r3, #2
 8003c22:	d107      	bne.n	8003c34 <HAL_DCMI_IRQHandler+0xe8>
    {
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	68da      	ldr	r2, [r3, #12]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f022 021e 	bic.w	r2, r2, #30
 8003c32:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	68da      	ldr	r2, [r3, #12]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f022 0201 	bic.w	r2, r2, #1
 8003c42:	60da      	str	r2, [r3, #12]

    /* Clear the End of Frame flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	2201      	movs	r2, #1
 8003c4a:	615a      	str	r2, [r3, #20]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else
    HAL_DCMI_FrameEventCallback(hdcmi);
 8003c4c:	6878      	ldr	r0, [r7, #4]
 8003c4e:	f7fd f959 	bl	8000f04 <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
}
 8003c52:	bf00      	nop
 8003c54:	3710      	adds	r7, #16
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}
 8003c5a:	bf00      	nop
 8003c5c:	08003dc7 	.word	0x08003dc7

08003c60 <HAL_DCMI_ErrorCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b083      	sub	sp, #12
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 8003c68:	bf00      	nop
 8003c6a:	370c      	adds	r7, #12
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c72:	4770      	bx	lr

08003c74 <HAL_DCMI_LineEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b083      	sub	sp, #12
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_LineEventCallback could be implemented in the user file
   */
}
 8003c7c:	bf00      	nop
 8003c7e:	370c      	adds	r7, #12
 8003c80:	46bd      	mov	sp, r7
 8003c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c86:	4770      	bx	lr

08003c88 <HAL_DCMI_VsyncEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b083      	sub	sp, #12
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_VsyncEventCallback could be implemented in the user file
   */
}
 8003c90:	bf00      	nop
 8003c92:	370c      	adds	r7, #12
 8003c94:	46bd      	mov	sp, r7
 8003c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9a:	4770      	bx	lr

08003c9c <DCMI_DMAXferCplt>:
* @param  hdma pointer to a DMA_HandleTypeDef structure that contains
*                the configuration information for the specified DMA module.
* @retval None
*/
static void DCMI_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b084      	sub	sp, #16
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	60fb      	str	r3, [r7, #12]

  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cac:	60bb      	str	r3, [r7, #8]

  if (hdcmi->XferCount != 0)
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d043      	beq.n	8003d3e <DCMI_DMAXferCplt+0xa2>
  {
    /* Update memory 0 address location */
    tmp = ((hdcmi->DMA_Handle->Instance->CR) & DMA_SxCR_CT);
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003cc2:	60fb      	str	r3, [r7, #12]
    if (((hdcmi->XferCount % 2) == 0) && (tmp != 0))
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cc8:	f003 0301 	and.w	r3, r3, #1
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d118      	bne.n	8003d02 <DCMI_DMAXferCplt+0x66>
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d015      	beq.n	8003d02 <DCMI_DMAXferCplt+0x66>
    {
      tmp = hdcmi->DMA_Handle->Instance->M0AR;
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	68db      	ldr	r3, [r3, #12]
 8003cde:	60fb      	str	r3, [r7, #12]
      HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8 * hdcmi->XferSize)), MEMORY0);
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ce8:	00da      	lsls	r2, r3, #3
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	4413      	add	r3, r2
 8003cee:	2200      	movs	r2, #0
 8003cf0:	4619      	mov	r1, r3
 8003cf2:	f001 fe23 	bl	800593c <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cfa:	1e5a      	subs	r2, r3, #1
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	639a      	str	r2, [r3, #56]	; 0x38
 8003d00:	e044      	b.n	8003d8c <DCMI_DMAXferCplt+0xf0>
    }
    /* Update memory 1 address location */
    else if ((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) == 0)
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d13c      	bne.n	8003d8c <DCMI_DMAXferCplt+0xf0>
    {
      tmp = hdcmi->DMA_Handle->Instance->M1AR;
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	691b      	ldr	r3, [r3, #16]
 8003d1a:	60fb      	str	r3, [r7, #12]
      HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8 * hdcmi->XferSize)), MEMORY1);
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d24:	00da      	lsls	r2, r3, #3
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	4413      	add	r3, r2
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	4619      	mov	r1, r3
 8003d2e:	f001 fe05 	bl	800593c <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d36:	1e5a      	subs	r2, r3, #1
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	639a      	str	r2, [r3, #56]	; 0x38
 8003d3c:	e026      	b.n	8003d8c <DCMI_DMAXferCplt+0xf0>
    }
  }
  /* Update memory 0 address location */
  else if ((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) != 0)
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d006      	beq.n	8003d5c <DCMI_DMAXferCplt+0xc0>
  {
    hdcmi->DMA_Handle->Instance->M0AR = hdcmi->pBuffPtr;
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	68ba      	ldr	r2, [r7, #8]
 8003d56:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003d58:	60da      	str	r2, [r3, #12]
 8003d5a:	e017      	b.n	8003d8c <DCMI_DMAXferCplt+0xf0>
  }
  /* Update memory 1 address location */
  else if ((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) == 0)
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d10f      	bne.n	8003d8c <DCMI_DMAXferCplt+0xf0>
  {
    tmp = hdcmi->pBuffPtr;
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d70:	60fb      	str	r3, [r7, #12]
    hdcmi->DMA_Handle->Instance->M1AR = (tmp + (4 * hdcmi->XferSize));
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d76:	0099      	lsls	r1, r3, #2
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	68fa      	ldr	r2, [r7, #12]
 8003d80:	440a      	add	r2, r1
 8003d82:	611a      	str	r2, [r3, #16]
    hdcmi->XferCount = hdcmi->XferTransferNumber;
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Check if the frame is transferred */
  if (hdcmi->XferCount == hdcmi->XferTransferNumber)
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d94:	429a      	cmp	r2, r3
 8003d96:	d112      	bne.n	8003dbe <DCMI_DMAXferCplt+0x122>
  {
    /* Enable the Frame interrupt */
    __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	68da      	ldr	r2, [r3, #12]
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f042 0201 	orr.w	r2, r2, #1
 8003da6:	60da      	str	r2, [r3, #12]

    /* When snapshot mode, set dcmi state to ready */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f003 0302 	and.w	r3, r3, #2
 8003db2:	2b02      	cmp	r3, #2
 8003db4:	d103      	bne.n	8003dbe <DCMI_DMAXferCplt+0x122>
    {
      hdcmi->State = HAL_DCMI_STATE_READY;
 8003db6:	68bb      	ldr	r3, [r7, #8]
 8003db8:	2201      	movs	r2, #1
 8003dba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }
  }
}
 8003dbe:	bf00      	nop
 8003dc0:	3710      	adds	r7, #16
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}

08003dc6 <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 8003dc6:	b580      	push	{r7, lr}
 8003dc8:	b084      	sub	sp, #16
 8003dca:	af00      	add	r7, sp, #0
 8003dcc:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dd2:	60fb      	str	r3, [r7, #12]

  if (hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003dd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dda:	2b02      	cmp	r3, #2
 8003ddc:	d009      	beq.n	8003df2 <DCMI_DMAError+0x2c>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	2201      	movs	r2, #1
 8003de2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set DCMI Error Code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dea:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	64da      	str	r2, [r3, #76]	; 0x4c
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
  /*Call registered DCMI error callback*/
  hdcmi->ErrorCallback(hdcmi);
#else
  HAL_DCMI_ErrorCallback(hdcmi);
 8003df2:	68f8      	ldr	r0, [r7, #12]
 8003df4:	f7ff ff34 	bl	8003c60 <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */

}
 8003df8:	bf00      	nop
 8003dfa:	3710      	adds	r7, #16
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bd80      	pop	{r7, pc}

08003e00 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b086      	sub	sp, #24
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003e08:	2300      	movs	r3, #0
 8003e0a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003e0c:	f7ff fb5a 	bl	80034c4 <HAL_GetTick>
 8003e10:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d101      	bne.n	8003e1c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	e099      	b.n	8003f50 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2202      	movs	r2, #2
 8003e20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2200      	movs	r2, #0
 8003e28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	681a      	ldr	r2, [r3, #0]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f022 0201 	bic.w	r2, r2, #1
 8003e3a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003e3c:	e00f      	b.n	8003e5e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003e3e:	f7ff fb41 	bl	80034c4 <HAL_GetTick>
 8003e42:	4602      	mov	r2, r0
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	1ad3      	subs	r3, r2, r3
 8003e48:	2b05      	cmp	r3, #5
 8003e4a:	d908      	bls.n	8003e5e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2220      	movs	r2, #32
 8003e50:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2203      	movs	r2, #3
 8003e56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003e5a:	2303      	movs	r3, #3
 8003e5c:	e078      	b.n	8003f50 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f003 0301 	and.w	r3, r3, #1
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d1e8      	bne.n	8003e3e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003e74:	697a      	ldr	r2, [r7, #20]
 8003e76:	4b38      	ldr	r3, [pc, #224]	; (8003f58 <HAL_DMA_Init+0x158>)
 8003e78:	4013      	ands	r3, r2
 8003e7a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	685a      	ldr	r2, [r3, #4]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	689b      	ldr	r3, [r3, #8]
 8003e84:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003e8a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	691b      	ldr	r3, [r3, #16]
 8003e90:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e96:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	699b      	ldr	r3, [r3, #24]
 8003e9c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ea2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6a1b      	ldr	r3, [r3, #32]
 8003ea8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003eaa:	697a      	ldr	r2, [r7, #20]
 8003eac:	4313      	orrs	r3, r2
 8003eae:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb4:	2b04      	cmp	r3, #4
 8003eb6:	d107      	bne.n	8003ec8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	697a      	ldr	r2, [r7, #20]
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	697a      	ldr	r2, [r7, #20]
 8003ece:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	695b      	ldr	r3, [r3, #20]
 8003ed6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	f023 0307 	bic.w	r3, r3, #7
 8003ede:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee4:	697a      	ldr	r2, [r7, #20]
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eee:	2b04      	cmp	r3, #4
 8003ef0:	d117      	bne.n	8003f22 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ef6:	697a      	ldr	r2, [r7, #20]
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d00e      	beq.n	8003f22 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003f04:	6878      	ldr	r0, [r7, #4]
 8003f06:	f000 fb67 	bl	80045d8 <DMA_CheckFifoParam>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d008      	beq.n	8003f22 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2240      	movs	r2, #64	; 0x40
 8003f14:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2201      	movs	r2, #1
 8003f1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e016      	b.n	8003f50 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	697a      	ldr	r2, [r7, #20]
 8003f28:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003f2a:	6878      	ldr	r0, [r7, #4]
 8003f2c:	f000 fb1e 	bl	800456c <DMA_CalcBaseAndBitshift>
 8003f30:	4603      	mov	r3, r0
 8003f32:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f38:	223f      	movs	r2, #63	; 0x3f
 8003f3a:	409a      	lsls	r2, r3
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2200      	movs	r2, #0
 8003f44:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2201      	movs	r2, #1
 8003f4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003f4e:	2300      	movs	r3, #0
}
 8003f50:	4618      	mov	r0, r3
 8003f52:	3718      	adds	r7, #24
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bd80      	pop	{r7, pc}
 8003f58:	f010803f 	.word	0xf010803f

08003f5c <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b084      	sub	sp, #16
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d101      	bne.n	8003f6e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e050      	b.n	8004010 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003f74:	b2db      	uxtb	r3, r3
 8003f76:	2b02      	cmp	r3, #2
 8003f78:	d101      	bne.n	8003f7e <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8003f7a:	2302      	movs	r3, #2
 8003f7c:	e048      	b.n	8004010 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	681a      	ldr	r2, [r3, #0]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f022 0201 	bic.w	r2, r2, #1
 8003f8c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	2200      	movs	r2, #0
 8003f94:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	2200      	movs	r2, #0
 8003fac:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	2221      	movs	r2, #33	; 0x21
 8003fbc:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	f000 fad4 	bl	800456c <DMA_CalcBaseAndBitshift>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fcc:	223f      	movs	r2, #63	; 0x3f
 8003fce:	409a      	lsls	r2, r3
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2200      	movs	r2, #0
 8004002:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2200      	movs	r2, #0
 800400a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800400e:	2300      	movs	r3, #0
}
 8004010:	4618      	mov	r0, r3
 8004012:	3710      	adds	r7, #16
 8004014:	46bd      	mov	sp, r7
 8004016:	bd80      	pop	{r7, pc}

08004018 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b086      	sub	sp, #24
 800401c:	af00      	add	r7, sp, #0
 800401e:	60f8      	str	r0, [r7, #12]
 8004020:	60b9      	str	r1, [r7, #8]
 8004022:	607a      	str	r2, [r7, #4]
 8004024:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004026:	2300      	movs	r3, #0
 8004028:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800402e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004036:	2b01      	cmp	r3, #1
 8004038:	d101      	bne.n	800403e <HAL_DMA_Start_IT+0x26>
 800403a:	2302      	movs	r3, #2
 800403c:	e048      	b.n	80040d0 <HAL_DMA_Start_IT+0xb8>
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	2201      	movs	r2, #1
 8004042:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800404c:	b2db      	uxtb	r3, r3
 800404e:	2b01      	cmp	r3, #1
 8004050:	d137      	bne.n	80040c2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	2202      	movs	r2, #2
 8004056:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	2200      	movs	r2, #0
 800405e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	687a      	ldr	r2, [r7, #4]
 8004064:	68b9      	ldr	r1, [r7, #8]
 8004066:	68f8      	ldr	r0, [r7, #12]
 8004068:	f000 fa52 	bl	8004510 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004070:	223f      	movs	r2, #63	; 0x3f
 8004072:	409a      	lsls	r2, r3
 8004074:	693b      	ldr	r3, [r7, #16]
 8004076:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	681a      	ldr	r2, [r3, #0]
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f042 0216 	orr.w	r2, r2, #22
 8004086:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	695a      	ldr	r2, [r3, #20]
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004096:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800409c:	2b00      	cmp	r3, #0
 800409e:	d007      	beq.n	80040b0 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	681a      	ldr	r2, [r3, #0]
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f042 0208 	orr.w	r2, r2, #8
 80040ae:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	681a      	ldr	r2, [r3, #0]
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f042 0201 	orr.w	r2, r2, #1
 80040be:	601a      	str	r2, [r3, #0]
 80040c0:	e005      	b.n	80040ce <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	2200      	movs	r2, #0
 80040c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80040ca:	2302      	movs	r3, #2
 80040cc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80040ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	3718      	adds	r7, #24
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bd80      	pop	{r7, pc}

080040d8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b084      	sub	sp, #16
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040e4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80040e6:	f7ff f9ed 	bl	80034c4 <HAL_GetTick>
 80040ea:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80040f2:	b2db      	uxtb	r3, r3
 80040f4:	2b02      	cmp	r3, #2
 80040f6:	d008      	beq.n	800410a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2280      	movs	r2, #128	; 0x80
 80040fc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2200      	movs	r2, #0
 8004102:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	e052      	b.n	80041b0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	681a      	ldr	r2, [r3, #0]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f022 0216 	bic.w	r2, r2, #22
 8004118:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	695a      	ldr	r2, [r3, #20]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004128:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800412e:	2b00      	cmp	r3, #0
 8004130:	d103      	bne.n	800413a <HAL_DMA_Abort+0x62>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004136:	2b00      	cmp	r3, #0
 8004138:	d007      	beq.n	800414a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	681a      	ldr	r2, [r3, #0]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f022 0208 	bic.w	r2, r2, #8
 8004148:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	681a      	ldr	r2, [r3, #0]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f022 0201 	bic.w	r2, r2, #1
 8004158:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800415a:	e013      	b.n	8004184 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800415c:	f7ff f9b2 	bl	80034c4 <HAL_GetTick>
 8004160:	4602      	mov	r2, r0
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	1ad3      	subs	r3, r2, r3
 8004166:	2b05      	cmp	r3, #5
 8004168:	d90c      	bls.n	8004184 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2220      	movs	r2, #32
 800416e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2203      	movs	r2, #3
 8004174:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2200      	movs	r2, #0
 800417c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8004180:	2303      	movs	r3, #3
 8004182:	e015      	b.n	80041b0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f003 0301 	and.w	r3, r3, #1
 800418e:	2b00      	cmp	r3, #0
 8004190:	d1e4      	bne.n	800415c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004196:	223f      	movs	r2, #63	; 0x3f
 8004198:	409a      	lsls	r2, r3
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2201      	movs	r2, #1
 80041a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2200      	movs	r2, #0
 80041aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 80041ae:	2300      	movs	r3, #0
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	3710      	adds	r7, #16
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bd80      	pop	{r7, pc}

080041b8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b083      	sub	sp, #12
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80041c6:	b2db      	uxtb	r3, r3
 80041c8:	2b02      	cmp	r3, #2
 80041ca:	d004      	beq.n	80041d6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2280      	movs	r2, #128	; 0x80
 80041d0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	e00c      	b.n	80041f0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2205      	movs	r2, #5
 80041da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	681a      	ldr	r2, [r3, #0]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f022 0201 	bic.w	r2, r2, #1
 80041ec:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80041ee:	2300      	movs	r3, #0
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	370c      	adds	r7, #12
 80041f4:	46bd      	mov	sp, r7
 80041f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fa:	4770      	bx	lr

080041fc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b086      	sub	sp, #24
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8004204:	2300      	movs	r3, #0
 8004206:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8004208:	4b92      	ldr	r3, [pc, #584]	; (8004454 <HAL_DMA_IRQHandler+0x258>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a92      	ldr	r2, [pc, #584]	; (8004458 <HAL_DMA_IRQHandler+0x25c>)
 800420e:	fba2 2303 	umull	r2, r3, r2, r3
 8004212:	0a9b      	lsrs	r3, r3, #10
 8004214:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800421a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800421c:	693b      	ldr	r3, [r7, #16]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004226:	2208      	movs	r2, #8
 8004228:	409a      	lsls	r2, r3
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	4013      	ands	r3, r2
 800422e:	2b00      	cmp	r3, #0
 8004230:	d01a      	beq.n	8004268 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f003 0304 	and.w	r3, r3, #4
 800423c:	2b00      	cmp	r3, #0
 800423e:	d013      	beq.n	8004268 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	681a      	ldr	r2, [r3, #0]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f022 0204 	bic.w	r2, r2, #4
 800424e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004254:	2208      	movs	r2, #8
 8004256:	409a      	lsls	r2, r3
 8004258:	693b      	ldr	r3, [r7, #16]
 800425a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004260:	f043 0201 	orr.w	r2, r3, #1
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800426c:	2201      	movs	r2, #1
 800426e:	409a      	lsls	r2, r3
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	4013      	ands	r3, r2
 8004274:	2b00      	cmp	r3, #0
 8004276:	d012      	beq.n	800429e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	695b      	ldr	r3, [r3, #20]
 800427e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004282:	2b00      	cmp	r3, #0
 8004284:	d00b      	beq.n	800429e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800428a:	2201      	movs	r2, #1
 800428c:	409a      	lsls	r2, r3
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004296:	f043 0202 	orr.w	r2, r3, #2
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042a2:	2204      	movs	r2, #4
 80042a4:	409a      	lsls	r2, r3
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	4013      	ands	r3, r2
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d012      	beq.n	80042d4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f003 0302 	and.w	r3, r3, #2
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d00b      	beq.n	80042d4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042c0:	2204      	movs	r2, #4
 80042c2:	409a      	lsls	r2, r3
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042cc:	f043 0204 	orr.w	r2, r3, #4
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042d8:	2210      	movs	r2, #16
 80042da:	409a      	lsls	r2, r3
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	4013      	ands	r3, r2
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d043      	beq.n	800436c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f003 0308 	and.w	r3, r3, #8
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d03c      	beq.n	800436c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042f6:	2210      	movs	r2, #16
 80042f8:	409a      	lsls	r2, r3
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004308:	2b00      	cmp	r3, #0
 800430a:	d018      	beq.n	800433e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004316:	2b00      	cmp	r3, #0
 8004318:	d108      	bne.n	800432c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800431e:	2b00      	cmp	r3, #0
 8004320:	d024      	beq.n	800436c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004326:	6878      	ldr	r0, [r7, #4]
 8004328:	4798      	blx	r3
 800432a:	e01f      	b.n	800436c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004330:	2b00      	cmp	r3, #0
 8004332:	d01b      	beq.n	800436c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004338:	6878      	ldr	r0, [r7, #4]
 800433a:	4798      	blx	r3
 800433c:	e016      	b.n	800436c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004348:	2b00      	cmp	r3, #0
 800434a:	d107      	bne.n	800435c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	681a      	ldr	r2, [r3, #0]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f022 0208 	bic.w	r2, r2, #8
 800435a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004360:	2b00      	cmp	r3, #0
 8004362:	d003      	beq.n	800436c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004368:	6878      	ldr	r0, [r7, #4]
 800436a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004370:	2220      	movs	r2, #32
 8004372:	409a      	lsls	r2, r3
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	4013      	ands	r3, r2
 8004378:	2b00      	cmp	r3, #0
 800437a:	f000 808e 	beq.w	800449a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f003 0310 	and.w	r3, r3, #16
 8004388:	2b00      	cmp	r3, #0
 800438a:	f000 8086 	beq.w	800449a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004392:	2220      	movs	r2, #32
 8004394:	409a      	lsls	r2, r3
 8004396:	693b      	ldr	r3, [r7, #16]
 8004398:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80043a0:	b2db      	uxtb	r3, r3
 80043a2:	2b05      	cmp	r3, #5
 80043a4:	d136      	bne.n	8004414 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	681a      	ldr	r2, [r3, #0]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f022 0216 	bic.w	r2, r2, #22
 80043b4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	695a      	ldr	r2, [r3, #20]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80043c4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d103      	bne.n	80043d6 <HAL_DMA_IRQHandler+0x1da>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d007      	beq.n	80043e6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f022 0208 	bic.w	r2, r2, #8
 80043e4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043ea:	223f      	movs	r2, #63	; 0x3f
 80043ec:	409a      	lsls	r2, r3
 80043ee:	693b      	ldr	r3, [r7, #16]
 80043f0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2201      	movs	r2, #1
 80043f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2200      	movs	r2, #0
 80043fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004406:	2b00      	cmp	r3, #0
 8004408:	d07d      	beq.n	8004506 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800440e:	6878      	ldr	r0, [r7, #4]
 8004410:	4798      	blx	r3
        }
        return;
 8004412:	e078      	b.n	8004506 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800441e:	2b00      	cmp	r3, #0
 8004420:	d01c      	beq.n	800445c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800442c:	2b00      	cmp	r3, #0
 800442e:	d108      	bne.n	8004442 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004434:	2b00      	cmp	r3, #0
 8004436:	d030      	beq.n	800449a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800443c:	6878      	ldr	r0, [r7, #4]
 800443e:	4798      	blx	r3
 8004440:	e02b      	b.n	800449a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004446:	2b00      	cmp	r3, #0
 8004448:	d027      	beq.n	800449a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	4798      	blx	r3
 8004452:	e022      	b.n	800449a <HAL_DMA_IRQHandler+0x29e>
 8004454:	20000018 	.word	0x20000018
 8004458:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004466:	2b00      	cmp	r3, #0
 8004468:	d10f      	bne.n	800448a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	681a      	ldr	r2, [r3, #0]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f022 0210 	bic.w	r2, r2, #16
 8004478:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2201      	movs	r2, #1
 800447e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2200      	movs	r2, #0
 8004486:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800448e:	2b00      	cmp	r3, #0
 8004490:	d003      	beq.n	800449a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004496:	6878      	ldr	r0, [r7, #4]
 8004498:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d032      	beq.n	8004508 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044a6:	f003 0301 	and.w	r3, r3, #1
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d022      	beq.n	80044f4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2205      	movs	r2, #5
 80044b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	681a      	ldr	r2, [r3, #0]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f022 0201 	bic.w	r2, r2, #1
 80044c4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	3301      	adds	r3, #1
 80044ca:	60bb      	str	r3, [r7, #8]
 80044cc:	697a      	ldr	r2, [r7, #20]
 80044ce:	429a      	cmp	r2, r3
 80044d0:	d307      	bcc.n	80044e2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f003 0301 	and.w	r3, r3, #1
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d1f2      	bne.n	80044c6 <HAL_DMA_IRQHandler+0x2ca>
 80044e0:	e000      	b.n	80044e4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80044e2:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2201      	movs	r2, #1
 80044e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2200      	movs	r2, #0
 80044f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d005      	beq.n	8004508 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004500:	6878      	ldr	r0, [r7, #4]
 8004502:	4798      	blx	r3
 8004504:	e000      	b.n	8004508 <HAL_DMA_IRQHandler+0x30c>
        return;
 8004506:	bf00      	nop
    }
  }
}
 8004508:	3718      	adds	r7, #24
 800450a:	46bd      	mov	sp, r7
 800450c:	bd80      	pop	{r7, pc}
 800450e:	bf00      	nop

08004510 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004510:	b480      	push	{r7}
 8004512:	b085      	sub	sp, #20
 8004514:	af00      	add	r7, sp, #0
 8004516:	60f8      	str	r0, [r7, #12]
 8004518:	60b9      	str	r1, [r7, #8]
 800451a:	607a      	str	r2, [r7, #4]
 800451c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	681a      	ldr	r2, [r3, #0]
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800452c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	683a      	ldr	r2, [r7, #0]
 8004534:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	689b      	ldr	r3, [r3, #8]
 800453a:	2b40      	cmp	r3, #64	; 0x40
 800453c:	d108      	bne.n	8004550 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	687a      	ldr	r2, [r7, #4]
 8004544:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	68ba      	ldr	r2, [r7, #8]
 800454c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800454e:	e007      	b.n	8004560 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	68ba      	ldr	r2, [r7, #8]
 8004556:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	687a      	ldr	r2, [r7, #4]
 800455e:	60da      	str	r2, [r3, #12]
}
 8004560:	bf00      	nop
 8004562:	3714      	adds	r7, #20
 8004564:	46bd      	mov	sp, r7
 8004566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456a:	4770      	bx	lr

0800456c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800456c:	b480      	push	{r7}
 800456e:	b085      	sub	sp, #20
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	b2db      	uxtb	r3, r3
 800457a:	3b10      	subs	r3, #16
 800457c:	4a13      	ldr	r2, [pc, #76]	; (80045cc <DMA_CalcBaseAndBitshift+0x60>)
 800457e:	fba2 2303 	umull	r2, r3, r2, r3
 8004582:	091b      	lsrs	r3, r3, #4
 8004584:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004586:	4a12      	ldr	r2, [pc, #72]	; (80045d0 <DMA_CalcBaseAndBitshift+0x64>)
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	4413      	add	r3, r2
 800458c:	781b      	ldrb	r3, [r3, #0]
 800458e:	461a      	mov	r2, r3
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	2b03      	cmp	r3, #3
 8004598:	d908      	bls.n	80045ac <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	461a      	mov	r2, r3
 80045a0:	4b0c      	ldr	r3, [pc, #48]	; (80045d4 <DMA_CalcBaseAndBitshift+0x68>)
 80045a2:	4013      	ands	r3, r2
 80045a4:	1d1a      	adds	r2, r3, #4
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	659a      	str	r2, [r3, #88]	; 0x58
 80045aa:	e006      	b.n	80045ba <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	461a      	mov	r2, r3
 80045b2:	4b08      	ldr	r3, [pc, #32]	; (80045d4 <DMA_CalcBaseAndBitshift+0x68>)
 80045b4:	4013      	ands	r3, r2
 80045b6:	687a      	ldr	r2, [r7, #4]
 80045b8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80045be:	4618      	mov	r0, r3
 80045c0:	3714      	adds	r7, #20
 80045c2:	46bd      	mov	sp, r7
 80045c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c8:	4770      	bx	lr
 80045ca:	bf00      	nop
 80045cc:	aaaaaaab 	.word	0xaaaaaaab
 80045d0:	080093e4 	.word	0x080093e4
 80045d4:	fffffc00 	.word	0xfffffc00

080045d8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80045d8:	b480      	push	{r7}
 80045da:	b085      	sub	sp, #20
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80045e0:	2300      	movs	r3, #0
 80045e2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045e8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	699b      	ldr	r3, [r3, #24]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d11f      	bne.n	8004632 <DMA_CheckFifoParam+0x5a>
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	2b03      	cmp	r3, #3
 80045f6:	d856      	bhi.n	80046a6 <DMA_CheckFifoParam+0xce>
 80045f8:	a201      	add	r2, pc, #4	; (adr r2, 8004600 <DMA_CheckFifoParam+0x28>)
 80045fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045fe:	bf00      	nop
 8004600:	08004611 	.word	0x08004611
 8004604:	08004623 	.word	0x08004623
 8004608:	08004611 	.word	0x08004611
 800460c:	080046a7 	.word	0x080046a7
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004614:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004618:	2b00      	cmp	r3, #0
 800461a:	d046      	beq.n	80046aa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800461c:	2301      	movs	r3, #1
 800461e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004620:	e043      	b.n	80046aa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004626:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800462a:	d140      	bne.n	80046ae <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800462c:	2301      	movs	r3, #1
 800462e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004630:	e03d      	b.n	80046ae <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	699b      	ldr	r3, [r3, #24]
 8004636:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800463a:	d121      	bne.n	8004680 <DMA_CheckFifoParam+0xa8>
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	2b03      	cmp	r3, #3
 8004640:	d837      	bhi.n	80046b2 <DMA_CheckFifoParam+0xda>
 8004642:	a201      	add	r2, pc, #4	; (adr r2, 8004648 <DMA_CheckFifoParam+0x70>)
 8004644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004648:	08004659 	.word	0x08004659
 800464c:	0800465f 	.word	0x0800465f
 8004650:	08004659 	.word	0x08004659
 8004654:	08004671 	.word	0x08004671
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004658:	2301      	movs	r3, #1
 800465a:	73fb      	strb	r3, [r7, #15]
      break;
 800465c:	e030      	b.n	80046c0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004662:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004666:	2b00      	cmp	r3, #0
 8004668:	d025      	beq.n	80046b6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800466e:	e022      	b.n	80046b6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004674:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004678:	d11f      	bne.n	80046ba <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800467e:	e01c      	b.n	80046ba <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	2b02      	cmp	r3, #2
 8004684:	d903      	bls.n	800468e <DMA_CheckFifoParam+0xb6>
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	2b03      	cmp	r3, #3
 800468a:	d003      	beq.n	8004694 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800468c:	e018      	b.n	80046c0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800468e:	2301      	movs	r3, #1
 8004690:	73fb      	strb	r3, [r7, #15]
      break;
 8004692:	e015      	b.n	80046c0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004698:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800469c:	2b00      	cmp	r3, #0
 800469e:	d00e      	beq.n	80046be <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80046a0:	2301      	movs	r3, #1
 80046a2:	73fb      	strb	r3, [r7, #15]
      break;
 80046a4:	e00b      	b.n	80046be <DMA_CheckFifoParam+0xe6>
      break;
 80046a6:	bf00      	nop
 80046a8:	e00a      	b.n	80046c0 <DMA_CheckFifoParam+0xe8>
      break;
 80046aa:	bf00      	nop
 80046ac:	e008      	b.n	80046c0 <DMA_CheckFifoParam+0xe8>
      break;
 80046ae:	bf00      	nop
 80046b0:	e006      	b.n	80046c0 <DMA_CheckFifoParam+0xe8>
      break;
 80046b2:	bf00      	nop
 80046b4:	e004      	b.n	80046c0 <DMA_CheckFifoParam+0xe8>
      break;
 80046b6:	bf00      	nop
 80046b8:	e002      	b.n	80046c0 <DMA_CheckFifoParam+0xe8>
      break;   
 80046ba:	bf00      	nop
 80046bc:	e000      	b.n	80046c0 <DMA_CheckFifoParam+0xe8>
      break;
 80046be:	bf00      	nop
    }
  } 
  
  return status; 
 80046c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80046c2:	4618      	mov	r0, r3
 80046c4:	3714      	adds	r7, #20
 80046c6:	46bd      	mov	sp, r7
 80046c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046cc:	4770      	bx	lr
 80046ce:	bf00      	nop

080046d0 <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress The second memory Buffer address in case of multi buffer Transfer  
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b086      	sub	sp, #24
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	60f8      	str	r0, [r7, #12]
 80046d8:	60b9      	str	r1, [r7, #8]
 80046da:	607a      	str	r2, [r7, #4]
 80046dc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80046de:	2300      	movs	r3, #0
 80046e0:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Memory-to-memory transfer not supported in double buffering mode */
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	689b      	ldr	r3, [r3, #8]
 80046e6:	2b80      	cmp	r3, #128	; 0x80
 80046e8:	d106      	bne.n	80046f8 <HAL_DMAEx_MultiBufferStart_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80046f0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80046f2:	2301      	movs	r3, #1
 80046f4:	f001 b901 	b.w	80058fa <HAL_DMAEx_MultiBufferStart_IT+0x122a>
  }
  
  /* Process locked */
  __HAL_LOCK(hdma);
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80046fe:	2b01      	cmp	r3, #1
 8004700:	d102      	bne.n	8004708 <HAL_DMAEx_MultiBufferStart_IT+0x38>
 8004702:	2302      	movs	r3, #2
 8004704:	f001 b8f9 	b.w	80058fa <HAL_DMAEx_MultiBufferStart_IT+0x122a>
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	2201      	movs	r2, #1
 800470c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004716:	b2db      	uxtb	r3, r3
 8004718:	2b01      	cmp	r3, #1
 800471a:	f041 80e7 	bne.w	80058ec <HAL_DMAEx_MultiBufferStart_IT+0x121c>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	2202      	movs	r2, #2
 8004722:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	2200      	movs	r2, #0
 800472a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Enable the Double buffer mode */
    hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	681a      	ldr	r2, [r3, #0]
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800473a:	601a      	str	r2, [r3, #0]
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M1AR = SecondMemAddress;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	683a      	ldr	r2, [r7, #0]
 8004742:	611a      	str	r2, [r3, #16]
    
    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength); 
 8004744:	6a3b      	ldr	r3, [r7, #32]
 8004746:	687a      	ldr	r2, [r7, #4]
 8004748:	68b9      	ldr	r1, [r7, #8]
 800474a:	68f8      	ldr	r0, [r7, #12]
 800474c:	f001 f910 	bl	8005970 <DMA_MultiBufferSetConfig>
    
    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	461a      	mov	r2, r3
 8004756:	4b99      	ldr	r3, [pc, #612]	; (80049bc <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 8004758:	429a      	cmp	r2, r3
 800475a:	d960      	bls.n	800481e <HAL_DMAEx_MultiBufferStart_IT+0x14e>
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a97      	ldr	r2, [pc, #604]	; (80049c0 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d057      	beq.n	8004816 <HAL_DMAEx_MultiBufferStart_IT+0x146>
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a96      	ldr	r2, [pc, #600]	; (80049c4 <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d050      	beq.n	8004812 <HAL_DMAEx_MultiBufferStart_IT+0x142>
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a94      	ldr	r2, [pc, #592]	; (80049c8 <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d049      	beq.n	800480e <HAL_DMAEx_MultiBufferStart_IT+0x13e>
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a93      	ldr	r2, [pc, #588]	; (80049cc <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d042      	beq.n	800480a <HAL_DMAEx_MultiBufferStart_IT+0x13a>
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a91      	ldr	r2, [pc, #580]	; (80049d0 <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d03a      	beq.n	8004804 <HAL_DMAEx_MultiBufferStart_IT+0x134>
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a90      	ldr	r2, [pc, #576]	; (80049d4 <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d032      	beq.n	80047fe <HAL_DMAEx_MultiBufferStart_IT+0x12e>
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a8e      	ldr	r2, [pc, #568]	; (80049d8 <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d02a      	beq.n	80047f8 <HAL_DMAEx_MultiBufferStart_IT+0x128>
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a8d      	ldr	r2, [pc, #564]	; (80049dc <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d022      	beq.n	80047f2 <HAL_DMAEx_MultiBufferStart_IT+0x122>
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a8b      	ldr	r2, [pc, #556]	; (80049e0 <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d01a      	beq.n	80047ec <HAL_DMAEx_MultiBufferStart_IT+0x11c>
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a8a      	ldr	r2, [pc, #552]	; (80049e4 <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d012      	beq.n	80047e6 <HAL_DMAEx_MultiBufferStart_IT+0x116>
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a88      	ldr	r2, [pc, #544]	; (80049e8 <HAL_DMAEx_MultiBufferStart_IT+0x318>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d00a      	beq.n	80047e0 <HAL_DMAEx_MultiBufferStart_IT+0x110>
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a87      	ldr	r2, [pc, #540]	; (80049ec <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d102      	bne.n	80047da <HAL_DMAEx_MultiBufferStart_IT+0x10a>
 80047d4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80047d8:	e01e      	b.n	8004818 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 80047da:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80047de:	e01b      	b.n	8004818 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 80047e0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80047e4:	e018      	b.n	8004818 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 80047e6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80047ea:	e015      	b.n	8004818 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 80047ec:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80047f0:	e012      	b.n	8004818 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 80047f2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80047f6:	e00f      	b.n	8004818 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 80047f8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80047fc:	e00c      	b.n	8004818 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 80047fe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004802:	e009      	b.n	8004818 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 8004804:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004808:	e006      	b.n	8004818 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 800480a:	2320      	movs	r3, #32
 800480c:	e004      	b.n	8004818 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 800480e:	2320      	movs	r3, #32
 8004810:	e002      	b.n	8004818 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 8004812:	2320      	movs	r3, #32
 8004814:	e000      	b.n	8004818 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 8004816:	2320      	movs	r3, #32
 8004818:	4a75      	ldr	r2, [pc, #468]	; (80049f0 <HAL_DMAEx_MultiBufferStart_IT+0x320>)
 800481a:	60d3      	str	r3, [r2, #12]
 800481c:	e150      	b.n	8004ac0 <HAL_DMAEx_MultiBufferStart_IT+0x3f0>
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	461a      	mov	r2, r3
 8004824:	4b73      	ldr	r3, [pc, #460]	; (80049f4 <HAL_DMAEx_MultiBufferStart_IT+0x324>)
 8004826:	429a      	cmp	r2, r3
 8004828:	d960      	bls.n	80048ec <HAL_DMAEx_MultiBufferStart_IT+0x21c>
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a64      	ldr	r2, [pc, #400]	; (80049c0 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d057      	beq.n	80048e4 <HAL_DMAEx_MultiBufferStart_IT+0x214>
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a62      	ldr	r2, [pc, #392]	; (80049c4 <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d050      	beq.n	80048e0 <HAL_DMAEx_MultiBufferStart_IT+0x210>
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a61      	ldr	r2, [pc, #388]	; (80049c8 <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d049      	beq.n	80048dc <HAL_DMAEx_MultiBufferStart_IT+0x20c>
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a5f      	ldr	r2, [pc, #380]	; (80049cc <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d042      	beq.n	80048d8 <HAL_DMAEx_MultiBufferStart_IT+0x208>
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a5e      	ldr	r2, [pc, #376]	; (80049d0 <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d03a      	beq.n	80048d2 <HAL_DMAEx_MultiBufferStart_IT+0x202>
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a5c      	ldr	r2, [pc, #368]	; (80049d4 <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d032      	beq.n	80048cc <HAL_DMAEx_MultiBufferStart_IT+0x1fc>
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a5b      	ldr	r2, [pc, #364]	; (80049d8 <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d02a      	beq.n	80048c6 <HAL_DMAEx_MultiBufferStart_IT+0x1f6>
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a59      	ldr	r2, [pc, #356]	; (80049dc <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d022      	beq.n	80048c0 <HAL_DMAEx_MultiBufferStart_IT+0x1f0>
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4a58      	ldr	r2, [pc, #352]	; (80049e0 <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d01a      	beq.n	80048ba <HAL_DMAEx_MultiBufferStart_IT+0x1ea>
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4a56      	ldr	r2, [pc, #344]	; (80049e4 <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d012      	beq.n	80048b4 <HAL_DMAEx_MultiBufferStart_IT+0x1e4>
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4a55      	ldr	r2, [pc, #340]	; (80049e8 <HAL_DMAEx_MultiBufferStart_IT+0x318>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d00a      	beq.n	80048ae <HAL_DMAEx_MultiBufferStart_IT+0x1de>
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a53      	ldr	r2, [pc, #332]	; (80049ec <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d102      	bne.n	80048a8 <HAL_DMAEx_MultiBufferStart_IT+0x1d8>
 80048a2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80048a6:	e01e      	b.n	80048e6 <HAL_DMAEx_MultiBufferStart_IT+0x216>
 80048a8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80048ac:	e01b      	b.n	80048e6 <HAL_DMAEx_MultiBufferStart_IT+0x216>
 80048ae:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80048b2:	e018      	b.n	80048e6 <HAL_DMAEx_MultiBufferStart_IT+0x216>
 80048b4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80048b8:	e015      	b.n	80048e6 <HAL_DMAEx_MultiBufferStart_IT+0x216>
 80048ba:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80048be:	e012      	b.n	80048e6 <HAL_DMAEx_MultiBufferStart_IT+0x216>
 80048c0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80048c4:	e00f      	b.n	80048e6 <HAL_DMAEx_MultiBufferStart_IT+0x216>
 80048c6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80048ca:	e00c      	b.n	80048e6 <HAL_DMAEx_MultiBufferStart_IT+0x216>
 80048cc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80048d0:	e009      	b.n	80048e6 <HAL_DMAEx_MultiBufferStart_IT+0x216>
 80048d2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80048d6:	e006      	b.n	80048e6 <HAL_DMAEx_MultiBufferStart_IT+0x216>
 80048d8:	2320      	movs	r3, #32
 80048da:	e004      	b.n	80048e6 <HAL_DMAEx_MultiBufferStart_IT+0x216>
 80048dc:	2320      	movs	r3, #32
 80048de:	e002      	b.n	80048e6 <HAL_DMAEx_MultiBufferStart_IT+0x216>
 80048e0:	2320      	movs	r3, #32
 80048e2:	e000      	b.n	80048e6 <HAL_DMAEx_MultiBufferStart_IT+0x216>
 80048e4:	2320      	movs	r3, #32
 80048e6:	4a42      	ldr	r2, [pc, #264]	; (80049f0 <HAL_DMAEx_MultiBufferStart_IT+0x320>)
 80048e8:	6093      	str	r3, [r2, #8]
 80048ea:	e0e9      	b.n	8004ac0 <HAL_DMAEx_MultiBufferStart_IT+0x3f0>
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	461a      	mov	r2, r3
 80048f2:	4b41      	ldr	r3, [pc, #260]	; (80049f8 <HAL_DMAEx_MultiBufferStart_IT+0x328>)
 80048f4:	429a      	cmp	r2, r3
 80048f6:	f240 8083 	bls.w	8004a00 <HAL_DMAEx_MultiBufferStart_IT+0x330>
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a30      	ldr	r2, [pc, #192]	; (80049c0 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d057      	beq.n	80049b4 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a2e      	ldr	r2, [pc, #184]	; (80049c4 <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d050      	beq.n	80049b0 <HAL_DMAEx_MultiBufferStart_IT+0x2e0>
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a2d      	ldr	r2, [pc, #180]	; (80049c8 <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d049      	beq.n	80049ac <HAL_DMAEx_MultiBufferStart_IT+0x2dc>
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a2b      	ldr	r2, [pc, #172]	; (80049cc <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d042      	beq.n	80049a8 <HAL_DMAEx_MultiBufferStart_IT+0x2d8>
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a2a      	ldr	r2, [pc, #168]	; (80049d0 <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d03a      	beq.n	80049a2 <HAL_DMAEx_MultiBufferStart_IT+0x2d2>
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a28      	ldr	r2, [pc, #160]	; (80049d4 <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d032      	beq.n	800499c <HAL_DMAEx_MultiBufferStart_IT+0x2cc>
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a27      	ldr	r2, [pc, #156]	; (80049d8 <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d02a      	beq.n	8004996 <HAL_DMAEx_MultiBufferStart_IT+0x2c6>
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a25      	ldr	r2, [pc, #148]	; (80049dc <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d022      	beq.n	8004990 <HAL_DMAEx_MultiBufferStart_IT+0x2c0>
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a24      	ldr	r2, [pc, #144]	; (80049e0 <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d01a      	beq.n	800498a <HAL_DMAEx_MultiBufferStart_IT+0x2ba>
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a22      	ldr	r2, [pc, #136]	; (80049e4 <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d012      	beq.n	8004984 <HAL_DMAEx_MultiBufferStart_IT+0x2b4>
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a21      	ldr	r2, [pc, #132]	; (80049e8 <HAL_DMAEx_MultiBufferStart_IT+0x318>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d00a      	beq.n	800497e <HAL_DMAEx_MultiBufferStart_IT+0x2ae>
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a1f      	ldr	r2, [pc, #124]	; (80049ec <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d102      	bne.n	8004978 <HAL_DMAEx_MultiBufferStart_IT+0x2a8>
 8004972:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004976:	e01e      	b.n	80049b6 <HAL_DMAEx_MultiBufferStart_IT+0x2e6>
 8004978:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800497c:	e01b      	b.n	80049b6 <HAL_DMAEx_MultiBufferStart_IT+0x2e6>
 800497e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004982:	e018      	b.n	80049b6 <HAL_DMAEx_MultiBufferStart_IT+0x2e6>
 8004984:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004988:	e015      	b.n	80049b6 <HAL_DMAEx_MultiBufferStart_IT+0x2e6>
 800498a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800498e:	e012      	b.n	80049b6 <HAL_DMAEx_MultiBufferStart_IT+0x2e6>
 8004990:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004994:	e00f      	b.n	80049b6 <HAL_DMAEx_MultiBufferStart_IT+0x2e6>
 8004996:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800499a:	e00c      	b.n	80049b6 <HAL_DMAEx_MultiBufferStart_IT+0x2e6>
 800499c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80049a0:	e009      	b.n	80049b6 <HAL_DMAEx_MultiBufferStart_IT+0x2e6>
 80049a2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80049a6:	e006      	b.n	80049b6 <HAL_DMAEx_MultiBufferStart_IT+0x2e6>
 80049a8:	2320      	movs	r3, #32
 80049aa:	e004      	b.n	80049b6 <HAL_DMAEx_MultiBufferStart_IT+0x2e6>
 80049ac:	2320      	movs	r3, #32
 80049ae:	e002      	b.n	80049b6 <HAL_DMAEx_MultiBufferStart_IT+0x2e6>
 80049b0:	2320      	movs	r3, #32
 80049b2:	e000      	b.n	80049b6 <HAL_DMAEx_MultiBufferStart_IT+0x2e6>
 80049b4:	2320      	movs	r3, #32
 80049b6:	4a11      	ldr	r2, [pc, #68]	; (80049fc <HAL_DMAEx_MultiBufferStart_IT+0x32c>)
 80049b8:	60d3      	str	r3, [r2, #12]
 80049ba:	e081      	b.n	8004ac0 <HAL_DMAEx_MultiBufferStart_IT+0x3f0>
 80049bc:	40026458 	.word	0x40026458
 80049c0:	40026010 	.word	0x40026010
 80049c4:	40026410 	.word	0x40026410
 80049c8:	40026070 	.word	0x40026070
 80049cc:	40026470 	.word	0x40026470
 80049d0:	40026028 	.word	0x40026028
 80049d4:	40026428 	.word	0x40026428
 80049d8:	40026088 	.word	0x40026088
 80049dc:	40026488 	.word	0x40026488
 80049e0:	40026040 	.word	0x40026040
 80049e4:	40026440 	.word	0x40026440
 80049e8:	400260a0 	.word	0x400260a0
 80049ec:	400264a0 	.word	0x400264a0
 80049f0:	40026400 	.word	0x40026400
 80049f4:	400260b8 	.word	0x400260b8
 80049f8:	40026058 	.word	0x40026058
 80049fc:	40026000 	.word	0x40026000
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a96      	ldr	r2, [pc, #600]	; (8004c60 <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d057      	beq.n	8004aba <HAL_DMAEx_MultiBufferStart_IT+0x3ea>
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4a95      	ldr	r2, [pc, #596]	; (8004c64 <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d050      	beq.n	8004ab6 <HAL_DMAEx_MultiBufferStart_IT+0x3e6>
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4a93      	ldr	r2, [pc, #588]	; (8004c68 <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d049      	beq.n	8004ab2 <HAL_DMAEx_MultiBufferStart_IT+0x3e2>
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4a92      	ldr	r2, [pc, #584]	; (8004c6c <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d042      	beq.n	8004aae <HAL_DMAEx_MultiBufferStart_IT+0x3de>
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a90      	ldr	r2, [pc, #576]	; (8004c70 <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d03a      	beq.n	8004aa8 <HAL_DMAEx_MultiBufferStart_IT+0x3d8>
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4a8f      	ldr	r2, [pc, #572]	; (8004c74 <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d032      	beq.n	8004aa2 <HAL_DMAEx_MultiBufferStart_IT+0x3d2>
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a8d      	ldr	r2, [pc, #564]	; (8004c78 <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d02a      	beq.n	8004a9c <HAL_DMAEx_MultiBufferStart_IT+0x3cc>
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a8c      	ldr	r2, [pc, #560]	; (8004c7c <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d022      	beq.n	8004a96 <HAL_DMAEx_MultiBufferStart_IT+0x3c6>
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a8a      	ldr	r2, [pc, #552]	; (8004c80 <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d01a      	beq.n	8004a90 <HAL_DMAEx_MultiBufferStart_IT+0x3c0>
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4a89      	ldr	r2, [pc, #548]	; (8004c84 <HAL_DMAEx_MultiBufferStart_IT+0x5b4>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d012      	beq.n	8004a8a <HAL_DMAEx_MultiBufferStart_IT+0x3ba>
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a87      	ldr	r2, [pc, #540]	; (8004c88 <HAL_DMAEx_MultiBufferStart_IT+0x5b8>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d00a      	beq.n	8004a84 <HAL_DMAEx_MultiBufferStart_IT+0x3b4>
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4a86      	ldr	r2, [pc, #536]	; (8004c8c <HAL_DMAEx_MultiBufferStart_IT+0x5bc>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d102      	bne.n	8004a7e <HAL_DMAEx_MultiBufferStart_IT+0x3ae>
 8004a78:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004a7c:	e01e      	b.n	8004abc <HAL_DMAEx_MultiBufferStart_IT+0x3ec>
 8004a7e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004a82:	e01b      	b.n	8004abc <HAL_DMAEx_MultiBufferStart_IT+0x3ec>
 8004a84:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004a88:	e018      	b.n	8004abc <HAL_DMAEx_MultiBufferStart_IT+0x3ec>
 8004a8a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004a8e:	e015      	b.n	8004abc <HAL_DMAEx_MultiBufferStart_IT+0x3ec>
 8004a90:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004a94:	e012      	b.n	8004abc <HAL_DMAEx_MultiBufferStart_IT+0x3ec>
 8004a96:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004a9a:	e00f      	b.n	8004abc <HAL_DMAEx_MultiBufferStart_IT+0x3ec>
 8004a9c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004aa0:	e00c      	b.n	8004abc <HAL_DMAEx_MultiBufferStart_IT+0x3ec>
 8004aa2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004aa6:	e009      	b.n	8004abc <HAL_DMAEx_MultiBufferStart_IT+0x3ec>
 8004aa8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004aac:	e006      	b.n	8004abc <HAL_DMAEx_MultiBufferStart_IT+0x3ec>
 8004aae:	2320      	movs	r3, #32
 8004ab0:	e004      	b.n	8004abc <HAL_DMAEx_MultiBufferStart_IT+0x3ec>
 8004ab2:	2320      	movs	r3, #32
 8004ab4:	e002      	b.n	8004abc <HAL_DMAEx_MultiBufferStart_IT+0x3ec>
 8004ab6:	2320      	movs	r3, #32
 8004ab8:	e000      	b.n	8004abc <HAL_DMAEx_MultiBufferStart_IT+0x3ec>
 8004aba:	2320      	movs	r3, #32
 8004abc:	4a74      	ldr	r2, [pc, #464]	; (8004c90 <HAL_DMAEx_MultiBufferStart_IT+0x5c0>)
 8004abe:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	461a      	mov	r2, r3
 8004ac6:	4b73      	ldr	r3, [pc, #460]	; (8004c94 <HAL_DMAEx_MultiBufferStart_IT+0x5c4>)
 8004ac8:	429a      	cmp	r2, r3
 8004aca:	d960      	bls.n	8004b8e <HAL_DMAEx_MultiBufferStart_IT+0x4be>
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4a63      	ldr	r2, [pc, #396]	; (8004c60 <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d057      	beq.n	8004b86 <HAL_DMAEx_MultiBufferStart_IT+0x4b6>
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4a62      	ldr	r2, [pc, #392]	; (8004c64 <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d050      	beq.n	8004b82 <HAL_DMAEx_MultiBufferStart_IT+0x4b2>
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a60      	ldr	r2, [pc, #384]	; (8004c68 <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d049      	beq.n	8004b7e <HAL_DMAEx_MultiBufferStart_IT+0x4ae>
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4a5f      	ldr	r2, [pc, #380]	; (8004c6c <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d042      	beq.n	8004b7a <HAL_DMAEx_MultiBufferStart_IT+0x4aa>
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a5d      	ldr	r2, [pc, #372]	; (8004c70 <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d03a      	beq.n	8004b74 <HAL_DMAEx_MultiBufferStart_IT+0x4a4>
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4a5c      	ldr	r2, [pc, #368]	; (8004c74 <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d032      	beq.n	8004b6e <HAL_DMAEx_MultiBufferStart_IT+0x49e>
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4a5a      	ldr	r2, [pc, #360]	; (8004c78 <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d02a      	beq.n	8004b68 <HAL_DMAEx_MultiBufferStart_IT+0x498>
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4a59      	ldr	r2, [pc, #356]	; (8004c7c <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d022      	beq.n	8004b62 <HAL_DMAEx_MultiBufferStart_IT+0x492>
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4a57      	ldr	r2, [pc, #348]	; (8004c80 <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d01a      	beq.n	8004b5c <HAL_DMAEx_MultiBufferStart_IT+0x48c>
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4a56      	ldr	r2, [pc, #344]	; (8004c84 <HAL_DMAEx_MultiBufferStart_IT+0x5b4>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d012      	beq.n	8004b56 <HAL_DMAEx_MultiBufferStart_IT+0x486>
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4a54      	ldr	r2, [pc, #336]	; (8004c88 <HAL_DMAEx_MultiBufferStart_IT+0x5b8>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d00a      	beq.n	8004b50 <HAL_DMAEx_MultiBufferStart_IT+0x480>
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4a53      	ldr	r2, [pc, #332]	; (8004c8c <HAL_DMAEx_MultiBufferStart_IT+0x5bc>)
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d102      	bne.n	8004b4a <HAL_DMAEx_MultiBufferStart_IT+0x47a>
 8004b44:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004b48:	e01e      	b.n	8004b88 <HAL_DMAEx_MultiBufferStart_IT+0x4b8>
 8004b4a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004b4e:	e01b      	b.n	8004b88 <HAL_DMAEx_MultiBufferStart_IT+0x4b8>
 8004b50:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004b54:	e018      	b.n	8004b88 <HAL_DMAEx_MultiBufferStart_IT+0x4b8>
 8004b56:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004b5a:	e015      	b.n	8004b88 <HAL_DMAEx_MultiBufferStart_IT+0x4b8>
 8004b5c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004b60:	e012      	b.n	8004b88 <HAL_DMAEx_MultiBufferStart_IT+0x4b8>
 8004b62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b66:	e00f      	b.n	8004b88 <HAL_DMAEx_MultiBufferStart_IT+0x4b8>
 8004b68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b6c:	e00c      	b.n	8004b88 <HAL_DMAEx_MultiBufferStart_IT+0x4b8>
 8004b6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b72:	e009      	b.n	8004b88 <HAL_DMAEx_MultiBufferStart_IT+0x4b8>
 8004b74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b78:	e006      	b.n	8004b88 <HAL_DMAEx_MultiBufferStart_IT+0x4b8>
 8004b7a:	2310      	movs	r3, #16
 8004b7c:	e004      	b.n	8004b88 <HAL_DMAEx_MultiBufferStart_IT+0x4b8>
 8004b7e:	2310      	movs	r3, #16
 8004b80:	e002      	b.n	8004b88 <HAL_DMAEx_MultiBufferStart_IT+0x4b8>
 8004b82:	2310      	movs	r3, #16
 8004b84:	e000      	b.n	8004b88 <HAL_DMAEx_MultiBufferStart_IT+0x4b8>
 8004b86:	2310      	movs	r3, #16
 8004b88:	4a43      	ldr	r2, [pc, #268]	; (8004c98 <HAL_DMAEx_MultiBufferStart_IT+0x5c8>)
 8004b8a:	60d3      	str	r3, [r2, #12]
 8004b8c:	e14f      	b.n	8004e2e <HAL_DMAEx_MultiBufferStart_IT+0x75e>
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	461a      	mov	r2, r3
 8004b94:	4b41      	ldr	r3, [pc, #260]	; (8004c9c <HAL_DMAEx_MultiBufferStart_IT+0x5cc>)
 8004b96:	429a      	cmp	r2, r3
 8004b98:	f240 8082 	bls.w	8004ca0 <HAL_DMAEx_MultiBufferStart_IT+0x5d0>
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a2f      	ldr	r2, [pc, #188]	; (8004c60 <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d057      	beq.n	8004c56 <HAL_DMAEx_MultiBufferStart_IT+0x586>
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a2e      	ldr	r2, [pc, #184]	; (8004c64 <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d050      	beq.n	8004c52 <HAL_DMAEx_MultiBufferStart_IT+0x582>
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a2c      	ldr	r2, [pc, #176]	; (8004c68 <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d049      	beq.n	8004c4e <HAL_DMAEx_MultiBufferStart_IT+0x57e>
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a2b      	ldr	r2, [pc, #172]	; (8004c6c <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d042      	beq.n	8004c4a <HAL_DMAEx_MultiBufferStart_IT+0x57a>
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a29      	ldr	r2, [pc, #164]	; (8004c70 <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d03a      	beq.n	8004c44 <HAL_DMAEx_MultiBufferStart_IT+0x574>
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a28      	ldr	r2, [pc, #160]	; (8004c74 <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d032      	beq.n	8004c3e <HAL_DMAEx_MultiBufferStart_IT+0x56e>
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a26      	ldr	r2, [pc, #152]	; (8004c78 <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d02a      	beq.n	8004c38 <HAL_DMAEx_MultiBufferStart_IT+0x568>
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a25      	ldr	r2, [pc, #148]	; (8004c7c <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d022      	beq.n	8004c32 <HAL_DMAEx_MultiBufferStart_IT+0x562>
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4a23      	ldr	r2, [pc, #140]	; (8004c80 <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d01a      	beq.n	8004c2c <HAL_DMAEx_MultiBufferStart_IT+0x55c>
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a22      	ldr	r2, [pc, #136]	; (8004c84 <HAL_DMAEx_MultiBufferStart_IT+0x5b4>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d012      	beq.n	8004c26 <HAL_DMAEx_MultiBufferStart_IT+0x556>
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a20      	ldr	r2, [pc, #128]	; (8004c88 <HAL_DMAEx_MultiBufferStart_IT+0x5b8>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d00a      	beq.n	8004c20 <HAL_DMAEx_MultiBufferStart_IT+0x550>
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4a1f      	ldr	r2, [pc, #124]	; (8004c8c <HAL_DMAEx_MultiBufferStart_IT+0x5bc>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d102      	bne.n	8004c1a <HAL_DMAEx_MultiBufferStart_IT+0x54a>
 8004c14:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004c18:	e01e      	b.n	8004c58 <HAL_DMAEx_MultiBufferStart_IT+0x588>
 8004c1a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004c1e:	e01b      	b.n	8004c58 <HAL_DMAEx_MultiBufferStart_IT+0x588>
 8004c20:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004c24:	e018      	b.n	8004c58 <HAL_DMAEx_MultiBufferStart_IT+0x588>
 8004c26:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004c2a:	e015      	b.n	8004c58 <HAL_DMAEx_MultiBufferStart_IT+0x588>
 8004c2c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004c30:	e012      	b.n	8004c58 <HAL_DMAEx_MultiBufferStart_IT+0x588>
 8004c32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c36:	e00f      	b.n	8004c58 <HAL_DMAEx_MultiBufferStart_IT+0x588>
 8004c38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c3c:	e00c      	b.n	8004c58 <HAL_DMAEx_MultiBufferStart_IT+0x588>
 8004c3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c42:	e009      	b.n	8004c58 <HAL_DMAEx_MultiBufferStart_IT+0x588>
 8004c44:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c48:	e006      	b.n	8004c58 <HAL_DMAEx_MultiBufferStart_IT+0x588>
 8004c4a:	2310      	movs	r3, #16
 8004c4c:	e004      	b.n	8004c58 <HAL_DMAEx_MultiBufferStart_IT+0x588>
 8004c4e:	2310      	movs	r3, #16
 8004c50:	e002      	b.n	8004c58 <HAL_DMAEx_MultiBufferStart_IT+0x588>
 8004c52:	2310      	movs	r3, #16
 8004c54:	e000      	b.n	8004c58 <HAL_DMAEx_MultiBufferStart_IT+0x588>
 8004c56:	2310      	movs	r3, #16
 8004c58:	4a0f      	ldr	r2, [pc, #60]	; (8004c98 <HAL_DMAEx_MultiBufferStart_IT+0x5c8>)
 8004c5a:	6093      	str	r3, [r2, #8]
 8004c5c:	e0e7      	b.n	8004e2e <HAL_DMAEx_MultiBufferStart_IT+0x75e>
 8004c5e:	bf00      	nop
 8004c60:	40026010 	.word	0x40026010
 8004c64:	40026410 	.word	0x40026410
 8004c68:	40026070 	.word	0x40026070
 8004c6c:	40026470 	.word	0x40026470
 8004c70:	40026028 	.word	0x40026028
 8004c74:	40026428 	.word	0x40026428
 8004c78:	40026088 	.word	0x40026088
 8004c7c:	40026488 	.word	0x40026488
 8004c80:	40026040 	.word	0x40026040
 8004c84:	40026440 	.word	0x40026440
 8004c88:	400260a0 	.word	0x400260a0
 8004c8c:	400264a0 	.word	0x400264a0
 8004c90:	40026000 	.word	0x40026000
 8004c94:	40026458 	.word	0x40026458
 8004c98:	40026400 	.word	0x40026400
 8004c9c:	400260b8 	.word	0x400260b8
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	461a      	mov	r2, r3
 8004ca6:	4b96      	ldr	r3, [pc, #600]	; (8004f00 <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 8004ca8:	429a      	cmp	r2, r3
 8004caa:	d960      	bls.n	8004d6e <HAL_DMAEx_MultiBufferStart_IT+0x69e>
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a94      	ldr	r2, [pc, #592]	; (8004f04 <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d057      	beq.n	8004d66 <HAL_DMAEx_MultiBufferStart_IT+0x696>
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a93      	ldr	r2, [pc, #588]	; (8004f08 <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d050      	beq.n	8004d62 <HAL_DMAEx_MultiBufferStart_IT+0x692>
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a91      	ldr	r2, [pc, #580]	; (8004f0c <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d049      	beq.n	8004d5e <HAL_DMAEx_MultiBufferStart_IT+0x68e>
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4a90      	ldr	r2, [pc, #576]	; (8004f10 <HAL_DMAEx_MultiBufferStart_IT+0x840>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d042      	beq.n	8004d5a <HAL_DMAEx_MultiBufferStart_IT+0x68a>
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a8e      	ldr	r2, [pc, #568]	; (8004f14 <HAL_DMAEx_MultiBufferStart_IT+0x844>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d03a      	beq.n	8004d54 <HAL_DMAEx_MultiBufferStart_IT+0x684>
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4a8d      	ldr	r2, [pc, #564]	; (8004f18 <HAL_DMAEx_MultiBufferStart_IT+0x848>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d032      	beq.n	8004d4e <HAL_DMAEx_MultiBufferStart_IT+0x67e>
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a8b      	ldr	r2, [pc, #556]	; (8004f1c <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d02a      	beq.n	8004d48 <HAL_DMAEx_MultiBufferStart_IT+0x678>
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a8a      	ldr	r2, [pc, #552]	; (8004f20 <HAL_DMAEx_MultiBufferStart_IT+0x850>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d022      	beq.n	8004d42 <HAL_DMAEx_MultiBufferStart_IT+0x672>
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a88      	ldr	r2, [pc, #544]	; (8004f24 <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d01a      	beq.n	8004d3c <HAL_DMAEx_MultiBufferStart_IT+0x66c>
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4a87      	ldr	r2, [pc, #540]	; (8004f28 <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d012      	beq.n	8004d36 <HAL_DMAEx_MultiBufferStart_IT+0x666>
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4a85      	ldr	r2, [pc, #532]	; (8004f2c <HAL_DMAEx_MultiBufferStart_IT+0x85c>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d00a      	beq.n	8004d30 <HAL_DMAEx_MultiBufferStart_IT+0x660>
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4a84      	ldr	r2, [pc, #528]	; (8004f30 <HAL_DMAEx_MultiBufferStart_IT+0x860>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d102      	bne.n	8004d2a <HAL_DMAEx_MultiBufferStart_IT+0x65a>
 8004d24:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004d28:	e01e      	b.n	8004d68 <HAL_DMAEx_MultiBufferStart_IT+0x698>
 8004d2a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004d2e:	e01b      	b.n	8004d68 <HAL_DMAEx_MultiBufferStart_IT+0x698>
 8004d30:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004d34:	e018      	b.n	8004d68 <HAL_DMAEx_MultiBufferStart_IT+0x698>
 8004d36:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004d3a:	e015      	b.n	8004d68 <HAL_DMAEx_MultiBufferStart_IT+0x698>
 8004d3c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004d40:	e012      	b.n	8004d68 <HAL_DMAEx_MultiBufferStart_IT+0x698>
 8004d42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004d46:	e00f      	b.n	8004d68 <HAL_DMAEx_MultiBufferStart_IT+0x698>
 8004d48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004d4c:	e00c      	b.n	8004d68 <HAL_DMAEx_MultiBufferStart_IT+0x698>
 8004d4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004d52:	e009      	b.n	8004d68 <HAL_DMAEx_MultiBufferStart_IT+0x698>
 8004d54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004d58:	e006      	b.n	8004d68 <HAL_DMAEx_MultiBufferStart_IT+0x698>
 8004d5a:	2310      	movs	r3, #16
 8004d5c:	e004      	b.n	8004d68 <HAL_DMAEx_MultiBufferStart_IT+0x698>
 8004d5e:	2310      	movs	r3, #16
 8004d60:	e002      	b.n	8004d68 <HAL_DMAEx_MultiBufferStart_IT+0x698>
 8004d62:	2310      	movs	r3, #16
 8004d64:	e000      	b.n	8004d68 <HAL_DMAEx_MultiBufferStart_IT+0x698>
 8004d66:	2310      	movs	r3, #16
 8004d68:	4a72      	ldr	r2, [pc, #456]	; (8004f34 <HAL_DMAEx_MultiBufferStart_IT+0x864>)
 8004d6a:	60d3      	str	r3, [r2, #12]
 8004d6c:	e05f      	b.n	8004e2e <HAL_DMAEx_MultiBufferStart_IT+0x75e>
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a64      	ldr	r2, [pc, #400]	; (8004f04 <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d057      	beq.n	8004e28 <HAL_DMAEx_MultiBufferStart_IT+0x758>
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a62      	ldr	r2, [pc, #392]	; (8004f08 <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d050      	beq.n	8004e24 <HAL_DMAEx_MultiBufferStart_IT+0x754>
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a61      	ldr	r2, [pc, #388]	; (8004f0c <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d049      	beq.n	8004e20 <HAL_DMAEx_MultiBufferStart_IT+0x750>
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a5f      	ldr	r2, [pc, #380]	; (8004f10 <HAL_DMAEx_MultiBufferStart_IT+0x840>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d042      	beq.n	8004e1c <HAL_DMAEx_MultiBufferStart_IT+0x74c>
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4a5e      	ldr	r2, [pc, #376]	; (8004f14 <HAL_DMAEx_MultiBufferStart_IT+0x844>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d03a      	beq.n	8004e16 <HAL_DMAEx_MultiBufferStart_IT+0x746>
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4a5c      	ldr	r2, [pc, #368]	; (8004f18 <HAL_DMAEx_MultiBufferStart_IT+0x848>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d032      	beq.n	8004e10 <HAL_DMAEx_MultiBufferStart_IT+0x740>
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4a5b      	ldr	r2, [pc, #364]	; (8004f1c <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d02a      	beq.n	8004e0a <HAL_DMAEx_MultiBufferStart_IT+0x73a>
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4a59      	ldr	r2, [pc, #356]	; (8004f20 <HAL_DMAEx_MultiBufferStart_IT+0x850>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d022      	beq.n	8004e04 <HAL_DMAEx_MultiBufferStart_IT+0x734>
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4a58      	ldr	r2, [pc, #352]	; (8004f24 <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d01a      	beq.n	8004dfe <HAL_DMAEx_MultiBufferStart_IT+0x72e>
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a56      	ldr	r2, [pc, #344]	; (8004f28 <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d012      	beq.n	8004df8 <HAL_DMAEx_MultiBufferStart_IT+0x728>
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4a55      	ldr	r2, [pc, #340]	; (8004f2c <HAL_DMAEx_MultiBufferStart_IT+0x85c>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d00a      	beq.n	8004df2 <HAL_DMAEx_MultiBufferStart_IT+0x722>
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4a53      	ldr	r2, [pc, #332]	; (8004f30 <HAL_DMAEx_MultiBufferStart_IT+0x860>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d102      	bne.n	8004dec <HAL_DMAEx_MultiBufferStart_IT+0x71c>
 8004de6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004dea:	e01e      	b.n	8004e2a <HAL_DMAEx_MultiBufferStart_IT+0x75a>
 8004dec:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004df0:	e01b      	b.n	8004e2a <HAL_DMAEx_MultiBufferStart_IT+0x75a>
 8004df2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004df6:	e018      	b.n	8004e2a <HAL_DMAEx_MultiBufferStart_IT+0x75a>
 8004df8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004dfc:	e015      	b.n	8004e2a <HAL_DMAEx_MultiBufferStart_IT+0x75a>
 8004dfe:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004e02:	e012      	b.n	8004e2a <HAL_DMAEx_MultiBufferStart_IT+0x75a>
 8004e04:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004e08:	e00f      	b.n	8004e2a <HAL_DMAEx_MultiBufferStart_IT+0x75a>
 8004e0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004e0e:	e00c      	b.n	8004e2a <HAL_DMAEx_MultiBufferStart_IT+0x75a>
 8004e10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004e14:	e009      	b.n	8004e2a <HAL_DMAEx_MultiBufferStart_IT+0x75a>
 8004e16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004e1a:	e006      	b.n	8004e2a <HAL_DMAEx_MultiBufferStart_IT+0x75a>
 8004e1c:	2310      	movs	r3, #16
 8004e1e:	e004      	b.n	8004e2a <HAL_DMAEx_MultiBufferStart_IT+0x75a>
 8004e20:	2310      	movs	r3, #16
 8004e22:	e002      	b.n	8004e2a <HAL_DMAEx_MultiBufferStart_IT+0x75a>
 8004e24:	2310      	movs	r3, #16
 8004e26:	e000      	b.n	8004e2a <HAL_DMAEx_MultiBufferStart_IT+0x75a>
 8004e28:	2310      	movs	r3, #16
 8004e2a:	4a42      	ldr	r2, [pc, #264]	; (8004f34 <HAL_DMAEx_MultiBufferStart_IT+0x864>)
 8004e2c:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	461a      	mov	r2, r3
 8004e34:	4b40      	ldr	r3, [pc, #256]	; (8004f38 <HAL_DMAEx_MultiBufferStart_IT+0x868>)
 8004e36:	429a      	cmp	r2, r3
 8004e38:	f240 8082 	bls.w	8004f40 <HAL_DMAEx_MultiBufferStart_IT+0x870>
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a30      	ldr	r2, [pc, #192]	; (8004f04 <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d057      	beq.n	8004ef6 <HAL_DMAEx_MultiBufferStart_IT+0x826>
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a2f      	ldr	r2, [pc, #188]	; (8004f08 <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d050      	beq.n	8004ef2 <HAL_DMAEx_MultiBufferStart_IT+0x822>
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a2d      	ldr	r2, [pc, #180]	; (8004f0c <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d049      	beq.n	8004eee <HAL_DMAEx_MultiBufferStart_IT+0x81e>
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a2c      	ldr	r2, [pc, #176]	; (8004f10 <HAL_DMAEx_MultiBufferStart_IT+0x840>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d042      	beq.n	8004eea <HAL_DMAEx_MultiBufferStart_IT+0x81a>
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a2a      	ldr	r2, [pc, #168]	; (8004f14 <HAL_DMAEx_MultiBufferStart_IT+0x844>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d03a      	beq.n	8004ee4 <HAL_DMAEx_MultiBufferStart_IT+0x814>
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4a29      	ldr	r2, [pc, #164]	; (8004f18 <HAL_DMAEx_MultiBufferStart_IT+0x848>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d032      	beq.n	8004ede <HAL_DMAEx_MultiBufferStart_IT+0x80e>
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a27      	ldr	r2, [pc, #156]	; (8004f1c <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d02a      	beq.n	8004ed8 <HAL_DMAEx_MultiBufferStart_IT+0x808>
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4a26      	ldr	r2, [pc, #152]	; (8004f20 <HAL_DMAEx_MultiBufferStart_IT+0x850>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d022      	beq.n	8004ed2 <HAL_DMAEx_MultiBufferStart_IT+0x802>
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a24      	ldr	r2, [pc, #144]	; (8004f24 <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d01a      	beq.n	8004ecc <HAL_DMAEx_MultiBufferStart_IT+0x7fc>
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a23      	ldr	r2, [pc, #140]	; (8004f28 <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d012      	beq.n	8004ec6 <HAL_DMAEx_MultiBufferStart_IT+0x7f6>
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4a21      	ldr	r2, [pc, #132]	; (8004f2c <HAL_DMAEx_MultiBufferStart_IT+0x85c>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d00a      	beq.n	8004ec0 <HAL_DMAEx_MultiBufferStart_IT+0x7f0>
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4a20      	ldr	r2, [pc, #128]	; (8004f30 <HAL_DMAEx_MultiBufferStart_IT+0x860>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d102      	bne.n	8004eba <HAL_DMAEx_MultiBufferStart_IT+0x7ea>
 8004eb4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004eb8:	e01e      	b.n	8004ef8 <HAL_DMAEx_MultiBufferStart_IT+0x828>
 8004eba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004ebe:	e01b      	b.n	8004ef8 <HAL_DMAEx_MultiBufferStart_IT+0x828>
 8004ec0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004ec4:	e018      	b.n	8004ef8 <HAL_DMAEx_MultiBufferStart_IT+0x828>
 8004ec6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004eca:	e015      	b.n	8004ef8 <HAL_DMAEx_MultiBufferStart_IT+0x828>
 8004ecc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004ed0:	e012      	b.n	8004ef8 <HAL_DMAEx_MultiBufferStart_IT+0x828>
 8004ed2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004ed6:	e00f      	b.n	8004ef8 <HAL_DMAEx_MultiBufferStart_IT+0x828>
 8004ed8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004edc:	e00c      	b.n	8004ef8 <HAL_DMAEx_MultiBufferStart_IT+0x828>
 8004ede:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004ee2:	e009      	b.n	8004ef8 <HAL_DMAEx_MultiBufferStart_IT+0x828>
 8004ee4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004ee8:	e006      	b.n	8004ef8 <HAL_DMAEx_MultiBufferStart_IT+0x828>
 8004eea:	2308      	movs	r3, #8
 8004eec:	e004      	b.n	8004ef8 <HAL_DMAEx_MultiBufferStart_IT+0x828>
 8004eee:	2308      	movs	r3, #8
 8004ef0:	e002      	b.n	8004ef8 <HAL_DMAEx_MultiBufferStart_IT+0x828>
 8004ef2:	2308      	movs	r3, #8
 8004ef4:	e000      	b.n	8004ef8 <HAL_DMAEx_MultiBufferStart_IT+0x828>
 8004ef6:	2308      	movs	r3, #8
 8004ef8:	4a10      	ldr	r2, [pc, #64]	; (8004f3c <HAL_DMAEx_MultiBufferStart_IT+0x86c>)
 8004efa:	60d3      	str	r3, [r2, #12]
 8004efc:	e16f      	b.n	80051de <HAL_DMAEx_MultiBufferStart_IT+0xb0e>
 8004efe:	bf00      	nop
 8004f00:	40026058 	.word	0x40026058
 8004f04:	40026010 	.word	0x40026010
 8004f08:	40026410 	.word	0x40026410
 8004f0c:	40026070 	.word	0x40026070
 8004f10:	40026470 	.word	0x40026470
 8004f14:	40026028 	.word	0x40026028
 8004f18:	40026428 	.word	0x40026428
 8004f1c:	40026088 	.word	0x40026088
 8004f20:	40026488 	.word	0x40026488
 8004f24:	40026040 	.word	0x40026040
 8004f28:	40026440 	.word	0x40026440
 8004f2c:	400260a0 	.word	0x400260a0
 8004f30:	400264a0 	.word	0x400264a0
 8004f34:	40026000 	.word	0x40026000
 8004f38:	40026458 	.word	0x40026458
 8004f3c:	40026400 	.word	0x40026400
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	461a      	mov	r2, r3
 8004f46:	4b94      	ldr	r3, [pc, #592]	; (8005198 <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 8004f48:	429a      	cmp	r2, r3
 8004f4a:	d960      	bls.n	800500e <HAL_DMAEx_MultiBufferStart_IT+0x93e>
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a92      	ldr	r2, [pc, #584]	; (800519c <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d057      	beq.n	8005006 <HAL_DMAEx_MultiBufferStart_IT+0x936>
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4a91      	ldr	r2, [pc, #580]	; (80051a0 <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d050      	beq.n	8005002 <HAL_DMAEx_MultiBufferStart_IT+0x932>
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4a8f      	ldr	r2, [pc, #572]	; (80051a4 <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d049      	beq.n	8004ffe <HAL_DMAEx_MultiBufferStart_IT+0x92e>
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4a8e      	ldr	r2, [pc, #568]	; (80051a8 <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d042      	beq.n	8004ffa <HAL_DMAEx_MultiBufferStart_IT+0x92a>
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4a8c      	ldr	r2, [pc, #560]	; (80051ac <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d03a      	beq.n	8004ff4 <HAL_DMAEx_MultiBufferStart_IT+0x924>
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4a8b      	ldr	r2, [pc, #556]	; (80051b0 <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d032      	beq.n	8004fee <HAL_DMAEx_MultiBufferStart_IT+0x91e>
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4a89      	ldr	r2, [pc, #548]	; (80051b4 <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d02a      	beq.n	8004fe8 <HAL_DMAEx_MultiBufferStart_IT+0x918>
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4a88      	ldr	r2, [pc, #544]	; (80051b8 <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d022      	beq.n	8004fe2 <HAL_DMAEx_MultiBufferStart_IT+0x912>
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a86      	ldr	r2, [pc, #536]	; (80051bc <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d01a      	beq.n	8004fdc <HAL_DMAEx_MultiBufferStart_IT+0x90c>
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4a85      	ldr	r2, [pc, #532]	; (80051c0 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d012      	beq.n	8004fd6 <HAL_DMAEx_MultiBufferStart_IT+0x906>
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4a83      	ldr	r2, [pc, #524]	; (80051c4 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d00a      	beq.n	8004fd0 <HAL_DMAEx_MultiBufferStart_IT+0x900>
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4a82      	ldr	r2, [pc, #520]	; (80051c8 <HAL_DMAEx_MultiBufferStart_IT+0xaf8>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d102      	bne.n	8004fca <HAL_DMAEx_MultiBufferStart_IT+0x8fa>
 8004fc4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004fc8:	e01e      	b.n	8005008 <HAL_DMAEx_MultiBufferStart_IT+0x938>
 8004fca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004fce:	e01b      	b.n	8005008 <HAL_DMAEx_MultiBufferStart_IT+0x938>
 8004fd0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004fd4:	e018      	b.n	8005008 <HAL_DMAEx_MultiBufferStart_IT+0x938>
 8004fd6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004fda:	e015      	b.n	8005008 <HAL_DMAEx_MultiBufferStart_IT+0x938>
 8004fdc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004fe0:	e012      	b.n	8005008 <HAL_DMAEx_MultiBufferStart_IT+0x938>
 8004fe2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004fe6:	e00f      	b.n	8005008 <HAL_DMAEx_MultiBufferStart_IT+0x938>
 8004fe8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004fec:	e00c      	b.n	8005008 <HAL_DMAEx_MultiBufferStart_IT+0x938>
 8004fee:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004ff2:	e009      	b.n	8005008 <HAL_DMAEx_MultiBufferStart_IT+0x938>
 8004ff4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004ff8:	e006      	b.n	8005008 <HAL_DMAEx_MultiBufferStart_IT+0x938>
 8004ffa:	2308      	movs	r3, #8
 8004ffc:	e004      	b.n	8005008 <HAL_DMAEx_MultiBufferStart_IT+0x938>
 8004ffe:	2308      	movs	r3, #8
 8005000:	e002      	b.n	8005008 <HAL_DMAEx_MultiBufferStart_IT+0x938>
 8005002:	2308      	movs	r3, #8
 8005004:	e000      	b.n	8005008 <HAL_DMAEx_MultiBufferStart_IT+0x938>
 8005006:	2308      	movs	r3, #8
 8005008:	4a70      	ldr	r2, [pc, #448]	; (80051cc <HAL_DMAEx_MultiBufferStart_IT+0xafc>)
 800500a:	6093      	str	r3, [r2, #8]
 800500c:	e0e7      	b.n	80051de <HAL_DMAEx_MultiBufferStart_IT+0xb0e>
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	461a      	mov	r2, r3
 8005014:	4b6e      	ldr	r3, [pc, #440]	; (80051d0 <HAL_DMAEx_MultiBufferStart_IT+0xb00>)
 8005016:	429a      	cmp	r2, r3
 8005018:	d960      	bls.n	80050dc <HAL_DMAEx_MultiBufferStart_IT+0xa0c>
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4a5f      	ldr	r2, [pc, #380]	; (800519c <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d057      	beq.n	80050d4 <HAL_DMAEx_MultiBufferStart_IT+0xa04>
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a5d      	ldr	r2, [pc, #372]	; (80051a0 <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d050      	beq.n	80050d0 <HAL_DMAEx_MultiBufferStart_IT+0xa00>
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4a5c      	ldr	r2, [pc, #368]	; (80051a4 <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d049      	beq.n	80050cc <HAL_DMAEx_MultiBufferStart_IT+0x9fc>
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4a5a      	ldr	r2, [pc, #360]	; (80051a8 <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d042      	beq.n	80050c8 <HAL_DMAEx_MultiBufferStart_IT+0x9f8>
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4a59      	ldr	r2, [pc, #356]	; (80051ac <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d03a      	beq.n	80050c2 <HAL_DMAEx_MultiBufferStart_IT+0x9f2>
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a57      	ldr	r2, [pc, #348]	; (80051b0 <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d032      	beq.n	80050bc <HAL_DMAEx_MultiBufferStart_IT+0x9ec>
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a56      	ldr	r2, [pc, #344]	; (80051b4 <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d02a      	beq.n	80050b6 <HAL_DMAEx_MultiBufferStart_IT+0x9e6>
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4a54      	ldr	r2, [pc, #336]	; (80051b8 <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d022      	beq.n	80050b0 <HAL_DMAEx_MultiBufferStart_IT+0x9e0>
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4a53      	ldr	r2, [pc, #332]	; (80051bc <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d01a      	beq.n	80050aa <HAL_DMAEx_MultiBufferStart_IT+0x9da>
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4a51      	ldr	r2, [pc, #324]	; (80051c0 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d012      	beq.n	80050a4 <HAL_DMAEx_MultiBufferStart_IT+0x9d4>
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4a50      	ldr	r2, [pc, #320]	; (80051c4 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d00a      	beq.n	800509e <HAL_DMAEx_MultiBufferStart_IT+0x9ce>
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a4e      	ldr	r2, [pc, #312]	; (80051c8 <HAL_DMAEx_MultiBufferStart_IT+0xaf8>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d102      	bne.n	8005098 <HAL_DMAEx_MultiBufferStart_IT+0x9c8>
 8005092:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8005096:	e01e      	b.n	80050d6 <HAL_DMAEx_MultiBufferStart_IT+0xa06>
 8005098:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800509c:	e01b      	b.n	80050d6 <HAL_DMAEx_MultiBufferStart_IT+0xa06>
 800509e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80050a2:	e018      	b.n	80050d6 <HAL_DMAEx_MultiBufferStart_IT+0xa06>
 80050a4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80050a8:	e015      	b.n	80050d6 <HAL_DMAEx_MultiBufferStart_IT+0xa06>
 80050aa:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80050ae:	e012      	b.n	80050d6 <HAL_DMAEx_MultiBufferStart_IT+0xa06>
 80050b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80050b4:	e00f      	b.n	80050d6 <HAL_DMAEx_MultiBufferStart_IT+0xa06>
 80050b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80050ba:	e00c      	b.n	80050d6 <HAL_DMAEx_MultiBufferStart_IT+0xa06>
 80050bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80050c0:	e009      	b.n	80050d6 <HAL_DMAEx_MultiBufferStart_IT+0xa06>
 80050c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80050c6:	e006      	b.n	80050d6 <HAL_DMAEx_MultiBufferStart_IT+0xa06>
 80050c8:	2308      	movs	r3, #8
 80050ca:	e004      	b.n	80050d6 <HAL_DMAEx_MultiBufferStart_IT+0xa06>
 80050cc:	2308      	movs	r3, #8
 80050ce:	e002      	b.n	80050d6 <HAL_DMAEx_MultiBufferStart_IT+0xa06>
 80050d0:	2308      	movs	r3, #8
 80050d2:	e000      	b.n	80050d6 <HAL_DMAEx_MultiBufferStart_IT+0xa06>
 80050d4:	2308      	movs	r3, #8
 80050d6:	4a3f      	ldr	r2, [pc, #252]	; (80051d4 <HAL_DMAEx_MultiBufferStart_IT+0xb04>)
 80050d8:	60d3      	str	r3, [r2, #12]
 80050da:	e080      	b.n	80051de <HAL_DMAEx_MultiBufferStart_IT+0xb0e>
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a2e      	ldr	r2, [pc, #184]	; (800519c <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d078      	beq.n	80051d8 <HAL_DMAEx_MultiBufferStart_IT+0xb08>
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4a2d      	ldr	r2, [pc, #180]	; (80051a0 <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d050      	beq.n	8005192 <HAL_DMAEx_MultiBufferStart_IT+0xac2>
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a2b      	ldr	r2, [pc, #172]	; (80051a4 <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d049      	beq.n	800518e <HAL_DMAEx_MultiBufferStart_IT+0xabe>
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4a2a      	ldr	r2, [pc, #168]	; (80051a8 <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d042      	beq.n	800518a <HAL_DMAEx_MultiBufferStart_IT+0xaba>
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4a28      	ldr	r2, [pc, #160]	; (80051ac <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d03a      	beq.n	8005184 <HAL_DMAEx_MultiBufferStart_IT+0xab4>
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4a27      	ldr	r2, [pc, #156]	; (80051b0 <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d032      	beq.n	800517e <HAL_DMAEx_MultiBufferStart_IT+0xaae>
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4a25      	ldr	r2, [pc, #148]	; (80051b4 <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d02a      	beq.n	8005178 <HAL_DMAEx_MultiBufferStart_IT+0xaa8>
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4a24      	ldr	r2, [pc, #144]	; (80051b8 <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d022      	beq.n	8005172 <HAL_DMAEx_MultiBufferStart_IT+0xaa2>
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a22      	ldr	r2, [pc, #136]	; (80051bc <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d01a      	beq.n	800516c <HAL_DMAEx_MultiBufferStart_IT+0xa9c>
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a21      	ldr	r2, [pc, #132]	; (80051c0 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d012      	beq.n	8005166 <HAL_DMAEx_MultiBufferStart_IT+0xa96>
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a1f      	ldr	r2, [pc, #124]	; (80051c4 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d00a      	beq.n	8005160 <HAL_DMAEx_MultiBufferStart_IT+0xa90>
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4a1e      	ldr	r2, [pc, #120]	; (80051c8 <HAL_DMAEx_MultiBufferStart_IT+0xaf8>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d102      	bne.n	800515a <HAL_DMAEx_MultiBufferStart_IT+0xa8a>
 8005154:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8005158:	e03f      	b.n	80051da <HAL_DMAEx_MultiBufferStart_IT+0xb0a>
 800515a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800515e:	e03c      	b.n	80051da <HAL_DMAEx_MultiBufferStart_IT+0xb0a>
 8005160:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8005164:	e039      	b.n	80051da <HAL_DMAEx_MultiBufferStart_IT+0xb0a>
 8005166:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800516a:	e036      	b.n	80051da <HAL_DMAEx_MultiBufferStart_IT+0xb0a>
 800516c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8005170:	e033      	b.n	80051da <HAL_DMAEx_MultiBufferStart_IT+0xb0a>
 8005172:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005176:	e030      	b.n	80051da <HAL_DMAEx_MultiBufferStart_IT+0xb0a>
 8005178:	f44f 7300 	mov.w	r3, #512	; 0x200
 800517c:	e02d      	b.n	80051da <HAL_DMAEx_MultiBufferStart_IT+0xb0a>
 800517e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005182:	e02a      	b.n	80051da <HAL_DMAEx_MultiBufferStart_IT+0xb0a>
 8005184:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005188:	e027      	b.n	80051da <HAL_DMAEx_MultiBufferStart_IT+0xb0a>
 800518a:	2308      	movs	r3, #8
 800518c:	e025      	b.n	80051da <HAL_DMAEx_MultiBufferStart_IT+0xb0a>
 800518e:	2308      	movs	r3, #8
 8005190:	e023      	b.n	80051da <HAL_DMAEx_MultiBufferStart_IT+0xb0a>
 8005192:	2308      	movs	r3, #8
 8005194:	e021      	b.n	80051da <HAL_DMAEx_MultiBufferStart_IT+0xb0a>
 8005196:	bf00      	nop
 8005198:	400260b8 	.word	0x400260b8
 800519c:	40026010 	.word	0x40026010
 80051a0:	40026410 	.word	0x40026410
 80051a4:	40026070 	.word	0x40026070
 80051a8:	40026470 	.word	0x40026470
 80051ac:	40026028 	.word	0x40026028
 80051b0:	40026428 	.word	0x40026428
 80051b4:	40026088 	.word	0x40026088
 80051b8:	40026488 	.word	0x40026488
 80051bc:	40026040 	.word	0x40026040
 80051c0:	40026440 	.word	0x40026440
 80051c4:	400260a0 	.word	0x400260a0
 80051c8:	400264a0 	.word	0x400264a0
 80051cc:	40026400 	.word	0x40026400
 80051d0:	40026058 	.word	0x40026058
 80051d4:	40026000 	.word	0x40026000
 80051d8:	2308      	movs	r3, #8
 80051da:	4a9a      	ldr	r2, [pc, #616]	; (8005444 <HAL_DMAEx_MultiBufferStart_IT+0xd74>)
 80051dc:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	461a      	mov	r2, r3
 80051e4:	4b98      	ldr	r3, [pc, #608]	; (8005448 <HAL_DMAEx_MultiBufferStart_IT+0xd78>)
 80051e6:	429a      	cmp	r2, r3
 80051e8:	d960      	bls.n	80052ac <HAL_DMAEx_MultiBufferStart_IT+0xbdc>
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4a97      	ldr	r2, [pc, #604]	; (800544c <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d057      	beq.n	80052a4 <HAL_DMAEx_MultiBufferStart_IT+0xbd4>
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4a95      	ldr	r2, [pc, #596]	; (8005450 <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d050      	beq.n	80052a0 <HAL_DMAEx_MultiBufferStart_IT+0xbd0>
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4a94      	ldr	r2, [pc, #592]	; (8005454 <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d049      	beq.n	800529c <HAL_DMAEx_MultiBufferStart_IT+0xbcc>
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4a92      	ldr	r2, [pc, #584]	; (8005458 <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d042      	beq.n	8005298 <HAL_DMAEx_MultiBufferStart_IT+0xbc8>
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	4a91      	ldr	r2, [pc, #580]	; (800545c <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d03a      	beq.n	8005292 <HAL_DMAEx_MultiBufferStart_IT+0xbc2>
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4a8f      	ldr	r2, [pc, #572]	; (8005460 <HAL_DMAEx_MultiBufferStart_IT+0xd90>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d032      	beq.n	800528c <HAL_DMAEx_MultiBufferStart_IT+0xbbc>
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4a8e      	ldr	r2, [pc, #568]	; (8005464 <HAL_DMAEx_MultiBufferStart_IT+0xd94>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d02a      	beq.n	8005286 <HAL_DMAEx_MultiBufferStart_IT+0xbb6>
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	4a8c      	ldr	r2, [pc, #560]	; (8005468 <HAL_DMAEx_MultiBufferStart_IT+0xd98>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d022      	beq.n	8005280 <HAL_DMAEx_MultiBufferStart_IT+0xbb0>
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4a8b      	ldr	r2, [pc, #556]	; (800546c <HAL_DMAEx_MultiBufferStart_IT+0xd9c>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d01a      	beq.n	800527a <HAL_DMAEx_MultiBufferStart_IT+0xbaa>
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	4a89      	ldr	r2, [pc, #548]	; (8005470 <HAL_DMAEx_MultiBufferStart_IT+0xda0>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d012      	beq.n	8005274 <HAL_DMAEx_MultiBufferStart_IT+0xba4>
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	4a88      	ldr	r2, [pc, #544]	; (8005474 <HAL_DMAEx_MultiBufferStart_IT+0xda4>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d00a      	beq.n	800526e <HAL_DMAEx_MultiBufferStart_IT+0xb9e>
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4a86      	ldr	r2, [pc, #536]	; (8005478 <HAL_DMAEx_MultiBufferStart_IT+0xda8>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d102      	bne.n	8005268 <HAL_DMAEx_MultiBufferStart_IT+0xb98>
 8005262:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005266:	e01e      	b.n	80052a6 <HAL_DMAEx_MultiBufferStart_IT+0xbd6>
 8005268:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800526c:	e01b      	b.n	80052a6 <HAL_DMAEx_MultiBufferStart_IT+0xbd6>
 800526e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005272:	e018      	b.n	80052a6 <HAL_DMAEx_MultiBufferStart_IT+0xbd6>
 8005274:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005278:	e015      	b.n	80052a6 <HAL_DMAEx_MultiBufferStart_IT+0xbd6>
 800527a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800527e:	e012      	b.n	80052a6 <HAL_DMAEx_MultiBufferStart_IT+0xbd6>
 8005280:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005284:	e00f      	b.n	80052a6 <HAL_DMAEx_MultiBufferStart_IT+0xbd6>
 8005286:	f44f 7380 	mov.w	r3, #256	; 0x100
 800528a:	e00c      	b.n	80052a6 <HAL_DMAEx_MultiBufferStart_IT+0xbd6>
 800528c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005290:	e009      	b.n	80052a6 <HAL_DMAEx_MultiBufferStart_IT+0xbd6>
 8005292:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005296:	e006      	b.n	80052a6 <HAL_DMAEx_MultiBufferStart_IT+0xbd6>
 8005298:	2304      	movs	r3, #4
 800529a:	e004      	b.n	80052a6 <HAL_DMAEx_MultiBufferStart_IT+0xbd6>
 800529c:	2304      	movs	r3, #4
 800529e:	e002      	b.n	80052a6 <HAL_DMAEx_MultiBufferStart_IT+0xbd6>
 80052a0:	2304      	movs	r3, #4
 80052a2:	e000      	b.n	80052a6 <HAL_DMAEx_MultiBufferStart_IT+0xbd6>
 80052a4:	2304      	movs	r3, #4
 80052a6:	4a75      	ldr	r2, [pc, #468]	; (800547c <HAL_DMAEx_MultiBufferStart_IT+0xdac>)
 80052a8:	60d3      	str	r3, [r2, #12]
 80052aa:	e151      	b.n	8005550 <HAL_DMAEx_MultiBufferStart_IT+0xe80>
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	461a      	mov	r2, r3
 80052b2:	4b73      	ldr	r3, [pc, #460]	; (8005480 <HAL_DMAEx_MultiBufferStart_IT+0xdb0>)
 80052b4:	429a      	cmp	r2, r3
 80052b6:	d960      	bls.n	800537a <HAL_DMAEx_MultiBufferStart_IT+0xcaa>
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a63      	ldr	r2, [pc, #396]	; (800544c <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d057      	beq.n	8005372 <HAL_DMAEx_MultiBufferStart_IT+0xca2>
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4a62      	ldr	r2, [pc, #392]	; (8005450 <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d050      	beq.n	800536e <HAL_DMAEx_MultiBufferStart_IT+0xc9e>
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a60      	ldr	r2, [pc, #384]	; (8005454 <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d049      	beq.n	800536a <HAL_DMAEx_MultiBufferStart_IT+0xc9a>
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4a5f      	ldr	r2, [pc, #380]	; (8005458 <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d042      	beq.n	8005366 <HAL_DMAEx_MultiBufferStart_IT+0xc96>
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4a5d      	ldr	r2, [pc, #372]	; (800545c <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d03a      	beq.n	8005360 <HAL_DMAEx_MultiBufferStart_IT+0xc90>
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4a5c      	ldr	r2, [pc, #368]	; (8005460 <HAL_DMAEx_MultiBufferStart_IT+0xd90>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d032      	beq.n	800535a <HAL_DMAEx_MultiBufferStart_IT+0xc8a>
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a5a      	ldr	r2, [pc, #360]	; (8005464 <HAL_DMAEx_MultiBufferStart_IT+0xd94>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d02a      	beq.n	8005354 <HAL_DMAEx_MultiBufferStart_IT+0xc84>
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4a59      	ldr	r2, [pc, #356]	; (8005468 <HAL_DMAEx_MultiBufferStart_IT+0xd98>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d022      	beq.n	800534e <HAL_DMAEx_MultiBufferStart_IT+0xc7e>
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4a57      	ldr	r2, [pc, #348]	; (800546c <HAL_DMAEx_MultiBufferStart_IT+0xd9c>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d01a      	beq.n	8005348 <HAL_DMAEx_MultiBufferStart_IT+0xc78>
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4a56      	ldr	r2, [pc, #344]	; (8005470 <HAL_DMAEx_MultiBufferStart_IT+0xda0>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d012      	beq.n	8005342 <HAL_DMAEx_MultiBufferStart_IT+0xc72>
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4a54      	ldr	r2, [pc, #336]	; (8005474 <HAL_DMAEx_MultiBufferStart_IT+0xda4>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d00a      	beq.n	800533c <HAL_DMAEx_MultiBufferStart_IT+0xc6c>
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4a53      	ldr	r2, [pc, #332]	; (8005478 <HAL_DMAEx_MultiBufferStart_IT+0xda8>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d102      	bne.n	8005336 <HAL_DMAEx_MultiBufferStart_IT+0xc66>
 8005330:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005334:	e01e      	b.n	8005374 <HAL_DMAEx_MultiBufferStart_IT+0xca4>
 8005336:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800533a:	e01b      	b.n	8005374 <HAL_DMAEx_MultiBufferStart_IT+0xca4>
 800533c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005340:	e018      	b.n	8005374 <HAL_DMAEx_MultiBufferStart_IT+0xca4>
 8005342:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005346:	e015      	b.n	8005374 <HAL_DMAEx_MultiBufferStart_IT+0xca4>
 8005348:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800534c:	e012      	b.n	8005374 <HAL_DMAEx_MultiBufferStart_IT+0xca4>
 800534e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005352:	e00f      	b.n	8005374 <HAL_DMAEx_MultiBufferStart_IT+0xca4>
 8005354:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005358:	e00c      	b.n	8005374 <HAL_DMAEx_MultiBufferStart_IT+0xca4>
 800535a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800535e:	e009      	b.n	8005374 <HAL_DMAEx_MultiBufferStart_IT+0xca4>
 8005360:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005364:	e006      	b.n	8005374 <HAL_DMAEx_MultiBufferStart_IT+0xca4>
 8005366:	2304      	movs	r3, #4
 8005368:	e004      	b.n	8005374 <HAL_DMAEx_MultiBufferStart_IT+0xca4>
 800536a:	2304      	movs	r3, #4
 800536c:	e002      	b.n	8005374 <HAL_DMAEx_MultiBufferStart_IT+0xca4>
 800536e:	2304      	movs	r3, #4
 8005370:	e000      	b.n	8005374 <HAL_DMAEx_MultiBufferStart_IT+0xca4>
 8005372:	2304      	movs	r3, #4
 8005374:	4a41      	ldr	r2, [pc, #260]	; (800547c <HAL_DMAEx_MultiBufferStart_IT+0xdac>)
 8005376:	6093      	str	r3, [r2, #8]
 8005378:	e0ea      	b.n	8005550 <HAL_DMAEx_MultiBufferStart_IT+0xe80>
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	461a      	mov	r2, r3
 8005380:	4b40      	ldr	r3, [pc, #256]	; (8005484 <HAL_DMAEx_MultiBufferStart_IT+0xdb4>)
 8005382:	429a      	cmp	r2, r3
 8005384:	f240 8084 	bls.w	8005490 <HAL_DMAEx_MultiBufferStart_IT+0xdc0>
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4a2f      	ldr	r2, [pc, #188]	; (800544c <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d07a      	beq.n	8005488 <HAL_DMAEx_MultiBufferStart_IT+0xdb8>
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4a2e      	ldr	r2, [pc, #184]	; (8005450 <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d050      	beq.n	800543e <HAL_DMAEx_MultiBufferStart_IT+0xd6e>
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a2c      	ldr	r2, [pc, #176]	; (8005454 <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d049      	beq.n	800543a <HAL_DMAEx_MultiBufferStart_IT+0xd6a>
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4a2b      	ldr	r2, [pc, #172]	; (8005458 <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d042      	beq.n	8005436 <HAL_DMAEx_MultiBufferStart_IT+0xd66>
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4a29      	ldr	r2, [pc, #164]	; (800545c <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d03a      	beq.n	8005430 <HAL_DMAEx_MultiBufferStart_IT+0xd60>
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4a28      	ldr	r2, [pc, #160]	; (8005460 <HAL_DMAEx_MultiBufferStart_IT+0xd90>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d032      	beq.n	800542a <HAL_DMAEx_MultiBufferStart_IT+0xd5a>
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a26      	ldr	r2, [pc, #152]	; (8005464 <HAL_DMAEx_MultiBufferStart_IT+0xd94>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d02a      	beq.n	8005424 <HAL_DMAEx_MultiBufferStart_IT+0xd54>
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4a25      	ldr	r2, [pc, #148]	; (8005468 <HAL_DMAEx_MultiBufferStart_IT+0xd98>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d022      	beq.n	800541e <HAL_DMAEx_MultiBufferStart_IT+0xd4e>
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4a23      	ldr	r2, [pc, #140]	; (800546c <HAL_DMAEx_MultiBufferStart_IT+0xd9c>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d01a      	beq.n	8005418 <HAL_DMAEx_MultiBufferStart_IT+0xd48>
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	4a22      	ldr	r2, [pc, #136]	; (8005470 <HAL_DMAEx_MultiBufferStart_IT+0xda0>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d012      	beq.n	8005412 <HAL_DMAEx_MultiBufferStart_IT+0xd42>
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a20      	ldr	r2, [pc, #128]	; (8005474 <HAL_DMAEx_MultiBufferStart_IT+0xda4>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d00a      	beq.n	800540c <HAL_DMAEx_MultiBufferStart_IT+0xd3c>
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4a1f      	ldr	r2, [pc, #124]	; (8005478 <HAL_DMAEx_MultiBufferStart_IT+0xda8>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d102      	bne.n	8005406 <HAL_DMAEx_MultiBufferStart_IT+0xd36>
 8005400:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005404:	e041      	b.n	800548a <HAL_DMAEx_MultiBufferStart_IT+0xdba>
 8005406:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800540a:	e03e      	b.n	800548a <HAL_DMAEx_MultiBufferStart_IT+0xdba>
 800540c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005410:	e03b      	b.n	800548a <HAL_DMAEx_MultiBufferStart_IT+0xdba>
 8005412:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005416:	e038      	b.n	800548a <HAL_DMAEx_MultiBufferStart_IT+0xdba>
 8005418:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800541c:	e035      	b.n	800548a <HAL_DMAEx_MultiBufferStart_IT+0xdba>
 800541e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005422:	e032      	b.n	800548a <HAL_DMAEx_MultiBufferStart_IT+0xdba>
 8005424:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005428:	e02f      	b.n	800548a <HAL_DMAEx_MultiBufferStart_IT+0xdba>
 800542a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800542e:	e02c      	b.n	800548a <HAL_DMAEx_MultiBufferStart_IT+0xdba>
 8005430:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005434:	e029      	b.n	800548a <HAL_DMAEx_MultiBufferStart_IT+0xdba>
 8005436:	2304      	movs	r3, #4
 8005438:	e027      	b.n	800548a <HAL_DMAEx_MultiBufferStart_IT+0xdba>
 800543a:	2304      	movs	r3, #4
 800543c:	e025      	b.n	800548a <HAL_DMAEx_MultiBufferStart_IT+0xdba>
 800543e:	2304      	movs	r3, #4
 8005440:	e023      	b.n	800548a <HAL_DMAEx_MultiBufferStart_IT+0xdba>
 8005442:	bf00      	nop
 8005444:	40026000 	.word	0x40026000
 8005448:	40026458 	.word	0x40026458
 800544c:	40026010 	.word	0x40026010
 8005450:	40026410 	.word	0x40026410
 8005454:	40026070 	.word	0x40026070
 8005458:	40026470 	.word	0x40026470
 800545c:	40026028 	.word	0x40026028
 8005460:	40026428 	.word	0x40026428
 8005464:	40026088 	.word	0x40026088
 8005468:	40026488 	.word	0x40026488
 800546c:	40026040 	.word	0x40026040
 8005470:	40026440 	.word	0x40026440
 8005474:	400260a0 	.word	0x400260a0
 8005478:	400264a0 	.word	0x400264a0
 800547c:	40026400 	.word	0x40026400
 8005480:	400260b8 	.word	0x400260b8
 8005484:	40026058 	.word	0x40026058
 8005488:	2304      	movs	r3, #4
 800548a:	4a94      	ldr	r2, [pc, #592]	; (80056dc <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 800548c:	60d3      	str	r3, [r2, #12]
 800548e:	e05f      	b.n	8005550 <HAL_DMAEx_MultiBufferStart_IT+0xe80>
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4a92      	ldr	r2, [pc, #584]	; (80056e0 <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d057      	beq.n	800554a <HAL_DMAEx_MultiBufferStart_IT+0xe7a>
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4a91      	ldr	r2, [pc, #580]	; (80056e4 <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d050      	beq.n	8005546 <HAL_DMAEx_MultiBufferStart_IT+0xe76>
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	4a8f      	ldr	r2, [pc, #572]	; (80056e8 <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d049      	beq.n	8005542 <HAL_DMAEx_MultiBufferStart_IT+0xe72>
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	4a8e      	ldr	r2, [pc, #568]	; (80056ec <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d042      	beq.n	800553e <HAL_DMAEx_MultiBufferStart_IT+0xe6e>
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	4a8c      	ldr	r2, [pc, #560]	; (80056f0 <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d03a      	beq.n	8005538 <HAL_DMAEx_MultiBufferStart_IT+0xe68>
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4a8b      	ldr	r2, [pc, #556]	; (80056f4 <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d032      	beq.n	8005532 <HAL_DMAEx_MultiBufferStart_IT+0xe62>
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4a89      	ldr	r2, [pc, #548]	; (80056f8 <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d02a      	beq.n	800552c <HAL_DMAEx_MultiBufferStart_IT+0xe5c>
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4a88      	ldr	r2, [pc, #544]	; (80056fc <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d022      	beq.n	8005526 <HAL_DMAEx_MultiBufferStart_IT+0xe56>
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4a86      	ldr	r2, [pc, #536]	; (8005700 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d01a      	beq.n	8005520 <HAL_DMAEx_MultiBufferStart_IT+0xe50>
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4a85      	ldr	r2, [pc, #532]	; (8005704 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d012      	beq.n	800551a <HAL_DMAEx_MultiBufferStart_IT+0xe4a>
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4a83      	ldr	r2, [pc, #524]	; (8005708 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d00a      	beq.n	8005514 <HAL_DMAEx_MultiBufferStart_IT+0xe44>
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4a82      	ldr	r2, [pc, #520]	; (800570c <HAL_DMAEx_MultiBufferStart_IT+0x103c>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d102      	bne.n	800550e <HAL_DMAEx_MultiBufferStart_IT+0xe3e>
 8005508:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800550c:	e01e      	b.n	800554c <HAL_DMAEx_MultiBufferStart_IT+0xe7c>
 800550e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005512:	e01b      	b.n	800554c <HAL_DMAEx_MultiBufferStart_IT+0xe7c>
 8005514:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005518:	e018      	b.n	800554c <HAL_DMAEx_MultiBufferStart_IT+0xe7c>
 800551a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800551e:	e015      	b.n	800554c <HAL_DMAEx_MultiBufferStart_IT+0xe7c>
 8005520:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005524:	e012      	b.n	800554c <HAL_DMAEx_MultiBufferStart_IT+0xe7c>
 8005526:	f44f 7380 	mov.w	r3, #256	; 0x100
 800552a:	e00f      	b.n	800554c <HAL_DMAEx_MultiBufferStart_IT+0xe7c>
 800552c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005530:	e00c      	b.n	800554c <HAL_DMAEx_MultiBufferStart_IT+0xe7c>
 8005532:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005536:	e009      	b.n	800554c <HAL_DMAEx_MultiBufferStart_IT+0xe7c>
 8005538:	f44f 7380 	mov.w	r3, #256	; 0x100
 800553c:	e006      	b.n	800554c <HAL_DMAEx_MultiBufferStart_IT+0xe7c>
 800553e:	2304      	movs	r3, #4
 8005540:	e004      	b.n	800554c <HAL_DMAEx_MultiBufferStart_IT+0xe7c>
 8005542:	2304      	movs	r3, #4
 8005544:	e002      	b.n	800554c <HAL_DMAEx_MultiBufferStart_IT+0xe7c>
 8005546:	2304      	movs	r3, #4
 8005548:	e000      	b.n	800554c <HAL_DMAEx_MultiBufferStart_IT+0xe7c>
 800554a:	2304      	movs	r3, #4
 800554c:	4a63      	ldr	r2, [pc, #396]	; (80056dc <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 800554e:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	461a      	mov	r2, r3
 8005556:	4b6e      	ldr	r3, [pc, #440]	; (8005710 <HAL_DMAEx_MultiBufferStart_IT+0x1040>)
 8005558:	429a      	cmp	r2, r3
 800555a:	d95c      	bls.n	8005616 <HAL_DMAEx_MultiBufferStart_IT+0xf46>
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4a5f      	ldr	r2, [pc, #380]	; (80056e0 <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d053      	beq.n	800560e <HAL_DMAEx_MultiBufferStart_IT+0xf3e>
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4a5e      	ldr	r2, [pc, #376]	; (80056e4 <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d04c      	beq.n	800560a <HAL_DMAEx_MultiBufferStart_IT+0xf3a>
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4a5c      	ldr	r2, [pc, #368]	; (80056e8 <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d045      	beq.n	8005606 <HAL_DMAEx_MultiBufferStart_IT+0xf36>
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a5b      	ldr	r2, [pc, #364]	; (80056ec <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d03e      	beq.n	8005602 <HAL_DMAEx_MultiBufferStart_IT+0xf32>
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	4a59      	ldr	r2, [pc, #356]	; (80056f0 <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d037      	beq.n	80055fe <HAL_DMAEx_MultiBufferStart_IT+0xf2e>
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4a58      	ldr	r2, [pc, #352]	; (80056f4 <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d030      	beq.n	80055fa <HAL_DMAEx_MultiBufferStart_IT+0xf2a>
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4a56      	ldr	r2, [pc, #344]	; (80056f8 <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d029      	beq.n	80055f6 <HAL_DMAEx_MultiBufferStart_IT+0xf26>
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4a55      	ldr	r2, [pc, #340]	; (80056fc <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d022      	beq.n	80055f2 <HAL_DMAEx_MultiBufferStart_IT+0xf22>
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4a53      	ldr	r2, [pc, #332]	; (8005700 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d01a      	beq.n	80055ec <HAL_DMAEx_MultiBufferStart_IT+0xf1c>
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4a52      	ldr	r2, [pc, #328]	; (8005704 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d012      	beq.n	80055e6 <HAL_DMAEx_MultiBufferStart_IT+0xf16>
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	4a50      	ldr	r2, [pc, #320]	; (8005708 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d00a      	beq.n	80055e0 <HAL_DMAEx_MultiBufferStart_IT+0xf10>
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4a4f      	ldr	r2, [pc, #316]	; (800570c <HAL_DMAEx_MultiBufferStart_IT+0x103c>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d102      	bne.n	80055da <HAL_DMAEx_MultiBufferStart_IT+0xf0a>
 80055d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80055d8:	e01a      	b.n	8005610 <HAL_DMAEx_MultiBufferStart_IT+0xf40>
 80055da:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80055de:	e017      	b.n	8005610 <HAL_DMAEx_MultiBufferStart_IT+0xf40>
 80055e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80055e4:	e014      	b.n	8005610 <HAL_DMAEx_MultiBufferStart_IT+0xf40>
 80055e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80055ea:	e011      	b.n	8005610 <HAL_DMAEx_MultiBufferStart_IT+0xf40>
 80055ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80055f0:	e00e      	b.n	8005610 <HAL_DMAEx_MultiBufferStart_IT+0xf40>
 80055f2:	2340      	movs	r3, #64	; 0x40
 80055f4:	e00c      	b.n	8005610 <HAL_DMAEx_MultiBufferStart_IT+0xf40>
 80055f6:	2340      	movs	r3, #64	; 0x40
 80055f8:	e00a      	b.n	8005610 <HAL_DMAEx_MultiBufferStart_IT+0xf40>
 80055fa:	2340      	movs	r3, #64	; 0x40
 80055fc:	e008      	b.n	8005610 <HAL_DMAEx_MultiBufferStart_IT+0xf40>
 80055fe:	2340      	movs	r3, #64	; 0x40
 8005600:	e006      	b.n	8005610 <HAL_DMAEx_MultiBufferStart_IT+0xf40>
 8005602:	2301      	movs	r3, #1
 8005604:	e004      	b.n	8005610 <HAL_DMAEx_MultiBufferStart_IT+0xf40>
 8005606:	2301      	movs	r3, #1
 8005608:	e002      	b.n	8005610 <HAL_DMAEx_MultiBufferStart_IT+0xf40>
 800560a:	2301      	movs	r3, #1
 800560c:	e000      	b.n	8005610 <HAL_DMAEx_MultiBufferStart_IT+0xf40>
 800560e:	2301      	movs	r3, #1
 8005610:	4a40      	ldr	r2, [pc, #256]	; (8005714 <HAL_DMAEx_MultiBufferStart_IT+0x1044>)
 8005612:	60d3      	str	r3, [r2, #12]
 8005614:	e141      	b.n	800589a <HAL_DMAEx_MultiBufferStart_IT+0x11ca>
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	461a      	mov	r2, r3
 800561c:	4b3e      	ldr	r3, [pc, #248]	; (8005718 <HAL_DMAEx_MultiBufferStart_IT+0x1048>)
 800561e:	429a      	cmp	r2, r3
 8005620:	d97c      	bls.n	800571c <HAL_DMAEx_MultiBufferStart_IT+0x104c>
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a2e      	ldr	r2, [pc, #184]	; (80056e0 <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d053      	beq.n	80056d4 <HAL_DMAEx_MultiBufferStart_IT+0x1004>
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4a2c      	ldr	r2, [pc, #176]	; (80056e4 <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d04c      	beq.n	80056d0 <HAL_DMAEx_MultiBufferStart_IT+0x1000>
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4a2b      	ldr	r2, [pc, #172]	; (80056e8 <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d045      	beq.n	80056cc <HAL_DMAEx_MultiBufferStart_IT+0xffc>
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4a29      	ldr	r2, [pc, #164]	; (80056ec <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d03e      	beq.n	80056c8 <HAL_DMAEx_MultiBufferStart_IT+0xff8>
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4a28      	ldr	r2, [pc, #160]	; (80056f0 <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d037      	beq.n	80056c4 <HAL_DMAEx_MultiBufferStart_IT+0xff4>
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4a26      	ldr	r2, [pc, #152]	; (80056f4 <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d030      	beq.n	80056c0 <HAL_DMAEx_MultiBufferStart_IT+0xff0>
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4a25      	ldr	r2, [pc, #148]	; (80056f8 <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d029      	beq.n	80056bc <HAL_DMAEx_MultiBufferStart_IT+0xfec>
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4a23      	ldr	r2, [pc, #140]	; (80056fc <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d022      	beq.n	80056b8 <HAL_DMAEx_MultiBufferStart_IT+0xfe8>
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	4a22      	ldr	r2, [pc, #136]	; (8005700 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d01a      	beq.n	80056b2 <HAL_DMAEx_MultiBufferStart_IT+0xfe2>
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4a20      	ldr	r2, [pc, #128]	; (8005704 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d012      	beq.n	80056ac <HAL_DMAEx_MultiBufferStart_IT+0xfdc>
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4a1f      	ldr	r2, [pc, #124]	; (8005708 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d00a      	beq.n	80056a6 <HAL_DMAEx_MultiBufferStart_IT+0xfd6>
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4a1d      	ldr	r2, [pc, #116]	; (800570c <HAL_DMAEx_MultiBufferStart_IT+0x103c>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d102      	bne.n	80056a0 <HAL_DMAEx_MultiBufferStart_IT+0xfd0>
 800569a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800569e:	e01a      	b.n	80056d6 <HAL_DMAEx_MultiBufferStart_IT+0x1006>
 80056a0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80056a4:	e017      	b.n	80056d6 <HAL_DMAEx_MultiBufferStart_IT+0x1006>
 80056a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80056aa:	e014      	b.n	80056d6 <HAL_DMAEx_MultiBufferStart_IT+0x1006>
 80056ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80056b0:	e011      	b.n	80056d6 <HAL_DMAEx_MultiBufferStart_IT+0x1006>
 80056b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80056b6:	e00e      	b.n	80056d6 <HAL_DMAEx_MultiBufferStart_IT+0x1006>
 80056b8:	2340      	movs	r3, #64	; 0x40
 80056ba:	e00c      	b.n	80056d6 <HAL_DMAEx_MultiBufferStart_IT+0x1006>
 80056bc:	2340      	movs	r3, #64	; 0x40
 80056be:	e00a      	b.n	80056d6 <HAL_DMAEx_MultiBufferStart_IT+0x1006>
 80056c0:	2340      	movs	r3, #64	; 0x40
 80056c2:	e008      	b.n	80056d6 <HAL_DMAEx_MultiBufferStart_IT+0x1006>
 80056c4:	2340      	movs	r3, #64	; 0x40
 80056c6:	e006      	b.n	80056d6 <HAL_DMAEx_MultiBufferStart_IT+0x1006>
 80056c8:	2301      	movs	r3, #1
 80056ca:	e004      	b.n	80056d6 <HAL_DMAEx_MultiBufferStart_IT+0x1006>
 80056cc:	2301      	movs	r3, #1
 80056ce:	e002      	b.n	80056d6 <HAL_DMAEx_MultiBufferStart_IT+0x1006>
 80056d0:	2301      	movs	r3, #1
 80056d2:	e000      	b.n	80056d6 <HAL_DMAEx_MultiBufferStart_IT+0x1006>
 80056d4:	2301      	movs	r3, #1
 80056d6:	4a0f      	ldr	r2, [pc, #60]	; (8005714 <HAL_DMAEx_MultiBufferStart_IT+0x1044>)
 80056d8:	6093      	str	r3, [r2, #8]
 80056da:	e0de      	b.n	800589a <HAL_DMAEx_MultiBufferStart_IT+0x11ca>
 80056dc:	40026000 	.word	0x40026000
 80056e0:	40026010 	.word	0x40026010
 80056e4:	40026410 	.word	0x40026410
 80056e8:	40026070 	.word	0x40026070
 80056ec:	40026470 	.word	0x40026470
 80056f0:	40026028 	.word	0x40026028
 80056f4:	40026428 	.word	0x40026428
 80056f8:	40026088 	.word	0x40026088
 80056fc:	40026488 	.word	0x40026488
 8005700:	40026040 	.word	0x40026040
 8005704:	40026440 	.word	0x40026440
 8005708:	400260a0 	.word	0x400260a0
 800570c:	400264a0 	.word	0x400264a0
 8005710:	40026458 	.word	0x40026458
 8005714:	40026400 	.word	0x40026400
 8005718:	400260b8 	.word	0x400260b8
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	461a      	mov	r2, r3
 8005722:	4b78      	ldr	r3, [pc, #480]	; (8005904 <HAL_DMAEx_MultiBufferStart_IT+0x1234>)
 8005724:	429a      	cmp	r2, r3
 8005726:	d95c      	bls.n	80057e2 <HAL_DMAEx_MultiBufferStart_IT+0x1112>
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4a76      	ldr	r2, [pc, #472]	; (8005908 <HAL_DMAEx_MultiBufferStart_IT+0x1238>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d053      	beq.n	80057da <HAL_DMAEx_MultiBufferStart_IT+0x110a>
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	4a75      	ldr	r2, [pc, #468]	; (800590c <HAL_DMAEx_MultiBufferStart_IT+0x123c>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d04c      	beq.n	80057d6 <HAL_DMAEx_MultiBufferStart_IT+0x1106>
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4a73      	ldr	r2, [pc, #460]	; (8005910 <HAL_DMAEx_MultiBufferStart_IT+0x1240>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d045      	beq.n	80057d2 <HAL_DMAEx_MultiBufferStart_IT+0x1102>
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	4a72      	ldr	r2, [pc, #456]	; (8005914 <HAL_DMAEx_MultiBufferStart_IT+0x1244>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d03e      	beq.n	80057ce <HAL_DMAEx_MultiBufferStart_IT+0x10fe>
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4a70      	ldr	r2, [pc, #448]	; (8005918 <HAL_DMAEx_MultiBufferStart_IT+0x1248>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d037      	beq.n	80057ca <HAL_DMAEx_MultiBufferStart_IT+0x10fa>
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4a6f      	ldr	r2, [pc, #444]	; (800591c <HAL_DMAEx_MultiBufferStart_IT+0x124c>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d030      	beq.n	80057c6 <HAL_DMAEx_MultiBufferStart_IT+0x10f6>
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4a6d      	ldr	r2, [pc, #436]	; (8005920 <HAL_DMAEx_MultiBufferStart_IT+0x1250>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d029      	beq.n	80057c2 <HAL_DMAEx_MultiBufferStart_IT+0x10f2>
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	4a6c      	ldr	r2, [pc, #432]	; (8005924 <HAL_DMAEx_MultiBufferStart_IT+0x1254>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d022      	beq.n	80057be <HAL_DMAEx_MultiBufferStart_IT+0x10ee>
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4a6a      	ldr	r2, [pc, #424]	; (8005928 <HAL_DMAEx_MultiBufferStart_IT+0x1258>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d01a      	beq.n	80057b8 <HAL_DMAEx_MultiBufferStart_IT+0x10e8>
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	4a69      	ldr	r2, [pc, #420]	; (800592c <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d012      	beq.n	80057b2 <HAL_DMAEx_MultiBufferStart_IT+0x10e2>
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4a67      	ldr	r2, [pc, #412]	; (8005930 <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d00a      	beq.n	80057ac <HAL_DMAEx_MultiBufferStart_IT+0x10dc>
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	4a66      	ldr	r2, [pc, #408]	; (8005934 <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d102      	bne.n	80057a6 <HAL_DMAEx_MultiBufferStart_IT+0x10d6>
 80057a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80057a4:	e01a      	b.n	80057dc <HAL_DMAEx_MultiBufferStart_IT+0x110c>
 80057a6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80057aa:	e017      	b.n	80057dc <HAL_DMAEx_MultiBufferStart_IT+0x110c>
 80057ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80057b0:	e014      	b.n	80057dc <HAL_DMAEx_MultiBufferStart_IT+0x110c>
 80057b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80057b6:	e011      	b.n	80057dc <HAL_DMAEx_MultiBufferStart_IT+0x110c>
 80057b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80057bc:	e00e      	b.n	80057dc <HAL_DMAEx_MultiBufferStart_IT+0x110c>
 80057be:	2340      	movs	r3, #64	; 0x40
 80057c0:	e00c      	b.n	80057dc <HAL_DMAEx_MultiBufferStart_IT+0x110c>
 80057c2:	2340      	movs	r3, #64	; 0x40
 80057c4:	e00a      	b.n	80057dc <HAL_DMAEx_MultiBufferStart_IT+0x110c>
 80057c6:	2340      	movs	r3, #64	; 0x40
 80057c8:	e008      	b.n	80057dc <HAL_DMAEx_MultiBufferStart_IT+0x110c>
 80057ca:	2340      	movs	r3, #64	; 0x40
 80057cc:	e006      	b.n	80057dc <HAL_DMAEx_MultiBufferStart_IT+0x110c>
 80057ce:	2301      	movs	r3, #1
 80057d0:	e004      	b.n	80057dc <HAL_DMAEx_MultiBufferStart_IT+0x110c>
 80057d2:	2301      	movs	r3, #1
 80057d4:	e002      	b.n	80057dc <HAL_DMAEx_MultiBufferStart_IT+0x110c>
 80057d6:	2301      	movs	r3, #1
 80057d8:	e000      	b.n	80057dc <HAL_DMAEx_MultiBufferStart_IT+0x110c>
 80057da:	2301      	movs	r3, #1
 80057dc:	4a56      	ldr	r2, [pc, #344]	; (8005938 <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 80057de:	60d3      	str	r3, [r2, #12]
 80057e0:	e05b      	b.n	800589a <HAL_DMAEx_MultiBufferStart_IT+0x11ca>
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	4a48      	ldr	r2, [pc, #288]	; (8005908 <HAL_DMAEx_MultiBufferStart_IT+0x1238>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d053      	beq.n	8005894 <HAL_DMAEx_MultiBufferStart_IT+0x11c4>
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4a46      	ldr	r2, [pc, #280]	; (800590c <HAL_DMAEx_MultiBufferStart_IT+0x123c>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d04c      	beq.n	8005890 <HAL_DMAEx_MultiBufferStart_IT+0x11c0>
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a45      	ldr	r2, [pc, #276]	; (8005910 <HAL_DMAEx_MultiBufferStart_IT+0x1240>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d045      	beq.n	800588c <HAL_DMAEx_MultiBufferStart_IT+0x11bc>
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4a43      	ldr	r2, [pc, #268]	; (8005914 <HAL_DMAEx_MultiBufferStart_IT+0x1244>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d03e      	beq.n	8005888 <HAL_DMAEx_MultiBufferStart_IT+0x11b8>
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	4a42      	ldr	r2, [pc, #264]	; (8005918 <HAL_DMAEx_MultiBufferStart_IT+0x1248>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d037      	beq.n	8005884 <HAL_DMAEx_MultiBufferStart_IT+0x11b4>
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4a40      	ldr	r2, [pc, #256]	; (800591c <HAL_DMAEx_MultiBufferStart_IT+0x124c>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d030      	beq.n	8005880 <HAL_DMAEx_MultiBufferStart_IT+0x11b0>
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	4a3f      	ldr	r2, [pc, #252]	; (8005920 <HAL_DMAEx_MultiBufferStart_IT+0x1250>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d029      	beq.n	800587c <HAL_DMAEx_MultiBufferStart_IT+0x11ac>
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	4a3d      	ldr	r2, [pc, #244]	; (8005924 <HAL_DMAEx_MultiBufferStart_IT+0x1254>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d022      	beq.n	8005878 <HAL_DMAEx_MultiBufferStart_IT+0x11a8>
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	4a3c      	ldr	r2, [pc, #240]	; (8005928 <HAL_DMAEx_MultiBufferStart_IT+0x1258>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d01a      	beq.n	8005872 <HAL_DMAEx_MultiBufferStart_IT+0x11a2>
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	4a3a      	ldr	r2, [pc, #232]	; (800592c <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d012      	beq.n	800586c <HAL_DMAEx_MultiBufferStart_IT+0x119c>
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4a39      	ldr	r2, [pc, #228]	; (8005930 <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d00a      	beq.n	8005866 <HAL_DMAEx_MultiBufferStart_IT+0x1196>
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4a37      	ldr	r2, [pc, #220]	; (8005934 <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d102      	bne.n	8005860 <HAL_DMAEx_MultiBufferStart_IT+0x1190>
 800585a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800585e:	e01a      	b.n	8005896 <HAL_DMAEx_MultiBufferStart_IT+0x11c6>
 8005860:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005864:	e017      	b.n	8005896 <HAL_DMAEx_MultiBufferStart_IT+0x11c6>
 8005866:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800586a:	e014      	b.n	8005896 <HAL_DMAEx_MultiBufferStart_IT+0x11c6>
 800586c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005870:	e011      	b.n	8005896 <HAL_DMAEx_MultiBufferStart_IT+0x11c6>
 8005872:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005876:	e00e      	b.n	8005896 <HAL_DMAEx_MultiBufferStart_IT+0x11c6>
 8005878:	2340      	movs	r3, #64	; 0x40
 800587a:	e00c      	b.n	8005896 <HAL_DMAEx_MultiBufferStart_IT+0x11c6>
 800587c:	2340      	movs	r3, #64	; 0x40
 800587e:	e00a      	b.n	8005896 <HAL_DMAEx_MultiBufferStart_IT+0x11c6>
 8005880:	2340      	movs	r3, #64	; 0x40
 8005882:	e008      	b.n	8005896 <HAL_DMAEx_MultiBufferStart_IT+0x11c6>
 8005884:	2340      	movs	r3, #64	; 0x40
 8005886:	e006      	b.n	8005896 <HAL_DMAEx_MultiBufferStart_IT+0x11c6>
 8005888:	2301      	movs	r3, #1
 800588a:	e004      	b.n	8005896 <HAL_DMAEx_MultiBufferStart_IT+0x11c6>
 800588c:	2301      	movs	r3, #1
 800588e:	e002      	b.n	8005896 <HAL_DMAEx_MultiBufferStart_IT+0x11c6>
 8005890:	2301      	movs	r3, #1
 8005892:	e000      	b.n	8005896 <HAL_DMAEx_MultiBufferStart_IT+0x11c6>
 8005894:	2301      	movs	r3, #1
 8005896:	4a28      	ldr	r2, [pc, #160]	; (8005938 <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 8005898:	6093      	str	r3, [r2, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	681a      	ldr	r2, [r3, #0]
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f042 0216 	orr.w	r2, r2, #22
 80058a8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	695a      	ldr	r2, [r3, #20]
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80058b8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d103      	bne.n	80058ca <HAL_DMAEx_MultiBufferStart_IT+0x11fa>
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d007      	beq.n	80058da <HAL_DMAEx_MultiBufferStart_IT+0x120a>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	681a      	ldr	r2, [r3, #0]
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f042 0208 	orr.w	r2, r2, #8
 80058d8:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma); 
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	681a      	ldr	r2, [r3, #0]
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f042 0201 	orr.w	r2, r2, #1
 80058e8:	601a      	str	r2, [r3, #0]
 80058ea:	e005      	b.n	80058f8 <HAL_DMAEx_MultiBufferStart_IT+0x1228>
  }
  else
  {     
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	2200      	movs	r2, #0
 80058f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80058f4:	2302      	movs	r3, #2
 80058f6:	75fb      	strb	r3, [r7, #23]
  }  
  return status; 
 80058f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80058fa:	4618      	mov	r0, r3
 80058fc:	3718      	adds	r7, #24
 80058fe:	46bd      	mov	sp, r7
 8005900:	bd80      	pop	{r7, pc}
 8005902:	bf00      	nop
 8005904:	40026058 	.word	0x40026058
 8005908:	40026010 	.word	0x40026010
 800590c:	40026410 	.word	0x40026410
 8005910:	40026070 	.word	0x40026070
 8005914:	40026470 	.word	0x40026470
 8005918:	40026028 	.word	0x40026028
 800591c:	40026428 	.word	0x40026428
 8005920:	40026088 	.word	0x40026088
 8005924:	40026488 	.word	0x40026488
 8005928:	40026040 	.word	0x40026040
 800592c:	40026440 	.word	0x40026440
 8005930:	400260a0 	.word	0x400260a0
 8005934:	400264a0 	.word	0x400264a0
 8005938:	40026000 	.word	0x40026000

0800593c <HAL_DMAEx_ChangeMemory>:
  *         MEMORY1 and the MEMORY1 address can be changed only when the current 
  *         transfer use MEMORY0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ChangeMemory(DMA_HandleTypeDef *hdma, uint32_t Address, HAL_DMA_MemoryTypeDef memory)
{
 800593c:	b480      	push	{r7}
 800593e:	b085      	sub	sp, #20
 8005940:	af00      	add	r7, sp, #0
 8005942:	60f8      	str	r0, [r7, #12]
 8005944:	60b9      	str	r1, [r7, #8]
 8005946:	4613      	mov	r3, r2
 8005948:	71fb      	strb	r3, [r7, #7]
  if(memory == MEMORY0)
 800594a:	79fb      	ldrb	r3, [r7, #7]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d104      	bne.n	800595a <HAL_DMAEx_ChangeMemory+0x1e>
  {
    /* change the memory0 address */
    hdma->Instance->M0AR = Address;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	68ba      	ldr	r2, [r7, #8]
 8005956:	60da      	str	r2, [r3, #12]
 8005958:	e003      	b.n	8005962 <HAL_DMAEx_ChangeMemory+0x26>
  }
  else
  {
    /* change the memory1 address */
    hdma->Instance->M1AR = Address;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	68ba      	ldr	r2, [r7, #8]
 8005960:	611a      	str	r2, [r3, #16]
  }
  
  return HAL_OK;
 8005962:	2300      	movs	r3, #0
}
 8005964:	4618      	mov	r0, r3
 8005966:	3714      	adds	r7, #20
 8005968:	46bd      	mov	sp, r7
 800596a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596e:	4770      	bx	lr

08005970 <DMA_MultiBufferSetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005970:	b480      	push	{r7}
 8005972:	b085      	sub	sp, #20
 8005974:	af00      	add	r7, sp, #0
 8005976:	60f8      	str	r0, [r7, #12]
 8005978:	60b9      	str	r1, [r7, #8]
 800597a:	607a      	str	r2, [r7, #4]
 800597c:	603b      	str	r3, [r7, #0]
  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	683a      	ldr	r2, [r7, #0]
 8005984:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	689b      	ldr	r3, [r3, #8]
 800598a:	2b40      	cmp	r3, #64	; 0x40
 800598c:	d108      	bne.n	80059a0 <DMA_MultiBufferSetConfig+0x30>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	687a      	ldr	r2, [r7, #4]
 8005994:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	68ba      	ldr	r2, [r7, #8]
 800599c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800599e:	e007      	b.n	80059b0 <DMA_MultiBufferSetConfig+0x40>
    hdma->Instance->PAR = SrcAddress;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	68ba      	ldr	r2, [r7, #8]
 80059a6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	687a      	ldr	r2, [r7, #4]
 80059ae:	60da      	str	r2, [r3, #12]
}
 80059b0:	bf00      	nop
 80059b2:	3714      	adds	r7, #20
 80059b4:	46bd      	mov	sp, r7
 80059b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ba:	4770      	bx	lr

080059bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80059bc:	b480      	push	{r7}
 80059be:	b089      	sub	sp, #36	; 0x24
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
 80059c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80059c6:	2300      	movs	r3, #0
 80059c8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80059ca:	2300      	movs	r3, #0
 80059cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80059ce:	2300      	movs	r3, #0
 80059d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80059d2:	2300      	movs	r3, #0
 80059d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80059d6:	2300      	movs	r3, #0
 80059d8:	61fb      	str	r3, [r7, #28]
 80059da:	e175      	b.n	8005cc8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80059dc:	2201      	movs	r2, #1
 80059de:	69fb      	ldr	r3, [r7, #28]
 80059e0:	fa02 f303 	lsl.w	r3, r2, r3
 80059e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	697a      	ldr	r2, [r7, #20]
 80059ec:	4013      	ands	r3, r2
 80059ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80059f0:	693a      	ldr	r2, [r7, #16]
 80059f2:	697b      	ldr	r3, [r7, #20]
 80059f4:	429a      	cmp	r2, r3
 80059f6:	f040 8164 	bne.w	8005cc2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	685b      	ldr	r3, [r3, #4]
 80059fe:	f003 0303 	and.w	r3, r3, #3
 8005a02:	2b01      	cmp	r3, #1
 8005a04:	d005      	beq.n	8005a12 <HAL_GPIO_Init+0x56>
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	685b      	ldr	r3, [r3, #4]
 8005a0a:	f003 0303 	and.w	r3, r3, #3
 8005a0e:	2b02      	cmp	r3, #2
 8005a10:	d130      	bne.n	8005a74 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	689b      	ldr	r3, [r3, #8]
 8005a16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005a18:	69fb      	ldr	r3, [r7, #28]
 8005a1a:	005b      	lsls	r3, r3, #1
 8005a1c:	2203      	movs	r2, #3
 8005a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8005a22:	43db      	mvns	r3, r3
 8005a24:	69ba      	ldr	r2, [r7, #24]
 8005a26:	4013      	ands	r3, r2
 8005a28:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	68da      	ldr	r2, [r3, #12]
 8005a2e:	69fb      	ldr	r3, [r7, #28]
 8005a30:	005b      	lsls	r3, r3, #1
 8005a32:	fa02 f303 	lsl.w	r3, r2, r3
 8005a36:	69ba      	ldr	r2, [r7, #24]
 8005a38:	4313      	orrs	r3, r2
 8005a3a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	69ba      	ldr	r2, [r7, #24]
 8005a40:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	685b      	ldr	r3, [r3, #4]
 8005a46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005a48:	2201      	movs	r2, #1
 8005a4a:	69fb      	ldr	r3, [r7, #28]
 8005a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8005a50:	43db      	mvns	r3, r3
 8005a52:	69ba      	ldr	r2, [r7, #24]
 8005a54:	4013      	ands	r3, r2
 8005a56:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	685b      	ldr	r3, [r3, #4]
 8005a5c:	091b      	lsrs	r3, r3, #4
 8005a5e:	f003 0201 	and.w	r2, r3, #1
 8005a62:	69fb      	ldr	r3, [r7, #28]
 8005a64:	fa02 f303 	lsl.w	r3, r2, r3
 8005a68:	69ba      	ldr	r2, [r7, #24]
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	69ba      	ldr	r2, [r7, #24]
 8005a72:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	685b      	ldr	r3, [r3, #4]
 8005a78:	f003 0303 	and.w	r3, r3, #3
 8005a7c:	2b03      	cmp	r3, #3
 8005a7e:	d017      	beq.n	8005ab0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	68db      	ldr	r3, [r3, #12]
 8005a84:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8005a86:	69fb      	ldr	r3, [r7, #28]
 8005a88:	005b      	lsls	r3, r3, #1
 8005a8a:	2203      	movs	r2, #3
 8005a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8005a90:	43db      	mvns	r3, r3
 8005a92:	69ba      	ldr	r2, [r7, #24]
 8005a94:	4013      	ands	r3, r2
 8005a96:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	689a      	ldr	r2, [r3, #8]
 8005a9c:	69fb      	ldr	r3, [r7, #28]
 8005a9e:	005b      	lsls	r3, r3, #1
 8005aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8005aa4:	69ba      	ldr	r2, [r7, #24]
 8005aa6:	4313      	orrs	r3, r2
 8005aa8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	69ba      	ldr	r2, [r7, #24]
 8005aae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	685b      	ldr	r3, [r3, #4]
 8005ab4:	f003 0303 	and.w	r3, r3, #3
 8005ab8:	2b02      	cmp	r3, #2
 8005aba:	d123      	bne.n	8005b04 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8005abc:	69fb      	ldr	r3, [r7, #28]
 8005abe:	08da      	lsrs	r2, r3, #3
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	3208      	adds	r2, #8
 8005ac4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ac8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005aca:	69fb      	ldr	r3, [r7, #28]
 8005acc:	f003 0307 	and.w	r3, r3, #7
 8005ad0:	009b      	lsls	r3, r3, #2
 8005ad2:	220f      	movs	r2, #15
 8005ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ad8:	43db      	mvns	r3, r3
 8005ada:	69ba      	ldr	r2, [r7, #24]
 8005adc:	4013      	ands	r3, r2
 8005ade:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	691a      	ldr	r2, [r3, #16]
 8005ae4:	69fb      	ldr	r3, [r7, #28]
 8005ae6:	f003 0307 	and.w	r3, r3, #7
 8005aea:	009b      	lsls	r3, r3, #2
 8005aec:	fa02 f303 	lsl.w	r3, r2, r3
 8005af0:	69ba      	ldr	r2, [r7, #24]
 8005af2:	4313      	orrs	r3, r2
 8005af4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8005af6:	69fb      	ldr	r3, [r7, #28]
 8005af8:	08da      	lsrs	r2, r3, #3
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	3208      	adds	r2, #8
 8005afe:	69b9      	ldr	r1, [r7, #24]
 8005b00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005b0a:	69fb      	ldr	r3, [r7, #28]
 8005b0c:	005b      	lsls	r3, r3, #1
 8005b0e:	2203      	movs	r2, #3
 8005b10:	fa02 f303 	lsl.w	r3, r2, r3
 8005b14:	43db      	mvns	r3, r3
 8005b16:	69ba      	ldr	r2, [r7, #24]
 8005b18:	4013      	ands	r3, r2
 8005b1a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	685b      	ldr	r3, [r3, #4]
 8005b20:	f003 0203 	and.w	r2, r3, #3
 8005b24:	69fb      	ldr	r3, [r7, #28]
 8005b26:	005b      	lsls	r3, r3, #1
 8005b28:	fa02 f303 	lsl.w	r3, r2, r3
 8005b2c:	69ba      	ldr	r2, [r7, #24]
 8005b2e:	4313      	orrs	r3, r2
 8005b30:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	69ba      	ldr	r2, [r7, #24]
 8005b36:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	685b      	ldr	r3, [r3, #4]
 8005b3c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	f000 80be 	beq.w	8005cc2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005b46:	4b66      	ldr	r3, [pc, #408]	; (8005ce0 <HAL_GPIO_Init+0x324>)
 8005b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b4a:	4a65      	ldr	r2, [pc, #404]	; (8005ce0 <HAL_GPIO_Init+0x324>)
 8005b4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005b50:	6453      	str	r3, [r2, #68]	; 0x44
 8005b52:	4b63      	ldr	r3, [pc, #396]	; (8005ce0 <HAL_GPIO_Init+0x324>)
 8005b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b5a:	60fb      	str	r3, [r7, #12]
 8005b5c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8005b5e:	4a61      	ldr	r2, [pc, #388]	; (8005ce4 <HAL_GPIO_Init+0x328>)
 8005b60:	69fb      	ldr	r3, [r7, #28]
 8005b62:	089b      	lsrs	r3, r3, #2
 8005b64:	3302      	adds	r3, #2
 8005b66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005b6c:	69fb      	ldr	r3, [r7, #28]
 8005b6e:	f003 0303 	and.w	r3, r3, #3
 8005b72:	009b      	lsls	r3, r3, #2
 8005b74:	220f      	movs	r2, #15
 8005b76:	fa02 f303 	lsl.w	r3, r2, r3
 8005b7a:	43db      	mvns	r3, r3
 8005b7c:	69ba      	ldr	r2, [r7, #24]
 8005b7e:	4013      	ands	r3, r2
 8005b80:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	4a58      	ldr	r2, [pc, #352]	; (8005ce8 <HAL_GPIO_Init+0x32c>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d037      	beq.n	8005bfa <HAL_GPIO_Init+0x23e>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	4a57      	ldr	r2, [pc, #348]	; (8005cec <HAL_GPIO_Init+0x330>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d031      	beq.n	8005bf6 <HAL_GPIO_Init+0x23a>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	4a56      	ldr	r2, [pc, #344]	; (8005cf0 <HAL_GPIO_Init+0x334>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d02b      	beq.n	8005bf2 <HAL_GPIO_Init+0x236>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	4a55      	ldr	r2, [pc, #340]	; (8005cf4 <HAL_GPIO_Init+0x338>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d025      	beq.n	8005bee <HAL_GPIO_Init+0x232>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	4a54      	ldr	r2, [pc, #336]	; (8005cf8 <HAL_GPIO_Init+0x33c>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d01f      	beq.n	8005bea <HAL_GPIO_Init+0x22e>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	4a53      	ldr	r2, [pc, #332]	; (8005cfc <HAL_GPIO_Init+0x340>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d019      	beq.n	8005be6 <HAL_GPIO_Init+0x22a>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	4a52      	ldr	r2, [pc, #328]	; (8005d00 <HAL_GPIO_Init+0x344>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d013      	beq.n	8005be2 <HAL_GPIO_Init+0x226>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	4a51      	ldr	r2, [pc, #324]	; (8005d04 <HAL_GPIO_Init+0x348>)
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d00d      	beq.n	8005bde <HAL_GPIO_Init+0x222>
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	4a50      	ldr	r2, [pc, #320]	; (8005d08 <HAL_GPIO_Init+0x34c>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d007      	beq.n	8005bda <HAL_GPIO_Init+0x21e>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	4a4f      	ldr	r2, [pc, #316]	; (8005d0c <HAL_GPIO_Init+0x350>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d101      	bne.n	8005bd6 <HAL_GPIO_Init+0x21a>
 8005bd2:	2309      	movs	r3, #9
 8005bd4:	e012      	b.n	8005bfc <HAL_GPIO_Init+0x240>
 8005bd6:	230a      	movs	r3, #10
 8005bd8:	e010      	b.n	8005bfc <HAL_GPIO_Init+0x240>
 8005bda:	2308      	movs	r3, #8
 8005bdc:	e00e      	b.n	8005bfc <HAL_GPIO_Init+0x240>
 8005bde:	2307      	movs	r3, #7
 8005be0:	e00c      	b.n	8005bfc <HAL_GPIO_Init+0x240>
 8005be2:	2306      	movs	r3, #6
 8005be4:	e00a      	b.n	8005bfc <HAL_GPIO_Init+0x240>
 8005be6:	2305      	movs	r3, #5
 8005be8:	e008      	b.n	8005bfc <HAL_GPIO_Init+0x240>
 8005bea:	2304      	movs	r3, #4
 8005bec:	e006      	b.n	8005bfc <HAL_GPIO_Init+0x240>
 8005bee:	2303      	movs	r3, #3
 8005bf0:	e004      	b.n	8005bfc <HAL_GPIO_Init+0x240>
 8005bf2:	2302      	movs	r3, #2
 8005bf4:	e002      	b.n	8005bfc <HAL_GPIO_Init+0x240>
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	e000      	b.n	8005bfc <HAL_GPIO_Init+0x240>
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	69fa      	ldr	r2, [r7, #28]
 8005bfe:	f002 0203 	and.w	r2, r2, #3
 8005c02:	0092      	lsls	r2, r2, #2
 8005c04:	4093      	lsls	r3, r2
 8005c06:	69ba      	ldr	r2, [r7, #24]
 8005c08:	4313      	orrs	r3, r2
 8005c0a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8005c0c:	4935      	ldr	r1, [pc, #212]	; (8005ce4 <HAL_GPIO_Init+0x328>)
 8005c0e:	69fb      	ldr	r3, [r7, #28]
 8005c10:	089b      	lsrs	r3, r3, #2
 8005c12:	3302      	adds	r3, #2
 8005c14:	69ba      	ldr	r2, [r7, #24]
 8005c16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005c1a:	4b3d      	ldr	r3, [pc, #244]	; (8005d10 <HAL_GPIO_Init+0x354>)
 8005c1c:	689b      	ldr	r3, [r3, #8]
 8005c1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005c20:	693b      	ldr	r3, [r7, #16]
 8005c22:	43db      	mvns	r3, r3
 8005c24:	69ba      	ldr	r2, [r7, #24]
 8005c26:	4013      	ands	r3, r2
 8005c28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	685b      	ldr	r3, [r3, #4]
 8005c2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d003      	beq.n	8005c3e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005c36:	69ba      	ldr	r2, [r7, #24]
 8005c38:	693b      	ldr	r3, [r7, #16]
 8005c3a:	4313      	orrs	r3, r2
 8005c3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005c3e:	4a34      	ldr	r2, [pc, #208]	; (8005d10 <HAL_GPIO_Init+0x354>)
 8005c40:	69bb      	ldr	r3, [r7, #24]
 8005c42:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005c44:	4b32      	ldr	r3, [pc, #200]	; (8005d10 <HAL_GPIO_Init+0x354>)
 8005c46:	68db      	ldr	r3, [r3, #12]
 8005c48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005c4a:	693b      	ldr	r3, [r7, #16]
 8005c4c:	43db      	mvns	r3, r3
 8005c4e:	69ba      	ldr	r2, [r7, #24]
 8005c50:	4013      	ands	r3, r2
 8005c52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	685b      	ldr	r3, [r3, #4]
 8005c58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d003      	beq.n	8005c68 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005c60:	69ba      	ldr	r2, [r7, #24]
 8005c62:	693b      	ldr	r3, [r7, #16]
 8005c64:	4313      	orrs	r3, r2
 8005c66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005c68:	4a29      	ldr	r2, [pc, #164]	; (8005d10 <HAL_GPIO_Init+0x354>)
 8005c6a:	69bb      	ldr	r3, [r7, #24]
 8005c6c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005c6e:	4b28      	ldr	r3, [pc, #160]	; (8005d10 <HAL_GPIO_Init+0x354>)
 8005c70:	685b      	ldr	r3, [r3, #4]
 8005c72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005c74:	693b      	ldr	r3, [r7, #16]
 8005c76:	43db      	mvns	r3, r3
 8005c78:	69ba      	ldr	r2, [r7, #24]
 8005c7a:	4013      	ands	r3, r2
 8005c7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	685b      	ldr	r3, [r3, #4]
 8005c82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d003      	beq.n	8005c92 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005c8a:	69ba      	ldr	r2, [r7, #24]
 8005c8c:	693b      	ldr	r3, [r7, #16]
 8005c8e:	4313      	orrs	r3, r2
 8005c90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005c92:	4a1f      	ldr	r2, [pc, #124]	; (8005d10 <HAL_GPIO_Init+0x354>)
 8005c94:	69bb      	ldr	r3, [r7, #24]
 8005c96:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005c98:	4b1d      	ldr	r3, [pc, #116]	; (8005d10 <HAL_GPIO_Init+0x354>)
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005c9e:	693b      	ldr	r3, [r7, #16]
 8005ca0:	43db      	mvns	r3, r3
 8005ca2:	69ba      	ldr	r2, [r7, #24]
 8005ca4:	4013      	ands	r3, r2
 8005ca6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	685b      	ldr	r3, [r3, #4]
 8005cac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d003      	beq.n	8005cbc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005cb4:	69ba      	ldr	r2, [r7, #24]
 8005cb6:	693b      	ldr	r3, [r7, #16]
 8005cb8:	4313      	orrs	r3, r2
 8005cba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005cbc:	4a14      	ldr	r2, [pc, #80]	; (8005d10 <HAL_GPIO_Init+0x354>)
 8005cbe:	69bb      	ldr	r3, [r7, #24]
 8005cc0:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8005cc2:	69fb      	ldr	r3, [r7, #28]
 8005cc4:	3301      	adds	r3, #1
 8005cc6:	61fb      	str	r3, [r7, #28]
 8005cc8:	69fb      	ldr	r3, [r7, #28]
 8005cca:	2b0f      	cmp	r3, #15
 8005ccc:	f67f ae86 	bls.w	80059dc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8005cd0:	bf00      	nop
 8005cd2:	bf00      	nop
 8005cd4:	3724      	adds	r7, #36	; 0x24
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cdc:	4770      	bx	lr
 8005cde:	bf00      	nop
 8005ce0:	40023800 	.word	0x40023800
 8005ce4:	40013800 	.word	0x40013800
 8005ce8:	40020000 	.word	0x40020000
 8005cec:	40020400 	.word	0x40020400
 8005cf0:	40020800 	.word	0x40020800
 8005cf4:	40020c00 	.word	0x40020c00
 8005cf8:	40021000 	.word	0x40021000
 8005cfc:	40021400 	.word	0x40021400
 8005d00:	40021800 	.word	0x40021800
 8005d04:	40021c00 	.word	0x40021c00
 8005d08:	40022000 	.word	0x40022000
 8005d0c:	40022400 	.word	0x40022400
 8005d10:	40013c00 	.word	0x40013c00

08005d14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005d14:	b480      	push	{r7}
 8005d16:	b083      	sub	sp, #12
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
 8005d1c:	460b      	mov	r3, r1
 8005d1e:	807b      	strh	r3, [r7, #2]
 8005d20:	4613      	mov	r3, r2
 8005d22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005d24:	787b      	ldrb	r3, [r7, #1]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d003      	beq.n	8005d32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005d2a:	887a      	ldrh	r2, [r7, #2]
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8005d30:	e003      	b.n	8005d3a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8005d32:	887b      	ldrh	r3, [r7, #2]
 8005d34:	041a      	lsls	r2, r3, #16
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	619a      	str	r2, [r3, #24]
}
 8005d3a:	bf00      	nop
 8005d3c:	370c      	adds	r7, #12
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d44:	4770      	bx	lr
	...

08005d48 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b082      	sub	sp, #8
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d101      	bne.n	8005d5a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005d56:	2301      	movs	r3, #1
 8005d58:	e07f      	b.n	8005e5a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d60:	b2db      	uxtb	r3, r3
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d106      	bne.n	8005d74 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2200      	movs	r2, #0
 8005d6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005d6e:	6878      	ldr	r0, [r7, #4]
 8005d70:	f000 f87a 	bl	8005e68 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2224      	movs	r2, #36	; 0x24
 8005d78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	681a      	ldr	r2, [r3, #0]
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f022 0201 	bic.w	r2, r2, #1
 8005d8a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	685a      	ldr	r2, [r3, #4]
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005d98:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	689a      	ldr	r2, [r3, #8]
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005da8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	68db      	ldr	r3, [r3, #12]
 8005dae:	2b01      	cmp	r3, #1
 8005db0:	d107      	bne.n	8005dc2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	689a      	ldr	r2, [r3, #8]
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005dbe:	609a      	str	r2, [r3, #8]
 8005dc0:	e006      	b.n	8005dd0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	689a      	ldr	r2, [r3, #8]
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005dce:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	68db      	ldr	r3, [r3, #12]
 8005dd4:	2b02      	cmp	r3, #2
 8005dd6:	d104      	bne.n	8005de2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005de0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	6859      	ldr	r1, [r3, #4]
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681a      	ldr	r2, [r3, #0]
 8005dec:	4b1d      	ldr	r3, [pc, #116]	; (8005e64 <HAL_I2C_Init+0x11c>)
 8005dee:	430b      	orrs	r3, r1
 8005df0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	68da      	ldr	r2, [r3, #12]
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005e00:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	691a      	ldr	r2, [r3, #16]
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	695b      	ldr	r3, [r3, #20]
 8005e0a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	699b      	ldr	r3, [r3, #24]
 8005e12:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	430a      	orrs	r2, r1
 8005e1a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	69d9      	ldr	r1, [r3, #28]
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6a1a      	ldr	r2, [r3, #32]
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	430a      	orrs	r2, r1
 8005e2a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	681a      	ldr	r2, [r3, #0]
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f042 0201 	orr.w	r2, r2, #1
 8005e3a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2200      	movs	r2, #0
 8005e40:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2220      	movs	r2, #32
 8005e46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2200      	movs	r2, #0
 8005e54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005e58:	2300      	movs	r3, #0
}
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	3708      	adds	r7, #8
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	bd80      	pop	{r7, pc}
 8005e62:	bf00      	nop
 8005e64:	02008000 	.word	0x02008000

08005e68 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8005e68:	b480      	push	{r7}
 8005e6a:	b083      	sub	sp, #12
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8005e70:	bf00      	nop
 8005e72:	370c      	adds	r7, #12
 8005e74:	46bd      	mov	sp, r7
 8005e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7a:	4770      	bx	lr

08005e7c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b088      	sub	sp, #32
 8005e80:	af02      	add	r7, sp, #8
 8005e82:	60f8      	str	r0, [r7, #12]
 8005e84:	4608      	mov	r0, r1
 8005e86:	4611      	mov	r1, r2
 8005e88:	461a      	mov	r2, r3
 8005e8a:	4603      	mov	r3, r0
 8005e8c:	817b      	strh	r3, [r7, #10]
 8005e8e:	460b      	mov	r3, r1
 8005e90:	813b      	strh	r3, [r7, #8]
 8005e92:	4613      	mov	r3, r2
 8005e94:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e9c:	b2db      	uxtb	r3, r3
 8005e9e:	2b20      	cmp	r3, #32
 8005ea0:	f040 80f9 	bne.w	8006096 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ea4:	6a3b      	ldr	r3, [r7, #32]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d002      	beq.n	8005eb0 <HAL_I2C_Mem_Write+0x34>
 8005eaa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d105      	bne.n	8005ebc <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005eb6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005eb8:	2301      	movs	r3, #1
 8005eba:	e0ed      	b.n	8006098 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005ec2:	2b01      	cmp	r3, #1
 8005ec4:	d101      	bne.n	8005eca <HAL_I2C_Mem_Write+0x4e>
 8005ec6:	2302      	movs	r3, #2
 8005ec8:	e0e6      	b.n	8006098 <HAL_I2C_Mem_Write+0x21c>
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	2201      	movs	r2, #1
 8005ece:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005ed2:	f7fd faf7 	bl	80034c4 <HAL_GetTick>
 8005ed6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005ed8:	697b      	ldr	r3, [r7, #20]
 8005eda:	9300      	str	r3, [sp, #0]
 8005edc:	2319      	movs	r3, #25
 8005ede:	2201      	movs	r2, #1
 8005ee0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005ee4:	68f8      	ldr	r0, [r7, #12]
 8005ee6:	f000 fac3 	bl	8006470 <I2C_WaitOnFlagUntilTimeout>
 8005eea:	4603      	mov	r3, r0
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d001      	beq.n	8005ef4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8005ef0:	2301      	movs	r3, #1
 8005ef2:	e0d1      	b.n	8006098 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	2221      	movs	r2, #33	; 0x21
 8005ef8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	2240      	movs	r2, #64	; 0x40
 8005f00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	2200      	movs	r2, #0
 8005f08:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	6a3a      	ldr	r2, [r7, #32]
 8005f0e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005f14:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	2200      	movs	r2, #0
 8005f1a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005f1c:	88f8      	ldrh	r0, [r7, #6]
 8005f1e:	893a      	ldrh	r2, [r7, #8]
 8005f20:	8979      	ldrh	r1, [r7, #10]
 8005f22:	697b      	ldr	r3, [r7, #20]
 8005f24:	9301      	str	r3, [sp, #4]
 8005f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f28:	9300      	str	r3, [sp, #0]
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	68f8      	ldr	r0, [r7, #12]
 8005f2e:	f000 f9d3 	bl	80062d8 <I2C_RequestMemoryWrite>
 8005f32:	4603      	mov	r3, r0
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d005      	beq.n	8005f44 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005f40:	2301      	movs	r3, #1
 8005f42:	e0a9      	b.n	8006098 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f48:	b29b      	uxth	r3, r3
 8005f4a:	2bff      	cmp	r3, #255	; 0xff
 8005f4c:	d90e      	bls.n	8005f6c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	22ff      	movs	r2, #255	; 0xff
 8005f52:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f58:	b2da      	uxtb	r2, r3
 8005f5a:	8979      	ldrh	r1, [r7, #10]
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	9300      	str	r3, [sp, #0]
 8005f60:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005f64:	68f8      	ldr	r0, [r7, #12]
 8005f66:	f000 fc2b 	bl	80067c0 <I2C_TransferConfig>
 8005f6a:	e00f      	b.n	8005f8c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f70:	b29a      	uxth	r2, r3
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f7a:	b2da      	uxtb	r2, r3
 8005f7c:	8979      	ldrh	r1, [r7, #10]
 8005f7e:	2300      	movs	r3, #0
 8005f80:	9300      	str	r3, [sp, #0]
 8005f82:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005f86:	68f8      	ldr	r0, [r7, #12]
 8005f88:	f000 fc1a 	bl	80067c0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005f8c:	697a      	ldr	r2, [r7, #20]
 8005f8e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005f90:	68f8      	ldr	r0, [r7, #12]
 8005f92:	f000 faad 	bl	80064f0 <I2C_WaitOnTXISFlagUntilTimeout>
 8005f96:	4603      	mov	r3, r0
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d001      	beq.n	8005fa0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8005f9c:	2301      	movs	r3, #1
 8005f9e:	e07b      	b.n	8006098 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fa4:	781a      	ldrb	r2, [r3, #0]
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fb0:	1c5a      	adds	r2, r3, #1
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fba:	b29b      	uxth	r3, r3
 8005fbc:	3b01      	subs	r3, #1
 8005fbe:	b29a      	uxth	r2, r3
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fc8:	3b01      	subs	r3, #1
 8005fca:	b29a      	uxth	r2, r3
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fd4:	b29b      	uxth	r3, r3
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d034      	beq.n	8006044 <HAL_I2C_Mem_Write+0x1c8>
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d130      	bne.n	8006044 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005fe2:	697b      	ldr	r3, [r7, #20]
 8005fe4:	9300      	str	r3, [sp, #0]
 8005fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fe8:	2200      	movs	r2, #0
 8005fea:	2180      	movs	r1, #128	; 0x80
 8005fec:	68f8      	ldr	r0, [r7, #12]
 8005fee:	f000 fa3f 	bl	8006470 <I2C_WaitOnFlagUntilTimeout>
 8005ff2:	4603      	mov	r3, r0
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d001      	beq.n	8005ffc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8005ff8:	2301      	movs	r3, #1
 8005ffa:	e04d      	b.n	8006098 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006000:	b29b      	uxth	r3, r3
 8006002:	2bff      	cmp	r3, #255	; 0xff
 8006004:	d90e      	bls.n	8006024 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	22ff      	movs	r2, #255	; 0xff
 800600a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006010:	b2da      	uxtb	r2, r3
 8006012:	8979      	ldrh	r1, [r7, #10]
 8006014:	2300      	movs	r3, #0
 8006016:	9300      	str	r3, [sp, #0]
 8006018:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800601c:	68f8      	ldr	r0, [r7, #12]
 800601e:	f000 fbcf 	bl	80067c0 <I2C_TransferConfig>
 8006022:	e00f      	b.n	8006044 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006028:	b29a      	uxth	r2, r3
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006032:	b2da      	uxtb	r2, r3
 8006034:	8979      	ldrh	r1, [r7, #10]
 8006036:	2300      	movs	r3, #0
 8006038:	9300      	str	r3, [sp, #0]
 800603a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800603e:	68f8      	ldr	r0, [r7, #12]
 8006040:	f000 fbbe 	bl	80067c0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006048:	b29b      	uxth	r3, r3
 800604a:	2b00      	cmp	r3, #0
 800604c:	d19e      	bne.n	8005f8c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800604e:	697a      	ldr	r2, [r7, #20]
 8006050:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006052:	68f8      	ldr	r0, [r7, #12]
 8006054:	f000 fa8c 	bl	8006570 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006058:	4603      	mov	r3, r0
 800605a:	2b00      	cmp	r3, #0
 800605c:	d001      	beq.n	8006062 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800605e:	2301      	movs	r3, #1
 8006060:	e01a      	b.n	8006098 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	2220      	movs	r2, #32
 8006068:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	6859      	ldr	r1, [r3, #4]
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681a      	ldr	r2, [r3, #0]
 8006074:	4b0a      	ldr	r3, [pc, #40]	; (80060a0 <HAL_I2C_Mem_Write+0x224>)
 8006076:	400b      	ands	r3, r1
 8006078:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	2220      	movs	r2, #32
 800607e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	2200      	movs	r2, #0
 8006086:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	2200      	movs	r2, #0
 800608e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006092:	2300      	movs	r3, #0
 8006094:	e000      	b.n	8006098 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8006096:	2302      	movs	r3, #2
  }
}
 8006098:	4618      	mov	r0, r3
 800609a:	3718      	adds	r7, #24
 800609c:	46bd      	mov	sp, r7
 800609e:	bd80      	pop	{r7, pc}
 80060a0:	fe00e800 	.word	0xfe00e800

080060a4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b088      	sub	sp, #32
 80060a8:	af02      	add	r7, sp, #8
 80060aa:	60f8      	str	r0, [r7, #12]
 80060ac:	4608      	mov	r0, r1
 80060ae:	4611      	mov	r1, r2
 80060b0:	461a      	mov	r2, r3
 80060b2:	4603      	mov	r3, r0
 80060b4:	817b      	strh	r3, [r7, #10]
 80060b6:	460b      	mov	r3, r1
 80060b8:	813b      	strh	r3, [r7, #8]
 80060ba:	4613      	mov	r3, r2
 80060bc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80060c4:	b2db      	uxtb	r3, r3
 80060c6:	2b20      	cmp	r3, #32
 80060c8:	f040 80fd 	bne.w	80062c6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80060cc:	6a3b      	ldr	r3, [r7, #32]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d002      	beq.n	80060d8 <HAL_I2C_Mem_Read+0x34>
 80060d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d105      	bne.n	80060e4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80060de:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80060e0:	2301      	movs	r3, #1
 80060e2:	e0f1      	b.n	80062c8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80060ea:	2b01      	cmp	r3, #1
 80060ec:	d101      	bne.n	80060f2 <HAL_I2C_Mem_Read+0x4e>
 80060ee:	2302      	movs	r3, #2
 80060f0:	e0ea      	b.n	80062c8 <HAL_I2C_Mem_Read+0x224>
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	2201      	movs	r2, #1
 80060f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80060fa:	f7fd f9e3 	bl	80034c4 <HAL_GetTick>
 80060fe:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006100:	697b      	ldr	r3, [r7, #20]
 8006102:	9300      	str	r3, [sp, #0]
 8006104:	2319      	movs	r3, #25
 8006106:	2201      	movs	r2, #1
 8006108:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800610c:	68f8      	ldr	r0, [r7, #12]
 800610e:	f000 f9af 	bl	8006470 <I2C_WaitOnFlagUntilTimeout>
 8006112:	4603      	mov	r3, r0
 8006114:	2b00      	cmp	r3, #0
 8006116:	d001      	beq.n	800611c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8006118:	2301      	movs	r3, #1
 800611a:	e0d5      	b.n	80062c8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	2222      	movs	r2, #34	; 0x22
 8006120:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	2240      	movs	r2, #64	; 0x40
 8006128:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	2200      	movs	r2, #0
 8006130:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	6a3a      	ldr	r2, [r7, #32]
 8006136:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800613c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	2200      	movs	r2, #0
 8006142:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006144:	88f8      	ldrh	r0, [r7, #6]
 8006146:	893a      	ldrh	r2, [r7, #8]
 8006148:	8979      	ldrh	r1, [r7, #10]
 800614a:	697b      	ldr	r3, [r7, #20]
 800614c:	9301      	str	r3, [sp, #4]
 800614e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006150:	9300      	str	r3, [sp, #0]
 8006152:	4603      	mov	r3, r0
 8006154:	68f8      	ldr	r0, [r7, #12]
 8006156:	f000 f913 	bl	8006380 <I2C_RequestMemoryRead>
 800615a:	4603      	mov	r3, r0
 800615c:	2b00      	cmp	r3, #0
 800615e:	d005      	beq.n	800616c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	2200      	movs	r2, #0
 8006164:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006168:	2301      	movs	r3, #1
 800616a:	e0ad      	b.n	80062c8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006170:	b29b      	uxth	r3, r3
 8006172:	2bff      	cmp	r3, #255	; 0xff
 8006174:	d90e      	bls.n	8006194 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	22ff      	movs	r2, #255	; 0xff
 800617a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006180:	b2da      	uxtb	r2, r3
 8006182:	8979      	ldrh	r1, [r7, #10]
 8006184:	4b52      	ldr	r3, [pc, #328]	; (80062d0 <HAL_I2C_Mem_Read+0x22c>)
 8006186:	9300      	str	r3, [sp, #0]
 8006188:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800618c:	68f8      	ldr	r0, [r7, #12]
 800618e:	f000 fb17 	bl	80067c0 <I2C_TransferConfig>
 8006192:	e00f      	b.n	80061b4 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006198:	b29a      	uxth	r2, r3
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061a2:	b2da      	uxtb	r2, r3
 80061a4:	8979      	ldrh	r1, [r7, #10]
 80061a6:	4b4a      	ldr	r3, [pc, #296]	; (80062d0 <HAL_I2C_Mem_Read+0x22c>)
 80061a8:	9300      	str	r3, [sp, #0]
 80061aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80061ae:	68f8      	ldr	r0, [r7, #12]
 80061b0:	f000 fb06 	bl	80067c0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80061b4:	697b      	ldr	r3, [r7, #20]
 80061b6:	9300      	str	r3, [sp, #0]
 80061b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061ba:	2200      	movs	r2, #0
 80061bc:	2104      	movs	r1, #4
 80061be:	68f8      	ldr	r0, [r7, #12]
 80061c0:	f000 f956 	bl	8006470 <I2C_WaitOnFlagUntilTimeout>
 80061c4:	4603      	mov	r3, r0
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d001      	beq.n	80061ce <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80061ca:	2301      	movs	r3, #1
 80061cc:	e07c      	b.n	80062c8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061d8:	b2d2      	uxtb	r2, r2
 80061da:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061e0:	1c5a      	adds	r2, r3, #1
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061ea:	3b01      	subs	r3, #1
 80061ec:	b29a      	uxth	r2, r3
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061f6:	b29b      	uxth	r3, r3
 80061f8:	3b01      	subs	r3, #1
 80061fa:	b29a      	uxth	r2, r3
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006204:	b29b      	uxth	r3, r3
 8006206:	2b00      	cmp	r3, #0
 8006208:	d034      	beq.n	8006274 <HAL_I2C_Mem_Read+0x1d0>
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800620e:	2b00      	cmp	r3, #0
 8006210:	d130      	bne.n	8006274 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006212:	697b      	ldr	r3, [r7, #20]
 8006214:	9300      	str	r3, [sp, #0]
 8006216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006218:	2200      	movs	r2, #0
 800621a:	2180      	movs	r1, #128	; 0x80
 800621c:	68f8      	ldr	r0, [r7, #12]
 800621e:	f000 f927 	bl	8006470 <I2C_WaitOnFlagUntilTimeout>
 8006222:	4603      	mov	r3, r0
 8006224:	2b00      	cmp	r3, #0
 8006226:	d001      	beq.n	800622c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8006228:	2301      	movs	r3, #1
 800622a:	e04d      	b.n	80062c8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006230:	b29b      	uxth	r3, r3
 8006232:	2bff      	cmp	r3, #255	; 0xff
 8006234:	d90e      	bls.n	8006254 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	22ff      	movs	r2, #255	; 0xff
 800623a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006240:	b2da      	uxtb	r2, r3
 8006242:	8979      	ldrh	r1, [r7, #10]
 8006244:	2300      	movs	r3, #0
 8006246:	9300      	str	r3, [sp, #0]
 8006248:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800624c:	68f8      	ldr	r0, [r7, #12]
 800624e:	f000 fab7 	bl	80067c0 <I2C_TransferConfig>
 8006252:	e00f      	b.n	8006274 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006258:	b29a      	uxth	r2, r3
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006262:	b2da      	uxtb	r2, r3
 8006264:	8979      	ldrh	r1, [r7, #10]
 8006266:	2300      	movs	r3, #0
 8006268:	9300      	str	r3, [sp, #0]
 800626a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800626e:	68f8      	ldr	r0, [r7, #12]
 8006270:	f000 faa6 	bl	80067c0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006278:	b29b      	uxth	r3, r3
 800627a:	2b00      	cmp	r3, #0
 800627c:	d19a      	bne.n	80061b4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800627e:	697a      	ldr	r2, [r7, #20]
 8006280:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006282:	68f8      	ldr	r0, [r7, #12]
 8006284:	f000 f974 	bl	8006570 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006288:	4603      	mov	r3, r0
 800628a:	2b00      	cmp	r3, #0
 800628c:	d001      	beq.n	8006292 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800628e:	2301      	movs	r3, #1
 8006290:	e01a      	b.n	80062c8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	2220      	movs	r2, #32
 8006298:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	6859      	ldr	r1, [r3, #4]
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	681a      	ldr	r2, [r3, #0]
 80062a4:	4b0b      	ldr	r3, [pc, #44]	; (80062d4 <HAL_I2C_Mem_Read+0x230>)
 80062a6:	400b      	ands	r3, r1
 80062a8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	2220      	movs	r2, #32
 80062ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	2200      	movs	r2, #0
 80062b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	2200      	movs	r2, #0
 80062be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80062c2:	2300      	movs	r3, #0
 80062c4:	e000      	b.n	80062c8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80062c6:	2302      	movs	r3, #2
  }
}
 80062c8:	4618      	mov	r0, r3
 80062ca:	3718      	adds	r7, #24
 80062cc:	46bd      	mov	sp, r7
 80062ce:	bd80      	pop	{r7, pc}
 80062d0:	80002400 	.word	0x80002400
 80062d4:	fe00e800 	.word	0xfe00e800

080062d8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	b086      	sub	sp, #24
 80062dc:	af02      	add	r7, sp, #8
 80062de:	60f8      	str	r0, [r7, #12]
 80062e0:	4608      	mov	r0, r1
 80062e2:	4611      	mov	r1, r2
 80062e4:	461a      	mov	r2, r3
 80062e6:	4603      	mov	r3, r0
 80062e8:	817b      	strh	r3, [r7, #10]
 80062ea:	460b      	mov	r3, r1
 80062ec:	813b      	strh	r3, [r7, #8]
 80062ee:	4613      	mov	r3, r2
 80062f0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80062f2:	88fb      	ldrh	r3, [r7, #6]
 80062f4:	b2da      	uxtb	r2, r3
 80062f6:	8979      	ldrh	r1, [r7, #10]
 80062f8:	4b20      	ldr	r3, [pc, #128]	; (800637c <I2C_RequestMemoryWrite+0xa4>)
 80062fa:	9300      	str	r3, [sp, #0]
 80062fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006300:	68f8      	ldr	r0, [r7, #12]
 8006302:	f000 fa5d 	bl	80067c0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006306:	69fa      	ldr	r2, [r7, #28]
 8006308:	69b9      	ldr	r1, [r7, #24]
 800630a:	68f8      	ldr	r0, [r7, #12]
 800630c:	f000 f8f0 	bl	80064f0 <I2C_WaitOnTXISFlagUntilTimeout>
 8006310:	4603      	mov	r3, r0
 8006312:	2b00      	cmp	r3, #0
 8006314:	d001      	beq.n	800631a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8006316:	2301      	movs	r3, #1
 8006318:	e02c      	b.n	8006374 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800631a:	88fb      	ldrh	r3, [r7, #6]
 800631c:	2b01      	cmp	r3, #1
 800631e:	d105      	bne.n	800632c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006320:	893b      	ldrh	r3, [r7, #8]
 8006322:	b2da      	uxtb	r2, r3
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	629a      	str	r2, [r3, #40]	; 0x28
 800632a:	e015      	b.n	8006358 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800632c:	893b      	ldrh	r3, [r7, #8]
 800632e:	0a1b      	lsrs	r3, r3, #8
 8006330:	b29b      	uxth	r3, r3
 8006332:	b2da      	uxtb	r2, r3
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800633a:	69fa      	ldr	r2, [r7, #28]
 800633c:	69b9      	ldr	r1, [r7, #24]
 800633e:	68f8      	ldr	r0, [r7, #12]
 8006340:	f000 f8d6 	bl	80064f0 <I2C_WaitOnTXISFlagUntilTimeout>
 8006344:	4603      	mov	r3, r0
 8006346:	2b00      	cmp	r3, #0
 8006348:	d001      	beq.n	800634e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800634a:	2301      	movs	r3, #1
 800634c:	e012      	b.n	8006374 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800634e:	893b      	ldrh	r3, [r7, #8]
 8006350:	b2da      	uxtb	r2, r3
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006358:	69fb      	ldr	r3, [r7, #28]
 800635a:	9300      	str	r3, [sp, #0]
 800635c:	69bb      	ldr	r3, [r7, #24]
 800635e:	2200      	movs	r2, #0
 8006360:	2180      	movs	r1, #128	; 0x80
 8006362:	68f8      	ldr	r0, [r7, #12]
 8006364:	f000 f884 	bl	8006470 <I2C_WaitOnFlagUntilTimeout>
 8006368:	4603      	mov	r3, r0
 800636a:	2b00      	cmp	r3, #0
 800636c:	d001      	beq.n	8006372 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800636e:	2301      	movs	r3, #1
 8006370:	e000      	b.n	8006374 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8006372:	2300      	movs	r3, #0
}
 8006374:	4618      	mov	r0, r3
 8006376:	3710      	adds	r7, #16
 8006378:	46bd      	mov	sp, r7
 800637a:	bd80      	pop	{r7, pc}
 800637c:	80002000 	.word	0x80002000

08006380 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b086      	sub	sp, #24
 8006384:	af02      	add	r7, sp, #8
 8006386:	60f8      	str	r0, [r7, #12]
 8006388:	4608      	mov	r0, r1
 800638a:	4611      	mov	r1, r2
 800638c:	461a      	mov	r2, r3
 800638e:	4603      	mov	r3, r0
 8006390:	817b      	strh	r3, [r7, #10]
 8006392:	460b      	mov	r3, r1
 8006394:	813b      	strh	r3, [r7, #8]
 8006396:	4613      	mov	r3, r2
 8006398:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800639a:	88fb      	ldrh	r3, [r7, #6]
 800639c:	b2da      	uxtb	r2, r3
 800639e:	8979      	ldrh	r1, [r7, #10]
 80063a0:	4b20      	ldr	r3, [pc, #128]	; (8006424 <I2C_RequestMemoryRead+0xa4>)
 80063a2:	9300      	str	r3, [sp, #0]
 80063a4:	2300      	movs	r3, #0
 80063a6:	68f8      	ldr	r0, [r7, #12]
 80063a8:	f000 fa0a 	bl	80067c0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80063ac:	69fa      	ldr	r2, [r7, #28]
 80063ae:	69b9      	ldr	r1, [r7, #24]
 80063b0:	68f8      	ldr	r0, [r7, #12]
 80063b2:	f000 f89d 	bl	80064f0 <I2C_WaitOnTXISFlagUntilTimeout>
 80063b6:	4603      	mov	r3, r0
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d001      	beq.n	80063c0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80063bc:	2301      	movs	r3, #1
 80063be:	e02c      	b.n	800641a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80063c0:	88fb      	ldrh	r3, [r7, #6]
 80063c2:	2b01      	cmp	r3, #1
 80063c4:	d105      	bne.n	80063d2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80063c6:	893b      	ldrh	r3, [r7, #8]
 80063c8:	b2da      	uxtb	r2, r3
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	629a      	str	r2, [r3, #40]	; 0x28
 80063d0:	e015      	b.n	80063fe <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80063d2:	893b      	ldrh	r3, [r7, #8]
 80063d4:	0a1b      	lsrs	r3, r3, #8
 80063d6:	b29b      	uxth	r3, r3
 80063d8:	b2da      	uxtb	r2, r3
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80063e0:	69fa      	ldr	r2, [r7, #28]
 80063e2:	69b9      	ldr	r1, [r7, #24]
 80063e4:	68f8      	ldr	r0, [r7, #12]
 80063e6:	f000 f883 	bl	80064f0 <I2C_WaitOnTXISFlagUntilTimeout>
 80063ea:	4603      	mov	r3, r0
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d001      	beq.n	80063f4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80063f0:	2301      	movs	r3, #1
 80063f2:	e012      	b.n	800641a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80063f4:	893b      	ldrh	r3, [r7, #8]
 80063f6:	b2da      	uxtb	r2, r3
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80063fe:	69fb      	ldr	r3, [r7, #28]
 8006400:	9300      	str	r3, [sp, #0]
 8006402:	69bb      	ldr	r3, [r7, #24]
 8006404:	2200      	movs	r2, #0
 8006406:	2140      	movs	r1, #64	; 0x40
 8006408:	68f8      	ldr	r0, [r7, #12]
 800640a:	f000 f831 	bl	8006470 <I2C_WaitOnFlagUntilTimeout>
 800640e:	4603      	mov	r3, r0
 8006410:	2b00      	cmp	r3, #0
 8006412:	d001      	beq.n	8006418 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8006414:	2301      	movs	r3, #1
 8006416:	e000      	b.n	800641a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8006418:	2300      	movs	r3, #0
}
 800641a:	4618      	mov	r0, r3
 800641c:	3710      	adds	r7, #16
 800641e:	46bd      	mov	sp, r7
 8006420:	bd80      	pop	{r7, pc}
 8006422:	bf00      	nop
 8006424:	80002000 	.word	0x80002000

08006428 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006428:	b480      	push	{r7}
 800642a:	b083      	sub	sp, #12
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	699b      	ldr	r3, [r3, #24]
 8006436:	f003 0302 	and.w	r3, r3, #2
 800643a:	2b02      	cmp	r3, #2
 800643c:	d103      	bne.n	8006446 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	2200      	movs	r2, #0
 8006444:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	699b      	ldr	r3, [r3, #24]
 800644c:	f003 0301 	and.w	r3, r3, #1
 8006450:	2b01      	cmp	r3, #1
 8006452:	d007      	beq.n	8006464 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	699a      	ldr	r2, [r3, #24]
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f042 0201 	orr.w	r2, r2, #1
 8006462:	619a      	str	r2, [r3, #24]
  }
}
 8006464:	bf00      	nop
 8006466:	370c      	adds	r7, #12
 8006468:	46bd      	mov	sp, r7
 800646a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646e:	4770      	bx	lr

08006470 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b084      	sub	sp, #16
 8006474:	af00      	add	r7, sp, #0
 8006476:	60f8      	str	r0, [r7, #12]
 8006478:	60b9      	str	r1, [r7, #8]
 800647a:	603b      	str	r3, [r7, #0]
 800647c:	4613      	mov	r3, r2
 800647e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006480:	e022      	b.n	80064c8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006488:	d01e      	beq.n	80064c8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800648a:	f7fd f81b 	bl	80034c4 <HAL_GetTick>
 800648e:	4602      	mov	r2, r0
 8006490:	69bb      	ldr	r3, [r7, #24]
 8006492:	1ad3      	subs	r3, r2, r3
 8006494:	683a      	ldr	r2, [r7, #0]
 8006496:	429a      	cmp	r2, r3
 8006498:	d302      	bcc.n	80064a0 <I2C_WaitOnFlagUntilTimeout+0x30>
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d113      	bne.n	80064c8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064a4:	f043 0220 	orr.w	r2, r3, #32
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	2220      	movs	r2, #32
 80064b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	2200      	movs	r2, #0
 80064b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	2200      	movs	r2, #0
 80064c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80064c4:	2301      	movs	r3, #1
 80064c6:	e00f      	b.n	80064e8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	699a      	ldr	r2, [r3, #24]
 80064ce:	68bb      	ldr	r3, [r7, #8]
 80064d0:	4013      	ands	r3, r2
 80064d2:	68ba      	ldr	r2, [r7, #8]
 80064d4:	429a      	cmp	r2, r3
 80064d6:	bf0c      	ite	eq
 80064d8:	2301      	moveq	r3, #1
 80064da:	2300      	movne	r3, #0
 80064dc:	b2db      	uxtb	r3, r3
 80064de:	461a      	mov	r2, r3
 80064e0:	79fb      	ldrb	r3, [r7, #7]
 80064e2:	429a      	cmp	r2, r3
 80064e4:	d0cd      	beq.n	8006482 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80064e6:	2300      	movs	r3, #0
}
 80064e8:	4618      	mov	r0, r3
 80064ea:	3710      	adds	r7, #16
 80064ec:	46bd      	mov	sp, r7
 80064ee:	bd80      	pop	{r7, pc}

080064f0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b084      	sub	sp, #16
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	60f8      	str	r0, [r7, #12]
 80064f8:	60b9      	str	r1, [r7, #8]
 80064fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80064fc:	e02c      	b.n	8006558 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80064fe:	687a      	ldr	r2, [r7, #4]
 8006500:	68b9      	ldr	r1, [r7, #8]
 8006502:	68f8      	ldr	r0, [r7, #12]
 8006504:	f000 f870 	bl	80065e8 <I2C_IsErrorOccurred>
 8006508:	4603      	mov	r3, r0
 800650a:	2b00      	cmp	r3, #0
 800650c:	d001      	beq.n	8006512 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800650e:	2301      	movs	r3, #1
 8006510:	e02a      	b.n	8006568 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006512:	68bb      	ldr	r3, [r7, #8]
 8006514:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006518:	d01e      	beq.n	8006558 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800651a:	f7fc ffd3 	bl	80034c4 <HAL_GetTick>
 800651e:	4602      	mov	r2, r0
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	1ad3      	subs	r3, r2, r3
 8006524:	68ba      	ldr	r2, [r7, #8]
 8006526:	429a      	cmp	r2, r3
 8006528:	d302      	bcc.n	8006530 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800652a:	68bb      	ldr	r3, [r7, #8]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d113      	bne.n	8006558 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006534:	f043 0220 	orr.w	r2, r3, #32
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	2220      	movs	r2, #32
 8006540:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	2200      	movs	r2, #0
 8006548:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	2200      	movs	r2, #0
 8006550:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006554:	2301      	movs	r3, #1
 8006556:	e007      	b.n	8006568 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	699b      	ldr	r3, [r3, #24]
 800655e:	f003 0302 	and.w	r3, r3, #2
 8006562:	2b02      	cmp	r3, #2
 8006564:	d1cb      	bne.n	80064fe <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006566:	2300      	movs	r3, #0
}
 8006568:	4618      	mov	r0, r3
 800656a:	3710      	adds	r7, #16
 800656c:	46bd      	mov	sp, r7
 800656e:	bd80      	pop	{r7, pc}

08006570 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006570:	b580      	push	{r7, lr}
 8006572:	b084      	sub	sp, #16
 8006574:	af00      	add	r7, sp, #0
 8006576:	60f8      	str	r0, [r7, #12]
 8006578:	60b9      	str	r1, [r7, #8]
 800657a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800657c:	e028      	b.n	80065d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800657e:	687a      	ldr	r2, [r7, #4]
 8006580:	68b9      	ldr	r1, [r7, #8]
 8006582:	68f8      	ldr	r0, [r7, #12]
 8006584:	f000 f830 	bl	80065e8 <I2C_IsErrorOccurred>
 8006588:	4603      	mov	r3, r0
 800658a:	2b00      	cmp	r3, #0
 800658c:	d001      	beq.n	8006592 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800658e:	2301      	movs	r3, #1
 8006590:	e026      	b.n	80065e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006592:	f7fc ff97 	bl	80034c4 <HAL_GetTick>
 8006596:	4602      	mov	r2, r0
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	1ad3      	subs	r3, r2, r3
 800659c:	68ba      	ldr	r2, [r7, #8]
 800659e:	429a      	cmp	r2, r3
 80065a0:	d302      	bcc.n	80065a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80065a2:	68bb      	ldr	r3, [r7, #8]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d113      	bne.n	80065d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065ac:	f043 0220 	orr.w	r2, r3, #32
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	2220      	movs	r2, #32
 80065b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	2200      	movs	r2, #0
 80065c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	2200      	movs	r2, #0
 80065c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80065cc:	2301      	movs	r3, #1
 80065ce:	e007      	b.n	80065e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	699b      	ldr	r3, [r3, #24]
 80065d6:	f003 0320 	and.w	r3, r3, #32
 80065da:	2b20      	cmp	r3, #32
 80065dc:	d1cf      	bne.n	800657e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80065de:	2300      	movs	r3, #0
}
 80065e0:	4618      	mov	r0, r3
 80065e2:	3710      	adds	r7, #16
 80065e4:	46bd      	mov	sp, r7
 80065e6:	bd80      	pop	{r7, pc}

080065e8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b08a      	sub	sp, #40	; 0x28
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	60f8      	str	r0, [r7, #12]
 80065f0:	60b9      	str	r1, [r7, #8]
 80065f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80065f4:	2300      	movs	r3, #0
 80065f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	699b      	ldr	r3, [r3, #24]
 8006600:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006602:	2300      	movs	r3, #0
 8006604:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800660a:	69bb      	ldr	r3, [r7, #24]
 800660c:	f003 0310 	and.w	r3, r3, #16
 8006610:	2b00      	cmp	r3, #0
 8006612:	d075      	beq.n	8006700 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	2210      	movs	r2, #16
 800661a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800661c:	e056      	b.n	80066cc <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800661e:	68bb      	ldr	r3, [r7, #8]
 8006620:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006624:	d052      	beq.n	80066cc <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006626:	f7fc ff4d 	bl	80034c4 <HAL_GetTick>
 800662a:	4602      	mov	r2, r0
 800662c:	69fb      	ldr	r3, [r7, #28]
 800662e:	1ad3      	subs	r3, r2, r3
 8006630:	68ba      	ldr	r2, [r7, #8]
 8006632:	429a      	cmp	r2, r3
 8006634:	d302      	bcc.n	800663c <I2C_IsErrorOccurred+0x54>
 8006636:	68bb      	ldr	r3, [r7, #8]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d147      	bne.n	80066cc <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	685b      	ldr	r3, [r3, #4]
 8006642:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006646:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800664e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	699b      	ldr	r3, [r3, #24]
 8006656:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800665a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800665e:	d12e      	bne.n	80066be <I2C_IsErrorOccurred+0xd6>
 8006660:	697b      	ldr	r3, [r7, #20]
 8006662:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006666:	d02a      	beq.n	80066be <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8006668:	7cfb      	ldrb	r3, [r7, #19]
 800666a:	2b20      	cmp	r3, #32
 800666c:	d027      	beq.n	80066be <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	685a      	ldr	r2, [r3, #4]
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800667c:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800667e:	f7fc ff21 	bl	80034c4 <HAL_GetTick>
 8006682:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006684:	e01b      	b.n	80066be <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006686:	f7fc ff1d 	bl	80034c4 <HAL_GetTick>
 800668a:	4602      	mov	r2, r0
 800668c:	69fb      	ldr	r3, [r7, #28]
 800668e:	1ad3      	subs	r3, r2, r3
 8006690:	2b19      	cmp	r3, #25
 8006692:	d914      	bls.n	80066be <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006698:	f043 0220 	orr.w	r2, r3, #32
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	2220      	movs	r2, #32
 80066a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	2200      	movs	r2, #0
 80066ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	2200      	movs	r2, #0
 80066b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 80066b8:	2301      	movs	r3, #1
 80066ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	699b      	ldr	r3, [r3, #24]
 80066c4:	f003 0320 	and.w	r3, r3, #32
 80066c8:	2b20      	cmp	r3, #32
 80066ca:	d1dc      	bne.n	8006686 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	699b      	ldr	r3, [r3, #24]
 80066d2:	f003 0320 	and.w	r3, r3, #32
 80066d6:	2b20      	cmp	r3, #32
 80066d8:	d003      	beq.n	80066e2 <I2C_IsErrorOccurred+0xfa>
 80066da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d09d      	beq.n	800661e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80066e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d103      	bne.n	80066f2 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	2220      	movs	r2, #32
 80066f0:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80066f2:	6a3b      	ldr	r3, [r7, #32]
 80066f4:	f043 0304 	orr.w	r3, r3, #4
 80066f8:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80066fa:	2301      	movs	r3, #1
 80066fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	699b      	ldr	r3, [r3, #24]
 8006706:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006708:	69bb      	ldr	r3, [r7, #24]
 800670a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800670e:	2b00      	cmp	r3, #0
 8006710:	d00b      	beq.n	800672a <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006712:	6a3b      	ldr	r3, [r7, #32]
 8006714:	f043 0301 	orr.w	r3, r3, #1
 8006718:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006722:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006724:	2301      	movs	r3, #1
 8006726:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800672a:	69bb      	ldr	r3, [r7, #24]
 800672c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006730:	2b00      	cmp	r3, #0
 8006732:	d00b      	beq.n	800674c <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006734:	6a3b      	ldr	r3, [r7, #32]
 8006736:	f043 0308 	orr.w	r3, r3, #8
 800673a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006744:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006746:	2301      	movs	r3, #1
 8006748:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800674c:	69bb      	ldr	r3, [r7, #24]
 800674e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006752:	2b00      	cmp	r3, #0
 8006754:	d00b      	beq.n	800676e <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006756:	6a3b      	ldr	r3, [r7, #32]
 8006758:	f043 0302 	orr.w	r3, r3, #2
 800675c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006766:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006768:	2301      	movs	r3, #1
 800676a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800676e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006772:	2b00      	cmp	r3, #0
 8006774:	d01c      	beq.n	80067b0 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006776:	68f8      	ldr	r0, [r7, #12]
 8006778:	f7ff fe56 	bl	8006428 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	6859      	ldr	r1, [r3, #4]
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681a      	ldr	r2, [r3, #0]
 8006786:	4b0d      	ldr	r3, [pc, #52]	; (80067bc <I2C_IsErrorOccurred+0x1d4>)
 8006788:	400b      	ands	r3, r1
 800678a:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006790:	6a3b      	ldr	r3, [r7, #32]
 8006792:	431a      	orrs	r2, r3
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	2220      	movs	r2, #32
 800679c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	2200      	movs	r2, #0
 80067a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	2200      	movs	r2, #0
 80067ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80067b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80067b4:	4618      	mov	r0, r3
 80067b6:	3728      	adds	r7, #40	; 0x28
 80067b8:	46bd      	mov	sp, r7
 80067ba:	bd80      	pop	{r7, pc}
 80067bc:	fe00e800 	.word	0xfe00e800

080067c0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80067c0:	b480      	push	{r7}
 80067c2:	b087      	sub	sp, #28
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	60f8      	str	r0, [r7, #12]
 80067c8:	607b      	str	r3, [r7, #4]
 80067ca:	460b      	mov	r3, r1
 80067cc:	817b      	strh	r3, [r7, #10]
 80067ce:	4613      	mov	r3, r2
 80067d0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80067d2:	897b      	ldrh	r3, [r7, #10]
 80067d4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80067d8:	7a7b      	ldrb	r3, [r7, #9]
 80067da:	041b      	lsls	r3, r3, #16
 80067dc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80067e0:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80067e6:	6a3b      	ldr	r3, [r7, #32]
 80067e8:	4313      	orrs	r3, r2
 80067ea:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80067ee:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	685a      	ldr	r2, [r3, #4]
 80067f6:	6a3b      	ldr	r3, [r7, #32]
 80067f8:	0d5b      	lsrs	r3, r3, #21
 80067fa:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80067fe:	4b08      	ldr	r3, [pc, #32]	; (8006820 <I2C_TransferConfig+0x60>)
 8006800:	430b      	orrs	r3, r1
 8006802:	43db      	mvns	r3, r3
 8006804:	ea02 0103 	and.w	r1, r2, r3
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	697a      	ldr	r2, [r7, #20]
 800680e:	430a      	orrs	r2, r1
 8006810:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006812:	bf00      	nop
 8006814:	371c      	adds	r7, #28
 8006816:	46bd      	mov	sp, r7
 8006818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681c:	4770      	bx	lr
 800681e:	bf00      	nop
 8006820:	03ff63ff 	.word	0x03ff63ff

08006824 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b086      	sub	sp, #24
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800682c:	2300      	movs	r3, #0
 800682e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d101      	bne.n	800683a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8006836:	2301      	movs	r3, #1
 8006838:	e291      	b.n	8006d5e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f003 0301 	and.w	r3, r3, #1
 8006842:	2b00      	cmp	r3, #0
 8006844:	f000 8087 	beq.w	8006956 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006848:	4b96      	ldr	r3, [pc, #600]	; (8006aa4 <HAL_RCC_OscConfig+0x280>)
 800684a:	689b      	ldr	r3, [r3, #8]
 800684c:	f003 030c 	and.w	r3, r3, #12
 8006850:	2b04      	cmp	r3, #4
 8006852:	d00c      	beq.n	800686e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006854:	4b93      	ldr	r3, [pc, #588]	; (8006aa4 <HAL_RCC_OscConfig+0x280>)
 8006856:	689b      	ldr	r3, [r3, #8]
 8006858:	f003 030c 	and.w	r3, r3, #12
 800685c:	2b08      	cmp	r3, #8
 800685e:	d112      	bne.n	8006886 <HAL_RCC_OscConfig+0x62>
 8006860:	4b90      	ldr	r3, [pc, #576]	; (8006aa4 <HAL_RCC_OscConfig+0x280>)
 8006862:	685b      	ldr	r3, [r3, #4]
 8006864:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006868:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800686c:	d10b      	bne.n	8006886 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800686e:	4b8d      	ldr	r3, [pc, #564]	; (8006aa4 <HAL_RCC_OscConfig+0x280>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006876:	2b00      	cmp	r3, #0
 8006878:	d06c      	beq.n	8006954 <HAL_RCC_OscConfig+0x130>
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	685b      	ldr	r3, [r3, #4]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d168      	bne.n	8006954 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006882:	2301      	movs	r3, #1
 8006884:	e26b      	b.n	8006d5e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	685b      	ldr	r3, [r3, #4]
 800688a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800688e:	d106      	bne.n	800689e <HAL_RCC_OscConfig+0x7a>
 8006890:	4b84      	ldr	r3, [pc, #528]	; (8006aa4 <HAL_RCC_OscConfig+0x280>)
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	4a83      	ldr	r2, [pc, #524]	; (8006aa4 <HAL_RCC_OscConfig+0x280>)
 8006896:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800689a:	6013      	str	r3, [r2, #0]
 800689c:	e02e      	b.n	80068fc <HAL_RCC_OscConfig+0xd8>
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	685b      	ldr	r3, [r3, #4]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d10c      	bne.n	80068c0 <HAL_RCC_OscConfig+0x9c>
 80068a6:	4b7f      	ldr	r3, [pc, #508]	; (8006aa4 <HAL_RCC_OscConfig+0x280>)
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	4a7e      	ldr	r2, [pc, #504]	; (8006aa4 <HAL_RCC_OscConfig+0x280>)
 80068ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80068b0:	6013      	str	r3, [r2, #0]
 80068b2:	4b7c      	ldr	r3, [pc, #496]	; (8006aa4 <HAL_RCC_OscConfig+0x280>)
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	4a7b      	ldr	r2, [pc, #492]	; (8006aa4 <HAL_RCC_OscConfig+0x280>)
 80068b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80068bc:	6013      	str	r3, [r2, #0]
 80068be:	e01d      	b.n	80068fc <HAL_RCC_OscConfig+0xd8>
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	685b      	ldr	r3, [r3, #4]
 80068c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80068c8:	d10c      	bne.n	80068e4 <HAL_RCC_OscConfig+0xc0>
 80068ca:	4b76      	ldr	r3, [pc, #472]	; (8006aa4 <HAL_RCC_OscConfig+0x280>)
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	4a75      	ldr	r2, [pc, #468]	; (8006aa4 <HAL_RCC_OscConfig+0x280>)
 80068d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80068d4:	6013      	str	r3, [r2, #0]
 80068d6:	4b73      	ldr	r3, [pc, #460]	; (8006aa4 <HAL_RCC_OscConfig+0x280>)
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	4a72      	ldr	r2, [pc, #456]	; (8006aa4 <HAL_RCC_OscConfig+0x280>)
 80068dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80068e0:	6013      	str	r3, [r2, #0]
 80068e2:	e00b      	b.n	80068fc <HAL_RCC_OscConfig+0xd8>
 80068e4:	4b6f      	ldr	r3, [pc, #444]	; (8006aa4 <HAL_RCC_OscConfig+0x280>)
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	4a6e      	ldr	r2, [pc, #440]	; (8006aa4 <HAL_RCC_OscConfig+0x280>)
 80068ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80068ee:	6013      	str	r3, [r2, #0]
 80068f0:	4b6c      	ldr	r3, [pc, #432]	; (8006aa4 <HAL_RCC_OscConfig+0x280>)
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	4a6b      	ldr	r2, [pc, #428]	; (8006aa4 <HAL_RCC_OscConfig+0x280>)
 80068f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80068fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	685b      	ldr	r3, [r3, #4]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d013      	beq.n	800692c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006904:	f7fc fdde 	bl	80034c4 <HAL_GetTick>
 8006908:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800690a:	e008      	b.n	800691e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800690c:	f7fc fdda 	bl	80034c4 <HAL_GetTick>
 8006910:	4602      	mov	r2, r0
 8006912:	693b      	ldr	r3, [r7, #16]
 8006914:	1ad3      	subs	r3, r2, r3
 8006916:	2b64      	cmp	r3, #100	; 0x64
 8006918:	d901      	bls.n	800691e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800691a:	2303      	movs	r3, #3
 800691c:	e21f      	b.n	8006d5e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800691e:	4b61      	ldr	r3, [pc, #388]	; (8006aa4 <HAL_RCC_OscConfig+0x280>)
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006926:	2b00      	cmp	r3, #0
 8006928:	d0f0      	beq.n	800690c <HAL_RCC_OscConfig+0xe8>
 800692a:	e014      	b.n	8006956 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800692c:	f7fc fdca 	bl	80034c4 <HAL_GetTick>
 8006930:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006932:	e008      	b.n	8006946 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006934:	f7fc fdc6 	bl	80034c4 <HAL_GetTick>
 8006938:	4602      	mov	r2, r0
 800693a:	693b      	ldr	r3, [r7, #16]
 800693c:	1ad3      	subs	r3, r2, r3
 800693e:	2b64      	cmp	r3, #100	; 0x64
 8006940:	d901      	bls.n	8006946 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8006942:	2303      	movs	r3, #3
 8006944:	e20b      	b.n	8006d5e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006946:	4b57      	ldr	r3, [pc, #348]	; (8006aa4 <HAL_RCC_OscConfig+0x280>)
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800694e:	2b00      	cmp	r3, #0
 8006950:	d1f0      	bne.n	8006934 <HAL_RCC_OscConfig+0x110>
 8006952:	e000      	b.n	8006956 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006954:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f003 0302 	and.w	r3, r3, #2
 800695e:	2b00      	cmp	r3, #0
 8006960:	d069      	beq.n	8006a36 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006962:	4b50      	ldr	r3, [pc, #320]	; (8006aa4 <HAL_RCC_OscConfig+0x280>)
 8006964:	689b      	ldr	r3, [r3, #8]
 8006966:	f003 030c 	and.w	r3, r3, #12
 800696a:	2b00      	cmp	r3, #0
 800696c:	d00b      	beq.n	8006986 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800696e:	4b4d      	ldr	r3, [pc, #308]	; (8006aa4 <HAL_RCC_OscConfig+0x280>)
 8006970:	689b      	ldr	r3, [r3, #8]
 8006972:	f003 030c 	and.w	r3, r3, #12
 8006976:	2b08      	cmp	r3, #8
 8006978:	d11c      	bne.n	80069b4 <HAL_RCC_OscConfig+0x190>
 800697a:	4b4a      	ldr	r3, [pc, #296]	; (8006aa4 <HAL_RCC_OscConfig+0x280>)
 800697c:	685b      	ldr	r3, [r3, #4]
 800697e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006982:	2b00      	cmp	r3, #0
 8006984:	d116      	bne.n	80069b4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006986:	4b47      	ldr	r3, [pc, #284]	; (8006aa4 <HAL_RCC_OscConfig+0x280>)
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f003 0302 	and.w	r3, r3, #2
 800698e:	2b00      	cmp	r3, #0
 8006990:	d005      	beq.n	800699e <HAL_RCC_OscConfig+0x17a>
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	68db      	ldr	r3, [r3, #12]
 8006996:	2b01      	cmp	r3, #1
 8006998:	d001      	beq.n	800699e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800699a:	2301      	movs	r3, #1
 800699c:	e1df      	b.n	8006d5e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800699e:	4b41      	ldr	r3, [pc, #260]	; (8006aa4 <HAL_RCC_OscConfig+0x280>)
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	691b      	ldr	r3, [r3, #16]
 80069aa:	00db      	lsls	r3, r3, #3
 80069ac:	493d      	ldr	r1, [pc, #244]	; (8006aa4 <HAL_RCC_OscConfig+0x280>)
 80069ae:	4313      	orrs	r3, r2
 80069b0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80069b2:	e040      	b.n	8006a36 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	68db      	ldr	r3, [r3, #12]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d023      	beq.n	8006a04 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80069bc:	4b39      	ldr	r3, [pc, #228]	; (8006aa4 <HAL_RCC_OscConfig+0x280>)
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	4a38      	ldr	r2, [pc, #224]	; (8006aa4 <HAL_RCC_OscConfig+0x280>)
 80069c2:	f043 0301 	orr.w	r3, r3, #1
 80069c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069c8:	f7fc fd7c 	bl	80034c4 <HAL_GetTick>
 80069cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80069ce:	e008      	b.n	80069e2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80069d0:	f7fc fd78 	bl	80034c4 <HAL_GetTick>
 80069d4:	4602      	mov	r2, r0
 80069d6:	693b      	ldr	r3, [r7, #16]
 80069d8:	1ad3      	subs	r3, r2, r3
 80069da:	2b02      	cmp	r3, #2
 80069dc:	d901      	bls.n	80069e2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80069de:	2303      	movs	r3, #3
 80069e0:	e1bd      	b.n	8006d5e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80069e2:	4b30      	ldr	r3, [pc, #192]	; (8006aa4 <HAL_RCC_OscConfig+0x280>)
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f003 0302 	and.w	r3, r3, #2
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d0f0      	beq.n	80069d0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80069ee:	4b2d      	ldr	r3, [pc, #180]	; (8006aa4 <HAL_RCC_OscConfig+0x280>)
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	691b      	ldr	r3, [r3, #16]
 80069fa:	00db      	lsls	r3, r3, #3
 80069fc:	4929      	ldr	r1, [pc, #164]	; (8006aa4 <HAL_RCC_OscConfig+0x280>)
 80069fe:	4313      	orrs	r3, r2
 8006a00:	600b      	str	r3, [r1, #0]
 8006a02:	e018      	b.n	8006a36 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006a04:	4b27      	ldr	r3, [pc, #156]	; (8006aa4 <HAL_RCC_OscConfig+0x280>)
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	4a26      	ldr	r2, [pc, #152]	; (8006aa4 <HAL_RCC_OscConfig+0x280>)
 8006a0a:	f023 0301 	bic.w	r3, r3, #1
 8006a0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a10:	f7fc fd58 	bl	80034c4 <HAL_GetTick>
 8006a14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006a16:	e008      	b.n	8006a2a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006a18:	f7fc fd54 	bl	80034c4 <HAL_GetTick>
 8006a1c:	4602      	mov	r2, r0
 8006a1e:	693b      	ldr	r3, [r7, #16]
 8006a20:	1ad3      	subs	r3, r2, r3
 8006a22:	2b02      	cmp	r3, #2
 8006a24:	d901      	bls.n	8006a2a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006a26:	2303      	movs	r3, #3
 8006a28:	e199      	b.n	8006d5e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006a2a:	4b1e      	ldr	r3, [pc, #120]	; (8006aa4 <HAL_RCC_OscConfig+0x280>)
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f003 0302 	and.w	r3, r3, #2
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d1f0      	bne.n	8006a18 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f003 0308 	and.w	r3, r3, #8
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d038      	beq.n	8006ab4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	695b      	ldr	r3, [r3, #20]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d019      	beq.n	8006a7e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006a4a:	4b16      	ldr	r3, [pc, #88]	; (8006aa4 <HAL_RCC_OscConfig+0x280>)
 8006a4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a4e:	4a15      	ldr	r2, [pc, #84]	; (8006aa4 <HAL_RCC_OscConfig+0x280>)
 8006a50:	f043 0301 	orr.w	r3, r3, #1
 8006a54:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a56:	f7fc fd35 	bl	80034c4 <HAL_GetTick>
 8006a5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006a5c:	e008      	b.n	8006a70 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006a5e:	f7fc fd31 	bl	80034c4 <HAL_GetTick>
 8006a62:	4602      	mov	r2, r0
 8006a64:	693b      	ldr	r3, [r7, #16]
 8006a66:	1ad3      	subs	r3, r2, r3
 8006a68:	2b02      	cmp	r3, #2
 8006a6a:	d901      	bls.n	8006a70 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006a6c:	2303      	movs	r3, #3
 8006a6e:	e176      	b.n	8006d5e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006a70:	4b0c      	ldr	r3, [pc, #48]	; (8006aa4 <HAL_RCC_OscConfig+0x280>)
 8006a72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a74:	f003 0302 	and.w	r3, r3, #2
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d0f0      	beq.n	8006a5e <HAL_RCC_OscConfig+0x23a>
 8006a7c:	e01a      	b.n	8006ab4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006a7e:	4b09      	ldr	r3, [pc, #36]	; (8006aa4 <HAL_RCC_OscConfig+0x280>)
 8006a80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a82:	4a08      	ldr	r2, [pc, #32]	; (8006aa4 <HAL_RCC_OscConfig+0x280>)
 8006a84:	f023 0301 	bic.w	r3, r3, #1
 8006a88:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a8a:	f7fc fd1b 	bl	80034c4 <HAL_GetTick>
 8006a8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006a90:	e00a      	b.n	8006aa8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006a92:	f7fc fd17 	bl	80034c4 <HAL_GetTick>
 8006a96:	4602      	mov	r2, r0
 8006a98:	693b      	ldr	r3, [r7, #16]
 8006a9a:	1ad3      	subs	r3, r2, r3
 8006a9c:	2b02      	cmp	r3, #2
 8006a9e:	d903      	bls.n	8006aa8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006aa0:	2303      	movs	r3, #3
 8006aa2:	e15c      	b.n	8006d5e <HAL_RCC_OscConfig+0x53a>
 8006aa4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006aa8:	4b91      	ldr	r3, [pc, #580]	; (8006cf0 <HAL_RCC_OscConfig+0x4cc>)
 8006aaa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006aac:	f003 0302 	and.w	r3, r3, #2
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d1ee      	bne.n	8006a92 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f003 0304 	and.w	r3, r3, #4
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	f000 80a4 	beq.w	8006c0a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006ac2:	4b8b      	ldr	r3, [pc, #556]	; (8006cf0 <HAL_RCC_OscConfig+0x4cc>)
 8006ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ac6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d10d      	bne.n	8006aea <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8006ace:	4b88      	ldr	r3, [pc, #544]	; (8006cf0 <HAL_RCC_OscConfig+0x4cc>)
 8006ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ad2:	4a87      	ldr	r2, [pc, #540]	; (8006cf0 <HAL_RCC_OscConfig+0x4cc>)
 8006ad4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ad8:	6413      	str	r3, [r2, #64]	; 0x40
 8006ada:	4b85      	ldr	r3, [pc, #532]	; (8006cf0 <HAL_RCC_OscConfig+0x4cc>)
 8006adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ade:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ae2:	60bb      	str	r3, [r7, #8]
 8006ae4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006ae6:	2301      	movs	r3, #1
 8006ae8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006aea:	4b82      	ldr	r3, [pc, #520]	; (8006cf4 <HAL_RCC_OscConfig+0x4d0>)
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d118      	bne.n	8006b28 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8006af6:	4b7f      	ldr	r3, [pc, #508]	; (8006cf4 <HAL_RCC_OscConfig+0x4d0>)
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	4a7e      	ldr	r2, [pc, #504]	; (8006cf4 <HAL_RCC_OscConfig+0x4d0>)
 8006afc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006b02:	f7fc fcdf 	bl	80034c4 <HAL_GetTick>
 8006b06:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006b08:	e008      	b.n	8006b1c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006b0a:	f7fc fcdb 	bl	80034c4 <HAL_GetTick>
 8006b0e:	4602      	mov	r2, r0
 8006b10:	693b      	ldr	r3, [r7, #16]
 8006b12:	1ad3      	subs	r3, r2, r3
 8006b14:	2b64      	cmp	r3, #100	; 0x64
 8006b16:	d901      	bls.n	8006b1c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8006b18:	2303      	movs	r3, #3
 8006b1a:	e120      	b.n	8006d5e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006b1c:	4b75      	ldr	r3, [pc, #468]	; (8006cf4 <HAL_RCC_OscConfig+0x4d0>)
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d0f0      	beq.n	8006b0a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	689b      	ldr	r3, [r3, #8]
 8006b2c:	2b01      	cmp	r3, #1
 8006b2e:	d106      	bne.n	8006b3e <HAL_RCC_OscConfig+0x31a>
 8006b30:	4b6f      	ldr	r3, [pc, #444]	; (8006cf0 <HAL_RCC_OscConfig+0x4cc>)
 8006b32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b34:	4a6e      	ldr	r2, [pc, #440]	; (8006cf0 <HAL_RCC_OscConfig+0x4cc>)
 8006b36:	f043 0301 	orr.w	r3, r3, #1
 8006b3a:	6713      	str	r3, [r2, #112]	; 0x70
 8006b3c:	e02d      	b.n	8006b9a <HAL_RCC_OscConfig+0x376>
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	689b      	ldr	r3, [r3, #8]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d10c      	bne.n	8006b60 <HAL_RCC_OscConfig+0x33c>
 8006b46:	4b6a      	ldr	r3, [pc, #424]	; (8006cf0 <HAL_RCC_OscConfig+0x4cc>)
 8006b48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b4a:	4a69      	ldr	r2, [pc, #420]	; (8006cf0 <HAL_RCC_OscConfig+0x4cc>)
 8006b4c:	f023 0301 	bic.w	r3, r3, #1
 8006b50:	6713      	str	r3, [r2, #112]	; 0x70
 8006b52:	4b67      	ldr	r3, [pc, #412]	; (8006cf0 <HAL_RCC_OscConfig+0x4cc>)
 8006b54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b56:	4a66      	ldr	r2, [pc, #408]	; (8006cf0 <HAL_RCC_OscConfig+0x4cc>)
 8006b58:	f023 0304 	bic.w	r3, r3, #4
 8006b5c:	6713      	str	r3, [r2, #112]	; 0x70
 8006b5e:	e01c      	b.n	8006b9a <HAL_RCC_OscConfig+0x376>
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	689b      	ldr	r3, [r3, #8]
 8006b64:	2b05      	cmp	r3, #5
 8006b66:	d10c      	bne.n	8006b82 <HAL_RCC_OscConfig+0x35e>
 8006b68:	4b61      	ldr	r3, [pc, #388]	; (8006cf0 <HAL_RCC_OscConfig+0x4cc>)
 8006b6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b6c:	4a60      	ldr	r2, [pc, #384]	; (8006cf0 <HAL_RCC_OscConfig+0x4cc>)
 8006b6e:	f043 0304 	orr.w	r3, r3, #4
 8006b72:	6713      	str	r3, [r2, #112]	; 0x70
 8006b74:	4b5e      	ldr	r3, [pc, #376]	; (8006cf0 <HAL_RCC_OscConfig+0x4cc>)
 8006b76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b78:	4a5d      	ldr	r2, [pc, #372]	; (8006cf0 <HAL_RCC_OscConfig+0x4cc>)
 8006b7a:	f043 0301 	orr.w	r3, r3, #1
 8006b7e:	6713      	str	r3, [r2, #112]	; 0x70
 8006b80:	e00b      	b.n	8006b9a <HAL_RCC_OscConfig+0x376>
 8006b82:	4b5b      	ldr	r3, [pc, #364]	; (8006cf0 <HAL_RCC_OscConfig+0x4cc>)
 8006b84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b86:	4a5a      	ldr	r2, [pc, #360]	; (8006cf0 <HAL_RCC_OscConfig+0x4cc>)
 8006b88:	f023 0301 	bic.w	r3, r3, #1
 8006b8c:	6713      	str	r3, [r2, #112]	; 0x70
 8006b8e:	4b58      	ldr	r3, [pc, #352]	; (8006cf0 <HAL_RCC_OscConfig+0x4cc>)
 8006b90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b92:	4a57      	ldr	r2, [pc, #348]	; (8006cf0 <HAL_RCC_OscConfig+0x4cc>)
 8006b94:	f023 0304 	bic.w	r3, r3, #4
 8006b98:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	689b      	ldr	r3, [r3, #8]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d015      	beq.n	8006bce <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ba2:	f7fc fc8f 	bl	80034c4 <HAL_GetTick>
 8006ba6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ba8:	e00a      	b.n	8006bc0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006baa:	f7fc fc8b 	bl	80034c4 <HAL_GetTick>
 8006bae:	4602      	mov	r2, r0
 8006bb0:	693b      	ldr	r3, [r7, #16]
 8006bb2:	1ad3      	subs	r3, r2, r3
 8006bb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	d901      	bls.n	8006bc0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8006bbc:	2303      	movs	r3, #3
 8006bbe:	e0ce      	b.n	8006d5e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006bc0:	4b4b      	ldr	r3, [pc, #300]	; (8006cf0 <HAL_RCC_OscConfig+0x4cc>)
 8006bc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bc4:	f003 0302 	and.w	r3, r3, #2
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d0ee      	beq.n	8006baa <HAL_RCC_OscConfig+0x386>
 8006bcc:	e014      	b.n	8006bf8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006bce:	f7fc fc79 	bl	80034c4 <HAL_GetTick>
 8006bd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006bd4:	e00a      	b.n	8006bec <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006bd6:	f7fc fc75 	bl	80034c4 <HAL_GetTick>
 8006bda:	4602      	mov	r2, r0
 8006bdc:	693b      	ldr	r3, [r7, #16]
 8006bde:	1ad3      	subs	r3, r2, r3
 8006be0:	f241 3288 	movw	r2, #5000	; 0x1388
 8006be4:	4293      	cmp	r3, r2
 8006be6:	d901      	bls.n	8006bec <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8006be8:	2303      	movs	r3, #3
 8006bea:	e0b8      	b.n	8006d5e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006bec:	4b40      	ldr	r3, [pc, #256]	; (8006cf0 <HAL_RCC_OscConfig+0x4cc>)
 8006bee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bf0:	f003 0302 	and.w	r3, r3, #2
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d1ee      	bne.n	8006bd6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006bf8:	7dfb      	ldrb	r3, [r7, #23]
 8006bfa:	2b01      	cmp	r3, #1
 8006bfc:	d105      	bne.n	8006c0a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006bfe:	4b3c      	ldr	r3, [pc, #240]	; (8006cf0 <HAL_RCC_OscConfig+0x4cc>)
 8006c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c02:	4a3b      	ldr	r2, [pc, #236]	; (8006cf0 <HAL_RCC_OscConfig+0x4cc>)
 8006c04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006c08:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	699b      	ldr	r3, [r3, #24]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	f000 80a4 	beq.w	8006d5c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006c14:	4b36      	ldr	r3, [pc, #216]	; (8006cf0 <HAL_RCC_OscConfig+0x4cc>)
 8006c16:	689b      	ldr	r3, [r3, #8]
 8006c18:	f003 030c 	and.w	r3, r3, #12
 8006c1c:	2b08      	cmp	r3, #8
 8006c1e:	d06b      	beq.n	8006cf8 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	699b      	ldr	r3, [r3, #24]
 8006c24:	2b02      	cmp	r3, #2
 8006c26:	d149      	bne.n	8006cbc <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c28:	4b31      	ldr	r3, [pc, #196]	; (8006cf0 <HAL_RCC_OscConfig+0x4cc>)
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	4a30      	ldr	r2, [pc, #192]	; (8006cf0 <HAL_RCC_OscConfig+0x4cc>)
 8006c2e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006c32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c34:	f7fc fc46 	bl	80034c4 <HAL_GetTick>
 8006c38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c3a:	e008      	b.n	8006c4e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c3c:	f7fc fc42 	bl	80034c4 <HAL_GetTick>
 8006c40:	4602      	mov	r2, r0
 8006c42:	693b      	ldr	r3, [r7, #16]
 8006c44:	1ad3      	subs	r3, r2, r3
 8006c46:	2b02      	cmp	r3, #2
 8006c48:	d901      	bls.n	8006c4e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8006c4a:	2303      	movs	r3, #3
 8006c4c:	e087      	b.n	8006d5e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c4e:	4b28      	ldr	r3, [pc, #160]	; (8006cf0 <HAL_RCC_OscConfig+0x4cc>)
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d1f0      	bne.n	8006c3c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	69da      	ldr	r2, [r3, #28]
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6a1b      	ldr	r3, [r3, #32]
 8006c62:	431a      	orrs	r2, r3
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c68:	019b      	lsls	r3, r3, #6
 8006c6a:	431a      	orrs	r2, r3
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c70:	085b      	lsrs	r3, r3, #1
 8006c72:	3b01      	subs	r3, #1
 8006c74:	041b      	lsls	r3, r3, #16
 8006c76:	431a      	orrs	r2, r3
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c7c:	061b      	lsls	r3, r3, #24
 8006c7e:	4313      	orrs	r3, r2
 8006c80:	4a1b      	ldr	r2, [pc, #108]	; (8006cf0 <HAL_RCC_OscConfig+0x4cc>)
 8006c82:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006c86:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006c88:	4b19      	ldr	r3, [pc, #100]	; (8006cf0 <HAL_RCC_OscConfig+0x4cc>)
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	4a18      	ldr	r2, [pc, #96]	; (8006cf0 <HAL_RCC_OscConfig+0x4cc>)
 8006c8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006c92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c94:	f7fc fc16 	bl	80034c4 <HAL_GetTick>
 8006c98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c9a:	e008      	b.n	8006cae <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c9c:	f7fc fc12 	bl	80034c4 <HAL_GetTick>
 8006ca0:	4602      	mov	r2, r0
 8006ca2:	693b      	ldr	r3, [r7, #16]
 8006ca4:	1ad3      	subs	r3, r2, r3
 8006ca6:	2b02      	cmp	r3, #2
 8006ca8:	d901      	bls.n	8006cae <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8006caa:	2303      	movs	r3, #3
 8006cac:	e057      	b.n	8006d5e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006cae:	4b10      	ldr	r3, [pc, #64]	; (8006cf0 <HAL_RCC_OscConfig+0x4cc>)
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d0f0      	beq.n	8006c9c <HAL_RCC_OscConfig+0x478>
 8006cba:	e04f      	b.n	8006d5c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006cbc:	4b0c      	ldr	r3, [pc, #48]	; (8006cf0 <HAL_RCC_OscConfig+0x4cc>)
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	4a0b      	ldr	r2, [pc, #44]	; (8006cf0 <HAL_RCC_OscConfig+0x4cc>)
 8006cc2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006cc6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cc8:	f7fc fbfc 	bl	80034c4 <HAL_GetTick>
 8006ccc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006cce:	e008      	b.n	8006ce2 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006cd0:	f7fc fbf8 	bl	80034c4 <HAL_GetTick>
 8006cd4:	4602      	mov	r2, r0
 8006cd6:	693b      	ldr	r3, [r7, #16]
 8006cd8:	1ad3      	subs	r3, r2, r3
 8006cda:	2b02      	cmp	r3, #2
 8006cdc:	d901      	bls.n	8006ce2 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8006cde:	2303      	movs	r3, #3
 8006ce0:	e03d      	b.n	8006d5e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ce2:	4b03      	ldr	r3, [pc, #12]	; (8006cf0 <HAL_RCC_OscConfig+0x4cc>)
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d1f0      	bne.n	8006cd0 <HAL_RCC_OscConfig+0x4ac>
 8006cee:	e035      	b.n	8006d5c <HAL_RCC_OscConfig+0x538>
 8006cf0:	40023800 	.word	0x40023800
 8006cf4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8006cf8:	4b1b      	ldr	r3, [pc, #108]	; (8006d68 <HAL_RCC_OscConfig+0x544>)
 8006cfa:	685b      	ldr	r3, [r3, #4]
 8006cfc:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	699b      	ldr	r3, [r3, #24]
 8006d02:	2b01      	cmp	r3, #1
 8006d04:	d028      	beq.n	8006d58 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006d10:	429a      	cmp	r2, r3
 8006d12:	d121      	bne.n	8006d58 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d1e:	429a      	cmp	r2, r3
 8006d20:	d11a      	bne.n	8006d58 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006d22:	68fa      	ldr	r2, [r7, #12]
 8006d24:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006d28:	4013      	ands	r3, r2
 8006d2a:	687a      	ldr	r2, [r7, #4]
 8006d2c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006d2e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d111      	bne.n	8006d58 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d3e:	085b      	lsrs	r3, r3, #1
 8006d40:	3b01      	subs	r3, #1
 8006d42:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006d44:	429a      	cmp	r2, r3
 8006d46:	d107      	bne.n	8006d58 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d52:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006d54:	429a      	cmp	r2, r3
 8006d56:	d001      	beq.n	8006d5c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8006d58:	2301      	movs	r3, #1
 8006d5a:	e000      	b.n	8006d5e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8006d5c:	2300      	movs	r3, #0
}
 8006d5e:	4618      	mov	r0, r3
 8006d60:	3718      	adds	r7, #24
 8006d62:	46bd      	mov	sp, r7
 8006d64:	bd80      	pop	{r7, pc}
 8006d66:	bf00      	nop
 8006d68:	40023800 	.word	0x40023800

08006d6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	b084      	sub	sp, #16
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
 8006d74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8006d76:	2300      	movs	r3, #0
 8006d78:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d101      	bne.n	8006d84 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006d80:	2301      	movs	r3, #1
 8006d82:	e0d0      	b.n	8006f26 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006d84:	4b6a      	ldr	r3, [pc, #424]	; (8006f30 <HAL_RCC_ClockConfig+0x1c4>)
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f003 030f 	and.w	r3, r3, #15
 8006d8c:	683a      	ldr	r2, [r7, #0]
 8006d8e:	429a      	cmp	r2, r3
 8006d90:	d910      	bls.n	8006db4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d92:	4b67      	ldr	r3, [pc, #412]	; (8006f30 <HAL_RCC_ClockConfig+0x1c4>)
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f023 020f 	bic.w	r2, r3, #15
 8006d9a:	4965      	ldr	r1, [pc, #404]	; (8006f30 <HAL_RCC_ClockConfig+0x1c4>)
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	4313      	orrs	r3, r2
 8006da0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006da2:	4b63      	ldr	r3, [pc, #396]	; (8006f30 <HAL_RCC_ClockConfig+0x1c4>)
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f003 030f 	and.w	r3, r3, #15
 8006daa:	683a      	ldr	r2, [r7, #0]
 8006dac:	429a      	cmp	r2, r3
 8006dae:	d001      	beq.n	8006db4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006db0:	2301      	movs	r3, #1
 8006db2:	e0b8      	b.n	8006f26 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f003 0302 	and.w	r3, r3, #2
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d020      	beq.n	8006e02 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f003 0304 	and.w	r3, r3, #4
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d005      	beq.n	8006dd8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006dcc:	4b59      	ldr	r3, [pc, #356]	; (8006f34 <HAL_RCC_ClockConfig+0x1c8>)
 8006dce:	689b      	ldr	r3, [r3, #8]
 8006dd0:	4a58      	ldr	r2, [pc, #352]	; (8006f34 <HAL_RCC_ClockConfig+0x1c8>)
 8006dd2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006dd6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f003 0308 	and.w	r3, r3, #8
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d005      	beq.n	8006df0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006de4:	4b53      	ldr	r3, [pc, #332]	; (8006f34 <HAL_RCC_ClockConfig+0x1c8>)
 8006de6:	689b      	ldr	r3, [r3, #8]
 8006de8:	4a52      	ldr	r2, [pc, #328]	; (8006f34 <HAL_RCC_ClockConfig+0x1c8>)
 8006dea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006dee:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006df0:	4b50      	ldr	r3, [pc, #320]	; (8006f34 <HAL_RCC_ClockConfig+0x1c8>)
 8006df2:	689b      	ldr	r3, [r3, #8]
 8006df4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	689b      	ldr	r3, [r3, #8]
 8006dfc:	494d      	ldr	r1, [pc, #308]	; (8006f34 <HAL_RCC_ClockConfig+0x1c8>)
 8006dfe:	4313      	orrs	r3, r2
 8006e00:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f003 0301 	and.w	r3, r3, #1
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d040      	beq.n	8006e90 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	685b      	ldr	r3, [r3, #4]
 8006e12:	2b01      	cmp	r3, #1
 8006e14:	d107      	bne.n	8006e26 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006e16:	4b47      	ldr	r3, [pc, #284]	; (8006f34 <HAL_RCC_ClockConfig+0x1c8>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d115      	bne.n	8006e4e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006e22:	2301      	movs	r3, #1
 8006e24:	e07f      	b.n	8006f26 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	685b      	ldr	r3, [r3, #4]
 8006e2a:	2b02      	cmp	r3, #2
 8006e2c:	d107      	bne.n	8006e3e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006e2e:	4b41      	ldr	r3, [pc, #260]	; (8006f34 <HAL_RCC_ClockConfig+0x1c8>)
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d109      	bne.n	8006e4e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006e3a:	2301      	movs	r3, #1
 8006e3c:	e073      	b.n	8006f26 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e3e:	4b3d      	ldr	r3, [pc, #244]	; (8006f34 <HAL_RCC_ClockConfig+0x1c8>)
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f003 0302 	and.w	r3, r3, #2
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d101      	bne.n	8006e4e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006e4a:	2301      	movs	r3, #1
 8006e4c:	e06b      	b.n	8006f26 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006e4e:	4b39      	ldr	r3, [pc, #228]	; (8006f34 <HAL_RCC_ClockConfig+0x1c8>)
 8006e50:	689b      	ldr	r3, [r3, #8]
 8006e52:	f023 0203 	bic.w	r2, r3, #3
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	685b      	ldr	r3, [r3, #4]
 8006e5a:	4936      	ldr	r1, [pc, #216]	; (8006f34 <HAL_RCC_ClockConfig+0x1c8>)
 8006e5c:	4313      	orrs	r3, r2
 8006e5e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e60:	f7fc fb30 	bl	80034c4 <HAL_GetTick>
 8006e64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e66:	e00a      	b.n	8006e7e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006e68:	f7fc fb2c 	bl	80034c4 <HAL_GetTick>
 8006e6c:	4602      	mov	r2, r0
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	1ad3      	subs	r3, r2, r3
 8006e72:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e76:	4293      	cmp	r3, r2
 8006e78:	d901      	bls.n	8006e7e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8006e7a:	2303      	movs	r3, #3
 8006e7c:	e053      	b.n	8006f26 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e7e:	4b2d      	ldr	r3, [pc, #180]	; (8006f34 <HAL_RCC_ClockConfig+0x1c8>)
 8006e80:	689b      	ldr	r3, [r3, #8]
 8006e82:	f003 020c 	and.w	r2, r3, #12
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	685b      	ldr	r3, [r3, #4]
 8006e8a:	009b      	lsls	r3, r3, #2
 8006e8c:	429a      	cmp	r2, r3
 8006e8e:	d1eb      	bne.n	8006e68 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006e90:	4b27      	ldr	r3, [pc, #156]	; (8006f30 <HAL_RCC_ClockConfig+0x1c4>)
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f003 030f 	and.w	r3, r3, #15
 8006e98:	683a      	ldr	r2, [r7, #0]
 8006e9a:	429a      	cmp	r2, r3
 8006e9c:	d210      	bcs.n	8006ec0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e9e:	4b24      	ldr	r3, [pc, #144]	; (8006f30 <HAL_RCC_ClockConfig+0x1c4>)
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f023 020f 	bic.w	r2, r3, #15
 8006ea6:	4922      	ldr	r1, [pc, #136]	; (8006f30 <HAL_RCC_ClockConfig+0x1c4>)
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	4313      	orrs	r3, r2
 8006eac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006eae:	4b20      	ldr	r3, [pc, #128]	; (8006f30 <HAL_RCC_ClockConfig+0x1c4>)
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f003 030f 	and.w	r3, r3, #15
 8006eb6:	683a      	ldr	r2, [r7, #0]
 8006eb8:	429a      	cmp	r2, r3
 8006eba:	d001      	beq.n	8006ec0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8006ebc:	2301      	movs	r3, #1
 8006ebe:	e032      	b.n	8006f26 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f003 0304 	and.w	r3, r3, #4
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d008      	beq.n	8006ede <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006ecc:	4b19      	ldr	r3, [pc, #100]	; (8006f34 <HAL_RCC_ClockConfig+0x1c8>)
 8006ece:	689b      	ldr	r3, [r3, #8]
 8006ed0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	68db      	ldr	r3, [r3, #12]
 8006ed8:	4916      	ldr	r1, [pc, #88]	; (8006f34 <HAL_RCC_ClockConfig+0x1c8>)
 8006eda:	4313      	orrs	r3, r2
 8006edc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f003 0308 	and.w	r3, r3, #8
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d009      	beq.n	8006efe <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006eea:	4b12      	ldr	r3, [pc, #72]	; (8006f34 <HAL_RCC_ClockConfig+0x1c8>)
 8006eec:	689b      	ldr	r3, [r3, #8]
 8006eee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	691b      	ldr	r3, [r3, #16]
 8006ef6:	00db      	lsls	r3, r3, #3
 8006ef8:	490e      	ldr	r1, [pc, #56]	; (8006f34 <HAL_RCC_ClockConfig+0x1c8>)
 8006efa:	4313      	orrs	r3, r2
 8006efc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006efe:	f000 f821 	bl	8006f44 <HAL_RCC_GetSysClockFreq>
 8006f02:	4602      	mov	r2, r0
 8006f04:	4b0b      	ldr	r3, [pc, #44]	; (8006f34 <HAL_RCC_ClockConfig+0x1c8>)
 8006f06:	689b      	ldr	r3, [r3, #8]
 8006f08:	091b      	lsrs	r3, r3, #4
 8006f0a:	f003 030f 	and.w	r3, r3, #15
 8006f0e:	490a      	ldr	r1, [pc, #40]	; (8006f38 <HAL_RCC_ClockConfig+0x1cc>)
 8006f10:	5ccb      	ldrb	r3, [r1, r3]
 8006f12:	fa22 f303 	lsr.w	r3, r2, r3
 8006f16:	4a09      	ldr	r2, [pc, #36]	; (8006f3c <HAL_RCC_ClockConfig+0x1d0>)
 8006f18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006f1a:	4b09      	ldr	r3, [pc, #36]	; (8006f40 <HAL_RCC_ClockConfig+0x1d4>)
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	4618      	mov	r0, r3
 8006f20:	f7fc fa8c 	bl	800343c <HAL_InitTick>

  return HAL_OK;
 8006f24:	2300      	movs	r3, #0
}
 8006f26:	4618      	mov	r0, r3
 8006f28:	3710      	adds	r7, #16
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	bd80      	pop	{r7, pc}
 8006f2e:	bf00      	nop
 8006f30:	40023c00 	.word	0x40023c00
 8006f34:	40023800 	.word	0x40023800
 8006f38:	080093cc 	.word	0x080093cc
 8006f3c:	20000018 	.word	0x20000018
 8006f40:	20000020 	.word	0x20000020

08006f44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006f44:	b5b0      	push	{r4, r5, r7, lr}
 8006f46:	b084      	sub	sp, #16
 8006f48:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8006f4a:	2100      	movs	r1, #0
 8006f4c:	6079      	str	r1, [r7, #4]
 8006f4e:	2100      	movs	r1, #0
 8006f50:	60f9      	str	r1, [r7, #12]
 8006f52:	2100      	movs	r1, #0
 8006f54:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 8006f56:	2100      	movs	r1, #0
 8006f58:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006f5a:	4952      	ldr	r1, [pc, #328]	; (80070a4 <HAL_RCC_GetSysClockFreq+0x160>)
 8006f5c:	6889      	ldr	r1, [r1, #8]
 8006f5e:	f001 010c 	and.w	r1, r1, #12
 8006f62:	2908      	cmp	r1, #8
 8006f64:	d00d      	beq.n	8006f82 <HAL_RCC_GetSysClockFreq+0x3e>
 8006f66:	2908      	cmp	r1, #8
 8006f68:	f200 8094 	bhi.w	8007094 <HAL_RCC_GetSysClockFreq+0x150>
 8006f6c:	2900      	cmp	r1, #0
 8006f6e:	d002      	beq.n	8006f76 <HAL_RCC_GetSysClockFreq+0x32>
 8006f70:	2904      	cmp	r1, #4
 8006f72:	d003      	beq.n	8006f7c <HAL_RCC_GetSysClockFreq+0x38>
 8006f74:	e08e      	b.n	8007094 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006f76:	4b4c      	ldr	r3, [pc, #304]	; (80070a8 <HAL_RCC_GetSysClockFreq+0x164>)
 8006f78:	60bb      	str	r3, [r7, #8]
      break;
 8006f7a:	e08e      	b.n	800709a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006f7c:	4b4b      	ldr	r3, [pc, #300]	; (80070ac <HAL_RCC_GetSysClockFreq+0x168>)
 8006f7e:	60bb      	str	r3, [r7, #8]
      break;
 8006f80:	e08b      	b.n	800709a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006f82:	4948      	ldr	r1, [pc, #288]	; (80070a4 <HAL_RCC_GetSysClockFreq+0x160>)
 8006f84:	6849      	ldr	r1, [r1, #4]
 8006f86:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8006f8a:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8006f8c:	4945      	ldr	r1, [pc, #276]	; (80070a4 <HAL_RCC_GetSysClockFreq+0x160>)
 8006f8e:	6849      	ldr	r1, [r1, #4]
 8006f90:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8006f94:	2900      	cmp	r1, #0
 8006f96:	d024      	beq.n	8006fe2 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006f98:	4942      	ldr	r1, [pc, #264]	; (80070a4 <HAL_RCC_GetSysClockFreq+0x160>)
 8006f9a:	6849      	ldr	r1, [r1, #4]
 8006f9c:	0989      	lsrs	r1, r1, #6
 8006f9e:	4608      	mov	r0, r1
 8006fa0:	f04f 0100 	mov.w	r1, #0
 8006fa4:	f240 14ff 	movw	r4, #511	; 0x1ff
 8006fa8:	f04f 0500 	mov.w	r5, #0
 8006fac:	ea00 0204 	and.w	r2, r0, r4
 8006fb0:	ea01 0305 	and.w	r3, r1, r5
 8006fb4:	493d      	ldr	r1, [pc, #244]	; (80070ac <HAL_RCC_GetSysClockFreq+0x168>)
 8006fb6:	fb01 f003 	mul.w	r0, r1, r3
 8006fba:	2100      	movs	r1, #0
 8006fbc:	fb01 f102 	mul.w	r1, r1, r2
 8006fc0:	1844      	adds	r4, r0, r1
 8006fc2:	493a      	ldr	r1, [pc, #232]	; (80070ac <HAL_RCC_GetSysClockFreq+0x168>)
 8006fc4:	fba2 0101 	umull	r0, r1, r2, r1
 8006fc8:	1863      	adds	r3, r4, r1
 8006fca:	4619      	mov	r1, r3
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	461a      	mov	r2, r3
 8006fd0:	f04f 0300 	mov.w	r3, #0
 8006fd4:	f7f9 f918 	bl	8000208 <__aeabi_uldivmod>
 8006fd8:	4602      	mov	r2, r0
 8006fda:	460b      	mov	r3, r1
 8006fdc:	4613      	mov	r3, r2
 8006fde:	60fb      	str	r3, [r7, #12]
 8006fe0:	e04a      	b.n	8007078 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006fe2:	4b30      	ldr	r3, [pc, #192]	; (80070a4 <HAL_RCC_GetSysClockFreq+0x160>)
 8006fe4:	685b      	ldr	r3, [r3, #4]
 8006fe6:	099b      	lsrs	r3, r3, #6
 8006fe8:	461a      	mov	r2, r3
 8006fea:	f04f 0300 	mov.w	r3, #0
 8006fee:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006ff2:	f04f 0100 	mov.w	r1, #0
 8006ff6:	ea02 0400 	and.w	r4, r2, r0
 8006ffa:	ea03 0501 	and.w	r5, r3, r1
 8006ffe:	4620      	mov	r0, r4
 8007000:	4629      	mov	r1, r5
 8007002:	f04f 0200 	mov.w	r2, #0
 8007006:	f04f 0300 	mov.w	r3, #0
 800700a:	014b      	lsls	r3, r1, #5
 800700c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007010:	0142      	lsls	r2, r0, #5
 8007012:	4610      	mov	r0, r2
 8007014:	4619      	mov	r1, r3
 8007016:	1b00      	subs	r0, r0, r4
 8007018:	eb61 0105 	sbc.w	r1, r1, r5
 800701c:	f04f 0200 	mov.w	r2, #0
 8007020:	f04f 0300 	mov.w	r3, #0
 8007024:	018b      	lsls	r3, r1, #6
 8007026:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800702a:	0182      	lsls	r2, r0, #6
 800702c:	1a12      	subs	r2, r2, r0
 800702e:	eb63 0301 	sbc.w	r3, r3, r1
 8007032:	f04f 0000 	mov.w	r0, #0
 8007036:	f04f 0100 	mov.w	r1, #0
 800703a:	00d9      	lsls	r1, r3, #3
 800703c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007040:	00d0      	lsls	r0, r2, #3
 8007042:	4602      	mov	r2, r0
 8007044:	460b      	mov	r3, r1
 8007046:	1912      	adds	r2, r2, r4
 8007048:	eb45 0303 	adc.w	r3, r5, r3
 800704c:	f04f 0000 	mov.w	r0, #0
 8007050:	f04f 0100 	mov.w	r1, #0
 8007054:	0299      	lsls	r1, r3, #10
 8007056:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800705a:	0290      	lsls	r0, r2, #10
 800705c:	4602      	mov	r2, r0
 800705e:	460b      	mov	r3, r1
 8007060:	4610      	mov	r0, r2
 8007062:	4619      	mov	r1, r3
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	461a      	mov	r2, r3
 8007068:	f04f 0300 	mov.w	r3, #0
 800706c:	f7f9 f8cc 	bl	8000208 <__aeabi_uldivmod>
 8007070:	4602      	mov	r2, r0
 8007072:	460b      	mov	r3, r1
 8007074:	4613      	mov	r3, r2
 8007076:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8007078:	4b0a      	ldr	r3, [pc, #40]	; (80070a4 <HAL_RCC_GetSysClockFreq+0x160>)
 800707a:	685b      	ldr	r3, [r3, #4]
 800707c:	0c1b      	lsrs	r3, r3, #16
 800707e:	f003 0303 	and.w	r3, r3, #3
 8007082:	3301      	adds	r3, #1
 8007084:	005b      	lsls	r3, r3, #1
 8007086:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8007088:	68fa      	ldr	r2, [r7, #12]
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007090:	60bb      	str	r3, [r7, #8]
      break;
 8007092:	e002      	b.n	800709a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007094:	4b04      	ldr	r3, [pc, #16]	; (80070a8 <HAL_RCC_GetSysClockFreq+0x164>)
 8007096:	60bb      	str	r3, [r7, #8]
      break;
 8007098:	bf00      	nop
    }
  }
  return sysclockfreq;
 800709a:	68bb      	ldr	r3, [r7, #8]
}
 800709c:	4618      	mov	r0, r3
 800709e:	3710      	adds	r7, #16
 80070a0:	46bd      	mov	sp, r7
 80070a2:	bdb0      	pop	{r4, r5, r7, pc}
 80070a4:	40023800 	.word	0x40023800
 80070a8:	00f42400 	.word	0x00f42400
 80070ac:	017d7840 	.word	0x017d7840

080070b0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80070b0:	b480      	push	{r7}
 80070b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80070b4:	4b03      	ldr	r3, [pc, #12]	; (80070c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80070b6:	681b      	ldr	r3, [r3, #0]
}
 80070b8:	4618      	mov	r0, r3
 80070ba:	46bd      	mov	sp, r7
 80070bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c0:	4770      	bx	lr
 80070c2:	bf00      	nop
 80070c4:	20000018 	.word	0x20000018

080070c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80070cc:	f7ff fff0 	bl	80070b0 <HAL_RCC_GetHCLKFreq>
 80070d0:	4602      	mov	r2, r0
 80070d2:	4b05      	ldr	r3, [pc, #20]	; (80070e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80070d4:	689b      	ldr	r3, [r3, #8]
 80070d6:	0a9b      	lsrs	r3, r3, #10
 80070d8:	f003 0307 	and.w	r3, r3, #7
 80070dc:	4903      	ldr	r1, [pc, #12]	; (80070ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80070de:	5ccb      	ldrb	r3, [r1, r3]
 80070e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80070e4:	4618      	mov	r0, r3
 80070e6:	bd80      	pop	{r7, pc}
 80070e8:	40023800 	.word	0x40023800
 80070ec:	080093dc 	.word	0x080093dc

080070f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80070f4:	f7ff ffdc 	bl	80070b0 <HAL_RCC_GetHCLKFreq>
 80070f8:	4602      	mov	r2, r0
 80070fa:	4b05      	ldr	r3, [pc, #20]	; (8007110 <HAL_RCC_GetPCLK2Freq+0x20>)
 80070fc:	689b      	ldr	r3, [r3, #8]
 80070fe:	0b5b      	lsrs	r3, r3, #13
 8007100:	f003 0307 	and.w	r3, r3, #7
 8007104:	4903      	ldr	r1, [pc, #12]	; (8007114 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007106:	5ccb      	ldrb	r3, [r1, r3]
 8007108:	fa22 f303 	lsr.w	r3, r2, r3
}
 800710c:	4618      	mov	r0, r3
 800710e:	bd80      	pop	{r7, pc}
 8007110:	40023800 	.word	0x40023800
 8007114:	080093dc 	.word	0x080093dc

08007118 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b088      	sub	sp, #32
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007120:	2300      	movs	r3, #0
 8007122:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8007124:	2300      	movs	r3, #0
 8007126:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8007128:	2300      	movs	r3, #0
 800712a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800712c:	2300      	movs	r3, #0
 800712e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8007130:	2300      	movs	r3, #0
 8007132:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f003 0301 	and.w	r3, r3, #1
 800713c:	2b00      	cmp	r3, #0
 800713e:	d012      	beq.n	8007166 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007140:	4b69      	ldr	r3, [pc, #420]	; (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007142:	689b      	ldr	r3, [r3, #8]
 8007144:	4a68      	ldr	r2, [pc, #416]	; (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007146:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800714a:	6093      	str	r3, [r2, #8]
 800714c:	4b66      	ldr	r3, [pc, #408]	; (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800714e:	689a      	ldr	r2, [r3, #8]
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007154:	4964      	ldr	r1, [pc, #400]	; (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007156:	4313      	orrs	r3, r2
 8007158:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800715e:	2b00      	cmp	r3, #0
 8007160:	d101      	bne.n	8007166 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8007162:	2301      	movs	r3, #1
 8007164:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800716e:	2b00      	cmp	r3, #0
 8007170:	d017      	beq.n	80071a2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007172:	4b5d      	ldr	r3, [pc, #372]	; (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007174:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007178:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007180:	4959      	ldr	r1, [pc, #356]	; (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007182:	4313      	orrs	r3, r2
 8007184:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800718c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007190:	d101      	bne.n	8007196 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8007192:	2301      	movs	r3, #1
 8007194:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800719a:	2b00      	cmp	r3, #0
 800719c:	d101      	bne.n	80071a2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800719e:	2301      	movs	r3, #1
 80071a0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d017      	beq.n	80071de <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80071ae:	4b4e      	ldr	r3, [pc, #312]	; (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80071b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80071b4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071bc:	494a      	ldr	r1, [pc, #296]	; (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80071be:	4313      	orrs	r3, r2
 80071c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80071cc:	d101      	bne.n	80071d2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80071ce:	2301      	movs	r3, #1
 80071d0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d101      	bne.n	80071de <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80071da:	2301      	movs	r3, #1
 80071dc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d001      	beq.n	80071ee <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80071ea:	2301      	movs	r3, #1
 80071ec:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	f003 0320 	and.w	r3, r3, #32
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	f000 808b 	beq.w	8007312 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80071fc:	4b3a      	ldr	r3, [pc, #232]	; (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80071fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007200:	4a39      	ldr	r2, [pc, #228]	; (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007202:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007206:	6413      	str	r3, [r2, #64]	; 0x40
 8007208:	4b37      	ldr	r3, [pc, #220]	; (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800720a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800720c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007210:	60bb      	str	r3, [r7, #8]
 8007212:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007214:	4b35      	ldr	r3, [pc, #212]	; (80072ec <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	4a34      	ldr	r2, [pc, #208]	; (80072ec <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800721a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800721e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007220:	f7fc f950 	bl	80034c4 <HAL_GetTick>
 8007224:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007226:	e008      	b.n	800723a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007228:	f7fc f94c 	bl	80034c4 <HAL_GetTick>
 800722c:	4602      	mov	r2, r0
 800722e:	697b      	ldr	r3, [r7, #20]
 8007230:	1ad3      	subs	r3, r2, r3
 8007232:	2b64      	cmp	r3, #100	; 0x64
 8007234:	d901      	bls.n	800723a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8007236:	2303      	movs	r3, #3
 8007238:	e357      	b.n	80078ea <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800723a:	4b2c      	ldr	r3, [pc, #176]	; (80072ec <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007242:	2b00      	cmp	r3, #0
 8007244:	d0f0      	beq.n	8007228 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007246:	4b28      	ldr	r3, [pc, #160]	; (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007248:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800724a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800724e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007250:	693b      	ldr	r3, [r7, #16]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d035      	beq.n	80072c2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800725a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800725e:	693a      	ldr	r2, [r7, #16]
 8007260:	429a      	cmp	r2, r3
 8007262:	d02e      	beq.n	80072c2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007264:	4b20      	ldr	r3, [pc, #128]	; (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007266:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007268:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800726c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800726e:	4b1e      	ldr	r3, [pc, #120]	; (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007270:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007272:	4a1d      	ldr	r2, [pc, #116]	; (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007274:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007278:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800727a:	4b1b      	ldr	r3, [pc, #108]	; (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800727c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800727e:	4a1a      	ldr	r2, [pc, #104]	; (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007280:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007284:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8007286:	4a18      	ldr	r2, [pc, #96]	; (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007288:	693b      	ldr	r3, [r7, #16]
 800728a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800728c:	4b16      	ldr	r3, [pc, #88]	; (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800728e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007290:	f003 0301 	and.w	r3, r3, #1
 8007294:	2b01      	cmp	r3, #1
 8007296:	d114      	bne.n	80072c2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007298:	f7fc f914 	bl	80034c4 <HAL_GetTick>
 800729c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800729e:	e00a      	b.n	80072b6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80072a0:	f7fc f910 	bl	80034c4 <HAL_GetTick>
 80072a4:	4602      	mov	r2, r0
 80072a6:	697b      	ldr	r3, [r7, #20]
 80072a8:	1ad3      	subs	r3, r2, r3
 80072aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80072ae:	4293      	cmp	r3, r2
 80072b0:	d901      	bls.n	80072b6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80072b2:	2303      	movs	r3, #3
 80072b4:	e319      	b.n	80078ea <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80072b6:	4b0c      	ldr	r3, [pc, #48]	; (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80072b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072ba:	f003 0302 	and.w	r3, r3, #2
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d0ee      	beq.n	80072a0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80072ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80072ce:	d111      	bne.n	80072f4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80072d0:	4b05      	ldr	r3, [pc, #20]	; (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80072d2:	689b      	ldr	r3, [r3, #8]
 80072d4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80072dc:	4b04      	ldr	r3, [pc, #16]	; (80072f0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80072de:	400b      	ands	r3, r1
 80072e0:	4901      	ldr	r1, [pc, #4]	; (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80072e2:	4313      	orrs	r3, r2
 80072e4:	608b      	str	r3, [r1, #8]
 80072e6:	e00b      	b.n	8007300 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80072e8:	40023800 	.word	0x40023800
 80072ec:	40007000 	.word	0x40007000
 80072f0:	0ffffcff 	.word	0x0ffffcff
 80072f4:	4bb1      	ldr	r3, [pc, #708]	; (80075bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80072f6:	689b      	ldr	r3, [r3, #8]
 80072f8:	4ab0      	ldr	r2, [pc, #704]	; (80075bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80072fa:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80072fe:	6093      	str	r3, [r2, #8]
 8007300:	4bae      	ldr	r3, [pc, #696]	; (80075bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007302:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007308:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800730c:	49ab      	ldr	r1, [pc, #684]	; (80075bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800730e:	4313      	orrs	r3, r2
 8007310:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	f003 0310 	and.w	r3, r3, #16
 800731a:	2b00      	cmp	r3, #0
 800731c:	d010      	beq.n	8007340 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800731e:	4ba7      	ldr	r3, [pc, #668]	; (80075bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007320:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007324:	4aa5      	ldr	r2, [pc, #660]	; (80075bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007326:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800732a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800732e:	4ba3      	ldr	r3, [pc, #652]	; (80075bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007330:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007338:	49a0      	ldr	r1, [pc, #640]	; (80075bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800733a:	4313      	orrs	r3, r2
 800733c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007348:	2b00      	cmp	r3, #0
 800734a:	d00a      	beq.n	8007362 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800734c:	4b9b      	ldr	r3, [pc, #620]	; (80075bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800734e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007352:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800735a:	4998      	ldr	r1, [pc, #608]	; (80075bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800735c:	4313      	orrs	r3, r2
 800735e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800736a:	2b00      	cmp	r3, #0
 800736c:	d00a      	beq.n	8007384 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800736e:	4b93      	ldr	r3, [pc, #588]	; (80075bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007370:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007374:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800737c:	498f      	ldr	r1, [pc, #572]	; (80075bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800737e:	4313      	orrs	r3, r2
 8007380:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800738c:	2b00      	cmp	r3, #0
 800738e:	d00a      	beq.n	80073a6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007390:	4b8a      	ldr	r3, [pc, #552]	; (80075bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007392:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007396:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800739e:	4987      	ldr	r1, [pc, #540]	; (80075bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80073a0:	4313      	orrs	r3, r2
 80073a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d00a      	beq.n	80073c8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80073b2:	4b82      	ldr	r3, [pc, #520]	; (80075bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80073b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073b8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073c0:	497e      	ldr	r1, [pc, #504]	; (80075bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80073c2:	4313      	orrs	r3, r2
 80073c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d00a      	beq.n	80073ea <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80073d4:	4b79      	ldr	r3, [pc, #484]	; (80075bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80073d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073da:	f023 0203 	bic.w	r2, r3, #3
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073e2:	4976      	ldr	r1, [pc, #472]	; (80075bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80073e4:	4313      	orrs	r3, r2
 80073e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d00a      	beq.n	800740c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80073f6:	4b71      	ldr	r3, [pc, #452]	; (80075bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80073f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073fc:	f023 020c 	bic.w	r2, r3, #12
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007404:	496d      	ldr	r1, [pc, #436]	; (80075bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007406:	4313      	orrs	r3, r2
 8007408:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007414:	2b00      	cmp	r3, #0
 8007416:	d00a      	beq.n	800742e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007418:	4b68      	ldr	r3, [pc, #416]	; (80075bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800741a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800741e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007426:	4965      	ldr	r1, [pc, #404]	; (80075bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007428:	4313      	orrs	r3, r2
 800742a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007436:	2b00      	cmp	r3, #0
 8007438:	d00a      	beq.n	8007450 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800743a:	4b60      	ldr	r3, [pc, #384]	; (80075bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800743c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007440:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007448:	495c      	ldr	r1, [pc, #368]	; (80075bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800744a:	4313      	orrs	r3, r2
 800744c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007458:	2b00      	cmp	r3, #0
 800745a:	d00a      	beq.n	8007472 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800745c:	4b57      	ldr	r3, [pc, #348]	; (80075bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800745e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007462:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800746a:	4954      	ldr	r1, [pc, #336]	; (80075bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800746c:	4313      	orrs	r3, r2
 800746e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800747a:	2b00      	cmp	r3, #0
 800747c:	d00a      	beq.n	8007494 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800747e:	4b4f      	ldr	r3, [pc, #316]	; (80075bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007480:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007484:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800748c:	494b      	ldr	r1, [pc, #300]	; (80075bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800748e:	4313      	orrs	r3, r2
 8007490:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800749c:	2b00      	cmp	r3, #0
 800749e:	d00a      	beq.n	80074b6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80074a0:	4b46      	ldr	r3, [pc, #280]	; (80075bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80074a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074a6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074ae:	4943      	ldr	r1, [pc, #268]	; (80075bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80074b0:	4313      	orrs	r3, r2
 80074b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d00a      	beq.n	80074d8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80074c2:	4b3e      	ldr	r3, [pc, #248]	; (80075bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80074c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074c8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80074d0:	493a      	ldr	r1, [pc, #232]	; (80075bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80074d2:	4313      	orrs	r3, r2
 80074d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d00a      	beq.n	80074fa <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80074e4:	4b35      	ldr	r3, [pc, #212]	; (80075bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80074e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074ea:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80074f2:	4932      	ldr	r1, [pc, #200]	; (80075bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80074f4:	4313      	orrs	r3, r2
 80074f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007502:	2b00      	cmp	r3, #0
 8007504:	d011      	beq.n	800752a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8007506:	4b2d      	ldr	r3, [pc, #180]	; (80075bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007508:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800750c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007514:	4929      	ldr	r1, [pc, #164]	; (80075bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007516:	4313      	orrs	r3, r2
 8007518:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007520:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007524:	d101      	bne.n	800752a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8007526:	2301      	movs	r3, #1
 8007528:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f003 0308 	and.w	r3, r3, #8
 8007532:	2b00      	cmp	r3, #0
 8007534:	d001      	beq.n	800753a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8007536:	2301      	movs	r3, #1
 8007538:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007542:	2b00      	cmp	r3, #0
 8007544:	d00a      	beq.n	800755c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007546:	4b1d      	ldr	r3, [pc, #116]	; (80075bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007548:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800754c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007554:	4919      	ldr	r1, [pc, #100]	; (80075bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007556:	4313      	orrs	r3, r2
 8007558:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007564:	2b00      	cmp	r3, #0
 8007566:	d00b      	beq.n	8007580 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007568:	4b14      	ldr	r3, [pc, #80]	; (80075bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800756a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800756e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007578:	4910      	ldr	r1, [pc, #64]	; (80075bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800757a:	4313      	orrs	r3, r2
 800757c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007580:	69fb      	ldr	r3, [r7, #28]
 8007582:	2b01      	cmp	r3, #1
 8007584:	d006      	beq.n	8007594 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800758e:	2b00      	cmp	r3, #0
 8007590:	f000 80d9 	beq.w	8007746 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007594:	4b09      	ldr	r3, [pc, #36]	; (80075bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	4a08      	ldr	r2, [pc, #32]	; (80075bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800759a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800759e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80075a0:	f7fb ff90 	bl	80034c4 <HAL_GetTick>
 80075a4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80075a6:	e00b      	b.n	80075c0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80075a8:	f7fb ff8c 	bl	80034c4 <HAL_GetTick>
 80075ac:	4602      	mov	r2, r0
 80075ae:	697b      	ldr	r3, [r7, #20]
 80075b0:	1ad3      	subs	r3, r2, r3
 80075b2:	2b64      	cmp	r3, #100	; 0x64
 80075b4:	d904      	bls.n	80075c0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80075b6:	2303      	movs	r3, #3
 80075b8:	e197      	b.n	80078ea <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80075ba:	bf00      	nop
 80075bc:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80075c0:	4b6c      	ldr	r3, [pc, #432]	; (8007774 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d1ed      	bne.n	80075a8 <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	f003 0301 	and.w	r3, r3, #1
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d021      	beq.n	800761c <HAL_RCCEx_PeriphCLKConfig+0x504>
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d11d      	bne.n	800761c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80075e0:	4b64      	ldr	r3, [pc, #400]	; (8007774 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80075e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80075e6:	0c1b      	lsrs	r3, r3, #16
 80075e8:	f003 0303 	and.w	r3, r3, #3
 80075ec:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80075ee:	4b61      	ldr	r3, [pc, #388]	; (8007774 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80075f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80075f4:	0e1b      	lsrs	r3, r3, #24
 80075f6:	f003 030f 	and.w	r3, r3, #15
 80075fa:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	685b      	ldr	r3, [r3, #4]
 8007600:	019a      	lsls	r2, r3, #6
 8007602:	693b      	ldr	r3, [r7, #16]
 8007604:	041b      	lsls	r3, r3, #16
 8007606:	431a      	orrs	r2, r3
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	061b      	lsls	r3, r3, #24
 800760c:	431a      	orrs	r2, r3
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	689b      	ldr	r3, [r3, #8]
 8007612:	071b      	lsls	r3, r3, #28
 8007614:	4957      	ldr	r1, [pc, #348]	; (8007774 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007616:	4313      	orrs	r3, r2
 8007618:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007624:	2b00      	cmp	r3, #0
 8007626:	d004      	beq.n	8007632 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800762c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007630:	d00a      	beq.n	8007648 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800763a:	2b00      	cmp	r3, #0
 800763c:	d02e      	beq.n	800769c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007642:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007646:	d129      	bne.n	800769c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007648:	4b4a      	ldr	r3, [pc, #296]	; (8007774 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800764a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800764e:	0c1b      	lsrs	r3, r3, #16
 8007650:	f003 0303 	and.w	r3, r3, #3
 8007654:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007656:	4b47      	ldr	r3, [pc, #284]	; (8007774 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007658:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800765c:	0f1b      	lsrs	r3, r3, #28
 800765e:	f003 0307 	and.w	r3, r3, #7
 8007662:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	685b      	ldr	r3, [r3, #4]
 8007668:	019a      	lsls	r2, r3, #6
 800766a:	693b      	ldr	r3, [r7, #16]
 800766c:	041b      	lsls	r3, r3, #16
 800766e:	431a      	orrs	r2, r3
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	68db      	ldr	r3, [r3, #12]
 8007674:	061b      	lsls	r3, r3, #24
 8007676:	431a      	orrs	r2, r3
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	071b      	lsls	r3, r3, #28
 800767c:	493d      	ldr	r1, [pc, #244]	; (8007774 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800767e:	4313      	orrs	r3, r2
 8007680:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007684:	4b3b      	ldr	r3, [pc, #236]	; (8007774 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007686:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800768a:	f023 021f 	bic.w	r2, r3, #31
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007692:	3b01      	subs	r3, #1
 8007694:	4937      	ldr	r1, [pc, #220]	; (8007774 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007696:	4313      	orrs	r3, r2
 8007698:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d01d      	beq.n	80076e4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80076a8:	4b32      	ldr	r3, [pc, #200]	; (8007774 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80076aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80076ae:	0e1b      	lsrs	r3, r3, #24
 80076b0:	f003 030f 	and.w	r3, r3, #15
 80076b4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80076b6:	4b2f      	ldr	r3, [pc, #188]	; (8007774 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80076b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80076bc:	0f1b      	lsrs	r3, r3, #28
 80076be:	f003 0307 	and.w	r3, r3, #7
 80076c2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	685b      	ldr	r3, [r3, #4]
 80076c8:	019a      	lsls	r2, r3, #6
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	691b      	ldr	r3, [r3, #16]
 80076ce:	041b      	lsls	r3, r3, #16
 80076d0:	431a      	orrs	r2, r3
 80076d2:	693b      	ldr	r3, [r7, #16]
 80076d4:	061b      	lsls	r3, r3, #24
 80076d6:	431a      	orrs	r2, r3
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	071b      	lsls	r3, r3, #28
 80076dc:	4925      	ldr	r1, [pc, #148]	; (8007774 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80076de:	4313      	orrs	r3, r2
 80076e0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d011      	beq.n	8007714 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	685b      	ldr	r3, [r3, #4]
 80076f4:	019a      	lsls	r2, r3, #6
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	691b      	ldr	r3, [r3, #16]
 80076fa:	041b      	lsls	r3, r3, #16
 80076fc:	431a      	orrs	r2, r3
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	68db      	ldr	r3, [r3, #12]
 8007702:	061b      	lsls	r3, r3, #24
 8007704:	431a      	orrs	r2, r3
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	689b      	ldr	r3, [r3, #8]
 800770a:	071b      	lsls	r3, r3, #28
 800770c:	4919      	ldr	r1, [pc, #100]	; (8007774 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800770e:	4313      	orrs	r3, r2
 8007710:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007714:	4b17      	ldr	r3, [pc, #92]	; (8007774 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	4a16      	ldr	r2, [pc, #88]	; (8007774 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800771a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800771e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007720:	f7fb fed0 	bl	80034c4 <HAL_GetTick>
 8007724:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007726:	e008      	b.n	800773a <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007728:	f7fb fecc 	bl	80034c4 <HAL_GetTick>
 800772c:	4602      	mov	r2, r0
 800772e:	697b      	ldr	r3, [r7, #20]
 8007730:	1ad3      	subs	r3, r2, r3
 8007732:	2b64      	cmp	r3, #100	; 0x64
 8007734:	d901      	bls.n	800773a <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007736:	2303      	movs	r3, #3
 8007738:	e0d7      	b.n	80078ea <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800773a:	4b0e      	ldr	r3, [pc, #56]	; (8007774 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007742:	2b00      	cmp	r3, #0
 8007744:	d0f0      	beq.n	8007728 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8007746:	69bb      	ldr	r3, [r7, #24]
 8007748:	2b01      	cmp	r3, #1
 800774a:	f040 80cd 	bne.w	80078e8 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800774e:	4b09      	ldr	r3, [pc, #36]	; (8007774 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	4a08      	ldr	r2, [pc, #32]	; (8007774 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007754:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007758:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800775a:	f7fb feb3 	bl	80034c4 <HAL_GetTick>
 800775e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007760:	e00a      	b.n	8007778 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007762:	f7fb feaf 	bl	80034c4 <HAL_GetTick>
 8007766:	4602      	mov	r2, r0
 8007768:	697b      	ldr	r3, [r7, #20]
 800776a:	1ad3      	subs	r3, r2, r3
 800776c:	2b64      	cmp	r3, #100	; 0x64
 800776e:	d903      	bls.n	8007778 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007770:	2303      	movs	r3, #3
 8007772:	e0ba      	b.n	80078ea <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8007774:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007778:	4b5e      	ldr	r3, [pc, #376]	; (80078f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007780:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007784:	d0ed      	beq.n	8007762 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800778e:	2b00      	cmp	r3, #0
 8007790:	d003      	beq.n	800779a <HAL_RCCEx_PeriphCLKConfig+0x682>
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007796:	2b00      	cmp	r3, #0
 8007798:	d009      	beq.n	80077ae <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d02e      	beq.n	8007804 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d12a      	bne.n	8007804 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80077ae:	4b51      	ldr	r3, [pc, #324]	; (80078f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80077b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077b4:	0c1b      	lsrs	r3, r3, #16
 80077b6:	f003 0303 	and.w	r3, r3, #3
 80077ba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80077bc:	4b4d      	ldr	r3, [pc, #308]	; (80078f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80077be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077c2:	0f1b      	lsrs	r3, r3, #28
 80077c4:	f003 0307 	and.w	r3, r3, #7
 80077c8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	695b      	ldr	r3, [r3, #20]
 80077ce:	019a      	lsls	r2, r3, #6
 80077d0:	693b      	ldr	r3, [r7, #16]
 80077d2:	041b      	lsls	r3, r3, #16
 80077d4:	431a      	orrs	r2, r3
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	699b      	ldr	r3, [r3, #24]
 80077da:	061b      	lsls	r3, r3, #24
 80077dc:	431a      	orrs	r2, r3
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	071b      	lsls	r3, r3, #28
 80077e2:	4944      	ldr	r1, [pc, #272]	; (80078f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80077e4:	4313      	orrs	r3, r2
 80077e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80077ea:	4b42      	ldr	r3, [pc, #264]	; (80078f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80077ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80077f0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077f8:	3b01      	subs	r3, #1
 80077fa:	021b      	lsls	r3, r3, #8
 80077fc:	493d      	ldr	r1, [pc, #244]	; (80078f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80077fe:	4313      	orrs	r3, r2
 8007800:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800780c:	2b00      	cmp	r3, #0
 800780e:	d022      	beq.n	8007856 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007814:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007818:	d11d      	bne.n	8007856 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800781a:	4b36      	ldr	r3, [pc, #216]	; (80078f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800781c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007820:	0e1b      	lsrs	r3, r3, #24
 8007822:	f003 030f 	and.w	r3, r3, #15
 8007826:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007828:	4b32      	ldr	r3, [pc, #200]	; (80078f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800782a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800782e:	0f1b      	lsrs	r3, r3, #28
 8007830:	f003 0307 	and.w	r3, r3, #7
 8007834:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	695b      	ldr	r3, [r3, #20]
 800783a:	019a      	lsls	r2, r3, #6
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	6a1b      	ldr	r3, [r3, #32]
 8007840:	041b      	lsls	r3, r3, #16
 8007842:	431a      	orrs	r2, r3
 8007844:	693b      	ldr	r3, [r7, #16]
 8007846:	061b      	lsls	r3, r3, #24
 8007848:	431a      	orrs	r2, r3
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	071b      	lsls	r3, r3, #28
 800784e:	4929      	ldr	r1, [pc, #164]	; (80078f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007850:	4313      	orrs	r3, r2
 8007852:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	f003 0308 	and.w	r3, r3, #8
 800785e:	2b00      	cmp	r3, #0
 8007860:	d028      	beq.n	80078b4 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007862:	4b24      	ldr	r3, [pc, #144]	; (80078f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007864:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007868:	0e1b      	lsrs	r3, r3, #24
 800786a:	f003 030f 	and.w	r3, r3, #15
 800786e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007870:	4b20      	ldr	r3, [pc, #128]	; (80078f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007872:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007876:	0c1b      	lsrs	r3, r3, #16
 8007878:	f003 0303 	and.w	r3, r3, #3
 800787c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	695b      	ldr	r3, [r3, #20]
 8007882:	019a      	lsls	r2, r3, #6
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	041b      	lsls	r3, r3, #16
 8007888:	431a      	orrs	r2, r3
 800788a:	693b      	ldr	r3, [r7, #16]
 800788c:	061b      	lsls	r3, r3, #24
 800788e:	431a      	orrs	r2, r3
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	69db      	ldr	r3, [r3, #28]
 8007894:	071b      	lsls	r3, r3, #28
 8007896:	4917      	ldr	r1, [pc, #92]	; (80078f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007898:	4313      	orrs	r3, r2
 800789a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800789e:	4b15      	ldr	r3, [pc, #84]	; (80078f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80078a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80078a4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078ac:	4911      	ldr	r1, [pc, #68]	; (80078f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80078ae:	4313      	orrs	r3, r2
 80078b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80078b4:	4b0f      	ldr	r3, [pc, #60]	; (80078f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	4a0e      	ldr	r2, [pc, #56]	; (80078f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80078ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80078be:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80078c0:	f7fb fe00 	bl	80034c4 <HAL_GetTick>
 80078c4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80078c6:	e008      	b.n	80078da <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80078c8:	f7fb fdfc 	bl	80034c4 <HAL_GetTick>
 80078cc:	4602      	mov	r2, r0
 80078ce:	697b      	ldr	r3, [r7, #20]
 80078d0:	1ad3      	subs	r3, r2, r3
 80078d2:	2b64      	cmp	r3, #100	; 0x64
 80078d4:	d901      	bls.n	80078da <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80078d6:	2303      	movs	r3, #3
 80078d8:	e007      	b.n	80078ea <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80078da:	4b06      	ldr	r3, [pc, #24]	; (80078f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80078e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80078e6:	d1ef      	bne.n	80078c8 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80078e8:	2300      	movs	r3, #0
}
 80078ea:	4618      	mov	r0, r3
 80078ec:	3720      	adds	r7, #32
 80078ee:	46bd      	mov	sp, r7
 80078f0:	bd80      	pop	{r7, pc}
 80078f2:	bf00      	nop
 80078f4:	40023800 	.word	0x40023800

080078f8 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 80078f8:	b580      	push	{r7, lr}
 80078fa:	b082      	sub	sp, #8
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]
 8007900:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d101      	bne.n	800790c <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8007908:	2301      	movs	r3, #1
 800790a:	e025      	b.n	8007958 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007912:	b2db      	uxtb	r3, r3
 8007914:	2b00      	cmp	r3, #0
 8007916:	d106      	bne.n	8007926 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2200      	movs	r2, #0
 800791c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8007920:	6878      	ldr	r0, [r7, #4]
 8007922:	f7fb fb57 	bl	8002fd4 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	2202      	movs	r2, #2
 800792a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681a      	ldr	r2, [r3, #0]
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	3304      	adds	r3, #4
 8007936:	4619      	mov	r1, r3
 8007938:	4610      	mov	r0, r2
 800793a:	f000 fd4b 	bl	80083d4 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	6818      	ldr	r0, [r3, #0]
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	685b      	ldr	r3, [r3, #4]
 8007946:	461a      	mov	r2, r3
 8007948:	6839      	ldr	r1, [r7, #0]
 800794a:	f000 fd9f 	bl	800848c <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	2201      	movs	r2, #1
 8007952:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8007956:	2300      	movs	r3, #0
}
 8007958:	4618      	mov	r0, r3
 800795a:	3708      	adds	r7, #8
 800795c:	46bd      	mov	sp, r7
 800795e:	bd80      	pop	{r7, pc}

08007960 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8007960:	b580      	push	{r7, lr}
 8007962:	b086      	sub	sp, #24
 8007964:	af00      	add	r7, sp, #0
 8007966:	60f8      	str	r0, [r7, #12]
 8007968:	60b9      	str	r1, [r7, #8]
 800796a:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007972:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8007974:	7dfb      	ldrb	r3, [r7, #23]
 8007976:	2b02      	cmp	r3, #2
 8007978:	d101      	bne.n	800797e <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 800797a:	2302      	movs	r3, #2
 800797c:	e021      	b.n	80079c2 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800797e:	7dfb      	ldrb	r3, [r7, #23]
 8007980:	2b01      	cmp	r3, #1
 8007982:	d002      	beq.n	800798a <HAL_SDRAM_SendCommand+0x2a>
 8007984:	7dfb      	ldrb	r3, [r7, #23]
 8007986:	2b05      	cmp	r3, #5
 8007988:	d118      	bne.n	80079bc <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	2202      	movs	r2, #2
 800798e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	687a      	ldr	r2, [r7, #4]
 8007998:	68b9      	ldr	r1, [r7, #8]
 800799a:	4618      	mov	r0, r3
 800799c:	f000 fde0 	bl	8008560 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80079a0:	68bb      	ldr	r3, [r7, #8]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	2b02      	cmp	r3, #2
 80079a6:	d104      	bne.n	80079b2 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	2205      	movs	r2, #5
 80079ac:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80079b0:	e006      	b.n	80079c0 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	2201      	movs	r2, #1
 80079b6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80079ba:	e001      	b.n	80079c0 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 80079bc:	2301      	movs	r3, #1
 80079be:	e000      	b.n	80079c2 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 80079c0:	2300      	movs	r3, #0
}
 80079c2:	4618      	mov	r0, r3
 80079c4:	3718      	adds	r7, #24
 80079c6:	46bd      	mov	sp, r7
 80079c8:	bd80      	pop	{r7, pc}

080079ca <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 80079ca:	b580      	push	{r7, lr}
 80079cc:	b082      	sub	sp, #8
 80079ce:	af00      	add	r7, sp, #0
 80079d0:	6078      	str	r0, [r7, #4]
 80079d2:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80079da:	b2db      	uxtb	r3, r3
 80079dc:	2b02      	cmp	r3, #2
 80079de:	d101      	bne.n	80079e4 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 80079e0:	2302      	movs	r3, #2
 80079e2:	e016      	b.n	8007a12 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80079ea:	b2db      	uxtb	r3, r3
 80079ec:	2b01      	cmp	r3, #1
 80079ee:	d10f      	bne.n	8007a10 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2202      	movs	r2, #2
 80079f4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	6839      	ldr	r1, [r7, #0]
 80079fe:	4618      	mov	r0, r3
 8007a00:	f000 fdd2 	bl	80085a8 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2201      	movs	r2, #1
 8007a08:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	e000      	b.n	8007a12 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8007a10:	2301      	movs	r3, #1
}
 8007a12:	4618      	mov	r0, r3
 8007a14:	3708      	adds	r7, #8
 8007a16:	46bd      	mov	sp, r7
 8007a18:	bd80      	pop	{r7, pc}

08007a1a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007a1a:	b580      	push	{r7, lr}
 8007a1c:	b082      	sub	sp, #8
 8007a1e:	af00      	add	r7, sp, #0
 8007a20:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d101      	bne.n	8007a2c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007a28:	2301      	movs	r3, #1
 8007a2a:	e040      	b.n	8007aae <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d106      	bne.n	8007a42 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2200      	movs	r2, #0
 8007a38:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007a3c:	6878      	ldr	r0, [r7, #4]
 8007a3e:	f7fb f9b7 	bl	8002db0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	2224      	movs	r2, #36	; 0x24
 8007a46:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	681a      	ldr	r2, [r3, #0]
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	f022 0201 	bic.w	r2, r2, #1
 8007a56:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007a58:	6878      	ldr	r0, [r7, #4]
 8007a5a:	f000 f8bf 	bl	8007bdc <UART_SetConfig>
 8007a5e:	4603      	mov	r3, r0
 8007a60:	2b01      	cmp	r3, #1
 8007a62:	d101      	bne.n	8007a68 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007a64:	2301      	movs	r3, #1
 8007a66:	e022      	b.n	8007aae <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d002      	beq.n	8007a76 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8007a70:	6878      	ldr	r0, [r7, #4]
 8007a72:	f000 fb15 	bl	80080a0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	685a      	ldr	r2, [r3, #4]
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007a84:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	689a      	ldr	r2, [r3, #8]
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007a94:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	681a      	ldr	r2, [r3, #0]
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	f042 0201 	orr.w	r2, r2, #1
 8007aa4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007aa6:	6878      	ldr	r0, [r7, #4]
 8007aa8:	f000 fb9c 	bl	80081e4 <UART_CheckIdleState>
 8007aac:	4603      	mov	r3, r0
}
 8007aae:	4618      	mov	r0, r3
 8007ab0:	3708      	adds	r7, #8
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	bd80      	pop	{r7, pc}

08007ab6 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007ab6:	b580      	push	{r7, lr}
 8007ab8:	b08a      	sub	sp, #40	; 0x28
 8007aba:	af02      	add	r7, sp, #8
 8007abc:	60f8      	str	r0, [r7, #12]
 8007abe:	60b9      	str	r1, [r7, #8]
 8007ac0:	603b      	str	r3, [r7, #0]
 8007ac2:	4613      	mov	r3, r2
 8007ac4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007aca:	2b20      	cmp	r3, #32
 8007acc:	f040 8081 	bne.w	8007bd2 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007ad0:	68bb      	ldr	r3, [r7, #8]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d002      	beq.n	8007adc <HAL_UART_Transmit+0x26>
 8007ad6:	88fb      	ldrh	r3, [r7, #6]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d101      	bne.n	8007ae0 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007adc:	2301      	movs	r3, #1
 8007ade:	e079      	b.n	8007bd4 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8007ae6:	2b01      	cmp	r3, #1
 8007ae8:	d101      	bne.n	8007aee <HAL_UART_Transmit+0x38>
 8007aea:	2302      	movs	r3, #2
 8007aec:	e072      	b.n	8007bd4 <HAL_UART_Transmit+0x11e>
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	2201      	movs	r2, #1
 8007af2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	2200      	movs	r2, #0
 8007afa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	2221      	movs	r2, #33	; 0x21
 8007b02:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007b04:	f7fb fcde 	bl	80034c4 <HAL_GetTick>
 8007b08:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	88fa      	ldrh	r2, [r7, #6]
 8007b0e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	88fa      	ldrh	r2, [r7, #6]
 8007b16:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	689b      	ldr	r3, [r3, #8]
 8007b1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b22:	d108      	bne.n	8007b36 <HAL_UART_Transmit+0x80>
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	691b      	ldr	r3, [r3, #16]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d104      	bne.n	8007b36 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007b30:	68bb      	ldr	r3, [r7, #8]
 8007b32:	61bb      	str	r3, [r7, #24]
 8007b34:	e003      	b.n	8007b3e <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8007b36:	68bb      	ldr	r3, [r7, #8]
 8007b38:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	2200      	movs	r2, #0
 8007b42:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8007b46:	e02c      	b.n	8007ba2 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	9300      	str	r3, [sp, #0]
 8007b4c:	697b      	ldr	r3, [r7, #20]
 8007b4e:	2200      	movs	r2, #0
 8007b50:	2180      	movs	r1, #128	; 0x80
 8007b52:	68f8      	ldr	r0, [r7, #12]
 8007b54:	f000 fb79 	bl	800824a <UART_WaitOnFlagUntilTimeout>
 8007b58:	4603      	mov	r3, r0
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d001      	beq.n	8007b62 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8007b5e:	2303      	movs	r3, #3
 8007b60:	e038      	b.n	8007bd4 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8007b62:	69fb      	ldr	r3, [r7, #28]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d10b      	bne.n	8007b80 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007b68:	69bb      	ldr	r3, [r7, #24]
 8007b6a:	881b      	ldrh	r3, [r3, #0]
 8007b6c:	461a      	mov	r2, r3
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007b76:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007b78:	69bb      	ldr	r3, [r7, #24]
 8007b7a:	3302      	adds	r3, #2
 8007b7c:	61bb      	str	r3, [r7, #24]
 8007b7e:	e007      	b.n	8007b90 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007b80:	69fb      	ldr	r3, [r7, #28]
 8007b82:	781a      	ldrb	r2, [r3, #0]
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007b8a:	69fb      	ldr	r3, [r7, #28]
 8007b8c:	3301      	adds	r3, #1
 8007b8e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007b96:	b29b      	uxth	r3, r3
 8007b98:	3b01      	subs	r3, #1
 8007b9a:	b29a      	uxth	r2, r3
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007ba8:	b29b      	uxth	r3, r3
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d1cc      	bne.n	8007b48 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007bae:	683b      	ldr	r3, [r7, #0]
 8007bb0:	9300      	str	r3, [sp, #0]
 8007bb2:	697b      	ldr	r3, [r7, #20]
 8007bb4:	2200      	movs	r2, #0
 8007bb6:	2140      	movs	r1, #64	; 0x40
 8007bb8:	68f8      	ldr	r0, [r7, #12]
 8007bba:	f000 fb46 	bl	800824a <UART_WaitOnFlagUntilTimeout>
 8007bbe:	4603      	mov	r3, r0
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d001      	beq.n	8007bc8 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8007bc4:	2303      	movs	r3, #3
 8007bc6:	e005      	b.n	8007bd4 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	2220      	movs	r2, #32
 8007bcc:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8007bce:	2300      	movs	r3, #0
 8007bd0:	e000      	b.n	8007bd4 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8007bd2:	2302      	movs	r3, #2
  }
}
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	3720      	adds	r7, #32
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	bd80      	pop	{r7, pc}

08007bdc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b088      	sub	sp, #32
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007be4:	2300      	movs	r3, #0
 8007be6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	689a      	ldr	r2, [r3, #8]
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	691b      	ldr	r3, [r3, #16]
 8007bf0:	431a      	orrs	r2, r3
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	695b      	ldr	r3, [r3, #20]
 8007bf6:	431a      	orrs	r2, r3
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	69db      	ldr	r3, [r3, #28]
 8007bfc:	4313      	orrs	r3, r2
 8007bfe:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	681a      	ldr	r2, [r3, #0]
 8007c06:	4ba7      	ldr	r3, [pc, #668]	; (8007ea4 <UART_SetConfig+0x2c8>)
 8007c08:	4013      	ands	r3, r2
 8007c0a:	687a      	ldr	r2, [r7, #4]
 8007c0c:	6812      	ldr	r2, [r2, #0]
 8007c0e:	6979      	ldr	r1, [r7, #20]
 8007c10:	430b      	orrs	r3, r1
 8007c12:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	685b      	ldr	r3, [r3, #4]
 8007c1a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	68da      	ldr	r2, [r3, #12]
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	430a      	orrs	r2, r1
 8007c28:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	699b      	ldr	r3, [r3, #24]
 8007c2e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	6a1b      	ldr	r3, [r3, #32]
 8007c34:	697a      	ldr	r2, [r7, #20]
 8007c36:	4313      	orrs	r3, r2
 8007c38:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	689b      	ldr	r3, [r3, #8]
 8007c40:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	697a      	ldr	r2, [r7, #20]
 8007c4a:	430a      	orrs	r2, r1
 8007c4c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	4a95      	ldr	r2, [pc, #596]	; (8007ea8 <UART_SetConfig+0x2cc>)
 8007c54:	4293      	cmp	r3, r2
 8007c56:	d120      	bne.n	8007c9a <UART_SetConfig+0xbe>
 8007c58:	4b94      	ldr	r3, [pc, #592]	; (8007eac <UART_SetConfig+0x2d0>)
 8007c5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c5e:	f003 0303 	and.w	r3, r3, #3
 8007c62:	2b03      	cmp	r3, #3
 8007c64:	d816      	bhi.n	8007c94 <UART_SetConfig+0xb8>
 8007c66:	a201      	add	r2, pc, #4	; (adr r2, 8007c6c <UART_SetConfig+0x90>)
 8007c68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c6c:	08007c7d 	.word	0x08007c7d
 8007c70:	08007c89 	.word	0x08007c89
 8007c74:	08007c83 	.word	0x08007c83
 8007c78:	08007c8f 	.word	0x08007c8f
 8007c7c:	2301      	movs	r3, #1
 8007c7e:	77fb      	strb	r3, [r7, #31]
 8007c80:	e14f      	b.n	8007f22 <UART_SetConfig+0x346>
 8007c82:	2302      	movs	r3, #2
 8007c84:	77fb      	strb	r3, [r7, #31]
 8007c86:	e14c      	b.n	8007f22 <UART_SetConfig+0x346>
 8007c88:	2304      	movs	r3, #4
 8007c8a:	77fb      	strb	r3, [r7, #31]
 8007c8c:	e149      	b.n	8007f22 <UART_SetConfig+0x346>
 8007c8e:	2308      	movs	r3, #8
 8007c90:	77fb      	strb	r3, [r7, #31]
 8007c92:	e146      	b.n	8007f22 <UART_SetConfig+0x346>
 8007c94:	2310      	movs	r3, #16
 8007c96:	77fb      	strb	r3, [r7, #31]
 8007c98:	e143      	b.n	8007f22 <UART_SetConfig+0x346>
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	4a84      	ldr	r2, [pc, #528]	; (8007eb0 <UART_SetConfig+0x2d4>)
 8007ca0:	4293      	cmp	r3, r2
 8007ca2:	d132      	bne.n	8007d0a <UART_SetConfig+0x12e>
 8007ca4:	4b81      	ldr	r3, [pc, #516]	; (8007eac <UART_SetConfig+0x2d0>)
 8007ca6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007caa:	f003 030c 	and.w	r3, r3, #12
 8007cae:	2b0c      	cmp	r3, #12
 8007cb0:	d828      	bhi.n	8007d04 <UART_SetConfig+0x128>
 8007cb2:	a201      	add	r2, pc, #4	; (adr r2, 8007cb8 <UART_SetConfig+0xdc>)
 8007cb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cb8:	08007ced 	.word	0x08007ced
 8007cbc:	08007d05 	.word	0x08007d05
 8007cc0:	08007d05 	.word	0x08007d05
 8007cc4:	08007d05 	.word	0x08007d05
 8007cc8:	08007cf9 	.word	0x08007cf9
 8007ccc:	08007d05 	.word	0x08007d05
 8007cd0:	08007d05 	.word	0x08007d05
 8007cd4:	08007d05 	.word	0x08007d05
 8007cd8:	08007cf3 	.word	0x08007cf3
 8007cdc:	08007d05 	.word	0x08007d05
 8007ce0:	08007d05 	.word	0x08007d05
 8007ce4:	08007d05 	.word	0x08007d05
 8007ce8:	08007cff 	.word	0x08007cff
 8007cec:	2300      	movs	r3, #0
 8007cee:	77fb      	strb	r3, [r7, #31]
 8007cf0:	e117      	b.n	8007f22 <UART_SetConfig+0x346>
 8007cf2:	2302      	movs	r3, #2
 8007cf4:	77fb      	strb	r3, [r7, #31]
 8007cf6:	e114      	b.n	8007f22 <UART_SetConfig+0x346>
 8007cf8:	2304      	movs	r3, #4
 8007cfa:	77fb      	strb	r3, [r7, #31]
 8007cfc:	e111      	b.n	8007f22 <UART_SetConfig+0x346>
 8007cfe:	2308      	movs	r3, #8
 8007d00:	77fb      	strb	r3, [r7, #31]
 8007d02:	e10e      	b.n	8007f22 <UART_SetConfig+0x346>
 8007d04:	2310      	movs	r3, #16
 8007d06:	77fb      	strb	r3, [r7, #31]
 8007d08:	e10b      	b.n	8007f22 <UART_SetConfig+0x346>
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	4a69      	ldr	r2, [pc, #420]	; (8007eb4 <UART_SetConfig+0x2d8>)
 8007d10:	4293      	cmp	r3, r2
 8007d12:	d120      	bne.n	8007d56 <UART_SetConfig+0x17a>
 8007d14:	4b65      	ldr	r3, [pc, #404]	; (8007eac <UART_SetConfig+0x2d0>)
 8007d16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d1a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007d1e:	2b30      	cmp	r3, #48	; 0x30
 8007d20:	d013      	beq.n	8007d4a <UART_SetConfig+0x16e>
 8007d22:	2b30      	cmp	r3, #48	; 0x30
 8007d24:	d814      	bhi.n	8007d50 <UART_SetConfig+0x174>
 8007d26:	2b20      	cmp	r3, #32
 8007d28:	d009      	beq.n	8007d3e <UART_SetConfig+0x162>
 8007d2a:	2b20      	cmp	r3, #32
 8007d2c:	d810      	bhi.n	8007d50 <UART_SetConfig+0x174>
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d002      	beq.n	8007d38 <UART_SetConfig+0x15c>
 8007d32:	2b10      	cmp	r3, #16
 8007d34:	d006      	beq.n	8007d44 <UART_SetConfig+0x168>
 8007d36:	e00b      	b.n	8007d50 <UART_SetConfig+0x174>
 8007d38:	2300      	movs	r3, #0
 8007d3a:	77fb      	strb	r3, [r7, #31]
 8007d3c:	e0f1      	b.n	8007f22 <UART_SetConfig+0x346>
 8007d3e:	2302      	movs	r3, #2
 8007d40:	77fb      	strb	r3, [r7, #31]
 8007d42:	e0ee      	b.n	8007f22 <UART_SetConfig+0x346>
 8007d44:	2304      	movs	r3, #4
 8007d46:	77fb      	strb	r3, [r7, #31]
 8007d48:	e0eb      	b.n	8007f22 <UART_SetConfig+0x346>
 8007d4a:	2308      	movs	r3, #8
 8007d4c:	77fb      	strb	r3, [r7, #31]
 8007d4e:	e0e8      	b.n	8007f22 <UART_SetConfig+0x346>
 8007d50:	2310      	movs	r3, #16
 8007d52:	77fb      	strb	r3, [r7, #31]
 8007d54:	e0e5      	b.n	8007f22 <UART_SetConfig+0x346>
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	4a57      	ldr	r2, [pc, #348]	; (8007eb8 <UART_SetConfig+0x2dc>)
 8007d5c:	4293      	cmp	r3, r2
 8007d5e:	d120      	bne.n	8007da2 <UART_SetConfig+0x1c6>
 8007d60:	4b52      	ldr	r3, [pc, #328]	; (8007eac <UART_SetConfig+0x2d0>)
 8007d62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d66:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007d6a:	2bc0      	cmp	r3, #192	; 0xc0
 8007d6c:	d013      	beq.n	8007d96 <UART_SetConfig+0x1ba>
 8007d6e:	2bc0      	cmp	r3, #192	; 0xc0
 8007d70:	d814      	bhi.n	8007d9c <UART_SetConfig+0x1c0>
 8007d72:	2b80      	cmp	r3, #128	; 0x80
 8007d74:	d009      	beq.n	8007d8a <UART_SetConfig+0x1ae>
 8007d76:	2b80      	cmp	r3, #128	; 0x80
 8007d78:	d810      	bhi.n	8007d9c <UART_SetConfig+0x1c0>
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d002      	beq.n	8007d84 <UART_SetConfig+0x1a8>
 8007d7e:	2b40      	cmp	r3, #64	; 0x40
 8007d80:	d006      	beq.n	8007d90 <UART_SetConfig+0x1b4>
 8007d82:	e00b      	b.n	8007d9c <UART_SetConfig+0x1c0>
 8007d84:	2300      	movs	r3, #0
 8007d86:	77fb      	strb	r3, [r7, #31]
 8007d88:	e0cb      	b.n	8007f22 <UART_SetConfig+0x346>
 8007d8a:	2302      	movs	r3, #2
 8007d8c:	77fb      	strb	r3, [r7, #31]
 8007d8e:	e0c8      	b.n	8007f22 <UART_SetConfig+0x346>
 8007d90:	2304      	movs	r3, #4
 8007d92:	77fb      	strb	r3, [r7, #31]
 8007d94:	e0c5      	b.n	8007f22 <UART_SetConfig+0x346>
 8007d96:	2308      	movs	r3, #8
 8007d98:	77fb      	strb	r3, [r7, #31]
 8007d9a:	e0c2      	b.n	8007f22 <UART_SetConfig+0x346>
 8007d9c:	2310      	movs	r3, #16
 8007d9e:	77fb      	strb	r3, [r7, #31]
 8007da0:	e0bf      	b.n	8007f22 <UART_SetConfig+0x346>
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	4a45      	ldr	r2, [pc, #276]	; (8007ebc <UART_SetConfig+0x2e0>)
 8007da8:	4293      	cmp	r3, r2
 8007daa:	d125      	bne.n	8007df8 <UART_SetConfig+0x21c>
 8007dac:	4b3f      	ldr	r3, [pc, #252]	; (8007eac <UART_SetConfig+0x2d0>)
 8007dae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007db2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007db6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007dba:	d017      	beq.n	8007dec <UART_SetConfig+0x210>
 8007dbc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007dc0:	d817      	bhi.n	8007df2 <UART_SetConfig+0x216>
 8007dc2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007dc6:	d00b      	beq.n	8007de0 <UART_SetConfig+0x204>
 8007dc8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007dcc:	d811      	bhi.n	8007df2 <UART_SetConfig+0x216>
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d003      	beq.n	8007dda <UART_SetConfig+0x1fe>
 8007dd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007dd6:	d006      	beq.n	8007de6 <UART_SetConfig+0x20a>
 8007dd8:	e00b      	b.n	8007df2 <UART_SetConfig+0x216>
 8007dda:	2300      	movs	r3, #0
 8007ddc:	77fb      	strb	r3, [r7, #31]
 8007dde:	e0a0      	b.n	8007f22 <UART_SetConfig+0x346>
 8007de0:	2302      	movs	r3, #2
 8007de2:	77fb      	strb	r3, [r7, #31]
 8007de4:	e09d      	b.n	8007f22 <UART_SetConfig+0x346>
 8007de6:	2304      	movs	r3, #4
 8007de8:	77fb      	strb	r3, [r7, #31]
 8007dea:	e09a      	b.n	8007f22 <UART_SetConfig+0x346>
 8007dec:	2308      	movs	r3, #8
 8007dee:	77fb      	strb	r3, [r7, #31]
 8007df0:	e097      	b.n	8007f22 <UART_SetConfig+0x346>
 8007df2:	2310      	movs	r3, #16
 8007df4:	77fb      	strb	r3, [r7, #31]
 8007df6:	e094      	b.n	8007f22 <UART_SetConfig+0x346>
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	4a30      	ldr	r2, [pc, #192]	; (8007ec0 <UART_SetConfig+0x2e4>)
 8007dfe:	4293      	cmp	r3, r2
 8007e00:	d125      	bne.n	8007e4e <UART_SetConfig+0x272>
 8007e02:	4b2a      	ldr	r3, [pc, #168]	; (8007eac <UART_SetConfig+0x2d0>)
 8007e04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e08:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007e0c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007e10:	d017      	beq.n	8007e42 <UART_SetConfig+0x266>
 8007e12:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007e16:	d817      	bhi.n	8007e48 <UART_SetConfig+0x26c>
 8007e18:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007e1c:	d00b      	beq.n	8007e36 <UART_SetConfig+0x25a>
 8007e1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007e22:	d811      	bhi.n	8007e48 <UART_SetConfig+0x26c>
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d003      	beq.n	8007e30 <UART_SetConfig+0x254>
 8007e28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e2c:	d006      	beq.n	8007e3c <UART_SetConfig+0x260>
 8007e2e:	e00b      	b.n	8007e48 <UART_SetConfig+0x26c>
 8007e30:	2301      	movs	r3, #1
 8007e32:	77fb      	strb	r3, [r7, #31]
 8007e34:	e075      	b.n	8007f22 <UART_SetConfig+0x346>
 8007e36:	2302      	movs	r3, #2
 8007e38:	77fb      	strb	r3, [r7, #31]
 8007e3a:	e072      	b.n	8007f22 <UART_SetConfig+0x346>
 8007e3c:	2304      	movs	r3, #4
 8007e3e:	77fb      	strb	r3, [r7, #31]
 8007e40:	e06f      	b.n	8007f22 <UART_SetConfig+0x346>
 8007e42:	2308      	movs	r3, #8
 8007e44:	77fb      	strb	r3, [r7, #31]
 8007e46:	e06c      	b.n	8007f22 <UART_SetConfig+0x346>
 8007e48:	2310      	movs	r3, #16
 8007e4a:	77fb      	strb	r3, [r7, #31]
 8007e4c:	e069      	b.n	8007f22 <UART_SetConfig+0x346>
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	4a1c      	ldr	r2, [pc, #112]	; (8007ec4 <UART_SetConfig+0x2e8>)
 8007e54:	4293      	cmp	r3, r2
 8007e56:	d137      	bne.n	8007ec8 <UART_SetConfig+0x2ec>
 8007e58:	4b14      	ldr	r3, [pc, #80]	; (8007eac <UART_SetConfig+0x2d0>)
 8007e5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e5e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007e62:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007e66:	d017      	beq.n	8007e98 <UART_SetConfig+0x2bc>
 8007e68:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007e6c:	d817      	bhi.n	8007e9e <UART_SetConfig+0x2c2>
 8007e6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e72:	d00b      	beq.n	8007e8c <UART_SetConfig+0x2b0>
 8007e74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e78:	d811      	bhi.n	8007e9e <UART_SetConfig+0x2c2>
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d003      	beq.n	8007e86 <UART_SetConfig+0x2aa>
 8007e7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e82:	d006      	beq.n	8007e92 <UART_SetConfig+0x2b6>
 8007e84:	e00b      	b.n	8007e9e <UART_SetConfig+0x2c2>
 8007e86:	2300      	movs	r3, #0
 8007e88:	77fb      	strb	r3, [r7, #31]
 8007e8a:	e04a      	b.n	8007f22 <UART_SetConfig+0x346>
 8007e8c:	2302      	movs	r3, #2
 8007e8e:	77fb      	strb	r3, [r7, #31]
 8007e90:	e047      	b.n	8007f22 <UART_SetConfig+0x346>
 8007e92:	2304      	movs	r3, #4
 8007e94:	77fb      	strb	r3, [r7, #31]
 8007e96:	e044      	b.n	8007f22 <UART_SetConfig+0x346>
 8007e98:	2308      	movs	r3, #8
 8007e9a:	77fb      	strb	r3, [r7, #31]
 8007e9c:	e041      	b.n	8007f22 <UART_SetConfig+0x346>
 8007e9e:	2310      	movs	r3, #16
 8007ea0:	77fb      	strb	r3, [r7, #31]
 8007ea2:	e03e      	b.n	8007f22 <UART_SetConfig+0x346>
 8007ea4:	efff69f3 	.word	0xefff69f3
 8007ea8:	40011000 	.word	0x40011000
 8007eac:	40023800 	.word	0x40023800
 8007eb0:	40004400 	.word	0x40004400
 8007eb4:	40004800 	.word	0x40004800
 8007eb8:	40004c00 	.word	0x40004c00
 8007ebc:	40005000 	.word	0x40005000
 8007ec0:	40011400 	.word	0x40011400
 8007ec4:	40007800 	.word	0x40007800
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	4a71      	ldr	r2, [pc, #452]	; (8008094 <UART_SetConfig+0x4b8>)
 8007ece:	4293      	cmp	r3, r2
 8007ed0:	d125      	bne.n	8007f1e <UART_SetConfig+0x342>
 8007ed2:	4b71      	ldr	r3, [pc, #452]	; (8008098 <UART_SetConfig+0x4bc>)
 8007ed4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ed8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007edc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007ee0:	d017      	beq.n	8007f12 <UART_SetConfig+0x336>
 8007ee2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007ee6:	d817      	bhi.n	8007f18 <UART_SetConfig+0x33c>
 8007ee8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007eec:	d00b      	beq.n	8007f06 <UART_SetConfig+0x32a>
 8007eee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ef2:	d811      	bhi.n	8007f18 <UART_SetConfig+0x33c>
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d003      	beq.n	8007f00 <UART_SetConfig+0x324>
 8007ef8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007efc:	d006      	beq.n	8007f0c <UART_SetConfig+0x330>
 8007efe:	e00b      	b.n	8007f18 <UART_SetConfig+0x33c>
 8007f00:	2300      	movs	r3, #0
 8007f02:	77fb      	strb	r3, [r7, #31]
 8007f04:	e00d      	b.n	8007f22 <UART_SetConfig+0x346>
 8007f06:	2302      	movs	r3, #2
 8007f08:	77fb      	strb	r3, [r7, #31]
 8007f0a:	e00a      	b.n	8007f22 <UART_SetConfig+0x346>
 8007f0c:	2304      	movs	r3, #4
 8007f0e:	77fb      	strb	r3, [r7, #31]
 8007f10:	e007      	b.n	8007f22 <UART_SetConfig+0x346>
 8007f12:	2308      	movs	r3, #8
 8007f14:	77fb      	strb	r3, [r7, #31]
 8007f16:	e004      	b.n	8007f22 <UART_SetConfig+0x346>
 8007f18:	2310      	movs	r3, #16
 8007f1a:	77fb      	strb	r3, [r7, #31]
 8007f1c:	e001      	b.n	8007f22 <UART_SetConfig+0x346>
 8007f1e:	2310      	movs	r3, #16
 8007f20:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	69db      	ldr	r3, [r3, #28]
 8007f26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007f2a:	d15a      	bne.n	8007fe2 <UART_SetConfig+0x406>
  {
    switch (clocksource)
 8007f2c:	7ffb      	ldrb	r3, [r7, #31]
 8007f2e:	2b08      	cmp	r3, #8
 8007f30:	d827      	bhi.n	8007f82 <UART_SetConfig+0x3a6>
 8007f32:	a201      	add	r2, pc, #4	; (adr r2, 8007f38 <UART_SetConfig+0x35c>)
 8007f34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f38:	08007f5d 	.word	0x08007f5d
 8007f3c:	08007f65 	.word	0x08007f65
 8007f40:	08007f6d 	.word	0x08007f6d
 8007f44:	08007f83 	.word	0x08007f83
 8007f48:	08007f73 	.word	0x08007f73
 8007f4c:	08007f83 	.word	0x08007f83
 8007f50:	08007f83 	.word	0x08007f83
 8007f54:	08007f83 	.word	0x08007f83
 8007f58:	08007f7b 	.word	0x08007f7b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007f5c:	f7ff f8b4 	bl	80070c8 <HAL_RCC_GetPCLK1Freq>
 8007f60:	61b8      	str	r0, [r7, #24]
        break;
 8007f62:	e013      	b.n	8007f8c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007f64:	f7ff f8c4 	bl	80070f0 <HAL_RCC_GetPCLK2Freq>
 8007f68:	61b8      	str	r0, [r7, #24]
        break;
 8007f6a:	e00f      	b.n	8007f8c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007f6c:	4b4b      	ldr	r3, [pc, #300]	; (800809c <UART_SetConfig+0x4c0>)
 8007f6e:	61bb      	str	r3, [r7, #24]
        break;
 8007f70:	e00c      	b.n	8007f8c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007f72:	f7fe ffe7 	bl	8006f44 <HAL_RCC_GetSysClockFreq>
 8007f76:	61b8      	str	r0, [r7, #24]
        break;
 8007f78:	e008      	b.n	8007f8c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007f7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007f7e:	61bb      	str	r3, [r7, #24]
        break;
 8007f80:	e004      	b.n	8007f8c <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8007f82:	2300      	movs	r3, #0
 8007f84:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007f86:	2301      	movs	r3, #1
 8007f88:	77bb      	strb	r3, [r7, #30]
        break;
 8007f8a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007f8c:	69bb      	ldr	r3, [r7, #24]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d074      	beq.n	800807c <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007f92:	69bb      	ldr	r3, [r7, #24]
 8007f94:	005a      	lsls	r2, r3, #1
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	685b      	ldr	r3, [r3, #4]
 8007f9a:	085b      	lsrs	r3, r3, #1
 8007f9c:	441a      	add	r2, r3
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	685b      	ldr	r3, [r3, #4]
 8007fa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fa6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007fa8:	693b      	ldr	r3, [r7, #16]
 8007faa:	2b0f      	cmp	r3, #15
 8007fac:	d916      	bls.n	8007fdc <UART_SetConfig+0x400>
 8007fae:	693b      	ldr	r3, [r7, #16]
 8007fb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007fb4:	d212      	bcs.n	8007fdc <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007fb6:	693b      	ldr	r3, [r7, #16]
 8007fb8:	b29b      	uxth	r3, r3
 8007fba:	f023 030f 	bic.w	r3, r3, #15
 8007fbe:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007fc0:	693b      	ldr	r3, [r7, #16]
 8007fc2:	085b      	lsrs	r3, r3, #1
 8007fc4:	b29b      	uxth	r3, r3
 8007fc6:	f003 0307 	and.w	r3, r3, #7
 8007fca:	b29a      	uxth	r2, r3
 8007fcc:	89fb      	ldrh	r3, [r7, #14]
 8007fce:	4313      	orrs	r3, r2
 8007fd0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	89fa      	ldrh	r2, [r7, #14]
 8007fd8:	60da      	str	r2, [r3, #12]
 8007fda:	e04f      	b.n	800807c <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8007fdc:	2301      	movs	r3, #1
 8007fde:	77bb      	strb	r3, [r7, #30]
 8007fe0:	e04c      	b.n	800807c <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007fe2:	7ffb      	ldrb	r3, [r7, #31]
 8007fe4:	2b08      	cmp	r3, #8
 8007fe6:	d828      	bhi.n	800803a <UART_SetConfig+0x45e>
 8007fe8:	a201      	add	r2, pc, #4	; (adr r2, 8007ff0 <UART_SetConfig+0x414>)
 8007fea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fee:	bf00      	nop
 8007ff0:	08008015 	.word	0x08008015
 8007ff4:	0800801d 	.word	0x0800801d
 8007ff8:	08008025 	.word	0x08008025
 8007ffc:	0800803b 	.word	0x0800803b
 8008000:	0800802b 	.word	0x0800802b
 8008004:	0800803b 	.word	0x0800803b
 8008008:	0800803b 	.word	0x0800803b
 800800c:	0800803b 	.word	0x0800803b
 8008010:	08008033 	.word	0x08008033
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008014:	f7ff f858 	bl	80070c8 <HAL_RCC_GetPCLK1Freq>
 8008018:	61b8      	str	r0, [r7, #24]
        break;
 800801a:	e013      	b.n	8008044 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800801c:	f7ff f868 	bl	80070f0 <HAL_RCC_GetPCLK2Freq>
 8008020:	61b8      	str	r0, [r7, #24]
        break;
 8008022:	e00f      	b.n	8008044 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008024:	4b1d      	ldr	r3, [pc, #116]	; (800809c <UART_SetConfig+0x4c0>)
 8008026:	61bb      	str	r3, [r7, #24]
        break;
 8008028:	e00c      	b.n	8008044 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800802a:	f7fe ff8b 	bl	8006f44 <HAL_RCC_GetSysClockFreq>
 800802e:	61b8      	str	r0, [r7, #24]
        break;
 8008030:	e008      	b.n	8008044 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008032:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008036:	61bb      	str	r3, [r7, #24]
        break;
 8008038:	e004      	b.n	8008044 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 800803a:	2300      	movs	r3, #0
 800803c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800803e:	2301      	movs	r3, #1
 8008040:	77bb      	strb	r3, [r7, #30]
        break;
 8008042:	bf00      	nop
    }

    if (pclk != 0U)
 8008044:	69bb      	ldr	r3, [r7, #24]
 8008046:	2b00      	cmp	r3, #0
 8008048:	d018      	beq.n	800807c <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	685b      	ldr	r3, [r3, #4]
 800804e:	085a      	lsrs	r2, r3, #1
 8008050:	69bb      	ldr	r3, [r7, #24]
 8008052:	441a      	add	r2, r3
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	685b      	ldr	r3, [r3, #4]
 8008058:	fbb2 f3f3 	udiv	r3, r2, r3
 800805c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800805e:	693b      	ldr	r3, [r7, #16]
 8008060:	2b0f      	cmp	r3, #15
 8008062:	d909      	bls.n	8008078 <UART_SetConfig+0x49c>
 8008064:	693b      	ldr	r3, [r7, #16]
 8008066:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800806a:	d205      	bcs.n	8008078 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800806c:	693b      	ldr	r3, [r7, #16]
 800806e:	b29a      	uxth	r2, r3
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	60da      	str	r2, [r3, #12]
 8008076:	e001      	b.n	800807c <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8008078:	2301      	movs	r3, #1
 800807a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	2200      	movs	r2, #0
 8008080:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	2200      	movs	r2, #0
 8008086:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8008088:	7fbb      	ldrb	r3, [r7, #30]
}
 800808a:	4618      	mov	r0, r3
 800808c:	3720      	adds	r7, #32
 800808e:	46bd      	mov	sp, r7
 8008090:	bd80      	pop	{r7, pc}
 8008092:	bf00      	nop
 8008094:	40007c00 	.word	0x40007c00
 8008098:	40023800 	.word	0x40023800
 800809c:	00f42400 	.word	0x00f42400

080080a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80080a0:	b480      	push	{r7}
 80080a2:	b083      	sub	sp, #12
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080ac:	f003 0301 	and.w	r3, r3, #1
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d00a      	beq.n	80080ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	685b      	ldr	r3, [r3, #4]
 80080ba:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	430a      	orrs	r2, r1
 80080c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080ce:	f003 0302 	and.w	r3, r3, #2
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d00a      	beq.n	80080ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	685b      	ldr	r3, [r3, #4]
 80080dc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	430a      	orrs	r2, r1
 80080ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080f0:	f003 0304 	and.w	r3, r3, #4
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d00a      	beq.n	800810e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	685b      	ldr	r3, [r3, #4]
 80080fe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	430a      	orrs	r2, r1
 800810c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008112:	f003 0308 	and.w	r3, r3, #8
 8008116:	2b00      	cmp	r3, #0
 8008118:	d00a      	beq.n	8008130 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	685b      	ldr	r3, [r3, #4]
 8008120:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	430a      	orrs	r2, r1
 800812e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008134:	f003 0310 	and.w	r3, r3, #16
 8008138:	2b00      	cmp	r3, #0
 800813a:	d00a      	beq.n	8008152 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	689b      	ldr	r3, [r3, #8]
 8008142:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	430a      	orrs	r2, r1
 8008150:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008156:	f003 0320 	and.w	r3, r3, #32
 800815a:	2b00      	cmp	r3, #0
 800815c:	d00a      	beq.n	8008174 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	689b      	ldr	r3, [r3, #8]
 8008164:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	430a      	orrs	r2, r1
 8008172:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008178:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800817c:	2b00      	cmp	r3, #0
 800817e:	d01a      	beq.n	80081b6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	685b      	ldr	r3, [r3, #4]
 8008186:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	430a      	orrs	r2, r1
 8008194:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800819a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800819e:	d10a      	bne.n	80081b6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	685b      	ldr	r3, [r3, #4]
 80081a6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	430a      	orrs	r2, r1
 80081b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d00a      	beq.n	80081d8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	685b      	ldr	r3, [r3, #4]
 80081c8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	430a      	orrs	r2, r1
 80081d6:	605a      	str	r2, [r3, #4]
  }
}
 80081d8:	bf00      	nop
 80081da:	370c      	adds	r7, #12
 80081dc:	46bd      	mov	sp, r7
 80081de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e2:	4770      	bx	lr

080081e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b086      	sub	sp, #24
 80081e8:	af02      	add	r7, sp, #8
 80081ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	2200      	movs	r2, #0
 80081f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80081f4:	f7fb f966 	bl	80034c4 <HAL_GetTick>
 80081f8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	f003 0308 	and.w	r3, r3, #8
 8008204:	2b08      	cmp	r3, #8
 8008206:	d10e      	bne.n	8008226 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008208:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800820c:	9300      	str	r3, [sp, #0]
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	2200      	movs	r2, #0
 8008212:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008216:	6878      	ldr	r0, [r7, #4]
 8008218:	f000 f817 	bl	800824a <UART_WaitOnFlagUntilTimeout>
 800821c:	4603      	mov	r3, r0
 800821e:	2b00      	cmp	r3, #0
 8008220:	d001      	beq.n	8008226 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008222:	2303      	movs	r3, #3
 8008224:	e00d      	b.n	8008242 <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	2220      	movs	r2, #32
 800822a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	2220      	movs	r2, #32
 8008230:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	2200      	movs	r2, #0
 8008236:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	2200      	movs	r2, #0
 800823c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8008240:	2300      	movs	r3, #0
}
 8008242:	4618      	mov	r0, r3
 8008244:	3710      	adds	r7, #16
 8008246:	46bd      	mov	sp, r7
 8008248:	bd80      	pop	{r7, pc}

0800824a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800824a:	b580      	push	{r7, lr}
 800824c:	b09c      	sub	sp, #112	; 0x70
 800824e:	af00      	add	r7, sp, #0
 8008250:	60f8      	str	r0, [r7, #12]
 8008252:	60b9      	str	r1, [r7, #8]
 8008254:	603b      	str	r3, [r7, #0]
 8008256:	4613      	mov	r3, r2
 8008258:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800825a:	e0a5      	b.n	80083a8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800825c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800825e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008262:	f000 80a1 	beq.w	80083a8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008266:	f7fb f92d 	bl	80034c4 <HAL_GetTick>
 800826a:	4602      	mov	r2, r0
 800826c:	683b      	ldr	r3, [r7, #0]
 800826e:	1ad3      	subs	r3, r2, r3
 8008270:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008272:	429a      	cmp	r2, r3
 8008274:	d302      	bcc.n	800827c <UART_WaitOnFlagUntilTimeout+0x32>
 8008276:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008278:	2b00      	cmp	r3, #0
 800827a:	d13e      	bne.n	80082fa <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008282:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008284:	e853 3f00 	ldrex	r3, [r3]
 8008288:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800828a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800828c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008290:	667b      	str	r3, [r7, #100]	; 0x64
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	461a      	mov	r2, r3
 8008298:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800829a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800829c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800829e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80082a0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80082a2:	e841 2300 	strex	r3, r2, [r1]
 80082a6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80082a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d1e6      	bne.n	800827c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	3308      	adds	r3, #8
 80082b4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082b8:	e853 3f00 	ldrex	r3, [r3]
 80082bc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80082be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082c0:	f023 0301 	bic.w	r3, r3, #1
 80082c4:	663b      	str	r3, [r7, #96]	; 0x60
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	3308      	adds	r3, #8
 80082cc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80082ce:	64ba      	str	r2, [r7, #72]	; 0x48
 80082d0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082d2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80082d4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80082d6:	e841 2300 	strex	r3, r2, [r1]
 80082da:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80082dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d1e5      	bne.n	80082ae <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	2220      	movs	r2, #32
 80082e6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	2220      	movs	r2, #32
 80082ec:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	2200      	movs	r2, #0
 80082f2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80082f6:	2303      	movs	r3, #3
 80082f8:	e067      	b.n	80083ca <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	f003 0304 	and.w	r3, r3, #4
 8008304:	2b00      	cmp	r3, #0
 8008306:	d04f      	beq.n	80083a8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	69db      	ldr	r3, [r3, #28]
 800830e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008312:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008316:	d147      	bne.n	80083a8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008320:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800832a:	e853 3f00 	ldrex	r3, [r3]
 800832e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008332:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008336:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	461a      	mov	r2, r3
 800833e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008340:	637b      	str	r3, [r7, #52]	; 0x34
 8008342:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008344:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008346:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008348:	e841 2300 	strex	r3, r2, [r1]
 800834c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800834e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008350:	2b00      	cmp	r3, #0
 8008352:	d1e6      	bne.n	8008322 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	3308      	adds	r3, #8
 800835a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800835c:	697b      	ldr	r3, [r7, #20]
 800835e:	e853 3f00 	ldrex	r3, [r3]
 8008362:	613b      	str	r3, [r7, #16]
   return(result);
 8008364:	693b      	ldr	r3, [r7, #16]
 8008366:	f023 0301 	bic.w	r3, r3, #1
 800836a:	66bb      	str	r3, [r7, #104]	; 0x68
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	3308      	adds	r3, #8
 8008372:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008374:	623a      	str	r2, [r7, #32]
 8008376:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008378:	69f9      	ldr	r1, [r7, #28]
 800837a:	6a3a      	ldr	r2, [r7, #32]
 800837c:	e841 2300 	strex	r3, r2, [r1]
 8008380:	61bb      	str	r3, [r7, #24]
   return(result);
 8008382:	69bb      	ldr	r3, [r7, #24]
 8008384:	2b00      	cmp	r3, #0
 8008386:	d1e5      	bne.n	8008354 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	2220      	movs	r2, #32
 800838c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	2220      	movs	r2, #32
 8008392:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	2220      	movs	r2, #32
 8008398:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	2200      	movs	r2, #0
 80083a0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80083a4:	2303      	movs	r3, #3
 80083a6:	e010      	b.n	80083ca <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	69da      	ldr	r2, [r3, #28]
 80083ae:	68bb      	ldr	r3, [r7, #8]
 80083b0:	4013      	ands	r3, r2
 80083b2:	68ba      	ldr	r2, [r7, #8]
 80083b4:	429a      	cmp	r2, r3
 80083b6:	bf0c      	ite	eq
 80083b8:	2301      	moveq	r3, #1
 80083ba:	2300      	movne	r3, #0
 80083bc:	b2db      	uxtb	r3, r3
 80083be:	461a      	mov	r2, r3
 80083c0:	79fb      	ldrb	r3, [r7, #7]
 80083c2:	429a      	cmp	r2, r3
 80083c4:	f43f af4a 	beq.w	800825c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80083c8:	2300      	movs	r3, #0
}
 80083ca:	4618      	mov	r0, r3
 80083cc:	3770      	adds	r7, #112	; 0x70
 80083ce:	46bd      	mov	sp, r7
 80083d0:	bd80      	pop	{r7, pc}
	...

080083d4 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80083d4:	b480      	push	{r7}
 80083d6:	b083      	sub	sp, #12
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
 80083dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 80083de:	683b      	ldr	r3, [r7, #0]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d121      	bne.n	800842a <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681a      	ldr	r2, [r3, #0]
 80083ea:	4b27      	ldr	r3, [pc, #156]	; (8008488 <FMC_SDRAM_Init+0xb4>)
 80083ec:	4013      	ands	r3, r2
 80083ee:	683a      	ldr	r2, [r7, #0]
 80083f0:	6851      	ldr	r1, [r2, #4]
 80083f2:	683a      	ldr	r2, [r7, #0]
 80083f4:	6892      	ldr	r2, [r2, #8]
 80083f6:	4311      	orrs	r1, r2
 80083f8:	683a      	ldr	r2, [r7, #0]
 80083fa:	68d2      	ldr	r2, [r2, #12]
 80083fc:	4311      	orrs	r1, r2
 80083fe:	683a      	ldr	r2, [r7, #0]
 8008400:	6912      	ldr	r2, [r2, #16]
 8008402:	4311      	orrs	r1, r2
 8008404:	683a      	ldr	r2, [r7, #0]
 8008406:	6952      	ldr	r2, [r2, #20]
 8008408:	4311      	orrs	r1, r2
 800840a:	683a      	ldr	r2, [r7, #0]
 800840c:	6992      	ldr	r2, [r2, #24]
 800840e:	4311      	orrs	r1, r2
 8008410:	683a      	ldr	r2, [r7, #0]
 8008412:	69d2      	ldr	r2, [r2, #28]
 8008414:	4311      	orrs	r1, r2
 8008416:	683a      	ldr	r2, [r7, #0]
 8008418:	6a12      	ldr	r2, [r2, #32]
 800841a:	4311      	orrs	r1, r2
 800841c:	683a      	ldr	r2, [r7, #0]
 800841e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008420:	430a      	orrs	r2, r1
 8008422:	431a      	orrs	r2, r3
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	601a      	str	r2, [r3, #0]
 8008428:	e026      	b.n	8008478 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8008432:	683b      	ldr	r3, [r7, #0]
 8008434:	69d9      	ldr	r1, [r3, #28]
 8008436:	683b      	ldr	r3, [r7, #0]
 8008438:	6a1b      	ldr	r3, [r3, #32]
 800843a:	4319      	orrs	r1, r3
 800843c:	683b      	ldr	r3, [r7, #0]
 800843e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008440:	430b      	orrs	r3, r1
 8008442:	431a      	orrs	r2, r3
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	685a      	ldr	r2, [r3, #4]
 800844c:	4b0e      	ldr	r3, [pc, #56]	; (8008488 <FMC_SDRAM_Init+0xb4>)
 800844e:	4013      	ands	r3, r2
 8008450:	683a      	ldr	r2, [r7, #0]
 8008452:	6851      	ldr	r1, [r2, #4]
 8008454:	683a      	ldr	r2, [r7, #0]
 8008456:	6892      	ldr	r2, [r2, #8]
 8008458:	4311      	orrs	r1, r2
 800845a:	683a      	ldr	r2, [r7, #0]
 800845c:	68d2      	ldr	r2, [r2, #12]
 800845e:	4311      	orrs	r1, r2
 8008460:	683a      	ldr	r2, [r7, #0]
 8008462:	6912      	ldr	r2, [r2, #16]
 8008464:	4311      	orrs	r1, r2
 8008466:	683a      	ldr	r2, [r7, #0]
 8008468:	6952      	ldr	r2, [r2, #20]
 800846a:	4311      	orrs	r1, r2
 800846c:	683a      	ldr	r2, [r7, #0]
 800846e:	6992      	ldr	r2, [r2, #24]
 8008470:	430a      	orrs	r2, r1
 8008472:	431a      	orrs	r2, r3
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8008478:	2300      	movs	r3, #0
}
 800847a:	4618      	mov	r0, r3
 800847c:	370c      	adds	r7, #12
 800847e:	46bd      	mov	sp, r7
 8008480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008484:	4770      	bx	lr
 8008486:	bf00      	nop
 8008488:	ffff8000 	.word	0xffff8000

0800848c <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800848c:	b480      	push	{r7}
 800848e:	b085      	sub	sp, #20
 8008490:	af00      	add	r7, sp, #0
 8008492:	60f8      	str	r0, [r7, #12]
 8008494:	60b9      	str	r1, [r7, #8]
 8008496:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	2b00      	cmp	r3, #0
 800849c:	d128      	bne.n	80084f0 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	689b      	ldr	r3, [r3, #8]
 80084a2:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80084a6:	68bb      	ldr	r3, [r7, #8]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	1e59      	subs	r1, r3, #1
 80084ac:	68bb      	ldr	r3, [r7, #8]
 80084ae:	685b      	ldr	r3, [r3, #4]
 80084b0:	3b01      	subs	r3, #1
 80084b2:	011b      	lsls	r3, r3, #4
 80084b4:	4319      	orrs	r1, r3
 80084b6:	68bb      	ldr	r3, [r7, #8]
 80084b8:	689b      	ldr	r3, [r3, #8]
 80084ba:	3b01      	subs	r3, #1
 80084bc:	021b      	lsls	r3, r3, #8
 80084be:	4319      	orrs	r1, r3
 80084c0:	68bb      	ldr	r3, [r7, #8]
 80084c2:	68db      	ldr	r3, [r3, #12]
 80084c4:	3b01      	subs	r3, #1
 80084c6:	031b      	lsls	r3, r3, #12
 80084c8:	4319      	orrs	r1, r3
 80084ca:	68bb      	ldr	r3, [r7, #8]
 80084cc:	691b      	ldr	r3, [r3, #16]
 80084ce:	3b01      	subs	r3, #1
 80084d0:	041b      	lsls	r3, r3, #16
 80084d2:	4319      	orrs	r1, r3
 80084d4:	68bb      	ldr	r3, [r7, #8]
 80084d6:	695b      	ldr	r3, [r3, #20]
 80084d8:	3b01      	subs	r3, #1
 80084da:	051b      	lsls	r3, r3, #20
 80084dc:	4319      	orrs	r1, r3
 80084de:	68bb      	ldr	r3, [r7, #8]
 80084e0:	699b      	ldr	r3, [r3, #24]
 80084e2:	3b01      	subs	r3, #1
 80084e4:	061b      	lsls	r3, r3, #24
 80084e6:	430b      	orrs	r3, r1
 80084e8:	431a      	orrs	r2, r3
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	609a      	str	r2, [r3, #8]
 80084ee:	e02d      	b.n	800854c <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	689a      	ldr	r2, [r3, #8]
 80084f4:	4b19      	ldr	r3, [pc, #100]	; (800855c <FMC_SDRAM_Timing_Init+0xd0>)
 80084f6:	4013      	ands	r3, r2
 80084f8:	68ba      	ldr	r2, [r7, #8]
 80084fa:	68d2      	ldr	r2, [r2, #12]
 80084fc:	3a01      	subs	r2, #1
 80084fe:	0311      	lsls	r1, r2, #12
 8008500:	68ba      	ldr	r2, [r7, #8]
 8008502:	6952      	ldr	r2, [r2, #20]
 8008504:	3a01      	subs	r2, #1
 8008506:	0512      	lsls	r2, r2, #20
 8008508:	430a      	orrs	r2, r1
 800850a:	431a      	orrs	r2, r3
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	68db      	ldr	r3, [r3, #12]
 8008514:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8008518:	68bb      	ldr	r3, [r7, #8]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	1e59      	subs	r1, r3, #1
 800851e:	68bb      	ldr	r3, [r7, #8]
 8008520:	685b      	ldr	r3, [r3, #4]
 8008522:	3b01      	subs	r3, #1
 8008524:	011b      	lsls	r3, r3, #4
 8008526:	4319      	orrs	r1, r3
 8008528:	68bb      	ldr	r3, [r7, #8]
 800852a:	689b      	ldr	r3, [r3, #8]
 800852c:	3b01      	subs	r3, #1
 800852e:	021b      	lsls	r3, r3, #8
 8008530:	4319      	orrs	r1, r3
 8008532:	68bb      	ldr	r3, [r7, #8]
 8008534:	691b      	ldr	r3, [r3, #16]
 8008536:	3b01      	subs	r3, #1
 8008538:	041b      	lsls	r3, r3, #16
 800853a:	4319      	orrs	r1, r3
 800853c:	68bb      	ldr	r3, [r7, #8]
 800853e:	699b      	ldr	r3, [r3, #24]
 8008540:	3b01      	subs	r3, #1
 8008542:	061b      	lsls	r3, r3, #24
 8008544:	430b      	orrs	r3, r1
 8008546:	431a      	orrs	r2, r3
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800854c:	2300      	movs	r3, #0
}
 800854e:	4618      	mov	r0, r3
 8008550:	3714      	adds	r7, #20
 8008552:	46bd      	mov	sp, r7
 8008554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008558:	4770      	bx	lr
 800855a:	bf00      	nop
 800855c:	ff0f0fff 	.word	0xff0f0fff

08008560 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8008560:	b480      	push	{r7}
 8008562:	b085      	sub	sp, #20
 8008564:	af00      	add	r7, sp, #0
 8008566:	60f8      	str	r0, [r7, #12]
 8008568:	60b9      	str	r1, [r7, #8]
 800856a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	691a      	ldr	r2, [r3, #16]
 8008570:	4b0c      	ldr	r3, [pc, #48]	; (80085a4 <FMC_SDRAM_SendCommand+0x44>)
 8008572:	4013      	ands	r3, r2
 8008574:	68ba      	ldr	r2, [r7, #8]
 8008576:	6811      	ldr	r1, [r2, #0]
 8008578:	68ba      	ldr	r2, [r7, #8]
 800857a:	6852      	ldr	r2, [r2, #4]
 800857c:	4311      	orrs	r1, r2
 800857e:	68ba      	ldr	r2, [r7, #8]
 8008580:	6892      	ldr	r2, [r2, #8]
 8008582:	3a01      	subs	r2, #1
 8008584:	0152      	lsls	r2, r2, #5
 8008586:	4311      	orrs	r1, r2
 8008588:	68ba      	ldr	r2, [r7, #8]
 800858a:	68d2      	ldr	r2, [r2, #12]
 800858c:	0252      	lsls	r2, r2, #9
 800858e:	430a      	orrs	r2, r1
 8008590:	431a      	orrs	r2, r3
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 8008596:	2300      	movs	r3, #0
}
 8008598:	4618      	mov	r0, r3
 800859a:	3714      	adds	r7, #20
 800859c:	46bd      	mov	sp, r7
 800859e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a2:	4770      	bx	lr
 80085a4:	ffc00000 	.word	0xffc00000

080085a8 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 80085a8:	b480      	push	{r7}
 80085aa:	b083      	sub	sp, #12
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	6078      	str	r0, [r7, #4]
 80085b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	695a      	ldr	r2, [r3, #20]
 80085b6:	4b07      	ldr	r3, [pc, #28]	; (80085d4 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 80085b8:	4013      	ands	r3, r2
 80085ba:	683a      	ldr	r2, [r7, #0]
 80085bc:	0052      	lsls	r2, r2, #1
 80085be:	431a      	orrs	r2, r3
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 80085c4:	2300      	movs	r3, #0
}
 80085c6:	4618      	mov	r0, r3
 80085c8:	370c      	adds	r7, #12
 80085ca:	46bd      	mov	sp, r7
 80085cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d0:	4770      	bx	lr
 80085d2:	bf00      	nop
 80085d4:	ffffc001 	.word	0xffffc001

080085d8 <__errno>:
 80085d8:	4b01      	ldr	r3, [pc, #4]	; (80085e0 <__errno+0x8>)
 80085da:	6818      	ldr	r0, [r3, #0]
 80085dc:	4770      	bx	lr
 80085de:	bf00      	nop
 80085e0:	20000028 	.word	0x20000028

080085e4 <__libc_init_array>:
 80085e4:	b570      	push	{r4, r5, r6, lr}
 80085e6:	4d0d      	ldr	r5, [pc, #52]	; (800861c <__libc_init_array+0x38>)
 80085e8:	4c0d      	ldr	r4, [pc, #52]	; (8008620 <__libc_init_array+0x3c>)
 80085ea:	1b64      	subs	r4, r4, r5
 80085ec:	10a4      	asrs	r4, r4, #2
 80085ee:	2600      	movs	r6, #0
 80085f0:	42a6      	cmp	r6, r4
 80085f2:	d109      	bne.n	8008608 <__libc_init_array+0x24>
 80085f4:	4d0b      	ldr	r5, [pc, #44]	; (8008624 <__libc_init_array+0x40>)
 80085f6:	4c0c      	ldr	r4, [pc, #48]	; (8008628 <__libc_init_array+0x44>)
 80085f8:	f000 fc9c 	bl	8008f34 <_init>
 80085fc:	1b64      	subs	r4, r4, r5
 80085fe:	10a4      	asrs	r4, r4, #2
 8008600:	2600      	movs	r6, #0
 8008602:	42a6      	cmp	r6, r4
 8008604:	d105      	bne.n	8008612 <__libc_init_array+0x2e>
 8008606:	bd70      	pop	{r4, r5, r6, pc}
 8008608:	f855 3b04 	ldr.w	r3, [r5], #4
 800860c:	4798      	blx	r3
 800860e:	3601      	adds	r6, #1
 8008610:	e7ee      	b.n	80085f0 <__libc_init_array+0xc>
 8008612:	f855 3b04 	ldr.w	r3, [r5], #4
 8008616:	4798      	blx	r3
 8008618:	3601      	adds	r6, #1
 800861a:	e7f2      	b.n	8008602 <__libc_init_array+0x1e>
 800861c:	08009418 	.word	0x08009418
 8008620:	08009418 	.word	0x08009418
 8008624:	08009418 	.word	0x08009418
 8008628:	0800941c 	.word	0x0800941c

0800862c <memset>:
 800862c:	4402      	add	r2, r0
 800862e:	4603      	mov	r3, r0
 8008630:	4293      	cmp	r3, r2
 8008632:	d100      	bne.n	8008636 <memset+0xa>
 8008634:	4770      	bx	lr
 8008636:	f803 1b01 	strb.w	r1, [r3], #1
 800863a:	e7f9      	b.n	8008630 <memset+0x4>

0800863c <fmaxf>:
 800863c:	b508      	push	{r3, lr}
 800863e:	ed2d 8b02 	vpush	{d8}
 8008642:	eeb0 8a40 	vmov.f32	s16, s0
 8008646:	eef0 8a60 	vmov.f32	s17, s1
 800864a:	f000 f813 	bl	8008674 <__fpclassifyf>
 800864e:	b148      	cbz	r0, 8008664 <fmaxf+0x28>
 8008650:	eeb0 0a68 	vmov.f32	s0, s17
 8008654:	f000 f80e 	bl	8008674 <__fpclassifyf>
 8008658:	b130      	cbz	r0, 8008668 <fmaxf+0x2c>
 800865a:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800865e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008662:	dc01      	bgt.n	8008668 <fmaxf+0x2c>
 8008664:	eeb0 8a68 	vmov.f32	s16, s17
 8008668:	eeb0 0a48 	vmov.f32	s0, s16
 800866c:	ecbd 8b02 	vpop	{d8}
 8008670:	bd08      	pop	{r3, pc}
	...

08008674 <__fpclassifyf>:
 8008674:	ee10 3a10 	vmov	r3, s0
 8008678:	f033 4000 	bics.w	r0, r3, #2147483648	; 0x80000000
 800867c:	d00d      	beq.n	800869a <__fpclassifyf+0x26>
 800867e:	f5a0 0300 	sub.w	r3, r0, #8388608	; 0x800000
 8008682:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8008686:	d30a      	bcc.n	800869e <__fpclassifyf+0x2a>
 8008688:	4b07      	ldr	r3, [pc, #28]	; (80086a8 <__fpclassifyf+0x34>)
 800868a:	1e42      	subs	r2, r0, #1
 800868c:	429a      	cmp	r2, r3
 800868e:	d908      	bls.n	80086a2 <__fpclassifyf+0x2e>
 8008690:	f1a0 43ff 	sub.w	r3, r0, #2139095040	; 0x7f800000
 8008694:	4258      	negs	r0, r3
 8008696:	4158      	adcs	r0, r3
 8008698:	4770      	bx	lr
 800869a:	2002      	movs	r0, #2
 800869c:	4770      	bx	lr
 800869e:	2004      	movs	r0, #4
 80086a0:	4770      	bx	lr
 80086a2:	2003      	movs	r0, #3
 80086a4:	4770      	bx	lr
 80086a6:	bf00      	nop
 80086a8:	007ffffe 	.word	0x007ffffe

080086ac <powf>:
 80086ac:	b508      	push	{r3, lr}
 80086ae:	ed2d 8b04 	vpush	{d8-d9}
 80086b2:	eeb0 9a40 	vmov.f32	s18, s0
 80086b6:	eef0 8a60 	vmov.f32	s17, s1
 80086ba:	f000 f88f 	bl	80087dc <__ieee754_powf>
 80086be:	4b43      	ldr	r3, [pc, #268]	; (80087cc <powf+0x120>)
 80086c0:	f993 3000 	ldrsb.w	r3, [r3]
 80086c4:	3301      	adds	r3, #1
 80086c6:	eeb0 8a40 	vmov.f32	s16, s0
 80086ca:	d012      	beq.n	80086f2 <powf+0x46>
 80086cc:	eef4 8a68 	vcmp.f32	s17, s17
 80086d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80086d4:	d60d      	bvs.n	80086f2 <powf+0x46>
 80086d6:	eeb4 9a49 	vcmp.f32	s18, s18
 80086da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80086de:	d70d      	bvc.n	80086fc <powf+0x50>
 80086e0:	eef5 8a40 	vcmp.f32	s17, #0.0
 80086e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80086e8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80086ec:	bf08      	it	eq
 80086ee:	eeb0 8a67 	vmoveq.f32	s16, s15
 80086f2:	eeb0 0a48 	vmov.f32	s0, s16
 80086f6:	ecbd 8b04 	vpop	{d8-d9}
 80086fa:	bd08      	pop	{r3, pc}
 80086fc:	eddf 9a34 	vldr	s19, [pc, #208]	; 80087d0 <powf+0x124>
 8008700:	eeb4 9a69 	vcmp.f32	s18, s19
 8008704:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008708:	d116      	bne.n	8008738 <powf+0x8c>
 800870a:	eef4 8a69 	vcmp.f32	s17, s19
 800870e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008712:	d057      	beq.n	80087c4 <powf+0x118>
 8008714:	eeb0 0a68 	vmov.f32	s0, s17
 8008718:	f000 fb2a 	bl	8008d70 <finitef>
 800871c:	2800      	cmp	r0, #0
 800871e:	d0e8      	beq.n	80086f2 <powf+0x46>
 8008720:	eef4 8ae9 	vcmpe.f32	s17, s19
 8008724:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008728:	d5e3      	bpl.n	80086f2 <powf+0x46>
 800872a:	f7ff ff55 	bl	80085d8 <__errno>
 800872e:	2321      	movs	r3, #33	; 0x21
 8008730:	6003      	str	r3, [r0, #0]
 8008732:	ed9f 8a28 	vldr	s16, [pc, #160]	; 80087d4 <powf+0x128>
 8008736:	e7dc      	b.n	80086f2 <powf+0x46>
 8008738:	f000 fb1a 	bl	8008d70 <finitef>
 800873c:	bb50      	cbnz	r0, 8008794 <powf+0xe8>
 800873e:	eeb0 0a49 	vmov.f32	s0, s18
 8008742:	f000 fb15 	bl	8008d70 <finitef>
 8008746:	b328      	cbz	r0, 8008794 <powf+0xe8>
 8008748:	eeb0 0a68 	vmov.f32	s0, s17
 800874c:	f000 fb10 	bl	8008d70 <finitef>
 8008750:	b300      	cbz	r0, 8008794 <powf+0xe8>
 8008752:	eeb4 8a48 	vcmp.f32	s16, s16
 8008756:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800875a:	d706      	bvc.n	800876a <powf+0xbe>
 800875c:	f7ff ff3c 	bl	80085d8 <__errno>
 8008760:	2321      	movs	r3, #33	; 0x21
 8008762:	ee89 8aa9 	vdiv.f32	s16, s19, s19
 8008766:	6003      	str	r3, [r0, #0]
 8008768:	e7c3      	b.n	80086f2 <powf+0x46>
 800876a:	f7ff ff35 	bl	80085d8 <__errno>
 800876e:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
 8008772:	2322      	movs	r3, #34	; 0x22
 8008774:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008778:	6003      	str	r3, [r0, #0]
 800877a:	d508      	bpl.n	800878e <powf+0xe2>
 800877c:	eeb0 0a68 	vmov.f32	s0, s17
 8008780:	f000 fb0a 	bl	8008d98 <rintf>
 8008784:	eeb4 0a68 	vcmp.f32	s0, s17
 8008788:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800878c:	d1d1      	bne.n	8008732 <powf+0x86>
 800878e:	ed9f 8a12 	vldr	s16, [pc, #72]	; 80087d8 <powf+0x12c>
 8008792:	e7ae      	b.n	80086f2 <powf+0x46>
 8008794:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8008798:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800879c:	d1a9      	bne.n	80086f2 <powf+0x46>
 800879e:	eeb0 0a49 	vmov.f32	s0, s18
 80087a2:	f000 fae5 	bl	8008d70 <finitef>
 80087a6:	2800      	cmp	r0, #0
 80087a8:	d0a3      	beq.n	80086f2 <powf+0x46>
 80087aa:	eeb0 0a68 	vmov.f32	s0, s17
 80087ae:	f000 fadf 	bl	8008d70 <finitef>
 80087b2:	2800      	cmp	r0, #0
 80087b4:	d09d      	beq.n	80086f2 <powf+0x46>
 80087b6:	f7ff ff0f 	bl	80085d8 <__errno>
 80087ba:	2322      	movs	r3, #34	; 0x22
 80087bc:	ed9f 8a04 	vldr	s16, [pc, #16]	; 80087d0 <powf+0x124>
 80087c0:	6003      	str	r3, [r0, #0]
 80087c2:	e796      	b.n	80086f2 <powf+0x46>
 80087c4:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 80087c8:	e793      	b.n	80086f2 <powf+0x46>
 80087ca:	bf00      	nop
 80087cc:	2000008c 	.word	0x2000008c
 80087d0:	00000000 	.word	0x00000000
 80087d4:	ff800000 	.word	0xff800000
 80087d8:	7f800000 	.word	0x7f800000

080087dc <__ieee754_powf>:
 80087dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087e0:	ee10 5a90 	vmov	r5, s1
 80087e4:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 80087e8:	ed2d 8b02 	vpush	{d8}
 80087ec:	eeb0 8a40 	vmov.f32	s16, s0
 80087f0:	eef0 8a60 	vmov.f32	s17, s1
 80087f4:	f000 8291 	beq.w	8008d1a <__ieee754_powf+0x53e>
 80087f8:	ee10 8a10 	vmov	r8, s0
 80087fc:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 8008800:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8008804:	dc06      	bgt.n	8008814 <__ieee754_powf+0x38>
 8008806:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 800880a:	dd0a      	ble.n	8008822 <__ieee754_powf+0x46>
 800880c:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8008810:	f000 8283 	beq.w	8008d1a <__ieee754_powf+0x53e>
 8008814:	ecbd 8b02 	vpop	{d8}
 8008818:	48d8      	ldr	r0, [pc, #864]	; (8008b7c <__ieee754_powf+0x3a0>)
 800881a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800881e:	f000 bab5 	b.w	8008d8c <nanf>
 8008822:	f1b8 0f00 	cmp.w	r8, #0
 8008826:	da1f      	bge.n	8008868 <__ieee754_powf+0x8c>
 8008828:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 800882c:	da2e      	bge.n	800888c <__ieee754_powf+0xb0>
 800882e:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8008832:	f2c0 827b 	blt.w	8008d2c <__ieee754_powf+0x550>
 8008836:	15fb      	asrs	r3, r7, #23
 8008838:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800883c:	fa47 f603 	asr.w	r6, r7, r3
 8008840:	fa06 f303 	lsl.w	r3, r6, r3
 8008844:	42bb      	cmp	r3, r7
 8008846:	f040 8271 	bne.w	8008d2c <__ieee754_powf+0x550>
 800884a:	f006 0601 	and.w	r6, r6, #1
 800884e:	f1c6 0602 	rsb	r6, r6, #2
 8008852:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8008856:	d120      	bne.n	800889a <__ieee754_powf+0xbe>
 8008858:	2d00      	cmp	r5, #0
 800885a:	f280 8264 	bge.w	8008d26 <__ieee754_powf+0x54a>
 800885e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8008862:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8008866:	e00d      	b.n	8008884 <__ieee754_powf+0xa8>
 8008868:	2600      	movs	r6, #0
 800886a:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 800886e:	d1f0      	bne.n	8008852 <__ieee754_powf+0x76>
 8008870:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8008874:	f000 8251 	beq.w	8008d1a <__ieee754_powf+0x53e>
 8008878:	dd0a      	ble.n	8008890 <__ieee754_powf+0xb4>
 800887a:	2d00      	cmp	r5, #0
 800887c:	f280 8250 	bge.w	8008d20 <__ieee754_powf+0x544>
 8008880:	ed9f 0abf 	vldr	s0, [pc, #764]	; 8008b80 <__ieee754_powf+0x3a4>
 8008884:	ecbd 8b02 	vpop	{d8}
 8008888:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800888c:	2602      	movs	r6, #2
 800888e:	e7ec      	b.n	800886a <__ieee754_powf+0x8e>
 8008890:	2d00      	cmp	r5, #0
 8008892:	daf5      	bge.n	8008880 <__ieee754_powf+0xa4>
 8008894:	eeb1 0a68 	vneg.f32	s0, s17
 8008898:	e7f4      	b.n	8008884 <__ieee754_powf+0xa8>
 800889a:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 800889e:	d102      	bne.n	80088a6 <__ieee754_powf+0xca>
 80088a0:	ee28 0a08 	vmul.f32	s0, s16, s16
 80088a4:	e7ee      	b.n	8008884 <__ieee754_powf+0xa8>
 80088a6:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 80088aa:	eeb0 0a48 	vmov.f32	s0, s16
 80088ae:	d108      	bne.n	80088c2 <__ieee754_powf+0xe6>
 80088b0:	f1b8 0f00 	cmp.w	r8, #0
 80088b4:	db05      	blt.n	80088c2 <__ieee754_powf+0xe6>
 80088b6:	ecbd 8b02 	vpop	{d8}
 80088ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80088be:	f000 ba4d 	b.w	8008d5c <__ieee754_sqrtf>
 80088c2:	f000 fa4e 	bl	8008d62 <fabsf>
 80088c6:	b124      	cbz	r4, 80088d2 <__ieee754_powf+0xf6>
 80088c8:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 80088cc:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 80088d0:	d117      	bne.n	8008902 <__ieee754_powf+0x126>
 80088d2:	2d00      	cmp	r5, #0
 80088d4:	bfbc      	itt	lt
 80088d6:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 80088da:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 80088de:	f1b8 0f00 	cmp.w	r8, #0
 80088e2:	dacf      	bge.n	8008884 <__ieee754_powf+0xa8>
 80088e4:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 80088e8:	ea54 0306 	orrs.w	r3, r4, r6
 80088ec:	d104      	bne.n	80088f8 <__ieee754_powf+0x11c>
 80088ee:	ee70 7a40 	vsub.f32	s15, s0, s0
 80088f2:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 80088f6:	e7c5      	b.n	8008884 <__ieee754_powf+0xa8>
 80088f8:	2e01      	cmp	r6, #1
 80088fa:	d1c3      	bne.n	8008884 <__ieee754_powf+0xa8>
 80088fc:	eeb1 0a40 	vneg.f32	s0, s0
 8008900:	e7c0      	b.n	8008884 <__ieee754_powf+0xa8>
 8008902:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 8008906:	3801      	subs	r0, #1
 8008908:	ea56 0300 	orrs.w	r3, r6, r0
 800890c:	d104      	bne.n	8008918 <__ieee754_powf+0x13c>
 800890e:	ee38 8a48 	vsub.f32	s16, s16, s16
 8008912:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8008916:	e7b5      	b.n	8008884 <__ieee754_powf+0xa8>
 8008918:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 800891c:	dd6b      	ble.n	80089f6 <__ieee754_powf+0x21a>
 800891e:	4b99      	ldr	r3, [pc, #612]	; (8008b84 <__ieee754_powf+0x3a8>)
 8008920:	429c      	cmp	r4, r3
 8008922:	dc06      	bgt.n	8008932 <__ieee754_powf+0x156>
 8008924:	2d00      	cmp	r5, #0
 8008926:	daab      	bge.n	8008880 <__ieee754_powf+0xa4>
 8008928:	ed9f 0a97 	vldr	s0, [pc, #604]	; 8008b88 <__ieee754_powf+0x3ac>
 800892c:	ee20 0a00 	vmul.f32	s0, s0, s0
 8008930:	e7a8      	b.n	8008884 <__ieee754_powf+0xa8>
 8008932:	4b96      	ldr	r3, [pc, #600]	; (8008b8c <__ieee754_powf+0x3b0>)
 8008934:	429c      	cmp	r4, r3
 8008936:	dd02      	ble.n	800893e <__ieee754_powf+0x162>
 8008938:	2d00      	cmp	r5, #0
 800893a:	dcf5      	bgt.n	8008928 <__ieee754_powf+0x14c>
 800893c:	e7a0      	b.n	8008880 <__ieee754_powf+0xa4>
 800893e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8008942:	ee30 0a67 	vsub.f32	s0, s0, s15
 8008946:	eddf 6a92 	vldr	s13, [pc, #584]	; 8008b90 <__ieee754_powf+0x3b4>
 800894a:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 800894e:	eee0 6a67 	vfms.f32	s13, s0, s15
 8008952:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8008956:	eee6 7ac0 	vfms.f32	s15, s13, s0
 800895a:	ee20 7a00 	vmul.f32	s14, s0, s0
 800895e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008962:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 8008b94 <__ieee754_powf+0x3b8>
 8008966:	ee67 7a67 	vnmul.f32	s15, s14, s15
 800896a:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 8008b98 <__ieee754_powf+0x3bc>
 800896e:	eee0 7a07 	vfma.f32	s15, s0, s14
 8008972:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8008b9c <__ieee754_powf+0x3c0>
 8008976:	eef0 6a67 	vmov.f32	s13, s15
 800897a:	eee0 6a07 	vfma.f32	s13, s0, s14
 800897e:	ee16 3a90 	vmov	r3, s13
 8008982:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8008986:	f023 030f 	bic.w	r3, r3, #15
 800898a:	ee00 3a90 	vmov	s1, r3
 800898e:	eee0 0a47 	vfms.f32	s1, s0, s14
 8008992:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8008996:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 800899a:	f025 050f 	bic.w	r5, r5, #15
 800899e:	ee07 5a10 	vmov	s14, r5
 80089a2:	ee67 0aa8 	vmul.f32	s1, s15, s17
 80089a6:	ee38 7ac7 	vsub.f32	s14, s17, s14
 80089aa:	ee07 3a90 	vmov	s15, r3
 80089ae:	eee7 0a27 	vfma.f32	s1, s14, s15
 80089b2:	3e01      	subs	r6, #1
 80089b4:	ea56 0200 	orrs.w	r2, r6, r0
 80089b8:	ee07 5a10 	vmov	s14, r5
 80089bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80089c0:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 80089c4:	ee30 7aa7 	vadd.f32	s14, s1, s15
 80089c8:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 80089cc:	ee17 4a10 	vmov	r4, s14
 80089d0:	bf08      	it	eq
 80089d2:	eeb0 8a40 	vmoveq.f32	s16, s0
 80089d6:	2c00      	cmp	r4, #0
 80089d8:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80089dc:	f340 8184 	ble.w	8008ce8 <__ieee754_powf+0x50c>
 80089e0:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 80089e4:	f340 80fc 	ble.w	8008be0 <__ieee754_powf+0x404>
 80089e8:	eddf 7a67 	vldr	s15, [pc, #412]	; 8008b88 <__ieee754_powf+0x3ac>
 80089ec:	ee28 0a27 	vmul.f32	s0, s16, s15
 80089f0:	ee20 0a27 	vmul.f32	s0, s0, s15
 80089f4:	e746      	b.n	8008884 <__ieee754_powf+0xa8>
 80089f6:	f018 4fff 	tst.w	r8, #2139095040	; 0x7f800000
 80089fa:	bf01      	itttt	eq
 80089fc:	eddf 7a68 	vldreq	s15, [pc, #416]	; 8008ba0 <__ieee754_powf+0x3c4>
 8008a00:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 8008a04:	f06f 0217 	mvneq.w	r2, #23
 8008a08:	ee17 4a90 	vmoveq	r4, s15
 8008a0c:	ea4f 53e4 	mov.w	r3, r4, asr #23
 8008a10:	bf18      	it	ne
 8008a12:	2200      	movne	r2, #0
 8008a14:	3b7f      	subs	r3, #127	; 0x7f
 8008a16:	4413      	add	r3, r2
 8008a18:	4a62      	ldr	r2, [pc, #392]	; (8008ba4 <__ieee754_powf+0x3c8>)
 8008a1a:	f3c4 0416 	ubfx	r4, r4, #0, #23
 8008a1e:	4294      	cmp	r4, r2
 8008a20:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 8008a24:	dd06      	ble.n	8008a34 <__ieee754_powf+0x258>
 8008a26:	4a60      	ldr	r2, [pc, #384]	; (8008ba8 <__ieee754_powf+0x3cc>)
 8008a28:	4294      	cmp	r4, r2
 8008a2a:	f340 80a4 	ble.w	8008b76 <__ieee754_powf+0x39a>
 8008a2e:	3301      	adds	r3, #1
 8008a30:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8008a34:	2400      	movs	r4, #0
 8008a36:	4a5d      	ldr	r2, [pc, #372]	; (8008bac <__ieee754_powf+0x3d0>)
 8008a38:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8008a3c:	ee07 1a90 	vmov	s15, r1
 8008a40:	ed92 7a00 	vldr	s14, [r2]
 8008a44:	4a5a      	ldr	r2, [pc, #360]	; (8008bb0 <__ieee754_powf+0x3d4>)
 8008a46:	ee37 6a27 	vadd.f32	s12, s14, s15
 8008a4a:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8008a4e:	eec5 6a86 	vdiv.f32	s13, s11, s12
 8008a52:	1049      	asrs	r1, r1, #1
 8008a54:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 8008a58:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 8008a5c:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 8008a60:	ee37 5ac7 	vsub.f32	s10, s15, s14
 8008a64:	ee06 1a10 	vmov	s12, r1
 8008a68:	ee65 4a26 	vmul.f32	s9, s10, s13
 8008a6c:	ee36 7a47 	vsub.f32	s14, s12, s14
 8008a70:	ee14 7a90 	vmov	r7, s9
 8008a74:	4017      	ands	r7, r2
 8008a76:	ee05 7a90 	vmov	s11, r7
 8008a7a:	eea5 5ac6 	vfms.f32	s10, s11, s12
 8008a7e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008a82:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8008bb4 <__ieee754_powf+0x3d8>
 8008a86:	eea5 5ae7 	vfms.f32	s10, s11, s15
 8008a8a:	ee64 7aa4 	vmul.f32	s15, s9, s9
 8008a8e:	ee25 6a26 	vmul.f32	s12, s10, s13
 8008a92:	eddf 6a49 	vldr	s13, [pc, #292]	; 8008bb8 <__ieee754_powf+0x3dc>
 8008a96:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8008a9a:	eddf 6a48 	vldr	s13, [pc, #288]	; 8008bbc <__ieee754_powf+0x3e0>
 8008a9e:	eee7 6a27 	vfma.f32	s13, s14, s15
 8008aa2:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8008b90 <__ieee754_powf+0x3b4>
 8008aa6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008aaa:	eddf 6a45 	vldr	s13, [pc, #276]	; 8008bc0 <__ieee754_powf+0x3e4>
 8008aae:	eee7 6a27 	vfma.f32	s13, s14, s15
 8008ab2:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8008bc4 <__ieee754_powf+0x3e8>
 8008ab6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008aba:	ee74 6aa5 	vadd.f32	s13, s9, s11
 8008abe:	ee27 5aa7 	vmul.f32	s10, s15, s15
 8008ac2:	ee66 6a86 	vmul.f32	s13, s13, s12
 8008ac6:	eee5 6a07 	vfma.f32	s13, s10, s14
 8008aca:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 8008ace:	eef0 7a45 	vmov.f32	s15, s10
 8008ad2:	eee5 7aa5 	vfma.f32	s15, s11, s11
 8008ad6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ada:	ee17 1a90 	vmov	r1, s15
 8008ade:	4011      	ands	r1, r2
 8008ae0:	ee07 1a90 	vmov	s15, r1
 8008ae4:	ee37 7ac5 	vsub.f32	s14, s15, s10
 8008ae8:	eea5 7ae5 	vfms.f32	s14, s11, s11
 8008aec:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8008af0:	ee27 7a24 	vmul.f32	s14, s14, s9
 8008af4:	eea6 7a27 	vfma.f32	s14, s12, s15
 8008af8:	eeb0 6a47 	vmov.f32	s12, s14
 8008afc:	eea5 6aa7 	vfma.f32	s12, s11, s15
 8008b00:	ee16 1a10 	vmov	r1, s12
 8008b04:	4011      	ands	r1, r2
 8008b06:	ee06 1a90 	vmov	s13, r1
 8008b0a:	eee5 6ae7 	vfms.f32	s13, s11, s15
 8008b0e:	eddf 7a2e 	vldr	s15, [pc, #184]	; 8008bc8 <__ieee754_powf+0x3ec>
 8008b12:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8008bcc <__ieee754_powf+0x3f0>
 8008b16:	ee37 7a66 	vsub.f32	s14, s14, s13
 8008b1a:	ee06 1a10 	vmov	s12, r1
 8008b1e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008b22:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8008bd0 <__ieee754_powf+0x3f4>
 8008b26:	492b      	ldr	r1, [pc, #172]	; (8008bd4 <__ieee754_powf+0x3f8>)
 8008b28:	eea6 7a27 	vfma.f32	s14, s12, s15
 8008b2c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008b30:	edd1 7a00 	vldr	s15, [r1]
 8008b34:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008b38:	ee07 3a90 	vmov	s15, r3
 8008b3c:	4b26      	ldr	r3, [pc, #152]	; (8008bd8 <__ieee754_powf+0x3fc>)
 8008b3e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8008b42:	eef0 7a47 	vmov.f32	s15, s14
 8008b46:	eee6 7a25 	vfma.f32	s15, s12, s11
 8008b4a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008b4e:	edd4 0a00 	vldr	s1, [r4]
 8008b52:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8008b56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b5a:	ee17 3a90 	vmov	r3, s15
 8008b5e:	4013      	ands	r3, r2
 8008b60:	ee07 3a90 	vmov	s15, r3
 8008b64:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8008b68:	ee76 6ae0 	vsub.f32	s13, s13, s1
 8008b6c:	eee6 6a65 	vfms.f32	s13, s12, s11
 8008b70:	ee77 7a66 	vsub.f32	s15, s14, s13
 8008b74:	e70f      	b.n	8008996 <__ieee754_powf+0x1ba>
 8008b76:	2401      	movs	r4, #1
 8008b78:	e75d      	b.n	8008a36 <__ieee754_powf+0x25a>
 8008b7a:	bf00      	nop
 8008b7c:	080093ec 	.word	0x080093ec
 8008b80:	00000000 	.word	0x00000000
 8008b84:	3f7ffff7 	.word	0x3f7ffff7
 8008b88:	7149f2ca 	.word	0x7149f2ca
 8008b8c:	3f800007 	.word	0x3f800007
 8008b90:	3eaaaaab 	.word	0x3eaaaaab
 8008b94:	3fb8aa3b 	.word	0x3fb8aa3b
 8008b98:	36eca570 	.word	0x36eca570
 8008b9c:	3fb8aa00 	.word	0x3fb8aa00
 8008ba0:	4b800000 	.word	0x4b800000
 8008ba4:	001cc471 	.word	0x001cc471
 8008ba8:	005db3d6 	.word	0x005db3d6
 8008bac:	080093f0 	.word	0x080093f0
 8008bb0:	fffff000 	.word	0xfffff000
 8008bb4:	3e6c3255 	.word	0x3e6c3255
 8008bb8:	3e53f142 	.word	0x3e53f142
 8008bbc:	3e8ba305 	.word	0x3e8ba305
 8008bc0:	3edb6db7 	.word	0x3edb6db7
 8008bc4:	3f19999a 	.word	0x3f19999a
 8008bc8:	3f76384f 	.word	0x3f76384f
 8008bcc:	3f763800 	.word	0x3f763800
 8008bd0:	369dc3a0 	.word	0x369dc3a0
 8008bd4:	08009400 	.word	0x08009400
 8008bd8:	080093f8 	.word	0x080093f8
 8008bdc:	3338aa3c 	.word	0x3338aa3c
 8008be0:	f040 8092 	bne.w	8008d08 <__ieee754_powf+0x52c>
 8008be4:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 8008bdc <__ieee754_powf+0x400>
 8008be8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008bec:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8008bf0:	eef4 6ac7 	vcmpe.f32	s13, s14
 8008bf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008bf8:	f73f aef6 	bgt.w	80089e8 <__ieee754_powf+0x20c>
 8008bfc:	15db      	asrs	r3, r3, #23
 8008bfe:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 8008c02:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8008c06:	4103      	asrs	r3, r0
 8008c08:	4423      	add	r3, r4
 8008c0a:	4949      	ldr	r1, [pc, #292]	; (8008d30 <__ieee754_powf+0x554>)
 8008c0c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8008c10:	3a7f      	subs	r2, #127	; 0x7f
 8008c12:	4111      	asrs	r1, r2
 8008c14:	ea23 0101 	bic.w	r1, r3, r1
 8008c18:	ee07 1a10 	vmov	s14, r1
 8008c1c:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8008c20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8008c24:	f1c2 0217 	rsb	r2, r2, #23
 8008c28:	4110      	asrs	r0, r2
 8008c2a:	2c00      	cmp	r4, #0
 8008c2c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008c30:	bfb8      	it	lt
 8008c32:	4240      	neglt	r0, r0
 8008c34:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8008c38:	eddf 6a3e 	vldr	s13, [pc, #248]	; 8008d34 <__ieee754_powf+0x558>
 8008c3c:	ee17 3a10 	vmov	r3, s14
 8008c40:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8008c44:	f023 030f 	bic.w	r3, r3, #15
 8008c48:	ee07 3a10 	vmov	s14, r3
 8008c4c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008c50:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8008c54:	eddf 7a38 	vldr	s15, [pc, #224]	; 8008d38 <__ieee754_powf+0x55c>
 8008c58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c5c:	eee0 7aa6 	vfma.f32	s15, s1, s13
 8008c60:	eddf 6a36 	vldr	s13, [pc, #216]	; 8008d3c <__ieee754_powf+0x560>
 8008c64:	eeb0 0a67 	vmov.f32	s0, s15
 8008c68:	eea7 0a26 	vfma.f32	s0, s14, s13
 8008c6c:	eeb0 6a40 	vmov.f32	s12, s0
 8008c70:	eea7 6a66 	vfms.f32	s12, s14, s13
 8008c74:	ee20 7a00 	vmul.f32	s14, s0, s0
 8008c78:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8008c7c:	eddf 6a30 	vldr	s13, [pc, #192]	; 8008d40 <__ieee754_powf+0x564>
 8008c80:	ed9f 6a30 	vldr	s12, [pc, #192]	; 8008d44 <__ieee754_powf+0x568>
 8008c84:	eea7 6a26 	vfma.f32	s12, s14, s13
 8008c88:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8008d48 <__ieee754_powf+0x56c>
 8008c8c:	eee6 6a07 	vfma.f32	s13, s12, s14
 8008c90:	ed9f 6a2e 	vldr	s12, [pc, #184]	; 8008d4c <__ieee754_powf+0x570>
 8008c94:	eea6 6a87 	vfma.f32	s12, s13, s14
 8008c98:	eddf 6a2d 	vldr	s13, [pc, #180]	; 8008d50 <__ieee754_powf+0x574>
 8008c9c:	eee6 6a07 	vfma.f32	s13, s12, s14
 8008ca0:	eeb0 6a40 	vmov.f32	s12, s0
 8008ca4:	eea6 6ac7 	vfms.f32	s12, s13, s14
 8008ca8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8008cac:	eeb0 7a46 	vmov.f32	s14, s12
 8008cb0:	ee77 6a66 	vsub.f32	s13, s14, s13
 8008cb4:	ee20 6a06 	vmul.f32	s12, s0, s12
 8008cb8:	eee0 7a27 	vfma.f32	s15, s0, s15
 8008cbc:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8008cc0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008cc4:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8008cc8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8008ccc:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8008cd0:	ee10 3a10 	vmov	r3, s0
 8008cd4:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8008cd8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008cdc:	da1a      	bge.n	8008d14 <__ieee754_powf+0x538>
 8008cde:	f000 f8b7 	bl	8008e50 <scalbnf>
 8008ce2:	ee20 0a08 	vmul.f32	s0, s0, s16
 8008ce6:	e5cd      	b.n	8008884 <__ieee754_powf+0xa8>
 8008ce8:	4a1a      	ldr	r2, [pc, #104]	; (8008d54 <__ieee754_powf+0x578>)
 8008cea:	4293      	cmp	r3, r2
 8008cec:	dd02      	ble.n	8008cf4 <__ieee754_powf+0x518>
 8008cee:	eddf 7a1a 	vldr	s15, [pc, #104]	; 8008d58 <__ieee754_powf+0x57c>
 8008cf2:	e67b      	b.n	80089ec <__ieee754_powf+0x210>
 8008cf4:	d108      	bne.n	8008d08 <__ieee754_powf+0x52c>
 8008cf6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008cfa:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8008cfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d02:	f6ff af7b 	blt.w	8008bfc <__ieee754_powf+0x420>
 8008d06:	e7f2      	b.n	8008cee <__ieee754_powf+0x512>
 8008d08:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 8008d0c:	f73f af76 	bgt.w	8008bfc <__ieee754_powf+0x420>
 8008d10:	2000      	movs	r0, #0
 8008d12:	e78f      	b.n	8008c34 <__ieee754_powf+0x458>
 8008d14:	ee00 3a10 	vmov	s0, r3
 8008d18:	e7e3      	b.n	8008ce2 <__ieee754_powf+0x506>
 8008d1a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8008d1e:	e5b1      	b.n	8008884 <__ieee754_powf+0xa8>
 8008d20:	eeb0 0a68 	vmov.f32	s0, s17
 8008d24:	e5ae      	b.n	8008884 <__ieee754_powf+0xa8>
 8008d26:	eeb0 0a48 	vmov.f32	s0, s16
 8008d2a:	e5ab      	b.n	8008884 <__ieee754_powf+0xa8>
 8008d2c:	2600      	movs	r6, #0
 8008d2e:	e590      	b.n	8008852 <__ieee754_powf+0x76>
 8008d30:	007fffff 	.word	0x007fffff
 8008d34:	3f317218 	.word	0x3f317218
 8008d38:	35bfbe8c 	.word	0x35bfbe8c
 8008d3c:	3f317200 	.word	0x3f317200
 8008d40:	3331bb4c 	.word	0x3331bb4c
 8008d44:	b5ddea0e 	.word	0xb5ddea0e
 8008d48:	388ab355 	.word	0x388ab355
 8008d4c:	bb360b61 	.word	0xbb360b61
 8008d50:	3e2aaaab 	.word	0x3e2aaaab
 8008d54:	43160000 	.word	0x43160000
 8008d58:	0da24260 	.word	0x0da24260

08008d5c <__ieee754_sqrtf>:
 8008d5c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8008d60:	4770      	bx	lr

08008d62 <fabsf>:
 8008d62:	ee10 3a10 	vmov	r3, s0
 8008d66:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008d6a:	ee00 3a10 	vmov	s0, r3
 8008d6e:	4770      	bx	lr

08008d70 <finitef>:
 8008d70:	b082      	sub	sp, #8
 8008d72:	ed8d 0a01 	vstr	s0, [sp, #4]
 8008d76:	9801      	ldr	r0, [sp, #4]
 8008d78:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8008d7c:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8008d80:	bfac      	ite	ge
 8008d82:	2000      	movge	r0, #0
 8008d84:	2001      	movlt	r0, #1
 8008d86:	b002      	add	sp, #8
 8008d88:	4770      	bx	lr
	...

08008d8c <nanf>:
 8008d8c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8008d94 <nanf+0x8>
 8008d90:	4770      	bx	lr
 8008d92:	bf00      	nop
 8008d94:	7fc00000 	.word	0x7fc00000

08008d98 <rintf>:
 8008d98:	ee10 2a10 	vmov	r2, s0
 8008d9c:	b513      	push	{r0, r1, r4, lr}
 8008d9e:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8008da2:	397f      	subs	r1, #127	; 0x7f
 8008da4:	2916      	cmp	r1, #22
 8008da6:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8008daa:	dc47      	bgt.n	8008e3c <rintf+0xa4>
 8008dac:	b32b      	cbz	r3, 8008dfa <rintf+0x62>
 8008dae:	2900      	cmp	r1, #0
 8008db0:	ee10 3a10 	vmov	r3, s0
 8008db4:	ea4f 70d2 	mov.w	r0, r2, lsr #31
 8008db8:	da21      	bge.n	8008dfe <rintf+0x66>
 8008dba:	f3c2 0316 	ubfx	r3, r2, #0, #23
 8008dbe:	425b      	negs	r3, r3
 8008dc0:	4921      	ldr	r1, [pc, #132]	; (8008e48 <rintf+0xb0>)
 8008dc2:	0a5b      	lsrs	r3, r3, #9
 8008dc4:	0d12      	lsrs	r2, r2, #20
 8008dc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008dca:	0512      	lsls	r2, r2, #20
 8008dcc:	4313      	orrs	r3, r2
 8008dce:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 8008dd2:	ee07 3a90 	vmov	s15, r3
 8008dd6:	edd1 6a00 	vldr	s13, [r1]
 8008dda:	ee36 7aa7 	vadd.f32	s14, s13, s15
 8008dde:	ed8d 7a01 	vstr	s14, [sp, #4]
 8008de2:	eddd 7a01 	vldr	s15, [sp, #4]
 8008de6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008dea:	ee17 3a90 	vmov	r3, s15
 8008dee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008df2:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 8008df6:	ee00 3a10 	vmov	s0, r3
 8008dfa:	b002      	add	sp, #8
 8008dfc:	bd10      	pop	{r4, pc}
 8008dfe:	4a13      	ldr	r2, [pc, #76]	; (8008e4c <rintf+0xb4>)
 8008e00:	410a      	asrs	r2, r1
 8008e02:	4213      	tst	r3, r2
 8008e04:	d0f9      	beq.n	8008dfa <rintf+0x62>
 8008e06:	0854      	lsrs	r4, r2, #1
 8008e08:	ea13 0252 	ands.w	r2, r3, r2, lsr #1
 8008e0c:	d006      	beq.n	8008e1c <rintf+0x84>
 8008e0e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8008e12:	ea23 0304 	bic.w	r3, r3, r4
 8008e16:	fa42 f101 	asr.w	r1, r2, r1
 8008e1a:	430b      	orrs	r3, r1
 8008e1c:	4a0a      	ldr	r2, [pc, #40]	; (8008e48 <rintf+0xb0>)
 8008e1e:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 8008e22:	ed90 7a00 	vldr	s14, [r0]
 8008e26:	ee07 3a90 	vmov	s15, r3
 8008e2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008e2e:	edcd 7a01 	vstr	s15, [sp, #4]
 8008e32:	ed9d 0a01 	vldr	s0, [sp, #4]
 8008e36:	ee30 0a47 	vsub.f32	s0, s0, s14
 8008e3a:	e7de      	b.n	8008dfa <rintf+0x62>
 8008e3c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8008e40:	d3db      	bcc.n	8008dfa <rintf+0x62>
 8008e42:	ee30 0a00 	vadd.f32	s0, s0, s0
 8008e46:	e7d8      	b.n	8008dfa <rintf+0x62>
 8008e48:	08009408 	.word	0x08009408
 8008e4c:	007fffff 	.word	0x007fffff

08008e50 <scalbnf>:
 8008e50:	ee10 3a10 	vmov	r3, s0
 8008e54:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8008e58:	d025      	beq.n	8008ea6 <scalbnf+0x56>
 8008e5a:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8008e5e:	d302      	bcc.n	8008e66 <scalbnf+0x16>
 8008e60:	ee30 0a00 	vadd.f32	s0, s0, s0
 8008e64:	4770      	bx	lr
 8008e66:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8008e6a:	d122      	bne.n	8008eb2 <scalbnf+0x62>
 8008e6c:	4b2a      	ldr	r3, [pc, #168]	; (8008f18 <scalbnf+0xc8>)
 8008e6e:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8008f1c <scalbnf+0xcc>
 8008e72:	4298      	cmp	r0, r3
 8008e74:	ee20 0a27 	vmul.f32	s0, s0, s15
 8008e78:	db16      	blt.n	8008ea8 <scalbnf+0x58>
 8008e7a:	ee10 3a10 	vmov	r3, s0
 8008e7e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8008e82:	3a19      	subs	r2, #25
 8008e84:	4402      	add	r2, r0
 8008e86:	2afe      	cmp	r2, #254	; 0xfe
 8008e88:	dd15      	ble.n	8008eb6 <scalbnf+0x66>
 8008e8a:	ee10 3a10 	vmov	r3, s0
 8008e8e:	eddf 7a24 	vldr	s15, [pc, #144]	; 8008f20 <scalbnf+0xd0>
 8008e92:	eddf 6a24 	vldr	s13, [pc, #144]	; 8008f24 <scalbnf+0xd4>
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	eeb0 7a67 	vmov.f32	s14, s15
 8008e9c:	bfb8      	it	lt
 8008e9e:	eef0 7a66 	vmovlt.f32	s15, s13
 8008ea2:	ee27 0a27 	vmul.f32	s0, s14, s15
 8008ea6:	4770      	bx	lr
 8008ea8:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8008f28 <scalbnf+0xd8>
 8008eac:	ee20 0a27 	vmul.f32	s0, s0, s15
 8008eb0:	4770      	bx	lr
 8008eb2:	0dd2      	lsrs	r2, r2, #23
 8008eb4:	e7e6      	b.n	8008e84 <scalbnf+0x34>
 8008eb6:	2a00      	cmp	r2, #0
 8008eb8:	dd06      	ble.n	8008ec8 <scalbnf+0x78>
 8008eba:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008ebe:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8008ec2:	ee00 3a10 	vmov	s0, r3
 8008ec6:	4770      	bx	lr
 8008ec8:	f112 0f16 	cmn.w	r2, #22
 8008ecc:	da1a      	bge.n	8008f04 <scalbnf+0xb4>
 8008ece:	f24c 3350 	movw	r3, #50000	; 0xc350
 8008ed2:	4298      	cmp	r0, r3
 8008ed4:	ee10 3a10 	vmov	r3, s0
 8008ed8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008edc:	dd0a      	ble.n	8008ef4 <scalbnf+0xa4>
 8008ede:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8008f20 <scalbnf+0xd0>
 8008ee2:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8008f24 <scalbnf+0xd4>
 8008ee6:	eef0 7a40 	vmov.f32	s15, s0
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	bf18      	it	ne
 8008eee:	eeb0 0a47 	vmovne.f32	s0, s14
 8008ef2:	e7db      	b.n	8008eac <scalbnf+0x5c>
 8008ef4:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8008f28 <scalbnf+0xd8>
 8008ef8:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8008f2c <scalbnf+0xdc>
 8008efc:	eef0 7a40 	vmov.f32	s15, s0
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	e7f3      	b.n	8008eec <scalbnf+0x9c>
 8008f04:	3219      	adds	r2, #25
 8008f06:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008f0a:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8008f0e:	eddf 7a08 	vldr	s15, [pc, #32]	; 8008f30 <scalbnf+0xe0>
 8008f12:	ee07 3a10 	vmov	s14, r3
 8008f16:	e7c4      	b.n	8008ea2 <scalbnf+0x52>
 8008f18:	ffff3cb0 	.word	0xffff3cb0
 8008f1c:	4c000000 	.word	0x4c000000
 8008f20:	7149f2ca 	.word	0x7149f2ca
 8008f24:	f149f2ca 	.word	0xf149f2ca
 8008f28:	0da24260 	.word	0x0da24260
 8008f2c:	8da24260 	.word	0x8da24260
 8008f30:	33000000 	.word	0x33000000

08008f34 <_init>:
 8008f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f36:	bf00      	nop
 8008f38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f3a:	bc08      	pop	{r3}
 8008f3c:	469e      	mov	lr, r3
 8008f3e:	4770      	bx	lr

08008f40 <_fini>:
 8008f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f42:	bf00      	nop
 8008f44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f46:	bc08      	pop	{r3}
 8008f48:	469e      	mov	lr, r3
 8008f4a:	4770      	bx	lr
