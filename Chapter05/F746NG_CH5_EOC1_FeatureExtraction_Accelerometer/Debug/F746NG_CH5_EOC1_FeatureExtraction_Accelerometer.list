
F746NG_CH5_EOC1_FeatureExtraction_Accelerometer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a8c  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0001351c  08006c54  08006c54  00016c54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801a170  0801a170  0003000c  2**0
                  CONTENTS
  4 .ARM          00000008  0801a170  0801a170  0002a170  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801a178  0801a178  0003000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801a178  0801a178  0002a178  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801a17c  0801a17c  0002a17c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0801a180  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000914  2000000c  0801a18c  0003000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000920  0801a18c  00030920  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00034737  00000000  00000000  0003003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000378c  00000000  00000000  00064773  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002100  00000000  00000000  00067f00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000028d8  00000000  00000000  0006a000  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ade4  00000000  00000000  0006c8d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002fd0a  00000000  00000000  000976bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001061be  00000000  00000000  000c73c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000cc  00000000  00000000  001cd584  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008cac  00000000  00000000  001cd650  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    0001f01f  00000000  00000000  001d62fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08006c3c 	.word	0x08006c3c

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	08006c3c 	.word	0x08006c3c

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	; 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_d2f>:
 8000580:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000584:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000588:	bf24      	itt	cs
 800058a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800058e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000592:	d90d      	bls.n	80005b0 <__aeabi_d2f+0x30>
 8000594:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000598:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 800059c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80005a0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80005a4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80005a8:	bf08      	it	eq
 80005aa:	f020 0001 	biceq.w	r0, r0, #1
 80005ae:	4770      	bx	lr
 80005b0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80005b4:	d121      	bne.n	80005fa <__aeabi_d2f+0x7a>
 80005b6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80005ba:	bfbc      	itt	lt
 80005bc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80005c0:	4770      	bxlt	lr
 80005c2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80005ca:	f1c2 0218 	rsb	r2, r2, #24
 80005ce:	f1c2 0c20 	rsb	ip, r2, #32
 80005d2:	fa10 f30c 	lsls.w	r3, r0, ip
 80005d6:	fa20 f002 	lsr.w	r0, r0, r2
 80005da:	bf18      	it	ne
 80005dc:	f040 0001 	orrne.w	r0, r0, #1
 80005e0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80005e4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80005e8:	fa03 fc0c 	lsl.w	ip, r3, ip
 80005ec:	ea40 000c 	orr.w	r0, r0, ip
 80005f0:	fa23 f302 	lsr.w	r3, r3, r2
 80005f4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80005f8:	e7cc      	b.n	8000594 <__aeabi_d2f+0x14>
 80005fa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80005fe:	d107      	bne.n	8000610 <__aeabi_d2f+0x90>
 8000600:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000604:	bf1e      	ittt	ne
 8000606:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800060a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800060e:	4770      	bxne	lr
 8000610:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000614:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000618:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800061c:	4770      	bx	lr
 800061e:	bf00      	nop

08000620 <__aeabi_uldivmod>:
 8000620:	b953      	cbnz	r3, 8000638 <__aeabi_uldivmod+0x18>
 8000622:	b94a      	cbnz	r2, 8000638 <__aeabi_uldivmod+0x18>
 8000624:	2900      	cmp	r1, #0
 8000626:	bf08      	it	eq
 8000628:	2800      	cmpeq	r0, #0
 800062a:	bf1c      	itt	ne
 800062c:	f04f 31ff 	movne.w	r1, #4294967295
 8000630:	f04f 30ff 	movne.w	r0, #4294967295
 8000634:	f000 b96e 	b.w	8000914 <__aeabi_idiv0>
 8000638:	f1ad 0c08 	sub.w	ip, sp, #8
 800063c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000640:	f000 f806 	bl	8000650 <__udivmoddi4>
 8000644:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000648:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800064c:	b004      	add	sp, #16
 800064e:	4770      	bx	lr

08000650 <__udivmoddi4>:
 8000650:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000654:	9d08      	ldr	r5, [sp, #32]
 8000656:	4604      	mov	r4, r0
 8000658:	468c      	mov	ip, r1
 800065a:	2b00      	cmp	r3, #0
 800065c:	f040 8083 	bne.w	8000766 <__udivmoddi4+0x116>
 8000660:	428a      	cmp	r2, r1
 8000662:	4617      	mov	r7, r2
 8000664:	d947      	bls.n	80006f6 <__udivmoddi4+0xa6>
 8000666:	fab2 f282 	clz	r2, r2
 800066a:	b142      	cbz	r2, 800067e <__udivmoddi4+0x2e>
 800066c:	f1c2 0020 	rsb	r0, r2, #32
 8000670:	fa24 f000 	lsr.w	r0, r4, r0
 8000674:	4091      	lsls	r1, r2
 8000676:	4097      	lsls	r7, r2
 8000678:	ea40 0c01 	orr.w	ip, r0, r1
 800067c:	4094      	lsls	r4, r2
 800067e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000682:	0c23      	lsrs	r3, r4, #16
 8000684:	fbbc f6f8 	udiv	r6, ip, r8
 8000688:	fa1f fe87 	uxth.w	lr, r7
 800068c:	fb08 c116 	mls	r1, r8, r6, ip
 8000690:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000694:	fb06 f10e 	mul.w	r1, r6, lr
 8000698:	4299      	cmp	r1, r3
 800069a:	d909      	bls.n	80006b0 <__udivmoddi4+0x60>
 800069c:	18fb      	adds	r3, r7, r3
 800069e:	f106 30ff 	add.w	r0, r6, #4294967295
 80006a2:	f080 8119 	bcs.w	80008d8 <__udivmoddi4+0x288>
 80006a6:	4299      	cmp	r1, r3
 80006a8:	f240 8116 	bls.w	80008d8 <__udivmoddi4+0x288>
 80006ac:	3e02      	subs	r6, #2
 80006ae:	443b      	add	r3, r7
 80006b0:	1a5b      	subs	r3, r3, r1
 80006b2:	b2a4      	uxth	r4, r4
 80006b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80006b8:	fb08 3310 	mls	r3, r8, r0, r3
 80006bc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80006c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80006c4:	45a6      	cmp	lr, r4
 80006c6:	d909      	bls.n	80006dc <__udivmoddi4+0x8c>
 80006c8:	193c      	adds	r4, r7, r4
 80006ca:	f100 33ff 	add.w	r3, r0, #4294967295
 80006ce:	f080 8105 	bcs.w	80008dc <__udivmoddi4+0x28c>
 80006d2:	45a6      	cmp	lr, r4
 80006d4:	f240 8102 	bls.w	80008dc <__udivmoddi4+0x28c>
 80006d8:	3802      	subs	r0, #2
 80006da:	443c      	add	r4, r7
 80006dc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80006e0:	eba4 040e 	sub.w	r4, r4, lr
 80006e4:	2600      	movs	r6, #0
 80006e6:	b11d      	cbz	r5, 80006f0 <__udivmoddi4+0xa0>
 80006e8:	40d4      	lsrs	r4, r2
 80006ea:	2300      	movs	r3, #0
 80006ec:	e9c5 4300 	strd	r4, r3, [r5]
 80006f0:	4631      	mov	r1, r6
 80006f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006f6:	b902      	cbnz	r2, 80006fa <__udivmoddi4+0xaa>
 80006f8:	deff      	udf	#255	; 0xff
 80006fa:	fab2 f282 	clz	r2, r2
 80006fe:	2a00      	cmp	r2, #0
 8000700:	d150      	bne.n	80007a4 <__udivmoddi4+0x154>
 8000702:	1bcb      	subs	r3, r1, r7
 8000704:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000708:	fa1f f887 	uxth.w	r8, r7
 800070c:	2601      	movs	r6, #1
 800070e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000712:	0c21      	lsrs	r1, r4, #16
 8000714:	fb0e 331c 	mls	r3, lr, ip, r3
 8000718:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800071c:	fb08 f30c 	mul.w	r3, r8, ip
 8000720:	428b      	cmp	r3, r1
 8000722:	d907      	bls.n	8000734 <__udivmoddi4+0xe4>
 8000724:	1879      	adds	r1, r7, r1
 8000726:	f10c 30ff 	add.w	r0, ip, #4294967295
 800072a:	d202      	bcs.n	8000732 <__udivmoddi4+0xe2>
 800072c:	428b      	cmp	r3, r1
 800072e:	f200 80e9 	bhi.w	8000904 <__udivmoddi4+0x2b4>
 8000732:	4684      	mov	ip, r0
 8000734:	1ac9      	subs	r1, r1, r3
 8000736:	b2a3      	uxth	r3, r4
 8000738:	fbb1 f0fe 	udiv	r0, r1, lr
 800073c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000740:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000744:	fb08 f800 	mul.w	r8, r8, r0
 8000748:	45a0      	cmp	r8, r4
 800074a:	d907      	bls.n	800075c <__udivmoddi4+0x10c>
 800074c:	193c      	adds	r4, r7, r4
 800074e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000752:	d202      	bcs.n	800075a <__udivmoddi4+0x10a>
 8000754:	45a0      	cmp	r8, r4
 8000756:	f200 80d9 	bhi.w	800090c <__udivmoddi4+0x2bc>
 800075a:	4618      	mov	r0, r3
 800075c:	eba4 0408 	sub.w	r4, r4, r8
 8000760:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000764:	e7bf      	b.n	80006e6 <__udivmoddi4+0x96>
 8000766:	428b      	cmp	r3, r1
 8000768:	d909      	bls.n	800077e <__udivmoddi4+0x12e>
 800076a:	2d00      	cmp	r5, #0
 800076c:	f000 80b1 	beq.w	80008d2 <__udivmoddi4+0x282>
 8000770:	2600      	movs	r6, #0
 8000772:	e9c5 0100 	strd	r0, r1, [r5]
 8000776:	4630      	mov	r0, r6
 8000778:	4631      	mov	r1, r6
 800077a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800077e:	fab3 f683 	clz	r6, r3
 8000782:	2e00      	cmp	r6, #0
 8000784:	d14a      	bne.n	800081c <__udivmoddi4+0x1cc>
 8000786:	428b      	cmp	r3, r1
 8000788:	d302      	bcc.n	8000790 <__udivmoddi4+0x140>
 800078a:	4282      	cmp	r2, r0
 800078c:	f200 80b8 	bhi.w	8000900 <__udivmoddi4+0x2b0>
 8000790:	1a84      	subs	r4, r0, r2
 8000792:	eb61 0103 	sbc.w	r1, r1, r3
 8000796:	2001      	movs	r0, #1
 8000798:	468c      	mov	ip, r1
 800079a:	2d00      	cmp	r5, #0
 800079c:	d0a8      	beq.n	80006f0 <__udivmoddi4+0xa0>
 800079e:	e9c5 4c00 	strd	r4, ip, [r5]
 80007a2:	e7a5      	b.n	80006f0 <__udivmoddi4+0xa0>
 80007a4:	f1c2 0320 	rsb	r3, r2, #32
 80007a8:	fa20 f603 	lsr.w	r6, r0, r3
 80007ac:	4097      	lsls	r7, r2
 80007ae:	fa01 f002 	lsl.w	r0, r1, r2
 80007b2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80007b6:	40d9      	lsrs	r1, r3
 80007b8:	4330      	orrs	r0, r6
 80007ba:	0c03      	lsrs	r3, r0, #16
 80007bc:	fbb1 f6fe 	udiv	r6, r1, lr
 80007c0:	fa1f f887 	uxth.w	r8, r7
 80007c4:	fb0e 1116 	mls	r1, lr, r6, r1
 80007c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80007cc:	fb06 f108 	mul.w	r1, r6, r8
 80007d0:	4299      	cmp	r1, r3
 80007d2:	fa04 f402 	lsl.w	r4, r4, r2
 80007d6:	d909      	bls.n	80007ec <__udivmoddi4+0x19c>
 80007d8:	18fb      	adds	r3, r7, r3
 80007da:	f106 3cff 	add.w	ip, r6, #4294967295
 80007de:	f080 808d 	bcs.w	80008fc <__udivmoddi4+0x2ac>
 80007e2:	4299      	cmp	r1, r3
 80007e4:	f240 808a 	bls.w	80008fc <__udivmoddi4+0x2ac>
 80007e8:	3e02      	subs	r6, #2
 80007ea:	443b      	add	r3, r7
 80007ec:	1a5b      	subs	r3, r3, r1
 80007ee:	b281      	uxth	r1, r0
 80007f0:	fbb3 f0fe 	udiv	r0, r3, lr
 80007f4:	fb0e 3310 	mls	r3, lr, r0, r3
 80007f8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80007fc:	fb00 f308 	mul.w	r3, r0, r8
 8000800:	428b      	cmp	r3, r1
 8000802:	d907      	bls.n	8000814 <__udivmoddi4+0x1c4>
 8000804:	1879      	adds	r1, r7, r1
 8000806:	f100 3cff 	add.w	ip, r0, #4294967295
 800080a:	d273      	bcs.n	80008f4 <__udivmoddi4+0x2a4>
 800080c:	428b      	cmp	r3, r1
 800080e:	d971      	bls.n	80008f4 <__udivmoddi4+0x2a4>
 8000810:	3802      	subs	r0, #2
 8000812:	4439      	add	r1, r7
 8000814:	1acb      	subs	r3, r1, r3
 8000816:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800081a:	e778      	b.n	800070e <__udivmoddi4+0xbe>
 800081c:	f1c6 0c20 	rsb	ip, r6, #32
 8000820:	fa03 f406 	lsl.w	r4, r3, r6
 8000824:	fa22 f30c 	lsr.w	r3, r2, ip
 8000828:	431c      	orrs	r4, r3
 800082a:	fa20 f70c 	lsr.w	r7, r0, ip
 800082e:	fa01 f306 	lsl.w	r3, r1, r6
 8000832:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000836:	fa21 f10c 	lsr.w	r1, r1, ip
 800083a:	431f      	orrs	r7, r3
 800083c:	0c3b      	lsrs	r3, r7, #16
 800083e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000842:	fa1f f884 	uxth.w	r8, r4
 8000846:	fb0e 1119 	mls	r1, lr, r9, r1
 800084a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800084e:	fb09 fa08 	mul.w	sl, r9, r8
 8000852:	458a      	cmp	sl, r1
 8000854:	fa02 f206 	lsl.w	r2, r2, r6
 8000858:	fa00 f306 	lsl.w	r3, r0, r6
 800085c:	d908      	bls.n	8000870 <__udivmoddi4+0x220>
 800085e:	1861      	adds	r1, r4, r1
 8000860:	f109 30ff 	add.w	r0, r9, #4294967295
 8000864:	d248      	bcs.n	80008f8 <__udivmoddi4+0x2a8>
 8000866:	458a      	cmp	sl, r1
 8000868:	d946      	bls.n	80008f8 <__udivmoddi4+0x2a8>
 800086a:	f1a9 0902 	sub.w	r9, r9, #2
 800086e:	4421      	add	r1, r4
 8000870:	eba1 010a 	sub.w	r1, r1, sl
 8000874:	b2bf      	uxth	r7, r7
 8000876:	fbb1 f0fe 	udiv	r0, r1, lr
 800087a:	fb0e 1110 	mls	r1, lr, r0, r1
 800087e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000882:	fb00 f808 	mul.w	r8, r0, r8
 8000886:	45b8      	cmp	r8, r7
 8000888:	d907      	bls.n	800089a <__udivmoddi4+0x24a>
 800088a:	19e7      	adds	r7, r4, r7
 800088c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000890:	d22e      	bcs.n	80008f0 <__udivmoddi4+0x2a0>
 8000892:	45b8      	cmp	r8, r7
 8000894:	d92c      	bls.n	80008f0 <__udivmoddi4+0x2a0>
 8000896:	3802      	subs	r0, #2
 8000898:	4427      	add	r7, r4
 800089a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800089e:	eba7 0708 	sub.w	r7, r7, r8
 80008a2:	fba0 8902 	umull	r8, r9, r0, r2
 80008a6:	454f      	cmp	r7, r9
 80008a8:	46c6      	mov	lr, r8
 80008aa:	4649      	mov	r1, r9
 80008ac:	d31a      	bcc.n	80008e4 <__udivmoddi4+0x294>
 80008ae:	d017      	beq.n	80008e0 <__udivmoddi4+0x290>
 80008b0:	b15d      	cbz	r5, 80008ca <__udivmoddi4+0x27a>
 80008b2:	ebb3 020e 	subs.w	r2, r3, lr
 80008b6:	eb67 0701 	sbc.w	r7, r7, r1
 80008ba:	fa07 fc0c 	lsl.w	ip, r7, ip
 80008be:	40f2      	lsrs	r2, r6
 80008c0:	ea4c 0202 	orr.w	r2, ip, r2
 80008c4:	40f7      	lsrs	r7, r6
 80008c6:	e9c5 2700 	strd	r2, r7, [r5]
 80008ca:	2600      	movs	r6, #0
 80008cc:	4631      	mov	r1, r6
 80008ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008d2:	462e      	mov	r6, r5
 80008d4:	4628      	mov	r0, r5
 80008d6:	e70b      	b.n	80006f0 <__udivmoddi4+0xa0>
 80008d8:	4606      	mov	r6, r0
 80008da:	e6e9      	b.n	80006b0 <__udivmoddi4+0x60>
 80008dc:	4618      	mov	r0, r3
 80008de:	e6fd      	b.n	80006dc <__udivmoddi4+0x8c>
 80008e0:	4543      	cmp	r3, r8
 80008e2:	d2e5      	bcs.n	80008b0 <__udivmoddi4+0x260>
 80008e4:	ebb8 0e02 	subs.w	lr, r8, r2
 80008e8:	eb69 0104 	sbc.w	r1, r9, r4
 80008ec:	3801      	subs	r0, #1
 80008ee:	e7df      	b.n	80008b0 <__udivmoddi4+0x260>
 80008f0:	4608      	mov	r0, r1
 80008f2:	e7d2      	b.n	800089a <__udivmoddi4+0x24a>
 80008f4:	4660      	mov	r0, ip
 80008f6:	e78d      	b.n	8000814 <__udivmoddi4+0x1c4>
 80008f8:	4681      	mov	r9, r0
 80008fa:	e7b9      	b.n	8000870 <__udivmoddi4+0x220>
 80008fc:	4666      	mov	r6, ip
 80008fe:	e775      	b.n	80007ec <__udivmoddi4+0x19c>
 8000900:	4630      	mov	r0, r6
 8000902:	e74a      	b.n	800079a <__udivmoddi4+0x14a>
 8000904:	f1ac 0c02 	sub.w	ip, ip, #2
 8000908:	4439      	add	r1, r7
 800090a:	e713      	b.n	8000734 <__udivmoddi4+0xe4>
 800090c:	3802      	subs	r0, #2
 800090e:	443c      	add	r4, r7
 8000910:	e724      	b.n	800075c <__udivmoddi4+0x10c>
 8000912:	bf00      	nop

08000914 <__aeabi_idiv0>:
 8000914:	4770      	bx	lr
 8000916:	bf00      	nop

08000918 <bno055_init>:
 *  make sure your changes will not
 *  affect the reference value of the parameter
 *  (Better case don't change the reference value of the parameter)
 */
BNO055_RETURN_FUNCTION_TYPE bno055_init(struct bno055_t *bno055)
{
 8000918:	b590      	push	{r4, r7, lr}
 800091a:	b085      	sub	sp, #20
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8000920:	23ff      	movs	r3, #255	; 0xff
 8000922:	73fb      	strb	r3, [r7, #15]
    u8 data_u8 = BNO055_INIT_VALUE;
 8000924:	2300      	movs	r3, #0
 8000926:	73bb      	strb	r3, [r7, #14]
    u8 bno055_page_zero_u8 = BNO055_PAGE_ZERO;
 8000928:	2300      	movs	r3, #0
 800092a:	737b      	strb	r3, [r7, #13]

    /* Array holding the Software revision id
     */
    u8 a_SW_ID_u8[BNO055_REV_ID_SIZE] = { BNO055_INIT_VALUE, BNO055_INIT_VALUE };
 800092c:	2300      	movs	r3, #0
 800092e:	813b      	strh	r3, [r7, #8]

    /* stuct parameters are assign to bno055*/
    p_bno055 = bno055;
 8000930:	4a58      	ldr	r2, [pc, #352]	; (8000a94 <bno055_init+0x17c>)
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	6013      	str	r3, [r2, #0]

    /* Write the default page as zero*/
    com_rslt = p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 8000936:	4b57      	ldr	r3, [pc, #348]	; (8000a94 <bno055_init+0x17c>)
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	68dc      	ldr	r4, [r3, #12]
 800093c:	4b55      	ldr	r3, [pc, #340]	; (8000a94 <bno055_init+0x17c>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	7a58      	ldrb	r0, [r3, #9]
 8000942:	f107 020d 	add.w	r2, r7, #13
 8000946:	2301      	movs	r3, #1
 8000948:	2107      	movs	r1, #7
 800094a:	47a0      	blx	r4
 800094c:	4603      	mov	r3, r0
 800094e:	73fb      	strb	r3, [r7, #15]
                                               &bno055_page_zero_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);

    /* Read the chip id of the sensor from page
     * zero 0x00 register*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000950:	4b50      	ldr	r3, [pc, #320]	; (8000a94 <bno055_init+0x17c>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	691c      	ldr	r4, [r3, #16]
 8000956:	4b4f      	ldr	r3, [pc, #316]	; (8000a94 <bno055_init+0x17c>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	7a58      	ldrb	r0, [r3, #9]
 800095c:	f107 020e 	add.w	r2, r7, #14
 8000960:	2301      	movs	r3, #1
 8000962:	2100      	movs	r1, #0
 8000964:	47a0      	blx	r4
 8000966:	4603      	mov	r3, r0
 8000968:	b2da      	uxtb	r2, r3
 800096a:	7bfb      	ldrb	r3, [r7, #15]
 800096c:	4413      	add	r3, r2
 800096e:	b2db      	uxtb	r3, r3
 8000970:	73fb      	strb	r3, [r7, #15]
                                               BNO055_CHIP_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->chip_id = data_u8;
 8000972:	4b48      	ldr	r3, [pc, #288]	; (8000a94 <bno055_init+0x17c>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	7bba      	ldrb	r2, [r7, #14]
 8000978:	701a      	strb	r2, [r3, #0]

    /* Read the accel revision id from page
     * zero 0x01 register*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 800097a:	4b46      	ldr	r3, [pc, #280]	; (8000a94 <bno055_init+0x17c>)
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	691c      	ldr	r4, [r3, #16]
 8000980:	4b44      	ldr	r3, [pc, #272]	; (8000a94 <bno055_init+0x17c>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	7a58      	ldrb	r0, [r3, #9]
 8000986:	f107 020e 	add.w	r2, r7, #14
 800098a:	2301      	movs	r3, #1
 800098c:	2101      	movs	r1, #1
 800098e:	47a0      	blx	r4
 8000990:	4603      	mov	r3, r0
 8000992:	b2da      	uxtb	r2, r3
 8000994:	7bfb      	ldrb	r3, [r7, #15]
 8000996:	4413      	add	r3, r2
 8000998:	b2db      	uxtb	r3, r3
 800099a:	73fb      	strb	r3, [r7, #15]
                                               BNO055_ACCEL_REV_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->accel_rev_id = data_u8;
 800099c:	4b3d      	ldr	r3, [pc, #244]	; (8000a94 <bno055_init+0x17c>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	7bba      	ldrb	r2, [r7, #14]
 80009a2:	715a      	strb	r2, [r3, #5]

    /* Read the mag revision id from page
     * zero 0x02 register*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 80009a4:	4b3b      	ldr	r3, [pc, #236]	; (8000a94 <bno055_init+0x17c>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	691c      	ldr	r4, [r3, #16]
 80009aa:	4b3a      	ldr	r3, [pc, #232]	; (8000a94 <bno055_init+0x17c>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	7a58      	ldrb	r0, [r3, #9]
 80009b0:	f107 020e 	add.w	r2, r7, #14
 80009b4:	2301      	movs	r3, #1
 80009b6:	2102      	movs	r1, #2
 80009b8:	47a0      	blx	r4
 80009ba:	4603      	mov	r3, r0
 80009bc:	b2da      	uxtb	r2, r3
 80009be:	7bfb      	ldrb	r3, [r7, #15]
 80009c0:	4413      	add	r3, r2
 80009c2:	b2db      	uxtb	r3, r3
 80009c4:	73fb      	strb	r3, [r7, #15]
                                               BNO055_MAG_REV_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->mag_rev_id = data_u8;
 80009c6:	4b33      	ldr	r3, [pc, #204]	; (8000a94 <bno055_init+0x17c>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	7bba      	ldrb	r2, [r7, #14]
 80009cc:	719a      	strb	r2, [r3, #6]

    /* Read the gyro revision id from page
     * zero 0x02 register*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 80009ce:	4b31      	ldr	r3, [pc, #196]	; (8000a94 <bno055_init+0x17c>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	691c      	ldr	r4, [r3, #16]
 80009d4:	4b2f      	ldr	r3, [pc, #188]	; (8000a94 <bno055_init+0x17c>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	7a58      	ldrb	r0, [r3, #9]
 80009da:	f107 020e 	add.w	r2, r7, #14
 80009de:	2301      	movs	r3, #1
 80009e0:	2103      	movs	r1, #3
 80009e2:	47a0      	blx	r4
 80009e4:	4603      	mov	r3, r0
 80009e6:	b2da      	uxtb	r2, r3
 80009e8:	7bfb      	ldrb	r3, [r7, #15]
 80009ea:	4413      	add	r3, r2
 80009ec:	b2db      	uxtb	r3, r3
 80009ee:	73fb      	strb	r3, [r7, #15]
                                               BNO055_GYRO_REV_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->gyro_rev_id = data_u8;
 80009f0:	4b28      	ldr	r3, [pc, #160]	; (8000a94 <bno055_init+0x17c>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	7bba      	ldrb	r2, [r7, #14]
 80009f6:	71da      	strb	r2, [r3, #7]

    /* Read the boot loader revision from page
     * zero 0x06 register*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 80009f8:	4b26      	ldr	r3, [pc, #152]	; (8000a94 <bno055_init+0x17c>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	691c      	ldr	r4, [r3, #16]
 80009fe:	4b25      	ldr	r3, [pc, #148]	; (8000a94 <bno055_init+0x17c>)
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	7a58      	ldrb	r0, [r3, #9]
 8000a04:	f107 020e 	add.w	r2, r7, #14
 8000a08:	2301      	movs	r3, #1
 8000a0a:	2106      	movs	r1, #6
 8000a0c:	47a0      	blx	r4
 8000a0e:	4603      	mov	r3, r0
 8000a10:	b2da      	uxtb	r2, r3
 8000a12:	7bfb      	ldrb	r3, [r7, #15]
 8000a14:	4413      	add	r3, r2
 8000a16:	b2db      	uxtb	r3, r3
 8000a18:	73fb      	strb	r3, [r7, #15]
                                               BNO055_BL_REV_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->bl_rev_id = data_u8;
 8000a1a:	4b1e      	ldr	r3, [pc, #120]	; (8000a94 <bno055_init+0x17c>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	7bba      	ldrb	r2, [r7, #14]
 8000a20:	721a      	strb	r2, [r3, #8]

    /* Read the software revision id from page
     * zero 0x04 and 0x05 register( 2 bytes of data)*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000a22:	4b1c      	ldr	r3, [pc, #112]	; (8000a94 <bno055_init+0x17c>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	691c      	ldr	r4, [r3, #16]
 8000a28:	4b1a      	ldr	r3, [pc, #104]	; (8000a94 <bno055_init+0x17c>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	7a58      	ldrb	r0, [r3, #9]
 8000a2e:	f107 0208 	add.w	r2, r7, #8
 8000a32:	2302      	movs	r3, #2
 8000a34:	2104      	movs	r1, #4
 8000a36:	47a0      	blx	r4
 8000a38:	4603      	mov	r3, r0
 8000a3a:	b2da      	uxtb	r2, r3
 8000a3c:	7bfb      	ldrb	r3, [r7, #15]
 8000a3e:	4413      	add	r3, r2
 8000a40:	b2db      	uxtb	r3, r3
 8000a42:	73fb      	strb	r3, [r7, #15]
                                               BNO055_SW_REV_ID_LSB_REG,
                                               a_SW_ID_u8,
                                               BNO055_LSB_MSB_READ_LENGTH);
    a_SW_ID_u8[BNO055_SW_ID_LSB] = BNO055_GET_BITSLICE(a_SW_ID_u8[BNO055_SW_ID_LSB], BNO055_SW_REV_ID_LSB);
 8000a44:	7a3b      	ldrb	r3, [r7, #8]
 8000a46:	723b      	strb	r3, [r7, #8]
    p_bno055->sw_rev_id =
        (u16)((((u32)((u8)a_SW_ID_u8[BNO055_SW_ID_MSB])) << BNO055_SHIFT_EIGHT_BITS) | (a_SW_ID_u8[BNO055_SW_ID_LSB]));
 8000a48:	7a7b      	ldrb	r3, [r7, #9]
 8000a4a:	b29b      	uxth	r3, r3
 8000a4c:	021b      	lsls	r3, r3, #8
 8000a4e:	b299      	uxth	r1, r3
 8000a50:	7a3b      	ldrb	r3, [r7, #8]
 8000a52:	b29a      	uxth	r2, r3
    p_bno055->sw_rev_id =
 8000a54:	4b0f      	ldr	r3, [pc, #60]	; (8000a94 <bno055_init+0x17c>)
 8000a56:	681b      	ldr	r3, [r3, #0]
        (u16)((((u32)((u8)a_SW_ID_u8[BNO055_SW_ID_MSB])) << BNO055_SHIFT_EIGHT_BITS) | (a_SW_ID_u8[BNO055_SW_ID_LSB]));
 8000a58:	430a      	orrs	r2, r1
 8000a5a:	b292      	uxth	r2, r2
    p_bno055->sw_rev_id =
 8000a5c:	805a      	strh	r2, [r3, #2]

    /* Read the page id from the register 0x07*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000a5e:	4b0d      	ldr	r3, [pc, #52]	; (8000a94 <bno055_init+0x17c>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	691c      	ldr	r4, [r3, #16]
 8000a64:	4b0b      	ldr	r3, [pc, #44]	; (8000a94 <bno055_init+0x17c>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	7a58      	ldrb	r0, [r3, #9]
 8000a6a:	f107 020e 	add.w	r2, r7, #14
 8000a6e:	2301      	movs	r3, #1
 8000a70:	2107      	movs	r1, #7
 8000a72:	47a0      	blx	r4
 8000a74:	4603      	mov	r3, r0
 8000a76:	b2da      	uxtb	r2, r3
 8000a78:	7bfb      	ldrb	r3, [r7, #15]
 8000a7a:	4413      	add	r3, r2
 8000a7c:	b2db      	uxtb	r3, r3
 8000a7e:	73fb      	strb	r3, [r7, #15]
                                               BNO055_PAGE_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->page_id = data_u8;
 8000a80:	4b04      	ldr	r3, [pc, #16]	; (8000a94 <bno055_init+0x17c>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	7bba      	ldrb	r2, [r7, #14]
 8000a86:	711a      	strb	r2, [r3, #4]

    return com_rslt;
 8000a88:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	3714      	adds	r7, #20
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd90      	pop	{r4, r7, pc}
 8000a94:	20000028 	.word	0x20000028

08000a98 <bno055_write_register>:
 *  @retval 1 -> BNO055_ERROR
 *
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_write_register(u8 addr_u8, u8 *data_u8, u8 len_u8)
{
 8000a98:	b590      	push	{r4, r7, lr}
 8000a9a:	b085      	sub	sp, #20
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	6039      	str	r1, [r7, #0]
 8000aa2:	71fb      	strb	r3, [r7, #7]
 8000aa4:	4613      	mov	r3, r2
 8000aa6:	71bb      	strb	r3, [r7, #6]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8000aa8:	23ff      	movs	r3, #255	; 0xff
 8000aaa:	73fb      	strb	r3, [r7, #15]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 8000aac:	4b0c      	ldr	r3, [pc, #48]	; (8000ae0 <bno055_write_register+0x48>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d102      	bne.n	8000aba <bno055_write_register+0x22>
    {
        return BNO055_E_NULL_PTR;
 8000ab4:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 8000ab8:	e00d      	b.n	8000ad6 <bno055_write_register+0x3e>
    }
    else
    {
        /* Write the values of respective given register */
        com_rslt = p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr, addr_u8, data_u8, len_u8);
 8000aba:	4b09      	ldr	r3, [pc, #36]	; (8000ae0 <bno055_write_register+0x48>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	68dc      	ldr	r4, [r3, #12]
 8000ac0:	4b07      	ldr	r3, [pc, #28]	; (8000ae0 <bno055_write_register+0x48>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	7a58      	ldrb	r0, [r3, #9]
 8000ac6:	79bb      	ldrb	r3, [r7, #6]
 8000ac8:	79f9      	ldrb	r1, [r7, #7]
 8000aca:	683a      	ldr	r2, [r7, #0]
 8000acc:	47a0      	blx	r4
 8000ace:	4603      	mov	r3, r0
 8000ad0:	73fb      	strb	r3, [r7, #15]
    }

    return com_rslt;
 8000ad2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	3714      	adds	r7, #20
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd90      	pop	{r4, r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	20000028 	.word	0x20000028

08000ae4 <bno055_write_page_id>:
 *  @retval 1 -> BNO055_ERROR
 *
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_write_page_id(u8 page_id_u8)
{
 8000ae4:	b590      	push	{r4, r7, lr}
 8000ae6:	b085      	sub	sp, #20
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	4603      	mov	r3, r0
 8000aec:	71fb      	strb	r3, [r7, #7]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8000aee:	23ff      	movs	r3, #255	; 0xff
 8000af0:	73fb      	strb	r3, [r7, #15]
    u8 data_u8r = BNO055_INIT_VALUE;
 8000af2:	2300      	movs	r3, #0
 8000af4:	73bb      	strb	r3, [r7, #14]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 8000af6:	4b1e      	ldr	r3, [pc, #120]	; (8000b70 <bno055_write_page_id+0x8c>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d102      	bne.n	8000b04 <bno055_write_page_id+0x20>
    {
        return BNO055_E_NULL_PTR;
 8000afe:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 8000b02:	e030      	b.n	8000b66 <bno055_write_page_id+0x82>
    }
    else
    {
        /* Read the current page*/
        com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000b04:	4b1a      	ldr	r3, [pc, #104]	; (8000b70 <bno055_write_page_id+0x8c>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	691c      	ldr	r4, [r3, #16]
 8000b0a:	4b19      	ldr	r3, [pc, #100]	; (8000b70 <bno055_write_page_id+0x8c>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	7a58      	ldrb	r0, [r3, #9]
 8000b10:	f107 020e 	add.w	r2, r7, #14
 8000b14:	2301      	movs	r3, #1
 8000b16:	2107      	movs	r1, #7
 8000b18:	47a0      	blx	r4
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	73fb      	strb	r3, [r7, #15]
                                                  BNO055_PAGE_ID_REG,
                                                  &data_u8r,
                                                  BNO055_GEN_READ_WRITE_LENGTH);

        /* Check condition for communication BNO055_SUCCESS*/
        if (com_rslt == BNO055_SUCCESS)
 8000b1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d11b      	bne.n	8000b5e <bno055_write_page_id+0x7a>
        {
            data_u8r = BNO055_SET_BITSLICE(data_u8r, BNO055_PAGE_ID, page_id_u8);
 8000b26:	79fb      	ldrb	r3, [r7, #7]
 8000b28:	73bb      	strb	r3, [r7, #14]

            /* Write the page id*/
            com_rslt += p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 8000b2a:	4b11      	ldr	r3, [pc, #68]	; (8000b70 <bno055_write_page_id+0x8c>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	68dc      	ldr	r4, [r3, #12]
 8000b30:	4b0f      	ldr	r3, [pc, #60]	; (8000b70 <bno055_write_page_id+0x8c>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	7a58      	ldrb	r0, [r3, #9]
 8000b36:	f107 020e 	add.w	r2, r7, #14
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	2107      	movs	r1, #7
 8000b3e:	47a0      	blx	r4
 8000b40:	4603      	mov	r3, r0
 8000b42:	b2da      	uxtb	r2, r3
 8000b44:	7bfb      	ldrb	r3, [r7, #15]
 8000b46:	4413      	add	r3, r2
 8000b48:	b2db      	uxtb	r3, r3
 8000b4a:	73fb      	strb	r3, [r7, #15]
                                                        BNO055_PAGE_ID_REG,
                                                        &data_u8r,
                                                        BNO055_GEN_READ_WRITE_LENGTH);
            if (com_rslt == BNO055_SUCCESS)
 8000b4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d106      	bne.n	8000b62 <bno055_write_page_id+0x7e>
            {
                p_bno055->page_id = page_id_u8;
 8000b54:	4b06      	ldr	r3, [pc, #24]	; (8000b70 <bno055_write_page_id+0x8c>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	79fa      	ldrb	r2, [r7, #7]
 8000b5a:	711a      	strb	r2, [r3, #4]
 8000b5c:	e001      	b.n	8000b62 <bno055_write_page_id+0x7e>
            }
        }
        else
        {
            com_rslt = BNO055_ERROR;
 8000b5e:	23ff      	movs	r3, #255	; 0xff
 8000b60:	73fb      	strb	r3, [r7, #15]
        }
    }

    return com_rslt;
 8000b62:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000b66:	4618      	mov	r0, r3
 8000b68:	3714      	adds	r7, #20
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd90      	pop	{r4, r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	20000028 	.word	0x20000028

08000b74 <bno055_read_accel_xyz>:
 *  @retval 0 -> BNO055_SUCCESS
 *  @retval 1 -> BNO055_ERROR
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_read_accel_xyz(struct bno055_accel_t *accel)
{
 8000b74:	b590      	push	{r4, r7, lr}
 8000b76:	b085      	sub	sp, #20
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8000b7c:	23ff      	movs	r3, #255	; 0xff
 8000b7e:	73fb      	strb	r3, [r7, #15]
     * data_u8[BNO055_SENSOR_DATA_XYZ_Y_LSB] - y->MSB
     * data_u8[BNO055_SENSOR_DATA_XYZ_Y_MSB] - y->MSB
     * data_u8[BNO055_SENSOR_DATA_XYZ_Z_LSB] - z->MSB
     * data_u8[BNO055_SENSOR_DATA_XYZ_Z_MSB] - z->MSB
     */
    u8 data_u8[BNO055_ACCEL_XYZ_DATA_SIZE] = {
 8000b80:	4a31      	ldr	r2, [pc, #196]	; (8000c48 <bno055_read_accel_xyz+0xd4>)
 8000b82:	f107 0308 	add.w	r3, r7, #8
 8000b86:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b8a:	6018      	str	r0, [r3, #0]
 8000b8c:	3304      	adds	r3, #4
 8000b8e:	8019      	strh	r1, [r3, #0]
        BNO055_INIT_VALUE, BNO055_INIT_VALUE, BNO055_INIT_VALUE, BNO055_INIT_VALUE, BNO055_INIT_VALUE, BNO055_INIT_VALUE
    };
    s8 stat_s8 = BNO055_ERROR;
 8000b90:	23ff      	movs	r3, #255	; 0xff
 8000b92:	73bb      	strb	r3, [r7, #14]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 8000b94:	4b2d      	ldr	r3, [pc, #180]	; (8000c4c <bno055_read_accel_xyz+0xd8>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d102      	bne.n	8000ba2 <bno055_read_accel_xyz+0x2e>
    {
        return BNO055_E_NULL_PTR;
 8000b9c:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 8000ba0:	e04e      	b.n	8000c40 <bno055_read_accel_xyz+0xcc>
    }
    else
    {
        /*condition check for page, chip id is
         * available in the page zero*/
        if (p_bno055->page_id != BNO055_PAGE_ZERO)
 8000ba2:	4b2a      	ldr	r3, [pc, #168]	; (8000c4c <bno055_read_accel_xyz+0xd8>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	791b      	ldrb	r3, [r3, #4]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d004      	beq.n	8000bb6 <bno055_read_accel_xyz+0x42>
        {
            /* Write the page zero*/
            stat_s8 = bno055_write_page_id(BNO055_PAGE_ZERO);
 8000bac:	2000      	movs	r0, #0
 8000bae:	f7ff ff99 	bl	8000ae4 <bno055_write_page_id>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	73bb      	strb	r3, [r7, #14]
        }
        if ((stat_s8 == BNO055_SUCCESS) || (p_bno055->page_id == BNO055_PAGE_ZERO))
 8000bb6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d004      	beq.n	8000bc8 <bno055_read_accel_xyz+0x54>
 8000bbe:	4b23      	ldr	r3, [pc, #140]	; (8000c4c <bno055_read_accel_xyz+0xd8>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	791b      	ldrb	r3, [r3, #4]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d137      	bne.n	8000c38 <bno055_read_accel_xyz+0xc4>
        {
            com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000bc8:	4b20      	ldr	r3, [pc, #128]	; (8000c4c <bno055_read_accel_xyz+0xd8>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	691c      	ldr	r4, [r3, #16]
 8000bce:	4b1f      	ldr	r3, [pc, #124]	; (8000c4c <bno055_read_accel_xyz+0xd8>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	7a58      	ldrb	r0, [r3, #9]
 8000bd4:	f107 0208 	add.w	r2, r7, #8
 8000bd8:	2306      	movs	r3, #6
 8000bda:	2108      	movs	r1, #8
 8000bdc:	47a0      	blx	r4
 8000bde:	4603      	mov	r3, r0
 8000be0:	73fb      	strb	r3, [r7, #15]
                                                      BNO055_ACCEL_DATA_X_LSB_VALUEX_REG,
                                                      data_u8,
                                                      BNO055_ACCEL_XYZ_DATA_SIZE);

            /* Data X*/
            data_u8[BNO055_SENSOR_DATA_XYZ_X_LSB] = BNO055_GET_BITSLICE(data_u8[BNO055_SENSOR_DATA_XYZ_X_LSB],
 8000be2:	7a3b      	ldrb	r3, [r7, #8]
 8000be4:	723b      	strb	r3, [r7, #8]
                                                                        BNO055_ACCEL_DATA_X_LSB_VALUEX);
            data_u8[BNO055_SENSOR_DATA_XYZ_X_MSB] = BNO055_GET_BITSLICE(data_u8[BNO055_SENSOR_DATA_XYZ_X_MSB],
 8000be6:	7a7b      	ldrb	r3, [r7, #9]
 8000be8:	727b      	strb	r3, [r7, #9]
                                                                        BNO055_ACCEL_DATA_X_MSB_VALUEX);
            accel->x =
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_XYZ_X_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 8000bea:	7a7b      	ldrb	r3, [r7, #9]
 8000bec:	b25b      	sxtb	r3, r3
 8000bee:	021b      	lsls	r3, r3, #8
 8000bf0:	b21a      	sxth	r2, r3
                      (data_u8[BNO055_SENSOR_DATA_XYZ_X_LSB]));
 8000bf2:	7a3b      	ldrb	r3, [r7, #8]
 8000bf4:	b21b      	sxth	r3, r3
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_XYZ_X_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 8000bf6:	4313      	orrs	r3, r2
 8000bf8:	b21a      	sxth	r2, r3
            accel->x =
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	801a      	strh	r2, [r3, #0]

            /* Data Y*/
            data_u8[BNO055_SENSOR_DATA_XYZ_Y_LSB] = BNO055_GET_BITSLICE(data_u8[BNO055_SENSOR_DATA_XYZ_Y_LSB],
 8000bfe:	7abb      	ldrb	r3, [r7, #10]
 8000c00:	72bb      	strb	r3, [r7, #10]
                                                                        BNO055_ACCEL_DATA_Y_LSB_VALUEY);
            data_u8[BNO055_SENSOR_DATA_XYZ_Y_MSB] = BNO055_GET_BITSLICE(data_u8[BNO055_SENSOR_DATA_XYZ_Y_MSB],
 8000c02:	7afb      	ldrb	r3, [r7, #11]
 8000c04:	72fb      	strb	r3, [r7, #11]
                                                                        BNO055_ACCEL_DATA_Y_MSB_VALUEY);
            accel->y =
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_XYZ_Y_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 8000c06:	7afb      	ldrb	r3, [r7, #11]
 8000c08:	b25b      	sxtb	r3, r3
 8000c0a:	021b      	lsls	r3, r3, #8
 8000c0c:	b21a      	sxth	r2, r3
                      (data_u8[BNO055_SENSOR_DATA_XYZ_Y_LSB]));
 8000c0e:	7abb      	ldrb	r3, [r7, #10]
 8000c10:	b21b      	sxth	r3, r3
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_XYZ_Y_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 8000c12:	4313      	orrs	r3, r2
 8000c14:	b21a      	sxth	r2, r3
            accel->y =
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	805a      	strh	r2, [r3, #2]

            /* Data Z*/
            data_u8[BNO055_SENSOR_DATA_XYZ_Z_LSB] = BNO055_GET_BITSLICE(data_u8[BNO055_SENSOR_DATA_XYZ_Z_LSB],
 8000c1a:	7b3b      	ldrb	r3, [r7, #12]
 8000c1c:	733b      	strb	r3, [r7, #12]
                                                                        BNO055_ACCEL_DATA_Z_LSB_VALUEZ);
            data_u8[BNO055_SENSOR_DATA_XYZ_Z_MSB] = BNO055_GET_BITSLICE(data_u8[BNO055_SENSOR_DATA_XYZ_Z_MSB],
 8000c1e:	7b7b      	ldrb	r3, [r7, #13]
 8000c20:	737b      	strb	r3, [r7, #13]
                                                                        BNO055_ACCEL_DATA_Z_MSB_VALUEZ);
            accel->z =
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_XYZ_Z_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 8000c22:	7b7b      	ldrb	r3, [r7, #13]
 8000c24:	b25b      	sxtb	r3, r3
 8000c26:	021b      	lsls	r3, r3, #8
 8000c28:	b21a      	sxth	r2, r3
                      (data_u8[BNO055_SENSOR_DATA_XYZ_Z_LSB]));
 8000c2a:	7b3b      	ldrb	r3, [r7, #12]
 8000c2c:	b21b      	sxth	r3, r3
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_XYZ_Z_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 8000c2e:	4313      	orrs	r3, r2
 8000c30:	b21a      	sxth	r2, r3
            accel->z =
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	809a      	strh	r2, [r3, #4]
 8000c36:	e001      	b.n	8000c3c <bno055_read_accel_xyz+0xc8>
        }
        else
        {
            com_rslt = BNO055_ERROR;
 8000c38:	23ff      	movs	r3, #255	; 0xff
 8000c3a:	73fb      	strb	r3, [r7, #15]
        }
    }

    return com_rslt;
 8000c3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000c40:	4618      	mov	r0, r3
 8000c42:	3714      	adds	r7, #20
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd90      	pop	{r4, r7, pc}
 8000c48:	08006c54 	.word	0x08006c54
 8000c4c:	20000028 	.word	0x20000028

08000c50 <bno055_convert_float_accel_xyz_mg>:
 *  @retval 1 -> BNO055_ERROR
 *
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_convert_float_accel_xyz_mg(struct bno055_accel_float_t *accel_xyz)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b086      	sub	sp, #24
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8000c58:	23ff      	movs	r3, #255	; 0xff
 8000c5a:	75fb      	strb	r3, [r7, #23]
    struct bno055_accel_t reg_accel_xyz = { BNO055_INIT_VALUE, BNO055_INIT_VALUE, BNO055_INIT_VALUE };
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	823b      	strh	r3, [r7, #16]
 8000c60:	2300      	movs	r3, #0
 8000c62:	827b      	strh	r3, [r7, #18]
 8000c64:	2300      	movs	r3, #0
 8000c66:	82bb      	strh	r3, [r7, #20]
    u8 accel_unit_u8 = BNO055_INIT_VALUE;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	73fb      	strb	r3, [r7, #15]

    /* Read the current accel unit and set the
     * unit as mg if the unit is in m/s2*/
    com_rslt = bno055_get_accel_unit(&accel_unit_u8);
 8000c6c:	f107 030f 	add.w	r3, r7, #15
 8000c70:	4618      	mov	r0, r3
 8000c72:	f000 f857 	bl	8000d24 <bno055_get_accel_unit>
 8000c76:	4603      	mov	r3, r0
 8000c78:	75fb      	strb	r3, [r7, #23]
    if (accel_unit_u8 != BNO055_ACCEL_UNIT_MG)
 8000c7a:	7bfb      	ldrb	r3, [r7, #15]
 8000c7c:	2b01      	cmp	r3, #1
 8000c7e:	d008      	beq.n	8000c92 <bno055_convert_float_accel_xyz_mg+0x42>
    {
        com_rslt += bno055_set_accel_unit(BNO055_ACCEL_UNIT_MG);
 8000c80:	2001      	movs	r0, #1
 8000c82:	f000 f891 	bl	8000da8 <bno055_set_accel_unit>
 8000c86:	4603      	mov	r3, r0
 8000c88:	b2da      	uxtb	r2, r3
 8000c8a:	7dfb      	ldrb	r3, [r7, #23]
 8000c8c:	4413      	add	r3, r2
 8000c8e:	b2db      	uxtb	r3, r3
 8000c90:	75fb      	strb	r3, [r7, #23]
    }
    if (com_rslt == BNO055_SUCCESS)
 8000c92:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d13c      	bne.n	8000d14 <bno055_convert_float_accel_xyz_mg+0xc4>
    {
        /* Read the accel raw y data*/
        com_rslt += bno055_read_accel_xyz(&reg_accel_xyz);
 8000c9a:	f107 0310 	add.w	r3, r7, #16
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f7ff ff68 	bl	8000b74 <bno055_read_accel_xyz>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	b2da      	uxtb	r2, r3
 8000ca8:	7dfb      	ldrb	r3, [r7, #23]
 8000caa:	4413      	add	r3, r2
 8000cac:	b2db      	uxtb	r3, r3
 8000cae:	75fb      	strb	r3, [r7, #23]
        if (com_rslt == BNO055_SUCCESS)
 8000cb0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d12a      	bne.n	8000d0e <bno055_convert_float_accel_xyz_mg+0xbe>
        {
            /*Convert the accel raw xyz to millig */
            accel_xyz->x = (float)(reg_accel_xyz.x / BNO055_ACCEL_DIV_MG);
 8000cb8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f7ff fbf5 	bl	80004ac <__aeabi_i2d>
 8000cc2:	4602      	mov	r2, r0
 8000cc4:	460b      	mov	r3, r1
 8000cc6:	4610      	mov	r0, r2
 8000cc8:	4619      	mov	r1, r3
 8000cca:	f7ff fc59 	bl	8000580 <__aeabi_d2f>
 8000cce:	4602      	mov	r2, r0
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	601a      	str	r2, [r3, #0]
            accel_xyz->y = (float)(reg_accel_xyz.y / BNO055_ACCEL_DIV_MG);
 8000cd4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f7ff fbe7 	bl	80004ac <__aeabi_i2d>
 8000cde:	4602      	mov	r2, r0
 8000ce0:	460b      	mov	r3, r1
 8000ce2:	4610      	mov	r0, r2
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	f7ff fc4b 	bl	8000580 <__aeabi_d2f>
 8000cea:	4602      	mov	r2, r0
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	605a      	str	r2, [r3, #4]
            accel_xyz->z = (float)(reg_accel_xyz.z / BNO055_ACCEL_DIV_MG);
 8000cf0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f7ff fbd9 	bl	80004ac <__aeabi_i2d>
 8000cfa:	4602      	mov	r2, r0
 8000cfc:	460b      	mov	r3, r1
 8000cfe:	4610      	mov	r0, r2
 8000d00:	4619      	mov	r1, r3
 8000d02:	f7ff fc3d 	bl	8000580 <__aeabi_d2f>
 8000d06:	4602      	mov	r2, r0
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	609a      	str	r2, [r3, #8]
 8000d0c:	e004      	b.n	8000d18 <bno055_convert_float_accel_xyz_mg+0xc8>
        }
        else
        {
            com_rslt = BNO055_ERROR;
 8000d0e:	23ff      	movs	r3, #255	; 0xff
 8000d10:	75fb      	strb	r3, [r7, #23]
 8000d12:	e001      	b.n	8000d18 <bno055_convert_float_accel_xyz_mg+0xc8>
        }
    }
    else
    {
        com_rslt = BNO055_ERROR;
 8000d14:	23ff      	movs	r3, #255	; 0xff
 8000d16:	75fb      	strb	r3, [r7, #23]
    }

    return com_rslt;
 8000d18:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	3718      	adds	r7, #24
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}

08000d24 <bno055_get_accel_unit>:
 *  @retval 0 -> BNO055_SUCCESS
 *  @retval 1 -> BNO055_ERROR
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_get_accel_unit(u8 *accel_unit_u8)
{
 8000d24:	b590      	push	{r4, r7, lr}
 8000d26:	b085      	sub	sp, #20
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8000d2c:	23ff      	movs	r3, #255	; 0xff
 8000d2e:	73fb      	strb	r3, [r7, #15]
    u8 data_u8r = BNO055_INIT_VALUE;
 8000d30:	2300      	movs	r3, #0
 8000d32:	737b      	strb	r3, [r7, #13]
    s8 stat_s8 = BNO055_ERROR;
 8000d34:	23ff      	movs	r3, #255	; 0xff
 8000d36:	73bb      	strb	r3, [r7, #14]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 8000d38:	4b1a      	ldr	r3, [pc, #104]	; (8000da4 <bno055_get_accel_unit+0x80>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d102      	bne.n	8000d46 <bno055_get_accel_unit+0x22>
    {
        return BNO055_E_NULL_PTR;
 8000d40:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 8000d44:	e02a      	b.n	8000d9c <bno055_get_accel_unit+0x78>
    }
    else
    {
        /*condition check for page, accel unit is
         * available in the page zero*/
        if (p_bno055->page_id != BNO055_PAGE_ZERO)
 8000d46:	4b17      	ldr	r3, [pc, #92]	; (8000da4 <bno055_get_accel_unit+0x80>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	791b      	ldrb	r3, [r3, #4]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d004      	beq.n	8000d5a <bno055_get_accel_unit+0x36>
        {
            /* Write the page zero*/
            stat_s8 = bno055_write_page_id(BNO055_PAGE_ZERO);
 8000d50:	2000      	movs	r0, #0
 8000d52:	f7ff fec7 	bl	8000ae4 <bno055_write_page_id>
 8000d56:	4603      	mov	r3, r0
 8000d58:	73bb      	strb	r3, [r7, #14]
        }
        if ((stat_s8 == BNO055_SUCCESS) || (p_bno055->page_id == BNO055_PAGE_ZERO))
 8000d5a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d004      	beq.n	8000d6c <bno055_get_accel_unit+0x48>
 8000d62:	4b10      	ldr	r3, [pc, #64]	; (8000da4 <bno055_get_accel_unit+0x80>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	791b      	ldrb	r3, [r3, #4]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d113      	bne.n	8000d94 <bno055_get_accel_unit+0x70>
        {
            /* Read the accel unit */
            com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000d6c:	4b0d      	ldr	r3, [pc, #52]	; (8000da4 <bno055_get_accel_unit+0x80>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	691c      	ldr	r4, [r3, #16]
 8000d72:	4b0c      	ldr	r3, [pc, #48]	; (8000da4 <bno055_get_accel_unit+0x80>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	7a58      	ldrb	r0, [r3, #9]
 8000d78:	f107 020d 	add.w	r2, r7, #13
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	213b      	movs	r1, #59	; 0x3b
 8000d80:	47a0      	blx	r4
 8000d82:	4603      	mov	r3, r0
 8000d84:	73fb      	strb	r3, [r7, #15]
                                                      BNO055_ACCEL_UNIT_REG,
                                                      &data_u8r,
                                                      BNO055_GEN_READ_WRITE_LENGTH);
            *accel_unit_u8 = BNO055_GET_BITSLICE(data_u8r, BNO055_ACCEL_UNIT);
 8000d86:	7b7b      	ldrb	r3, [r7, #13]
 8000d88:	f003 0301 	and.w	r3, r3, #1
 8000d8c:	b2da      	uxtb	r2, r3
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	701a      	strb	r2, [r3, #0]
 8000d92:	e001      	b.n	8000d98 <bno055_get_accel_unit+0x74>
        }
        else
        {
            com_rslt = BNO055_ERROR;
 8000d94:	23ff      	movs	r3, #255	; 0xff
 8000d96:	73fb      	strb	r3, [r7, #15]
        }
    }

    return com_rslt;
 8000d98:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	3714      	adds	r7, #20
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd90      	pop	{r4, r7, pc}
 8000da4:	20000028 	.word	0x20000028

08000da8 <bno055_set_accel_unit>:
 *  @retval 1 -> BNO055_ERROR
 *
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_set_accel_unit(u8 accel_unit_u8)
{
 8000da8:	b590      	push	{r4, r7, lr}
 8000daa:	b085      	sub	sp, #20
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	4603      	mov	r3, r0
 8000db0:	71fb      	strb	r3, [r7, #7]
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8000db2:	23ff      	movs	r3, #255	; 0xff
 8000db4:	73fb      	strb	r3, [r7, #15]
    u8 data_u8r = BNO055_INIT_VALUE;
 8000db6:	2300      	movs	r3, #0
 8000db8:	737b      	strb	r3, [r7, #13]
    u8 prev_opmode_u8 = BNO055_OPERATION_MODE_CONFIG;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	733b      	strb	r3, [r7, #12]
    s8 stat_s8 = BNO055_ERROR;
 8000dbe:	23ff      	movs	r3, #255	; 0xff
 8000dc0:	73bb      	strb	r3, [r7, #14]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 8000dc2:	4b35      	ldr	r3, [pc, #212]	; (8000e98 <bno055_set_accel_unit+0xf0>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d102      	bne.n	8000dd0 <bno055_set_accel_unit+0x28>
    {
        return BNO055_E_NULL_PTR;
 8000dca:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 8000dce:	e05f      	b.n	8000e90 <bno055_set_accel_unit+0xe8>
    else
    {
        /* The write operation effective only if the operation
         * mode is in config mode, this part of code is checking the
         * current operation mode and set the config mode */
        stat_s8 = bno055_get_operation_mode(&prev_opmode_u8);
 8000dd0:	f107 030c 	add.w	r3, r7, #12
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f000 f861 	bl	8000e9c <bno055_get_operation_mode>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	73bb      	strb	r3, [r7, #14]
        if (stat_s8 == BNO055_SUCCESS)
 8000dde:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d143      	bne.n	8000e6e <bno055_set_accel_unit+0xc6>
        {
            if (prev_opmode_u8 != BNO055_OPERATION_MODE_CONFIG)
 8000de6:	7b3b      	ldrb	r3, [r7, #12]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d008      	beq.n	8000dfe <bno055_set_accel_unit+0x56>
            {
                stat_s8 += bno055_set_operation_mode(BNO055_OPERATION_MODE_CONFIG);
 8000dec:	2000      	movs	r0, #0
 8000dee:	f000 f897 	bl	8000f20 <bno055_set_operation_mode>
 8000df2:	4603      	mov	r3, r0
 8000df4:	b2da      	uxtb	r2, r3
 8000df6:	7bbb      	ldrb	r3, [r7, #14]
 8000df8:	4413      	add	r3, r2
 8000dfa:	b2db      	uxtb	r3, r3
 8000dfc:	73bb      	strb	r3, [r7, #14]
            }
            if (stat_s8 == BNO055_SUCCESS)
 8000dfe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d130      	bne.n	8000e68 <bno055_set_accel_unit+0xc0>
            {
                /* Write the accel unit */
                com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000e06:	4b24      	ldr	r3, [pc, #144]	; (8000e98 <bno055_set_accel_unit+0xf0>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	691c      	ldr	r4, [r3, #16]
 8000e0c:	4b22      	ldr	r3, [pc, #136]	; (8000e98 <bno055_set_accel_unit+0xf0>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	7a58      	ldrb	r0, [r3, #9]
 8000e12:	f107 020d 	add.w	r2, r7, #13
 8000e16:	2301      	movs	r3, #1
 8000e18:	213b      	movs	r1, #59	; 0x3b
 8000e1a:	47a0      	blx	r4
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	73fb      	strb	r3, [r7, #15]
                                                          BNO055_ACCEL_UNIT_REG,
                                                          &data_u8r,
                                                          BNO055_GEN_READ_WRITE_LENGTH);
                if (com_rslt == BNO055_SUCCESS)
 8000e20:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d124      	bne.n	8000e72 <bno055_set_accel_unit+0xca>
                {
                    data_u8r = BNO055_SET_BITSLICE(data_u8r, BNO055_ACCEL_UNIT, accel_unit_u8);
 8000e28:	7b7b      	ldrb	r3, [r7, #13]
 8000e2a:	b25b      	sxtb	r3, r3
 8000e2c:	f023 0301 	bic.w	r3, r3, #1
 8000e30:	b25a      	sxtb	r2, r3
 8000e32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e36:	f003 0301 	and.w	r3, r3, #1
 8000e3a:	b25b      	sxtb	r3, r3
 8000e3c:	4313      	orrs	r3, r2
 8000e3e:	b25b      	sxtb	r3, r3
 8000e40:	b2db      	uxtb	r3, r3
 8000e42:	737b      	strb	r3, [r7, #13]
                    com_rslt += p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 8000e44:	4b14      	ldr	r3, [pc, #80]	; (8000e98 <bno055_set_accel_unit+0xf0>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	68dc      	ldr	r4, [r3, #12]
 8000e4a:	4b13      	ldr	r3, [pc, #76]	; (8000e98 <bno055_set_accel_unit+0xf0>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	7a58      	ldrb	r0, [r3, #9]
 8000e50:	f107 020d 	add.w	r2, r7, #13
 8000e54:	2301      	movs	r3, #1
 8000e56:	213b      	movs	r1, #59	; 0x3b
 8000e58:	47a0      	blx	r4
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	b2da      	uxtb	r2, r3
 8000e5e:	7bfb      	ldrb	r3, [r7, #15]
 8000e60:	4413      	add	r3, r2
 8000e62:	b2db      	uxtb	r3, r3
 8000e64:	73fb      	strb	r3, [r7, #15]
 8000e66:	e004      	b.n	8000e72 <bno055_set_accel_unit+0xca>
                                                                BNO055_GEN_READ_WRITE_LENGTH);
                }
            }
            else
            {
                com_rslt = BNO055_ERROR;
 8000e68:	23ff      	movs	r3, #255	; 0xff
 8000e6a:	73fb      	strb	r3, [r7, #15]
 8000e6c:	e001      	b.n	8000e72 <bno055_set_accel_unit+0xca>
            }
        }
        else
        {
            com_rslt = BNO055_ERROR;
 8000e6e:	23ff      	movs	r3, #255	; 0xff
 8000e70:	73fb      	strb	r3, [r7, #15]
        }
    }
    if (prev_opmode_u8 != BNO055_OPERATION_MODE_CONFIG)
 8000e72:	7b3b      	ldrb	r3, [r7, #12]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d009      	beq.n	8000e8c <bno055_set_accel_unit+0xe4>
    {
        /* set the operation mode
         * of previous operation mode*/
        com_rslt += bno055_set_operation_mode(prev_opmode_u8);
 8000e78:	7b3b      	ldrb	r3, [r7, #12]
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f000 f850 	bl	8000f20 <bno055_set_operation_mode>
 8000e80:	4603      	mov	r3, r0
 8000e82:	b2da      	uxtb	r2, r3
 8000e84:	7bfb      	ldrb	r3, [r7, #15]
 8000e86:	4413      	add	r3, r2
 8000e88:	b2db      	uxtb	r3, r3
 8000e8a:	73fb      	strb	r3, [r7, #15]
    }

    return com_rslt;
 8000e8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	3714      	adds	r7, #20
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd90      	pop	{r4, r7, pc}
 8000e98:	20000028 	.word	0x20000028

08000e9c <bno055_get_operation_mode>:
 *  becomes zero and it is mainly derived
 *  to configure the various settings of the BNO
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_get_operation_mode(u8 *operation_mode_u8)
{
 8000e9c:	b590      	push	{r4, r7, lr}
 8000e9e:	b085      	sub	sp, #20
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8000ea4:	23ff      	movs	r3, #255	; 0xff
 8000ea6:	73fb      	strb	r3, [r7, #15]
    u8 data_u8r = BNO055_INIT_VALUE;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	737b      	strb	r3, [r7, #13]
    s8 stat_s8 = BNO055_ERROR;
 8000eac:	23ff      	movs	r3, #255	; 0xff
 8000eae:	73bb      	strb	r3, [r7, #14]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 8000eb0:	4b1a      	ldr	r3, [pc, #104]	; (8000f1c <bno055_get_operation_mode+0x80>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d102      	bne.n	8000ebe <bno055_get_operation_mode+0x22>
    {
        return BNO055_E_NULL_PTR;
 8000eb8:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 8000ebc:	e02a      	b.n	8000f14 <bno055_get_operation_mode+0x78>
    }
    else
    {
        /*condition check for page, operation mode is
         * available in the page zero*/
        if (p_bno055->page_id != BNO055_PAGE_ZERO)
 8000ebe:	4b17      	ldr	r3, [pc, #92]	; (8000f1c <bno055_get_operation_mode+0x80>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	791b      	ldrb	r3, [r3, #4]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d004      	beq.n	8000ed2 <bno055_get_operation_mode+0x36>
        {
            /* Write the page zero*/
            stat_s8 = bno055_write_page_id(BNO055_PAGE_ZERO);
 8000ec8:	2000      	movs	r0, #0
 8000eca:	f7ff fe0b 	bl	8000ae4 <bno055_write_page_id>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	73bb      	strb	r3, [r7, #14]
        }
        if ((stat_s8 == BNO055_SUCCESS) || (p_bno055->page_id == BNO055_PAGE_ZERO))
 8000ed2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d004      	beq.n	8000ee4 <bno055_get_operation_mode+0x48>
 8000eda:	4b10      	ldr	r3, [pc, #64]	; (8000f1c <bno055_get_operation_mode+0x80>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	791b      	ldrb	r3, [r3, #4]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d113      	bne.n	8000f0c <bno055_get_operation_mode+0x70>
        {
            /* Read the value of operation mode*/
            com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000ee4:	4b0d      	ldr	r3, [pc, #52]	; (8000f1c <bno055_get_operation_mode+0x80>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	691c      	ldr	r4, [r3, #16]
 8000eea:	4b0c      	ldr	r3, [pc, #48]	; (8000f1c <bno055_get_operation_mode+0x80>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	7a58      	ldrb	r0, [r3, #9]
 8000ef0:	f107 020d 	add.w	r2, r7, #13
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	213d      	movs	r1, #61	; 0x3d
 8000ef8:	47a0      	blx	r4
 8000efa:	4603      	mov	r3, r0
 8000efc:	73fb      	strb	r3, [r7, #15]
                                                      BNO055_OPERATION_MODE_REG,
                                                      &data_u8r,
                                                      BNO055_GEN_READ_WRITE_LENGTH);
            *operation_mode_u8 = BNO055_GET_BITSLICE(data_u8r, BNO055_OPERATION_MODE);
 8000efe:	7b7b      	ldrb	r3, [r7, #13]
 8000f00:	f003 030f 	and.w	r3, r3, #15
 8000f04:	b2da      	uxtb	r2, r3
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	701a      	strb	r2, [r3, #0]
 8000f0a:	e001      	b.n	8000f10 <bno055_get_operation_mode+0x74>
        }
        else
        {
            com_rslt = BNO055_ERROR;
 8000f0c:	23ff      	movs	r3, #255	; 0xff
 8000f0e:	73fb      	strb	r3, [r7, #15]
        }
    }

    return com_rslt;
 8000f10:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000f14:	4618      	mov	r0, r3
 8000f16:	3714      	adds	r7, #20
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd90      	pop	{r4, r7, pc}
 8000f1c:	20000028 	.word	0x20000028

08000f20 <bno055_set_operation_mode>:
 *  becomes zero and it is mainly derived
 *  to configure the various settings of the BNO
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_set_operation_mode(u8 operation_mode_u8)
{
 8000f20:	b590      	push	{r4, r7, lr}
 8000f22:	b085      	sub	sp, #20
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	4603      	mov	r3, r0
 8000f28:	71fb      	strb	r3, [r7, #7]
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8000f2a:	23ff      	movs	r3, #255	; 0xff
 8000f2c:	73fb      	strb	r3, [r7, #15]
    u8 data_u8r = BNO055_INIT_VALUE;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	737b      	strb	r3, [r7, #13]
    u8 prev_opmode_u8 = BNO055_OPERATION_MODE_CONFIG;
 8000f32:	2300      	movs	r3, #0
 8000f34:	733b      	strb	r3, [r7, #12]
    s8 stat_s8 = BNO055_ERROR;
 8000f36:	23ff      	movs	r3, #255	; 0xff
 8000f38:	73bb      	strb	r3, [r7, #14]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 8000f3a:	4b5c      	ldr	r3, [pc, #368]	; (80010ac <bno055_set_operation_mode+0x18c>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d102      	bne.n	8000f48 <bno055_set_operation_mode+0x28>
    {
        return BNO055_E_NULL_PTR;
 8000f42:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 8000f46:	e0ac      	b.n	80010a2 <bno055_set_operation_mode+0x182>
    else
    {
        /* The write operation effective only if the operation
         * mode is in config mode, this part of code is checking the
         * current operation mode and set the config mode */
        stat_s8 = bno055_get_operation_mode(&prev_opmode_u8);
 8000f48:	f107 030c 	add.w	r3, r7, #12
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f7ff ffa5 	bl	8000e9c <bno055_get_operation_mode>
 8000f52:	4603      	mov	r3, r0
 8000f54:	73bb      	strb	r3, [r7, #14]
        if (stat_s8 == BNO055_SUCCESS)
 8000f56:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	f040 809d 	bne.w	800109a <bno055_set_operation_mode+0x17a>
        {
            /* If the previous operation mode is config it is
             * directly write the operation mode */
            if (prev_opmode_u8 == BNO055_OPERATION_MODE_CONFIG)
 8000f60:	7b3b      	ldrb	r3, [r7, #12]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d137      	bne.n	8000fd6 <bno055_set_operation_mode+0xb6>
            {
                com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000f66:	4b51      	ldr	r3, [pc, #324]	; (80010ac <bno055_set_operation_mode+0x18c>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	691c      	ldr	r4, [r3, #16]
 8000f6c:	4b4f      	ldr	r3, [pc, #316]	; (80010ac <bno055_set_operation_mode+0x18c>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	7a58      	ldrb	r0, [r3, #9]
 8000f72:	f107 020d 	add.w	r2, r7, #13
 8000f76:	2301      	movs	r3, #1
 8000f78:	213d      	movs	r1, #61	; 0x3d
 8000f7a:	47a0      	blx	r4
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	73fb      	strb	r3, [r7, #15]
                                                          BNO055_OPERATION_MODE_REG,
                                                          &data_u8r,
                                                          BNO055_GEN_READ_WRITE_LENGTH);
                if (com_rslt == BNO055_SUCCESS)
 8000f80:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	f040 808a 	bne.w	800109e <bno055_set_operation_mode+0x17e>
                {
                    data_u8r = BNO055_SET_BITSLICE(data_u8r, BNO055_OPERATION_MODE, operation_mode_u8);
 8000f8a:	7b7b      	ldrb	r3, [r7, #13]
 8000f8c:	b25b      	sxtb	r3, r3
 8000f8e:	f023 030f 	bic.w	r3, r3, #15
 8000f92:	b25a      	sxtb	r2, r3
 8000f94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f98:	f003 030f 	and.w	r3, r3, #15
 8000f9c:	b25b      	sxtb	r3, r3
 8000f9e:	4313      	orrs	r3, r2
 8000fa0:	b25b      	sxtb	r3, r3
 8000fa2:	b2db      	uxtb	r3, r3
 8000fa4:	737b      	strb	r3, [r7, #13]
                    com_rslt += p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 8000fa6:	4b41      	ldr	r3, [pc, #260]	; (80010ac <bno055_set_operation_mode+0x18c>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	68dc      	ldr	r4, [r3, #12]
 8000fac:	4b3f      	ldr	r3, [pc, #252]	; (80010ac <bno055_set_operation_mode+0x18c>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	7a58      	ldrb	r0, [r3, #9]
 8000fb2:	f107 020d 	add.w	r2, r7, #13
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	213d      	movs	r1, #61	; 0x3d
 8000fba:	47a0      	blx	r4
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	b2da      	uxtb	r2, r3
 8000fc0:	7bfb      	ldrb	r3, [r7, #15]
 8000fc2:	4413      	add	r3, r2
 8000fc4:	b2db      	uxtb	r3, r3
 8000fc6:	73fb      	strb	r3, [r7, #15]
                                                                BNO055_GEN_READ_WRITE_LENGTH);

                    /* Config mode to other
                     * operation mode switching
                     * required delay of 600ms*/
                    p_bno055->delay_msec(BNO055_MODE_SWITCHING_DELAY);
 8000fc8:	4b38      	ldr	r3, [pc, #224]	; (80010ac <bno055_set_operation_mode+0x18c>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	695b      	ldr	r3, [r3, #20]
 8000fce:	f44f 7016 	mov.w	r0, #600	; 0x258
 8000fd2:	4798      	blx	r3
 8000fd4:	e063      	b.n	800109e <bno055_set_operation_mode+0x17e>
            else
            {
                /* If the previous operation
                 * mode is not config it is
                 * write the config mode */
                com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000fd6:	4b35      	ldr	r3, [pc, #212]	; (80010ac <bno055_set_operation_mode+0x18c>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	691c      	ldr	r4, [r3, #16]
 8000fdc:	4b33      	ldr	r3, [pc, #204]	; (80010ac <bno055_set_operation_mode+0x18c>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	7a58      	ldrb	r0, [r3, #9]
 8000fe2:	f107 020d 	add.w	r2, r7, #13
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	213d      	movs	r1, #61	; 0x3d
 8000fea:	47a0      	blx	r4
 8000fec:	4603      	mov	r3, r0
 8000fee:	73fb      	strb	r3, [r7, #15]
                                                          BNO055_OPERATION_MODE_REG,
                                                          &data_u8r,
                                                          BNO055_GEN_READ_WRITE_LENGTH);
                if (com_rslt == BNO055_SUCCESS)
 8000ff0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d116      	bne.n	8001026 <bno055_set_operation_mode+0x106>
                {
                    data_u8r = BNO055_SET_BITSLICE(data_u8r, BNO055_OPERATION_MODE, BNO055_OPERATION_MODE_CONFIG);
 8000ff8:	7b7b      	ldrb	r3, [r7, #13]
 8000ffa:	f023 030f 	bic.w	r3, r3, #15
 8000ffe:	b2db      	uxtb	r3, r3
 8001000:	737b      	strb	r3, [r7, #13]
                    com_rslt +=
                        bno055_write_register(BNO055_OPERATION_MODE_REG, &data_u8r, BNO055_GEN_READ_WRITE_LENGTH);
 8001002:	f107 030d 	add.w	r3, r7, #13
 8001006:	2201      	movs	r2, #1
 8001008:	4619      	mov	r1, r3
 800100a:	203d      	movs	r0, #61	; 0x3d
 800100c:	f7ff fd44 	bl	8000a98 <bno055_write_register>
 8001010:	4603      	mov	r3, r0
 8001012:	b2da      	uxtb	r2, r3
                    com_rslt +=
 8001014:	7bfb      	ldrb	r3, [r7, #15]
 8001016:	4413      	add	r3, r2
 8001018:	b2db      	uxtb	r3, r3
 800101a:	73fb      	strb	r3, [r7, #15]

                    /* other mode to config mode switching
                     * required delay of 20ms*/
                    p_bno055->delay_msec(BNO055_CONFIG_MODE_SWITCHING_DELAY);
 800101c:	4b23      	ldr	r3, [pc, #140]	; (80010ac <bno055_set_operation_mode+0x18c>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	695b      	ldr	r3, [r3, #20]
 8001022:	2014      	movs	r0, #20
 8001024:	4798      	blx	r3
                }

                /* Write the operation mode */
                if (operation_mode_u8 != BNO055_OPERATION_MODE_CONFIG)
 8001026:	79fb      	ldrb	r3, [r7, #7]
 8001028:	2b00      	cmp	r3, #0
 800102a:	d038      	beq.n	800109e <bno055_set_operation_mode+0x17e>
                {
                    com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 800102c:	4b1f      	ldr	r3, [pc, #124]	; (80010ac <bno055_set_operation_mode+0x18c>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	691c      	ldr	r4, [r3, #16]
 8001032:	4b1e      	ldr	r3, [pc, #120]	; (80010ac <bno055_set_operation_mode+0x18c>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	7a58      	ldrb	r0, [r3, #9]
 8001038:	f107 020d 	add.w	r2, r7, #13
 800103c:	2301      	movs	r3, #1
 800103e:	213d      	movs	r1, #61	; 0x3d
 8001040:	47a0      	blx	r4
 8001042:	4603      	mov	r3, r0
 8001044:	73fb      	strb	r3, [r7, #15]
                                                              BNO055_OPERATION_MODE_REG,
                                                              &data_u8r,
                                                              BNO055_GEN_READ_WRITE_LENGTH);
                    if (com_rslt == BNO055_SUCCESS)
 8001046:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d127      	bne.n	800109e <bno055_set_operation_mode+0x17e>
                    {
                        data_u8r = BNO055_SET_BITSLICE(data_u8r, BNO055_OPERATION_MODE, operation_mode_u8);
 800104e:	7b7b      	ldrb	r3, [r7, #13]
 8001050:	b25b      	sxtb	r3, r3
 8001052:	f023 030f 	bic.w	r3, r3, #15
 8001056:	b25a      	sxtb	r2, r3
 8001058:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800105c:	f003 030f 	and.w	r3, r3, #15
 8001060:	b25b      	sxtb	r3, r3
 8001062:	4313      	orrs	r3, r2
 8001064:	b25b      	sxtb	r3, r3
 8001066:	b2db      	uxtb	r3, r3
 8001068:	737b      	strb	r3, [r7, #13]
                        com_rslt += p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 800106a:	4b10      	ldr	r3, [pc, #64]	; (80010ac <bno055_set_operation_mode+0x18c>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	68dc      	ldr	r4, [r3, #12]
 8001070:	4b0e      	ldr	r3, [pc, #56]	; (80010ac <bno055_set_operation_mode+0x18c>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	7a58      	ldrb	r0, [r3, #9]
 8001076:	f107 020d 	add.w	r2, r7, #13
 800107a:	2301      	movs	r3, #1
 800107c:	213d      	movs	r1, #61	; 0x3d
 800107e:	47a0      	blx	r4
 8001080:	4603      	mov	r3, r0
 8001082:	b2da      	uxtb	r2, r3
 8001084:	7bfb      	ldrb	r3, [r7, #15]
 8001086:	4413      	add	r3, r2
 8001088:	b2db      	uxtb	r3, r3
 800108a:	73fb      	strb	r3, [r7, #15]
                                                                    BNO055_GEN_READ_WRITE_LENGTH);

                        /* Config mode to other
                         * operation mode switching
                         * required delay of 600ms*/
                        p_bno055->delay_msec(BNO055_MODE_SWITCHING_DELAY);
 800108c:	4b07      	ldr	r3, [pc, #28]	; (80010ac <bno055_set_operation_mode+0x18c>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	695b      	ldr	r3, [r3, #20]
 8001092:	f44f 7016 	mov.w	r0, #600	; 0x258
 8001096:	4798      	blx	r3
 8001098:	e001      	b.n	800109e <bno055_set_operation_mode+0x17e>
                }
            }
        }
        else
        {
            com_rslt = BNO055_ERROR;
 800109a:	23ff      	movs	r3, #255	; 0xff
 800109c:	73fb      	strb	r3, [r7, #15]
        }
    }

    return com_rslt;
 800109e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	3714      	adds	r7, #20
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd90      	pop	{r4, r7, pc}
 80010aa:	bf00      	nop
 80010ac:	20000028 	.word	0x20000028

080010b0 <har_extract_features>:
 * @param acc_data 3 axis accelerometer vectors of size VECTOR_LEN
 * @param output Function's output
 * @retval 0 if successful
 */
int8_t har_extract_features(float32_t acc_data[3][VECTOR_LEN], HAR_FtrExtOutput *output)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b096      	sub	sp, #88	; 0x58
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
 80010b8:	6039      	str	r1, [r7, #0]

	float32_t sma_x = 0, sma_y = 0, sma_z = 0, sma = 0;
 80010ba:	f04f 0300 	mov.w	r3, #0
 80010be:	657b      	str	r3, [r7, #84]	; 0x54
 80010c0:	f04f 0300 	mov.w	r3, #0
 80010c4:	653b      	str	r3, [r7, #80]	; 0x50
 80010c6:	f04f 0300 	mov.w	r3, #0
 80010ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80010cc:	f04f 0300 	mov.w	r3, #0
 80010d0:	627b      	str	r3, [r7, #36]	; 0x24
	float32_t x_mean = 0, y_mean = 0, z_mean = 0;
 80010d2:	f04f 0300 	mov.w	r3, #0
 80010d6:	64bb      	str	r3, [r7, #72]	; 0x48
 80010d8:	f04f 0300 	mov.w	r3, #0
 80010dc:	647b      	str	r3, [r7, #68]	; 0x44
 80010de:	f04f 0300 	mov.w	r3, #0
 80010e2:	643b      	str	r3, [r7, #64]	; 0x40
	int32_t x_pos = 0, y_pos = 0, z_pos = 0;
 80010e4:	2300      	movs	r3, #0
 80010e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80010e8:	2300      	movs	r3, #0
 80010ea:	63bb      	str	r3, [r7, #56]	; 0x38
 80010ec:	2300      	movs	r3, #0
 80010ee:	637b      	str	r3, [r7, #52]	; 0x34

	for(uint32_t i = 0; i < VECTOR_LEN; i++)
 80010f0:	2300      	movs	r3, #0
 80010f2:	633b      	str	r3, [r7, #48]	; 0x30
 80010f4:	e064      	b.n	80011c0 <har_extract_features+0x110>
	{
		x_mean += acc_data[0][i];
 80010f6:	687a      	ldr	r2, [r7, #4]
 80010f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010fa:	009b      	lsls	r3, r3, #2
 80010fc:	4413      	add	r3, r2
 80010fe:	edd3 7a00 	vldr	s15, [r3]
 8001102:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8001106:	ee77 7a27 	vadd.f32	s15, s14, s15
 800110a:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
		y_mean += acc_data[1][i];
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	f503 7280 	add.w	r2, r3, #256	; 0x100
 8001114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001116:	009b      	lsls	r3, r3, #2
 8001118:	4413      	add	r3, r2
 800111a:	edd3 7a00 	vldr	s15, [r3]
 800111e:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8001122:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001126:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
		z_mean += acc_data[2][i];
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	f503 7200 	add.w	r2, r3, #512	; 0x200
 8001130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001132:	009b      	lsls	r3, r3, #2
 8001134:	4413      	add	r3, r2
 8001136:	edd3 7a00 	vldr	s15, [r3]
 800113a:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800113e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001142:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
		x_pos += (acc_data[0][i] > 0);
 8001146:	687a      	ldr	r2, [r7, #4]
 8001148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800114a:	009b      	lsls	r3, r3, #2
 800114c:	4413      	add	r3, r2
 800114e:	edd3 7a00 	vldr	s15, [r3]
 8001152:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001156:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800115a:	bfcc      	ite	gt
 800115c:	2301      	movgt	r3, #1
 800115e:	2300      	movle	r3, #0
 8001160:	b2db      	uxtb	r3, r3
 8001162:	461a      	mov	r2, r3
 8001164:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001166:	4413      	add	r3, r2
 8001168:	63fb      	str	r3, [r7, #60]	; 0x3c
		y_pos += (acc_data[1][i] > 0);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	f503 7280 	add.w	r2, r3, #256	; 0x100
 8001170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001172:	009b      	lsls	r3, r3, #2
 8001174:	4413      	add	r3, r2
 8001176:	edd3 7a00 	vldr	s15, [r3]
 800117a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800117e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001182:	bfcc      	ite	gt
 8001184:	2301      	movgt	r3, #1
 8001186:	2300      	movle	r3, #0
 8001188:	b2db      	uxtb	r3, r3
 800118a:	461a      	mov	r2, r3
 800118c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800118e:	4413      	add	r3, r2
 8001190:	63bb      	str	r3, [r7, #56]	; 0x38
		z_pos += (acc_data[2][i] > 0);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	f503 7200 	add.w	r2, r3, #512	; 0x200
 8001198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800119a:	009b      	lsls	r3, r3, #2
 800119c:	4413      	add	r3, r2
 800119e:	edd3 7a00 	vldr	s15, [r3]
 80011a2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80011a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011aa:	bfcc      	ite	gt
 80011ac:	2301      	movgt	r3, #1
 80011ae:	2300      	movle	r3, #0
 80011b0:	b2db      	uxtb	r3, r3
 80011b2:	461a      	mov	r2, r3
 80011b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011b6:	4413      	add	r3, r2
 80011b8:	637b      	str	r3, [r7, #52]	; 0x34
	for(uint32_t i = 0; i < VECTOR_LEN; i++)
 80011ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011bc:	3301      	adds	r3, #1
 80011be:	633b      	str	r3, [r7, #48]	; 0x30
 80011c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011c2:	2b3f      	cmp	r3, #63	; 0x3f
 80011c4:	d997      	bls.n	80010f6 <har_extract_features+0x46>
	}

	x_mean /= VECTOR_LEN;
 80011c6:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80011ca:	eddf 6a65 	vldr	s13, [pc, #404]	; 8001360 <har_extract_features+0x2b0>
 80011ce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011d2:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
	y_mean /= VECTOR_LEN;
 80011d6:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 80011da:	eddf 6a61 	vldr	s13, [pc, #388]	; 8001360 <har_extract_features+0x2b0>
 80011de:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011e2:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
	z_mean /= VECTOR_LEN;
 80011e6:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80011ea:	eddf 6a5d 	vldr	s13, [pc, #372]	; 8001360 <har_extract_features+0x2b0>
 80011ee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011f2:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40

	arm_rfft_fast_instance_f32 fft;
	arm_status res = arm_rfft_fast_init_f32(&fft, VECTOR_LEN);
 80011f6:	f107 0308 	add.w	r3, r7, #8
 80011fa:	2140      	movs	r1, #64	; 0x40
 80011fc:	4618      	mov	r0, r3
 80011fe:	f005 fcc7 	bl	8006b90 <arm_rfft_fast_init_f32>
 8001202:	4603      	mov	r3, r0
 8001204:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	if (res != 0)
 8001208:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800120c:	2b00      	cmp	r3, #0
 800120e:	d002      	beq.n	8001216 <har_extract_features+0x166>
	{
		return -1;
 8001210:	f04f 33ff 	mov.w	r3, #4294967295
 8001214:	e09f      	b.n	8001356 <har_extract_features+0x2a6>
	}

	for(int32_t i = 0; i < 3; i++)
 8001216:	2300      	movs	r3, #0
 8001218:	62fb      	str	r3, [r7, #44]	; 0x2c
 800121a:	e029      	b.n	8001270 <har_extract_features+0x1c0>
	{
		arm_rfft_fast_f32(&fft, &acc_data[i][0], &fft_output[i][0], 0);
 800121c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800121e:	021b      	lsls	r3, r3, #8
 8001220:	687a      	ldr	r2, [r7, #4]
 8001222:	4413      	add	r3, r2
 8001224:	4619      	mov	r1, r3
 8001226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001228:	021b      	lsls	r3, r3, #8
 800122a:	4a4e      	ldr	r2, [pc, #312]	; (8001364 <har_extract_features+0x2b4>)
 800122c:	441a      	add	r2, r3
 800122e:	f107 0008 	add.w	r0, r7, #8
 8001232:	2300      	movs	r3, #0
 8001234:	f005 fc06 	bl	8006a44 <arm_rfft_fast_f32>
		arm_cmplx_mag_f32(&fft_output[i][0], &fft_abs[i][0], VECTOR_LEN/2);
 8001238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800123a:	021b      	lsls	r3, r3, #8
 800123c:	4a49      	ldr	r2, [pc, #292]	; (8001364 <har_extract_features+0x2b4>)
 800123e:	1898      	adds	r0, r3, r2
 8001240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001242:	01db      	lsls	r3, r3, #7
 8001244:	4a48      	ldr	r2, [pc, #288]	; (8001368 <har_extract_features+0x2b8>)
 8001246:	4413      	add	r3, r2
 8001248:	2220      	movs	r2, #32
 800124a:	4619      	mov	r1, r3
 800124c:	f004 fccd 	bl	8005bea <arm_cmplx_mag_f32>
		arm_std_f32(&fft_abs[i][1], ((VECTOR_LEN/2) - 1), &fft_sd[i]);
 8001250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001252:	01db      	lsls	r3, r3, #7
 8001254:	3304      	adds	r3, #4
 8001256:	4a44      	ldr	r2, [pc, #272]	; (8001368 <har_extract_features+0x2b8>)
 8001258:	1898      	adds	r0, r3, r2
 800125a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800125c:	009b      	lsls	r3, r3, #2
 800125e:	4a43      	ldr	r2, [pc, #268]	; (800136c <har_extract_features+0x2bc>)
 8001260:	4413      	add	r3, r2
 8001262:	461a      	mov	r2, r3
 8001264:	211f      	movs	r1, #31
 8001266:	f004 fd09 	bl	8005c7c <arm_std_f32>
	for(int32_t i = 0; i < 3; i++)
 800126a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800126c:	3301      	adds	r3, #1
 800126e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001272:	2b02      	cmp	r3, #2
 8001274:	ddd2      	ble.n	800121c <har_extract_features+0x16c>
	}

	for(int32_t i = 1; i < VECTOR_LEN/2; i++)
 8001276:	2301      	movs	r3, #1
 8001278:	62bb      	str	r3, [r7, #40]	; 0x28
 800127a:	e028      	b.n	80012ce <har_extract_features+0x21e>
	{
		sma_x += fft_abs[0][i];
 800127c:	4a3a      	ldr	r2, [pc, #232]	; (8001368 <har_extract_features+0x2b8>)
 800127e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001280:	009b      	lsls	r3, r3, #2
 8001282:	4413      	add	r3, r2
 8001284:	edd3 7a00 	vldr	s15, [r3]
 8001288:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800128c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001290:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
		sma_y += fft_abs[1][i];
 8001294:	4a34      	ldr	r2, [pc, #208]	; (8001368 <har_extract_features+0x2b8>)
 8001296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001298:	3320      	adds	r3, #32
 800129a:	009b      	lsls	r3, r3, #2
 800129c:	4413      	add	r3, r2
 800129e:	edd3 7a00 	vldr	s15, [r3]
 80012a2:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80012a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012aa:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
		sma_z += fft_abs[2][i];
 80012ae:	4a2e      	ldr	r2, [pc, #184]	; (8001368 <har_extract_features+0x2b8>)
 80012b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012b2:	3340      	adds	r3, #64	; 0x40
 80012b4:	009b      	lsls	r3, r3, #2
 80012b6:	4413      	add	r3, r2
 80012b8:	edd3 7a00 	vldr	s15, [r3]
 80012bc:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80012c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012c4:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
	for(int32_t i = 1; i < VECTOR_LEN/2; i++)
 80012c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012ca:	3301      	adds	r3, #1
 80012cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80012ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012d0:	2b1f      	cmp	r3, #31
 80012d2:	ddd3      	ble.n	800127c <har_extract_features+0x1cc>
	}

	sma = (sma_x + sma_y + sma_z) / (VECTOR_LEN/2);
 80012d4:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 80012d8:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80012dc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80012e0:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80012e4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80012e8:	eddf 6a21 	vldr	s13, [pc, #132]	; 8001370 <har_extract_features+0x2c0>
 80012ec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012f0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	output->fft_sd_x = fft_sd[0];
 80012f4:	4b1d      	ldr	r3, [pc, #116]	; (800136c <har_extract_features+0x2bc>)
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	619a      	str	r2, [r3, #24]
	output->fft_sd_y = fft_sd[1];
 80012fc:	4b1b      	ldr	r3, [pc, #108]	; (800136c <har_extract_features+0x2bc>)
 80012fe:	685a      	ldr	r2, [r3, #4]
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	61da      	str	r2, [r3, #28]
	output->fft_sd_z = fft_sd[2];
 8001304:	4b19      	ldr	r3, [pc, #100]	; (800136c <har_extract_features+0x2bc>)
 8001306:	689a      	ldr	r2, [r3, #8]
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	621a      	str	r2, [r3, #32]
	output->sma = sma;
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001310:	625a      	str	r2, [r3, #36]	; 0x24
	output->x_mean = x_mean;
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001316:	601a      	str	r2, [r3, #0]
	output->y_mean = y_mean;
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800131c:	605a      	str	r2, [r3, #4]
	output->z_mean = z_mean;
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001322:	609a      	str	r2, [r3, #8]
	output->x_pos = x_pos;
 8001324:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001326:	ee07 3a90 	vmov	s15, r3
 800132a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	edc3 7a03 	vstr	s15, [r3, #12]
	output->y_pos = y_pos;
 8001334:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001336:	ee07 3a90 	vmov	s15, r3
 800133a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	edc3 7a04 	vstr	s15, [r3, #16]
	output->z_pos = z_pos;
 8001344:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001346:	ee07 3a90 	vmov	s15, r3
 800134a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	edc3 7a05 	vstr	s15, [r3, #20]
	return 0;
 8001354:	2300      	movs	r3, #0
}
 8001356:	4618      	mov	r0, r3
 8001358:	3758      	adds	r7, #88	; 0x58
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	42800000 	.word	0x42800000
 8001364:	2000002c 	.word	0x2000002c
 8001368:	20000338 	.word	0x20000338
 800136c:	2000032c 	.word	0x2000032c
 8001370:	42000000 	.word	0x42000000

08001374 <LIB_BNO055_Init>:
  * @brief  Initializes the accelerometer, gyro and magnetometer
  * @param  None
  * @retval 0 if successfully initialized
  */
int8_t LIB_BNO055_Init(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0
	int8_t status;
	bno055.dev_addr = BNO055_I2C_ADDR1;
 800137a:	4b0f      	ldr	r3, [pc, #60]	; (80013b8 <LIB_BNO055_Init+0x44>)
 800137c:	2228      	movs	r2, #40	; 0x28
 800137e:	725a      	strb	r2, [r3, #9]
	bno055.bus_read = &__BNO055_Read;
 8001380:	4b0d      	ldr	r3, [pc, #52]	; (80013b8 <LIB_BNO055_Init+0x44>)
 8001382:	4a0e      	ldr	r2, [pc, #56]	; (80013bc <LIB_BNO055_Init+0x48>)
 8001384:	611a      	str	r2, [r3, #16]
	bno055.bus_write = &__BNO055_Write;
 8001386:	4b0c      	ldr	r3, [pc, #48]	; (80013b8 <LIB_BNO055_Init+0x44>)
 8001388:	4a0d      	ldr	r2, [pc, #52]	; (80013c0 <LIB_BNO055_Init+0x4c>)
 800138a:	60da      	str	r2, [r3, #12]
	bno055.delay_msec = &__BNO055_Delay;
 800138c:	4b0a      	ldr	r3, [pc, #40]	; (80013b8 <LIB_BNO055_Init+0x44>)
 800138e:	4a0d      	ldr	r2, [pc, #52]	; (80013c4 <LIB_BNO055_Init+0x50>)
 8001390:	615a      	str	r2, [r3, #20]
	status = bno055_init(&bno055);
 8001392:	4809      	ldr	r0, [pc, #36]	; (80013b8 <LIB_BNO055_Init+0x44>)
 8001394:	f7ff fac0 	bl	8000918 <bno055_init>
 8001398:	4603      	mov	r3, r0
 800139a:	71fb      	strb	r3, [r7, #7]
	status |= bno055_set_operation_mode(BNO055_OPERATION_MODE_AMG);
 800139c:	2007      	movs	r0, #7
 800139e:	f7ff fdbf 	bl	8000f20 <bno055_set_operation_mode>
 80013a2:	4603      	mov	r3, r0
 80013a4:	461a      	mov	r2, r3
 80013a6:	79fb      	ldrb	r3, [r7, #7]
 80013a8:	4313      	orrs	r3, r2
 80013aa:	71fb      	strb	r3, [r7, #7]
	return status;
 80013ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 80013b0:	4618      	mov	r0, r3
 80013b2:	3708      	adds	r7, #8
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	200004b8 	.word	0x200004b8
 80013bc:	08001401 	.word	0x08001401
 80013c0:	0800144d 	.word	0x0800144d
 80013c4:	08001499 	.word	0x08001499

080013c8 <LIB_BNO055_ReadAccelXYZ>:
  * @param  y Pointer to the accelerometer's y value.
  * @param  z Pointer to the accelerometer's z value.
  * @retval 0 if successfully read
  */
int8_t LIB_BNO055_ReadAccelXYZ(float *x, float *y, float *z)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b088      	sub	sp, #32
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	60f8      	str	r0, [r7, #12]
 80013d0:	60b9      	str	r1, [r7, #8]
 80013d2:	607a      	str	r2, [r7, #4]
	int8_t status;
	struct bno055_accel_float_t accel;
	status = bno055_convert_float_accel_xyz_mg(&accel);
 80013d4:	f107 0310 	add.w	r3, r7, #16
 80013d8:	4618      	mov	r0, r3
 80013da:	f7ff fc39 	bl	8000c50 <bno055_convert_float_accel_xyz_mg>
 80013de:	4603      	mov	r3, r0
 80013e0:	77fb      	strb	r3, [r7, #31]
	*x = accel.x;
 80013e2:	693a      	ldr	r2, [r7, #16]
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	601a      	str	r2, [r3, #0]
	*y = accel.y;
 80013e8:	697a      	ldr	r2, [r7, #20]
 80013ea:	68bb      	ldr	r3, [r7, #8]
 80013ec:	601a      	str	r2, [r3, #0]
	*z = accel.z;
 80013ee:	69ba      	ldr	r2, [r7, #24]
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	601a      	str	r2, [r3, #0]
	return status;
 80013f4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	3720      	adds	r7, #32
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}

08001400 <__BNO055_Read>:
 * @param  pData 	Pointer to data
 * @param  Length 	Length of data
 * @retval 0 if successfully read
 */
static int8_t __BNO055_Read(uint8_t dev_addr, uint8_t reg_addr, uint8_t *reg_data, uint8_t r_len)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b086      	sub	sp, #24
 8001404:	af04      	add	r7, sp, #16
 8001406:	603a      	str	r2, [r7, #0]
 8001408:	461a      	mov	r2, r3
 800140a:	4603      	mov	r3, r0
 800140c:	71fb      	strb	r3, [r7, #7]
 800140e:	460b      	mov	r3, r1
 8001410:	71bb      	strb	r3, [r7, #6]
 8001412:	4613      	mov	r3, r2
 8001414:	717b      	strb	r3, [r7, #5]
	return HAL_I2C_Mem_Read(&__hi2c, dev_addr << 1, reg_addr, I2C_MEMADD_SIZE_8BIT, reg_data, r_len, 1000);
 8001416:	79fb      	ldrb	r3, [r7, #7]
 8001418:	b29b      	uxth	r3, r3
 800141a:	005b      	lsls	r3, r3, #1
 800141c:	b299      	uxth	r1, r3
 800141e:	79bb      	ldrb	r3, [r7, #6]
 8001420:	b29a      	uxth	r2, r3
 8001422:	797b      	ldrb	r3, [r7, #5]
 8001424:	b29b      	uxth	r3, r3
 8001426:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800142a:	9002      	str	r0, [sp, #8]
 800142c:	9301      	str	r3, [sp, #4]
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	9300      	str	r3, [sp, #0]
 8001432:	2301      	movs	r3, #1
 8001434:	4804      	ldr	r0, [pc, #16]	; (8001448 <__BNO055_Read+0x48>)
 8001436:	f001 fd71 	bl	8002f1c <HAL_I2C_Mem_Read>
 800143a:	4603      	mov	r3, r0
 800143c:	b25b      	sxtb	r3, r3
}
 800143e:	4618      	mov	r0, r3
 8001440:	3708      	adds	r7, #8
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	20000800 	.word	0x20000800

0800144c <__BNO055_Write>:
 * @param  pData 	Pointer to data
 * @param  Length 	Length of data
 * @retval 0 if successfully written
 */
static int8_t __BNO055_Write(uint8_t dev_addr, uint8_t reg_addr, uint8_t *reg_data, uint8_t r_len)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b086      	sub	sp, #24
 8001450:	af04      	add	r7, sp, #16
 8001452:	603a      	str	r2, [r7, #0]
 8001454:	461a      	mov	r2, r3
 8001456:	4603      	mov	r3, r0
 8001458:	71fb      	strb	r3, [r7, #7]
 800145a:	460b      	mov	r3, r1
 800145c:	71bb      	strb	r3, [r7, #6]
 800145e:	4613      	mov	r3, r2
 8001460:	717b      	strb	r3, [r7, #5]
	return HAL_I2C_Mem_Write(&__hi2c, dev_addr << 1, reg_addr, I2C_MEMADD_SIZE_8BIT, reg_data, r_len, 1000);
 8001462:	79fb      	ldrb	r3, [r7, #7]
 8001464:	b29b      	uxth	r3, r3
 8001466:	005b      	lsls	r3, r3, #1
 8001468:	b299      	uxth	r1, r3
 800146a:	79bb      	ldrb	r3, [r7, #6]
 800146c:	b29a      	uxth	r2, r3
 800146e:	797b      	ldrb	r3, [r7, #5]
 8001470:	b29b      	uxth	r3, r3
 8001472:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001476:	9002      	str	r0, [sp, #8]
 8001478:	9301      	str	r3, [sp, #4]
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	9300      	str	r3, [sp, #0]
 800147e:	2301      	movs	r3, #1
 8001480:	4804      	ldr	r0, [pc, #16]	; (8001494 <__BNO055_Write+0x48>)
 8001482:	f001 fc37 	bl	8002cf4 <HAL_I2C_Mem_Write>
 8001486:	4603      	mov	r3, r0
 8001488:	b25b      	sxtb	r3, r3
}
 800148a:	4618      	mov	r0, r3
 800148c:	3708      	adds	r7, #8
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	20000800 	.word	0x20000800

08001498 <__BNO055_Delay>:
 * @brief  Waits for milliseconds.
 * @param  millis Milliseconds to wait.
 * @retval None
 */
static void __BNO055_Delay(unsigned int millis)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
	HAL_Delay(millis);
 80014a0:	6878      	ldr	r0, [r7, #4]
 80014a2:	f001 f89b 	bl	80025dc <HAL_Delay>
}
 80014a6:	bf00      	nop
 80014a8:	3708      	adds	r7, #8
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
	...

080014b0 <LIB_SERIAL_Transmit>:
  * @param length	Number of data in quantity (not bytes!)
  * @param type 	Choose from SERIAL_DataTypeDef enum
  * @retval 0 if successfully transmitted
  */
int8_t LIB_SERIAL_Transmit(void *pData, uint32_t length, SERIAL_DataTypeDef type)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b08a      	sub	sp, #40	; 0x28
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	60f8      	str	r0, [r7, #12]
 80014b8:	60b9      	str	r1, [r7, #8]
 80014ba:	4613      	mov	r3, r2
 80014bc:	71fb      	strb	r3, [r7, #7]
	uint8_t __header[3] = "STW", __count = 0;
 80014be:	4a44      	ldr	r2, [pc, #272]	; (80015d0 <LIB_SERIAL_Transmit+0x120>)
 80014c0:	f107 0314 	add.w	r3, r7, #20
 80014c4:	6812      	ldr	r2, [r2, #0]
 80014c6:	4611      	mov	r1, r2
 80014c8:	8019      	strh	r1, [r3, #0]
 80014ca:	3302      	adds	r3, #2
 80014cc:	0c12      	lsrs	r2, r2, #16
 80014ce:	701a      	strb	r2, [r3, #0]
 80014d0:	2300      	movs	r3, #0
 80014d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint32_t __length = 0;
 80014d6:	2300      	movs	r3, #0
 80014d8:	613b      	str	r3, [r7, #16]
	uint16_t __quotient = 0, __remainder = 0;
 80014da:	2300      	movs	r3, #0
 80014dc:	83fb      	strh	r3, [r7, #30]
 80014de:	2300      	movs	r3, #0
 80014e0:	83bb      	strh	r3, [r7, #28]
	uint16_t divisor = UINT16_MAX;
 80014e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80014e6:	837b      	strh	r3, [r7, #26]
	uint8_t * __pData = (uint8_t*) pData;
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	623b      	str	r3, [r7, #32]
	if ((type == TYPE_S8) || (type == TYPE_U8))
 80014ec:	79fb      	ldrb	r3, [r7, #7]
 80014ee:	2b02      	cmp	r3, #2
 80014f0:	d002      	beq.n	80014f8 <LIB_SERIAL_Transmit+0x48>
 80014f2:	79fb      	ldrb	r3, [r7, #7]
 80014f4:	2b01      	cmp	r3, #1
 80014f6:	d102      	bne.n	80014fe <LIB_SERIAL_Transmit+0x4e>
	{
		__length = length;
 80014f8:	68bb      	ldr	r3, [r7, #8]
 80014fa:	613b      	str	r3, [r7, #16]
 80014fc:	e019      	b.n	8001532 <LIB_SERIAL_Transmit+0x82>
	}
	else if ((type == TYPE_S16) || (type == TYPE_U16))
 80014fe:	79fb      	ldrb	r3, [r7, #7]
 8001500:	2b04      	cmp	r3, #4
 8001502:	d002      	beq.n	800150a <LIB_SERIAL_Transmit+0x5a>
 8001504:	79fb      	ldrb	r3, [r7, #7]
 8001506:	2b03      	cmp	r3, #3
 8001508:	d103      	bne.n	8001512 <LIB_SERIAL_Transmit+0x62>
	{
		__length = length * 2;
 800150a:	68bb      	ldr	r3, [r7, #8]
 800150c:	005b      	lsls	r3, r3, #1
 800150e:	613b      	str	r3, [r7, #16]
 8001510:	e00f      	b.n	8001532 <LIB_SERIAL_Transmit+0x82>
	}
	else if ((type == TYPE_S32) || (type == TYPE_U32) || (type == TYPE_F32))
 8001512:	79fb      	ldrb	r3, [r7, #7]
 8001514:	2b06      	cmp	r3, #6
 8001516:	d005      	beq.n	8001524 <LIB_SERIAL_Transmit+0x74>
 8001518:	79fb      	ldrb	r3, [r7, #7]
 800151a:	2b05      	cmp	r3, #5
 800151c:	d002      	beq.n	8001524 <LIB_SERIAL_Transmit+0x74>
 800151e:	79fb      	ldrb	r3, [r7, #7]
 8001520:	2b07      	cmp	r3, #7
 8001522:	d103      	bne.n	800152c <LIB_SERIAL_Transmit+0x7c>
	{
		__length = length * 4;
 8001524:	68bb      	ldr	r3, [r7, #8]
 8001526:	009b      	lsls	r3, r3, #2
 8001528:	613b      	str	r3, [r7, #16]
 800152a:	e002      	b.n	8001532 <LIB_SERIAL_Transmit+0x82>
	}
	else
	{
		return SERIAL_ERROR;
 800152c:	f04f 33ff 	mov.w	r3, #4294967295
 8001530:	e04a      	b.n	80015c8 <LIB_SERIAL_Transmit+0x118>
	}
	__quotient 	= __length / divisor;
 8001532:	693a      	ldr	r2, [r7, #16]
 8001534:	8b7b      	ldrh	r3, [r7, #26]
 8001536:	fbb2 f3f3 	udiv	r3, r2, r3
 800153a:	83fb      	strh	r3, [r7, #30]
	__remainder = __length % divisor;
 800153c:	693b      	ldr	r3, [r7, #16]
 800153e:	8b7a      	ldrh	r2, [r7, #26]
 8001540:	fbb3 f1f2 	udiv	r1, r3, r2
 8001544:	fb02 f201 	mul.w	r2, r2, r1
 8001548:	1a9b      	subs	r3, r3, r2
 800154a:	83bb      	strh	r3, [r7, #28]

	HAL_UART_Transmit(&__huart, __header, 3, 10);
 800154c:	f107 0114 	add.w	r1, r7, #20
 8001550:	230a      	movs	r3, #10
 8001552:	2203      	movs	r2, #3
 8001554:	481f      	ldr	r0, [pc, #124]	; (80015d4 <LIB_SERIAL_Transmit+0x124>)
 8001556:	f003 feb9 	bl	80052cc <HAL_UART_Transmit>
	HAL_UART_Transmit(&__huart, (uint8_t*)&type, 1, 10);
 800155a:	1df9      	adds	r1, r7, #7
 800155c:	230a      	movs	r3, #10
 800155e:	2201      	movs	r2, #1
 8001560:	481c      	ldr	r0, [pc, #112]	; (80015d4 <LIB_SERIAL_Transmit+0x124>)
 8001562:	f003 feb3 	bl	80052cc <HAL_UART_Transmit>
	HAL_UART_Transmit(&__huart, (uint8_t*)&__length, 4, 10);
 8001566:	f107 0110 	add.w	r1, r7, #16
 800156a:	230a      	movs	r3, #10
 800156c:	2204      	movs	r2, #4
 800156e:	4819      	ldr	r0, [pc, #100]	; (80015d4 <LIB_SERIAL_Transmit+0x124>)
 8001570:	f003 feac 	bl	80052cc <HAL_UART_Transmit>
	HAL_Delay(1);
 8001574:	2001      	movs	r0, #1
 8001576:	f001 f831 	bl	80025dc <HAL_Delay>

	while(__count < __quotient)
 800157a:	e011      	b.n	80015a0 <LIB_SERIAL_Transmit+0xf0>
	{
		HAL_UART_Transmit(&__huart, __pData, UINT16_MAX, 1000);
 800157c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001580:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001584:	6a39      	ldr	r1, [r7, #32]
 8001586:	4813      	ldr	r0, [pc, #76]	; (80015d4 <LIB_SERIAL_Transmit+0x124>)
 8001588:	f003 fea0 	bl	80052cc <HAL_UART_Transmit>
		__count++;
 800158c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001590:	3301      	adds	r3, #1
 8001592:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		__pData += UINT16_MAX;
 8001596:	6a3a      	ldr	r2, [r7, #32]
 8001598:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800159c:	4413      	add	r3, r2
 800159e:	623b      	str	r3, [r7, #32]
	while(__count < __quotient)
 80015a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80015a4:	b29b      	uxth	r3, r3
 80015a6:	8bfa      	ldrh	r2, [r7, #30]
 80015a8:	429a      	cmp	r2, r3
 80015aa:	d8e7      	bhi.n	800157c <LIB_SERIAL_Transmit+0xcc>
	}
	if (__remainder)
 80015ac:	8bbb      	ldrh	r3, [r7, #28]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d006      	beq.n	80015c0 <LIB_SERIAL_Transmit+0x110>
	{
		HAL_UART_Transmit(&__huart, __pData, __remainder, 1000);
 80015b2:	8bba      	ldrh	r2, [r7, #28]
 80015b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015b8:	6a39      	ldr	r1, [r7, #32]
 80015ba:	4806      	ldr	r0, [pc, #24]	; (80015d4 <LIB_SERIAL_Transmit+0x124>)
 80015bc:	f003 fe86 	bl	80052cc <HAL_UART_Transmit>
	}
	HAL_Delay(1);
 80015c0:	2001      	movs	r0, #1
 80015c2:	f001 f80b 	bl	80025dc <HAL_Delay>
	return SERIAL_OK;
 80015c6:	2300      	movs	r3, #0
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	3728      	adds	r7, #40	; 0x28
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	08006c78 	.word	0x08006c78
 80015d4:	2000084c 	.word	0x2000084c

080015d8 <HAL_TIM_PeriodElapsedCallback>:
volatile uint32_t counter = 0, startTick = 0, stopTick = 0;
volatile uint8_t isDataReady = 0;
float accel[3][SIZE_INPUT] = {0};

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b082      	sub	sp, #8
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
	if (htim->Instance == htim2.Instance)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681a      	ldr	r2, [r3, #0]
 80015e4:	4b15      	ldr	r3, [pc, #84]	; (800163c <HAL_TIM_PeriodElapsedCallback+0x64>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	429a      	cmp	r2, r3
 80015ea:	d122      	bne.n	8001632 <HAL_TIM_PeriodElapsedCallback+0x5a>
	{
		LIB_BNO055_ReadAccelXYZ(&accel[0][counter], &accel[1][counter], &accel[2][counter]);
 80015ec:	4b14      	ldr	r3, [pc, #80]	; (8001640 <HAL_TIM_PeriodElapsedCallback+0x68>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	009b      	lsls	r3, r3, #2
 80015f2:	4a14      	ldr	r2, [pc, #80]	; (8001644 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80015f4:	1898      	adds	r0, r3, r2
 80015f6:	4b12      	ldr	r3, [pc, #72]	; (8001640 <HAL_TIM_PeriodElapsedCallback+0x68>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	3340      	adds	r3, #64	; 0x40
 80015fc:	009b      	lsls	r3, r3, #2
 80015fe:	4a11      	ldr	r2, [pc, #68]	; (8001644 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001600:	1899      	adds	r1, r3, r2
 8001602:	4b0f      	ldr	r3, [pc, #60]	; (8001640 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	3380      	adds	r3, #128	; 0x80
 8001608:	009b      	lsls	r3, r3, #2
 800160a:	4a0e      	ldr	r2, [pc, #56]	; (8001644 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 800160c:	4413      	add	r3, r2
 800160e:	461a      	mov	r2, r3
 8001610:	f7ff feda 	bl	80013c8 <LIB_BNO055_ReadAccelXYZ>
		counter = counter + 1;
 8001614:	4b0a      	ldr	r3, [pc, #40]	; (8001640 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	3301      	adds	r3, #1
 800161a:	4a09      	ldr	r2, [pc, #36]	; (8001640 <HAL_TIM_PeriodElapsedCallback+0x68>)
 800161c:	6013      	str	r3, [r2, #0]
		if (counter >= SIZE_INPUT)
 800161e:	4b08      	ldr	r3, [pc, #32]	; (8001640 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	2b3f      	cmp	r3, #63	; 0x3f
 8001624:	d905      	bls.n	8001632 <HAL_TIM_PeriodElapsedCallback+0x5a>
		{
			isDataReady = 1;
 8001626:	4b08      	ldr	r3, [pc, #32]	; (8001648 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8001628:	2201      	movs	r2, #1
 800162a:	701a      	strb	r2, [r3, #0]
			counter = 0;
 800162c:	4b04      	ldr	r3, [pc, #16]	; (8001640 <HAL_TIM_PeriodElapsedCallback+0x68>)
 800162e:	2200      	movs	r2, #0
 8001630:	601a      	str	r2, [r3, #0]
		}

	}
}
 8001632:	bf00      	nop
 8001634:	3708      	adds	r7, #8
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	200008d0 	.word	0x200008d0
 8001640:	200004d0 	.word	0x200004d0
 8001644:	200004d8 	.word	0x200004d8
 8001648:	200004d4 	.word	0x200004d4

0800164c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001650:	f000 ff67 	bl	8002522 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001654:	f000 f82c 	bl	80016b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001658:	f000 f950 	bl	80018fc <MX_GPIO_Init>
  MX_I2C1_Init();
 800165c:	f000 f890 	bl	8001780 <MX_I2C1_Init>
  MX_TIM2_Init();
 8001660:	f000 f8ce 	bl	8001800 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8001664:	f000 f91a 	bl	800189c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  LIB_BNO055_Init();
 8001668:	f7ff fe84 	bl	8001374 <LIB_BNO055_Init>
  HAL_TIM_Base_Start_IT(&htim2);
 800166c:	480c      	ldr	r0, [pc, #48]	; (80016a0 <main+0x54>)
 800166e:	f003 f96f 	bl	8004950 <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	if (isDataReady == 1)
 8001672:	4b0c      	ldr	r3, [pc, #48]	; (80016a4 <main+0x58>)
 8001674:	781b      	ldrb	r3, [r3, #0]
 8001676:	b2db      	uxtb	r3, r3
 8001678:	2b01      	cmp	r3, #1
 800167a:	d1fa      	bne.n	8001672 <main+0x26>
	{
		isDataReady = 0;
 800167c:	4b09      	ldr	r3, [pc, #36]	; (80016a4 <main+0x58>)
 800167e:	2200      	movs	r2, #0
 8001680:	701a      	strb	r2, [r3, #0]
		/*SEND AUDIO DATA TO PC*/
		LIB_SERIAL_Transmit(accel, sizeof(accel)/sizeof(float), TYPE_F32);
 8001682:	2207      	movs	r2, #7
 8001684:	21c0      	movs	r1, #192	; 0xc0
 8001686:	4808      	ldr	r0, [pc, #32]	; (80016a8 <main+0x5c>)
 8001688:	f7ff ff12 	bl	80014b0 <LIB_SERIAL_Transmit>
		/*RUN INFERENCE ON MCU*/
		har_extract_features(accel, &output);
 800168c:	4907      	ldr	r1, [pc, #28]	; (80016ac <main+0x60>)
 800168e:	4806      	ldr	r0, [pc, #24]	; (80016a8 <main+0x5c>)
 8001690:	f7ff fd0e 	bl	80010b0 <har_extract_features>
		/*SEND INFERENCE RESULTS TO PC*/
		LIB_SERIAL_Transmit(&output, sizeof(output)/sizeof(float), TYPE_F32);
 8001694:	2207      	movs	r2, #7
 8001696:	210a      	movs	r1, #10
 8001698:	4804      	ldr	r0, [pc, #16]	; (80016ac <main+0x60>)
 800169a:	f7ff ff09 	bl	80014b0 <LIB_SERIAL_Transmit>
	if (isDataReady == 1)
 800169e:	e7e8      	b.n	8001672 <main+0x26>
 80016a0:	200008d0 	.word	0x200008d0
 80016a4:	200004d4 	.word	0x200004d4
 80016a8:	200004d8 	.word	0x200004d8
 80016ac:	200007d8 	.word	0x200007d8

080016b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b094      	sub	sp, #80	; 0x50
 80016b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016b6:	f107 0320 	add.w	r3, r7, #32
 80016ba:	2230      	movs	r2, #48	; 0x30
 80016bc:	2100      	movs	r1, #0
 80016be:	4618      	mov	r0, r3
 80016c0:	f005 fab4 	bl	8006c2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016c4:	f107 030c 	add.w	r3, r7, #12
 80016c8:	2200      	movs	r2, #0
 80016ca:	601a      	str	r2, [r3, #0]
 80016cc:	605a      	str	r2, [r3, #4]
 80016ce:	609a      	str	r2, [r3, #8]
 80016d0:	60da      	str	r2, [r3, #12]
 80016d2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80016d4:	4b28      	ldr	r3, [pc, #160]	; (8001778 <SystemClock_Config+0xc8>)
 80016d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d8:	4a27      	ldr	r2, [pc, #156]	; (8001778 <SystemClock_Config+0xc8>)
 80016da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016de:	6413      	str	r3, [r2, #64]	; 0x40
 80016e0:	4b25      	ldr	r3, [pc, #148]	; (8001778 <SystemClock_Config+0xc8>)
 80016e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016e8:	60bb      	str	r3, [r7, #8]
 80016ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80016ec:	4b23      	ldr	r3, [pc, #140]	; (800177c <SystemClock_Config+0xcc>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80016f4:	4a21      	ldr	r2, [pc, #132]	; (800177c <SystemClock_Config+0xcc>)
 80016f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80016fa:	6013      	str	r3, [r2, #0]
 80016fc:	4b1f      	ldr	r3, [pc, #124]	; (800177c <SystemClock_Config+0xcc>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001704:	607b      	str	r3, [r7, #4]
 8001706:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001708:	2302      	movs	r3, #2
 800170a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800170c:	2301      	movs	r3, #1
 800170e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001710:	2310      	movs	r3, #16
 8001712:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001714:	2302      	movs	r3, #2
 8001716:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001718:	2300      	movs	r3, #0
 800171a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 10;
 800171c:	230a      	movs	r3, #10
 800171e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 210;
 8001720:	23d2      	movs	r3, #210	; 0xd2
 8001722:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001724:	2302      	movs	r3, #2
 8001726:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001728:	2302      	movs	r3, #2
 800172a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800172c:	f107 0320 	add.w	r3, r7, #32
 8001730:	4618      	mov	r0, r3
 8001732:	f002 f84b 	bl	80037cc <HAL_RCC_OscConfig>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d001      	beq.n	8001740 <SystemClock_Config+0x90>
  {
    Error_Handler();
 800173c:	f000 fd2c 	bl	8002198 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001740:	230f      	movs	r3, #15
 8001742:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001744:	2302      	movs	r3, #2
 8001746:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001748:	2300      	movs	r3, #0
 800174a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800174c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001750:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001752:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001756:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001758:	f107 030c 	add.w	r3, r7, #12
 800175c:	2105      	movs	r1, #5
 800175e:	4618      	mov	r0, r3
 8001760:	f002 fad8 	bl	8003d14 <HAL_RCC_ClockConfig>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d001      	beq.n	800176e <SystemClock_Config+0xbe>
  {
    Error_Handler();
 800176a:	f000 fd15 	bl	8002198 <Error_Handler>
  }
}
 800176e:	bf00      	nop
 8001770:	3750      	adds	r7, #80	; 0x50
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	40023800 	.word	0x40023800
 800177c:	40007000 	.word	0x40007000

08001780 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001784:	4b1b      	ldr	r3, [pc, #108]	; (80017f4 <MX_I2C1_Init+0x74>)
 8001786:	4a1c      	ldr	r2, [pc, #112]	; (80017f8 <MX_I2C1_Init+0x78>)
 8001788:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0040154A;
 800178a:	4b1a      	ldr	r3, [pc, #104]	; (80017f4 <MX_I2C1_Init+0x74>)
 800178c:	4a1b      	ldr	r2, [pc, #108]	; (80017fc <MX_I2C1_Init+0x7c>)
 800178e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001790:	4b18      	ldr	r3, [pc, #96]	; (80017f4 <MX_I2C1_Init+0x74>)
 8001792:	2200      	movs	r2, #0
 8001794:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001796:	4b17      	ldr	r3, [pc, #92]	; (80017f4 <MX_I2C1_Init+0x74>)
 8001798:	2201      	movs	r2, #1
 800179a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800179c:	4b15      	ldr	r3, [pc, #84]	; (80017f4 <MX_I2C1_Init+0x74>)
 800179e:	2200      	movs	r2, #0
 80017a0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80017a2:	4b14      	ldr	r3, [pc, #80]	; (80017f4 <MX_I2C1_Init+0x74>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80017a8:	4b12      	ldr	r3, [pc, #72]	; (80017f4 <MX_I2C1_Init+0x74>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017ae:	4b11      	ldr	r3, [pc, #68]	; (80017f4 <MX_I2C1_Init+0x74>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017b4:	4b0f      	ldr	r3, [pc, #60]	; (80017f4 <MX_I2C1_Init+0x74>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80017ba:	480e      	ldr	r0, [pc, #56]	; (80017f4 <MX_I2C1_Init+0x74>)
 80017bc:	f001 fa0a 	bl	8002bd4 <HAL_I2C_Init>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d001      	beq.n	80017ca <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80017c6:	f000 fce7 	bl	8002198 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80017ca:	2100      	movs	r1, #0
 80017cc:	4809      	ldr	r0, [pc, #36]	; (80017f4 <MX_I2C1_Init+0x74>)
 80017ce:	f001 ff65 	bl	800369c <HAL_I2CEx_ConfigAnalogFilter>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d001      	beq.n	80017dc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80017d8:	f000 fcde 	bl	8002198 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80017dc:	2100      	movs	r1, #0
 80017de:	4805      	ldr	r0, [pc, #20]	; (80017f4 <MX_I2C1_Init+0x74>)
 80017e0:	f001 ffa7 	bl	8003732 <HAL_I2CEx_ConfigDigitalFilter>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d001      	beq.n	80017ee <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80017ea:	f000 fcd5 	bl	8002198 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80017ee:	bf00      	nop
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	20000800 	.word	0x20000800
 80017f8:	40005400 	.word	0x40005400
 80017fc:	0040154a 	.word	0x0040154a

08001800 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b088      	sub	sp, #32
 8001804:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001806:	f107 0310 	add.w	r3, r7, #16
 800180a:	2200      	movs	r2, #0
 800180c:	601a      	str	r2, [r3, #0]
 800180e:	605a      	str	r2, [r3, #4]
 8001810:	609a      	str	r2, [r3, #8]
 8001812:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001814:	1d3b      	adds	r3, r7, #4
 8001816:	2200      	movs	r2, #0
 8001818:	601a      	str	r2, [r3, #0]
 800181a:	605a      	str	r2, [r3, #4]
 800181c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800181e:	4b1e      	ldr	r3, [pc, #120]	; (8001898 <MX_TIM2_Init+0x98>)
 8001820:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001824:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 8001826:	4b1c      	ldr	r3, [pc, #112]	; (8001898 <MX_TIM2_Init+0x98>)
 8001828:	2253      	movs	r2, #83	; 0x53
 800182a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800182c:	4b1a      	ldr	r3, [pc, #104]	; (8001898 <MX_TIM2_Init+0x98>)
 800182e:	2200      	movs	r2, #0
 8001830:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19999;
 8001832:	4b19      	ldr	r3, [pc, #100]	; (8001898 <MX_TIM2_Init+0x98>)
 8001834:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001838:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800183a:	4b17      	ldr	r3, [pc, #92]	; (8001898 <MX_TIM2_Init+0x98>)
 800183c:	2200      	movs	r2, #0
 800183e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001840:	4b15      	ldr	r3, [pc, #84]	; (8001898 <MX_TIM2_Init+0x98>)
 8001842:	2200      	movs	r2, #0
 8001844:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001846:	4814      	ldr	r0, [pc, #80]	; (8001898 <MX_TIM2_Init+0x98>)
 8001848:	f003 f82a 	bl	80048a0 <HAL_TIM_Base_Init>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	d001      	beq.n	8001856 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001852:	f000 fca1 	bl	8002198 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001856:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800185a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800185c:	f107 0310 	add.w	r3, r7, #16
 8001860:	4619      	mov	r1, r3
 8001862:	480d      	ldr	r0, [pc, #52]	; (8001898 <MX_TIM2_Init+0x98>)
 8001864:	f003 fa0c 	bl	8004c80 <HAL_TIM_ConfigClockSource>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d001      	beq.n	8001872 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800186e:	f000 fc93 	bl	8002198 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001872:	2300      	movs	r3, #0
 8001874:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001876:	2300      	movs	r3, #0
 8001878:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800187a:	1d3b      	adds	r3, r7, #4
 800187c:	4619      	mov	r1, r3
 800187e:	4806      	ldr	r0, [pc, #24]	; (8001898 <MX_TIM2_Init+0x98>)
 8001880:	f003 fc2a 	bl	80050d8 <HAL_TIMEx_MasterConfigSynchronization>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d001      	beq.n	800188e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800188a:	f000 fc85 	bl	8002198 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800188e:	bf00      	nop
 8001890:	3720      	adds	r7, #32
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	200008d0 	.word	0x200008d0

0800189c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80018a0:	4b13      	ldr	r3, [pc, #76]	; (80018f0 <MX_USART1_UART_Init+0x54>)
 80018a2:	4a14      	ldr	r2, [pc, #80]	; (80018f4 <MX_USART1_UART_Init+0x58>)
 80018a4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 2000000;
 80018a6:	4b12      	ldr	r3, [pc, #72]	; (80018f0 <MX_USART1_UART_Init+0x54>)
 80018a8:	4a13      	ldr	r2, [pc, #76]	; (80018f8 <MX_USART1_UART_Init+0x5c>)
 80018aa:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80018ac:	4b10      	ldr	r3, [pc, #64]	; (80018f0 <MX_USART1_UART_Init+0x54>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80018b2:	4b0f      	ldr	r3, [pc, #60]	; (80018f0 <MX_USART1_UART_Init+0x54>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80018b8:	4b0d      	ldr	r3, [pc, #52]	; (80018f0 <MX_USART1_UART_Init+0x54>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80018be:	4b0c      	ldr	r3, [pc, #48]	; (80018f0 <MX_USART1_UART_Init+0x54>)
 80018c0:	220c      	movs	r2, #12
 80018c2:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018c4:	4b0a      	ldr	r3, [pc, #40]	; (80018f0 <MX_USART1_UART_Init+0x54>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80018ca:	4b09      	ldr	r3, [pc, #36]	; (80018f0 <MX_USART1_UART_Init+0x54>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018d0:	4b07      	ldr	r3, [pc, #28]	; (80018f0 <MX_USART1_UART_Init+0x54>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018d6:	4b06      	ldr	r3, [pc, #24]	; (80018f0 <MX_USART1_UART_Init+0x54>)
 80018d8:	2200      	movs	r2, #0
 80018da:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80018dc:	4804      	ldr	r0, [pc, #16]	; (80018f0 <MX_USART1_UART_Init+0x54>)
 80018de:	f003 fca7 	bl	8005230 <HAL_UART_Init>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d001      	beq.n	80018ec <MX_USART1_UART_Init+0x50>
  {
    Error_Handler();
 80018e8:	f000 fc56 	bl	8002198 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80018ec:	bf00      	nop
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	2000084c 	.word	0x2000084c
 80018f4:	40011000 	.word	0x40011000
 80018f8:	001e8480 	.word	0x001e8480

080018fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b090      	sub	sp, #64	; 0x40
 8001900:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001902:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001906:	2200      	movs	r2, #0
 8001908:	601a      	str	r2, [r3, #0]
 800190a:	605a      	str	r2, [r3, #4]
 800190c:	609a      	str	r2, [r3, #8]
 800190e:	60da      	str	r2, [r3, #12]
 8001910:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001912:	4bad      	ldr	r3, [pc, #692]	; (8001bc8 <MX_GPIO_Init+0x2cc>)
 8001914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001916:	4aac      	ldr	r2, [pc, #688]	; (8001bc8 <MX_GPIO_Init+0x2cc>)
 8001918:	f043 0310 	orr.w	r3, r3, #16
 800191c:	6313      	str	r3, [r2, #48]	; 0x30
 800191e:	4baa      	ldr	r3, [pc, #680]	; (8001bc8 <MX_GPIO_Init+0x2cc>)
 8001920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001922:	f003 0310 	and.w	r3, r3, #16
 8001926:	62bb      	str	r3, [r7, #40]	; 0x28
 8001928:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800192a:	4ba7      	ldr	r3, [pc, #668]	; (8001bc8 <MX_GPIO_Init+0x2cc>)
 800192c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192e:	4aa6      	ldr	r2, [pc, #664]	; (8001bc8 <MX_GPIO_Init+0x2cc>)
 8001930:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001934:	6313      	str	r3, [r2, #48]	; 0x30
 8001936:	4ba4      	ldr	r3, [pc, #656]	; (8001bc8 <MX_GPIO_Init+0x2cc>)
 8001938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800193e:	627b      	str	r3, [r7, #36]	; 0x24
 8001940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001942:	4ba1      	ldr	r3, [pc, #644]	; (8001bc8 <MX_GPIO_Init+0x2cc>)
 8001944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001946:	4aa0      	ldr	r2, [pc, #640]	; (8001bc8 <MX_GPIO_Init+0x2cc>)
 8001948:	f043 0302 	orr.w	r3, r3, #2
 800194c:	6313      	str	r3, [r2, #48]	; 0x30
 800194e:	4b9e      	ldr	r3, [pc, #632]	; (8001bc8 <MX_GPIO_Init+0x2cc>)
 8001950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001952:	f003 0302 	and.w	r3, r3, #2
 8001956:	623b      	str	r3, [r7, #32]
 8001958:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800195a:	4b9b      	ldr	r3, [pc, #620]	; (8001bc8 <MX_GPIO_Init+0x2cc>)
 800195c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195e:	4a9a      	ldr	r2, [pc, #616]	; (8001bc8 <MX_GPIO_Init+0x2cc>)
 8001960:	f043 0308 	orr.w	r3, r3, #8
 8001964:	6313      	str	r3, [r2, #48]	; 0x30
 8001966:	4b98      	ldr	r3, [pc, #608]	; (8001bc8 <MX_GPIO_Init+0x2cc>)
 8001968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196a:	f003 0308 	and.w	r3, r3, #8
 800196e:	61fb      	str	r3, [r7, #28]
 8001970:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001972:	4b95      	ldr	r3, [pc, #596]	; (8001bc8 <MX_GPIO_Init+0x2cc>)
 8001974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001976:	4a94      	ldr	r2, [pc, #592]	; (8001bc8 <MX_GPIO_Init+0x2cc>)
 8001978:	f043 0304 	orr.w	r3, r3, #4
 800197c:	6313      	str	r3, [r2, #48]	; 0x30
 800197e:	4b92      	ldr	r3, [pc, #584]	; (8001bc8 <MX_GPIO_Init+0x2cc>)
 8001980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001982:	f003 0304 	and.w	r3, r3, #4
 8001986:	61bb      	str	r3, [r7, #24]
 8001988:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800198a:	4b8f      	ldr	r3, [pc, #572]	; (8001bc8 <MX_GPIO_Init+0x2cc>)
 800198c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198e:	4a8e      	ldr	r2, [pc, #568]	; (8001bc8 <MX_GPIO_Init+0x2cc>)
 8001990:	f043 0301 	orr.w	r3, r3, #1
 8001994:	6313      	str	r3, [r2, #48]	; 0x30
 8001996:	4b8c      	ldr	r3, [pc, #560]	; (8001bc8 <MX_GPIO_Init+0x2cc>)
 8001998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199a:	f003 0301 	and.w	r3, r3, #1
 800199e:	617b      	str	r3, [r7, #20]
 80019a0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80019a2:	4b89      	ldr	r3, [pc, #548]	; (8001bc8 <MX_GPIO_Init+0x2cc>)
 80019a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a6:	4a88      	ldr	r2, [pc, #544]	; (8001bc8 <MX_GPIO_Init+0x2cc>)
 80019a8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019ac:	6313      	str	r3, [r2, #48]	; 0x30
 80019ae:	4b86      	ldr	r3, [pc, #536]	; (8001bc8 <MX_GPIO_Init+0x2cc>)
 80019b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80019b6:	613b      	str	r3, [r7, #16]
 80019b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80019ba:	4b83      	ldr	r3, [pc, #524]	; (8001bc8 <MX_GPIO_Init+0x2cc>)
 80019bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019be:	4a82      	ldr	r2, [pc, #520]	; (8001bc8 <MX_GPIO_Init+0x2cc>)
 80019c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019c4:	6313      	str	r3, [r2, #48]	; 0x30
 80019c6:	4b80      	ldr	r3, [pc, #512]	; (8001bc8 <MX_GPIO_Init+0x2cc>)
 80019c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019ce:	60fb      	str	r3, [r7, #12]
 80019d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80019d2:	4b7d      	ldr	r3, [pc, #500]	; (8001bc8 <MX_GPIO_Init+0x2cc>)
 80019d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d6:	4a7c      	ldr	r2, [pc, #496]	; (8001bc8 <MX_GPIO_Init+0x2cc>)
 80019d8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80019dc:	6313      	str	r3, [r2, #48]	; 0x30
 80019de:	4b7a      	ldr	r3, [pc, #488]	; (8001bc8 <MX_GPIO_Init+0x2cc>)
 80019e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019e6:	60bb      	str	r3, [r7, #8]
 80019e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80019ea:	4b77      	ldr	r3, [pc, #476]	; (8001bc8 <MX_GPIO_Init+0x2cc>)
 80019ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ee:	4a76      	ldr	r2, [pc, #472]	; (8001bc8 <MX_GPIO_Init+0x2cc>)
 80019f0:	f043 0320 	orr.w	r3, r3, #32
 80019f4:	6313      	str	r3, [r2, #48]	; 0x30
 80019f6:	4b74      	ldr	r3, [pc, #464]	; (8001bc8 <MX_GPIO_Init+0x2cc>)
 80019f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fa:	f003 0320 	and.w	r3, r3, #32
 80019fe:	607b      	str	r3, [r7, #4]
 8001a00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a02:	4b71      	ldr	r3, [pc, #452]	; (8001bc8 <MX_GPIO_Init+0x2cc>)
 8001a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a06:	4a70      	ldr	r2, [pc, #448]	; (8001bc8 <MX_GPIO_Init+0x2cc>)
 8001a08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a0e:	4b6e      	ldr	r3, [pc, #440]	; (8001bc8 <MX_GPIO_Init+0x2cc>)
 8001a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a16:	603b      	str	r3, [r7, #0]
 8001a18:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	2120      	movs	r1, #32
 8001a1e:	486b      	ldr	r0, [pc, #428]	; (8001bcc <MX_GPIO_Init+0x2d0>)
 8001a20:	f001 f8be 	bl	8002ba0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin, GPIO_PIN_RESET);
 8001a24:	2200      	movs	r2, #0
 8001a26:	f241 010c 	movw	r1, #4108	; 0x100c
 8001a2a:	4869      	ldr	r0, [pc, #420]	; (8001bd0 <MX_GPIO_Init+0x2d4>)
 8001a2c:	f001 f8b8 	bl	8002ba0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 8001a30:	2200      	movs	r2, #0
 8001a32:	2108      	movs	r1, #8
 8001a34:	4867      	ldr	r0, [pc, #412]	; (8001bd4 <MX_GPIO_Init+0x2d8>)
 8001a36:	f001 f8b3 	bl	8002ba0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a40:	4865      	ldr	r0, [pc, #404]	; (8001bd8 <MX_GPIO_Init+0x2dc>)
 8001a42:	f001 f8ad 	bl	8002ba0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8001a46:	2200      	movs	r2, #0
 8001a48:	21c8      	movs	r1, #200	; 0xc8
 8001a4a:	4864      	ldr	r0, [pc, #400]	; (8001bdc <MX_GPIO_Init+0x2e0>)
 8001a4c:	f001 f8a8 	bl	8002ba0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LCD_B0_Pin */
  GPIO_InitStruct.Pin = LCD_B0_Pin;
 8001a50:	2310      	movs	r3, #16
 8001a52:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a54:	2302      	movs	r3, #2
 8001a56:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001a60:	230e      	movs	r3, #14
 8001a62:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8001a64:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a68:	4619      	mov	r1, r3
 8001a6a:	485d      	ldr	r0, [pc, #372]	; (8001be0 <MX_GPIO_Init+0x2e4>)
 8001a6c:	f000 feec 	bl	8002848 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8001a70:	2308      	movs	r3, #8
 8001a72:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a74:	2300      	movs	r3, #0
 8001a76:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001a7c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a80:	4619      	mov	r1, r3
 8001a82:	4857      	ldr	r0, [pc, #348]	; (8001be0 <MX_GPIO_Init+0x2e4>)
 8001a84:	f000 fee0 	bl	8002848 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_D2_Pin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8001a88:	2304      	movs	r3, #4
 8001a8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a8c:	2302      	movs	r3, #2
 8001a8e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a90:	2300      	movs	r3, #0
 8001a92:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a94:	2303      	movs	r3, #3
 8001a96:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001a98:	2309      	movs	r3, #9
 8001a9a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8001a9c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	484f      	ldr	r0, [pc, #316]	; (8001be0 <MX_GPIO_Init+0x2e4>)
 8001aa4:	f000 fed0 	bl	8002848 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8001aa8:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8001aac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aae:	2302      	movs	r3, #2
 8001ab0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001aba:	230b      	movs	r3, #11
 8001abc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001abe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	4845      	ldr	r0, [pc, #276]	; (8001bdc <MX_GPIO_Init+0x2e0>)
 8001ac6:	f000 febf 	bl	8002848 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_NBL1_Pin FMC_NBL0_Pin FMC_D5_Pin FMC_D6_Pin
                           FMC_D8_Pin FMC_D11_Pin FMC_D4_Pin FMC_D7_Pin
                           FMC_D9_Pin FMC_D12_Pin FMC_D10_Pin */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8001aca:	f64f 7383 	movw	r3, #65411	; 0xff83
 8001ace:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ad0:	2302      	movs	r3, #2
 8001ad2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ad8:	2303      	movs	r3, #3
 8001ada:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001adc:	230c      	movs	r3, #12
 8001ade:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ae0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	483e      	ldr	r0, [pc, #248]	; (8001be0 <MX_GPIO_Init+0x2e4>)
 8001ae8:	f000 feae 	bl	8002848 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 8001aec:	f643 4323 	movw	r3, #15395	; 0x3c23
 8001af0:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af2:	2302      	movs	r3, #2
 8001af4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af6:	2300      	movs	r3, #0
 8001af8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001afa:	2303      	movs	r3, #3
 8001afc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001afe:	230a      	movs	r3, #10
 8001b00:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b02:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b06:	4619      	mov	r1, r3
 8001b08:	4836      	ldr	r0, [pc, #216]	; (8001be4 <MX_GPIO_Init+0x2e8>)
 8001b0a:	f000 fe9d 	bl	8002848 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 8001b0e:	2310      	movs	r3, #16
 8001b10:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b12:	2302      	movs	r3, #2
 8001b14:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b16:	2300      	movs	r3, #0
 8001b18:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001b1e:	2302      	movs	r3, #2
 8001b20:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8001b22:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b26:	4619      	mov	r1, r3
 8001b28:	482e      	ldr	r0, [pc, #184]	; (8001be4 <MX_GPIO_Init+0x2e8>)
 8001b2a:	f000 fe8d 	bl	8002848 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_RX0_Pin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8001b2e:	2380      	movs	r3, #128	; 0x80
 8001b30:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b32:	2302      	movs	r3, #2
 8001b34:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b36:	2300      	movs	r3, #0
 8001b38:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8001b3e:	2308      	movs	r3, #8
 8001b40:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8001b42:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b46:	4619      	mov	r1, r3
 8001b48:	4820      	ldr	r0, [pc, #128]	; (8001bcc <MX_GPIO_Init+0x2d0>)
 8001b4a:	f000 fe7d 	bl	8002848 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC_CK_Pin SDMMC_D3_Pin SDMMC_D2_Pin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8001b4e:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001b52:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b54:	2302      	movs	r3, #2
 8001b56:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b5c:	2303      	movs	r3, #3
 8001b5e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001b60:	230c      	movs	r3, #12
 8001b62:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b64:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b68:	4619      	mov	r1, r3
 8001b6a:	481f      	ldr	r0, [pc, #124]	; (8001be8 <MX_GPIO_Init+0x2ec>)
 8001b6c:	f000 fe6c 	bl	8002848 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D6_Pin DCMI_D7_Pin */
  GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8001b70:	2360      	movs	r3, #96	; 0x60
 8001b72:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b74:	2302      	movs	r3, #2
 8001b76:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001b80:	230d      	movs	r3, #13
 8001b82:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b84:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b88:	4619      	mov	r1, r3
 8001b8a:	4815      	ldr	r0, [pc, #84]	; (8001be0 <MX_GPIO_Init+0x2e4>)
 8001b8c:	f000 fe5c 	bl	8002848 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_NCS_Pin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8001b90:	2340      	movs	r3, #64	; 0x40
 8001b92:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b94:	2302      	movs	r3, #2
 8001b96:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b9c:	2303      	movs	r3, #3
 8001b9e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001ba0:	230a      	movs	r3, #10
 8001ba2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8001ba4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ba8:	4619      	mov	r1, r3
 8001baa:	480e      	ldr	r0, [pc, #56]	; (8001be4 <MX_GPIO_Init+0x2e8>)
 8001bac:	f000 fe4c 	bl	8002848 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNCAS_Pin FMC_SDCLK_Pin FMC_A11_Pin FMC_A10_Pin
                           FMC_BA1_Pin FMC_BA0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8001bb0:	f248 1333 	movw	r3, #33075	; 0x8133
 8001bb4:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bb6:	2302      	movs	r3, #2
 8001bb8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bbe:	2303      	movs	r3, #3
 8001bc0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001bc2:	230c      	movs	r3, #12
 8001bc4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001bc6:	e011      	b.n	8001bec <MX_GPIO_Init+0x2f0>
 8001bc8:	40023800 	.word	0x40023800
 8001bcc:	40020c00 	.word	0x40020c00
 8001bd0:	40022000 	.word	0x40022000
 8001bd4:	40022800 	.word	0x40022800
 8001bd8:	40021c00 	.word	0x40021c00
 8001bdc:	40021800 	.word	0x40021800
 8001be0:	40021000 	.word	0x40021000
 8001be4:	40020400 	.word	0x40020400
 8001be8:	40020800 	.word	0x40020800
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001bec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	48bc      	ldr	r0, [pc, #752]	; (8001ee4 <MX_GPIO_Init+0x5e8>)
 8001bf4:	f000 fe28 	bl	8002848 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_B1_Pin LCD_B2_Pin LCD_B3_Pin LCD_G4_Pin
                           LCD_G1_Pin LCD_G3_Pin LCD_G0_Pin LCD_G2_Pin
                           LCD_R7_Pin LCD_R5_Pin LCD_R6_Pin LCD_R4_Pin
                           LCD_R3_Pin LCD_R1_Pin LCD_R2_Pin */
  GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8001bf8:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8001bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bfe:	2302      	movs	r3, #2
 8001c00:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c02:	2300      	movs	r3, #0
 8001c04:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c06:	2300      	movs	r3, #0
 8001c08:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001c0a:	230e      	movs	r3, #14
 8001c0c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001c0e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c12:	4619      	mov	r1, r3
 8001c14:	48b4      	ldr	r0, [pc, #720]	; (8001ee8 <MX_GPIO_Init+0x5ec>)
 8001c16:	f000 fe17 	bl	8002848 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8001c1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c20:	2300      	movs	r3, #0
 8001c22:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c24:	2300      	movs	r3, #0
 8001c26:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001c28:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	48ae      	ldr	r0, [pc, #696]	; (8001ee8 <MX_GPIO_Init+0x5ec>)
 8001c30:	f000 fe0a 	bl	8002848 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8001c34:	2340      	movs	r3, #64	; 0x40
 8001c36:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001c38:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001c3c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8001c42:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c46:	4619      	mov	r1, r3
 8001c48:	48a8      	ldr	r0, [pc, #672]	; (8001eec <MX_GPIO_Init+0x5f0>)
 8001c4a:	f000 fdfd 	bl	8002848 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_D2_Pin FMC_D3_Pin FMC_D1_Pin FMC_D15_Pin
                           FMC_D0_Pin FMC_D14_Pin FMC_D13_Pin */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8001c4e:	f24c 7303 	movw	r3, #50947	; 0xc703
 8001c52:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c54:	2302      	movs	r3, #2
 8001c56:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c5c:	2303      	movs	r3, #3
 8001c5e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001c60:	230c      	movs	r3, #12
 8001c62:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c64:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c68:	4619      	mov	r1, r3
 8001c6a:	48a0      	ldr	r0, [pc, #640]	; (8001eec <MX_GPIO_Init+0x5f0>)
 8001c6c:	f000 fdec 	bl	8002848 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8001c70:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001c74:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c76:	2302      	movs	r3, #2
 8001c78:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c7e:	2303      	movs	r3, #3
 8001c80:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001c82:	230a      	movs	r3, #10
 8001c84:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c86:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	4898      	ldr	r0, [pc, #608]	; (8001ef0 <MX_GPIO_Init+0x5f4>)
 8001c8e:	f000 fddb 	bl	8002848 <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI2_MCLKA_Pin SAI2_SCKA_Pin SAI2_FSA_Pin SAI2_SDA_Pin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8001c92:	23f0      	movs	r3, #240	; 0xf0
 8001c94:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c96:	2302      	movs	r3, #2
 8001c98:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8001ca2:	230a      	movs	r3, #10
 8001ca4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001ca6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001caa:	4619      	mov	r1, r3
 8001cac:	4891      	ldr	r0, [pc, #580]	; (8001ef4 <MX_GPIO_Init+0x5f8>)
 8001cae:	f000 fdcb 	bl	8002848 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DE_Pin LCD_B7_Pin LCD_B6_Pin LCD_B5_Pin
                           LCD_G6_Pin LCD_G7_Pin LCD_G5_Pin */
  GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8001cb2:	23f7      	movs	r3, #247	; 0xf7
 8001cb4:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cb6:	2302      	movs	r3, #2
 8001cb8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001cc2:	230e      	movs	r3, #14
 8001cc4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8001cc6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001cca:	4619      	mov	r1, r3
 8001ccc:	488a      	ldr	r0, [pc, #552]	; (8001ef8 <MX_GPIO_Init+0x5fc>)
 8001cce:	f000 fdbb 	bl	8002848 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_B4_Pin */
  GPIO_InitStruct.Pin = LCD_B4_Pin;
 8001cd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cd8:	2302      	movs	r3, #2
 8001cda:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001ce4:	2309      	movs	r3, #9
 8001ce6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8001ce8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001cec:	4619      	mov	r1, r3
 8001cee:	487d      	ldr	r0, [pc, #500]	; (8001ee4 <MX_GPIO_Init+0x5e8>)
 8001cf0:	f000 fdaa 	bl	8002848 <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI2_SDB_Pin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8001cf4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001cf8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cfa:	2302      	movs	r3, #2
 8001cfc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d02:	2300      	movs	r3, #0
 8001d04:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8001d06:	230a      	movs	r3, #10
 8001d08:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8001d0a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d0e:	4619      	mov	r1, r3
 8001d10:	4874      	ldr	r0, [pc, #464]	; (8001ee4 <MX_GPIO_Init+0x5e8>)
 8001d12:	f000 fd99 	bl	8002848 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001d16:	2320      	movs	r3, #32
 8001d18:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d22:	2300      	movs	r3, #0
 8001d24:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001d26:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	486f      	ldr	r0, [pc, #444]	; (8001eec <MX_GPIO_Init+0x5f0>)
 8001d2e:	f000 fd8b 	bl	8002848 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_D5_Pin */
  GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8001d32:	2308      	movs	r3, #8
 8001d34:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d36:	2302      	movs	r3, #2
 8001d38:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001d42:	230d      	movs	r3, #13
 8001d44:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8001d46:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	4867      	ldr	r0, [pc, #412]	; (8001eec <MX_GPIO_Init+0x5f0>)
 8001d4e:	f000 fd7b 	bl	8002848 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 8001d52:	f241 030c 	movw	r3, #4108	; 0x100c
 8001d56:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d60:	2300      	movs	r3, #0
 8001d62:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001d64:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d68:	4619      	mov	r1, r3
 8001d6a:	4862      	ldr	r0, [pc, #392]	; (8001ef4 <MX_GPIO_Init+0x5f8>)
 8001d6c:	f000 fd6c 	bl	8002848 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8001d70:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d74:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d76:	2300      	movs	r3, #0
 8001d78:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8001d7e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d82:	4619      	mov	r1, r3
 8001d84:	485d      	ldr	r0, [pc, #372]	; (8001efc <MX_GPIO_Init+0x600>)
 8001d86:	f000 fd5f 	bl	8002848 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_A0_Pin FMC_A1_Pin FMC_A2_Pin FMC_A3_Pin
                           FMC_A4_Pin FMC_A5_Pin FMC_A6_Pin FMC_A9_Pin
                           FMC_A7_Pin FMC_A8_Pin FMC_SDNRAS_Pin */
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8001d8a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8001d8e:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d90:	2302      	movs	r3, #2
 8001d92:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d94:	2300      	movs	r3, #0
 8001d96:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d98:	2303      	movs	r3, #3
 8001d9a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001d9c:	230c      	movs	r3, #12
 8001d9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001da0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001da4:	4619      	mov	r1, r3
 8001da6:	4856      	ldr	r0, [pc, #344]	; (8001f00 <MX_GPIO_Init+0x604>)
 8001da8:	f000 fd4e 	bl	8002848 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_HSYNC_Pin LCD_VSYNC_Pin LCD_R0_Pin LCD_CLK_Pin */
  GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8001dac:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8001db0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001db2:	2302      	movs	r3, #2
 8001db4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db6:	2300      	movs	r3, #0
 8001db8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001dbe:	230e      	movs	r3, #14
 8001dc0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001dc2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	484a      	ldr	r0, [pc, #296]	; (8001ef4 <MX_GPIO_Init+0x5f8>)
 8001dca:	f000 fd3d 	bl	8002848 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8001dce:	2308      	movs	r3, #8
 8001dd0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8001dde:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001de2:	4619      	mov	r1, r3
 8001de4:	4844      	ldr	r0, [pc, #272]	; (8001ef8 <MX_GPIO_Init+0x5fc>)
 8001de6:	f000 fd2f 	bl	8002848 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_VSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8001dea:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001dee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001df0:	2302      	movs	r3, #2
 8001df2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df4:	2300      	movs	r3, #0
 8001df6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001dfc:	230d      	movs	r3, #13
 8001dfe:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8001e00:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e04:	4619      	mov	r1, r3
 8001e06:	4837      	ldr	r0, [pc, #220]	; (8001ee4 <MX_GPIO_Init+0x5e8>)
 8001e08:	f000 fd1e 	bl	8002848 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001e0c:	2310      	movs	r3, #16
 8001e0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e10:	2300      	movs	r3, #0
 8001e12:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e14:	2300      	movs	r3, #0
 8001e16:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001e18:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	4833      	ldr	r0, [pc, #204]	; (8001eec <MX_GPIO_Init+0x5f0>)
 8001e20:	f000 fd12 	bl	8002848 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC_D0_Pin */
  GPIO_InitStruct.Pin = SDMMC_D0_Pin;
 8001e24:	2304      	movs	r3, #4
 8001e26:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e28:	2302      	movs	r3, #2
 8001e2a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e30:	2303      	movs	r3, #3
 8001e32:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001e34:	230c      	movs	r3, #12
 8001e36:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SDMMC_D0_GPIO_Port, &GPIO_InitStruct);
 8001e38:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	482b      	ldr	r0, [pc, #172]	; (8001eec <MX_GPIO_Init+0x5f0>)
 8001e40:	f000 fd02 	bl	8002848 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8001e44:	f248 0304 	movw	r3, #32772	; 0x8004
 8001e48:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001e52:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e56:	4619      	mov	r1, r3
 8001e58:	482a      	ldr	r0, [pc, #168]	; (8001f04 <MX_GPIO_Init+0x608>)
 8001e5a:	f000 fcf5 	bl	8002848 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_SCK_D13_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 8001e5e:	2302      	movs	r3, #2
 8001e60:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e62:	2302      	movs	r3, #2
 8001e64:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e66:	2300      	movs	r3, #0
 8001e68:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001e6e:	2305      	movs	r3, #5
 8001e70:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 8001e72:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e76:	4619      	mov	r1, r3
 8001e78:	481e      	ldr	r0, [pc, #120]	; (8001ef4 <MX_GPIO_Init+0x5f8>)
 8001e7a:	f000 fce5 	bl	8002848 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8001e7e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e82:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e84:	2301      	movs	r3, #1
 8001e86:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001e90:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e94:	4619      	mov	r1, r3
 8001e96:	481b      	ldr	r0, [pc, #108]	; (8001f04 <MX_GPIO_Init+0x608>)
 8001e98:	f000 fcd6 	bl	8002848 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D4_Pin DCMI_D3_Pin DCMI_D0_Pin DCMI_D2_Pin
                           DCMI_D1_Pin */
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8001e9c:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 8001ea0:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |DCMI_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ea2:	2302      	movs	r3, #2
 8001ea4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001eae:	230d      	movs	r3, #13
 8001eb0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001eb2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	4812      	ldr	r0, [pc, #72]	; (8001f04 <MX_GPIO_Init+0x608>)
 8001eba:	f000 fcc5 	bl	8002848 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_CS_D5_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ec2:	2302      	movs	r3, #2
 8001ec4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001ece:	2302      	movs	r3, #2
 8001ed0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8001ed2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	4806      	ldr	r0, [pc, #24]	; (8001ef4 <MX_GPIO_Init+0x5f8>)
 8001eda:	f000 fcb5 	bl	8002848 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D10_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8001ede:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ee2:	e011      	b.n	8001f08 <MX_GPIO_Init+0x60c>
 8001ee4:	40021800 	.word	0x40021800
 8001ee8:	40022400 	.word	0x40022400
 8001eec:	40020c00 	.word	0x40020c00
 8001ef0:	40020000 	.word	0x40020000
 8001ef4:	40022000 	.word	0x40022000
 8001ef8:	40022800 	.word	0x40022800
 8001efc:	40020800 	.word	0x40020800
 8001f00:	40021400 	.word	0x40021400
 8001f04:	40021c00 	.word	0x40021c00
 8001f08:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f0a:	2302      	movs	r3, #2
 8001f0c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f12:	2300      	movs	r3, #0
 8001f14:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001f16:	2301      	movs	r3, #1
 8001f18:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8001f1a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f1e:	4619      	mov	r1, r3
 8001f20:	4895      	ldr	r0, [pc, #596]	; (8002178 <MX_GPIO_Init+0x87c>)
 8001f22:	f000 fc91 	bl	8002848 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8001f26:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001f2c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001f30:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f32:	2300      	movs	r3, #0
 8001f34:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8001f36:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f3a:	4619      	mov	r1, r3
 8001f3c:	488f      	ldr	r0, [pc, #572]	; (800217c <MX_GPIO_Init+0x880>)
 8001f3e:	f000 fc83 	bl	8002848 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_RX_D0_Pin ARDUINO_TX_D1_Pin */
  GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8001f42:	23c0      	movs	r3, #192	; 0xc0
 8001f44:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f46:	2302      	movs	r3, #2
 8001f48:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f4e:	2303      	movs	r3, #3
 8001f50:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001f52:	2308      	movs	r3, #8
 8001f54:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f56:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f5a:	4619      	mov	r1, r3
 8001f5c:	4888      	ldr	r0, [pc, #544]	; (8002180 <MX_GPIO_Init+0x884>)
 8001f5e:	f000 fc73 	bl	8002848 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8001f62:	2310      	movs	r3, #16
 8001f64:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f66:	2302      	movs	r3, #2
 8001f68:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f6e:	2303      	movs	r3, #3
 8001f70:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001f72:	230a      	movs	r3, #10
 8001f74:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8001f76:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	4881      	ldr	r0, [pc, #516]	; (8002184 <MX_GPIO_Init+0x888>)
 8001f7e:	f000 fc63 	bl	8002848 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNME_Pin FMC_SDNE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8001f82:	2328      	movs	r3, #40	; 0x28
 8001f84:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f86:	2302      	movs	r3, #2
 8001f88:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f8e:	2303      	movs	r3, #3
 8001f90:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001f92:	230c      	movs	r3, #12
 8001f94:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001f96:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f9a:	4619      	mov	r1, r3
 8001f9c:	4879      	ldr	r0, [pc, #484]	; (8002184 <MX_GPIO_Init+0x888>)
 8001f9e:	f000 fc53 	bl	8002848 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8001fa2:	23c8      	movs	r3, #200	; 0xc8
 8001fa4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001faa:	2300      	movs	r3, #0
 8001fac:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001fb2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001fb6:	4619      	mov	r1, r3
 8001fb8:	4873      	ldr	r0, [pc, #460]	; (8002188 <MX_GPIO_Init+0x88c>)
 8001fba:	f000 fc45 	bl	8002848 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_A4_Pin ARDUINO_A5_Pin ARDUINO_A1_Pin ARDUINO_A2_Pin
                           ARDUINO_A3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8001fbe:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8001fc2:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ARDUINO_A3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001fc4:	2303      	movs	r3, #3
 8001fc6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001fcc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001fd0:	4619      	mov	r1, r3
 8001fd2:	486e      	ldr	r0, [pc, #440]	; (800218c <MX_GPIO_Init+0x890>)
 8001fd4:	f000 fc38 	bl	8002848 <HAL_GPIO_Init>

  /*Configure GPIO pin : FMC_SDCKE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8001fd8:	2308      	movs	r3, #8
 8001fda:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fdc:	2302      	movs	r3, #2
 8001fde:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fe4:	2303      	movs	r3, #3
 8001fe6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001fe8:	230c      	movs	r3, #12
 8001fea:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8001fec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ff0:	4619      	mov	r1, r3
 8001ff2:	4863      	ldr	r0, [pc, #396]	; (8002180 <MX_GPIO_Init+0x884>)
 8001ff4:	f000 fc28 	bl	8002848 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8001ff8:	2305      	movs	r3, #5
 8001ffa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ffc:	2302      	movs	r3, #2
 8001ffe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002000:	2300      	movs	r3, #0
 8002002:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002004:	2303      	movs	r3, #3
 8002006:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002008:	230a      	movs	r3, #10
 800200a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800200c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002010:	4619      	mov	r1, r3
 8002012:	485b      	ldr	r0, [pc, #364]	; (8002180 <MX_GPIO_Init+0x884>)
 8002014:	f000 fc18 	bl	8002848 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8002018:	2332      	movs	r3, #50	; 0x32
 800201a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800201c:	2302      	movs	r3, #2
 800201e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002020:	2300      	movs	r3, #0
 8002022:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002024:	2303      	movs	r3, #3
 8002026:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002028:	230b      	movs	r3, #11
 800202a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800202c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002030:	4619      	mov	r1, r3
 8002032:	4853      	ldr	r0, [pc, #332]	; (8002180 <MX_GPIO_Init+0x884>)
 8002034:	f000 fc08 	bl	8002848 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002038:	2304      	movs	r3, #4
 800203a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800203c:	2302      	movs	r3, #2
 800203e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002040:	2300      	movs	r3, #0
 8002042:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002044:	2303      	movs	r3, #3
 8002046:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002048:	2309      	movs	r3, #9
 800204a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800204c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002050:	4619      	mov	r1, r3
 8002052:	484f      	ldr	r0, [pc, #316]	; (8002190 <MX_GPIO_Init+0x894>)
 8002054:	f000 fbf8 	bl	8002848 <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8002058:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800205c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800205e:	2302      	movs	r3, #2
 8002060:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002062:	2300      	movs	r3, #0
 8002064:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002066:	2303      	movs	r3, #3
 8002068:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800206a:	2309      	movs	r3, #9
 800206c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800206e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002072:	4619      	mov	r1, r3
 8002074:	4847      	ldr	r0, [pc, #284]	; (8002194 <MX_GPIO_Init+0x898>)
 8002076:	f000 fbe7 	bl	8002848 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 800207a:	2304      	movs	r3, #4
 800207c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800207e:	2300      	movs	r3, #0
 8002080:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002082:	2300      	movs	r3, #0
 8002084:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8002086:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800208a:	4619      	mov	r1, r3
 800208c:	483e      	ldr	r0, [pc, #248]	; (8002188 <MX_GPIO_Init+0x88c>)
 800208e:	f000 fbdb 	bl	8002848 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8002092:	2386      	movs	r3, #134	; 0x86
 8002094:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002096:	2302      	movs	r3, #2
 8002098:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800209a:	2300      	movs	r3, #0
 800209c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800209e:	2303      	movs	r3, #3
 80020a0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80020a2:	230b      	movs	r3, #11
 80020a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80020aa:	4619      	mov	r1, r3
 80020ac:	4832      	ldr	r0, [pc, #200]	; (8002178 <MX_GPIO_Init+0x87c>)
 80020ae:	f000 fbcb 	bl	8002848 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_A0_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 80020b2:	2301      	movs	r3, #1
 80020b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80020b6:	2303      	movs	r3, #3
 80020b8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ba:	2300      	movs	r3, #0
 80020bc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 80020be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80020c2:	4619      	mov	r1, r3
 80020c4:	482c      	ldr	r0, [pc, #176]	; (8002178 <MX_GPIO_Init+0x87c>)
 80020c6:	f000 fbbf 	bl	8002848 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_HSYNC_Pin PA6 */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 80020ca:	2350      	movs	r3, #80	; 0x50
 80020cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ce:	2302      	movs	r3, #2
 80020d0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d2:	2300      	movs	r3, #0
 80020d4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020d6:	2300      	movs	r3, #0
 80020d8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80020da:	230d      	movs	r3, #13
 80020dc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020de:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80020e2:	4619      	mov	r1, r3
 80020e4:	4824      	ldr	r0, [pc, #144]	; (8002178 <MX_GPIO_Init+0x87c>)
 80020e6:	f000 fbaf 	bl	8002848 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_SCL_Pin LCD_SDA_Pin */
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 80020ea:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80020ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020f0:	2312      	movs	r3, #18
 80020f2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f4:	2300      	movs	r3, #0
 80020f6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020f8:	2303      	movs	r3, #3
 80020fa:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80020fc:	2304      	movs	r3, #4
 80020fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002100:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002104:	4619      	mov	r1, r3
 8002106:	481f      	ldr	r0, [pc, #124]	; (8002184 <MX_GPIO_Init+0x888>)
 8002108:	f000 fb9e 	bl	8002848 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 800210c:	2328      	movs	r3, #40	; 0x28
 800210e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002110:	2302      	movs	r3, #2
 8002112:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002114:	2300      	movs	r3, #0
 8002116:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002118:	2303      	movs	r3, #3
 800211a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800211c:	230a      	movs	r3, #10
 800211e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002120:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002124:	4619      	mov	r1, r3
 8002126:	4814      	ldr	r0, [pc, #80]	; (8002178 <MX_GPIO_Init+0x87c>)
 8002128:	f000 fb8e 	bl	8002848 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D6_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 800212c:	2340      	movs	r3, #64	; 0x40
 800212e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002130:	2302      	movs	r3, #2
 8002132:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002134:	2300      	movs	r3, #0
 8002136:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002138:	2300      	movs	r3, #0
 800213a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 800213c:	2309      	movs	r3, #9
 800213e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8002140:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002144:	4619      	mov	r1, r3
 8002146:	480f      	ldr	r0, [pc, #60]	; (8002184 <MX_GPIO_Init+0x888>)
 8002148:	f000 fb7e 	bl	8002848 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 800214c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002150:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002152:	2302      	movs	r3, #2
 8002154:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002156:	2300      	movs	r3, #0
 8002158:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800215a:	2300      	movs	r3, #0
 800215c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800215e:	2305      	movs	r3, #5
 8002160:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002162:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002166:	4619      	mov	r1, r3
 8002168:	4809      	ldr	r0, [pc, #36]	; (8002190 <MX_GPIO_Init+0x894>)
 800216a:	f000 fb6d 	bl	8002848 <HAL_GPIO_Init>

}
 800216e:	bf00      	nop
 8002170:	3740      	adds	r7, #64	; 0x40
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	40020000 	.word	0x40020000
 800217c:	40022000 	.word	0x40022000
 8002180:	40020800 	.word	0x40020800
 8002184:	40021c00 	.word	0x40021c00
 8002188:	40021800 	.word	0x40021800
 800218c:	40021400 	.word	0x40021400
 8002190:	40020400 	.word	0x40020400
 8002194:	40020c00 	.word	0x40020c00

08002198 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002198:	b480      	push	{r7}
 800219a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800219c:	b672      	cpsid	i
}
 800219e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80021a0:	e7fe      	b.n	80021a0 <Error_Handler+0x8>
	...

080021a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b083      	sub	sp, #12
 80021a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80021aa:	4b0f      	ldr	r3, [pc, #60]	; (80021e8 <HAL_MspInit+0x44>)
 80021ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ae:	4a0e      	ldr	r2, [pc, #56]	; (80021e8 <HAL_MspInit+0x44>)
 80021b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021b4:	6413      	str	r3, [r2, #64]	; 0x40
 80021b6:	4b0c      	ldr	r3, [pc, #48]	; (80021e8 <HAL_MspInit+0x44>)
 80021b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021be:	607b      	str	r3, [r7, #4]
 80021c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021c2:	4b09      	ldr	r3, [pc, #36]	; (80021e8 <HAL_MspInit+0x44>)
 80021c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021c6:	4a08      	ldr	r2, [pc, #32]	; (80021e8 <HAL_MspInit+0x44>)
 80021c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021cc:	6453      	str	r3, [r2, #68]	; 0x44
 80021ce:	4b06      	ldr	r3, [pc, #24]	; (80021e8 <HAL_MspInit+0x44>)
 80021d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021d6:	603b      	str	r3, [r7, #0]
 80021d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021da:	bf00      	nop
 80021dc:	370c      	adds	r7, #12
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr
 80021e6:	bf00      	nop
 80021e8:	40023800 	.word	0x40023800

080021ec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b0aa      	sub	sp, #168	; 0xa8
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021f4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80021f8:	2200      	movs	r2, #0
 80021fa:	601a      	str	r2, [r3, #0]
 80021fc:	605a      	str	r2, [r3, #4]
 80021fe:	609a      	str	r2, [r3, #8]
 8002200:	60da      	str	r2, [r3, #12]
 8002202:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002204:	f107 0310 	add.w	r3, r7, #16
 8002208:	2284      	movs	r2, #132	; 0x84
 800220a:	2100      	movs	r1, #0
 800220c:	4618      	mov	r0, r3
 800220e:	f004 fd0d 	bl	8006c2c <memset>
  if(hi2c->Instance==I2C1)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a22      	ldr	r2, [pc, #136]	; (80022a0 <HAL_I2C_MspInit+0xb4>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d13c      	bne.n	8002296 <HAL_I2C_MspInit+0xaa>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800221c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002220:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002222:	2300      	movs	r3, #0
 8002224:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002226:	f107 0310 	add.w	r3, r7, #16
 800222a:	4618      	mov	r0, r3
 800222c:	f001 ff48 	bl	80040c0 <HAL_RCCEx_PeriphCLKConfig>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	d001      	beq.n	800223a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8002236:	f7ff ffaf 	bl	8002198 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800223a:	4b1a      	ldr	r3, [pc, #104]	; (80022a4 <HAL_I2C_MspInit+0xb8>)
 800223c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800223e:	4a19      	ldr	r2, [pc, #100]	; (80022a4 <HAL_I2C_MspInit+0xb8>)
 8002240:	f043 0302 	orr.w	r3, r3, #2
 8002244:	6313      	str	r3, [r2, #48]	; 0x30
 8002246:	4b17      	ldr	r3, [pc, #92]	; (80022a4 <HAL_I2C_MspInit+0xb8>)
 8002248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224a:	f003 0302 	and.w	r3, r3, #2
 800224e:	60fb      	str	r3, [r7, #12]
 8002250:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8002252:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002256:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800225a:	2312      	movs	r3, #18
 800225c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002260:	2300      	movs	r3, #0
 8002262:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002266:	2300      	movs	r3, #0
 8002268:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800226c:	2304      	movs	r3, #4
 800226e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002272:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002276:	4619      	mov	r1, r3
 8002278:	480b      	ldr	r0, [pc, #44]	; (80022a8 <HAL_I2C_MspInit+0xbc>)
 800227a:	f000 fae5 	bl	8002848 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800227e:	4b09      	ldr	r3, [pc, #36]	; (80022a4 <HAL_I2C_MspInit+0xb8>)
 8002280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002282:	4a08      	ldr	r2, [pc, #32]	; (80022a4 <HAL_I2C_MspInit+0xb8>)
 8002284:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002288:	6413      	str	r3, [r2, #64]	; 0x40
 800228a:	4b06      	ldr	r3, [pc, #24]	; (80022a4 <HAL_I2C_MspInit+0xb8>)
 800228c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002292:	60bb      	str	r3, [r7, #8]
 8002294:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002296:	bf00      	nop
 8002298:	37a8      	adds	r7, #168	; 0xa8
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	40005400 	.word	0x40005400
 80022a4:	40023800 	.word	0x40023800
 80022a8:	40020400 	.word	0x40020400

080022ac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b08a      	sub	sp, #40	; 0x28
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022b4:	f107 0314 	add.w	r3, r7, #20
 80022b8:	2200      	movs	r2, #0
 80022ba:	601a      	str	r2, [r3, #0]
 80022bc:	605a      	str	r2, [r3, #4]
 80022be:	609a      	str	r2, [r3, #8]
 80022c0:	60da      	str	r2, [r3, #12]
 80022c2:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022cc:	d130      	bne.n	8002330 <HAL_TIM_Base_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80022ce:	4b1a      	ldr	r3, [pc, #104]	; (8002338 <HAL_TIM_Base_MspInit+0x8c>)
 80022d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d2:	4a19      	ldr	r2, [pc, #100]	; (8002338 <HAL_TIM_Base_MspInit+0x8c>)
 80022d4:	f043 0301 	orr.w	r3, r3, #1
 80022d8:	6413      	str	r3, [r2, #64]	; 0x40
 80022da:	4b17      	ldr	r3, [pc, #92]	; (8002338 <HAL_TIM_Base_MspInit+0x8c>)
 80022dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022de:	f003 0301 	and.w	r3, r3, #1
 80022e2:	613b      	str	r3, [r7, #16]
 80022e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022e6:	4b14      	ldr	r3, [pc, #80]	; (8002338 <HAL_TIM_Base_MspInit+0x8c>)
 80022e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ea:	4a13      	ldr	r2, [pc, #76]	; (8002338 <HAL_TIM_Base_MspInit+0x8c>)
 80022ec:	f043 0301 	orr.w	r3, r3, #1
 80022f0:	6313      	str	r3, [r2, #48]	; 0x30
 80022f2:	4b11      	ldr	r3, [pc, #68]	; (8002338 <HAL_TIM_Base_MspInit+0x8c>)
 80022f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f6:	f003 0301 	and.w	r3, r3, #1
 80022fa:	60fb      	str	r3, [r7, #12]
 80022fc:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 80022fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002302:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002304:	2302      	movs	r3, #2
 8002306:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002308:	2300      	movs	r3, #0
 800230a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800230c:	2300      	movs	r3, #0
 800230e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002310:	2301      	movs	r3, #1
 8002312:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8002314:	f107 0314 	add.w	r3, r7, #20
 8002318:	4619      	mov	r1, r3
 800231a:	4808      	ldr	r0, [pc, #32]	; (800233c <HAL_TIM_Base_MspInit+0x90>)
 800231c:	f000 fa94 	bl	8002848 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8002320:	2200      	movs	r2, #0
 8002322:	2101      	movs	r1, #1
 8002324:	201c      	movs	r0, #28
 8002326:	f000 fa58 	bl	80027da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800232a:	201c      	movs	r0, #28
 800232c:	f000 fa71 	bl	8002812 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002330:	bf00      	nop
 8002332:	3728      	adds	r7, #40	; 0x28
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}
 8002338:	40023800 	.word	0x40023800
 800233c:	40020000 	.word	0x40020000

08002340 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b0ac      	sub	sp, #176	; 0xb0
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002348:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800234c:	2200      	movs	r2, #0
 800234e:	601a      	str	r2, [r3, #0]
 8002350:	605a      	str	r2, [r3, #4]
 8002352:	609a      	str	r2, [r3, #8]
 8002354:	60da      	str	r2, [r3, #12]
 8002356:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002358:	f107 0318 	add.w	r3, r7, #24
 800235c:	2284      	movs	r2, #132	; 0x84
 800235e:	2100      	movs	r1, #0
 8002360:	4618      	mov	r0, r3
 8002362:	f004 fc63 	bl	8006c2c <memset>
  if(huart->Instance==USART1)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a32      	ldr	r2, [pc, #200]	; (8002434 <HAL_UART_MspInit+0xf4>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d15c      	bne.n	800242a <HAL_UART_MspInit+0xea>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002370:	2340      	movs	r3, #64	; 0x40
 8002372:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002374:	2300      	movs	r3, #0
 8002376:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002378:	f107 0318 	add.w	r3, r7, #24
 800237c:	4618      	mov	r0, r3
 800237e:	f001 fe9f 	bl	80040c0 <HAL_RCCEx_PeriphCLKConfig>
 8002382:	4603      	mov	r3, r0
 8002384:	2b00      	cmp	r3, #0
 8002386:	d001      	beq.n	800238c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002388:	f7ff ff06 	bl	8002198 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800238c:	4b2a      	ldr	r3, [pc, #168]	; (8002438 <HAL_UART_MspInit+0xf8>)
 800238e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002390:	4a29      	ldr	r2, [pc, #164]	; (8002438 <HAL_UART_MspInit+0xf8>)
 8002392:	f043 0310 	orr.w	r3, r3, #16
 8002396:	6453      	str	r3, [r2, #68]	; 0x44
 8002398:	4b27      	ldr	r3, [pc, #156]	; (8002438 <HAL_UART_MspInit+0xf8>)
 800239a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800239c:	f003 0310 	and.w	r3, r3, #16
 80023a0:	617b      	str	r3, [r7, #20]
 80023a2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023a4:	4b24      	ldr	r3, [pc, #144]	; (8002438 <HAL_UART_MspInit+0xf8>)
 80023a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a8:	4a23      	ldr	r2, [pc, #140]	; (8002438 <HAL_UART_MspInit+0xf8>)
 80023aa:	f043 0302 	orr.w	r3, r3, #2
 80023ae:	6313      	str	r3, [r2, #48]	; 0x30
 80023b0:	4b21      	ldr	r3, [pc, #132]	; (8002438 <HAL_UART_MspInit+0xf8>)
 80023b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b4:	f003 0302 	and.w	r3, r3, #2
 80023b8:	613b      	str	r3, [r7, #16]
 80023ba:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023bc:	4b1e      	ldr	r3, [pc, #120]	; (8002438 <HAL_UART_MspInit+0xf8>)
 80023be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c0:	4a1d      	ldr	r2, [pc, #116]	; (8002438 <HAL_UART_MspInit+0xf8>)
 80023c2:	f043 0301 	orr.w	r3, r3, #1
 80023c6:	6313      	str	r3, [r2, #48]	; 0x30
 80023c8:	4b1b      	ldr	r3, [pc, #108]	; (8002438 <HAL_UART_MspInit+0xf8>)
 80023ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023cc:	f003 0301 	and.w	r3, r3, #1
 80023d0:	60fb      	str	r3, [r7, #12]
 80023d2:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80023d4:	2380      	movs	r3, #128	; 0x80
 80023d6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023da:	2302      	movs	r3, #2
 80023dc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e0:	2300      	movs	r3, #0
 80023e2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023e6:	2300      	movs	r3, #0
 80023e8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80023ec:	2307      	movs	r3, #7
 80023ee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80023f2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80023f6:	4619      	mov	r1, r3
 80023f8:	4810      	ldr	r0, [pc, #64]	; (800243c <HAL_UART_MspInit+0xfc>)
 80023fa:	f000 fa25 	bl	8002848 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80023fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002402:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002406:	2302      	movs	r3, #2
 8002408:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800240c:	2300      	movs	r3, #0
 800240e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002412:	2300      	movs	r3, #0
 8002414:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002418:	2307      	movs	r3, #7
 800241a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 800241e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002422:	4619      	mov	r1, r3
 8002424:	4806      	ldr	r0, [pc, #24]	; (8002440 <HAL_UART_MspInit+0x100>)
 8002426:	f000 fa0f 	bl	8002848 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800242a:	bf00      	nop
 800242c:	37b0      	adds	r7, #176	; 0xb0
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop
 8002434:	40011000 	.word	0x40011000
 8002438:	40023800 	.word	0x40023800
 800243c:	40020400 	.word	0x40020400
 8002440:	40020000 	.word	0x40020000

08002444 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002444:	b480      	push	{r7}
 8002446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002448:	e7fe      	b.n	8002448 <NMI_Handler+0x4>

0800244a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800244a:	b480      	push	{r7}
 800244c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800244e:	e7fe      	b.n	800244e <HardFault_Handler+0x4>

08002450 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002450:	b480      	push	{r7}
 8002452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002454:	e7fe      	b.n	8002454 <MemManage_Handler+0x4>

08002456 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002456:	b480      	push	{r7}
 8002458:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800245a:	e7fe      	b.n	800245a <BusFault_Handler+0x4>

0800245c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800245c:	b480      	push	{r7}
 800245e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002460:	e7fe      	b.n	8002460 <UsageFault_Handler+0x4>

08002462 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002462:	b480      	push	{r7}
 8002464:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002466:	bf00      	nop
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr

08002470 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002470:	b480      	push	{r7}
 8002472:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002474:	bf00      	nop
 8002476:	46bd      	mov	sp, r7
 8002478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247c:	4770      	bx	lr

0800247e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800247e:	b480      	push	{r7}
 8002480:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002482:	bf00      	nop
 8002484:	46bd      	mov	sp, r7
 8002486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248a:	4770      	bx	lr

0800248c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002490:	f000 f884 	bl	800259c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002494:	bf00      	nop
 8002496:	bd80      	pop	{r7, pc}

08002498 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800249c:	4802      	ldr	r0, [pc, #8]	; (80024a8 <TIM2_IRQHandler+0x10>)
 800249e:	f002 facf 	bl	8004a40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80024a2:	bf00      	nop
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	200008d0 	.word	0x200008d0

080024ac <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80024ac:	b480      	push	{r7}
 80024ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80024b0:	4b06      	ldr	r3, [pc, #24]	; (80024cc <SystemInit+0x20>)
 80024b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024b6:	4a05      	ldr	r2, [pc, #20]	; (80024cc <SystemInit+0x20>)
 80024b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80024bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80024c0:	bf00      	nop
 80024c2:	46bd      	mov	sp, r7
 80024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c8:	4770      	bx	lr
 80024ca:	bf00      	nop
 80024cc:	e000ed00 	.word	0xe000ed00

080024d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80024d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002508 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80024d4:	480d      	ldr	r0, [pc, #52]	; (800250c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80024d6:	490e      	ldr	r1, [pc, #56]	; (8002510 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80024d8:	4a0e      	ldr	r2, [pc, #56]	; (8002514 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80024da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024dc:	e002      	b.n	80024e4 <LoopCopyDataInit>

080024de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024e2:	3304      	adds	r3, #4

080024e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024e8:	d3f9      	bcc.n	80024de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024ea:	4a0b      	ldr	r2, [pc, #44]	; (8002518 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80024ec:	4c0b      	ldr	r4, [pc, #44]	; (800251c <LoopFillZerobss+0x26>)
  movs r3, #0
 80024ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024f0:	e001      	b.n	80024f6 <LoopFillZerobss>

080024f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024f4:	3204      	adds	r2, #4

080024f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024f8:	d3fb      	bcc.n	80024f2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80024fa:	f7ff ffd7 	bl	80024ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80024fe:	f004 fb71 	bl	8006be4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002502:	f7ff f8a3 	bl	800164c <main>
  bx  lr    
 8002506:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002508:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800250c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002510:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8002514:	0801a180 	.word	0x0801a180
  ldr r2, =_sbss
 8002518:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800251c:	20000920 	.word	0x20000920

08002520 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002520:	e7fe      	b.n	8002520 <ADC_IRQHandler>

08002522 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002522:	b580      	push	{r7, lr}
 8002524:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002526:	2003      	movs	r0, #3
 8002528:	f000 f94c 	bl	80027c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800252c:	2000      	movs	r0, #0
 800252e:	f000 f805 	bl	800253c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002532:	f7ff fe37 	bl	80021a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002536:	2300      	movs	r3, #0
}
 8002538:	4618      	mov	r0, r3
 800253a:	bd80      	pop	{r7, pc}

0800253c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b082      	sub	sp, #8
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002544:	4b12      	ldr	r3, [pc, #72]	; (8002590 <HAL_InitTick+0x54>)
 8002546:	681a      	ldr	r2, [r3, #0]
 8002548:	4b12      	ldr	r3, [pc, #72]	; (8002594 <HAL_InitTick+0x58>)
 800254a:	781b      	ldrb	r3, [r3, #0]
 800254c:	4619      	mov	r1, r3
 800254e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002552:	fbb3 f3f1 	udiv	r3, r3, r1
 8002556:	fbb2 f3f3 	udiv	r3, r2, r3
 800255a:	4618      	mov	r0, r3
 800255c:	f000 f967 	bl	800282e <HAL_SYSTICK_Config>
 8002560:	4603      	mov	r3, r0
 8002562:	2b00      	cmp	r3, #0
 8002564:	d001      	beq.n	800256a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	e00e      	b.n	8002588 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2b0f      	cmp	r3, #15
 800256e:	d80a      	bhi.n	8002586 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002570:	2200      	movs	r2, #0
 8002572:	6879      	ldr	r1, [r7, #4]
 8002574:	f04f 30ff 	mov.w	r0, #4294967295
 8002578:	f000 f92f 	bl	80027da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800257c:	4a06      	ldr	r2, [pc, #24]	; (8002598 <HAL_InitTick+0x5c>)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002582:	2300      	movs	r3, #0
 8002584:	e000      	b.n	8002588 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002586:	2301      	movs	r3, #1
}
 8002588:	4618      	mov	r0, r3
 800258a:	3708      	adds	r7, #8
 800258c:	46bd      	mov	sp, r7
 800258e:	bd80      	pop	{r7, pc}
 8002590:	20000000 	.word	0x20000000
 8002594:	20000008 	.word	0x20000008
 8002598:	20000004 	.word	0x20000004

0800259c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800259c:	b480      	push	{r7}
 800259e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025a0:	4b06      	ldr	r3, [pc, #24]	; (80025bc <HAL_IncTick+0x20>)
 80025a2:	781b      	ldrb	r3, [r3, #0]
 80025a4:	461a      	mov	r2, r3
 80025a6:	4b06      	ldr	r3, [pc, #24]	; (80025c0 <HAL_IncTick+0x24>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4413      	add	r3, r2
 80025ac:	4a04      	ldr	r2, [pc, #16]	; (80025c0 <HAL_IncTick+0x24>)
 80025ae:	6013      	str	r3, [r2, #0]
}
 80025b0:	bf00      	nop
 80025b2:	46bd      	mov	sp, r7
 80025b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b8:	4770      	bx	lr
 80025ba:	bf00      	nop
 80025bc:	20000008 	.word	0x20000008
 80025c0:	2000091c 	.word	0x2000091c

080025c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025c4:	b480      	push	{r7}
 80025c6:	af00      	add	r7, sp, #0
  return uwTick;
 80025c8:	4b03      	ldr	r3, [pc, #12]	; (80025d8 <HAL_GetTick+0x14>)
 80025ca:	681b      	ldr	r3, [r3, #0]
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	46bd      	mov	sp, r7
 80025d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d4:	4770      	bx	lr
 80025d6:	bf00      	nop
 80025d8:	2000091c 	.word	0x2000091c

080025dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b084      	sub	sp, #16
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80025e4:	f7ff ffee 	bl	80025c4 <HAL_GetTick>
 80025e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025f4:	d005      	beq.n	8002602 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80025f6:	4b0a      	ldr	r3, [pc, #40]	; (8002620 <HAL_Delay+0x44>)
 80025f8:	781b      	ldrb	r3, [r3, #0]
 80025fa:	461a      	mov	r2, r3
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	4413      	add	r3, r2
 8002600:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002602:	bf00      	nop
 8002604:	f7ff ffde 	bl	80025c4 <HAL_GetTick>
 8002608:	4602      	mov	r2, r0
 800260a:	68bb      	ldr	r3, [r7, #8]
 800260c:	1ad3      	subs	r3, r2, r3
 800260e:	68fa      	ldr	r2, [r7, #12]
 8002610:	429a      	cmp	r2, r3
 8002612:	d8f7      	bhi.n	8002604 <HAL_Delay+0x28>
  {
  }
}
 8002614:	bf00      	nop
 8002616:	bf00      	nop
 8002618:	3710      	adds	r7, #16
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}
 800261e:	bf00      	nop
 8002620:	20000008 	.word	0x20000008

08002624 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002624:	b480      	push	{r7}
 8002626:	b085      	sub	sp, #20
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	f003 0307 	and.w	r3, r3, #7
 8002632:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002634:	4b0b      	ldr	r3, [pc, #44]	; (8002664 <__NVIC_SetPriorityGrouping+0x40>)
 8002636:	68db      	ldr	r3, [r3, #12]
 8002638:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800263a:	68ba      	ldr	r2, [r7, #8]
 800263c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002640:	4013      	ands	r3, r2
 8002642:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800264c:	4b06      	ldr	r3, [pc, #24]	; (8002668 <__NVIC_SetPriorityGrouping+0x44>)
 800264e:	4313      	orrs	r3, r2
 8002650:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002652:	4a04      	ldr	r2, [pc, #16]	; (8002664 <__NVIC_SetPriorityGrouping+0x40>)
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	60d3      	str	r3, [r2, #12]
}
 8002658:	bf00      	nop
 800265a:	3714      	adds	r7, #20
 800265c:	46bd      	mov	sp, r7
 800265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002662:	4770      	bx	lr
 8002664:	e000ed00 	.word	0xe000ed00
 8002668:	05fa0000 	.word	0x05fa0000

0800266c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800266c:	b480      	push	{r7}
 800266e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002670:	4b04      	ldr	r3, [pc, #16]	; (8002684 <__NVIC_GetPriorityGrouping+0x18>)
 8002672:	68db      	ldr	r3, [r3, #12]
 8002674:	0a1b      	lsrs	r3, r3, #8
 8002676:	f003 0307 	and.w	r3, r3, #7
}
 800267a:	4618      	mov	r0, r3
 800267c:	46bd      	mov	sp, r7
 800267e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002682:	4770      	bx	lr
 8002684:	e000ed00 	.word	0xe000ed00

08002688 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002688:	b480      	push	{r7}
 800268a:	b083      	sub	sp, #12
 800268c:	af00      	add	r7, sp, #0
 800268e:	4603      	mov	r3, r0
 8002690:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002692:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002696:	2b00      	cmp	r3, #0
 8002698:	db0b      	blt.n	80026b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800269a:	79fb      	ldrb	r3, [r7, #7]
 800269c:	f003 021f 	and.w	r2, r3, #31
 80026a0:	4907      	ldr	r1, [pc, #28]	; (80026c0 <__NVIC_EnableIRQ+0x38>)
 80026a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026a6:	095b      	lsrs	r3, r3, #5
 80026a8:	2001      	movs	r0, #1
 80026aa:	fa00 f202 	lsl.w	r2, r0, r2
 80026ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80026b2:	bf00      	nop
 80026b4:	370c      	adds	r7, #12
 80026b6:	46bd      	mov	sp, r7
 80026b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026bc:	4770      	bx	lr
 80026be:	bf00      	nop
 80026c0:	e000e100 	.word	0xe000e100

080026c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b083      	sub	sp, #12
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	4603      	mov	r3, r0
 80026cc:	6039      	str	r1, [r7, #0]
 80026ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	db0a      	blt.n	80026ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	b2da      	uxtb	r2, r3
 80026dc:	490c      	ldr	r1, [pc, #48]	; (8002710 <__NVIC_SetPriority+0x4c>)
 80026de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026e2:	0112      	lsls	r2, r2, #4
 80026e4:	b2d2      	uxtb	r2, r2
 80026e6:	440b      	add	r3, r1
 80026e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026ec:	e00a      	b.n	8002704 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	b2da      	uxtb	r2, r3
 80026f2:	4908      	ldr	r1, [pc, #32]	; (8002714 <__NVIC_SetPriority+0x50>)
 80026f4:	79fb      	ldrb	r3, [r7, #7]
 80026f6:	f003 030f 	and.w	r3, r3, #15
 80026fa:	3b04      	subs	r3, #4
 80026fc:	0112      	lsls	r2, r2, #4
 80026fe:	b2d2      	uxtb	r2, r2
 8002700:	440b      	add	r3, r1
 8002702:	761a      	strb	r2, [r3, #24]
}
 8002704:	bf00      	nop
 8002706:	370c      	adds	r7, #12
 8002708:	46bd      	mov	sp, r7
 800270a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270e:	4770      	bx	lr
 8002710:	e000e100 	.word	0xe000e100
 8002714:	e000ed00 	.word	0xe000ed00

08002718 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002718:	b480      	push	{r7}
 800271a:	b089      	sub	sp, #36	; 0x24
 800271c:	af00      	add	r7, sp, #0
 800271e:	60f8      	str	r0, [r7, #12]
 8002720:	60b9      	str	r1, [r7, #8]
 8002722:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	f003 0307 	and.w	r3, r3, #7
 800272a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800272c:	69fb      	ldr	r3, [r7, #28]
 800272e:	f1c3 0307 	rsb	r3, r3, #7
 8002732:	2b04      	cmp	r3, #4
 8002734:	bf28      	it	cs
 8002736:	2304      	movcs	r3, #4
 8002738:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800273a:	69fb      	ldr	r3, [r7, #28]
 800273c:	3304      	adds	r3, #4
 800273e:	2b06      	cmp	r3, #6
 8002740:	d902      	bls.n	8002748 <NVIC_EncodePriority+0x30>
 8002742:	69fb      	ldr	r3, [r7, #28]
 8002744:	3b03      	subs	r3, #3
 8002746:	e000      	b.n	800274a <NVIC_EncodePriority+0x32>
 8002748:	2300      	movs	r3, #0
 800274a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800274c:	f04f 32ff 	mov.w	r2, #4294967295
 8002750:	69bb      	ldr	r3, [r7, #24]
 8002752:	fa02 f303 	lsl.w	r3, r2, r3
 8002756:	43da      	mvns	r2, r3
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	401a      	ands	r2, r3
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002760:	f04f 31ff 	mov.w	r1, #4294967295
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	fa01 f303 	lsl.w	r3, r1, r3
 800276a:	43d9      	mvns	r1, r3
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002770:	4313      	orrs	r3, r2
         );
}
 8002772:	4618      	mov	r0, r3
 8002774:	3724      	adds	r7, #36	; 0x24
 8002776:	46bd      	mov	sp, r7
 8002778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277c:	4770      	bx	lr
	...

08002780 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b082      	sub	sp, #8
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	3b01      	subs	r3, #1
 800278c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002790:	d301      	bcc.n	8002796 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002792:	2301      	movs	r3, #1
 8002794:	e00f      	b.n	80027b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002796:	4a0a      	ldr	r2, [pc, #40]	; (80027c0 <SysTick_Config+0x40>)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	3b01      	subs	r3, #1
 800279c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800279e:	210f      	movs	r1, #15
 80027a0:	f04f 30ff 	mov.w	r0, #4294967295
 80027a4:	f7ff ff8e 	bl	80026c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027a8:	4b05      	ldr	r3, [pc, #20]	; (80027c0 <SysTick_Config+0x40>)
 80027aa:	2200      	movs	r2, #0
 80027ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027ae:	4b04      	ldr	r3, [pc, #16]	; (80027c0 <SysTick_Config+0x40>)
 80027b0:	2207      	movs	r2, #7
 80027b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027b4:	2300      	movs	r3, #0
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	3708      	adds	r7, #8
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	bf00      	nop
 80027c0:	e000e010 	.word	0xe000e010

080027c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b082      	sub	sp, #8
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027cc:	6878      	ldr	r0, [r7, #4]
 80027ce:	f7ff ff29 	bl	8002624 <__NVIC_SetPriorityGrouping>
}
 80027d2:	bf00      	nop
 80027d4:	3708      	adds	r7, #8
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}

080027da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80027da:	b580      	push	{r7, lr}
 80027dc:	b086      	sub	sp, #24
 80027de:	af00      	add	r7, sp, #0
 80027e0:	4603      	mov	r3, r0
 80027e2:	60b9      	str	r1, [r7, #8]
 80027e4:	607a      	str	r2, [r7, #4]
 80027e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80027e8:	2300      	movs	r3, #0
 80027ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80027ec:	f7ff ff3e 	bl	800266c <__NVIC_GetPriorityGrouping>
 80027f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027f2:	687a      	ldr	r2, [r7, #4]
 80027f4:	68b9      	ldr	r1, [r7, #8]
 80027f6:	6978      	ldr	r0, [r7, #20]
 80027f8:	f7ff ff8e 	bl	8002718 <NVIC_EncodePriority>
 80027fc:	4602      	mov	r2, r0
 80027fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002802:	4611      	mov	r1, r2
 8002804:	4618      	mov	r0, r3
 8002806:	f7ff ff5d 	bl	80026c4 <__NVIC_SetPriority>
}
 800280a:	bf00      	nop
 800280c:	3718      	adds	r7, #24
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}

08002812 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002812:	b580      	push	{r7, lr}
 8002814:	b082      	sub	sp, #8
 8002816:	af00      	add	r7, sp, #0
 8002818:	4603      	mov	r3, r0
 800281a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800281c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002820:	4618      	mov	r0, r3
 8002822:	f7ff ff31 	bl	8002688 <__NVIC_EnableIRQ>
}
 8002826:	bf00      	nop
 8002828:	3708      	adds	r7, #8
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}

0800282e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800282e:	b580      	push	{r7, lr}
 8002830:	b082      	sub	sp, #8
 8002832:	af00      	add	r7, sp, #0
 8002834:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002836:	6878      	ldr	r0, [r7, #4]
 8002838:	f7ff ffa2 	bl	8002780 <SysTick_Config>
 800283c:	4603      	mov	r3, r0
}
 800283e:	4618      	mov	r0, r3
 8002840:	3708      	adds	r7, #8
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}
	...

08002848 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002848:	b480      	push	{r7}
 800284a:	b089      	sub	sp, #36	; 0x24
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
 8002850:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002852:	2300      	movs	r3, #0
 8002854:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002856:	2300      	movs	r3, #0
 8002858:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800285a:	2300      	movs	r3, #0
 800285c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800285e:	2300      	movs	r3, #0
 8002860:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002862:	2300      	movs	r3, #0
 8002864:	61fb      	str	r3, [r7, #28]
 8002866:	e175      	b.n	8002b54 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002868:	2201      	movs	r2, #1
 800286a:	69fb      	ldr	r3, [r7, #28]
 800286c:	fa02 f303 	lsl.w	r3, r2, r3
 8002870:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	697a      	ldr	r2, [r7, #20]
 8002878:	4013      	ands	r3, r2
 800287a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800287c:	693a      	ldr	r2, [r7, #16]
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	429a      	cmp	r2, r3
 8002882:	f040 8164 	bne.w	8002b4e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	f003 0303 	and.w	r3, r3, #3
 800288e:	2b01      	cmp	r3, #1
 8002890:	d005      	beq.n	800289e <HAL_GPIO_Init+0x56>
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	f003 0303 	and.w	r3, r3, #3
 800289a:	2b02      	cmp	r3, #2
 800289c:	d130      	bne.n	8002900 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80028a4:	69fb      	ldr	r3, [r7, #28]
 80028a6:	005b      	lsls	r3, r3, #1
 80028a8:	2203      	movs	r2, #3
 80028aa:	fa02 f303 	lsl.w	r3, r2, r3
 80028ae:	43db      	mvns	r3, r3
 80028b0:	69ba      	ldr	r2, [r7, #24]
 80028b2:	4013      	ands	r3, r2
 80028b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	68da      	ldr	r2, [r3, #12]
 80028ba:	69fb      	ldr	r3, [r7, #28]
 80028bc:	005b      	lsls	r3, r3, #1
 80028be:	fa02 f303 	lsl.w	r3, r2, r3
 80028c2:	69ba      	ldr	r2, [r7, #24]
 80028c4:	4313      	orrs	r3, r2
 80028c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	69ba      	ldr	r2, [r7, #24]
 80028cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028d4:	2201      	movs	r2, #1
 80028d6:	69fb      	ldr	r3, [r7, #28]
 80028d8:	fa02 f303 	lsl.w	r3, r2, r3
 80028dc:	43db      	mvns	r3, r3
 80028de:	69ba      	ldr	r2, [r7, #24]
 80028e0:	4013      	ands	r3, r2
 80028e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	091b      	lsrs	r3, r3, #4
 80028ea:	f003 0201 	and.w	r2, r3, #1
 80028ee:	69fb      	ldr	r3, [r7, #28]
 80028f0:	fa02 f303 	lsl.w	r3, r2, r3
 80028f4:	69ba      	ldr	r2, [r7, #24]
 80028f6:	4313      	orrs	r3, r2
 80028f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	69ba      	ldr	r2, [r7, #24]
 80028fe:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	f003 0303 	and.w	r3, r3, #3
 8002908:	2b03      	cmp	r3, #3
 800290a:	d017      	beq.n	800293c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	68db      	ldr	r3, [r3, #12]
 8002910:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002912:	69fb      	ldr	r3, [r7, #28]
 8002914:	005b      	lsls	r3, r3, #1
 8002916:	2203      	movs	r2, #3
 8002918:	fa02 f303 	lsl.w	r3, r2, r3
 800291c:	43db      	mvns	r3, r3
 800291e:	69ba      	ldr	r2, [r7, #24]
 8002920:	4013      	ands	r3, r2
 8002922:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	689a      	ldr	r2, [r3, #8]
 8002928:	69fb      	ldr	r3, [r7, #28]
 800292a:	005b      	lsls	r3, r3, #1
 800292c:	fa02 f303 	lsl.w	r3, r2, r3
 8002930:	69ba      	ldr	r2, [r7, #24]
 8002932:	4313      	orrs	r3, r2
 8002934:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	69ba      	ldr	r2, [r7, #24]
 800293a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	f003 0303 	and.w	r3, r3, #3
 8002944:	2b02      	cmp	r3, #2
 8002946:	d123      	bne.n	8002990 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002948:	69fb      	ldr	r3, [r7, #28]
 800294a:	08da      	lsrs	r2, r3, #3
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	3208      	adds	r2, #8
 8002950:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002954:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002956:	69fb      	ldr	r3, [r7, #28]
 8002958:	f003 0307 	and.w	r3, r3, #7
 800295c:	009b      	lsls	r3, r3, #2
 800295e:	220f      	movs	r2, #15
 8002960:	fa02 f303 	lsl.w	r3, r2, r3
 8002964:	43db      	mvns	r3, r3
 8002966:	69ba      	ldr	r2, [r7, #24]
 8002968:	4013      	ands	r3, r2
 800296a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	691a      	ldr	r2, [r3, #16]
 8002970:	69fb      	ldr	r3, [r7, #28]
 8002972:	f003 0307 	and.w	r3, r3, #7
 8002976:	009b      	lsls	r3, r3, #2
 8002978:	fa02 f303 	lsl.w	r3, r2, r3
 800297c:	69ba      	ldr	r2, [r7, #24]
 800297e:	4313      	orrs	r3, r2
 8002980:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002982:	69fb      	ldr	r3, [r7, #28]
 8002984:	08da      	lsrs	r2, r3, #3
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	3208      	adds	r2, #8
 800298a:	69b9      	ldr	r1, [r7, #24]
 800298c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002996:	69fb      	ldr	r3, [r7, #28]
 8002998:	005b      	lsls	r3, r3, #1
 800299a:	2203      	movs	r2, #3
 800299c:	fa02 f303 	lsl.w	r3, r2, r3
 80029a0:	43db      	mvns	r3, r3
 80029a2:	69ba      	ldr	r2, [r7, #24]
 80029a4:	4013      	ands	r3, r2
 80029a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	f003 0203 	and.w	r2, r3, #3
 80029b0:	69fb      	ldr	r3, [r7, #28]
 80029b2:	005b      	lsls	r3, r3, #1
 80029b4:	fa02 f303 	lsl.w	r3, r2, r3
 80029b8:	69ba      	ldr	r2, [r7, #24]
 80029ba:	4313      	orrs	r3, r2
 80029bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	69ba      	ldr	r2, [r7, #24]
 80029c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	f000 80be 	beq.w	8002b4e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029d2:	4b66      	ldr	r3, [pc, #408]	; (8002b6c <HAL_GPIO_Init+0x324>)
 80029d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029d6:	4a65      	ldr	r2, [pc, #404]	; (8002b6c <HAL_GPIO_Init+0x324>)
 80029d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029dc:	6453      	str	r3, [r2, #68]	; 0x44
 80029de:	4b63      	ldr	r3, [pc, #396]	; (8002b6c <HAL_GPIO_Init+0x324>)
 80029e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029e6:	60fb      	str	r3, [r7, #12]
 80029e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80029ea:	4a61      	ldr	r2, [pc, #388]	; (8002b70 <HAL_GPIO_Init+0x328>)
 80029ec:	69fb      	ldr	r3, [r7, #28]
 80029ee:	089b      	lsrs	r3, r3, #2
 80029f0:	3302      	adds	r3, #2
 80029f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80029f8:	69fb      	ldr	r3, [r7, #28]
 80029fa:	f003 0303 	and.w	r3, r3, #3
 80029fe:	009b      	lsls	r3, r3, #2
 8002a00:	220f      	movs	r2, #15
 8002a02:	fa02 f303 	lsl.w	r3, r2, r3
 8002a06:	43db      	mvns	r3, r3
 8002a08:	69ba      	ldr	r2, [r7, #24]
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	4a58      	ldr	r2, [pc, #352]	; (8002b74 <HAL_GPIO_Init+0x32c>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d037      	beq.n	8002a86 <HAL_GPIO_Init+0x23e>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	4a57      	ldr	r2, [pc, #348]	; (8002b78 <HAL_GPIO_Init+0x330>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d031      	beq.n	8002a82 <HAL_GPIO_Init+0x23a>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	4a56      	ldr	r2, [pc, #344]	; (8002b7c <HAL_GPIO_Init+0x334>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d02b      	beq.n	8002a7e <HAL_GPIO_Init+0x236>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	4a55      	ldr	r2, [pc, #340]	; (8002b80 <HAL_GPIO_Init+0x338>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d025      	beq.n	8002a7a <HAL_GPIO_Init+0x232>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	4a54      	ldr	r2, [pc, #336]	; (8002b84 <HAL_GPIO_Init+0x33c>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d01f      	beq.n	8002a76 <HAL_GPIO_Init+0x22e>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	4a53      	ldr	r2, [pc, #332]	; (8002b88 <HAL_GPIO_Init+0x340>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d019      	beq.n	8002a72 <HAL_GPIO_Init+0x22a>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	4a52      	ldr	r2, [pc, #328]	; (8002b8c <HAL_GPIO_Init+0x344>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d013      	beq.n	8002a6e <HAL_GPIO_Init+0x226>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	4a51      	ldr	r2, [pc, #324]	; (8002b90 <HAL_GPIO_Init+0x348>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d00d      	beq.n	8002a6a <HAL_GPIO_Init+0x222>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	4a50      	ldr	r2, [pc, #320]	; (8002b94 <HAL_GPIO_Init+0x34c>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d007      	beq.n	8002a66 <HAL_GPIO_Init+0x21e>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	4a4f      	ldr	r2, [pc, #316]	; (8002b98 <HAL_GPIO_Init+0x350>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d101      	bne.n	8002a62 <HAL_GPIO_Init+0x21a>
 8002a5e:	2309      	movs	r3, #9
 8002a60:	e012      	b.n	8002a88 <HAL_GPIO_Init+0x240>
 8002a62:	230a      	movs	r3, #10
 8002a64:	e010      	b.n	8002a88 <HAL_GPIO_Init+0x240>
 8002a66:	2308      	movs	r3, #8
 8002a68:	e00e      	b.n	8002a88 <HAL_GPIO_Init+0x240>
 8002a6a:	2307      	movs	r3, #7
 8002a6c:	e00c      	b.n	8002a88 <HAL_GPIO_Init+0x240>
 8002a6e:	2306      	movs	r3, #6
 8002a70:	e00a      	b.n	8002a88 <HAL_GPIO_Init+0x240>
 8002a72:	2305      	movs	r3, #5
 8002a74:	e008      	b.n	8002a88 <HAL_GPIO_Init+0x240>
 8002a76:	2304      	movs	r3, #4
 8002a78:	e006      	b.n	8002a88 <HAL_GPIO_Init+0x240>
 8002a7a:	2303      	movs	r3, #3
 8002a7c:	e004      	b.n	8002a88 <HAL_GPIO_Init+0x240>
 8002a7e:	2302      	movs	r3, #2
 8002a80:	e002      	b.n	8002a88 <HAL_GPIO_Init+0x240>
 8002a82:	2301      	movs	r3, #1
 8002a84:	e000      	b.n	8002a88 <HAL_GPIO_Init+0x240>
 8002a86:	2300      	movs	r3, #0
 8002a88:	69fa      	ldr	r2, [r7, #28]
 8002a8a:	f002 0203 	and.w	r2, r2, #3
 8002a8e:	0092      	lsls	r2, r2, #2
 8002a90:	4093      	lsls	r3, r2
 8002a92:	69ba      	ldr	r2, [r7, #24]
 8002a94:	4313      	orrs	r3, r2
 8002a96:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002a98:	4935      	ldr	r1, [pc, #212]	; (8002b70 <HAL_GPIO_Init+0x328>)
 8002a9a:	69fb      	ldr	r3, [r7, #28]
 8002a9c:	089b      	lsrs	r3, r3, #2
 8002a9e:	3302      	adds	r3, #2
 8002aa0:	69ba      	ldr	r2, [r7, #24]
 8002aa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002aa6:	4b3d      	ldr	r3, [pc, #244]	; (8002b9c <HAL_GPIO_Init+0x354>)
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002aac:	693b      	ldr	r3, [r7, #16]
 8002aae:	43db      	mvns	r3, r3
 8002ab0:	69ba      	ldr	r2, [r7, #24]
 8002ab2:	4013      	ands	r3, r2
 8002ab4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d003      	beq.n	8002aca <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002ac2:	69ba      	ldr	r2, [r7, #24]
 8002ac4:	693b      	ldr	r3, [r7, #16]
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002aca:	4a34      	ldr	r2, [pc, #208]	; (8002b9c <HAL_GPIO_Init+0x354>)
 8002acc:	69bb      	ldr	r3, [r7, #24]
 8002ace:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ad0:	4b32      	ldr	r3, [pc, #200]	; (8002b9c <HAL_GPIO_Init+0x354>)
 8002ad2:	68db      	ldr	r3, [r3, #12]
 8002ad4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	43db      	mvns	r3, r3
 8002ada:	69ba      	ldr	r2, [r7, #24]
 8002adc:	4013      	ands	r3, r2
 8002ade:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d003      	beq.n	8002af4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002aec:	69ba      	ldr	r2, [r7, #24]
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	4313      	orrs	r3, r2
 8002af2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002af4:	4a29      	ldr	r2, [pc, #164]	; (8002b9c <HAL_GPIO_Init+0x354>)
 8002af6:	69bb      	ldr	r3, [r7, #24]
 8002af8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002afa:	4b28      	ldr	r3, [pc, #160]	; (8002b9c <HAL_GPIO_Init+0x354>)
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	43db      	mvns	r3, r3
 8002b04:	69ba      	ldr	r2, [r7, #24]
 8002b06:	4013      	ands	r3, r2
 8002b08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d003      	beq.n	8002b1e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002b16:	69ba      	ldr	r2, [r7, #24]
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b1e:	4a1f      	ldr	r2, [pc, #124]	; (8002b9c <HAL_GPIO_Init+0x354>)
 8002b20:	69bb      	ldr	r3, [r7, #24]
 8002b22:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b24:	4b1d      	ldr	r3, [pc, #116]	; (8002b9c <HAL_GPIO_Init+0x354>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	43db      	mvns	r3, r3
 8002b2e:	69ba      	ldr	r2, [r7, #24]
 8002b30:	4013      	ands	r3, r2
 8002b32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d003      	beq.n	8002b48 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002b40:	69ba      	ldr	r2, [r7, #24]
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	4313      	orrs	r3, r2
 8002b46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b48:	4a14      	ldr	r2, [pc, #80]	; (8002b9c <HAL_GPIO_Init+0x354>)
 8002b4a:	69bb      	ldr	r3, [r7, #24]
 8002b4c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002b4e:	69fb      	ldr	r3, [r7, #28]
 8002b50:	3301      	adds	r3, #1
 8002b52:	61fb      	str	r3, [r7, #28]
 8002b54:	69fb      	ldr	r3, [r7, #28]
 8002b56:	2b0f      	cmp	r3, #15
 8002b58:	f67f ae86 	bls.w	8002868 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002b5c:	bf00      	nop
 8002b5e:	bf00      	nop
 8002b60:	3724      	adds	r7, #36	; 0x24
 8002b62:	46bd      	mov	sp, r7
 8002b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b68:	4770      	bx	lr
 8002b6a:	bf00      	nop
 8002b6c:	40023800 	.word	0x40023800
 8002b70:	40013800 	.word	0x40013800
 8002b74:	40020000 	.word	0x40020000
 8002b78:	40020400 	.word	0x40020400
 8002b7c:	40020800 	.word	0x40020800
 8002b80:	40020c00 	.word	0x40020c00
 8002b84:	40021000 	.word	0x40021000
 8002b88:	40021400 	.word	0x40021400
 8002b8c:	40021800 	.word	0x40021800
 8002b90:	40021c00 	.word	0x40021c00
 8002b94:	40022000 	.word	0x40022000
 8002b98:	40022400 	.word	0x40022400
 8002b9c:	40013c00 	.word	0x40013c00

08002ba0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b083      	sub	sp, #12
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
 8002ba8:	460b      	mov	r3, r1
 8002baa:	807b      	strh	r3, [r7, #2]
 8002bac:	4613      	mov	r3, r2
 8002bae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002bb0:	787b      	ldrb	r3, [r7, #1]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d003      	beq.n	8002bbe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002bb6:	887a      	ldrh	r2, [r7, #2]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002bbc:	e003      	b.n	8002bc6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002bbe:	887b      	ldrh	r3, [r7, #2]
 8002bc0:	041a      	lsls	r2, r3, #16
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	619a      	str	r2, [r3, #24]
}
 8002bc6:	bf00      	nop
 8002bc8:	370c      	adds	r7, #12
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd0:	4770      	bx	lr
	...

08002bd4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b082      	sub	sp, #8
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d101      	bne.n	8002be6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	e07f      	b.n	8002ce6 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d106      	bne.n	8002c00 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	f7ff faf6 	bl	80021ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2224      	movs	r2, #36	; 0x24
 8002c04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	681a      	ldr	r2, [r3, #0]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f022 0201 	bic.w	r2, r2, #1
 8002c16:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	685a      	ldr	r2, [r3, #4]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002c24:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	689a      	ldr	r2, [r3, #8]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c34:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	68db      	ldr	r3, [r3, #12]
 8002c3a:	2b01      	cmp	r3, #1
 8002c3c:	d107      	bne.n	8002c4e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	689a      	ldr	r2, [r3, #8]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c4a:	609a      	str	r2, [r3, #8]
 8002c4c:	e006      	b.n	8002c5c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	689a      	ldr	r2, [r3, #8]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002c5a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	68db      	ldr	r3, [r3, #12]
 8002c60:	2b02      	cmp	r3, #2
 8002c62:	d104      	bne.n	8002c6e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002c6c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	6859      	ldr	r1, [r3, #4]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	4b1d      	ldr	r3, [pc, #116]	; (8002cf0 <HAL_I2C_Init+0x11c>)
 8002c7a:	430b      	orrs	r3, r1
 8002c7c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	68da      	ldr	r2, [r3, #12]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c8c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	691a      	ldr	r2, [r3, #16]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	695b      	ldr	r3, [r3, #20]
 8002c96:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	699b      	ldr	r3, [r3, #24]
 8002c9e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	430a      	orrs	r2, r1
 8002ca6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	69d9      	ldr	r1, [r3, #28]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6a1a      	ldr	r2, [r3, #32]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	430a      	orrs	r2, r1
 8002cb6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	681a      	ldr	r2, [r3, #0]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f042 0201 	orr.w	r2, r2, #1
 8002cc6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2220      	movs	r2, #32
 8002cd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002ce4:	2300      	movs	r3, #0
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	3708      	adds	r7, #8
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}
 8002cee:	bf00      	nop
 8002cf0:	02008000 	.word	0x02008000

08002cf4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b088      	sub	sp, #32
 8002cf8:	af02      	add	r7, sp, #8
 8002cfa:	60f8      	str	r0, [r7, #12]
 8002cfc:	4608      	mov	r0, r1
 8002cfe:	4611      	mov	r1, r2
 8002d00:	461a      	mov	r2, r3
 8002d02:	4603      	mov	r3, r0
 8002d04:	817b      	strh	r3, [r7, #10]
 8002d06:	460b      	mov	r3, r1
 8002d08:	813b      	strh	r3, [r7, #8]
 8002d0a:	4613      	mov	r3, r2
 8002d0c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d14:	b2db      	uxtb	r3, r3
 8002d16:	2b20      	cmp	r3, #32
 8002d18:	f040 80f9 	bne.w	8002f0e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d1c:	6a3b      	ldr	r3, [r7, #32]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d002      	beq.n	8002d28 <HAL_I2C_Mem_Write+0x34>
 8002d22:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d105      	bne.n	8002d34 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d2e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	e0ed      	b.n	8002f10 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d3a:	2b01      	cmp	r3, #1
 8002d3c:	d101      	bne.n	8002d42 <HAL_I2C_Mem_Write+0x4e>
 8002d3e:	2302      	movs	r3, #2
 8002d40:	e0e6      	b.n	8002f10 <HAL_I2C_Mem_Write+0x21c>
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	2201      	movs	r2, #1
 8002d46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002d4a:	f7ff fc3b 	bl	80025c4 <HAL_GetTick>
 8002d4e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	9300      	str	r3, [sp, #0]
 8002d54:	2319      	movs	r3, #25
 8002d56:	2201      	movs	r2, #1
 8002d58:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002d5c:	68f8      	ldr	r0, [r7, #12]
 8002d5e:	f000 fac3 	bl	80032e8 <I2C_WaitOnFlagUntilTimeout>
 8002d62:	4603      	mov	r3, r0
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d001      	beq.n	8002d6c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e0d1      	b.n	8002f10 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	2221      	movs	r2, #33	; 0x21
 8002d70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	2240      	movs	r2, #64	; 0x40
 8002d78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	6a3a      	ldr	r2, [r7, #32]
 8002d86:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002d8c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	2200      	movs	r2, #0
 8002d92:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002d94:	88f8      	ldrh	r0, [r7, #6]
 8002d96:	893a      	ldrh	r2, [r7, #8]
 8002d98:	8979      	ldrh	r1, [r7, #10]
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	9301      	str	r3, [sp, #4]
 8002d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002da0:	9300      	str	r3, [sp, #0]
 8002da2:	4603      	mov	r3, r0
 8002da4:	68f8      	ldr	r0, [r7, #12]
 8002da6:	f000 f9d3 	bl	8003150 <I2C_RequestMemoryWrite>
 8002daa:	4603      	mov	r3, r0
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d005      	beq.n	8002dbc <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2200      	movs	r2, #0
 8002db4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	e0a9      	b.n	8002f10 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dc0:	b29b      	uxth	r3, r3
 8002dc2:	2bff      	cmp	r3, #255	; 0xff
 8002dc4:	d90e      	bls.n	8002de4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	22ff      	movs	r2, #255	; 0xff
 8002dca:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dd0:	b2da      	uxtb	r2, r3
 8002dd2:	8979      	ldrh	r1, [r7, #10]
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	9300      	str	r3, [sp, #0]
 8002dd8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002ddc:	68f8      	ldr	r0, [r7, #12]
 8002dde:	f000 fc2b 	bl	8003638 <I2C_TransferConfig>
 8002de2:	e00f      	b.n	8002e04 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002de8:	b29a      	uxth	r2, r3
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002df2:	b2da      	uxtb	r2, r3
 8002df4:	8979      	ldrh	r1, [r7, #10]
 8002df6:	2300      	movs	r3, #0
 8002df8:	9300      	str	r3, [sp, #0]
 8002dfa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002dfe:	68f8      	ldr	r0, [r7, #12]
 8002e00:	f000 fc1a 	bl	8003638 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e04:	697a      	ldr	r2, [r7, #20]
 8002e06:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002e08:	68f8      	ldr	r0, [r7, #12]
 8002e0a:	f000 faad 	bl	8003368 <I2C_WaitOnTXISFlagUntilTimeout>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d001      	beq.n	8002e18 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002e14:	2301      	movs	r3, #1
 8002e16:	e07b      	b.n	8002f10 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e1c:	781a      	ldrb	r2, [r3, #0]
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e28:	1c5a      	adds	r2, r3, #1
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e32:	b29b      	uxth	r3, r3
 8002e34:	3b01      	subs	r3, #1
 8002e36:	b29a      	uxth	r2, r3
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e40:	3b01      	subs	r3, #1
 8002e42:	b29a      	uxth	r2, r3
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e4c:	b29b      	uxth	r3, r3
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d034      	beq.n	8002ebc <HAL_I2C_Mem_Write+0x1c8>
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d130      	bne.n	8002ebc <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	9300      	str	r3, [sp, #0]
 8002e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e60:	2200      	movs	r2, #0
 8002e62:	2180      	movs	r1, #128	; 0x80
 8002e64:	68f8      	ldr	r0, [r7, #12]
 8002e66:	f000 fa3f 	bl	80032e8 <I2C_WaitOnFlagUntilTimeout>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d001      	beq.n	8002e74 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	e04d      	b.n	8002f10 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e78:	b29b      	uxth	r3, r3
 8002e7a:	2bff      	cmp	r3, #255	; 0xff
 8002e7c:	d90e      	bls.n	8002e9c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	22ff      	movs	r2, #255	; 0xff
 8002e82:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e88:	b2da      	uxtb	r2, r3
 8002e8a:	8979      	ldrh	r1, [r7, #10]
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	9300      	str	r3, [sp, #0]
 8002e90:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002e94:	68f8      	ldr	r0, [r7, #12]
 8002e96:	f000 fbcf 	bl	8003638 <I2C_TransferConfig>
 8002e9a:	e00f      	b.n	8002ebc <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ea0:	b29a      	uxth	r2, r3
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002eaa:	b2da      	uxtb	r2, r3
 8002eac:	8979      	ldrh	r1, [r7, #10]
 8002eae:	2300      	movs	r3, #0
 8002eb0:	9300      	str	r3, [sp, #0]
 8002eb2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002eb6:	68f8      	ldr	r0, [r7, #12]
 8002eb8:	f000 fbbe 	bl	8003638 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ec0:	b29b      	uxth	r3, r3
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d19e      	bne.n	8002e04 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ec6:	697a      	ldr	r2, [r7, #20]
 8002ec8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002eca:	68f8      	ldr	r0, [r7, #12]
 8002ecc:	f000 fa8c 	bl	80033e8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d001      	beq.n	8002eda <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e01a      	b.n	8002f10 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	2220      	movs	r2, #32
 8002ee0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	6859      	ldr	r1, [r3, #4]
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681a      	ldr	r2, [r3, #0]
 8002eec:	4b0a      	ldr	r3, [pc, #40]	; (8002f18 <HAL_I2C_Mem_Write+0x224>)
 8002eee:	400b      	ands	r3, r1
 8002ef0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2220      	movs	r2, #32
 8002ef6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	2200      	movs	r2, #0
 8002efe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	2200      	movs	r2, #0
 8002f06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	e000      	b.n	8002f10 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002f0e:	2302      	movs	r3, #2
  }
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	3718      	adds	r7, #24
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}
 8002f18:	fe00e800 	.word	0xfe00e800

08002f1c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b088      	sub	sp, #32
 8002f20:	af02      	add	r7, sp, #8
 8002f22:	60f8      	str	r0, [r7, #12]
 8002f24:	4608      	mov	r0, r1
 8002f26:	4611      	mov	r1, r2
 8002f28:	461a      	mov	r2, r3
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	817b      	strh	r3, [r7, #10]
 8002f2e:	460b      	mov	r3, r1
 8002f30:	813b      	strh	r3, [r7, #8]
 8002f32:	4613      	mov	r3, r2
 8002f34:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f3c:	b2db      	uxtb	r3, r3
 8002f3e:	2b20      	cmp	r3, #32
 8002f40:	f040 80fd 	bne.w	800313e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f44:	6a3b      	ldr	r3, [r7, #32]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d002      	beq.n	8002f50 <HAL_I2C_Mem_Read+0x34>
 8002f4a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d105      	bne.n	8002f5c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f56:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	e0f1      	b.n	8003140 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f62:	2b01      	cmp	r3, #1
 8002f64:	d101      	bne.n	8002f6a <HAL_I2C_Mem_Read+0x4e>
 8002f66:	2302      	movs	r3, #2
 8002f68:	e0ea      	b.n	8003140 <HAL_I2C_Mem_Read+0x224>
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002f72:	f7ff fb27 	bl	80025c4 <HAL_GetTick>
 8002f76:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	9300      	str	r3, [sp, #0]
 8002f7c:	2319      	movs	r3, #25
 8002f7e:	2201      	movs	r2, #1
 8002f80:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002f84:	68f8      	ldr	r0, [r7, #12]
 8002f86:	f000 f9af 	bl	80032e8 <I2C_WaitOnFlagUntilTimeout>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d001      	beq.n	8002f94 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
 8002f92:	e0d5      	b.n	8003140 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	2222      	movs	r2, #34	; 0x22
 8002f98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	2240      	movs	r2, #64	; 0x40
 8002fa0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	6a3a      	ldr	r2, [r7, #32]
 8002fae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002fb4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002fbc:	88f8      	ldrh	r0, [r7, #6]
 8002fbe:	893a      	ldrh	r2, [r7, #8]
 8002fc0:	8979      	ldrh	r1, [r7, #10]
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	9301      	str	r3, [sp, #4]
 8002fc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fc8:	9300      	str	r3, [sp, #0]
 8002fca:	4603      	mov	r3, r0
 8002fcc:	68f8      	ldr	r0, [r7, #12]
 8002fce:	f000 f913 	bl	80031f8 <I2C_RequestMemoryRead>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d005      	beq.n	8002fe4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	e0ad      	b.n	8003140 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fe8:	b29b      	uxth	r3, r3
 8002fea:	2bff      	cmp	r3, #255	; 0xff
 8002fec:	d90e      	bls.n	800300c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	22ff      	movs	r2, #255	; 0xff
 8002ff2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ff8:	b2da      	uxtb	r2, r3
 8002ffa:	8979      	ldrh	r1, [r7, #10]
 8002ffc:	4b52      	ldr	r3, [pc, #328]	; (8003148 <HAL_I2C_Mem_Read+0x22c>)
 8002ffe:	9300      	str	r3, [sp, #0]
 8003000:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003004:	68f8      	ldr	r0, [r7, #12]
 8003006:	f000 fb17 	bl	8003638 <I2C_TransferConfig>
 800300a:	e00f      	b.n	800302c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003010:	b29a      	uxth	r2, r3
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800301a:	b2da      	uxtb	r2, r3
 800301c:	8979      	ldrh	r1, [r7, #10]
 800301e:	4b4a      	ldr	r3, [pc, #296]	; (8003148 <HAL_I2C_Mem_Read+0x22c>)
 8003020:	9300      	str	r3, [sp, #0]
 8003022:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003026:	68f8      	ldr	r0, [r7, #12]
 8003028:	f000 fb06 	bl	8003638 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	9300      	str	r3, [sp, #0]
 8003030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003032:	2200      	movs	r2, #0
 8003034:	2104      	movs	r1, #4
 8003036:	68f8      	ldr	r0, [r7, #12]
 8003038:	f000 f956 	bl	80032e8 <I2C_WaitOnFlagUntilTimeout>
 800303c:	4603      	mov	r3, r0
 800303e:	2b00      	cmp	r3, #0
 8003040:	d001      	beq.n	8003046 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	e07c      	b.n	8003140 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003050:	b2d2      	uxtb	r2, r2
 8003052:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003058:	1c5a      	adds	r2, r3, #1
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003062:	3b01      	subs	r3, #1
 8003064:	b29a      	uxth	r2, r3
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800306e:	b29b      	uxth	r3, r3
 8003070:	3b01      	subs	r3, #1
 8003072:	b29a      	uxth	r2, r3
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800307c:	b29b      	uxth	r3, r3
 800307e:	2b00      	cmp	r3, #0
 8003080:	d034      	beq.n	80030ec <HAL_I2C_Mem_Read+0x1d0>
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003086:	2b00      	cmp	r3, #0
 8003088:	d130      	bne.n	80030ec <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	9300      	str	r3, [sp, #0]
 800308e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003090:	2200      	movs	r2, #0
 8003092:	2180      	movs	r1, #128	; 0x80
 8003094:	68f8      	ldr	r0, [r7, #12]
 8003096:	f000 f927 	bl	80032e8 <I2C_WaitOnFlagUntilTimeout>
 800309a:	4603      	mov	r3, r0
 800309c:	2b00      	cmp	r3, #0
 800309e:	d001      	beq.n	80030a4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80030a0:	2301      	movs	r3, #1
 80030a2:	e04d      	b.n	8003140 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030a8:	b29b      	uxth	r3, r3
 80030aa:	2bff      	cmp	r3, #255	; 0xff
 80030ac:	d90e      	bls.n	80030cc <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	22ff      	movs	r2, #255	; 0xff
 80030b2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030b8:	b2da      	uxtb	r2, r3
 80030ba:	8979      	ldrh	r1, [r7, #10]
 80030bc:	2300      	movs	r3, #0
 80030be:	9300      	str	r3, [sp, #0]
 80030c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80030c4:	68f8      	ldr	r0, [r7, #12]
 80030c6:	f000 fab7 	bl	8003638 <I2C_TransferConfig>
 80030ca:	e00f      	b.n	80030ec <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030d0:	b29a      	uxth	r2, r3
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030da:	b2da      	uxtb	r2, r3
 80030dc:	8979      	ldrh	r1, [r7, #10]
 80030de:	2300      	movs	r3, #0
 80030e0:	9300      	str	r3, [sp, #0]
 80030e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80030e6:	68f8      	ldr	r0, [r7, #12]
 80030e8:	f000 faa6 	bl	8003638 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030f0:	b29b      	uxth	r3, r3
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d19a      	bne.n	800302c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030f6:	697a      	ldr	r2, [r7, #20]
 80030f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80030fa:	68f8      	ldr	r0, [r7, #12]
 80030fc:	f000 f974 	bl	80033e8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003100:	4603      	mov	r3, r0
 8003102:	2b00      	cmp	r3, #0
 8003104:	d001      	beq.n	800310a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	e01a      	b.n	8003140 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	2220      	movs	r2, #32
 8003110:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	6859      	ldr	r1, [r3, #4]
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681a      	ldr	r2, [r3, #0]
 800311c:	4b0b      	ldr	r3, [pc, #44]	; (800314c <HAL_I2C_Mem_Read+0x230>)
 800311e:	400b      	ands	r3, r1
 8003120:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	2220      	movs	r2, #32
 8003126:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	2200      	movs	r2, #0
 800312e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	2200      	movs	r2, #0
 8003136:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800313a:	2300      	movs	r3, #0
 800313c:	e000      	b.n	8003140 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800313e:	2302      	movs	r3, #2
  }
}
 8003140:	4618      	mov	r0, r3
 8003142:	3718      	adds	r7, #24
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}
 8003148:	80002400 	.word	0x80002400
 800314c:	fe00e800 	.word	0xfe00e800

08003150 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b086      	sub	sp, #24
 8003154:	af02      	add	r7, sp, #8
 8003156:	60f8      	str	r0, [r7, #12]
 8003158:	4608      	mov	r0, r1
 800315a:	4611      	mov	r1, r2
 800315c:	461a      	mov	r2, r3
 800315e:	4603      	mov	r3, r0
 8003160:	817b      	strh	r3, [r7, #10]
 8003162:	460b      	mov	r3, r1
 8003164:	813b      	strh	r3, [r7, #8]
 8003166:	4613      	mov	r3, r2
 8003168:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800316a:	88fb      	ldrh	r3, [r7, #6]
 800316c:	b2da      	uxtb	r2, r3
 800316e:	8979      	ldrh	r1, [r7, #10]
 8003170:	4b20      	ldr	r3, [pc, #128]	; (80031f4 <I2C_RequestMemoryWrite+0xa4>)
 8003172:	9300      	str	r3, [sp, #0]
 8003174:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003178:	68f8      	ldr	r0, [r7, #12]
 800317a:	f000 fa5d 	bl	8003638 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800317e:	69fa      	ldr	r2, [r7, #28]
 8003180:	69b9      	ldr	r1, [r7, #24]
 8003182:	68f8      	ldr	r0, [r7, #12]
 8003184:	f000 f8f0 	bl	8003368 <I2C_WaitOnTXISFlagUntilTimeout>
 8003188:	4603      	mov	r3, r0
 800318a:	2b00      	cmp	r3, #0
 800318c:	d001      	beq.n	8003192 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	e02c      	b.n	80031ec <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003192:	88fb      	ldrh	r3, [r7, #6]
 8003194:	2b01      	cmp	r3, #1
 8003196:	d105      	bne.n	80031a4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003198:	893b      	ldrh	r3, [r7, #8]
 800319a:	b2da      	uxtb	r2, r3
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	629a      	str	r2, [r3, #40]	; 0x28
 80031a2:	e015      	b.n	80031d0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80031a4:	893b      	ldrh	r3, [r7, #8]
 80031a6:	0a1b      	lsrs	r3, r3, #8
 80031a8:	b29b      	uxth	r3, r3
 80031aa:	b2da      	uxtb	r2, r3
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80031b2:	69fa      	ldr	r2, [r7, #28]
 80031b4:	69b9      	ldr	r1, [r7, #24]
 80031b6:	68f8      	ldr	r0, [r7, #12]
 80031b8:	f000 f8d6 	bl	8003368 <I2C_WaitOnTXISFlagUntilTimeout>
 80031bc:	4603      	mov	r3, r0
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d001      	beq.n	80031c6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	e012      	b.n	80031ec <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80031c6:	893b      	ldrh	r3, [r7, #8]
 80031c8:	b2da      	uxtb	r2, r3
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80031d0:	69fb      	ldr	r3, [r7, #28]
 80031d2:	9300      	str	r3, [sp, #0]
 80031d4:	69bb      	ldr	r3, [r7, #24]
 80031d6:	2200      	movs	r2, #0
 80031d8:	2180      	movs	r1, #128	; 0x80
 80031da:	68f8      	ldr	r0, [r7, #12]
 80031dc:	f000 f884 	bl	80032e8 <I2C_WaitOnFlagUntilTimeout>
 80031e0:	4603      	mov	r3, r0
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d001      	beq.n	80031ea <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	e000      	b.n	80031ec <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80031ea:	2300      	movs	r3, #0
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	3710      	adds	r7, #16
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}
 80031f4:	80002000 	.word	0x80002000

080031f8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b086      	sub	sp, #24
 80031fc:	af02      	add	r7, sp, #8
 80031fe:	60f8      	str	r0, [r7, #12]
 8003200:	4608      	mov	r0, r1
 8003202:	4611      	mov	r1, r2
 8003204:	461a      	mov	r2, r3
 8003206:	4603      	mov	r3, r0
 8003208:	817b      	strh	r3, [r7, #10]
 800320a:	460b      	mov	r3, r1
 800320c:	813b      	strh	r3, [r7, #8]
 800320e:	4613      	mov	r3, r2
 8003210:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003212:	88fb      	ldrh	r3, [r7, #6]
 8003214:	b2da      	uxtb	r2, r3
 8003216:	8979      	ldrh	r1, [r7, #10]
 8003218:	4b20      	ldr	r3, [pc, #128]	; (800329c <I2C_RequestMemoryRead+0xa4>)
 800321a:	9300      	str	r3, [sp, #0]
 800321c:	2300      	movs	r3, #0
 800321e:	68f8      	ldr	r0, [r7, #12]
 8003220:	f000 fa0a 	bl	8003638 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003224:	69fa      	ldr	r2, [r7, #28]
 8003226:	69b9      	ldr	r1, [r7, #24]
 8003228:	68f8      	ldr	r0, [r7, #12]
 800322a:	f000 f89d 	bl	8003368 <I2C_WaitOnTXISFlagUntilTimeout>
 800322e:	4603      	mov	r3, r0
 8003230:	2b00      	cmp	r3, #0
 8003232:	d001      	beq.n	8003238 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003234:	2301      	movs	r3, #1
 8003236:	e02c      	b.n	8003292 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003238:	88fb      	ldrh	r3, [r7, #6]
 800323a:	2b01      	cmp	r3, #1
 800323c:	d105      	bne.n	800324a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800323e:	893b      	ldrh	r3, [r7, #8]
 8003240:	b2da      	uxtb	r2, r3
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	629a      	str	r2, [r3, #40]	; 0x28
 8003248:	e015      	b.n	8003276 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800324a:	893b      	ldrh	r3, [r7, #8]
 800324c:	0a1b      	lsrs	r3, r3, #8
 800324e:	b29b      	uxth	r3, r3
 8003250:	b2da      	uxtb	r2, r3
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003258:	69fa      	ldr	r2, [r7, #28]
 800325a:	69b9      	ldr	r1, [r7, #24]
 800325c:	68f8      	ldr	r0, [r7, #12]
 800325e:	f000 f883 	bl	8003368 <I2C_WaitOnTXISFlagUntilTimeout>
 8003262:	4603      	mov	r3, r0
 8003264:	2b00      	cmp	r3, #0
 8003266:	d001      	beq.n	800326c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003268:	2301      	movs	r3, #1
 800326a:	e012      	b.n	8003292 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800326c:	893b      	ldrh	r3, [r7, #8]
 800326e:	b2da      	uxtb	r2, r3
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003276:	69fb      	ldr	r3, [r7, #28]
 8003278:	9300      	str	r3, [sp, #0]
 800327a:	69bb      	ldr	r3, [r7, #24]
 800327c:	2200      	movs	r2, #0
 800327e:	2140      	movs	r1, #64	; 0x40
 8003280:	68f8      	ldr	r0, [r7, #12]
 8003282:	f000 f831 	bl	80032e8 <I2C_WaitOnFlagUntilTimeout>
 8003286:	4603      	mov	r3, r0
 8003288:	2b00      	cmp	r3, #0
 800328a:	d001      	beq.n	8003290 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	e000      	b.n	8003292 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003290:	2300      	movs	r3, #0
}
 8003292:	4618      	mov	r0, r3
 8003294:	3710      	adds	r7, #16
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}
 800329a:	bf00      	nop
 800329c:	80002000 	.word	0x80002000

080032a0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b083      	sub	sp, #12
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	699b      	ldr	r3, [r3, #24]
 80032ae:	f003 0302 	and.w	r3, r3, #2
 80032b2:	2b02      	cmp	r3, #2
 80032b4:	d103      	bne.n	80032be <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	2200      	movs	r2, #0
 80032bc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	699b      	ldr	r3, [r3, #24]
 80032c4:	f003 0301 	and.w	r3, r3, #1
 80032c8:	2b01      	cmp	r3, #1
 80032ca:	d007      	beq.n	80032dc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	699a      	ldr	r2, [r3, #24]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f042 0201 	orr.w	r2, r2, #1
 80032da:	619a      	str	r2, [r3, #24]
  }
}
 80032dc:	bf00      	nop
 80032de:	370c      	adds	r7, #12
 80032e0:	46bd      	mov	sp, r7
 80032e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e6:	4770      	bx	lr

080032e8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b084      	sub	sp, #16
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	60f8      	str	r0, [r7, #12]
 80032f0:	60b9      	str	r1, [r7, #8]
 80032f2:	603b      	str	r3, [r7, #0]
 80032f4:	4613      	mov	r3, r2
 80032f6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80032f8:	e022      	b.n	8003340 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003300:	d01e      	beq.n	8003340 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003302:	f7ff f95f 	bl	80025c4 <HAL_GetTick>
 8003306:	4602      	mov	r2, r0
 8003308:	69bb      	ldr	r3, [r7, #24]
 800330a:	1ad3      	subs	r3, r2, r3
 800330c:	683a      	ldr	r2, [r7, #0]
 800330e:	429a      	cmp	r2, r3
 8003310:	d302      	bcc.n	8003318 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d113      	bne.n	8003340 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800331c:	f043 0220 	orr.w	r2, r3, #32
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	2220      	movs	r2, #32
 8003328:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	2200      	movs	r2, #0
 8003330:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	2200      	movs	r2, #0
 8003338:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	e00f      	b.n	8003360 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	699a      	ldr	r2, [r3, #24]
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	4013      	ands	r3, r2
 800334a:	68ba      	ldr	r2, [r7, #8]
 800334c:	429a      	cmp	r2, r3
 800334e:	bf0c      	ite	eq
 8003350:	2301      	moveq	r3, #1
 8003352:	2300      	movne	r3, #0
 8003354:	b2db      	uxtb	r3, r3
 8003356:	461a      	mov	r2, r3
 8003358:	79fb      	ldrb	r3, [r7, #7]
 800335a:	429a      	cmp	r2, r3
 800335c:	d0cd      	beq.n	80032fa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800335e:	2300      	movs	r3, #0
}
 8003360:	4618      	mov	r0, r3
 8003362:	3710      	adds	r7, #16
 8003364:	46bd      	mov	sp, r7
 8003366:	bd80      	pop	{r7, pc}

08003368 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b084      	sub	sp, #16
 800336c:	af00      	add	r7, sp, #0
 800336e:	60f8      	str	r0, [r7, #12]
 8003370:	60b9      	str	r1, [r7, #8]
 8003372:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003374:	e02c      	b.n	80033d0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003376:	687a      	ldr	r2, [r7, #4]
 8003378:	68b9      	ldr	r1, [r7, #8]
 800337a:	68f8      	ldr	r0, [r7, #12]
 800337c:	f000 f870 	bl	8003460 <I2C_IsErrorOccurred>
 8003380:	4603      	mov	r3, r0
 8003382:	2b00      	cmp	r3, #0
 8003384:	d001      	beq.n	800338a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	e02a      	b.n	80033e0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800338a:	68bb      	ldr	r3, [r7, #8]
 800338c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003390:	d01e      	beq.n	80033d0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003392:	f7ff f917 	bl	80025c4 <HAL_GetTick>
 8003396:	4602      	mov	r2, r0
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	1ad3      	subs	r3, r2, r3
 800339c:	68ba      	ldr	r2, [r7, #8]
 800339e:	429a      	cmp	r2, r3
 80033a0:	d302      	bcc.n	80033a8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d113      	bne.n	80033d0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ac:	f043 0220 	orr.w	r2, r3, #32
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	2220      	movs	r2, #32
 80033b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	2200      	movs	r2, #0
 80033c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2200      	movs	r2, #0
 80033c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	e007      	b.n	80033e0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	699b      	ldr	r3, [r3, #24]
 80033d6:	f003 0302 	and.w	r3, r3, #2
 80033da:	2b02      	cmp	r3, #2
 80033dc:	d1cb      	bne.n	8003376 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80033de:	2300      	movs	r3, #0
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	3710      	adds	r7, #16
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}

080033e8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b084      	sub	sp, #16
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	60f8      	str	r0, [r7, #12]
 80033f0:	60b9      	str	r1, [r7, #8]
 80033f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80033f4:	e028      	b.n	8003448 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80033f6:	687a      	ldr	r2, [r7, #4]
 80033f8:	68b9      	ldr	r1, [r7, #8]
 80033fa:	68f8      	ldr	r0, [r7, #12]
 80033fc:	f000 f830 	bl	8003460 <I2C_IsErrorOccurred>
 8003400:	4603      	mov	r3, r0
 8003402:	2b00      	cmp	r3, #0
 8003404:	d001      	beq.n	800340a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	e026      	b.n	8003458 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800340a:	f7ff f8db 	bl	80025c4 <HAL_GetTick>
 800340e:	4602      	mov	r2, r0
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	1ad3      	subs	r3, r2, r3
 8003414:	68ba      	ldr	r2, [r7, #8]
 8003416:	429a      	cmp	r2, r3
 8003418:	d302      	bcc.n	8003420 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d113      	bne.n	8003448 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003424:	f043 0220 	orr.w	r2, r3, #32
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2220      	movs	r2, #32
 8003430:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	2200      	movs	r2, #0
 8003438:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	2200      	movs	r2, #0
 8003440:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	e007      	b.n	8003458 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	699b      	ldr	r3, [r3, #24]
 800344e:	f003 0320 	and.w	r3, r3, #32
 8003452:	2b20      	cmp	r3, #32
 8003454:	d1cf      	bne.n	80033f6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003456:	2300      	movs	r3, #0
}
 8003458:	4618      	mov	r0, r3
 800345a:	3710      	adds	r7, #16
 800345c:	46bd      	mov	sp, r7
 800345e:	bd80      	pop	{r7, pc}

08003460 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b08a      	sub	sp, #40	; 0x28
 8003464:	af00      	add	r7, sp, #0
 8003466:	60f8      	str	r0, [r7, #12]
 8003468:	60b9      	str	r1, [r7, #8]
 800346a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800346c:	2300      	movs	r3, #0
 800346e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	699b      	ldr	r3, [r3, #24]
 8003478:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800347a:	2300      	movs	r3, #0
 800347c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003482:	69bb      	ldr	r3, [r7, #24]
 8003484:	f003 0310 	and.w	r3, r3, #16
 8003488:	2b00      	cmp	r3, #0
 800348a:	d075      	beq.n	8003578 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	2210      	movs	r2, #16
 8003492:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003494:	e056      	b.n	8003544 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	f1b3 3fff 	cmp.w	r3, #4294967295
 800349c:	d052      	beq.n	8003544 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800349e:	f7ff f891 	bl	80025c4 <HAL_GetTick>
 80034a2:	4602      	mov	r2, r0
 80034a4:	69fb      	ldr	r3, [r7, #28]
 80034a6:	1ad3      	subs	r3, r2, r3
 80034a8:	68ba      	ldr	r2, [r7, #8]
 80034aa:	429a      	cmp	r2, r3
 80034ac:	d302      	bcc.n	80034b4 <I2C_IsErrorOccurred+0x54>
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d147      	bne.n	8003544 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034be:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80034c6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	699b      	ldr	r3, [r3, #24]
 80034ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80034d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034d6:	d12e      	bne.n	8003536 <I2C_IsErrorOccurred+0xd6>
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80034de:	d02a      	beq.n	8003536 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80034e0:	7cfb      	ldrb	r3, [r7, #19]
 80034e2:	2b20      	cmp	r3, #32
 80034e4:	d027      	beq.n	8003536 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	685a      	ldr	r2, [r3, #4]
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80034f4:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80034f6:	f7ff f865 	bl	80025c4 <HAL_GetTick>
 80034fa:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80034fc:	e01b      	b.n	8003536 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80034fe:	f7ff f861 	bl	80025c4 <HAL_GetTick>
 8003502:	4602      	mov	r2, r0
 8003504:	69fb      	ldr	r3, [r7, #28]
 8003506:	1ad3      	subs	r3, r2, r3
 8003508:	2b19      	cmp	r3, #25
 800350a:	d914      	bls.n	8003536 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003510:	f043 0220 	orr.w	r2, r3, #32
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2220      	movs	r2, #32
 800351c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2200      	movs	r2, #0
 8003524:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	2200      	movs	r2, #0
 800352c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	699b      	ldr	r3, [r3, #24]
 800353c:	f003 0320 	and.w	r3, r3, #32
 8003540:	2b20      	cmp	r3, #32
 8003542:	d1dc      	bne.n	80034fe <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	699b      	ldr	r3, [r3, #24]
 800354a:	f003 0320 	and.w	r3, r3, #32
 800354e:	2b20      	cmp	r3, #32
 8003550:	d003      	beq.n	800355a <I2C_IsErrorOccurred+0xfa>
 8003552:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003556:	2b00      	cmp	r3, #0
 8003558:	d09d      	beq.n	8003496 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800355a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800355e:	2b00      	cmp	r3, #0
 8003560:	d103      	bne.n	800356a <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	2220      	movs	r2, #32
 8003568:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800356a:	6a3b      	ldr	r3, [r7, #32]
 800356c:	f043 0304 	orr.w	r3, r3, #4
 8003570:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	699b      	ldr	r3, [r3, #24]
 800357e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003580:	69bb      	ldr	r3, [r7, #24]
 8003582:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003586:	2b00      	cmp	r3, #0
 8003588:	d00b      	beq.n	80035a2 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800358a:	6a3b      	ldr	r3, [r7, #32]
 800358c:	f043 0301 	orr.w	r3, r3, #1
 8003590:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f44f 7280 	mov.w	r2, #256	; 0x100
 800359a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800359c:	2301      	movs	r3, #1
 800359e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80035a2:	69bb      	ldr	r3, [r7, #24]
 80035a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d00b      	beq.n	80035c4 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80035ac:	6a3b      	ldr	r3, [r7, #32]
 80035ae:	f043 0308 	orr.w	r3, r3, #8
 80035b2:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80035bc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80035c4:	69bb      	ldr	r3, [r7, #24]
 80035c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d00b      	beq.n	80035e6 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80035ce:	6a3b      	ldr	r3, [r7, #32]
 80035d0:	f043 0302 	orr.w	r3, r3, #2
 80035d4:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035de:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80035e0:	2301      	movs	r3, #1
 80035e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80035e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d01c      	beq.n	8003628 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80035ee:	68f8      	ldr	r0, [r7, #12]
 80035f0:	f7ff fe56 	bl	80032a0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	6859      	ldr	r1, [r3, #4]
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681a      	ldr	r2, [r3, #0]
 80035fe:	4b0d      	ldr	r3, [pc, #52]	; (8003634 <I2C_IsErrorOccurred+0x1d4>)
 8003600:	400b      	ands	r3, r1
 8003602:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003608:	6a3b      	ldr	r3, [r7, #32]
 800360a:	431a      	orrs	r2, r3
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2220      	movs	r2, #32
 8003614:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2200      	movs	r2, #0
 800361c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	2200      	movs	r2, #0
 8003624:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003628:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800362c:	4618      	mov	r0, r3
 800362e:	3728      	adds	r7, #40	; 0x28
 8003630:	46bd      	mov	sp, r7
 8003632:	bd80      	pop	{r7, pc}
 8003634:	fe00e800 	.word	0xfe00e800

08003638 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003638:	b480      	push	{r7}
 800363a:	b087      	sub	sp, #28
 800363c:	af00      	add	r7, sp, #0
 800363e:	60f8      	str	r0, [r7, #12]
 8003640:	607b      	str	r3, [r7, #4]
 8003642:	460b      	mov	r3, r1
 8003644:	817b      	strh	r3, [r7, #10]
 8003646:	4613      	mov	r3, r2
 8003648:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800364a:	897b      	ldrh	r3, [r7, #10]
 800364c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003650:	7a7b      	ldrb	r3, [r7, #9]
 8003652:	041b      	lsls	r3, r3, #16
 8003654:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003658:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800365e:	6a3b      	ldr	r3, [r7, #32]
 8003660:	4313      	orrs	r3, r2
 8003662:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003666:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	685a      	ldr	r2, [r3, #4]
 800366e:	6a3b      	ldr	r3, [r7, #32]
 8003670:	0d5b      	lsrs	r3, r3, #21
 8003672:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003676:	4b08      	ldr	r3, [pc, #32]	; (8003698 <I2C_TransferConfig+0x60>)
 8003678:	430b      	orrs	r3, r1
 800367a:	43db      	mvns	r3, r3
 800367c:	ea02 0103 	and.w	r1, r2, r3
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	697a      	ldr	r2, [r7, #20]
 8003686:	430a      	orrs	r2, r1
 8003688:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800368a:	bf00      	nop
 800368c:	371c      	adds	r7, #28
 800368e:	46bd      	mov	sp, r7
 8003690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003694:	4770      	bx	lr
 8003696:	bf00      	nop
 8003698:	03ff63ff 	.word	0x03ff63ff

0800369c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800369c:	b480      	push	{r7}
 800369e:	b083      	sub	sp, #12
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
 80036a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036ac:	b2db      	uxtb	r3, r3
 80036ae:	2b20      	cmp	r3, #32
 80036b0:	d138      	bne.n	8003724 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80036b8:	2b01      	cmp	r3, #1
 80036ba:	d101      	bne.n	80036c0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80036bc:	2302      	movs	r3, #2
 80036be:	e032      	b.n	8003726 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2201      	movs	r2, #1
 80036c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2224      	movs	r2, #36	; 0x24
 80036cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	681a      	ldr	r2, [r3, #0]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f022 0201 	bic.w	r2, r2, #1
 80036de:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	681a      	ldr	r2, [r3, #0]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80036ee:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	6819      	ldr	r1, [r3, #0]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	683a      	ldr	r2, [r7, #0]
 80036fc:	430a      	orrs	r2, r1
 80036fe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	681a      	ldr	r2, [r3, #0]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f042 0201 	orr.w	r2, r2, #1
 800370e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2220      	movs	r2, #32
 8003714:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2200      	movs	r2, #0
 800371c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003720:	2300      	movs	r3, #0
 8003722:	e000      	b.n	8003726 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003724:	2302      	movs	r3, #2
  }
}
 8003726:	4618      	mov	r0, r3
 8003728:	370c      	adds	r7, #12
 800372a:	46bd      	mov	sp, r7
 800372c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003730:	4770      	bx	lr

08003732 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003732:	b480      	push	{r7}
 8003734:	b085      	sub	sp, #20
 8003736:	af00      	add	r7, sp, #0
 8003738:	6078      	str	r0, [r7, #4]
 800373a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003742:	b2db      	uxtb	r3, r3
 8003744:	2b20      	cmp	r3, #32
 8003746:	d139      	bne.n	80037bc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800374e:	2b01      	cmp	r3, #1
 8003750:	d101      	bne.n	8003756 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003752:	2302      	movs	r3, #2
 8003754:	e033      	b.n	80037be <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2201      	movs	r2, #1
 800375a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2224      	movs	r2, #36	; 0x24
 8003762:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	681a      	ldr	r2, [r3, #0]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f022 0201 	bic.w	r2, r2, #1
 8003774:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003784:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	021b      	lsls	r3, r3, #8
 800378a:	68fa      	ldr	r2, [r7, #12]
 800378c:	4313      	orrs	r3, r2
 800378e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	68fa      	ldr	r2, [r7, #12]
 8003796:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	681a      	ldr	r2, [r3, #0]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f042 0201 	orr.w	r2, r2, #1
 80037a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2220      	movs	r2, #32
 80037ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2200      	movs	r2, #0
 80037b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80037b8:	2300      	movs	r3, #0
 80037ba:	e000      	b.n	80037be <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80037bc:	2302      	movs	r3, #2
  }
}
 80037be:	4618      	mov	r0, r3
 80037c0:	3714      	adds	r7, #20
 80037c2:	46bd      	mov	sp, r7
 80037c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c8:	4770      	bx	lr
	...

080037cc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b086      	sub	sp, #24
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80037d4:	2300      	movs	r3, #0
 80037d6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d101      	bne.n	80037e2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	e291      	b.n	8003d06 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f003 0301 	and.w	r3, r3, #1
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	f000 8087 	beq.w	80038fe <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80037f0:	4b96      	ldr	r3, [pc, #600]	; (8003a4c <HAL_RCC_OscConfig+0x280>)
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	f003 030c 	and.w	r3, r3, #12
 80037f8:	2b04      	cmp	r3, #4
 80037fa:	d00c      	beq.n	8003816 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037fc:	4b93      	ldr	r3, [pc, #588]	; (8003a4c <HAL_RCC_OscConfig+0x280>)
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	f003 030c 	and.w	r3, r3, #12
 8003804:	2b08      	cmp	r3, #8
 8003806:	d112      	bne.n	800382e <HAL_RCC_OscConfig+0x62>
 8003808:	4b90      	ldr	r3, [pc, #576]	; (8003a4c <HAL_RCC_OscConfig+0x280>)
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003810:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003814:	d10b      	bne.n	800382e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003816:	4b8d      	ldr	r3, [pc, #564]	; (8003a4c <HAL_RCC_OscConfig+0x280>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800381e:	2b00      	cmp	r3, #0
 8003820:	d06c      	beq.n	80038fc <HAL_RCC_OscConfig+0x130>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d168      	bne.n	80038fc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	e26b      	b.n	8003d06 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003836:	d106      	bne.n	8003846 <HAL_RCC_OscConfig+0x7a>
 8003838:	4b84      	ldr	r3, [pc, #528]	; (8003a4c <HAL_RCC_OscConfig+0x280>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a83      	ldr	r2, [pc, #524]	; (8003a4c <HAL_RCC_OscConfig+0x280>)
 800383e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003842:	6013      	str	r3, [r2, #0]
 8003844:	e02e      	b.n	80038a4 <HAL_RCC_OscConfig+0xd8>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d10c      	bne.n	8003868 <HAL_RCC_OscConfig+0x9c>
 800384e:	4b7f      	ldr	r3, [pc, #508]	; (8003a4c <HAL_RCC_OscConfig+0x280>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a7e      	ldr	r2, [pc, #504]	; (8003a4c <HAL_RCC_OscConfig+0x280>)
 8003854:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003858:	6013      	str	r3, [r2, #0]
 800385a:	4b7c      	ldr	r3, [pc, #496]	; (8003a4c <HAL_RCC_OscConfig+0x280>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a7b      	ldr	r2, [pc, #492]	; (8003a4c <HAL_RCC_OscConfig+0x280>)
 8003860:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003864:	6013      	str	r3, [r2, #0]
 8003866:	e01d      	b.n	80038a4 <HAL_RCC_OscConfig+0xd8>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003870:	d10c      	bne.n	800388c <HAL_RCC_OscConfig+0xc0>
 8003872:	4b76      	ldr	r3, [pc, #472]	; (8003a4c <HAL_RCC_OscConfig+0x280>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a75      	ldr	r2, [pc, #468]	; (8003a4c <HAL_RCC_OscConfig+0x280>)
 8003878:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800387c:	6013      	str	r3, [r2, #0]
 800387e:	4b73      	ldr	r3, [pc, #460]	; (8003a4c <HAL_RCC_OscConfig+0x280>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a72      	ldr	r2, [pc, #456]	; (8003a4c <HAL_RCC_OscConfig+0x280>)
 8003884:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003888:	6013      	str	r3, [r2, #0]
 800388a:	e00b      	b.n	80038a4 <HAL_RCC_OscConfig+0xd8>
 800388c:	4b6f      	ldr	r3, [pc, #444]	; (8003a4c <HAL_RCC_OscConfig+0x280>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a6e      	ldr	r2, [pc, #440]	; (8003a4c <HAL_RCC_OscConfig+0x280>)
 8003892:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003896:	6013      	str	r3, [r2, #0]
 8003898:	4b6c      	ldr	r3, [pc, #432]	; (8003a4c <HAL_RCC_OscConfig+0x280>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a6b      	ldr	r2, [pc, #428]	; (8003a4c <HAL_RCC_OscConfig+0x280>)
 800389e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d013      	beq.n	80038d4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038ac:	f7fe fe8a 	bl	80025c4 <HAL_GetTick>
 80038b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038b2:	e008      	b.n	80038c6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038b4:	f7fe fe86 	bl	80025c4 <HAL_GetTick>
 80038b8:	4602      	mov	r2, r0
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	1ad3      	subs	r3, r2, r3
 80038be:	2b64      	cmp	r3, #100	; 0x64
 80038c0:	d901      	bls.n	80038c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80038c2:	2303      	movs	r3, #3
 80038c4:	e21f      	b.n	8003d06 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038c6:	4b61      	ldr	r3, [pc, #388]	; (8003a4c <HAL_RCC_OscConfig+0x280>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d0f0      	beq.n	80038b4 <HAL_RCC_OscConfig+0xe8>
 80038d2:	e014      	b.n	80038fe <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038d4:	f7fe fe76 	bl	80025c4 <HAL_GetTick>
 80038d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038da:	e008      	b.n	80038ee <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038dc:	f7fe fe72 	bl	80025c4 <HAL_GetTick>
 80038e0:	4602      	mov	r2, r0
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	1ad3      	subs	r3, r2, r3
 80038e6:	2b64      	cmp	r3, #100	; 0x64
 80038e8:	d901      	bls.n	80038ee <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80038ea:	2303      	movs	r3, #3
 80038ec:	e20b      	b.n	8003d06 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038ee:	4b57      	ldr	r3, [pc, #348]	; (8003a4c <HAL_RCC_OscConfig+0x280>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d1f0      	bne.n	80038dc <HAL_RCC_OscConfig+0x110>
 80038fa:	e000      	b.n	80038fe <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f003 0302 	and.w	r3, r3, #2
 8003906:	2b00      	cmp	r3, #0
 8003908:	d069      	beq.n	80039de <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800390a:	4b50      	ldr	r3, [pc, #320]	; (8003a4c <HAL_RCC_OscConfig+0x280>)
 800390c:	689b      	ldr	r3, [r3, #8]
 800390e:	f003 030c 	and.w	r3, r3, #12
 8003912:	2b00      	cmp	r3, #0
 8003914:	d00b      	beq.n	800392e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003916:	4b4d      	ldr	r3, [pc, #308]	; (8003a4c <HAL_RCC_OscConfig+0x280>)
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	f003 030c 	and.w	r3, r3, #12
 800391e:	2b08      	cmp	r3, #8
 8003920:	d11c      	bne.n	800395c <HAL_RCC_OscConfig+0x190>
 8003922:	4b4a      	ldr	r3, [pc, #296]	; (8003a4c <HAL_RCC_OscConfig+0x280>)
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800392a:	2b00      	cmp	r3, #0
 800392c:	d116      	bne.n	800395c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800392e:	4b47      	ldr	r3, [pc, #284]	; (8003a4c <HAL_RCC_OscConfig+0x280>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f003 0302 	and.w	r3, r3, #2
 8003936:	2b00      	cmp	r3, #0
 8003938:	d005      	beq.n	8003946 <HAL_RCC_OscConfig+0x17a>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	68db      	ldr	r3, [r3, #12]
 800393e:	2b01      	cmp	r3, #1
 8003940:	d001      	beq.n	8003946 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	e1df      	b.n	8003d06 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003946:	4b41      	ldr	r3, [pc, #260]	; (8003a4c <HAL_RCC_OscConfig+0x280>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	691b      	ldr	r3, [r3, #16]
 8003952:	00db      	lsls	r3, r3, #3
 8003954:	493d      	ldr	r1, [pc, #244]	; (8003a4c <HAL_RCC_OscConfig+0x280>)
 8003956:	4313      	orrs	r3, r2
 8003958:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800395a:	e040      	b.n	80039de <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	68db      	ldr	r3, [r3, #12]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d023      	beq.n	80039ac <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003964:	4b39      	ldr	r3, [pc, #228]	; (8003a4c <HAL_RCC_OscConfig+0x280>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a38      	ldr	r2, [pc, #224]	; (8003a4c <HAL_RCC_OscConfig+0x280>)
 800396a:	f043 0301 	orr.w	r3, r3, #1
 800396e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003970:	f7fe fe28 	bl	80025c4 <HAL_GetTick>
 8003974:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003976:	e008      	b.n	800398a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003978:	f7fe fe24 	bl	80025c4 <HAL_GetTick>
 800397c:	4602      	mov	r2, r0
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	1ad3      	subs	r3, r2, r3
 8003982:	2b02      	cmp	r3, #2
 8003984:	d901      	bls.n	800398a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003986:	2303      	movs	r3, #3
 8003988:	e1bd      	b.n	8003d06 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800398a:	4b30      	ldr	r3, [pc, #192]	; (8003a4c <HAL_RCC_OscConfig+0x280>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f003 0302 	and.w	r3, r3, #2
 8003992:	2b00      	cmp	r3, #0
 8003994:	d0f0      	beq.n	8003978 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003996:	4b2d      	ldr	r3, [pc, #180]	; (8003a4c <HAL_RCC_OscConfig+0x280>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	691b      	ldr	r3, [r3, #16]
 80039a2:	00db      	lsls	r3, r3, #3
 80039a4:	4929      	ldr	r1, [pc, #164]	; (8003a4c <HAL_RCC_OscConfig+0x280>)
 80039a6:	4313      	orrs	r3, r2
 80039a8:	600b      	str	r3, [r1, #0]
 80039aa:	e018      	b.n	80039de <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039ac:	4b27      	ldr	r3, [pc, #156]	; (8003a4c <HAL_RCC_OscConfig+0x280>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a26      	ldr	r2, [pc, #152]	; (8003a4c <HAL_RCC_OscConfig+0x280>)
 80039b2:	f023 0301 	bic.w	r3, r3, #1
 80039b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039b8:	f7fe fe04 	bl	80025c4 <HAL_GetTick>
 80039bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039be:	e008      	b.n	80039d2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039c0:	f7fe fe00 	bl	80025c4 <HAL_GetTick>
 80039c4:	4602      	mov	r2, r0
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	1ad3      	subs	r3, r2, r3
 80039ca:	2b02      	cmp	r3, #2
 80039cc:	d901      	bls.n	80039d2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80039ce:	2303      	movs	r3, #3
 80039d0:	e199      	b.n	8003d06 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039d2:	4b1e      	ldr	r3, [pc, #120]	; (8003a4c <HAL_RCC_OscConfig+0x280>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f003 0302 	and.w	r3, r3, #2
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d1f0      	bne.n	80039c0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f003 0308 	and.w	r3, r3, #8
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d038      	beq.n	8003a5c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	695b      	ldr	r3, [r3, #20]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d019      	beq.n	8003a26 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039f2:	4b16      	ldr	r3, [pc, #88]	; (8003a4c <HAL_RCC_OscConfig+0x280>)
 80039f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039f6:	4a15      	ldr	r2, [pc, #84]	; (8003a4c <HAL_RCC_OscConfig+0x280>)
 80039f8:	f043 0301 	orr.w	r3, r3, #1
 80039fc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039fe:	f7fe fde1 	bl	80025c4 <HAL_GetTick>
 8003a02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a04:	e008      	b.n	8003a18 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a06:	f7fe fddd 	bl	80025c4 <HAL_GetTick>
 8003a0a:	4602      	mov	r2, r0
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	1ad3      	subs	r3, r2, r3
 8003a10:	2b02      	cmp	r3, #2
 8003a12:	d901      	bls.n	8003a18 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003a14:	2303      	movs	r3, #3
 8003a16:	e176      	b.n	8003d06 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a18:	4b0c      	ldr	r3, [pc, #48]	; (8003a4c <HAL_RCC_OscConfig+0x280>)
 8003a1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a1c:	f003 0302 	and.w	r3, r3, #2
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d0f0      	beq.n	8003a06 <HAL_RCC_OscConfig+0x23a>
 8003a24:	e01a      	b.n	8003a5c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a26:	4b09      	ldr	r3, [pc, #36]	; (8003a4c <HAL_RCC_OscConfig+0x280>)
 8003a28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a2a:	4a08      	ldr	r2, [pc, #32]	; (8003a4c <HAL_RCC_OscConfig+0x280>)
 8003a2c:	f023 0301 	bic.w	r3, r3, #1
 8003a30:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a32:	f7fe fdc7 	bl	80025c4 <HAL_GetTick>
 8003a36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a38:	e00a      	b.n	8003a50 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a3a:	f7fe fdc3 	bl	80025c4 <HAL_GetTick>
 8003a3e:	4602      	mov	r2, r0
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	1ad3      	subs	r3, r2, r3
 8003a44:	2b02      	cmp	r3, #2
 8003a46:	d903      	bls.n	8003a50 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003a48:	2303      	movs	r3, #3
 8003a4a:	e15c      	b.n	8003d06 <HAL_RCC_OscConfig+0x53a>
 8003a4c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a50:	4b91      	ldr	r3, [pc, #580]	; (8003c98 <HAL_RCC_OscConfig+0x4cc>)
 8003a52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a54:	f003 0302 	and.w	r3, r3, #2
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d1ee      	bne.n	8003a3a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f003 0304 	and.w	r3, r3, #4
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	f000 80a4 	beq.w	8003bb2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a6a:	4b8b      	ldr	r3, [pc, #556]	; (8003c98 <HAL_RCC_OscConfig+0x4cc>)
 8003a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d10d      	bne.n	8003a92 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a76:	4b88      	ldr	r3, [pc, #544]	; (8003c98 <HAL_RCC_OscConfig+0x4cc>)
 8003a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a7a:	4a87      	ldr	r2, [pc, #540]	; (8003c98 <HAL_RCC_OscConfig+0x4cc>)
 8003a7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a80:	6413      	str	r3, [r2, #64]	; 0x40
 8003a82:	4b85      	ldr	r3, [pc, #532]	; (8003c98 <HAL_RCC_OscConfig+0x4cc>)
 8003a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a8a:	60bb      	str	r3, [r7, #8]
 8003a8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a92:	4b82      	ldr	r3, [pc, #520]	; (8003c9c <HAL_RCC_OscConfig+0x4d0>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d118      	bne.n	8003ad0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003a9e:	4b7f      	ldr	r3, [pc, #508]	; (8003c9c <HAL_RCC_OscConfig+0x4d0>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a7e      	ldr	r2, [pc, #504]	; (8003c9c <HAL_RCC_OscConfig+0x4d0>)
 8003aa4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003aa8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003aaa:	f7fe fd8b 	bl	80025c4 <HAL_GetTick>
 8003aae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ab0:	e008      	b.n	8003ac4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ab2:	f7fe fd87 	bl	80025c4 <HAL_GetTick>
 8003ab6:	4602      	mov	r2, r0
 8003ab8:	693b      	ldr	r3, [r7, #16]
 8003aba:	1ad3      	subs	r3, r2, r3
 8003abc:	2b64      	cmp	r3, #100	; 0x64
 8003abe:	d901      	bls.n	8003ac4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003ac0:	2303      	movs	r3, #3
 8003ac2:	e120      	b.n	8003d06 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ac4:	4b75      	ldr	r3, [pc, #468]	; (8003c9c <HAL_RCC_OscConfig+0x4d0>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d0f0      	beq.n	8003ab2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	2b01      	cmp	r3, #1
 8003ad6:	d106      	bne.n	8003ae6 <HAL_RCC_OscConfig+0x31a>
 8003ad8:	4b6f      	ldr	r3, [pc, #444]	; (8003c98 <HAL_RCC_OscConfig+0x4cc>)
 8003ada:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003adc:	4a6e      	ldr	r2, [pc, #440]	; (8003c98 <HAL_RCC_OscConfig+0x4cc>)
 8003ade:	f043 0301 	orr.w	r3, r3, #1
 8003ae2:	6713      	str	r3, [r2, #112]	; 0x70
 8003ae4:	e02d      	b.n	8003b42 <HAL_RCC_OscConfig+0x376>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	689b      	ldr	r3, [r3, #8]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d10c      	bne.n	8003b08 <HAL_RCC_OscConfig+0x33c>
 8003aee:	4b6a      	ldr	r3, [pc, #424]	; (8003c98 <HAL_RCC_OscConfig+0x4cc>)
 8003af0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003af2:	4a69      	ldr	r2, [pc, #420]	; (8003c98 <HAL_RCC_OscConfig+0x4cc>)
 8003af4:	f023 0301 	bic.w	r3, r3, #1
 8003af8:	6713      	str	r3, [r2, #112]	; 0x70
 8003afa:	4b67      	ldr	r3, [pc, #412]	; (8003c98 <HAL_RCC_OscConfig+0x4cc>)
 8003afc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003afe:	4a66      	ldr	r2, [pc, #408]	; (8003c98 <HAL_RCC_OscConfig+0x4cc>)
 8003b00:	f023 0304 	bic.w	r3, r3, #4
 8003b04:	6713      	str	r3, [r2, #112]	; 0x70
 8003b06:	e01c      	b.n	8003b42 <HAL_RCC_OscConfig+0x376>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	689b      	ldr	r3, [r3, #8]
 8003b0c:	2b05      	cmp	r3, #5
 8003b0e:	d10c      	bne.n	8003b2a <HAL_RCC_OscConfig+0x35e>
 8003b10:	4b61      	ldr	r3, [pc, #388]	; (8003c98 <HAL_RCC_OscConfig+0x4cc>)
 8003b12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b14:	4a60      	ldr	r2, [pc, #384]	; (8003c98 <HAL_RCC_OscConfig+0x4cc>)
 8003b16:	f043 0304 	orr.w	r3, r3, #4
 8003b1a:	6713      	str	r3, [r2, #112]	; 0x70
 8003b1c:	4b5e      	ldr	r3, [pc, #376]	; (8003c98 <HAL_RCC_OscConfig+0x4cc>)
 8003b1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b20:	4a5d      	ldr	r2, [pc, #372]	; (8003c98 <HAL_RCC_OscConfig+0x4cc>)
 8003b22:	f043 0301 	orr.w	r3, r3, #1
 8003b26:	6713      	str	r3, [r2, #112]	; 0x70
 8003b28:	e00b      	b.n	8003b42 <HAL_RCC_OscConfig+0x376>
 8003b2a:	4b5b      	ldr	r3, [pc, #364]	; (8003c98 <HAL_RCC_OscConfig+0x4cc>)
 8003b2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b2e:	4a5a      	ldr	r2, [pc, #360]	; (8003c98 <HAL_RCC_OscConfig+0x4cc>)
 8003b30:	f023 0301 	bic.w	r3, r3, #1
 8003b34:	6713      	str	r3, [r2, #112]	; 0x70
 8003b36:	4b58      	ldr	r3, [pc, #352]	; (8003c98 <HAL_RCC_OscConfig+0x4cc>)
 8003b38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b3a:	4a57      	ldr	r2, [pc, #348]	; (8003c98 <HAL_RCC_OscConfig+0x4cc>)
 8003b3c:	f023 0304 	bic.w	r3, r3, #4
 8003b40:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d015      	beq.n	8003b76 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b4a:	f7fe fd3b 	bl	80025c4 <HAL_GetTick>
 8003b4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b50:	e00a      	b.n	8003b68 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b52:	f7fe fd37 	bl	80025c4 <HAL_GetTick>
 8003b56:	4602      	mov	r2, r0
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	1ad3      	subs	r3, r2, r3
 8003b5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d901      	bls.n	8003b68 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003b64:	2303      	movs	r3, #3
 8003b66:	e0ce      	b.n	8003d06 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b68:	4b4b      	ldr	r3, [pc, #300]	; (8003c98 <HAL_RCC_OscConfig+0x4cc>)
 8003b6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b6c:	f003 0302 	and.w	r3, r3, #2
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d0ee      	beq.n	8003b52 <HAL_RCC_OscConfig+0x386>
 8003b74:	e014      	b.n	8003ba0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b76:	f7fe fd25 	bl	80025c4 <HAL_GetTick>
 8003b7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b7c:	e00a      	b.n	8003b94 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b7e:	f7fe fd21 	bl	80025c4 <HAL_GetTick>
 8003b82:	4602      	mov	r2, r0
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	1ad3      	subs	r3, r2, r3
 8003b88:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d901      	bls.n	8003b94 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003b90:	2303      	movs	r3, #3
 8003b92:	e0b8      	b.n	8003d06 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b94:	4b40      	ldr	r3, [pc, #256]	; (8003c98 <HAL_RCC_OscConfig+0x4cc>)
 8003b96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b98:	f003 0302 	and.w	r3, r3, #2
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d1ee      	bne.n	8003b7e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003ba0:	7dfb      	ldrb	r3, [r7, #23]
 8003ba2:	2b01      	cmp	r3, #1
 8003ba4:	d105      	bne.n	8003bb2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ba6:	4b3c      	ldr	r3, [pc, #240]	; (8003c98 <HAL_RCC_OscConfig+0x4cc>)
 8003ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003baa:	4a3b      	ldr	r2, [pc, #236]	; (8003c98 <HAL_RCC_OscConfig+0x4cc>)
 8003bac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bb0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	699b      	ldr	r3, [r3, #24]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	f000 80a4 	beq.w	8003d04 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003bbc:	4b36      	ldr	r3, [pc, #216]	; (8003c98 <HAL_RCC_OscConfig+0x4cc>)
 8003bbe:	689b      	ldr	r3, [r3, #8]
 8003bc0:	f003 030c 	and.w	r3, r3, #12
 8003bc4:	2b08      	cmp	r3, #8
 8003bc6:	d06b      	beq.n	8003ca0 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	699b      	ldr	r3, [r3, #24]
 8003bcc:	2b02      	cmp	r3, #2
 8003bce:	d149      	bne.n	8003c64 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bd0:	4b31      	ldr	r3, [pc, #196]	; (8003c98 <HAL_RCC_OscConfig+0x4cc>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a30      	ldr	r2, [pc, #192]	; (8003c98 <HAL_RCC_OscConfig+0x4cc>)
 8003bd6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003bda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bdc:	f7fe fcf2 	bl	80025c4 <HAL_GetTick>
 8003be0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003be2:	e008      	b.n	8003bf6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003be4:	f7fe fcee 	bl	80025c4 <HAL_GetTick>
 8003be8:	4602      	mov	r2, r0
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	1ad3      	subs	r3, r2, r3
 8003bee:	2b02      	cmp	r3, #2
 8003bf0:	d901      	bls.n	8003bf6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003bf2:	2303      	movs	r3, #3
 8003bf4:	e087      	b.n	8003d06 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bf6:	4b28      	ldr	r3, [pc, #160]	; (8003c98 <HAL_RCC_OscConfig+0x4cc>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d1f0      	bne.n	8003be4 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	69da      	ldr	r2, [r3, #28]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6a1b      	ldr	r3, [r3, #32]
 8003c0a:	431a      	orrs	r2, r3
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c10:	019b      	lsls	r3, r3, #6
 8003c12:	431a      	orrs	r2, r3
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c18:	085b      	lsrs	r3, r3, #1
 8003c1a:	3b01      	subs	r3, #1
 8003c1c:	041b      	lsls	r3, r3, #16
 8003c1e:	431a      	orrs	r2, r3
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c24:	061b      	lsls	r3, r3, #24
 8003c26:	4313      	orrs	r3, r2
 8003c28:	4a1b      	ldr	r2, [pc, #108]	; (8003c98 <HAL_RCC_OscConfig+0x4cc>)
 8003c2a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003c2e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c30:	4b19      	ldr	r3, [pc, #100]	; (8003c98 <HAL_RCC_OscConfig+0x4cc>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a18      	ldr	r2, [pc, #96]	; (8003c98 <HAL_RCC_OscConfig+0x4cc>)
 8003c36:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c3c:	f7fe fcc2 	bl	80025c4 <HAL_GetTick>
 8003c40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c42:	e008      	b.n	8003c56 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c44:	f7fe fcbe 	bl	80025c4 <HAL_GetTick>
 8003c48:	4602      	mov	r2, r0
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	1ad3      	subs	r3, r2, r3
 8003c4e:	2b02      	cmp	r3, #2
 8003c50:	d901      	bls.n	8003c56 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8003c52:	2303      	movs	r3, #3
 8003c54:	e057      	b.n	8003d06 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c56:	4b10      	ldr	r3, [pc, #64]	; (8003c98 <HAL_RCC_OscConfig+0x4cc>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d0f0      	beq.n	8003c44 <HAL_RCC_OscConfig+0x478>
 8003c62:	e04f      	b.n	8003d04 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c64:	4b0c      	ldr	r3, [pc, #48]	; (8003c98 <HAL_RCC_OscConfig+0x4cc>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a0b      	ldr	r2, [pc, #44]	; (8003c98 <HAL_RCC_OscConfig+0x4cc>)
 8003c6a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c70:	f7fe fca8 	bl	80025c4 <HAL_GetTick>
 8003c74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c76:	e008      	b.n	8003c8a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c78:	f7fe fca4 	bl	80025c4 <HAL_GetTick>
 8003c7c:	4602      	mov	r2, r0
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	1ad3      	subs	r3, r2, r3
 8003c82:	2b02      	cmp	r3, #2
 8003c84:	d901      	bls.n	8003c8a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8003c86:	2303      	movs	r3, #3
 8003c88:	e03d      	b.n	8003d06 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c8a:	4b03      	ldr	r3, [pc, #12]	; (8003c98 <HAL_RCC_OscConfig+0x4cc>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d1f0      	bne.n	8003c78 <HAL_RCC_OscConfig+0x4ac>
 8003c96:	e035      	b.n	8003d04 <HAL_RCC_OscConfig+0x538>
 8003c98:	40023800 	.word	0x40023800
 8003c9c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003ca0:	4b1b      	ldr	r3, [pc, #108]	; (8003d10 <HAL_RCC_OscConfig+0x544>)
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	699b      	ldr	r3, [r3, #24]
 8003caa:	2b01      	cmp	r3, #1
 8003cac:	d028      	beq.n	8003d00 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003cb8:	429a      	cmp	r2, r3
 8003cba:	d121      	bne.n	8003d00 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cc6:	429a      	cmp	r2, r3
 8003cc8:	d11a      	bne.n	8003d00 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003cca:	68fa      	ldr	r2, [r7, #12]
 8003ccc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003cd0:	4013      	ands	r3, r2
 8003cd2:	687a      	ldr	r2, [r7, #4]
 8003cd4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003cd6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d111      	bne.n	8003d00 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ce6:	085b      	lsrs	r3, r3, #1
 8003ce8:	3b01      	subs	r3, #1
 8003cea:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003cec:	429a      	cmp	r2, r3
 8003cee:	d107      	bne.n	8003d00 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cfa:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003cfc:	429a      	cmp	r2, r3
 8003cfe:	d001      	beq.n	8003d04 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003d00:	2301      	movs	r3, #1
 8003d02:	e000      	b.n	8003d06 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003d04:	2300      	movs	r3, #0
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	3718      	adds	r7, #24
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}
 8003d0e:	bf00      	nop
 8003d10:	40023800 	.word	0x40023800

08003d14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b084      	sub	sp, #16
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
 8003d1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003d1e:	2300      	movs	r3, #0
 8003d20:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d101      	bne.n	8003d2c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	e0d0      	b.n	8003ece <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003d2c:	4b6a      	ldr	r3, [pc, #424]	; (8003ed8 <HAL_RCC_ClockConfig+0x1c4>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f003 030f 	and.w	r3, r3, #15
 8003d34:	683a      	ldr	r2, [r7, #0]
 8003d36:	429a      	cmp	r2, r3
 8003d38:	d910      	bls.n	8003d5c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d3a:	4b67      	ldr	r3, [pc, #412]	; (8003ed8 <HAL_RCC_ClockConfig+0x1c4>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f023 020f 	bic.w	r2, r3, #15
 8003d42:	4965      	ldr	r1, [pc, #404]	; (8003ed8 <HAL_RCC_ClockConfig+0x1c4>)
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	4313      	orrs	r3, r2
 8003d48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d4a:	4b63      	ldr	r3, [pc, #396]	; (8003ed8 <HAL_RCC_ClockConfig+0x1c4>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f003 030f 	and.w	r3, r3, #15
 8003d52:	683a      	ldr	r2, [r7, #0]
 8003d54:	429a      	cmp	r2, r3
 8003d56:	d001      	beq.n	8003d5c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	e0b8      	b.n	8003ece <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f003 0302 	and.w	r3, r3, #2
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d020      	beq.n	8003daa <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f003 0304 	and.w	r3, r3, #4
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d005      	beq.n	8003d80 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d74:	4b59      	ldr	r3, [pc, #356]	; (8003edc <HAL_RCC_ClockConfig+0x1c8>)
 8003d76:	689b      	ldr	r3, [r3, #8]
 8003d78:	4a58      	ldr	r2, [pc, #352]	; (8003edc <HAL_RCC_ClockConfig+0x1c8>)
 8003d7a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003d7e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f003 0308 	and.w	r3, r3, #8
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d005      	beq.n	8003d98 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d8c:	4b53      	ldr	r3, [pc, #332]	; (8003edc <HAL_RCC_ClockConfig+0x1c8>)
 8003d8e:	689b      	ldr	r3, [r3, #8]
 8003d90:	4a52      	ldr	r2, [pc, #328]	; (8003edc <HAL_RCC_ClockConfig+0x1c8>)
 8003d92:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003d96:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d98:	4b50      	ldr	r3, [pc, #320]	; (8003edc <HAL_RCC_ClockConfig+0x1c8>)
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	494d      	ldr	r1, [pc, #308]	; (8003edc <HAL_RCC_ClockConfig+0x1c8>)
 8003da6:	4313      	orrs	r3, r2
 8003da8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f003 0301 	and.w	r3, r3, #1
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d040      	beq.n	8003e38 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	2b01      	cmp	r3, #1
 8003dbc:	d107      	bne.n	8003dce <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dbe:	4b47      	ldr	r3, [pc, #284]	; (8003edc <HAL_RCC_ClockConfig+0x1c8>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d115      	bne.n	8003df6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e07f      	b.n	8003ece <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	2b02      	cmp	r3, #2
 8003dd4:	d107      	bne.n	8003de6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dd6:	4b41      	ldr	r3, [pc, #260]	; (8003edc <HAL_RCC_ClockConfig+0x1c8>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d109      	bne.n	8003df6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003de2:	2301      	movs	r3, #1
 8003de4:	e073      	b.n	8003ece <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003de6:	4b3d      	ldr	r3, [pc, #244]	; (8003edc <HAL_RCC_ClockConfig+0x1c8>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f003 0302 	and.w	r3, r3, #2
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d101      	bne.n	8003df6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	e06b      	b.n	8003ece <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003df6:	4b39      	ldr	r3, [pc, #228]	; (8003edc <HAL_RCC_ClockConfig+0x1c8>)
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	f023 0203 	bic.w	r2, r3, #3
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	4936      	ldr	r1, [pc, #216]	; (8003edc <HAL_RCC_ClockConfig+0x1c8>)
 8003e04:	4313      	orrs	r3, r2
 8003e06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e08:	f7fe fbdc 	bl	80025c4 <HAL_GetTick>
 8003e0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e0e:	e00a      	b.n	8003e26 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e10:	f7fe fbd8 	bl	80025c4 <HAL_GetTick>
 8003e14:	4602      	mov	r2, r0
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	1ad3      	subs	r3, r2, r3
 8003e1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d901      	bls.n	8003e26 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003e22:	2303      	movs	r3, #3
 8003e24:	e053      	b.n	8003ece <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e26:	4b2d      	ldr	r3, [pc, #180]	; (8003edc <HAL_RCC_ClockConfig+0x1c8>)
 8003e28:	689b      	ldr	r3, [r3, #8]
 8003e2a:	f003 020c 	and.w	r2, r3, #12
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	009b      	lsls	r3, r3, #2
 8003e34:	429a      	cmp	r2, r3
 8003e36:	d1eb      	bne.n	8003e10 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003e38:	4b27      	ldr	r3, [pc, #156]	; (8003ed8 <HAL_RCC_ClockConfig+0x1c4>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f003 030f 	and.w	r3, r3, #15
 8003e40:	683a      	ldr	r2, [r7, #0]
 8003e42:	429a      	cmp	r2, r3
 8003e44:	d210      	bcs.n	8003e68 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e46:	4b24      	ldr	r3, [pc, #144]	; (8003ed8 <HAL_RCC_ClockConfig+0x1c4>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f023 020f 	bic.w	r2, r3, #15
 8003e4e:	4922      	ldr	r1, [pc, #136]	; (8003ed8 <HAL_RCC_ClockConfig+0x1c4>)
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	4313      	orrs	r3, r2
 8003e54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e56:	4b20      	ldr	r3, [pc, #128]	; (8003ed8 <HAL_RCC_ClockConfig+0x1c4>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f003 030f 	and.w	r3, r3, #15
 8003e5e:	683a      	ldr	r2, [r7, #0]
 8003e60:	429a      	cmp	r2, r3
 8003e62:	d001      	beq.n	8003e68 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003e64:	2301      	movs	r3, #1
 8003e66:	e032      	b.n	8003ece <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f003 0304 	and.w	r3, r3, #4
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d008      	beq.n	8003e86 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e74:	4b19      	ldr	r3, [pc, #100]	; (8003edc <HAL_RCC_ClockConfig+0x1c8>)
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	68db      	ldr	r3, [r3, #12]
 8003e80:	4916      	ldr	r1, [pc, #88]	; (8003edc <HAL_RCC_ClockConfig+0x1c8>)
 8003e82:	4313      	orrs	r3, r2
 8003e84:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f003 0308 	and.w	r3, r3, #8
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d009      	beq.n	8003ea6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003e92:	4b12      	ldr	r3, [pc, #72]	; (8003edc <HAL_RCC_ClockConfig+0x1c8>)
 8003e94:	689b      	ldr	r3, [r3, #8]
 8003e96:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	691b      	ldr	r3, [r3, #16]
 8003e9e:	00db      	lsls	r3, r3, #3
 8003ea0:	490e      	ldr	r1, [pc, #56]	; (8003edc <HAL_RCC_ClockConfig+0x1c8>)
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003ea6:	f000 f821 	bl	8003eec <HAL_RCC_GetSysClockFreq>
 8003eaa:	4602      	mov	r2, r0
 8003eac:	4b0b      	ldr	r3, [pc, #44]	; (8003edc <HAL_RCC_ClockConfig+0x1c8>)
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	091b      	lsrs	r3, r3, #4
 8003eb2:	f003 030f 	and.w	r3, r3, #15
 8003eb6:	490a      	ldr	r1, [pc, #40]	; (8003ee0 <HAL_RCC_ClockConfig+0x1cc>)
 8003eb8:	5ccb      	ldrb	r3, [r1, r3]
 8003eba:	fa22 f303 	lsr.w	r3, r2, r3
 8003ebe:	4a09      	ldr	r2, [pc, #36]	; (8003ee4 <HAL_RCC_ClockConfig+0x1d0>)
 8003ec0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003ec2:	4b09      	ldr	r3, [pc, #36]	; (8003ee8 <HAL_RCC_ClockConfig+0x1d4>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f7fe fb38 	bl	800253c <HAL_InitTick>

  return HAL_OK;
 8003ecc:	2300      	movs	r3, #0
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	3710      	adds	r7, #16
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}
 8003ed6:	bf00      	nop
 8003ed8:	40023c00 	.word	0x40023c00
 8003edc:	40023800 	.word	0x40023800
 8003ee0:	08006c80 	.word	0x08006c80
 8003ee4:	20000000 	.word	0x20000000
 8003ee8:	20000004 	.word	0x20000004

08003eec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003eec:	b5b0      	push	{r4, r5, r7, lr}
 8003eee:	b084      	sub	sp, #16
 8003ef0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003ef2:	2100      	movs	r1, #0
 8003ef4:	6079      	str	r1, [r7, #4]
 8003ef6:	2100      	movs	r1, #0
 8003ef8:	60f9      	str	r1, [r7, #12]
 8003efa:	2100      	movs	r1, #0
 8003efc:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 8003efe:	2100      	movs	r1, #0
 8003f00:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003f02:	4952      	ldr	r1, [pc, #328]	; (800404c <HAL_RCC_GetSysClockFreq+0x160>)
 8003f04:	6889      	ldr	r1, [r1, #8]
 8003f06:	f001 010c 	and.w	r1, r1, #12
 8003f0a:	2908      	cmp	r1, #8
 8003f0c:	d00d      	beq.n	8003f2a <HAL_RCC_GetSysClockFreq+0x3e>
 8003f0e:	2908      	cmp	r1, #8
 8003f10:	f200 8094 	bhi.w	800403c <HAL_RCC_GetSysClockFreq+0x150>
 8003f14:	2900      	cmp	r1, #0
 8003f16:	d002      	beq.n	8003f1e <HAL_RCC_GetSysClockFreq+0x32>
 8003f18:	2904      	cmp	r1, #4
 8003f1a:	d003      	beq.n	8003f24 <HAL_RCC_GetSysClockFreq+0x38>
 8003f1c:	e08e      	b.n	800403c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003f1e:	4b4c      	ldr	r3, [pc, #304]	; (8004050 <HAL_RCC_GetSysClockFreq+0x164>)
 8003f20:	60bb      	str	r3, [r7, #8]
      break;
 8003f22:	e08e      	b.n	8004042 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003f24:	4b4b      	ldr	r3, [pc, #300]	; (8004054 <HAL_RCC_GetSysClockFreq+0x168>)
 8003f26:	60bb      	str	r3, [r7, #8]
      break;
 8003f28:	e08b      	b.n	8004042 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f2a:	4948      	ldr	r1, [pc, #288]	; (800404c <HAL_RCC_GetSysClockFreq+0x160>)
 8003f2c:	6849      	ldr	r1, [r1, #4]
 8003f2e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8003f32:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003f34:	4945      	ldr	r1, [pc, #276]	; (800404c <HAL_RCC_GetSysClockFreq+0x160>)
 8003f36:	6849      	ldr	r1, [r1, #4]
 8003f38:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8003f3c:	2900      	cmp	r1, #0
 8003f3e:	d024      	beq.n	8003f8a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f40:	4942      	ldr	r1, [pc, #264]	; (800404c <HAL_RCC_GetSysClockFreq+0x160>)
 8003f42:	6849      	ldr	r1, [r1, #4]
 8003f44:	0989      	lsrs	r1, r1, #6
 8003f46:	4608      	mov	r0, r1
 8003f48:	f04f 0100 	mov.w	r1, #0
 8003f4c:	f240 14ff 	movw	r4, #511	; 0x1ff
 8003f50:	f04f 0500 	mov.w	r5, #0
 8003f54:	ea00 0204 	and.w	r2, r0, r4
 8003f58:	ea01 0305 	and.w	r3, r1, r5
 8003f5c:	493d      	ldr	r1, [pc, #244]	; (8004054 <HAL_RCC_GetSysClockFreq+0x168>)
 8003f5e:	fb01 f003 	mul.w	r0, r1, r3
 8003f62:	2100      	movs	r1, #0
 8003f64:	fb01 f102 	mul.w	r1, r1, r2
 8003f68:	1844      	adds	r4, r0, r1
 8003f6a:	493a      	ldr	r1, [pc, #232]	; (8004054 <HAL_RCC_GetSysClockFreq+0x168>)
 8003f6c:	fba2 0101 	umull	r0, r1, r2, r1
 8003f70:	1863      	adds	r3, r4, r1
 8003f72:	4619      	mov	r1, r3
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	461a      	mov	r2, r3
 8003f78:	f04f 0300 	mov.w	r3, #0
 8003f7c:	f7fc fb50 	bl	8000620 <__aeabi_uldivmod>
 8003f80:	4602      	mov	r2, r0
 8003f82:	460b      	mov	r3, r1
 8003f84:	4613      	mov	r3, r2
 8003f86:	60fb      	str	r3, [r7, #12]
 8003f88:	e04a      	b.n	8004020 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f8a:	4b30      	ldr	r3, [pc, #192]	; (800404c <HAL_RCC_GetSysClockFreq+0x160>)
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	099b      	lsrs	r3, r3, #6
 8003f90:	461a      	mov	r2, r3
 8003f92:	f04f 0300 	mov.w	r3, #0
 8003f96:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003f9a:	f04f 0100 	mov.w	r1, #0
 8003f9e:	ea02 0400 	and.w	r4, r2, r0
 8003fa2:	ea03 0501 	and.w	r5, r3, r1
 8003fa6:	4620      	mov	r0, r4
 8003fa8:	4629      	mov	r1, r5
 8003faa:	f04f 0200 	mov.w	r2, #0
 8003fae:	f04f 0300 	mov.w	r3, #0
 8003fb2:	014b      	lsls	r3, r1, #5
 8003fb4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003fb8:	0142      	lsls	r2, r0, #5
 8003fba:	4610      	mov	r0, r2
 8003fbc:	4619      	mov	r1, r3
 8003fbe:	1b00      	subs	r0, r0, r4
 8003fc0:	eb61 0105 	sbc.w	r1, r1, r5
 8003fc4:	f04f 0200 	mov.w	r2, #0
 8003fc8:	f04f 0300 	mov.w	r3, #0
 8003fcc:	018b      	lsls	r3, r1, #6
 8003fce:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003fd2:	0182      	lsls	r2, r0, #6
 8003fd4:	1a12      	subs	r2, r2, r0
 8003fd6:	eb63 0301 	sbc.w	r3, r3, r1
 8003fda:	f04f 0000 	mov.w	r0, #0
 8003fde:	f04f 0100 	mov.w	r1, #0
 8003fe2:	00d9      	lsls	r1, r3, #3
 8003fe4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003fe8:	00d0      	lsls	r0, r2, #3
 8003fea:	4602      	mov	r2, r0
 8003fec:	460b      	mov	r3, r1
 8003fee:	1912      	adds	r2, r2, r4
 8003ff0:	eb45 0303 	adc.w	r3, r5, r3
 8003ff4:	f04f 0000 	mov.w	r0, #0
 8003ff8:	f04f 0100 	mov.w	r1, #0
 8003ffc:	0299      	lsls	r1, r3, #10
 8003ffe:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004002:	0290      	lsls	r0, r2, #10
 8004004:	4602      	mov	r2, r0
 8004006:	460b      	mov	r3, r1
 8004008:	4610      	mov	r0, r2
 800400a:	4619      	mov	r1, r3
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	461a      	mov	r2, r3
 8004010:	f04f 0300 	mov.w	r3, #0
 8004014:	f7fc fb04 	bl	8000620 <__aeabi_uldivmod>
 8004018:	4602      	mov	r2, r0
 800401a:	460b      	mov	r3, r1
 800401c:	4613      	mov	r3, r2
 800401e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004020:	4b0a      	ldr	r3, [pc, #40]	; (800404c <HAL_RCC_GetSysClockFreq+0x160>)
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	0c1b      	lsrs	r3, r3, #16
 8004026:	f003 0303 	and.w	r3, r3, #3
 800402a:	3301      	adds	r3, #1
 800402c:	005b      	lsls	r3, r3, #1
 800402e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8004030:	68fa      	ldr	r2, [r7, #12]
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	fbb2 f3f3 	udiv	r3, r2, r3
 8004038:	60bb      	str	r3, [r7, #8]
      break;
 800403a:	e002      	b.n	8004042 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800403c:	4b04      	ldr	r3, [pc, #16]	; (8004050 <HAL_RCC_GetSysClockFreq+0x164>)
 800403e:	60bb      	str	r3, [r7, #8]
      break;
 8004040:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004042:	68bb      	ldr	r3, [r7, #8]
}
 8004044:	4618      	mov	r0, r3
 8004046:	3710      	adds	r7, #16
 8004048:	46bd      	mov	sp, r7
 800404a:	bdb0      	pop	{r4, r5, r7, pc}
 800404c:	40023800 	.word	0x40023800
 8004050:	00f42400 	.word	0x00f42400
 8004054:	017d7840 	.word	0x017d7840

08004058 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004058:	b480      	push	{r7}
 800405a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800405c:	4b03      	ldr	r3, [pc, #12]	; (800406c <HAL_RCC_GetHCLKFreq+0x14>)
 800405e:	681b      	ldr	r3, [r3, #0]
}
 8004060:	4618      	mov	r0, r3
 8004062:	46bd      	mov	sp, r7
 8004064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004068:	4770      	bx	lr
 800406a:	bf00      	nop
 800406c:	20000000 	.word	0x20000000

08004070 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004074:	f7ff fff0 	bl	8004058 <HAL_RCC_GetHCLKFreq>
 8004078:	4602      	mov	r2, r0
 800407a:	4b05      	ldr	r3, [pc, #20]	; (8004090 <HAL_RCC_GetPCLK1Freq+0x20>)
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	0a9b      	lsrs	r3, r3, #10
 8004080:	f003 0307 	and.w	r3, r3, #7
 8004084:	4903      	ldr	r1, [pc, #12]	; (8004094 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004086:	5ccb      	ldrb	r3, [r1, r3]
 8004088:	fa22 f303 	lsr.w	r3, r2, r3
}
 800408c:	4618      	mov	r0, r3
 800408e:	bd80      	pop	{r7, pc}
 8004090:	40023800 	.word	0x40023800
 8004094:	08006c90 	.word	0x08006c90

08004098 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800409c:	f7ff ffdc 	bl	8004058 <HAL_RCC_GetHCLKFreq>
 80040a0:	4602      	mov	r2, r0
 80040a2:	4b05      	ldr	r3, [pc, #20]	; (80040b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80040a4:	689b      	ldr	r3, [r3, #8]
 80040a6:	0b5b      	lsrs	r3, r3, #13
 80040a8:	f003 0307 	and.w	r3, r3, #7
 80040ac:	4903      	ldr	r1, [pc, #12]	; (80040bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80040ae:	5ccb      	ldrb	r3, [r1, r3]
 80040b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040b4:	4618      	mov	r0, r3
 80040b6:	bd80      	pop	{r7, pc}
 80040b8:	40023800 	.word	0x40023800
 80040bc:	08006c90 	.word	0x08006c90

080040c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b088      	sub	sp, #32
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80040c8:	2300      	movs	r3, #0
 80040ca:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80040cc:	2300      	movs	r3, #0
 80040ce:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80040d0:	2300      	movs	r3, #0
 80040d2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80040d4:	2300      	movs	r3, #0
 80040d6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80040d8:	2300      	movs	r3, #0
 80040da:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f003 0301 	and.w	r3, r3, #1
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d012      	beq.n	800410e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80040e8:	4b69      	ldr	r3, [pc, #420]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	4a68      	ldr	r2, [pc, #416]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040ee:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80040f2:	6093      	str	r3, [r2, #8]
 80040f4:	4b66      	ldr	r3, [pc, #408]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040f6:	689a      	ldr	r2, [r3, #8]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040fc:	4964      	ldr	r1, [pc, #400]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040fe:	4313      	orrs	r3, r2
 8004100:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004106:	2b00      	cmp	r3, #0
 8004108:	d101      	bne.n	800410e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800410a:	2301      	movs	r3, #1
 800410c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004116:	2b00      	cmp	r3, #0
 8004118:	d017      	beq.n	800414a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800411a:	4b5d      	ldr	r3, [pc, #372]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800411c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004120:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004128:	4959      	ldr	r1, [pc, #356]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800412a:	4313      	orrs	r3, r2
 800412c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004134:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004138:	d101      	bne.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800413a:	2301      	movs	r3, #1
 800413c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004142:	2b00      	cmp	r3, #0
 8004144:	d101      	bne.n	800414a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004146:	2301      	movs	r3, #1
 8004148:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004152:	2b00      	cmp	r3, #0
 8004154:	d017      	beq.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004156:	4b4e      	ldr	r3, [pc, #312]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004158:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800415c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004164:	494a      	ldr	r1, [pc, #296]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004166:	4313      	orrs	r3, r2
 8004168:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004170:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004174:	d101      	bne.n	800417a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004176:	2301      	movs	r3, #1
 8004178:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800417e:	2b00      	cmp	r3, #0
 8004180:	d101      	bne.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004182:	2301      	movs	r3, #1
 8004184:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800418e:	2b00      	cmp	r3, #0
 8004190:	d001      	beq.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004192:	2301      	movs	r3, #1
 8004194:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f003 0320 	and.w	r3, r3, #32
 800419e:	2b00      	cmp	r3, #0
 80041a0:	f000 808b 	beq.w	80042ba <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80041a4:	4b3a      	ldr	r3, [pc, #232]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a8:	4a39      	ldr	r2, [pc, #228]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041ae:	6413      	str	r3, [r2, #64]	; 0x40
 80041b0:	4b37      	ldr	r3, [pc, #220]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041b8:	60bb      	str	r3, [r7, #8]
 80041ba:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80041bc:	4b35      	ldr	r3, [pc, #212]	; (8004294 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a34      	ldr	r2, [pc, #208]	; (8004294 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80041c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041c6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041c8:	f7fe f9fc 	bl	80025c4 <HAL_GetTick>
 80041cc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80041ce:	e008      	b.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041d0:	f7fe f9f8 	bl	80025c4 <HAL_GetTick>
 80041d4:	4602      	mov	r2, r0
 80041d6:	697b      	ldr	r3, [r7, #20]
 80041d8:	1ad3      	subs	r3, r2, r3
 80041da:	2b64      	cmp	r3, #100	; 0x64
 80041dc:	d901      	bls.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80041de:	2303      	movs	r3, #3
 80041e0:	e357      	b.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80041e2:	4b2c      	ldr	r3, [pc, #176]	; (8004294 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d0f0      	beq.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80041ee:	4b28      	ldr	r3, [pc, #160]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041f6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80041f8:	693b      	ldr	r3, [r7, #16]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d035      	beq.n	800426a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004202:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004206:	693a      	ldr	r2, [r7, #16]
 8004208:	429a      	cmp	r2, r3
 800420a:	d02e      	beq.n	800426a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800420c:	4b20      	ldr	r3, [pc, #128]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800420e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004210:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004214:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004216:	4b1e      	ldr	r3, [pc, #120]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004218:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800421a:	4a1d      	ldr	r2, [pc, #116]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800421c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004220:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004222:	4b1b      	ldr	r3, [pc, #108]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004224:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004226:	4a1a      	ldr	r2, [pc, #104]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004228:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800422c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800422e:	4a18      	ldr	r2, [pc, #96]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004234:	4b16      	ldr	r3, [pc, #88]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004236:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004238:	f003 0301 	and.w	r3, r3, #1
 800423c:	2b01      	cmp	r3, #1
 800423e:	d114      	bne.n	800426a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004240:	f7fe f9c0 	bl	80025c4 <HAL_GetTick>
 8004244:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004246:	e00a      	b.n	800425e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004248:	f7fe f9bc 	bl	80025c4 <HAL_GetTick>
 800424c:	4602      	mov	r2, r0
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	1ad3      	subs	r3, r2, r3
 8004252:	f241 3288 	movw	r2, #5000	; 0x1388
 8004256:	4293      	cmp	r3, r2
 8004258:	d901      	bls.n	800425e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800425a:	2303      	movs	r3, #3
 800425c:	e319      	b.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800425e:	4b0c      	ldr	r3, [pc, #48]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004260:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004262:	f003 0302 	and.w	r3, r3, #2
 8004266:	2b00      	cmp	r3, #0
 8004268:	d0ee      	beq.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800426e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004272:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004276:	d111      	bne.n	800429c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004278:	4b05      	ldr	r3, [pc, #20]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004284:	4b04      	ldr	r3, [pc, #16]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004286:	400b      	ands	r3, r1
 8004288:	4901      	ldr	r1, [pc, #4]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800428a:	4313      	orrs	r3, r2
 800428c:	608b      	str	r3, [r1, #8]
 800428e:	e00b      	b.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004290:	40023800 	.word	0x40023800
 8004294:	40007000 	.word	0x40007000
 8004298:	0ffffcff 	.word	0x0ffffcff
 800429c:	4bb1      	ldr	r3, [pc, #708]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800429e:	689b      	ldr	r3, [r3, #8]
 80042a0:	4ab0      	ldr	r2, [pc, #704]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80042a2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80042a6:	6093      	str	r3, [r2, #8]
 80042a8:	4bae      	ldr	r3, [pc, #696]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80042aa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042b4:	49ab      	ldr	r1, [pc, #684]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80042b6:	4313      	orrs	r3, r2
 80042b8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f003 0310 	and.w	r3, r3, #16
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d010      	beq.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80042c6:	4ba7      	ldr	r3, [pc, #668]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80042c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042cc:	4aa5      	ldr	r2, [pc, #660]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80042ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80042d2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80042d6:	4ba3      	ldr	r3, [pc, #652]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80042d8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042e0:	49a0      	ldr	r1, [pc, #640]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80042e2:	4313      	orrs	r3, r2
 80042e4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d00a      	beq.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80042f4:	4b9b      	ldr	r3, [pc, #620]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80042f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042fa:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004302:	4998      	ldr	r1, [pc, #608]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004304:	4313      	orrs	r3, r2
 8004306:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004312:	2b00      	cmp	r3, #0
 8004314:	d00a      	beq.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004316:	4b93      	ldr	r3, [pc, #588]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004318:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800431c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004324:	498f      	ldr	r1, [pc, #572]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004326:	4313      	orrs	r3, r2
 8004328:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004334:	2b00      	cmp	r3, #0
 8004336:	d00a      	beq.n	800434e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004338:	4b8a      	ldr	r3, [pc, #552]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800433a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800433e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004346:	4987      	ldr	r1, [pc, #540]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004348:	4313      	orrs	r3, r2
 800434a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004356:	2b00      	cmp	r3, #0
 8004358:	d00a      	beq.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800435a:	4b82      	ldr	r3, [pc, #520]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800435c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004360:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004368:	497e      	ldr	r1, [pc, #504]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800436a:	4313      	orrs	r3, r2
 800436c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004378:	2b00      	cmp	r3, #0
 800437a:	d00a      	beq.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800437c:	4b79      	ldr	r3, [pc, #484]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800437e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004382:	f023 0203 	bic.w	r2, r3, #3
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800438a:	4976      	ldr	r1, [pc, #472]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800438c:	4313      	orrs	r3, r2
 800438e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800439a:	2b00      	cmp	r3, #0
 800439c:	d00a      	beq.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800439e:	4b71      	ldr	r3, [pc, #452]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80043a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043a4:	f023 020c 	bic.w	r2, r3, #12
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043ac:	496d      	ldr	r1, [pc, #436]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80043ae:	4313      	orrs	r3, r2
 80043b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d00a      	beq.n	80043d6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80043c0:	4b68      	ldr	r3, [pc, #416]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80043c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043c6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043ce:	4965      	ldr	r1, [pc, #404]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80043d0:	4313      	orrs	r3, r2
 80043d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d00a      	beq.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80043e2:	4b60      	ldr	r3, [pc, #384]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80043e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043e8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043f0:	495c      	ldr	r1, [pc, #368]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80043f2:	4313      	orrs	r3, r2
 80043f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004400:	2b00      	cmp	r3, #0
 8004402:	d00a      	beq.n	800441a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004404:	4b57      	ldr	r3, [pc, #348]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004406:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800440a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004412:	4954      	ldr	r1, [pc, #336]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004414:	4313      	orrs	r3, r2
 8004416:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004422:	2b00      	cmp	r3, #0
 8004424:	d00a      	beq.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004426:	4b4f      	ldr	r3, [pc, #316]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004428:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800442c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004434:	494b      	ldr	r1, [pc, #300]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004436:	4313      	orrs	r3, r2
 8004438:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004444:	2b00      	cmp	r3, #0
 8004446:	d00a      	beq.n	800445e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004448:	4b46      	ldr	r3, [pc, #280]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800444a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800444e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004456:	4943      	ldr	r1, [pc, #268]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004458:	4313      	orrs	r3, r2
 800445a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004466:	2b00      	cmp	r3, #0
 8004468:	d00a      	beq.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800446a:	4b3e      	ldr	r3, [pc, #248]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800446c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004470:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004478:	493a      	ldr	r1, [pc, #232]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800447a:	4313      	orrs	r3, r2
 800447c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004488:	2b00      	cmp	r3, #0
 800448a:	d00a      	beq.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800448c:	4b35      	ldr	r3, [pc, #212]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800448e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004492:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800449a:	4932      	ldr	r1, [pc, #200]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800449c:	4313      	orrs	r3, r2
 800449e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d011      	beq.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80044ae:	4b2d      	ldr	r3, [pc, #180]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80044b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044b4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80044bc:	4929      	ldr	r1, [pc, #164]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80044be:	4313      	orrs	r3, r2
 80044c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80044c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80044cc:	d101      	bne.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80044ce:	2301      	movs	r3, #1
 80044d0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f003 0308 	and.w	r3, r3, #8
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d001      	beq.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80044de:	2301      	movs	r3, #1
 80044e0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d00a      	beq.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80044ee:	4b1d      	ldr	r3, [pc, #116]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80044f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044f4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044fc:	4919      	ldr	r1, [pc, #100]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80044fe:	4313      	orrs	r3, r2
 8004500:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800450c:	2b00      	cmp	r3, #0
 800450e:	d00b      	beq.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004510:	4b14      	ldr	r3, [pc, #80]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004512:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004516:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004520:	4910      	ldr	r1, [pc, #64]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004522:	4313      	orrs	r3, r2
 8004524:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004528:	69fb      	ldr	r3, [r7, #28]
 800452a:	2b01      	cmp	r3, #1
 800452c:	d006      	beq.n	800453c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004536:	2b00      	cmp	r3, #0
 8004538:	f000 80d9 	beq.w	80046ee <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800453c:	4b09      	ldr	r3, [pc, #36]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a08      	ldr	r2, [pc, #32]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004542:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004546:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004548:	f7fe f83c 	bl	80025c4 <HAL_GetTick>
 800454c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800454e:	e00b      	b.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004550:	f7fe f838 	bl	80025c4 <HAL_GetTick>
 8004554:	4602      	mov	r2, r0
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	1ad3      	subs	r3, r2, r3
 800455a:	2b64      	cmp	r3, #100	; 0x64
 800455c:	d904      	bls.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800455e:	2303      	movs	r3, #3
 8004560:	e197      	b.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8004562:	bf00      	nop
 8004564:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004568:	4b6c      	ldr	r3, [pc, #432]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004570:	2b00      	cmp	r3, #0
 8004572:	d1ed      	bne.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f003 0301 	and.w	r3, r3, #1
 800457c:	2b00      	cmp	r3, #0
 800457e:	d021      	beq.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004584:	2b00      	cmp	r3, #0
 8004586:	d11d      	bne.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004588:	4b64      	ldr	r3, [pc, #400]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800458a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800458e:	0c1b      	lsrs	r3, r3, #16
 8004590:	f003 0303 	and.w	r3, r3, #3
 8004594:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004596:	4b61      	ldr	r3, [pc, #388]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004598:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800459c:	0e1b      	lsrs	r3, r3, #24
 800459e:	f003 030f 	and.w	r3, r3, #15
 80045a2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	019a      	lsls	r2, r3, #6
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	041b      	lsls	r3, r3, #16
 80045ae:	431a      	orrs	r2, r3
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	061b      	lsls	r3, r3, #24
 80045b4:	431a      	orrs	r2, r3
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	689b      	ldr	r3, [r3, #8]
 80045ba:	071b      	lsls	r3, r3, #28
 80045bc:	4957      	ldr	r1, [pc, #348]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80045be:	4313      	orrs	r3, r2
 80045c0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d004      	beq.n	80045da <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80045d8:	d00a      	beq.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d02e      	beq.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80045ee:	d129      	bne.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80045f0:	4b4a      	ldr	r3, [pc, #296]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80045f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045f6:	0c1b      	lsrs	r3, r3, #16
 80045f8:	f003 0303 	and.w	r3, r3, #3
 80045fc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80045fe:	4b47      	ldr	r3, [pc, #284]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004600:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004604:	0f1b      	lsrs	r3, r3, #28
 8004606:	f003 0307 	and.w	r3, r3, #7
 800460a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	019a      	lsls	r2, r3, #6
 8004612:	693b      	ldr	r3, [r7, #16]
 8004614:	041b      	lsls	r3, r3, #16
 8004616:	431a      	orrs	r2, r3
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	68db      	ldr	r3, [r3, #12]
 800461c:	061b      	lsls	r3, r3, #24
 800461e:	431a      	orrs	r2, r3
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	071b      	lsls	r3, r3, #28
 8004624:	493d      	ldr	r1, [pc, #244]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004626:	4313      	orrs	r3, r2
 8004628:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800462c:	4b3b      	ldr	r3, [pc, #236]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800462e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004632:	f023 021f 	bic.w	r2, r3, #31
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800463a:	3b01      	subs	r3, #1
 800463c:	4937      	ldr	r1, [pc, #220]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800463e:	4313      	orrs	r3, r2
 8004640:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800464c:	2b00      	cmp	r3, #0
 800464e:	d01d      	beq.n	800468c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004650:	4b32      	ldr	r3, [pc, #200]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004652:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004656:	0e1b      	lsrs	r3, r3, #24
 8004658:	f003 030f 	and.w	r3, r3, #15
 800465c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800465e:	4b2f      	ldr	r3, [pc, #188]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004660:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004664:	0f1b      	lsrs	r3, r3, #28
 8004666:	f003 0307 	and.w	r3, r3, #7
 800466a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	019a      	lsls	r2, r3, #6
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	691b      	ldr	r3, [r3, #16]
 8004676:	041b      	lsls	r3, r3, #16
 8004678:	431a      	orrs	r2, r3
 800467a:	693b      	ldr	r3, [r7, #16]
 800467c:	061b      	lsls	r3, r3, #24
 800467e:	431a      	orrs	r2, r3
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	071b      	lsls	r3, r3, #28
 8004684:	4925      	ldr	r1, [pc, #148]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004686:	4313      	orrs	r3, r2
 8004688:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004694:	2b00      	cmp	r3, #0
 8004696:	d011      	beq.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	019a      	lsls	r2, r3, #6
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	691b      	ldr	r3, [r3, #16]
 80046a2:	041b      	lsls	r3, r3, #16
 80046a4:	431a      	orrs	r2, r3
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	68db      	ldr	r3, [r3, #12]
 80046aa:	061b      	lsls	r3, r3, #24
 80046ac:	431a      	orrs	r2, r3
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	689b      	ldr	r3, [r3, #8]
 80046b2:	071b      	lsls	r3, r3, #28
 80046b4:	4919      	ldr	r1, [pc, #100]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80046b6:	4313      	orrs	r3, r2
 80046b8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80046bc:	4b17      	ldr	r3, [pc, #92]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a16      	ldr	r2, [pc, #88]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80046c2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80046c6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046c8:	f7fd ff7c 	bl	80025c4 <HAL_GetTick>
 80046cc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80046ce:	e008      	b.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80046d0:	f7fd ff78 	bl	80025c4 <HAL_GetTick>
 80046d4:	4602      	mov	r2, r0
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	1ad3      	subs	r3, r2, r3
 80046da:	2b64      	cmp	r3, #100	; 0x64
 80046dc:	d901      	bls.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80046de:	2303      	movs	r3, #3
 80046e0:	e0d7      	b.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80046e2:	4b0e      	ldr	r3, [pc, #56]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d0f0      	beq.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80046ee:	69bb      	ldr	r3, [r7, #24]
 80046f0:	2b01      	cmp	r3, #1
 80046f2:	f040 80cd 	bne.w	8004890 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80046f6:	4b09      	ldr	r3, [pc, #36]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a08      	ldr	r2, [pc, #32]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80046fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004700:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004702:	f7fd ff5f 	bl	80025c4 <HAL_GetTick>
 8004706:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004708:	e00a      	b.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800470a:	f7fd ff5b 	bl	80025c4 <HAL_GetTick>
 800470e:	4602      	mov	r2, r0
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	1ad3      	subs	r3, r2, r3
 8004714:	2b64      	cmp	r3, #100	; 0x64
 8004716:	d903      	bls.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004718:	2303      	movs	r3, #3
 800471a:	e0ba      	b.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800471c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004720:	4b5e      	ldr	r3, [pc, #376]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004728:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800472c:	d0ed      	beq.n	800470a <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004736:	2b00      	cmp	r3, #0
 8004738:	d003      	beq.n	8004742 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800473e:	2b00      	cmp	r3, #0
 8004740:	d009      	beq.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800474a:	2b00      	cmp	r3, #0
 800474c:	d02e      	beq.n	80047ac <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004752:	2b00      	cmp	r3, #0
 8004754:	d12a      	bne.n	80047ac <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004756:	4b51      	ldr	r3, [pc, #324]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004758:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800475c:	0c1b      	lsrs	r3, r3, #16
 800475e:	f003 0303 	and.w	r3, r3, #3
 8004762:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004764:	4b4d      	ldr	r3, [pc, #308]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004766:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800476a:	0f1b      	lsrs	r3, r3, #28
 800476c:	f003 0307 	and.w	r3, r3, #7
 8004770:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	695b      	ldr	r3, [r3, #20]
 8004776:	019a      	lsls	r2, r3, #6
 8004778:	693b      	ldr	r3, [r7, #16]
 800477a:	041b      	lsls	r3, r3, #16
 800477c:	431a      	orrs	r2, r3
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	699b      	ldr	r3, [r3, #24]
 8004782:	061b      	lsls	r3, r3, #24
 8004784:	431a      	orrs	r2, r3
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	071b      	lsls	r3, r3, #28
 800478a:	4944      	ldr	r1, [pc, #272]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800478c:	4313      	orrs	r3, r2
 800478e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004792:	4b42      	ldr	r3, [pc, #264]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004794:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004798:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047a0:	3b01      	subs	r3, #1
 80047a2:	021b      	lsls	r3, r3, #8
 80047a4:	493d      	ldr	r1, [pc, #244]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80047a6:	4313      	orrs	r3, r2
 80047a8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d022      	beq.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80047bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80047c0:	d11d      	bne.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80047c2:	4b36      	ldr	r3, [pc, #216]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80047c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047c8:	0e1b      	lsrs	r3, r3, #24
 80047ca:	f003 030f 	and.w	r3, r3, #15
 80047ce:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80047d0:	4b32      	ldr	r3, [pc, #200]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80047d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047d6:	0f1b      	lsrs	r3, r3, #28
 80047d8:	f003 0307 	and.w	r3, r3, #7
 80047dc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	695b      	ldr	r3, [r3, #20]
 80047e2:	019a      	lsls	r2, r3, #6
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6a1b      	ldr	r3, [r3, #32]
 80047e8:	041b      	lsls	r3, r3, #16
 80047ea:	431a      	orrs	r2, r3
 80047ec:	693b      	ldr	r3, [r7, #16]
 80047ee:	061b      	lsls	r3, r3, #24
 80047f0:	431a      	orrs	r2, r3
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	071b      	lsls	r3, r3, #28
 80047f6:	4929      	ldr	r1, [pc, #164]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80047f8:	4313      	orrs	r3, r2
 80047fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f003 0308 	and.w	r3, r3, #8
 8004806:	2b00      	cmp	r3, #0
 8004808:	d028      	beq.n	800485c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800480a:	4b24      	ldr	r3, [pc, #144]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800480c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004810:	0e1b      	lsrs	r3, r3, #24
 8004812:	f003 030f 	and.w	r3, r3, #15
 8004816:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004818:	4b20      	ldr	r3, [pc, #128]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800481a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800481e:	0c1b      	lsrs	r3, r3, #16
 8004820:	f003 0303 	and.w	r3, r3, #3
 8004824:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	695b      	ldr	r3, [r3, #20]
 800482a:	019a      	lsls	r2, r3, #6
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	041b      	lsls	r3, r3, #16
 8004830:	431a      	orrs	r2, r3
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	061b      	lsls	r3, r3, #24
 8004836:	431a      	orrs	r2, r3
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	69db      	ldr	r3, [r3, #28]
 800483c:	071b      	lsls	r3, r3, #28
 800483e:	4917      	ldr	r1, [pc, #92]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004840:	4313      	orrs	r3, r2
 8004842:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004846:	4b15      	ldr	r3, [pc, #84]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004848:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800484c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004854:	4911      	ldr	r1, [pc, #68]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004856:	4313      	orrs	r3, r2
 8004858:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800485c:	4b0f      	ldr	r3, [pc, #60]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a0e      	ldr	r2, [pc, #56]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004862:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004866:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004868:	f7fd feac 	bl	80025c4 <HAL_GetTick>
 800486c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800486e:	e008      	b.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004870:	f7fd fea8 	bl	80025c4 <HAL_GetTick>
 8004874:	4602      	mov	r2, r0
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	1ad3      	subs	r3, r2, r3
 800487a:	2b64      	cmp	r3, #100	; 0x64
 800487c:	d901      	bls.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800487e:	2303      	movs	r3, #3
 8004880:	e007      	b.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004882:	4b06      	ldr	r3, [pc, #24]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800488a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800488e:	d1ef      	bne.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8004890:	2300      	movs	r3, #0
}
 8004892:	4618      	mov	r0, r3
 8004894:	3720      	adds	r7, #32
 8004896:	46bd      	mov	sp, r7
 8004898:	bd80      	pop	{r7, pc}
 800489a:	bf00      	nop
 800489c:	40023800 	.word	0x40023800

080048a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b082      	sub	sp, #8
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d101      	bne.n	80048b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80048ae:	2301      	movs	r3, #1
 80048b0:	e049      	b.n	8004946 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048b8:	b2db      	uxtb	r3, r3
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d106      	bne.n	80048cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2200      	movs	r2, #0
 80048c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80048c6:	6878      	ldr	r0, [r7, #4]
 80048c8:	f7fd fcf0 	bl	80022ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2202      	movs	r2, #2
 80048d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681a      	ldr	r2, [r3, #0]
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	3304      	adds	r3, #4
 80048dc:	4619      	mov	r1, r3
 80048de:	4610      	mov	r0, r2
 80048e0:	f000 fac0 	bl	8004e64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2201      	movs	r2, #1
 80048e8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2201      	movs	r2, #1
 80048f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2201      	movs	r2, #1
 80048f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2201      	movs	r2, #1
 8004900:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2201      	movs	r2, #1
 8004908:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2201      	movs	r2, #1
 8004910:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2201      	movs	r2, #1
 8004918:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2201      	movs	r2, #1
 8004920:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2201      	movs	r2, #1
 8004928:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2201      	movs	r2, #1
 8004930:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2201      	movs	r2, #1
 8004938:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2201      	movs	r2, #1
 8004940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004944:	2300      	movs	r3, #0
}
 8004946:	4618      	mov	r0, r3
 8004948:	3708      	adds	r7, #8
 800494a:	46bd      	mov	sp, r7
 800494c:	bd80      	pop	{r7, pc}
	...

08004950 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004950:	b480      	push	{r7}
 8004952:	b085      	sub	sp, #20
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800495e:	b2db      	uxtb	r3, r3
 8004960:	2b01      	cmp	r3, #1
 8004962:	d001      	beq.n	8004968 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004964:	2301      	movs	r3, #1
 8004966:	e054      	b.n	8004a12 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2202      	movs	r2, #2
 800496c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	68da      	ldr	r2, [r3, #12]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f042 0201 	orr.w	r2, r2, #1
 800497e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4a26      	ldr	r2, [pc, #152]	; (8004a20 <HAL_TIM_Base_Start_IT+0xd0>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d022      	beq.n	80049d0 <HAL_TIM_Base_Start_IT+0x80>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004992:	d01d      	beq.n	80049d0 <HAL_TIM_Base_Start_IT+0x80>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a22      	ldr	r2, [pc, #136]	; (8004a24 <HAL_TIM_Base_Start_IT+0xd4>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d018      	beq.n	80049d0 <HAL_TIM_Base_Start_IT+0x80>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4a21      	ldr	r2, [pc, #132]	; (8004a28 <HAL_TIM_Base_Start_IT+0xd8>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d013      	beq.n	80049d0 <HAL_TIM_Base_Start_IT+0x80>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4a1f      	ldr	r2, [pc, #124]	; (8004a2c <HAL_TIM_Base_Start_IT+0xdc>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d00e      	beq.n	80049d0 <HAL_TIM_Base_Start_IT+0x80>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4a1e      	ldr	r2, [pc, #120]	; (8004a30 <HAL_TIM_Base_Start_IT+0xe0>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d009      	beq.n	80049d0 <HAL_TIM_Base_Start_IT+0x80>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a1c      	ldr	r2, [pc, #112]	; (8004a34 <HAL_TIM_Base_Start_IT+0xe4>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d004      	beq.n	80049d0 <HAL_TIM_Base_Start_IT+0x80>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4a1b      	ldr	r2, [pc, #108]	; (8004a38 <HAL_TIM_Base_Start_IT+0xe8>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d115      	bne.n	80049fc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	689a      	ldr	r2, [r3, #8]
 80049d6:	4b19      	ldr	r3, [pc, #100]	; (8004a3c <HAL_TIM_Base_Start_IT+0xec>)
 80049d8:	4013      	ands	r3, r2
 80049da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	2b06      	cmp	r3, #6
 80049e0:	d015      	beq.n	8004a0e <HAL_TIM_Base_Start_IT+0xbe>
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049e8:	d011      	beq.n	8004a0e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	681a      	ldr	r2, [r3, #0]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f042 0201 	orr.w	r2, r2, #1
 80049f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049fa:	e008      	b.n	8004a0e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	681a      	ldr	r2, [r3, #0]
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f042 0201 	orr.w	r2, r2, #1
 8004a0a:	601a      	str	r2, [r3, #0]
 8004a0c:	e000      	b.n	8004a10 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a0e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004a10:	2300      	movs	r3, #0
}
 8004a12:	4618      	mov	r0, r3
 8004a14:	3714      	adds	r7, #20
 8004a16:	46bd      	mov	sp, r7
 8004a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1c:	4770      	bx	lr
 8004a1e:	bf00      	nop
 8004a20:	40010000 	.word	0x40010000
 8004a24:	40000400 	.word	0x40000400
 8004a28:	40000800 	.word	0x40000800
 8004a2c:	40000c00 	.word	0x40000c00
 8004a30:	40010400 	.word	0x40010400
 8004a34:	40014000 	.word	0x40014000
 8004a38:	40001800 	.word	0x40001800
 8004a3c:	00010007 	.word	0x00010007

08004a40 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b082      	sub	sp, #8
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	691b      	ldr	r3, [r3, #16]
 8004a4e:	f003 0302 	and.w	r3, r3, #2
 8004a52:	2b02      	cmp	r3, #2
 8004a54:	d122      	bne.n	8004a9c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	68db      	ldr	r3, [r3, #12]
 8004a5c:	f003 0302 	and.w	r3, r3, #2
 8004a60:	2b02      	cmp	r3, #2
 8004a62:	d11b      	bne.n	8004a9c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f06f 0202 	mvn.w	r2, #2
 8004a6c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2201      	movs	r2, #1
 8004a72:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	699b      	ldr	r3, [r3, #24]
 8004a7a:	f003 0303 	and.w	r3, r3, #3
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d003      	beq.n	8004a8a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004a82:	6878      	ldr	r0, [r7, #4]
 8004a84:	f000 f9d0 	bl	8004e28 <HAL_TIM_IC_CaptureCallback>
 8004a88:	e005      	b.n	8004a96 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a8a:	6878      	ldr	r0, [r7, #4]
 8004a8c:	f000 f9c2 	bl	8004e14 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a90:	6878      	ldr	r0, [r7, #4]
 8004a92:	f000 f9d3 	bl	8004e3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	691b      	ldr	r3, [r3, #16]
 8004aa2:	f003 0304 	and.w	r3, r3, #4
 8004aa6:	2b04      	cmp	r3, #4
 8004aa8:	d122      	bne.n	8004af0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	68db      	ldr	r3, [r3, #12]
 8004ab0:	f003 0304 	and.w	r3, r3, #4
 8004ab4:	2b04      	cmp	r3, #4
 8004ab6:	d11b      	bne.n	8004af0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f06f 0204 	mvn.w	r2, #4
 8004ac0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2202      	movs	r2, #2
 8004ac6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	699b      	ldr	r3, [r3, #24]
 8004ace:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d003      	beq.n	8004ade <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ad6:	6878      	ldr	r0, [r7, #4]
 8004ad8:	f000 f9a6 	bl	8004e28 <HAL_TIM_IC_CaptureCallback>
 8004adc:	e005      	b.n	8004aea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ade:	6878      	ldr	r0, [r7, #4]
 8004ae0:	f000 f998 	bl	8004e14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ae4:	6878      	ldr	r0, [r7, #4]
 8004ae6:	f000 f9a9 	bl	8004e3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2200      	movs	r2, #0
 8004aee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	691b      	ldr	r3, [r3, #16]
 8004af6:	f003 0308 	and.w	r3, r3, #8
 8004afa:	2b08      	cmp	r3, #8
 8004afc:	d122      	bne.n	8004b44 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	68db      	ldr	r3, [r3, #12]
 8004b04:	f003 0308 	and.w	r3, r3, #8
 8004b08:	2b08      	cmp	r3, #8
 8004b0a:	d11b      	bne.n	8004b44 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f06f 0208 	mvn.w	r2, #8
 8004b14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2204      	movs	r2, #4
 8004b1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	69db      	ldr	r3, [r3, #28]
 8004b22:	f003 0303 	and.w	r3, r3, #3
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d003      	beq.n	8004b32 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b2a:	6878      	ldr	r0, [r7, #4]
 8004b2c:	f000 f97c 	bl	8004e28 <HAL_TIM_IC_CaptureCallback>
 8004b30:	e005      	b.n	8004b3e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b32:	6878      	ldr	r0, [r7, #4]
 8004b34:	f000 f96e 	bl	8004e14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b38:	6878      	ldr	r0, [r7, #4]
 8004b3a:	f000 f97f 	bl	8004e3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2200      	movs	r2, #0
 8004b42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	691b      	ldr	r3, [r3, #16]
 8004b4a:	f003 0310 	and.w	r3, r3, #16
 8004b4e:	2b10      	cmp	r3, #16
 8004b50:	d122      	bne.n	8004b98 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	68db      	ldr	r3, [r3, #12]
 8004b58:	f003 0310 	and.w	r3, r3, #16
 8004b5c:	2b10      	cmp	r3, #16
 8004b5e:	d11b      	bne.n	8004b98 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f06f 0210 	mvn.w	r2, #16
 8004b68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2208      	movs	r2, #8
 8004b6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	69db      	ldr	r3, [r3, #28]
 8004b76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d003      	beq.n	8004b86 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	f000 f952 	bl	8004e28 <HAL_TIM_IC_CaptureCallback>
 8004b84:	e005      	b.n	8004b92 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b86:	6878      	ldr	r0, [r7, #4]
 8004b88:	f000 f944 	bl	8004e14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b8c:	6878      	ldr	r0, [r7, #4]
 8004b8e:	f000 f955 	bl	8004e3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2200      	movs	r2, #0
 8004b96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	691b      	ldr	r3, [r3, #16]
 8004b9e:	f003 0301 	and.w	r3, r3, #1
 8004ba2:	2b01      	cmp	r3, #1
 8004ba4:	d10e      	bne.n	8004bc4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	68db      	ldr	r3, [r3, #12]
 8004bac:	f003 0301 	and.w	r3, r3, #1
 8004bb0:	2b01      	cmp	r3, #1
 8004bb2:	d107      	bne.n	8004bc4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f06f 0201 	mvn.w	r2, #1
 8004bbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004bbe:	6878      	ldr	r0, [r7, #4]
 8004bc0:	f7fc fd0a 	bl	80015d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	691b      	ldr	r3, [r3, #16]
 8004bca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bce:	2b80      	cmp	r3, #128	; 0x80
 8004bd0:	d10e      	bne.n	8004bf0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	68db      	ldr	r3, [r3, #12]
 8004bd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bdc:	2b80      	cmp	r3, #128	; 0x80
 8004bde:	d107      	bne.n	8004bf0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004be8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004bea:	6878      	ldr	r0, [r7, #4]
 8004bec:	f000 fb0c 	bl	8005208 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	691b      	ldr	r3, [r3, #16]
 8004bf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bfa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bfe:	d10e      	bne.n	8004c1e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	68db      	ldr	r3, [r3, #12]
 8004c06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c0a:	2b80      	cmp	r3, #128	; 0x80
 8004c0c:	d107      	bne.n	8004c1e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004c16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004c18:	6878      	ldr	r0, [r7, #4]
 8004c1a:	f000 faff 	bl	800521c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	691b      	ldr	r3, [r3, #16]
 8004c24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c28:	2b40      	cmp	r3, #64	; 0x40
 8004c2a:	d10e      	bne.n	8004c4a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	68db      	ldr	r3, [r3, #12]
 8004c32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c36:	2b40      	cmp	r3, #64	; 0x40
 8004c38:	d107      	bne.n	8004c4a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004c42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004c44:	6878      	ldr	r0, [r7, #4]
 8004c46:	f000 f903 	bl	8004e50 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	691b      	ldr	r3, [r3, #16]
 8004c50:	f003 0320 	and.w	r3, r3, #32
 8004c54:	2b20      	cmp	r3, #32
 8004c56:	d10e      	bne.n	8004c76 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	68db      	ldr	r3, [r3, #12]
 8004c5e:	f003 0320 	and.w	r3, r3, #32
 8004c62:	2b20      	cmp	r3, #32
 8004c64:	d107      	bne.n	8004c76 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f06f 0220 	mvn.w	r2, #32
 8004c6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004c70:	6878      	ldr	r0, [r7, #4]
 8004c72:	f000 fabf 	bl	80051f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004c76:	bf00      	nop
 8004c78:	3708      	adds	r7, #8
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bd80      	pop	{r7, pc}
	...

08004c80 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b084      	sub	sp, #16
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
 8004c88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c94:	2b01      	cmp	r3, #1
 8004c96:	d101      	bne.n	8004c9c <HAL_TIM_ConfigClockSource+0x1c>
 8004c98:	2302      	movs	r3, #2
 8004c9a:	e0b4      	b.n	8004e06 <HAL_TIM_ConfigClockSource+0x186>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2201      	movs	r2, #1
 8004ca0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2202      	movs	r2, #2
 8004ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	689b      	ldr	r3, [r3, #8]
 8004cb2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004cb4:	68ba      	ldr	r2, [r7, #8]
 8004cb6:	4b56      	ldr	r3, [pc, #344]	; (8004e10 <HAL_TIM_ConfigClockSource+0x190>)
 8004cb8:	4013      	ands	r3, r2
 8004cba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004cc2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	68ba      	ldr	r2, [r7, #8]
 8004cca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004cd4:	d03e      	beq.n	8004d54 <HAL_TIM_ConfigClockSource+0xd4>
 8004cd6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004cda:	f200 8087 	bhi.w	8004dec <HAL_TIM_ConfigClockSource+0x16c>
 8004cde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ce2:	f000 8086 	beq.w	8004df2 <HAL_TIM_ConfigClockSource+0x172>
 8004ce6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cea:	d87f      	bhi.n	8004dec <HAL_TIM_ConfigClockSource+0x16c>
 8004cec:	2b70      	cmp	r3, #112	; 0x70
 8004cee:	d01a      	beq.n	8004d26 <HAL_TIM_ConfigClockSource+0xa6>
 8004cf0:	2b70      	cmp	r3, #112	; 0x70
 8004cf2:	d87b      	bhi.n	8004dec <HAL_TIM_ConfigClockSource+0x16c>
 8004cf4:	2b60      	cmp	r3, #96	; 0x60
 8004cf6:	d050      	beq.n	8004d9a <HAL_TIM_ConfigClockSource+0x11a>
 8004cf8:	2b60      	cmp	r3, #96	; 0x60
 8004cfa:	d877      	bhi.n	8004dec <HAL_TIM_ConfigClockSource+0x16c>
 8004cfc:	2b50      	cmp	r3, #80	; 0x50
 8004cfe:	d03c      	beq.n	8004d7a <HAL_TIM_ConfigClockSource+0xfa>
 8004d00:	2b50      	cmp	r3, #80	; 0x50
 8004d02:	d873      	bhi.n	8004dec <HAL_TIM_ConfigClockSource+0x16c>
 8004d04:	2b40      	cmp	r3, #64	; 0x40
 8004d06:	d058      	beq.n	8004dba <HAL_TIM_ConfigClockSource+0x13a>
 8004d08:	2b40      	cmp	r3, #64	; 0x40
 8004d0a:	d86f      	bhi.n	8004dec <HAL_TIM_ConfigClockSource+0x16c>
 8004d0c:	2b30      	cmp	r3, #48	; 0x30
 8004d0e:	d064      	beq.n	8004dda <HAL_TIM_ConfigClockSource+0x15a>
 8004d10:	2b30      	cmp	r3, #48	; 0x30
 8004d12:	d86b      	bhi.n	8004dec <HAL_TIM_ConfigClockSource+0x16c>
 8004d14:	2b20      	cmp	r3, #32
 8004d16:	d060      	beq.n	8004dda <HAL_TIM_ConfigClockSource+0x15a>
 8004d18:	2b20      	cmp	r3, #32
 8004d1a:	d867      	bhi.n	8004dec <HAL_TIM_ConfigClockSource+0x16c>
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d05c      	beq.n	8004dda <HAL_TIM_ConfigClockSource+0x15a>
 8004d20:	2b10      	cmp	r3, #16
 8004d22:	d05a      	beq.n	8004dda <HAL_TIM_ConfigClockSource+0x15a>
 8004d24:	e062      	b.n	8004dec <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6818      	ldr	r0, [r3, #0]
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	6899      	ldr	r1, [r3, #8]
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	685a      	ldr	r2, [r3, #4]
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	68db      	ldr	r3, [r3, #12]
 8004d36:	f000 f9af 	bl	8005098 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	689b      	ldr	r3, [r3, #8]
 8004d40:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004d48:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	68ba      	ldr	r2, [r7, #8]
 8004d50:	609a      	str	r2, [r3, #8]
      break;
 8004d52:	e04f      	b.n	8004df4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6818      	ldr	r0, [r3, #0]
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	6899      	ldr	r1, [r3, #8]
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	685a      	ldr	r2, [r3, #4]
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	68db      	ldr	r3, [r3, #12]
 8004d64:	f000 f998 	bl	8005098 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	689a      	ldr	r2, [r3, #8]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004d76:	609a      	str	r2, [r3, #8]
      break;
 8004d78:	e03c      	b.n	8004df4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6818      	ldr	r0, [r3, #0]
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	6859      	ldr	r1, [r3, #4]
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	68db      	ldr	r3, [r3, #12]
 8004d86:	461a      	mov	r2, r3
 8004d88:	f000 f90c 	bl	8004fa4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	2150      	movs	r1, #80	; 0x50
 8004d92:	4618      	mov	r0, r3
 8004d94:	f000 f965 	bl	8005062 <TIM_ITRx_SetConfig>
      break;
 8004d98:	e02c      	b.n	8004df4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6818      	ldr	r0, [r3, #0]
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	6859      	ldr	r1, [r3, #4]
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	68db      	ldr	r3, [r3, #12]
 8004da6:	461a      	mov	r2, r3
 8004da8:	f000 f92b 	bl	8005002 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	2160      	movs	r1, #96	; 0x60
 8004db2:	4618      	mov	r0, r3
 8004db4:	f000 f955 	bl	8005062 <TIM_ITRx_SetConfig>
      break;
 8004db8:	e01c      	b.n	8004df4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6818      	ldr	r0, [r3, #0]
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	6859      	ldr	r1, [r3, #4]
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	68db      	ldr	r3, [r3, #12]
 8004dc6:	461a      	mov	r2, r3
 8004dc8:	f000 f8ec 	bl	8004fa4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	2140      	movs	r1, #64	; 0x40
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	f000 f945 	bl	8005062 <TIM_ITRx_SetConfig>
      break;
 8004dd8:	e00c      	b.n	8004df4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681a      	ldr	r2, [r3, #0]
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4619      	mov	r1, r3
 8004de4:	4610      	mov	r0, r2
 8004de6:	f000 f93c 	bl	8005062 <TIM_ITRx_SetConfig>
      break;
 8004dea:	e003      	b.n	8004df4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004dec:	2301      	movs	r3, #1
 8004dee:	73fb      	strb	r3, [r7, #15]
      break;
 8004df0:	e000      	b.n	8004df4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004df2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2201      	movs	r2, #1
 8004df8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004e04:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e06:	4618      	mov	r0, r3
 8004e08:	3710      	adds	r7, #16
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	bd80      	pop	{r7, pc}
 8004e0e:	bf00      	nop
 8004e10:	fffeff88 	.word	0xfffeff88

08004e14 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e14:	b480      	push	{r7}
 8004e16:	b083      	sub	sp, #12
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004e1c:	bf00      	nop
 8004e1e:	370c      	adds	r7, #12
 8004e20:	46bd      	mov	sp, r7
 8004e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e26:	4770      	bx	lr

08004e28 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	b083      	sub	sp, #12
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004e30:	bf00      	nop
 8004e32:	370c      	adds	r7, #12
 8004e34:	46bd      	mov	sp, r7
 8004e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3a:	4770      	bx	lr

08004e3c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	b083      	sub	sp, #12
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004e44:	bf00      	nop
 8004e46:	370c      	adds	r7, #12
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4e:	4770      	bx	lr

08004e50 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004e50:	b480      	push	{r7}
 8004e52:	b083      	sub	sp, #12
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004e58:	bf00      	nop
 8004e5a:	370c      	adds	r7, #12
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e62:	4770      	bx	lr

08004e64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004e64:	b480      	push	{r7}
 8004e66:	b085      	sub	sp, #20
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
 8004e6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	4a40      	ldr	r2, [pc, #256]	; (8004f78 <TIM_Base_SetConfig+0x114>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d013      	beq.n	8004ea4 <TIM_Base_SetConfig+0x40>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e82:	d00f      	beq.n	8004ea4 <TIM_Base_SetConfig+0x40>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	4a3d      	ldr	r2, [pc, #244]	; (8004f7c <TIM_Base_SetConfig+0x118>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d00b      	beq.n	8004ea4 <TIM_Base_SetConfig+0x40>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	4a3c      	ldr	r2, [pc, #240]	; (8004f80 <TIM_Base_SetConfig+0x11c>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d007      	beq.n	8004ea4 <TIM_Base_SetConfig+0x40>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	4a3b      	ldr	r2, [pc, #236]	; (8004f84 <TIM_Base_SetConfig+0x120>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d003      	beq.n	8004ea4 <TIM_Base_SetConfig+0x40>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	4a3a      	ldr	r2, [pc, #232]	; (8004f88 <TIM_Base_SetConfig+0x124>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d108      	bne.n	8004eb6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004eaa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	685b      	ldr	r3, [r3, #4]
 8004eb0:	68fa      	ldr	r2, [r7, #12]
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	4a2f      	ldr	r2, [pc, #188]	; (8004f78 <TIM_Base_SetConfig+0x114>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d02b      	beq.n	8004f16 <TIM_Base_SetConfig+0xb2>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ec4:	d027      	beq.n	8004f16 <TIM_Base_SetConfig+0xb2>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	4a2c      	ldr	r2, [pc, #176]	; (8004f7c <TIM_Base_SetConfig+0x118>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d023      	beq.n	8004f16 <TIM_Base_SetConfig+0xb2>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	4a2b      	ldr	r2, [pc, #172]	; (8004f80 <TIM_Base_SetConfig+0x11c>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d01f      	beq.n	8004f16 <TIM_Base_SetConfig+0xb2>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	4a2a      	ldr	r2, [pc, #168]	; (8004f84 <TIM_Base_SetConfig+0x120>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d01b      	beq.n	8004f16 <TIM_Base_SetConfig+0xb2>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	4a29      	ldr	r2, [pc, #164]	; (8004f88 <TIM_Base_SetConfig+0x124>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d017      	beq.n	8004f16 <TIM_Base_SetConfig+0xb2>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	4a28      	ldr	r2, [pc, #160]	; (8004f8c <TIM_Base_SetConfig+0x128>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d013      	beq.n	8004f16 <TIM_Base_SetConfig+0xb2>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	4a27      	ldr	r2, [pc, #156]	; (8004f90 <TIM_Base_SetConfig+0x12c>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d00f      	beq.n	8004f16 <TIM_Base_SetConfig+0xb2>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	4a26      	ldr	r2, [pc, #152]	; (8004f94 <TIM_Base_SetConfig+0x130>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d00b      	beq.n	8004f16 <TIM_Base_SetConfig+0xb2>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	4a25      	ldr	r2, [pc, #148]	; (8004f98 <TIM_Base_SetConfig+0x134>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d007      	beq.n	8004f16 <TIM_Base_SetConfig+0xb2>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	4a24      	ldr	r2, [pc, #144]	; (8004f9c <TIM_Base_SetConfig+0x138>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d003      	beq.n	8004f16 <TIM_Base_SetConfig+0xb2>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	4a23      	ldr	r2, [pc, #140]	; (8004fa0 <TIM_Base_SetConfig+0x13c>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d108      	bne.n	8004f28 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	68db      	ldr	r3, [r3, #12]
 8004f22:	68fa      	ldr	r2, [r7, #12]
 8004f24:	4313      	orrs	r3, r2
 8004f26:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	695b      	ldr	r3, [r3, #20]
 8004f32:	4313      	orrs	r3, r2
 8004f34:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	68fa      	ldr	r2, [r7, #12]
 8004f3a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	689a      	ldr	r2, [r3, #8]
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	681a      	ldr	r2, [r3, #0]
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	4a0a      	ldr	r2, [pc, #40]	; (8004f78 <TIM_Base_SetConfig+0x114>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d003      	beq.n	8004f5c <TIM_Base_SetConfig+0xf8>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	4a0c      	ldr	r2, [pc, #48]	; (8004f88 <TIM_Base_SetConfig+0x124>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d103      	bne.n	8004f64 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	691a      	ldr	r2, [r3, #16]
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2201      	movs	r2, #1
 8004f68:	615a      	str	r2, [r3, #20]
}
 8004f6a:	bf00      	nop
 8004f6c:	3714      	adds	r7, #20
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f74:	4770      	bx	lr
 8004f76:	bf00      	nop
 8004f78:	40010000 	.word	0x40010000
 8004f7c:	40000400 	.word	0x40000400
 8004f80:	40000800 	.word	0x40000800
 8004f84:	40000c00 	.word	0x40000c00
 8004f88:	40010400 	.word	0x40010400
 8004f8c:	40014000 	.word	0x40014000
 8004f90:	40014400 	.word	0x40014400
 8004f94:	40014800 	.word	0x40014800
 8004f98:	40001800 	.word	0x40001800
 8004f9c:	40001c00 	.word	0x40001c00
 8004fa0:	40002000 	.word	0x40002000

08004fa4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b087      	sub	sp, #28
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	60f8      	str	r0, [r7, #12]
 8004fac:	60b9      	str	r1, [r7, #8]
 8004fae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	6a1b      	ldr	r3, [r3, #32]
 8004fb4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	6a1b      	ldr	r3, [r3, #32]
 8004fba:	f023 0201 	bic.w	r2, r3, #1
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	699b      	ldr	r3, [r3, #24]
 8004fc6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004fc8:	693b      	ldr	r3, [r7, #16]
 8004fca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004fce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	011b      	lsls	r3, r3, #4
 8004fd4:	693a      	ldr	r2, [r7, #16]
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004fda:	697b      	ldr	r3, [r7, #20]
 8004fdc:	f023 030a 	bic.w	r3, r3, #10
 8004fe0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004fe2:	697a      	ldr	r2, [r7, #20]
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	693a      	ldr	r2, [r7, #16]
 8004fee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	697a      	ldr	r2, [r7, #20]
 8004ff4:	621a      	str	r2, [r3, #32]
}
 8004ff6:	bf00      	nop
 8004ff8:	371c      	adds	r7, #28
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005000:	4770      	bx	lr

08005002 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005002:	b480      	push	{r7}
 8005004:	b087      	sub	sp, #28
 8005006:	af00      	add	r7, sp, #0
 8005008:	60f8      	str	r0, [r7, #12]
 800500a:	60b9      	str	r1, [r7, #8]
 800500c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	6a1b      	ldr	r3, [r3, #32]
 8005012:	f023 0210 	bic.w	r2, r3, #16
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	699b      	ldr	r3, [r3, #24]
 800501e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	6a1b      	ldr	r3, [r3, #32]
 8005024:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005026:	697b      	ldr	r3, [r7, #20]
 8005028:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800502c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	031b      	lsls	r3, r3, #12
 8005032:	697a      	ldr	r2, [r7, #20]
 8005034:	4313      	orrs	r3, r2
 8005036:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005038:	693b      	ldr	r3, [r7, #16]
 800503a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800503e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	011b      	lsls	r3, r3, #4
 8005044:	693a      	ldr	r2, [r7, #16]
 8005046:	4313      	orrs	r3, r2
 8005048:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	697a      	ldr	r2, [r7, #20]
 800504e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	693a      	ldr	r2, [r7, #16]
 8005054:	621a      	str	r2, [r3, #32]
}
 8005056:	bf00      	nop
 8005058:	371c      	adds	r7, #28
 800505a:	46bd      	mov	sp, r7
 800505c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005060:	4770      	bx	lr

08005062 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005062:	b480      	push	{r7}
 8005064:	b085      	sub	sp, #20
 8005066:	af00      	add	r7, sp, #0
 8005068:	6078      	str	r0, [r7, #4]
 800506a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	689b      	ldr	r3, [r3, #8]
 8005070:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005078:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800507a:	683a      	ldr	r2, [r7, #0]
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	4313      	orrs	r3, r2
 8005080:	f043 0307 	orr.w	r3, r3, #7
 8005084:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	68fa      	ldr	r2, [r7, #12]
 800508a:	609a      	str	r2, [r3, #8]
}
 800508c:	bf00      	nop
 800508e:	3714      	adds	r7, #20
 8005090:	46bd      	mov	sp, r7
 8005092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005096:	4770      	bx	lr

08005098 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005098:	b480      	push	{r7}
 800509a:	b087      	sub	sp, #28
 800509c:	af00      	add	r7, sp, #0
 800509e:	60f8      	str	r0, [r7, #12]
 80050a0:	60b9      	str	r1, [r7, #8]
 80050a2:	607a      	str	r2, [r7, #4]
 80050a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	689b      	ldr	r3, [r3, #8]
 80050aa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80050ac:	697b      	ldr	r3, [r7, #20]
 80050ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80050b2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	021a      	lsls	r2, r3, #8
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	431a      	orrs	r2, r3
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	4313      	orrs	r3, r2
 80050c0:	697a      	ldr	r2, [r7, #20]
 80050c2:	4313      	orrs	r3, r2
 80050c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	697a      	ldr	r2, [r7, #20]
 80050ca:	609a      	str	r2, [r3, #8]
}
 80050cc:	bf00      	nop
 80050ce:	371c      	adds	r7, #28
 80050d0:	46bd      	mov	sp, r7
 80050d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d6:	4770      	bx	lr

080050d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80050d8:	b480      	push	{r7}
 80050da:	b085      	sub	sp, #20
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
 80050e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050e8:	2b01      	cmp	r3, #1
 80050ea:	d101      	bne.n	80050f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80050ec:	2302      	movs	r3, #2
 80050ee:	e06d      	b.n	80051cc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2201      	movs	r2, #1
 80050f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2202      	movs	r2, #2
 80050fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	685b      	ldr	r3, [r3, #4]
 8005106:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	689b      	ldr	r3, [r3, #8]
 800510e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a30      	ldr	r2, [pc, #192]	; (80051d8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d004      	beq.n	8005124 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4a2f      	ldr	r2, [pc, #188]	; (80051dc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d108      	bne.n	8005136 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800512a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	68fa      	ldr	r2, [r7, #12]
 8005132:	4313      	orrs	r3, r2
 8005134:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800513c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	68fa      	ldr	r2, [r7, #12]
 8005144:	4313      	orrs	r3, r2
 8005146:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	68fa      	ldr	r2, [r7, #12]
 800514e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4a20      	ldr	r2, [pc, #128]	; (80051d8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d022      	beq.n	80051a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005162:	d01d      	beq.n	80051a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a1d      	ldr	r2, [pc, #116]	; (80051e0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d018      	beq.n	80051a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4a1c      	ldr	r2, [pc, #112]	; (80051e4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d013      	beq.n	80051a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4a1a      	ldr	r2, [pc, #104]	; (80051e8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d00e      	beq.n	80051a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4a15      	ldr	r2, [pc, #84]	; (80051dc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d009      	beq.n	80051a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a16      	ldr	r2, [pc, #88]	; (80051ec <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d004      	beq.n	80051a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4a15      	ldr	r2, [pc, #84]	; (80051f0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d10c      	bne.n	80051ba <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80051a6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	689b      	ldr	r3, [r3, #8]
 80051ac:	68ba      	ldr	r2, [r7, #8]
 80051ae:	4313      	orrs	r3, r2
 80051b0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	68ba      	ldr	r2, [r7, #8]
 80051b8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2201      	movs	r2, #1
 80051be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2200      	movs	r2, #0
 80051c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80051ca:	2300      	movs	r3, #0
}
 80051cc:	4618      	mov	r0, r3
 80051ce:	3714      	adds	r7, #20
 80051d0:	46bd      	mov	sp, r7
 80051d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d6:	4770      	bx	lr
 80051d8:	40010000 	.word	0x40010000
 80051dc:	40010400 	.word	0x40010400
 80051e0:	40000400 	.word	0x40000400
 80051e4:	40000800 	.word	0x40000800
 80051e8:	40000c00 	.word	0x40000c00
 80051ec:	40014000 	.word	0x40014000
 80051f0:	40001800 	.word	0x40001800

080051f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80051f4:	b480      	push	{r7}
 80051f6:	b083      	sub	sp, #12
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80051fc:	bf00      	nop
 80051fe:	370c      	adds	r7, #12
 8005200:	46bd      	mov	sp, r7
 8005202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005206:	4770      	bx	lr

08005208 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005208:	b480      	push	{r7}
 800520a:	b083      	sub	sp, #12
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005210:	bf00      	nop
 8005212:	370c      	adds	r7, #12
 8005214:	46bd      	mov	sp, r7
 8005216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521a:	4770      	bx	lr

0800521c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800521c:	b480      	push	{r7}
 800521e:	b083      	sub	sp, #12
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005224:	bf00      	nop
 8005226:	370c      	adds	r7, #12
 8005228:	46bd      	mov	sp, r7
 800522a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522e:	4770      	bx	lr

08005230 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b082      	sub	sp, #8
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d101      	bne.n	8005242 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800523e:	2301      	movs	r3, #1
 8005240:	e040      	b.n	80052c4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005246:	2b00      	cmp	r3, #0
 8005248:	d106      	bne.n	8005258 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2200      	movs	r2, #0
 800524e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005252:	6878      	ldr	r0, [r7, #4]
 8005254:	f7fd f874 	bl	8002340 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2224      	movs	r2, #36	; 0x24
 800525c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	681a      	ldr	r2, [r3, #0]
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f022 0201 	bic.w	r2, r2, #1
 800526c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800526e:	6878      	ldr	r0, [r7, #4]
 8005270:	f000 f8c0 	bl	80053f4 <UART_SetConfig>
 8005274:	4603      	mov	r3, r0
 8005276:	2b01      	cmp	r3, #1
 8005278:	d101      	bne.n	800527e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800527a:	2301      	movs	r3, #1
 800527c:	e022      	b.n	80052c4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005282:	2b00      	cmp	r3, #0
 8005284:	d002      	beq.n	800528c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005286:	6878      	ldr	r0, [r7, #4]
 8005288:	f000 fb16 	bl	80058b8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	685a      	ldr	r2, [r3, #4]
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800529a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	689a      	ldr	r2, [r3, #8]
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80052aa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	681a      	ldr	r2, [r3, #0]
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f042 0201 	orr.w	r2, r2, #1
 80052ba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80052bc:	6878      	ldr	r0, [r7, #4]
 80052be:	f000 fb9d 	bl	80059fc <UART_CheckIdleState>
 80052c2:	4603      	mov	r3, r0
}
 80052c4:	4618      	mov	r0, r3
 80052c6:	3708      	adds	r7, #8
 80052c8:	46bd      	mov	sp, r7
 80052ca:	bd80      	pop	{r7, pc}

080052cc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b08a      	sub	sp, #40	; 0x28
 80052d0:	af02      	add	r7, sp, #8
 80052d2:	60f8      	str	r0, [r7, #12]
 80052d4:	60b9      	str	r1, [r7, #8]
 80052d6:	603b      	str	r3, [r7, #0]
 80052d8:	4613      	mov	r3, r2
 80052da:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80052e0:	2b20      	cmp	r3, #32
 80052e2:	f040 8081 	bne.w	80053e8 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80052e6:	68bb      	ldr	r3, [r7, #8]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d002      	beq.n	80052f2 <HAL_UART_Transmit+0x26>
 80052ec:	88fb      	ldrh	r3, [r7, #6]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d101      	bne.n	80052f6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80052f2:	2301      	movs	r3, #1
 80052f4:	e079      	b.n	80053ea <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80052fc:	2b01      	cmp	r3, #1
 80052fe:	d101      	bne.n	8005304 <HAL_UART_Transmit+0x38>
 8005300:	2302      	movs	r3, #2
 8005302:	e072      	b.n	80053ea <HAL_UART_Transmit+0x11e>
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	2201      	movs	r2, #1
 8005308:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	2200      	movs	r2, #0
 8005310:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	2221      	movs	r2, #33	; 0x21
 8005318:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800531a:	f7fd f953 	bl	80025c4 <HAL_GetTick>
 800531e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	88fa      	ldrh	r2, [r7, #6]
 8005324:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	88fa      	ldrh	r2, [r7, #6]
 800532c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	689b      	ldr	r3, [r3, #8]
 8005334:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005338:	d108      	bne.n	800534c <HAL_UART_Transmit+0x80>
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	691b      	ldr	r3, [r3, #16]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d104      	bne.n	800534c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005342:	2300      	movs	r3, #0
 8005344:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005346:	68bb      	ldr	r3, [r7, #8]
 8005348:	61bb      	str	r3, [r7, #24]
 800534a:	e003      	b.n	8005354 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005350:	2300      	movs	r3, #0
 8005352:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	2200      	movs	r2, #0
 8005358:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800535c:	e02c      	b.n	80053b8 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	9300      	str	r3, [sp, #0]
 8005362:	697b      	ldr	r3, [r7, #20]
 8005364:	2200      	movs	r2, #0
 8005366:	2180      	movs	r1, #128	; 0x80
 8005368:	68f8      	ldr	r0, [r7, #12]
 800536a:	f000 fb7a 	bl	8005a62 <UART_WaitOnFlagUntilTimeout>
 800536e:	4603      	mov	r3, r0
 8005370:	2b00      	cmp	r3, #0
 8005372:	d001      	beq.n	8005378 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005374:	2303      	movs	r3, #3
 8005376:	e038      	b.n	80053ea <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8005378:	69fb      	ldr	r3, [r7, #28]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d10b      	bne.n	8005396 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800537e:	69bb      	ldr	r3, [r7, #24]
 8005380:	881b      	ldrh	r3, [r3, #0]
 8005382:	461a      	mov	r2, r3
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800538c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800538e:	69bb      	ldr	r3, [r7, #24]
 8005390:	3302      	adds	r3, #2
 8005392:	61bb      	str	r3, [r7, #24]
 8005394:	e007      	b.n	80053a6 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005396:	69fb      	ldr	r3, [r7, #28]
 8005398:	781a      	ldrb	r2, [r3, #0]
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80053a0:	69fb      	ldr	r3, [r7, #28]
 80053a2:	3301      	adds	r3, #1
 80053a4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80053ac:	b29b      	uxth	r3, r3
 80053ae:	3b01      	subs	r3, #1
 80053b0:	b29a      	uxth	r2, r3
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80053be:	b29b      	uxth	r3, r3
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d1cc      	bne.n	800535e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	9300      	str	r3, [sp, #0]
 80053c8:	697b      	ldr	r3, [r7, #20]
 80053ca:	2200      	movs	r2, #0
 80053cc:	2140      	movs	r1, #64	; 0x40
 80053ce:	68f8      	ldr	r0, [r7, #12]
 80053d0:	f000 fb47 	bl	8005a62 <UART_WaitOnFlagUntilTimeout>
 80053d4:	4603      	mov	r3, r0
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d001      	beq.n	80053de <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 80053da:	2303      	movs	r3, #3
 80053dc:	e005      	b.n	80053ea <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	2220      	movs	r2, #32
 80053e2:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80053e4:	2300      	movs	r3, #0
 80053e6:	e000      	b.n	80053ea <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80053e8:	2302      	movs	r3, #2
  }
}
 80053ea:	4618      	mov	r0, r3
 80053ec:	3720      	adds	r7, #32
 80053ee:	46bd      	mov	sp, r7
 80053f0:	bd80      	pop	{r7, pc}
	...

080053f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b088      	sub	sp, #32
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80053fc:	2300      	movs	r3, #0
 80053fe:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	689a      	ldr	r2, [r3, #8]
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	691b      	ldr	r3, [r3, #16]
 8005408:	431a      	orrs	r2, r3
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	695b      	ldr	r3, [r3, #20]
 800540e:	431a      	orrs	r2, r3
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	69db      	ldr	r3, [r3, #28]
 8005414:	4313      	orrs	r3, r2
 8005416:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	681a      	ldr	r2, [r3, #0]
 800541e:	4ba7      	ldr	r3, [pc, #668]	; (80056bc <UART_SetConfig+0x2c8>)
 8005420:	4013      	ands	r3, r2
 8005422:	687a      	ldr	r2, [r7, #4]
 8005424:	6812      	ldr	r2, [r2, #0]
 8005426:	6979      	ldr	r1, [r7, #20]
 8005428:	430b      	orrs	r3, r1
 800542a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	685b      	ldr	r3, [r3, #4]
 8005432:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	68da      	ldr	r2, [r3, #12]
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	430a      	orrs	r2, r1
 8005440:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	699b      	ldr	r3, [r3, #24]
 8005446:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6a1b      	ldr	r3, [r3, #32]
 800544c:	697a      	ldr	r2, [r7, #20]
 800544e:	4313      	orrs	r3, r2
 8005450:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	689b      	ldr	r3, [r3, #8]
 8005458:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	697a      	ldr	r2, [r7, #20]
 8005462:	430a      	orrs	r2, r1
 8005464:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4a95      	ldr	r2, [pc, #596]	; (80056c0 <UART_SetConfig+0x2cc>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d120      	bne.n	80054b2 <UART_SetConfig+0xbe>
 8005470:	4b94      	ldr	r3, [pc, #592]	; (80056c4 <UART_SetConfig+0x2d0>)
 8005472:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005476:	f003 0303 	and.w	r3, r3, #3
 800547a:	2b03      	cmp	r3, #3
 800547c:	d816      	bhi.n	80054ac <UART_SetConfig+0xb8>
 800547e:	a201      	add	r2, pc, #4	; (adr r2, 8005484 <UART_SetConfig+0x90>)
 8005480:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005484:	08005495 	.word	0x08005495
 8005488:	080054a1 	.word	0x080054a1
 800548c:	0800549b 	.word	0x0800549b
 8005490:	080054a7 	.word	0x080054a7
 8005494:	2301      	movs	r3, #1
 8005496:	77fb      	strb	r3, [r7, #31]
 8005498:	e14f      	b.n	800573a <UART_SetConfig+0x346>
 800549a:	2302      	movs	r3, #2
 800549c:	77fb      	strb	r3, [r7, #31]
 800549e:	e14c      	b.n	800573a <UART_SetConfig+0x346>
 80054a0:	2304      	movs	r3, #4
 80054a2:	77fb      	strb	r3, [r7, #31]
 80054a4:	e149      	b.n	800573a <UART_SetConfig+0x346>
 80054a6:	2308      	movs	r3, #8
 80054a8:	77fb      	strb	r3, [r7, #31]
 80054aa:	e146      	b.n	800573a <UART_SetConfig+0x346>
 80054ac:	2310      	movs	r3, #16
 80054ae:	77fb      	strb	r3, [r7, #31]
 80054b0:	e143      	b.n	800573a <UART_SetConfig+0x346>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4a84      	ldr	r2, [pc, #528]	; (80056c8 <UART_SetConfig+0x2d4>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d132      	bne.n	8005522 <UART_SetConfig+0x12e>
 80054bc:	4b81      	ldr	r3, [pc, #516]	; (80056c4 <UART_SetConfig+0x2d0>)
 80054be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054c2:	f003 030c 	and.w	r3, r3, #12
 80054c6:	2b0c      	cmp	r3, #12
 80054c8:	d828      	bhi.n	800551c <UART_SetConfig+0x128>
 80054ca:	a201      	add	r2, pc, #4	; (adr r2, 80054d0 <UART_SetConfig+0xdc>)
 80054cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054d0:	08005505 	.word	0x08005505
 80054d4:	0800551d 	.word	0x0800551d
 80054d8:	0800551d 	.word	0x0800551d
 80054dc:	0800551d 	.word	0x0800551d
 80054e0:	08005511 	.word	0x08005511
 80054e4:	0800551d 	.word	0x0800551d
 80054e8:	0800551d 	.word	0x0800551d
 80054ec:	0800551d 	.word	0x0800551d
 80054f0:	0800550b 	.word	0x0800550b
 80054f4:	0800551d 	.word	0x0800551d
 80054f8:	0800551d 	.word	0x0800551d
 80054fc:	0800551d 	.word	0x0800551d
 8005500:	08005517 	.word	0x08005517
 8005504:	2300      	movs	r3, #0
 8005506:	77fb      	strb	r3, [r7, #31]
 8005508:	e117      	b.n	800573a <UART_SetConfig+0x346>
 800550a:	2302      	movs	r3, #2
 800550c:	77fb      	strb	r3, [r7, #31]
 800550e:	e114      	b.n	800573a <UART_SetConfig+0x346>
 8005510:	2304      	movs	r3, #4
 8005512:	77fb      	strb	r3, [r7, #31]
 8005514:	e111      	b.n	800573a <UART_SetConfig+0x346>
 8005516:	2308      	movs	r3, #8
 8005518:	77fb      	strb	r3, [r7, #31]
 800551a:	e10e      	b.n	800573a <UART_SetConfig+0x346>
 800551c:	2310      	movs	r3, #16
 800551e:	77fb      	strb	r3, [r7, #31]
 8005520:	e10b      	b.n	800573a <UART_SetConfig+0x346>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4a69      	ldr	r2, [pc, #420]	; (80056cc <UART_SetConfig+0x2d8>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d120      	bne.n	800556e <UART_SetConfig+0x17a>
 800552c:	4b65      	ldr	r3, [pc, #404]	; (80056c4 <UART_SetConfig+0x2d0>)
 800552e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005532:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005536:	2b30      	cmp	r3, #48	; 0x30
 8005538:	d013      	beq.n	8005562 <UART_SetConfig+0x16e>
 800553a:	2b30      	cmp	r3, #48	; 0x30
 800553c:	d814      	bhi.n	8005568 <UART_SetConfig+0x174>
 800553e:	2b20      	cmp	r3, #32
 8005540:	d009      	beq.n	8005556 <UART_SetConfig+0x162>
 8005542:	2b20      	cmp	r3, #32
 8005544:	d810      	bhi.n	8005568 <UART_SetConfig+0x174>
 8005546:	2b00      	cmp	r3, #0
 8005548:	d002      	beq.n	8005550 <UART_SetConfig+0x15c>
 800554a:	2b10      	cmp	r3, #16
 800554c:	d006      	beq.n	800555c <UART_SetConfig+0x168>
 800554e:	e00b      	b.n	8005568 <UART_SetConfig+0x174>
 8005550:	2300      	movs	r3, #0
 8005552:	77fb      	strb	r3, [r7, #31]
 8005554:	e0f1      	b.n	800573a <UART_SetConfig+0x346>
 8005556:	2302      	movs	r3, #2
 8005558:	77fb      	strb	r3, [r7, #31]
 800555a:	e0ee      	b.n	800573a <UART_SetConfig+0x346>
 800555c:	2304      	movs	r3, #4
 800555e:	77fb      	strb	r3, [r7, #31]
 8005560:	e0eb      	b.n	800573a <UART_SetConfig+0x346>
 8005562:	2308      	movs	r3, #8
 8005564:	77fb      	strb	r3, [r7, #31]
 8005566:	e0e8      	b.n	800573a <UART_SetConfig+0x346>
 8005568:	2310      	movs	r3, #16
 800556a:	77fb      	strb	r3, [r7, #31]
 800556c:	e0e5      	b.n	800573a <UART_SetConfig+0x346>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4a57      	ldr	r2, [pc, #348]	; (80056d0 <UART_SetConfig+0x2dc>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d120      	bne.n	80055ba <UART_SetConfig+0x1c6>
 8005578:	4b52      	ldr	r3, [pc, #328]	; (80056c4 <UART_SetConfig+0x2d0>)
 800557a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800557e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005582:	2bc0      	cmp	r3, #192	; 0xc0
 8005584:	d013      	beq.n	80055ae <UART_SetConfig+0x1ba>
 8005586:	2bc0      	cmp	r3, #192	; 0xc0
 8005588:	d814      	bhi.n	80055b4 <UART_SetConfig+0x1c0>
 800558a:	2b80      	cmp	r3, #128	; 0x80
 800558c:	d009      	beq.n	80055a2 <UART_SetConfig+0x1ae>
 800558e:	2b80      	cmp	r3, #128	; 0x80
 8005590:	d810      	bhi.n	80055b4 <UART_SetConfig+0x1c0>
 8005592:	2b00      	cmp	r3, #0
 8005594:	d002      	beq.n	800559c <UART_SetConfig+0x1a8>
 8005596:	2b40      	cmp	r3, #64	; 0x40
 8005598:	d006      	beq.n	80055a8 <UART_SetConfig+0x1b4>
 800559a:	e00b      	b.n	80055b4 <UART_SetConfig+0x1c0>
 800559c:	2300      	movs	r3, #0
 800559e:	77fb      	strb	r3, [r7, #31]
 80055a0:	e0cb      	b.n	800573a <UART_SetConfig+0x346>
 80055a2:	2302      	movs	r3, #2
 80055a4:	77fb      	strb	r3, [r7, #31]
 80055a6:	e0c8      	b.n	800573a <UART_SetConfig+0x346>
 80055a8:	2304      	movs	r3, #4
 80055aa:	77fb      	strb	r3, [r7, #31]
 80055ac:	e0c5      	b.n	800573a <UART_SetConfig+0x346>
 80055ae:	2308      	movs	r3, #8
 80055b0:	77fb      	strb	r3, [r7, #31]
 80055b2:	e0c2      	b.n	800573a <UART_SetConfig+0x346>
 80055b4:	2310      	movs	r3, #16
 80055b6:	77fb      	strb	r3, [r7, #31]
 80055b8:	e0bf      	b.n	800573a <UART_SetConfig+0x346>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	4a45      	ldr	r2, [pc, #276]	; (80056d4 <UART_SetConfig+0x2e0>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d125      	bne.n	8005610 <UART_SetConfig+0x21c>
 80055c4:	4b3f      	ldr	r3, [pc, #252]	; (80056c4 <UART_SetConfig+0x2d0>)
 80055c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80055d2:	d017      	beq.n	8005604 <UART_SetConfig+0x210>
 80055d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80055d8:	d817      	bhi.n	800560a <UART_SetConfig+0x216>
 80055da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055de:	d00b      	beq.n	80055f8 <UART_SetConfig+0x204>
 80055e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055e4:	d811      	bhi.n	800560a <UART_SetConfig+0x216>
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d003      	beq.n	80055f2 <UART_SetConfig+0x1fe>
 80055ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055ee:	d006      	beq.n	80055fe <UART_SetConfig+0x20a>
 80055f0:	e00b      	b.n	800560a <UART_SetConfig+0x216>
 80055f2:	2300      	movs	r3, #0
 80055f4:	77fb      	strb	r3, [r7, #31]
 80055f6:	e0a0      	b.n	800573a <UART_SetConfig+0x346>
 80055f8:	2302      	movs	r3, #2
 80055fa:	77fb      	strb	r3, [r7, #31]
 80055fc:	e09d      	b.n	800573a <UART_SetConfig+0x346>
 80055fe:	2304      	movs	r3, #4
 8005600:	77fb      	strb	r3, [r7, #31]
 8005602:	e09a      	b.n	800573a <UART_SetConfig+0x346>
 8005604:	2308      	movs	r3, #8
 8005606:	77fb      	strb	r3, [r7, #31]
 8005608:	e097      	b.n	800573a <UART_SetConfig+0x346>
 800560a:	2310      	movs	r3, #16
 800560c:	77fb      	strb	r3, [r7, #31]
 800560e:	e094      	b.n	800573a <UART_SetConfig+0x346>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4a30      	ldr	r2, [pc, #192]	; (80056d8 <UART_SetConfig+0x2e4>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d125      	bne.n	8005666 <UART_SetConfig+0x272>
 800561a:	4b2a      	ldr	r3, [pc, #168]	; (80056c4 <UART_SetConfig+0x2d0>)
 800561c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005620:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005624:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005628:	d017      	beq.n	800565a <UART_SetConfig+0x266>
 800562a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800562e:	d817      	bhi.n	8005660 <UART_SetConfig+0x26c>
 8005630:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005634:	d00b      	beq.n	800564e <UART_SetConfig+0x25a>
 8005636:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800563a:	d811      	bhi.n	8005660 <UART_SetConfig+0x26c>
 800563c:	2b00      	cmp	r3, #0
 800563e:	d003      	beq.n	8005648 <UART_SetConfig+0x254>
 8005640:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005644:	d006      	beq.n	8005654 <UART_SetConfig+0x260>
 8005646:	e00b      	b.n	8005660 <UART_SetConfig+0x26c>
 8005648:	2301      	movs	r3, #1
 800564a:	77fb      	strb	r3, [r7, #31]
 800564c:	e075      	b.n	800573a <UART_SetConfig+0x346>
 800564e:	2302      	movs	r3, #2
 8005650:	77fb      	strb	r3, [r7, #31]
 8005652:	e072      	b.n	800573a <UART_SetConfig+0x346>
 8005654:	2304      	movs	r3, #4
 8005656:	77fb      	strb	r3, [r7, #31]
 8005658:	e06f      	b.n	800573a <UART_SetConfig+0x346>
 800565a:	2308      	movs	r3, #8
 800565c:	77fb      	strb	r3, [r7, #31]
 800565e:	e06c      	b.n	800573a <UART_SetConfig+0x346>
 8005660:	2310      	movs	r3, #16
 8005662:	77fb      	strb	r3, [r7, #31]
 8005664:	e069      	b.n	800573a <UART_SetConfig+0x346>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4a1c      	ldr	r2, [pc, #112]	; (80056dc <UART_SetConfig+0x2e8>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d137      	bne.n	80056e0 <UART_SetConfig+0x2ec>
 8005670:	4b14      	ldr	r3, [pc, #80]	; (80056c4 <UART_SetConfig+0x2d0>)
 8005672:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005676:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800567a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800567e:	d017      	beq.n	80056b0 <UART_SetConfig+0x2bc>
 8005680:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005684:	d817      	bhi.n	80056b6 <UART_SetConfig+0x2c2>
 8005686:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800568a:	d00b      	beq.n	80056a4 <UART_SetConfig+0x2b0>
 800568c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005690:	d811      	bhi.n	80056b6 <UART_SetConfig+0x2c2>
 8005692:	2b00      	cmp	r3, #0
 8005694:	d003      	beq.n	800569e <UART_SetConfig+0x2aa>
 8005696:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800569a:	d006      	beq.n	80056aa <UART_SetConfig+0x2b6>
 800569c:	e00b      	b.n	80056b6 <UART_SetConfig+0x2c2>
 800569e:	2300      	movs	r3, #0
 80056a0:	77fb      	strb	r3, [r7, #31]
 80056a2:	e04a      	b.n	800573a <UART_SetConfig+0x346>
 80056a4:	2302      	movs	r3, #2
 80056a6:	77fb      	strb	r3, [r7, #31]
 80056a8:	e047      	b.n	800573a <UART_SetConfig+0x346>
 80056aa:	2304      	movs	r3, #4
 80056ac:	77fb      	strb	r3, [r7, #31]
 80056ae:	e044      	b.n	800573a <UART_SetConfig+0x346>
 80056b0:	2308      	movs	r3, #8
 80056b2:	77fb      	strb	r3, [r7, #31]
 80056b4:	e041      	b.n	800573a <UART_SetConfig+0x346>
 80056b6:	2310      	movs	r3, #16
 80056b8:	77fb      	strb	r3, [r7, #31]
 80056ba:	e03e      	b.n	800573a <UART_SetConfig+0x346>
 80056bc:	efff69f3 	.word	0xefff69f3
 80056c0:	40011000 	.word	0x40011000
 80056c4:	40023800 	.word	0x40023800
 80056c8:	40004400 	.word	0x40004400
 80056cc:	40004800 	.word	0x40004800
 80056d0:	40004c00 	.word	0x40004c00
 80056d4:	40005000 	.word	0x40005000
 80056d8:	40011400 	.word	0x40011400
 80056dc:	40007800 	.word	0x40007800
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4a71      	ldr	r2, [pc, #452]	; (80058ac <UART_SetConfig+0x4b8>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d125      	bne.n	8005736 <UART_SetConfig+0x342>
 80056ea:	4b71      	ldr	r3, [pc, #452]	; (80058b0 <UART_SetConfig+0x4bc>)
 80056ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056f0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80056f4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80056f8:	d017      	beq.n	800572a <UART_SetConfig+0x336>
 80056fa:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80056fe:	d817      	bhi.n	8005730 <UART_SetConfig+0x33c>
 8005700:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005704:	d00b      	beq.n	800571e <UART_SetConfig+0x32a>
 8005706:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800570a:	d811      	bhi.n	8005730 <UART_SetConfig+0x33c>
 800570c:	2b00      	cmp	r3, #0
 800570e:	d003      	beq.n	8005718 <UART_SetConfig+0x324>
 8005710:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005714:	d006      	beq.n	8005724 <UART_SetConfig+0x330>
 8005716:	e00b      	b.n	8005730 <UART_SetConfig+0x33c>
 8005718:	2300      	movs	r3, #0
 800571a:	77fb      	strb	r3, [r7, #31]
 800571c:	e00d      	b.n	800573a <UART_SetConfig+0x346>
 800571e:	2302      	movs	r3, #2
 8005720:	77fb      	strb	r3, [r7, #31]
 8005722:	e00a      	b.n	800573a <UART_SetConfig+0x346>
 8005724:	2304      	movs	r3, #4
 8005726:	77fb      	strb	r3, [r7, #31]
 8005728:	e007      	b.n	800573a <UART_SetConfig+0x346>
 800572a:	2308      	movs	r3, #8
 800572c:	77fb      	strb	r3, [r7, #31]
 800572e:	e004      	b.n	800573a <UART_SetConfig+0x346>
 8005730:	2310      	movs	r3, #16
 8005732:	77fb      	strb	r3, [r7, #31]
 8005734:	e001      	b.n	800573a <UART_SetConfig+0x346>
 8005736:	2310      	movs	r3, #16
 8005738:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	69db      	ldr	r3, [r3, #28]
 800573e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005742:	d15a      	bne.n	80057fa <UART_SetConfig+0x406>
  {
    switch (clocksource)
 8005744:	7ffb      	ldrb	r3, [r7, #31]
 8005746:	2b08      	cmp	r3, #8
 8005748:	d827      	bhi.n	800579a <UART_SetConfig+0x3a6>
 800574a:	a201      	add	r2, pc, #4	; (adr r2, 8005750 <UART_SetConfig+0x35c>)
 800574c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005750:	08005775 	.word	0x08005775
 8005754:	0800577d 	.word	0x0800577d
 8005758:	08005785 	.word	0x08005785
 800575c:	0800579b 	.word	0x0800579b
 8005760:	0800578b 	.word	0x0800578b
 8005764:	0800579b 	.word	0x0800579b
 8005768:	0800579b 	.word	0x0800579b
 800576c:	0800579b 	.word	0x0800579b
 8005770:	08005793 	.word	0x08005793
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005774:	f7fe fc7c 	bl	8004070 <HAL_RCC_GetPCLK1Freq>
 8005778:	61b8      	str	r0, [r7, #24]
        break;
 800577a:	e013      	b.n	80057a4 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800577c:	f7fe fc8c 	bl	8004098 <HAL_RCC_GetPCLK2Freq>
 8005780:	61b8      	str	r0, [r7, #24]
        break;
 8005782:	e00f      	b.n	80057a4 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005784:	4b4b      	ldr	r3, [pc, #300]	; (80058b4 <UART_SetConfig+0x4c0>)
 8005786:	61bb      	str	r3, [r7, #24]
        break;
 8005788:	e00c      	b.n	80057a4 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800578a:	f7fe fbaf 	bl	8003eec <HAL_RCC_GetSysClockFreq>
 800578e:	61b8      	str	r0, [r7, #24]
        break;
 8005790:	e008      	b.n	80057a4 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005792:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005796:	61bb      	str	r3, [r7, #24]
        break;
 8005798:	e004      	b.n	80057a4 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 800579a:	2300      	movs	r3, #0
 800579c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800579e:	2301      	movs	r3, #1
 80057a0:	77bb      	strb	r3, [r7, #30]
        break;
 80057a2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80057a4:	69bb      	ldr	r3, [r7, #24]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d074      	beq.n	8005894 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80057aa:	69bb      	ldr	r3, [r7, #24]
 80057ac:	005a      	lsls	r2, r3, #1
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	685b      	ldr	r3, [r3, #4]
 80057b2:	085b      	lsrs	r3, r3, #1
 80057b4:	441a      	add	r2, r3
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	685b      	ldr	r3, [r3, #4]
 80057ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80057be:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80057c0:	693b      	ldr	r3, [r7, #16]
 80057c2:	2b0f      	cmp	r3, #15
 80057c4:	d916      	bls.n	80057f4 <UART_SetConfig+0x400>
 80057c6:	693b      	ldr	r3, [r7, #16]
 80057c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057cc:	d212      	bcs.n	80057f4 <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80057ce:	693b      	ldr	r3, [r7, #16]
 80057d0:	b29b      	uxth	r3, r3
 80057d2:	f023 030f 	bic.w	r3, r3, #15
 80057d6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80057d8:	693b      	ldr	r3, [r7, #16]
 80057da:	085b      	lsrs	r3, r3, #1
 80057dc:	b29b      	uxth	r3, r3
 80057de:	f003 0307 	and.w	r3, r3, #7
 80057e2:	b29a      	uxth	r2, r3
 80057e4:	89fb      	ldrh	r3, [r7, #14]
 80057e6:	4313      	orrs	r3, r2
 80057e8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	89fa      	ldrh	r2, [r7, #14]
 80057f0:	60da      	str	r2, [r3, #12]
 80057f2:	e04f      	b.n	8005894 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80057f4:	2301      	movs	r3, #1
 80057f6:	77bb      	strb	r3, [r7, #30]
 80057f8:	e04c      	b.n	8005894 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 80057fa:	7ffb      	ldrb	r3, [r7, #31]
 80057fc:	2b08      	cmp	r3, #8
 80057fe:	d828      	bhi.n	8005852 <UART_SetConfig+0x45e>
 8005800:	a201      	add	r2, pc, #4	; (adr r2, 8005808 <UART_SetConfig+0x414>)
 8005802:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005806:	bf00      	nop
 8005808:	0800582d 	.word	0x0800582d
 800580c:	08005835 	.word	0x08005835
 8005810:	0800583d 	.word	0x0800583d
 8005814:	08005853 	.word	0x08005853
 8005818:	08005843 	.word	0x08005843
 800581c:	08005853 	.word	0x08005853
 8005820:	08005853 	.word	0x08005853
 8005824:	08005853 	.word	0x08005853
 8005828:	0800584b 	.word	0x0800584b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800582c:	f7fe fc20 	bl	8004070 <HAL_RCC_GetPCLK1Freq>
 8005830:	61b8      	str	r0, [r7, #24]
        break;
 8005832:	e013      	b.n	800585c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005834:	f7fe fc30 	bl	8004098 <HAL_RCC_GetPCLK2Freq>
 8005838:	61b8      	str	r0, [r7, #24]
        break;
 800583a:	e00f      	b.n	800585c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800583c:	4b1d      	ldr	r3, [pc, #116]	; (80058b4 <UART_SetConfig+0x4c0>)
 800583e:	61bb      	str	r3, [r7, #24]
        break;
 8005840:	e00c      	b.n	800585c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005842:	f7fe fb53 	bl	8003eec <HAL_RCC_GetSysClockFreq>
 8005846:	61b8      	str	r0, [r7, #24]
        break;
 8005848:	e008      	b.n	800585c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800584a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800584e:	61bb      	str	r3, [r7, #24]
        break;
 8005850:	e004      	b.n	800585c <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8005852:	2300      	movs	r3, #0
 8005854:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005856:	2301      	movs	r3, #1
 8005858:	77bb      	strb	r3, [r7, #30]
        break;
 800585a:	bf00      	nop
    }

    if (pclk != 0U)
 800585c:	69bb      	ldr	r3, [r7, #24]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d018      	beq.n	8005894 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	685b      	ldr	r3, [r3, #4]
 8005866:	085a      	lsrs	r2, r3, #1
 8005868:	69bb      	ldr	r3, [r7, #24]
 800586a:	441a      	add	r2, r3
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	685b      	ldr	r3, [r3, #4]
 8005870:	fbb2 f3f3 	udiv	r3, r2, r3
 8005874:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005876:	693b      	ldr	r3, [r7, #16]
 8005878:	2b0f      	cmp	r3, #15
 800587a:	d909      	bls.n	8005890 <UART_SetConfig+0x49c>
 800587c:	693b      	ldr	r3, [r7, #16]
 800587e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005882:	d205      	bcs.n	8005890 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005884:	693b      	ldr	r3, [r7, #16]
 8005886:	b29a      	uxth	r2, r3
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	60da      	str	r2, [r3, #12]
 800588e:	e001      	b.n	8005894 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8005890:	2301      	movs	r3, #1
 8005892:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2200      	movs	r2, #0
 8005898:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2200      	movs	r2, #0
 800589e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80058a0:	7fbb      	ldrb	r3, [r7, #30]
}
 80058a2:	4618      	mov	r0, r3
 80058a4:	3720      	adds	r7, #32
 80058a6:	46bd      	mov	sp, r7
 80058a8:	bd80      	pop	{r7, pc}
 80058aa:	bf00      	nop
 80058ac:	40007c00 	.word	0x40007c00
 80058b0:	40023800 	.word	0x40023800
 80058b4:	00f42400 	.word	0x00f42400

080058b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80058b8:	b480      	push	{r7}
 80058ba:	b083      	sub	sp, #12
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058c4:	f003 0301 	and.w	r3, r3, #1
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d00a      	beq.n	80058e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	685b      	ldr	r3, [r3, #4]
 80058d2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	430a      	orrs	r2, r1
 80058e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058e6:	f003 0302 	and.w	r3, r3, #2
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d00a      	beq.n	8005904 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	685b      	ldr	r3, [r3, #4]
 80058f4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	430a      	orrs	r2, r1
 8005902:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005908:	f003 0304 	and.w	r3, r3, #4
 800590c:	2b00      	cmp	r3, #0
 800590e:	d00a      	beq.n	8005926 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	685b      	ldr	r3, [r3, #4]
 8005916:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	430a      	orrs	r2, r1
 8005924:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800592a:	f003 0308 	and.w	r3, r3, #8
 800592e:	2b00      	cmp	r3, #0
 8005930:	d00a      	beq.n	8005948 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	685b      	ldr	r3, [r3, #4]
 8005938:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	430a      	orrs	r2, r1
 8005946:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800594c:	f003 0310 	and.w	r3, r3, #16
 8005950:	2b00      	cmp	r3, #0
 8005952:	d00a      	beq.n	800596a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	689b      	ldr	r3, [r3, #8]
 800595a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	430a      	orrs	r2, r1
 8005968:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800596e:	f003 0320 	and.w	r3, r3, #32
 8005972:	2b00      	cmp	r3, #0
 8005974:	d00a      	beq.n	800598c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	689b      	ldr	r3, [r3, #8]
 800597c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	430a      	orrs	r2, r1
 800598a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005990:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005994:	2b00      	cmp	r3, #0
 8005996:	d01a      	beq.n	80059ce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	685b      	ldr	r3, [r3, #4]
 800599e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	430a      	orrs	r2, r1
 80059ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80059b6:	d10a      	bne.n	80059ce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	685b      	ldr	r3, [r3, #4]
 80059be:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	430a      	orrs	r2, r1
 80059cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d00a      	beq.n	80059f0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	685b      	ldr	r3, [r3, #4]
 80059e0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	430a      	orrs	r2, r1
 80059ee:	605a      	str	r2, [r3, #4]
  }
}
 80059f0:	bf00      	nop
 80059f2:	370c      	adds	r7, #12
 80059f4:	46bd      	mov	sp, r7
 80059f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fa:	4770      	bx	lr

080059fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b086      	sub	sp, #24
 8005a00:	af02      	add	r7, sp, #8
 8005a02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2200      	movs	r2, #0
 8005a08:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005a0c:	f7fc fdda 	bl	80025c4 <HAL_GetTick>
 8005a10:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f003 0308 	and.w	r3, r3, #8
 8005a1c:	2b08      	cmp	r3, #8
 8005a1e:	d10e      	bne.n	8005a3e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a20:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005a24:	9300      	str	r3, [sp, #0]
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	2200      	movs	r2, #0
 8005a2a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005a2e:	6878      	ldr	r0, [r7, #4]
 8005a30:	f000 f817 	bl	8005a62 <UART_WaitOnFlagUntilTimeout>
 8005a34:	4603      	mov	r3, r0
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d001      	beq.n	8005a3e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a3a:	2303      	movs	r3, #3
 8005a3c:	e00d      	b.n	8005a5a <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2220      	movs	r2, #32
 8005a42:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2220      	movs	r2, #32
 8005a48:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2200      	movs	r2, #0
 8005a54:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005a58:	2300      	movs	r3, #0
}
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	3710      	adds	r7, #16
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	bd80      	pop	{r7, pc}

08005a62 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005a62:	b580      	push	{r7, lr}
 8005a64:	b09c      	sub	sp, #112	; 0x70
 8005a66:	af00      	add	r7, sp, #0
 8005a68:	60f8      	str	r0, [r7, #12]
 8005a6a:	60b9      	str	r1, [r7, #8]
 8005a6c:	603b      	str	r3, [r7, #0]
 8005a6e:	4613      	mov	r3, r2
 8005a70:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a72:	e0a5      	b.n	8005bc0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a74:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a7a:	f000 80a1 	beq.w	8005bc0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a7e:	f7fc fda1 	bl	80025c4 <HAL_GetTick>
 8005a82:	4602      	mov	r2, r0
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	1ad3      	subs	r3, r2, r3
 8005a88:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005a8a:	429a      	cmp	r2, r3
 8005a8c:	d302      	bcc.n	8005a94 <UART_WaitOnFlagUntilTimeout+0x32>
 8005a8e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d13e      	bne.n	8005b12 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a9c:	e853 3f00 	ldrex	r3, [r3]
 8005aa0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005aa2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005aa4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005aa8:	667b      	str	r3, [r7, #100]	; 0x64
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	461a      	mov	r2, r3
 8005ab0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005ab2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005ab4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ab6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005ab8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005aba:	e841 2300 	strex	r3, r2, [r1]
 8005abe:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005ac0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d1e6      	bne.n	8005a94 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	3308      	adds	r3, #8
 8005acc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ace:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ad0:	e853 3f00 	ldrex	r3, [r3]
 8005ad4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005ad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ad8:	f023 0301 	bic.w	r3, r3, #1
 8005adc:	663b      	str	r3, [r7, #96]	; 0x60
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	3308      	adds	r3, #8
 8005ae4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005ae6:	64ba      	str	r2, [r7, #72]	; 0x48
 8005ae8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aea:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005aec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005aee:	e841 2300 	strex	r3, r2, [r1]
 8005af2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005af4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d1e5      	bne.n	8005ac6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	2220      	movs	r2, #32
 8005afe:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	2220      	movs	r2, #32
 8005b04:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	2200      	movs	r2, #0
 8005b0a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005b0e:	2303      	movs	r3, #3
 8005b10:	e067      	b.n	8005be2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f003 0304 	and.w	r3, r3, #4
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d04f      	beq.n	8005bc0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	69db      	ldr	r3, [r3, #28]
 8005b26:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b2e:	d147      	bne.n	8005bc0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005b38:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b42:	e853 3f00 	ldrex	r3, [r3]
 8005b46:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b4a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005b4e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	461a      	mov	r2, r3
 8005b56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b58:	637b      	str	r3, [r7, #52]	; 0x34
 8005b5a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b5c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005b5e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005b60:	e841 2300 	strex	r3, r2, [r1]
 8005b64:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005b66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d1e6      	bne.n	8005b3a <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	3308      	adds	r3, #8
 8005b72:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b74:	697b      	ldr	r3, [r7, #20]
 8005b76:	e853 3f00 	ldrex	r3, [r3]
 8005b7a:	613b      	str	r3, [r7, #16]
   return(result);
 8005b7c:	693b      	ldr	r3, [r7, #16]
 8005b7e:	f023 0301 	bic.w	r3, r3, #1
 8005b82:	66bb      	str	r3, [r7, #104]	; 0x68
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	3308      	adds	r3, #8
 8005b8a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005b8c:	623a      	str	r2, [r7, #32]
 8005b8e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b90:	69f9      	ldr	r1, [r7, #28]
 8005b92:	6a3a      	ldr	r2, [r7, #32]
 8005b94:	e841 2300 	strex	r3, r2, [r1]
 8005b98:	61bb      	str	r3, [r7, #24]
   return(result);
 8005b9a:	69bb      	ldr	r3, [r7, #24]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d1e5      	bne.n	8005b6c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	2220      	movs	r2, #32
 8005ba4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	2220      	movs	r2, #32
 8005baa:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	2220      	movs	r2, #32
 8005bb0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005bbc:	2303      	movs	r3, #3
 8005bbe:	e010      	b.n	8005be2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	69da      	ldr	r2, [r3, #28]
 8005bc6:	68bb      	ldr	r3, [r7, #8]
 8005bc8:	4013      	ands	r3, r2
 8005bca:	68ba      	ldr	r2, [r7, #8]
 8005bcc:	429a      	cmp	r2, r3
 8005bce:	bf0c      	ite	eq
 8005bd0:	2301      	moveq	r3, #1
 8005bd2:	2300      	movne	r3, #0
 8005bd4:	b2db      	uxtb	r3, r3
 8005bd6:	461a      	mov	r2, r3
 8005bd8:	79fb      	ldrb	r3, [r7, #7]
 8005bda:	429a      	cmp	r2, r3
 8005bdc:	f43f af4a 	beq.w	8005a74 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005be0:	2300      	movs	r3, #0
}
 8005be2:	4618      	mov	r0, r3
 8005be4:	3770      	adds	r7, #112	; 0x70
 8005be6:	46bd      	mov	sp, r7
 8005be8:	bd80      	pop	{r7, pc}

08005bea <arm_cmplx_mag_f32>:
#else
void arm_cmplx_mag_f32(
  const float32_t * pSrc,
        float32_t * pDst,
        uint32_t numSamples)
{
 8005bea:	b510      	push	{r4, lr}
 8005bec:	3008      	adds	r0, #8
 */
__STATIC_FORCEINLINE arm_status arm_sqrt_f32(
  const float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 8005bee:	2400      	movs	r4, #0
  blkCnt = numSamples;

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */
#endif /* #if defined(ARM_MATH_NEON) */

  while (blkCnt > 0U)
 8005bf0:	b902      	cbnz	r2, 8005bf4 <arm_cmplx_mag_f32+0xa>

    /* Decrement loop counter */
    blkCnt--;
  }

}
 8005bf2:	bd10      	pop	{r4, pc}
    imag = *pSrc++;
 8005bf4:	ed50 7a01 	vldr	s15, [r0, #-4]
    arm_sqrt_f32((real * real) + (imag * imag), pDst++);
 8005bf8:	1d0b      	adds	r3, r1, #4
    real = *pSrc++;
 8005bfa:	ed10 7a02 	vldr	s14, [r0, #-8]
    arm_sqrt_f32((real * real) + (imag * imag), pDst++);
 8005bfe:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8005c02:	eee7 7a07 	vfma.f32	s15, s14, s14
 8005c06:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005c0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c0e:	db07      	blt.n	8005c20 <arm_cmplx_mag_f32+0x36>
      *pOut = _sqrtf(in);
#elif defined(__GNUC_PYTHON__)
      *pOut = sqrtf(in);
#elif defined ( __GNUC__ )
  #if defined (__VFP_FP__) && !defined(__SOFTFP__)
      __ASM("VSQRT.F32 %0,%1" : "=t"(*pOut) : "t"(in));
 8005c10:	eef1 7ae7 	vsqrt.f32	s15, s15
 8005c14:	edc1 7a00 	vstr	s15, [r1]
    blkCnt--;
 8005c18:	3a01      	subs	r2, #1
 8005c1a:	3008      	adds	r0, #8
    arm_sqrt_f32((real * real) + (imag * imag), pDst++);
 8005c1c:	4619      	mov	r1, r3
 8005c1e:	e7e7      	b.n	8005bf0 <arm_cmplx_mag_f32+0x6>

      return (ARM_MATH_SUCCESS);
    }
    else
    {
      *pOut = 0.0f;
 8005c20:	f843 4c04 	str.w	r4, [r3, #-4]
      return (ARM_MATH_ARGUMENT_ERROR);
 8005c24:	e7f8      	b.n	8005c18 <arm_cmplx_mag_f32+0x2e>
	...

08005c28 <arm_var_f32>:
        float32_t sum = 0.0f;                          /* Temporary result storage */
        float32_t fSum = 0.0f;
        float32_t fMean, fValue;
  const float32_t * pInput = pSrc;

  if (blockSize <= 1U)
 8005c28:	2901      	cmp	r1, #1
 8005c2a:	eddf 7a13 	vldr	s15, [pc, #76]	; 8005c78 <arm_var_f32+0x50>
{
 8005c2e:	b510      	push	{r4, lr}
  if (blockSize <= 1U)
 8005c30:	d802      	bhi.n	8005c38 <arm_var_f32+0x10>
    /* Decrement loop counter */
    blkCnt--;
  }

  /* Variance */
  *pResult = fSum / (float32_t)(blockSize - 1.0f);
 8005c32:	edc2 7a00 	vstr	s15, [r2]
}
 8005c36:	bd10      	pop	{r4, pc}
 8005c38:	460b      	mov	r3, r1
  const float32_t * pInput = pSrc;
 8005c3a:	4604      	mov	r4, r0
    sum += *pInput++;
 8005c3c:	ecb4 7a01 	vldmia	r4!, {s14}
  while (blkCnt > 0U)
 8005c40:	3b01      	subs	r3, #1
    sum += *pInput++;
 8005c42:	ee77 7a87 	vadd.f32	s15, s15, s14
  while (blkCnt > 0U)
 8005c46:	d1f9      	bne.n	8005c3c <arm_var_f32+0x14>
  fMean = sum / (float32_t) blockSize;
 8005c48:	ee07 1a10 	vmov	s14, r1
        float32_t fSum = 0.0f;
 8005c4c:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8005c78 <arm_var_f32+0x50>
  fMean = sum / (float32_t) blockSize;
 8005c50:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8005c54:	ee87 6a87 	vdiv.f32	s12, s15, s14
    fValue = *pInput++ - fMean;
 8005c58:	ecf0 7a01 	vldmia	r0!, {s15}
  while (blkCnt > 0U)
 8005c5c:	3901      	subs	r1, #1
    fValue = *pInput++ - fMean;
 8005c5e:	ee77 7ac6 	vsub.f32	s15, s15, s12
    fSum += fValue * fValue;
 8005c62:	eee7 6aa7 	vfma.f32	s13, s15, s15
  while (blkCnt > 0U)
 8005c66:	d1f7      	bne.n	8005c58 <arm_var_f32+0x30>
  *pResult = fSum / (float32_t)(blockSize - 1.0f);
 8005c68:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8005c6c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005c70:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005c74:	e7dd      	b.n	8005c32 <arm_var_f32+0xa>
 8005c76:	bf00      	nop
 8005c78:	00000000 	.word	0x00000000

08005c7c <arm_std_f32>:
 */
void arm_std_f32(
  const float32_t * pSrc,
        uint32_t blockSize,
        float32_t * pResult)
{
 8005c7c:	b513      	push	{r0, r1, r4, lr}
 8005c7e:	4614      	mov	r4, r2
  float32_t var;
  arm_var_f32(pSrc,blockSize,&var);
 8005c80:	aa01      	add	r2, sp, #4
 8005c82:	f7ff ffd1 	bl	8005c28 <arm_var_f32>
  arm_sqrt_f32(var, pResult);
 8005c86:	eddd 7a01 	vldr	s15, [sp, #4]
    if (in >= 0.0f)
 8005c8a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005c8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c92:	db05      	blt.n	8005ca0 <arm_std_f32+0x24>
      __ASM("VSQRT.F32 %0,%1" : "=t"(*pOut) : "t"(in));
 8005c94:	eef1 7ae7 	vsqrt.f32	s15, s15
 8005c98:	edc4 7a00 	vstr	s15, [r4]
}
 8005c9c:	b002      	add	sp, #8
 8005c9e:	bd10      	pop	{r4, pc}
      *pOut = 0.0f;
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	6023      	str	r3, [r4, #0]
 8005ca4:	e7fa      	b.n	8005c9c <arm_std_f32+0x20>

08005ca6 <arm_bitreversal_32>:

void arm_bitreversal_32(
        uint32_t *pSrc,
  const uint16_t bitRevLen,
  const uint16_t *pBitRevTab)
{
 8005ca6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t a, b, i, tmp;

  for (i = 0; i < bitRevLen; )
 8005caa:	2300      	movs	r3, #0
{
 8005cac:	4688      	mov	r8, r1
  {
     a = pBitRevTab[i    ] >> 2;
     b = pBitRevTab[i + 1] >> 2;
 8005cae:	f102 0c02 	add.w	ip, r2, #2
  for (i = 0; i < bitRevLen; )
 8005cb2:	4598      	cmp	r8, r3
 8005cb4:	d801      	bhi.n	8005cba <arm_bitreversal_32+0x14>
     pSrc[a+1] = pSrc[b+1];
     pSrc[b+1] = tmp;

    i += 2;
  }
}
 8005cb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     a = pBitRevTab[i    ] >> 2;
 8005cba:	f832 5013 	ldrh.w	r5, [r2, r3, lsl #1]
     b = pBitRevTab[i + 1] >> 2;
 8005cbe:	f83c 4013 	ldrh.w	r4, [ip, r3, lsl #1]
    i += 2;
 8005cc2:	3302      	adds	r3, #2
     a = pBitRevTab[i    ] >> 2;
 8005cc4:	08ad      	lsrs	r5, r5, #2
     b = pBitRevTab[i + 1] >> 2;
 8005cc6:	08a4      	lsrs	r4, r4, #2
     tmp = pSrc[a];
 8005cc8:	f850 e025 	ldr.w	lr, [r0, r5, lsl #2]
 8005ccc:	00af      	lsls	r7, r5, #2
     pSrc[a] = pSrc[b];
 8005cce:	f850 1024 	ldr.w	r1, [r0, r4, lsl #2]
 8005cd2:	00a6      	lsls	r6, r4, #2
 8005cd4:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
     tmp = pSrc[a+1];
 8005cd8:	1d3d      	adds	r5, r7, #4
     pSrc[b] = tmp;
 8005cda:	f840 e024 	str.w	lr, [r0, r4, lsl #2]
     pSrc[a+1] = pSrc[b+1];
 8005cde:	1d34      	adds	r4, r6, #4
     tmp = pSrc[a+1];
 8005ce0:	5947      	ldr	r7, [r0, r5]
     pSrc[a+1] = pSrc[b+1];
 8005ce2:	5906      	ldr	r6, [r0, r4]
 8005ce4:	5146      	str	r6, [r0, r5]
     pSrc[b+1] = tmp;
 8005ce6:	5107      	str	r7, [r0, r4]
    i += 2;
 8005ce8:	e7e3      	b.n	8005cb2 <arm_bitreversal_32+0xc>
	...

08005cec <arm_cfft_init_2048_f32>:

  @par          Use of this function is mandatory only for the MVE version of the FFT.
                Other versions can still initialize directly the data structure using 
                variables declared in arm_const_structs.h
 */
CFFTINIT_F32(2048,1024)
 8005cec:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005cf0:	8003      	strh	r3, [r0, #0]
 8005cf2:	4b04      	ldr	r3, [pc, #16]	; (8005d04 <arm_cfft_init_2048_f32+0x18>)
 8005cf4:	899a      	ldrh	r2, [r3, #12]
 8005cf6:	8182      	strh	r2, [r0, #12]
 8005cf8:	689a      	ldr	r2, [r3, #8]
 8005cfa:	685b      	ldr	r3, [r3, #4]
 8005cfc:	6082      	str	r2, [r0, #8]
 8005cfe:	6043      	str	r3, [r0, #4]
 8005d00:	2000      	movs	r0, #0
 8005d02:	4770      	bx	lr
 8005d04:	0800a220 	.word	0x0800a220

08005d08 <arm_cfft_init_1024_f32>:

  @par          Use of this function is mandatory only for the MVE version of the FFT.
                Other versions can still initialize directly the data structure using 
                variables declared in arm_const_structs.h
 */
CFFTINIT_F32(1024,1024)
 8005d08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005d0c:	8003      	strh	r3, [r0, #0]
 8005d0e:	4b04      	ldr	r3, [pc, #16]	; (8005d20 <arm_cfft_init_1024_f32+0x18>)
 8005d10:	899a      	ldrh	r2, [r3, #12]
 8005d12:	8182      	strh	r2, [r0, #12]
 8005d14:	689a      	ldr	r2, [r3, #8]
 8005d16:	685b      	ldr	r3, [r3, #4]
 8005d18:	6082      	str	r2, [r0, #8]
 8005d1a:	6043      	str	r3, [r0, #4]
 8005d1c:	2000      	movs	r0, #0
 8005d1e:	4770      	bx	lr
 8005d20:	0800a1f0 	.word	0x0800a1f0

08005d24 <arm_cfft_init_512_f32>:

  @par          Use of this function is mandatory only for the MVE version of the FFT.
                Other versions can still initialize directly the data structure using 
                variables declared in arm_const_structs.h
 */
CFFTINIT_F32(512,256)
 8005d24:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005d28:	8003      	strh	r3, [r0, #0]
 8005d2a:	4b04      	ldr	r3, [pc, #16]	; (8005d3c <arm_cfft_init_512_f32+0x18>)
 8005d2c:	899a      	ldrh	r2, [r3, #12]
 8005d2e:	8182      	strh	r2, [r0, #12]
 8005d30:	689a      	ldr	r2, [r3, #8]
 8005d32:	685b      	ldr	r3, [r3, #4]
 8005d34:	6082      	str	r2, [r0, #8]
 8005d36:	6043      	str	r3, [r0, #4]
 8005d38:	2000      	movs	r0, #0
 8005d3a:	4770      	bx	lr
 8005d3c:	0800a250 	.word	0x0800a250

08005d40 <arm_cfft_init_256_f32>:

  @par          Use of this function is mandatory only for the MVE version of the FFT.
                Other versions can still initialize directly the data structure using 
                variables declared in arm_const_structs.h
 */
CFFTINIT_F32(256,256)
 8005d40:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005d44:	8003      	strh	r3, [r0, #0]
 8005d46:	4b04      	ldr	r3, [pc, #16]	; (8005d58 <arm_cfft_init_256_f32+0x18>)
 8005d48:	899a      	ldrh	r2, [r3, #12]
 8005d4a:	8182      	strh	r2, [r0, #12]
 8005d4c:	689a      	ldr	r2, [r3, #8]
 8005d4e:	685b      	ldr	r3, [r3, #4]
 8005d50:	6082      	str	r2, [r0, #8]
 8005d52:	6043      	str	r3, [r0, #4]
 8005d54:	2000      	movs	r0, #0
 8005d56:	4770      	bx	lr
 8005d58:	0800a230 	.word	0x0800a230

08005d5c <arm_cfft_init_128_f32>:

  @par          Use of this function is mandatory only for the MVE version of the FFT.
                Other versions can still initialize directly the data structure using 
                variables declared in arm_const_structs.h
 */
CFFTINIT_F32(128,64)
 8005d5c:	2380      	movs	r3, #128	; 0x80
 8005d5e:	8003      	strh	r3, [r0, #0]
 8005d60:	4b04      	ldr	r3, [pc, #16]	; (8005d74 <arm_cfft_init_128_f32+0x18>)
 8005d62:	899a      	ldrh	r2, [r3, #12]
 8005d64:	8182      	strh	r2, [r0, #12]
 8005d66:	689a      	ldr	r2, [r3, #8]
 8005d68:	685b      	ldr	r3, [r3, #4]
 8005d6a:	6082      	str	r2, [r0, #8]
 8005d6c:	6043      	str	r3, [r0, #4]
 8005d6e:	2000      	movs	r0, #0
 8005d70:	4770      	bx	lr
 8005d72:	bf00      	nop
 8005d74:	0800a200 	.word	0x0800a200

08005d78 <arm_cfft_init_64_f32>:

  @par          Use of this function is mandatory only for the MVE version of the FFT.
                Other versions can still initialize directly the data structure using 
                variables declared in arm_const_structs.h
 */
CFFTINIT_F32(64,64)
 8005d78:	2340      	movs	r3, #64	; 0x40
 8005d7a:	8003      	strh	r3, [r0, #0]
 8005d7c:	4b04      	ldr	r3, [pc, #16]	; (8005d90 <arm_cfft_init_64_f32+0x18>)
 8005d7e:	899a      	ldrh	r2, [r3, #12]
 8005d80:	8182      	strh	r2, [r0, #12]
 8005d82:	689a      	ldr	r2, [r3, #8]
 8005d84:	685b      	ldr	r3, [r3, #4]
 8005d86:	6082      	str	r2, [r0, #8]
 8005d88:	6043      	str	r3, [r0, #4]
 8005d8a:	2000      	movs	r0, #0
 8005d8c:	4770      	bx	lr
 8005d8e:	bf00      	nop
 8005d90:	0800a260 	.word	0x0800a260

08005d94 <arm_cfft_init_32_f32>:

  @par          Use of this function is mandatory only for the MVE version of the FFT.
                Other versions can still initialize directly the data structure using 
                variables declared in arm_const_structs.h
 */
CFFTINIT_F32(32,16)
 8005d94:	2320      	movs	r3, #32
 8005d96:	8003      	strh	r3, [r0, #0]
 8005d98:	4b04      	ldr	r3, [pc, #16]	; (8005dac <arm_cfft_init_32_f32+0x18>)
 8005d9a:	899a      	ldrh	r2, [r3, #12]
 8005d9c:	8182      	strh	r2, [r0, #12]
 8005d9e:	689a      	ldr	r2, [r3, #8]
 8005da0:	685b      	ldr	r3, [r3, #4]
 8005da2:	6082      	str	r2, [r0, #8]
 8005da4:	6043      	str	r3, [r0, #4]
 8005da6:	2000      	movs	r0, #0
 8005da8:	4770      	bx	lr
 8005daa:	bf00      	nop
 8005dac:	0800a240 	.word	0x0800a240

08005db0 <arm_cfft_init_16_f32>:

  @par          Use of this function is mandatory only for the MVE version of the FFT.
                Other versions can still initialize directly the data structure using 
                variables declared in arm_const_structs.h
 */
CFFTINIT_F32(16,16)
 8005db0:	2310      	movs	r3, #16
 8005db2:	8003      	strh	r3, [r0, #0]
 8005db4:	4b04      	ldr	r3, [pc, #16]	; (8005dc8 <arm_cfft_init_16_f32+0x18>)
 8005db6:	899a      	ldrh	r2, [r3, #12]
 8005db8:	8182      	strh	r2, [r0, #12]
 8005dba:	689a      	ldr	r2, [r3, #8]
 8005dbc:	685b      	ldr	r3, [r3, #4]
 8005dbe:	6082      	str	r2, [r0, #8]
 8005dc0:	6043      	str	r3, [r0, #4]
 8005dc2:	2000      	movs	r0, #0
 8005dc4:	4770      	bx	lr
 8005dc6:	bf00      	nop
 8005dc8:	0800a210 	.word	0x0800a210

08005dcc <arm_radix8_butterfly_f32>:
         pSrc[2 * i7 + 1] = t2 + r3;
         r1 = (r6 - r8) * C81;
         r6 = (r6 + r8) * C81;
         r2 = (s6 - s8) * C81;
         s6 = (s6 + s8) * C81;
         t1 = r5 - r1;
 8005dcc:	eddf 5ab7 	vldr	s11, [pc, #732]	; 80060ac <arm_radix8_butterfly_f32+0x2e0>
 8005dd0:	eeb0 5a65 	vmov.f32	s10, s11
{
 8005dd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dd8:	ed2d 8b10 	vpush	{d8-d15}
 8005ddc:	b08f      	sub	sp, #60	; 0x3c
 8005dde:	9001      	str	r0, [sp, #4]
 8005de0:	9103      	str	r1, [sp, #12]
 8005de2:	920d      	str	r2, [sp, #52]	; 0x34
 8005de4:	9304      	str	r3, [sp, #16]
   n2 = fftLen;
 8005de6:	9102      	str	r1, [sp, #8]
      n2 = n2 >> 3;
 8005de8:	9b02      	ldr	r3, [sp, #8]
 8005dea:	2018      	movs	r0, #24
      i1 = 0;
 8005dec:	f04f 0900 	mov.w	r9, #0
      n2 = n2 >> 3;
 8005df0:	08d9      	lsrs	r1, r3, #3
      i1 = 0;
 8005df2:	00da      	lsls	r2, r3, #3
 8005df4:	014b      	lsls	r3, r1, #5
 8005df6:	fb00 f401 	mul.w	r4, r0, r1
 8005dfa:	2028      	movs	r0, #40	; 0x28
 8005dfc:	ea4f 1b01 	mov.w	fp, r1, lsl #4
 8005e00:	9308      	str	r3, [sp, #32]
 8005e02:	9b01      	ldr	r3, [sp, #4]
 8005e04:	940c      	str	r4, [sp, #48]	; 0x30
 8005e06:	eb03 1c41 	add.w	ip, r3, r1, lsl #5
 8005e0a:	fb00 f401 	mul.w	r4, r0, r1
 8005e0e:	00cb      	lsls	r3, r1, #3
 8005e10:	2030      	movs	r0, #48	; 0x30
 8005e12:	9406      	str	r4, [sp, #24]
 8005e14:	9307      	str	r3, [sp, #28]
 8005e16:	f06f 0317 	mvn.w	r3, #23
 8005e1a:	fb00 f401 	mul.w	r4, r0, r1
 8005e1e:	2038      	movs	r0, #56	; 0x38
 8005e20:	434b      	muls	r3, r1
 8005e22:	9405      	str	r4, [sp, #20]
 8005e24:	eb0c 0703 	add.w	r7, ip, r3
 8005e28:	fb00 fa01 	mul.w	sl, r0, r1
 8005e2c:	9801      	ldr	r0, [sp, #4]
 8005e2e:	eb07 1641 	add.w	r6, r7, r1, lsl #5
 8005e32:	f100 0e04 	add.w	lr, r0, #4
 8005e36:	18f5      	adds	r5, r6, r3
 8005e38:	eb05 1441 	add.w	r4, r5, r1, lsl #5
 8005e3c:	4423      	add	r3, r4
 8005e3e:	eb03 1841 	add.w	r8, r3, r1, lsl #5
         r1 = pSrc[2 * i1] + pSrc[2 * i5];
 8005e42:	eddc 7a00 	vldr	s15, [ip]
 8005e46:	ed1e 7a01 	vldr	s14, [lr, #-4]
         r2 = pSrc[2 * i2] + pSrc[2 * i6];
 8005e4a:	edd7 3a00 	vldr	s7, [r7]
         r1 = pSrc[2 * i1] + pSrc[2 * i5];
 8005e4e:	ee77 6a27 	vadd.f32	s13, s14, s15
         r3 = pSrc[2 * i3] + pSrc[2 * i7];
 8005e52:	edd5 4a00 	vldr	s9, [r5]
         r5 = pSrc[2 * i1] - pSrc[2 * i5];
 8005e56:	ee37 7a67 	vsub.f32	s14, s14, s15
         r2 = pSrc[2 * i2] + pSrc[2 * i6];
 8005e5a:	edd6 7a00 	vldr	s15, [r6]
         r4 = pSrc[2 * i4] + pSrc[2 * i8];
 8005e5e:	ed98 3a00 	vldr	s6, [r8]
 8005e62:	edd3 2a00 	vldr	s5, [r3]
         r2 = pSrc[2 * i2] + pSrc[2 * i6];
 8005e66:	ee33 6aa7 	vadd.f32	s12, s7, s15
         r6 = pSrc[2 * i2] - pSrc[2 * i6];
 8005e6a:	ee73 3ae7 	vsub.f32	s7, s7, s15
         r3 = pSrc[2 * i3] + pSrc[2 * i7];
 8005e6e:	edd4 7a00 	vldr	s15, [r4]
 8005e72:	ee34 4aa7 	vadd.f32	s8, s9, s15
         r7 = pSrc[2 * i3] - pSrc[2 * i7];
 8005e76:	ee74 7ae7 	vsub.f32	s15, s9, s15
         r4 = pSrc[2 * i4] + pSrc[2 * i8];
 8005e7a:	ee72 4a83 	vadd.f32	s9, s5, s6
         t1 = r1 - r3;
 8005e7e:	ee36 8ac4 	vsub.f32	s16, s13, s8
         r1 = r1 + r3;
 8005e82:	ee76 6a84 	vadd.f32	s13, s13, s8
         r3 = r2 - r4;
 8005e86:	ee36 0a64 	vsub.f32	s0, s12, s9
         r2 = r2 + r4;
 8005e8a:	ee36 6a24 	vadd.f32	s12, s12, s9
         r8 = pSrc[2 * i4] - pSrc[2 * i8];
 8005e8e:	ee72 2ac3 	vsub.f32	s5, s5, s6
         pSrc[2 * i1] = r1 + r2;
 8005e92:	ee76 4a86 	vadd.f32	s9, s13, s12
         pSrc[2 * i5] = r1 - r2;
 8005e96:	ee76 6ac6 	vsub.f32	s13, s13, s12
         pSrc[2 * i1] = r1 + r2;
 8005e9a:	ed4e 4a01 	vstr	s9, [lr, #-4]
         pSrc[2 * i5] = r1 - r2;
 8005e9e:	edcc 6a00 	vstr	s13, [ip]
         r1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 8005ea2:	ed9c 6a01 	vldr	s12, [ip, #4]
 8005ea6:	edde 4a00 	vldr	s9, [lr]
         r2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 8005eaa:	ed97 4a01 	vldr	s8, [r7, #4]
         r1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 8005eae:	ee74 6a86 	vadd.f32	s13, s9, s12
         s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 8005eb2:	ed95 3a01 	vldr	s6, [r5, #4]
         s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 8005eb6:	ee34 6ac6 	vsub.f32	s12, s9, s12
         r2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 8005eba:	edd6 4a01 	vldr	s9, [r6, #4]
         r4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 8005ebe:	edd8 1a01 	vldr	s3, [r8, #4]
         r2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 8005ec2:	ee34 2a24 	vadd.f32	s4, s8, s9
         s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 8005ec6:	ee34 4a64 	vsub.f32	s8, s8, s9
         s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 8005eca:	edd4 4a01 	vldr	s9, [r4, #4]
 8005ece:	ee33 1a24 	vadd.f32	s2, s6, s9
         s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 8005ed2:	ee73 4a64 	vsub.f32	s9, s6, s9
         r4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 8005ed6:	ed93 3a01 	vldr	s6, [r3, #4]
 8005eda:	ee73 0a21 	vadd.f32	s1, s6, s3
         s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 8005ede:	ee33 3a61 	vsub.f32	s6, s6, s3
         t2 = r1 - s3;
 8005ee2:	ee76 1ac1 	vsub.f32	s3, s13, s2
         r1 = r1 + s3;
 8005ee6:	ee76 6a81 	vadd.f32	s13, s13, s2
         s3 = r2 - r4;
 8005eea:	ee32 1a60 	vsub.f32	s2, s4, s1
         r2 = r2 + r4;
 8005eee:	ee32 2a20 	vadd.f32	s4, s4, s1
         pSrc[2 * i1 + 1] = r1 + r2;
 8005ef2:	ee76 0a82 	vadd.f32	s1, s13, s4
         pSrc[2 * i5 + 1] = r1 - r2;
 8005ef6:	ee76 6ac2 	vsub.f32	s13, s13, s4
         pSrc[2 * i7]     = t1 - s3;
 8005efa:	ee38 2a41 	vsub.f32	s4, s16, s2
         pSrc[2 * i1 + 1] = r1 + r2;
 8005efe:	edce 0a00 	vstr	s1, [lr]
         pSrc[2 * i5 + 1] = r1 - r2;
 8005f02:	4496      	add	lr, r2
 8005f04:	edcc 6a01 	vstr	s13, [ip, #4]
         pSrc[2 * i3]     = t1 + s3;
 8005f08:	ee78 6a01 	vadd.f32	s13, s16, s2
 8005f0c:	4494      	add	ip, r2
 8005f0e:	edc5 6a00 	vstr	s13, [r5]
         pSrc[2 * i3 + 1] = t2 - r3;
 8005f12:	ee71 6ac0 	vsub.f32	s13, s3, s0
         pSrc[2 * i7]     = t1 - s3;
 8005f16:	ed84 2a00 	vstr	s4, [r4]
         r2 = (s6 - s8) * C81;
 8005f1a:	ee34 2a43 	vsub.f32	s4, s8, s6
         s6 = (s6 + s8) * C81;
 8005f1e:	ee34 4a03 	vadd.f32	s8, s8, s6
         pSrc[2 * i3 + 1] = t2 - r3;
 8005f22:	edc5 6a01 	vstr	s13, [r5, #4]
         pSrc[2 * i7 + 1] = t2 + r3;
 8005f26:	ee70 6a21 	vadd.f32	s13, s0, s3
         r1 = (r6 - r8) * C81;
 8005f2a:	ee73 1ae2 	vsub.f32	s3, s7, s5
 8005f2e:	4415      	add	r5, r2
         t1 = r5 - r1;
 8005f30:	eeb0 3a47 	vmov.f32	s6, s14
         pSrc[2 * i7 + 1] = t2 + r3;
 8005f34:	edc4 6a01 	vstr	s13, [r4, #4]
         r6 = (r6 + r8) * C81;
 8005f38:	ee73 6aa2 	vadd.f32	s13, s7, s5
         r5 = r5 + r1;
         r8 = r7 - r6;
 8005f3c:	eef0 3a67 	vmov.f32	s7, s15
 8005f40:	4414      	add	r4, r2
         r7 = r7 + r6;
         t2 = s5 - r2;
 8005f42:	eef0 2a46 	vmov.f32	s5, s12
         r7 = r7 + r6;
 8005f46:	eee6 7aa5 	vfma.f32	s15, s13, s11
         r8 = r7 - r6;
 8005f4a:	eee6 3ae5 	vfms.f32	s7, s13, s11
         s5 = s5 + r2;
 8005f4e:	eef0 6a46 	vmov.f32	s13, s12
         s8 = s7 - s6;
         s7 = s7 + s6;
 8005f52:	eeb0 6a64 	vmov.f32	s12, s9
         t2 = s5 - r2;
 8005f56:	eee2 2a65 	vfms.f32	s5, s4, s11
         s5 = s5 + r2;
 8005f5a:	eee2 6a25 	vfma.f32	s13, s4, s11
         r5 = r5 + r1;
 8005f5e:	eea1 7aa5 	vfma.f32	s14, s3, s11
         s7 = s7 + s6;
 8005f62:	eea4 6a25 	vfma.f32	s12, s8, s11
         s8 = s7 - s6;
 8005f66:	eeb0 2a64 	vmov.f32	s4, s9
         t1 = r5 - r1;
 8005f6a:	eea1 3ae5 	vfms.f32	s6, s3, s11
         s8 = s7 - s6;
 8005f6e:	eea4 2a65 	vfms.f32	s4, s8, s11
         pSrc[2 * i2]     = r5 + s7;
 8005f72:	ee77 4a06 	vadd.f32	s9, s14, s12
         pSrc[2 * i8]     = r5 - s7;
 8005f76:	ee37 7a46 	vsub.f32	s14, s14, s12
         pSrc[2 * i2]     = r5 + s7;
 8005f7a:	edc7 4a00 	vstr	s9, [r7]
         pSrc[2 * i8]     = r5 - s7;
 8005f7e:	ed88 7a00 	vstr	s14, [r8]
         pSrc[2 * i6]     = t1 + s8;
 8005f82:	ee33 7a02 	vadd.f32	s14, s6, s4
         pSrc[2 * i4]     = t1 - s8;
 8005f86:	ee33 3a42 	vsub.f32	s6, s6, s4
         pSrc[2 * i6]     = t1 + s8;
 8005f8a:	ed86 7a00 	vstr	s14, [r6]
         pSrc[2 * i2 + 1] = s5 - r7;
 8005f8e:	ee36 7ae7 	vsub.f32	s14, s13, s15
         pSrc[2 * i8 + 1] = s5 + r7;
 8005f92:	ee77 7aa6 	vadd.f32	s15, s15, s13
         pSrc[2 * i4]     = t1 - s8;
 8005f96:	ed83 3a00 	vstr	s6, [r3]
         pSrc[2 * i2 + 1] = s5 - r7;
 8005f9a:	ed87 7a01 	vstr	s14, [r7, #4]
         pSrc[2 * i8 + 1] = s5 + r7;
 8005f9e:	4417      	add	r7, r2
 8005fa0:	edc8 7a01 	vstr	s15, [r8, #4]
         pSrc[2 * i6 + 1] = t2 - r8;
 8005fa4:	ee72 7ae3 	vsub.f32	s15, s5, s7
         pSrc[2 * i4 + 1] = t2 + r8;
 8005fa8:	ee73 3aa2 	vadd.f32	s7, s7, s5
 8005fac:	4490      	add	r8, r2
         pSrc[2 * i6 + 1] = t2 - r8;
 8005fae:	edc6 7a01 	vstr	s15, [r6, #4]
         pSrc[2 * i4 + 1] = t2 + r8;
 8005fb2:	4416      	add	r6, r2
 8005fb4:	edc3 3a01 	vstr	s7, [r3, #4]

         i1 += n1;
 8005fb8:	4413      	add	r3, r2
 8005fba:	9802      	ldr	r0, [sp, #8]
 8005fbc:	4481      	add	r9, r0
      } while (i1 < fftLen);
 8005fbe:	9803      	ldr	r0, [sp, #12]
 8005fc0:	4548      	cmp	r0, r9
 8005fc2:	f63f af3e 	bhi.w	8005e42 <arm_radix8_butterfly_f32+0x76>

      if (n2 < 8)
 8005fc6:	2907      	cmp	r1, #7
 8005fc8:	f240 8174 	bls.w	80062b4 <arm_radix8_butterfly_f32+0x4e8>
 8005fcc:	9801      	ldr	r0, [sp, #4]
         break;

      ia1 = 0;
      j = 1;
 8005fce:	2401      	movs	r4, #1
 8005fd0:	9b08      	ldr	r3, [sp, #32]
 8005fd2:	4403      	add	r3, r0
 8005fd4:	930b      	str	r3, [sp, #44]	; 0x2c
 8005fd6:	9b07      	ldr	r3, [sp, #28]
 8005fd8:	4403      	add	r3, r0
 8005fda:	930a      	str	r3, [sp, #40]	; 0x28
 8005fdc:	9b06      	ldr	r3, [sp, #24]
 8005fde:	4403      	add	r3, r0
 8005fe0:	9309      	str	r3, [sp, #36]	; 0x24
 8005fe2:	eb0b 0300 	add.w	r3, fp, r0
 8005fe6:	9308      	str	r3, [sp, #32]
 8005fe8:	9b05      	ldr	r3, [sp, #20]
 8005fea:	4403      	add	r3, r0
 8005fec:	9307      	str	r3, [sp, #28]
 8005fee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005ff0:	4403      	add	r3, r0
 8005ff2:	9306      	str	r3, [sp, #24]
 8005ff4:	eb0a 0300 	add.w	r3, sl, r0
 8005ff8:	9305      	str	r3, [sp, #20]
      ia1 = 0;
 8005ffa:	2300      	movs	r3, #0

      do
      {
         /*  index calculation for the coefficients */
         id  = ia1 + twidCoefModifier;
 8005ffc:	9804      	ldr	r0, [sp, #16]
         si5 = pCoef[2 * ia4 + 1];
         si6 = pCoef[2 * ia5 + 1];
         si7 = pCoef[2 * ia6 + 1];
         si8 = pCoef[2 * ia7 + 1];

         i1 = j;
 8005ffe:	46a3      	mov	fp, r4
         id  = ia1 + twidCoefModifier;
 8006000:	4403      	add	r3, r0
         co2 = pCoef[2 * ia1];
 8006002:	980d      	ldr	r0, [sp, #52]	; 0x34
 8006004:	eb00 05c3 	add.w	r5, r0, r3, lsl #3
 8006008:	f06f 002f 	mvn.w	r0, #47	; 0x2f
 800600c:	edd5 1a00 	vldr	s3, [r5]
         co3 = pCoef[2 * ia2];
 8006010:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8006014:	ed95 8a00 	vldr	s16, [r5]
         co4 = pCoef[2 * ia3];
 8006018:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800601c:	edd5 4a00 	vldr	s9, [r5]
         co5 = pCoef[2 * ia4];
 8006020:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8006024:	ed95 9a00 	vldr	s18, [r5]
         co6 = pCoef[2 * ia5];
 8006028:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800602c:	edd5 3a00 	vldr	s7, [r5]
         co7 = pCoef[2 * ia6];
 8006030:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8006034:	edd5 0a00 	vldr	s1, [r5]
         co8 = pCoef[2 * ia7];
 8006038:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800603c:	edd5 2a00 	vldr	s5, [r5]
         si2 = pCoef[2 * ia1 + 1];
 8006040:	fb00 5503 	mla	r5, r0, r3, r5
 8006044:	9801      	ldr	r0, [sp, #4]
 8006046:	ed95 1a01 	vldr	s2, [r5, #4]
         si3 = pCoef[2 * ia2 + 1];
 800604a:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800604e:	eb00 0ac4 	add.w	sl, r0, r4, lsl #3
 8006052:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8006054:	edd5 8a01 	vldr	s17, [r5, #4]
         si4 = pCoef[2 * ia3 + 1];
 8006058:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800605c:	eb00 09c4 	add.w	r9, r0, r4, lsl #3
 8006060:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006062:	ed95 4a01 	vldr	s8, [r5, #4]
         si5 = pCoef[2 * ia4 + 1];
 8006066:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800606a:	eb00 08c4 	add.w	r8, r0, r4, lsl #3
 800606e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006070:	edd5 9a01 	vldr	s19, [r5, #4]
         si6 = pCoef[2 * ia5 + 1];
 8006074:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8006078:	eb00 0ec4 	add.w	lr, r0, r4, lsl #3
 800607c:	9808      	ldr	r0, [sp, #32]
 800607e:	ed95 3a01 	vldr	s6, [r5, #4]
         si7 = pCoef[2 * ia6 + 1];
 8006082:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8006086:	eb00 0cc4 	add.w	ip, r0, r4, lsl #3
 800608a:	9807      	ldr	r0, [sp, #28]
 800608c:	ed95 0a01 	vldr	s0, [r5, #4]
         si8 = pCoef[2 * ia7 + 1];
 8006090:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8006094:	eb00 07c4 	add.w	r7, r0, r4, lsl #3
 8006098:	9806      	ldr	r0, [sp, #24]
 800609a:	ed95 2a01 	vldr	s4, [r5, #4]
         i1 = j;
 800609e:	eb00 06c4 	add.w	r6, r0, r4, lsl #3
 80060a2:	9805      	ldr	r0, [sp, #20]
 80060a4:	eb00 05c4 	add.w	r5, r0, r4, lsl #3
 80060a8:	e002      	b.n	80060b0 <arm_radix8_butterfly_f32+0x2e4>
 80060aa:	bf00      	nop
 80060ac:	3f3504f3 	.word	0x3f3504f3
            i4 = i3 + n2;
            i5 = i4 + n2;
            i6 = i5 + n2;
            i7 = i6 + n2;
            i8 = i7 + n2;
            r1 = pSrc[2 * i1] + pSrc[2 * i5];
 80060b0:	edd9 7a00 	vldr	s15, [r9]
            r5 = pSrc[2 * i1] - pSrc[2 * i5];
            r2 = pSrc[2 * i2] + pSrc[2 * i6];
 80060b4:	edd8 6a00 	vldr	s13, [r8]
 80060b8:	ed9e 7a00 	vldr	s14, [lr]
            r1 = pSrc[2 * i1] + pSrc[2 * i5];
 80060bc:	ed9a aa00 	vldr	s20, [sl]
            r6 = pSrc[2 * i2] - pSrc[2 * i6];
            r3 = pSrc[2 * i3] + pSrc[2 * i7];
 80060c0:	ed9c ba00 	vldr	s22, [ip]
            r6 = pSrc[2 * i2] - pSrc[2 * i6];
 80060c4:	ee36 dac7 	vsub.f32	s26, s13, s14
            r1 = pSrc[2 * i1] + pSrc[2 * i5];
 80060c8:	ee3a 6a27 	vadd.f32	s12, s20, s15
            r7 = pSrc[2 * i3] - pSrc[2 * i7];
            r4 = pSrc[2 * i4] + pSrc[2 * i8];
 80060cc:	ed96 ea00 	vldr	s28, [r6]
            r5 = pSrc[2 * i1] - pSrc[2 * i5];
 80060d0:	ee3a aa67 	vsub.f32	s20, s20, s15
            r2 = pSrc[2 * i2] + pSrc[2 * i6];
 80060d4:	ee76 7a87 	vadd.f32	s15, s13, s14
            r3 = pSrc[2 * i3] + pSrc[2 * i7];
 80060d8:	edd7 6a00 	vldr	s13, [r7]
 80060dc:	ee3b 7a26 	vadd.f32	s14, s22, s13
            r7 = pSrc[2 * i3] - pSrc[2 * i7];
 80060e0:	ee3b ba66 	vsub.f32	s22, s22, s13
            r4 = pSrc[2 * i4] + pSrc[2 * i8];
 80060e4:	edd5 6a00 	vldr	s13, [r5]
 80060e8:	ee7e aa26 	vadd.f32	s21, s28, s13
            r8 = pSrc[2 * i4] - pSrc[2 * i8];
            t1 = r1 - r3;
 80060ec:	ee36 fa47 	vsub.f32	s30, s12, s14
            r1 = r1 + r3;
 80060f0:	ee36 6a07 	vadd.f32	s12, s12, s14
            r3 = r2 - r4;
 80060f4:	ee77 eaea 	vsub.f32	s29, s15, s21
            r2 = r2 + r4;
 80060f8:	ee77 7aaa 	vadd.f32	s15, s15, s21
            r8 = pSrc[2 * i4] - pSrc[2 * i8];
 80060fc:	ee3e ea66 	vsub.f32	s28, s28, s13
            pSrc[2 * i1] = r1 + r2;
 8006100:	ee36 7a27 	vadd.f32	s14, s12, s15
            r2 = r1 - r2;
 8006104:	ee76 aa67 	vsub.f32	s21, s12, s15
            s1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 8006108:	ed9a 6a01 	vldr	s12, [sl, #4]
            pSrc[2 * i1] = r1 + r2;
 800610c:	ed8a 7a00 	vstr	s14, [sl]
            s1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 8006110:	edd9 7a01 	vldr	s15, [r9, #4]
            s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
            s2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 8006114:	edd8 ca01 	vldr	s25, [r8, #4]
            s1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 8006118:	ee36 7a27 	vadd.f32	s14, s12, s15
            s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
            s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 800611c:	eddc 6a01 	vldr	s13, [ip, #4]
            s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 8006120:	ee76 ba67 	vsub.f32	s23, s12, s15
            s2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 8006124:	edde 7a01 	vldr	s15, [lr, #4]
            s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
            s4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 8006128:	edd6 fa01 	vldr	s31, [r6, #4]
 800612c:	edd5 da01 	vldr	s27, [r5, #4]
            s2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 8006130:	ee3c 6aa7 	vadd.f32	s12, s25, s15
            s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 8006134:	ee7c cae7 	vsub.f32	s25, s25, s15
            s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 8006138:	edd7 7a01 	vldr	s15, [r7, #4]
 800613c:	ee36 caa7 	vadd.f32	s24, s13, s15
            s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 8006140:	ee76 7ae7 	vsub.f32	s15, s13, s15
            s4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 8006144:	ee7f 6aad 	vadd.f32	s13, s31, s27
            s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 8006148:	ee7f daed 	vsub.f32	s27, s31, s27
            t2 = s1 - s3;
 800614c:	ee77 fa4c 	vsub.f32	s31, s14, s24
            s1 = s1 + s3;
 8006150:	ee37 ca0c 	vadd.f32	s24, s14, s24
            s3 = s2 - s4;
 8006154:	ee36 7a66 	vsub.f32	s14, s12, s13
            s2 = s2 + s4;
 8006158:	ee36 6a26 	vadd.f32	s12, s12, s13
            r1 = t1 + s3;
 800615c:	ee7f 6a07 	vadd.f32	s13, s30, s14
            t1 = t1 - s3;
 8006160:	ee3f 7a47 	vsub.f32	s14, s30, s14
            pSrc[2 * i1 + 1] = s1 + s2;
 8006164:	ee3c fa06 	vadd.f32	s30, s24, s12
            s2 = s1 - s2;
 8006168:	ee3c ca46 	vsub.f32	s24, s24, s12
            pSrc[2 * i1 + 1] = s1 + s2;
 800616c:	ed8a fa01 	vstr	s30, [sl, #4]
            s1 = t2 - r3;
 8006170:	ee3f faee 	vsub.f32	s30, s31, s29
            t2 = t2 + r3;
            p1 = co5 * r2;
            p2 = si5 * s2;
 8006174:	ee29 6a8c 	vmul.f32	s12, s19, s24
 8006178:	4492      	add	sl, r2
            t2 = t2 + r3;
 800617a:	ee7e eaaf 	vadd.f32	s29, s29, s31
            p3 = co5 * s2;
            p4 = si5 * r2;
            pSrc[2 * i5]     = p1 + p2;
 800617e:	eea9 6a2a 	vfma.f32	s12, s18, s21
 8006182:	ed89 6a00 	vstr	s12, [r9]
            pSrc[2 * i5 + 1] = p3 - p4;
 8006186:	ee2a 6ae9 	vnmul.f32	s12, s21, s19
            p2 = si7 * t2;
            p3 = co7 * t2;
            p4 = si7 * t1;
            pSrc[2 * i7]     = p1 + p2;
            pSrc[2 * i7 + 1] = p3 - p4;
            r1 = (r6 - r8) * C81;
 800618a:	ee7d aa4e 	vsub.f32	s21, s26, s28
            pSrc[2 * i5 + 1] = p3 - p4;
 800618e:	eea9 6a0c 	vfma.f32	s12, s18, s24
            r6 = (r6 + r8) * C81;
            s1 = (s6 - s8) * C81;
            s6 = (s6 + s8) * C81;
            t1 = r5 - r1;
 8006192:	eeb0 ca4a 	vmov.f32	s24, s20
            r5 = r5 + r1;
 8006196:	eeaa aa85 	vfma.f32	s20, s21, s10
            t1 = r5 - r1;
 800619a:	eeaa cac5 	vfms.f32	s24, s21, s10
            r8 = r7 - r6;
 800619e:	eef0 aa4b 	vmov.f32	s21, s22
            pSrc[2 * i5 + 1] = p3 - p4;
 80061a2:	ed89 6a01 	vstr	s12, [r9, #4]
            p2 = si3 * s1;
 80061a6:	ee28 6a8f 	vmul.f32	s12, s17, s30
 80061aa:	4491      	add	r9, r2
            pSrc[2 * i3]     = p1 + p2;
 80061ac:	eea8 6a26 	vfma.f32	s12, s16, s13
            pSrc[2 * i3 + 1] = p3 - p4;
 80061b0:	ee66 6ae8 	vnmul.f32	s13, s13, s17
 80061b4:	eee8 6a0f 	vfma.f32	s13, s16, s30
            pSrc[2 * i3]     = p1 + p2;
 80061b8:	ed8c 6a00 	vstr	s12, [ip]
            s1 = (s6 - s8) * C81;
 80061bc:	ee3c 6aed 	vsub.f32	s12, s25, s27
            pSrc[2 * i3 + 1] = p3 - p4;
 80061c0:	edcc 6a01 	vstr	s13, [ip, #4]
            p2 = si7 * t2;
 80061c4:	ee60 6a2e 	vmul.f32	s13, s0, s29
 80061c8:	4494      	add	ip, r2
            pSrc[2 * i7]     = p1 + p2;
 80061ca:	eee0 6a87 	vfma.f32	s13, s1, s14
            pSrc[2 * i7 + 1] = p3 - p4;
 80061ce:	ee27 7a40 	vnmul.f32	s14, s14, s0
 80061d2:	eea0 7aae 	vfma.f32	s14, s1, s29
            pSrc[2 * i7]     = p1 + p2;
 80061d6:	edc7 6a00 	vstr	s13, [r7]
            r6 = (r6 + r8) * C81;
 80061da:	ee7d 6a0e 	vadd.f32	s13, s26, s28
            r7 = r7 + r6;
 80061de:	eea6 ba85 	vfma.f32	s22, s13, s10
            pSrc[2 * i7 + 1] = p3 - p4;
 80061e2:	ed87 7a01 	vstr	s14, [r7, #4]
            s6 = (s6 + s8) * C81;
 80061e6:	ee3c 7aad 	vadd.f32	s14, s25, s27
            t2 = s5 - s1;
 80061ea:	eef0 ca6b 	vmov.f32	s25, s23
 80061ee:	4417      	add	r7, r2
            s5 = s5 + s1;
 80061f0:	eee6 ba05 	vfma.f32	s23, s12, s10
            r8 = r7 - r6;
 80061f4:	eee6 aac5 	vfms.f32	s21, s13, s10
            t2 = s5 - s1;
 80061f8:	eee6 ca45 	vfms.f32	s25, s12, s10
            s5 = s5 + s1;
 80061fc:	eeb0 6a6b 	vmov.f32	s12, s23
            s8 = s7 - s6;
 8006200:	eef0 ba67 	vmov.f32	s23, s15
            s7 = s7 + s6;
 8006204:	eee7 7a05 	vfma.f32	s15, s14, s10
            s8 = s7 - s6;
 8006208:	eee7 ba45 	vfms.f32	s23, s14, s10
            r1 = r5 + s7;
 800620c:	ee7a 6a27 	vadd.f32	s13, s20, s15
            r5 = r5 - s7;
 8006210:	ee7a 7a67 	vsub.f32	s15, s20, s15
            r6 = t1 + s8;
 8006214:	ee3c 7a2b 	vadd.f32	s14, s24, s23
            t1 = t1 - s8;
 8006218:	ee3c aa6b 	vsub.f32	s20, s24, s23
            s1 = s5 - r7;
 800621c:	ee36 ca4b 	vsub.f32	s24, s12, s22
            s5 = s5 + r7;
 8006220:	ee3b 6a06 	vadd.f32	s12, s22, s12
            s6 = t2 - r8;
 8006224:	ee3c baea 	vsub.f32	s22, s25, s21
            t2 = t2 + r8;
            p1 = co2 * r1;
            p2 = si2 * s1;
 8006228:	ee61 ba0c 	vmul.f32	s23, s2, s24
            t2 = t2 + r8;
 800622c:	ee7a aaac 	vadd.f32	s21, s21, s25
            p3 = co2 * s1;
            p4 = si2 * r1;
            pSrc[2 * i2]     = p1 + p2;
 8006230:	eee1 baa6 	vfma.f32	s23, s3, s13
            pSrc[2 * i2 + 1] = p3 - p4;
 8006234:	ee66 6ac1 	vnmul.f32	s13, s13, s2
 8006238:	eee1 6a8c 	vfma.f32	s13, s3, s24
            pSrc[2 * i2]     = p1 + p2;
 800623c:	edc8 ba00 	vstr	s23, [r8]
            pSrc[2 * i2 + 1] = p3 - p4;
 8006240:	edc8 6a01 	vstr	s13, [r8, #4]
            p1 = co8 * r5;
            p2 = si8 * s5;
 8006244:	ee62 6a06 	vmul.f32	s13, s4, s12
 8006248:	4490      	add	r8, r2
            p3 = co8 * s5;
            p4 = si8 * r5;
            pSrc[2 * i8]     = p1 + p2;
 800624a:	eee2 6aa7 	vfma.f32	s13, s5, s15
 800624e:	edc5 6a00 	vstr	s13, [r5]
            pSrc[2 * i8 + 1] = p3 - p4;
 8006252:	ee67 6ac2 	vnmul.f32	s13, s15, s4
            p1 = co6 * r6;
            p2 = si6 * s6;
 8006256:	ee63 7a0b 	vmul.f32	s15, s6, s22
            pSrc[2 * i8 + 1] = p3 - p4;
 800625a:	eee2 6a86 	vfma.f32	s13, s5, s12
            p3 = co6 * s6;
            p4 = si6 * r6;
            pSrc[2 * i6]     = p1 + p2;
 800625e:	eee3 7a87 	vfma.f32	s15, s7, s14
            pSrc[2 * i6 + 1] = p3 - p4;
 8006262:	ee27 7a43 	vnmul.f32	s14, s14, s6
 8006266:	eea3 7a8b 	vfma.f32	s14, s7, s22
            pSrc[2 * i8 + 1] = p3 - p4;
 800626a:	edc5 6a01 	vstr	s13, [r5, #4]
            pSrc[2 * i6]     = p1 + p2;
 800626e:	4415      	add	r5, r2
 8006270:	edce 7a00 	vstr	s15, [lr]
            p1 = co4 * t1;
            p2 = si4 * t2;
 8006274:	ee64 7a2a 	vmul.f32	s15, s8, s21
            p3 = co4 * t2;
            p4 = si4 * t1;
            pSrc[2 * i4]     = p1 + p2;
 8006278:	eee4 7a8a 	vfma.f32	s15, s9, s20
            pSrc[2 * i6 + 1] = p3 - p4;
 800627c:	ed8e 7a01 	vstr	s14, [lr, #4]
            pSrc[2 * i4]     = p1 + p2;
 8006280:	4496      	add	lr, r2
 8006282:	edc6 7a00 	vstr	s15, [r6]
            pSrc[2 * i4 + 1] = p3 - p4;
 8006286:	ee6a 7a44 	vnmul.f32	s15, s20, s8
 800628a:	eee4 7aaa 	vfma.f32	s15, s9, s21
 800628e:	edc6 7a01 	vstr	s15, [r6, #4]

            i1 += n1;
 8006292:	4416      	add	r6, r2
 8006294:	9802      	ldr	r0, [sp, #8]
 8006296:	4483      	add	fp, r0
         } while (i1 < fftLen);
 8006298:	9803      	ldr	r0, [sp, #12]
 800629a:	4558      	cmp	r0, fp
 800629c:	f63f af08 	bhi.w	80060b0 <arm_radix8_butterfly_f32+0x2e4>

         j++;
 80062a0:	3401      	adds	r4, #1
      } while (j < n2);
 80062a2:	42a1      	cmp	r1, r4
 80062a4:	f47f aeaa 	bne.w	8005ffc <arm_radix8_butterfly_f32+0x230>

      twidCoefModifier <<= 3;
 80062a8:	9b04      	ldr	r3, [sp, #16]
 80062aa:	9102      	str	r1, [sp, #8]
 80062ac:	00db      	lsls	r3, r3, #3
 80062ae:	b29b      	uxth	r3, r3
 80062b0:	9304      	str	r3, [sp, #16]
   } while (n2 > 7);
 80062b2:	e599      	b.n	8005de8 <arm_radix8_butterfly_f32+0x1c>
}
 80062b4:	b00f      	add	sp, #60	; 0x3c
 80062b6:	ecbd 8b10 	vpop	{d8-d15}
 80062ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062be:	bf00      	nop

080062c0 <arm_cfft_radix8by2_f32>:
  @endcode

 */

void arm_cfft_radix8by2_f32 (arm_cfft_instance_f32 * S, float32_t * p1)
{
 80062c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80062c4:	4680      	mov	r8, r0
 80062c6:	4608      	mov	r0, r1
  uint32_t    L  = S->fftLen;
 80062c8:	f8b8 7000 	ldrh.w	r7, [r8]
  float32_t * pCol1, * pCol2, * pMid1, * pMid2;
  float32_t * p2 = p1 + L;
 80062cc:	4606      	mov	r6, r0
  const float32_t * tw = (float32_t *) S->pTwiddle;
 80062ce:	f8d8 2004 	ldr.w	r2, [r8, #4]
  float32_t * p2 = p1 + L;
 80062d2:	eb01 0987 	add.w	r9, r1, r7, lsl #2

  pCol1 = p1;
  pCol2 = p2;

  /* Define new length */
  L >>= 1;
 80062d6:	0879      	lsrs	r1, r7, #1
  const float32_t * tw = (float32_t *) S->pTwiddle;
 80062d8:	4694      	mov	ip, r2
  /* Initialize mid pointers */
  pMid1 = p1 + L;
  pMid2 = p2 + L;

  /* do two dot Fourier transform */
  for (l = L >> 2; l > 0; l-- )
 80062da:	08ff      	lsrs	r7, r7, #3
 80062dc:	464b      	mov	r3, r9
  pMid1 = p1 + L;
 80062de:	eb00 0581 	add.w	r5, r0, r1, lsl #2
  pMid2 = p2 + L;
 80062e2:	eb09 0481 	add.w	r4, r9, r1, lsl #2
 80062e6:	eb02 1707 	add.w	r7, r2, r7, lsl #4
{
 80062ea:	ed2d 8b02 	vpush	{d8}
 80062ee:	b083      	sub	sp, #12
  for (l = L >> 2; l > 0; l-- )
 80062f0:	45bc      	cmp	ip, r7
 80062f2:	f106 0610 	add.w	r6, r6, #16
 80062f6:	f105 0510 	add.w	r5, r5, #16
 80062fa:	f104 0410 	add.w	r4, r4, #16
 80062fe:	f103 0310 	add.w	r3, r3, #16
 8006302:	d110      	bne.n	8006326 <arm_cfft_radix8by2_f32+0x66>
    *pMid2++ = m0 - m1;
    *pMid2++ = m2 + m3;
  }

  /* first col */
  arm_radix8_butterfly_f32 (pCol1, L, (float32_t *) S->pTwiddle, 2U);
 8006304:	b289      	uxth	r1, r1
 8006306:	2302      	movs	r3, #2
 8006308:	9101      	str	r1, [sp, #4]
 800630a:	f7ff fd5f 	bl	8005dcc <arm_radix8_butterfly_f32>

  /* second col */
  arm_radix8_butterfly_f32 (pCol2, L, (float32_t *) S->pTwiddle, 2U);
 800630e:	2302      	movs	r3, #2
 8006310:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8006314:	9901      	ldr	r1, [sp, #4]
 8006316:	4648      	mov	r0, r9
}
 8006318:	b003      	add	sp, #12
 800631a:	ecbd 8b02 	vpop	{d8}
 800631e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  arm_radix8_butterfly_f32 (pCol2, L, (float32_t *) S->pTwiddle, 2U);
 8006322:	f7ff bd53 	b.w	8005dcc <arm_radix8_butterfly_f32>
    t2[0] = p2[0];
 8006326:	ed13 0a04 	vldr	s0, [r3, #-16]
 800632a:	f10c 0c10 	add.w	ip, ip, #16
    t1[0] = p1[0];
 800632e:	ed16 7a04 	vldr	s14, [r6, #-16]
    t2[1] = p2[1];
 8006332:	ed53 0a03 	vldr	s1, [r3, #-12]
    *p1++ = t1[0] + t2[0];
 8006336:	ee37 8a00 	vadd.f32	s16, s14, s0
    t1[1] = p1[1];
 800633a:	ed56 3a03 	vldr	s7, [r6, #-12]
    t4[0] = pMid2[0];
 800633e:	ed14 4a04 	vldr	s8, [r4, #-16]
    t2[0] = t1[0] - t2[0];
 8006342:	ee37 7a40 	vsub.f32	s14, s14, s0
    t4[1] = pMid2[1];
 8006346:	ed54 4a03 	vldr	s9, [r4, #-12]
    t2[2] = p2[2];
 800634a:	ed53 7a02 	vldr	s15, [r3, #-8]
    t2[3] = p2[3];
 800634e:	ed13 5a01 	vldr	s10, [r3, #-4]
    t3[1] = pMid1[1];
 8006352:	ed55 2a03 	vldr	s5, [r5, #-12]
    t3[2] = pMid1[2];
 8006356:	ed15 3a02 	vldr	s6, [r5, #-8]
    t3[3] = pMid1[3];
 800635a:	ed55 6a01 	vldr	s13, [r5, #-4]
    t4[2] = pMid2[2];
 800635e:	ed54 5a02 	vldr	s11, [r4, #-8]
    t4[3] = pMid2[3];
 8006362:	ed14 6a01 	vldr	s12, [r4, #-4]
    t3[0] = pMid1[0];
 8006366:	ed15 2a04 	vldr	s4, [r5, #-16]
    *p1++ = t1[0] + t2[0];
 800636a:	ed06 8a04 	vstr	s16, [r6, #-16]
    *p1++ = t1[1] + t2[1];
 800636e:	ee33 8aa0 	vadd.f32	s16, s7, s1
    t1[2] = p1[2];
 8006372:	ed16 1a02 	vldr	s2, [r6, #-8]
    t2[1] = t1[1] - t2[1];
 8006376:	ee73 3ae0 	vsub.f32	s7, s7, s1
    t1[3] = p1[3];
 800637a:	ed56 1a01 	vldr	s3, [r6, #-4]
    *p1++ = t1[1] + t2[1];
 800637e:	ed06 8a03 	vstr	s16, [r6, #-12]
    *p1++ = t1[2] + t2[2];
 8006382:	ee31 8a27 	vadd.f32	s16, s2, s15
    t2[2] = t1[2] - t2[2];
 8006386:	ee71 7a67 	vsub.f32	s15, s2, s15
    *p1++ = t1[2] + t2[2];
 800638a:	ed06 8a02 	vstr	s16, [r6, #-8]
    *p1++ = t1[3] + t2[3];    /* col 1 */
 800638e:	ee31 8a85 	vadd.f32	s16, s3, s10
    t2[3] = t1[3] - t2[3];    /* for col 2 */
 8006392:	ee31 5ac5 	vsub.f32	s10, s3, s10
    *pMid1++ = t3[0] + t4[0];
 8006396:	ee72 1a04 	vadd.f32	s3, s4, s8
    *p1++ = t1[3] + t2[3];    /* col 1 */
 800639a:	ed06 8a01 	vstr	s16, [r6, #-4]
    t4[0] = t4[0] - t3[0];
 800639e:	ee34 4a42 	vsub.f32	s8, s8, s4
    *pMid1++ = t3[0] + t4[0];
 80063a2:	ed45 1a04 	vstr	s3, [r5, #-16]
    *pMid1++ = t3[1] + t4[1];
 80063a6:	ee72 1aa4 	vadd.f32	s3, s5, s9
    t4[1] = t4[1] - t3[1];
 80063aa:	ee74 4ae2 	vsub.f32	s9, s9, s5
    *pMid1++ = t3[1] + t4[1];
 80063ae:	ed45 1a03 	vstr	s3, [r5, #-12]
    *pMid1++ = t3[2] + t4[2];
 80063b2:	ee73 1a25 	vadd.f32	s3, s6, s11
    t4[2] = t4[2] - t3[2];
 80063b6:	ee75 5ac3 	vsub.f32	s11, s11, s6
    *pMid1++ = t3[2] + t4[2];
 80063ba:	ed45 1a02 	vstr	s3, [r5, #-8]
    *pMid1++ = t3[3] + t4[3]; /* col 1 */
 80063be:	ee76 1a86 	vadd.f32	s3, s13, s12
    t4[3] = t4[3] - t3[3];    /* for col 2 */
 80063c2:	ee36 6a66 	vsub.f32	s12, s12, s13
    *pMid1++ = t3[3] + t4[3]; /* col 1 */
 80063c6:	ed45 1a01 	vstr	s3, [r5, #-4]
    twI = *tw++;
 80063ca:	ed1c 3a03 	vldr	s6, [ip, #-12]
    twR = *tw++;
 80063ce:	ed5c 6a04 	vldr	s13, [ip, #-16]
    m1 = t2[1] * twI;
 80063d2:	ee63 2a83 	vmul.f32	s5, s7, s6
    *p2++ = m0 + m1;
 80063d6:	eee7 2a26 	vfma.f32	s5, s14, s13
    *p2++ = m2 - m3;
 80063da:	ee23 7a47 	vnmul.f32	s14, s6, s14
 80063de:	eea3 7aa6 	vfma.f32	s14, s7, s13
    *p2++ = m0 + m1;
 80063e2:	ed43 2a04 	vstr	s5, [r3, #-16]
    *p2++ = m2 - m3;
 80063e6:	ed03 7a03 	vstr	s14, [r3, #-12]
    m3 = t4[0] * twR;
 80063ea:	ee24 7a26 	vmul.f32	s14, s8, s13
    *pMid2++ = m0 - m1;
 80063ee:	ee66 6ae4 	vnmul.f32	s13, s13, s9
    *pMid2++ = m2 + m3;
 80063f2:	eea4 7a83 	vfma.f32	s14, s9, s6
    *pMid2++ = m0 - m1;
 80063f6:	eee4 6a03 	vfma.f32	s13, s8, s6
    *pMid2++ = m2 + m3;
 80063fa:	ed04 7a03 	vstr	s14, [r4, #-12]
    *pMid2++ = m0 - m1;
 80063fe:	ed44 6a04 	vstr	s13, [r4, #-16]
    twR = *tw++;
 8006402:	ed1c 7a02 	vldr	s14, [ip, #-8]
    twI = *tw++;
 8006406:	ed5c 6a01 	vldr	s13, [ip, #-4]
    m1 = t2[3] * twI;
 800640a:	ee65 4a26 	vmul.f32	s9, s10, s13
    *p2++ = m0 + m1;
 800640e:	eee7 4a87 	vfma.f32	s9, s15, s14
    *p2++ = m2 - m3;
 8006412:	ee66 7ae7 	vnmul.f32	s15, s13, s15
 8006416:	eee5 7a07 	vfma.f32	s15, s10, s14
    *p2++ = m0 + m1;
 800641a:	ed43 4a02 	vstr	s9, [r3, #-8]
    *p2++ = m2 - m3;
 800641e:	ed43 7a01 	vstr	s15, [r3, #-4]
    m3 = t4[2] * twR;
 8006422:	ee65 7a87 	vmul.f32	s15, s11, s14
    *pMid2++ = m0 - m1;
 8006426:	ee27 7a46 	vnmul.f32	s14, s14, s12
    *pMid2++ = m2 + m3;
 800642a:	eee6 7a26 	vfma.f32	s15, s12, s13
    *pMid2++ = m0 - m1;
 800642e:	eea5 7aa6 	vfma.f32	s14, s11, s13
    *pMid2++ = m2 + m3;
 8006432:	ed44 7a01 	vstr	s15, [r4, #-4]
    *pMid2++ = m0 - m1;
 8006436:	ed04 7a02 	vstr	s14, [r4, #-8]
  for (l = L >> 2; l > 0; l-- )
 800643a:	e759      	b.n	80062f0 <arm_cfft_radix8by2_f32+0x30>

0800643c <arm_cfft_radix8by4_f32>:

void arm_cfft_radix8by4_f32 (arm_cfft_instance_f32 * S, float32_t * p1)
{
    uint32_t    L  = S->fftLen >> 1;
 800643c:	8803      	ldrh	r3, [r0, #0]
    twMod2 = 2;
    twMod3 = 4;
    twMod4 = 6;

    /* TOP */
    p1ap3_0 = p1[0] + p3[0];
 800643e:	edd1 7a00 	vldr	s15, [r1]
    uint32_t    L  = S->fftLen >> 1;
 8006442:	085b      	lsrs	r3, r3, #1
    tw2 = tw3 = tw4 = (float32_t *) S->pTwiddle;
 8006444:	6842      	ldr	r2, [r0, #4]
{
 8006446:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    float32_t * p3 = p2 + L;
 800644a:	eb01 05c3 	add.w	r5, r1, r3, lsl #3
{
 800644e:	4683      	mov	fp, r0
    float32_t * p2 = p1 + L;
 8006450:	eb01 0683 	add.w	r6, r1, r3, lsl #2
    p1ap3_0 = p1[0] + p3[0];
 8006454:	ed95 7a00 	vldr	s14, [r5]
    float32_t * p4 = p3 + L;
 8006458:	eb05 0483 	add.w	r4, r5, r3, lsl #2
    p1sp3_0 = p1[0] - p3[0];
    p1ap3_1 = p1[1] + p3[1];
 800645c:	edd5 5a01 	vldr	s11, [r5, #4]
    pEnd1 = p2 - 1;     /* points to imaginary values by default */
 8006460:	f1a6 0904 	sub.w	r9, r6, #4
    p1ap3_0 = p1[0] + p3[0];
 8006464:	ee37 6a87 	vadd.f32	s12, s15, s14
    p1sp3_1 = p1[1] - p3[1];

    /* col 2 */
    t2[0] = p1sp3_0 + p2[1] - p4[1];
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 8006468:	edd4 4a00 	vldr	s9, [r4]
    p1sp3_0 = p1[0] - p3[0];
 800646c:	ee77 7ac7 	vsub.f32	s15, s15, s14
    p1ap3_1 = p1[1] + p3[1];
 8006470:	ed91 7a01 	vldr	s14, [r1, #4]
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 8006474:	edd6 3a01 	vldr	s7, [r6, #4]
 8006478:	f1a4 0a04 	sub.w	sl, r4, #4
    p1ap3_1 = p1[1] + p3[1];
 800647c:	ee77 6a25 	vadd.f32	s13, s14, s11
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 8006480:	ed94 4a01 	vldr	s8, [r4, #4]
    p1sp3_1 = p1[1] - p3[1];
 8006484:	ee77 5a65 	vsub.f32	s11, s14, s11
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 8006488:	ed96 7a00 	vldr	s14, [r6]
    pEnd2 = p3 - 1;
 800648c:	1f2f      	subs	r7, r5, #4
 800648e:	f105 0c10 	add.w	ip, r5, #16
    t3[1] = p1ap3_1 - p2[1] - p4[1];
    /* col 4 */
    t4[0] = p1sp3_0 - p2[1] + p4[1];
    t4[1] = p1sp3_1 + p2[0] - p4[0];
    /* col 1 */
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 8006492:	ee37 5a06 	vadd.f32	s10, s14, s12
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 8006496:	ee36 6a47 	vsub.f32	s12, s12, s14
{
 800649a:	ed2d 8b04 	vpush	{d8-d9}
 800649e:	b08f      	sub	sp, #60	; 0x3c
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 80064a0:	ee35 5a24 	vadd.f32	s10, s10, s9
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 80064a4:	ee36 6a64 	vsub.f32	s12, s12, s9
    tw2 = tw3 = tw4 = (float32_t *) S->pTwiddle;
 80064a8:	9202      	str	r2, [sp, #8]
    L >>= 1;
 80064aa:	085a      	lsrs	r2, r3, #1
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 80064ac:	ed81 5a00 	vstr	s10, [r1]
    L >>= 1;
 80064b0:	920a      	str	r2, [sp, #40]	; 0x28
    p1ap3_0 = p1[0] + p3[0];
 80064b2:	460a      	mov	r2, r1
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 80064b4:	ed96 5a01 	vldr	s10, [r6, #4]
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 80064b8:	3208      	adds	r2, #8
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 80064ba:	ed94 3a01 	vldr	s6, [r4, #4]
 80064be:	ee36 5a85 	vadd.f32	s10, s13, s10
{
 80064c2:	9100      	str	r1, [sp, #0]
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 80064c4:	9206      	str	r2, [sp, #24]

    /* Twiddle factors are ones */
    *p2++ = t2[0];
 80064c6:	4632      	mov	r2, r6
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 80064c8:	ee76 6ae3 	vsub.f32	s13, s13, s7
    *p2++ = t2[0];
 80064cc:	3208      	adds	r2, #8
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 80064ce:	ee35 5a03 	vadd.f32	s10, s10, s6
    *p2++ = t2[0];
 80064d2:	920b      	str	r2, [sp, #44]	; 0x2c
    *p2++ = t2[1];
    *p3++ = t3[0];
 80064d4:	462a      	mov	r2, r5
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 80064d6:	ed81 5a01 	vstr	s10, [r1, #4]
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 80064da:	ee33 5aa7 	vadd.f32	s10, s7, s15
    *p3++ = t3[0];
 80064de:	3208      	adds	r2, #8
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 80064e0:	ee77 7ae3 	vsub.f32	s15, s15, s7
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 80064e4:	ee76 6ac4 	vsub.f32	s13, s13, s8
 80064e8:	f106 0110 	add.w	r1, r6, #16
    *p3++ = t3[0];
 80064ec:	920c      	str	r2, [sp, #48]	; 0x30
    *p3++ = t3[1];
    *p4++ = t4[0];
 80064ee:	4622      	mov	r2, r4
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 80064f0:	ee35 5a44 	vsub.f32	s10, s10, s8
    *p4++ = t4[0];
 80064f4:	3208      	adds	r2, #8
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 80064f6:	ee77 7a84 	vadd.f32	s15, s15, s8
    *p4++ = t4[0];
 80064fa:	920d      	str	r2, [sp, #52]	; 0x34
    *p4++ = t4[1];

    tw2 += twMod2;
 80064fc:	9a02      	ldr	r2, [sp, #8]
    *p2++ = t2[0];
 80064fe:	ed86 5a00 	vstr	s10, [r6]
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 8006502:	ee35 5ac7 	vsub.f32	s10, s11, s14
    tw2 += twMod2;
 8006506:	3208      	adds	r2, #8
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 8006508:	ee37 7a25 	vadd.f32	s14, s14, s11
    tw2 += twMod2;
 800650c:	9207      	str	r2, [sp, #28]
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 800650e:	ee35 5a24 	vadd.f32	s10, s10, s9
    tw3 += twMod3;
 8006512:	9a02      	ldr	r2, [sp, #8]
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 8006514:	ee37 7a64 	vsub.f32	s14, s14, s9
    tw3 += twMod3;
 8006518:	3210      	adds	r2, #16
    *p2++ = t2[1];
 800651a:	ed86 5a01 	vstr	s10, [r6, #4]
    *p3++ = t3[0];
 800651e:	ed85 6a00 	vstr	s12, [r5]
    *p3++ = t3[1];
 8006522:	edc5 6a01 	vstr	s13, [r5, #4]
    *p4++ = t4[0];
 8006526:	edc4 7a00 	vstr	s15, [r4]
    *p4++ = t4[1];
 800652a:	ed84 7a01 	vstr	s14, [r4, #4]
    tw3 += twMod3;
 800652e:	9208      	str	r2, [sp, #32]
    tw4 += twMod4;
 8006530:	9a02      	ldr	r2, [sp, #8]
 8006532:	3218      	adds	r2, #24
 8006534:	9209      	str	r2, [sp, #36]	; 0x24

    for (l = (L - 2) >> 1; l > 0; l-- )
 8006536:	085a      	lsrs	r2, r3, #1
    pEnd4 = pEnd3 + L;
 8006538:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
    for (l = (L - 2) >> 1; l > 0; l-- )
 800653c:	3a02      	subs	r2, #2
 800653e:	ea4f 0852 	mov.w	r8, r2, lsr #1
 8006542:	9a07      	ldr	r2, [sp, #28]
 8006544:	9204      	str	r2, [sp, #16]
 8006546:	9a08      	ldr	r2, [sp, #32]
 8006548:	f8cd 8014 	str.w	r8, [sp, #20]
 800654c:	9203      	str	r2, [sp, #12]
 800654e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006550:	9201      	str	r2, [sp, #4]
 8006552:	9a00      	ldr	r2, [sp, #0]
 8006554:	f102 0e10 	add.w	lr, r2, #16
 8006558:	f104 0210 	add.w	r2, r4, #16
 800655c:	9804      	ldr	r0, [sp, #16]
 800655e:	f1a9 0908 	sub.w	r9, r9, #8
 8006562:	ed1c 7a02 	vldr	s14, [ip, #-8]
 8006566:	3f08      	subs	r7, #8
 8006568:	3008      	adds	r0, #8
 800656a:	ed5c 3a01 	vldr	s7, [ip, #-4]
 800656e:	ed5e 4a02 	vldr	s9, [lr, #-8]
 8006572:	f1aa 0a08 	sub.w	sl, sl, #8
 8006576:	9004      	str	r0, [sp, #16]
 8006578:	3b08      	subs	r3, #8
 800657a:	9803      	ldr	r0, [sp, #12]
 800657c:	ee74 2ac7 	vsub.f32	s5, s9, s14
 8006580:	ed1e 6a01 	vldr	s12, [lr, #-4]
 8006584:	ee74 4a87 	vadd.f32	s9, s9, s14
 8006588:	3010      	adds	r0, #16
 800658a:	ed51 5a02 	vldr	s11, [r1, #-8]
 800658e:	ee36 5a63 	vsub.f32	s10, s12, s7
 8006592:	ed51 7a01 	vldr	s15, [r1, #-4]
 8006596:	ee36 6a23 	vadd.f32	s12, s12, s7
 800659a:	9003      	str	r0, [sp, #12]
 800659c:	9801      	ldr	r0, [sp, #4]
 800659e:	ee77 6aa2 	vadd.f32	s13, s15, s5
 80065a2:	ee35 3a65 	vsub.f32	s6, s10, s11
 80065a6:	ed12 4a02 	vldr	s8, [r2, #-8]
 80065aa:	3018      	adds	r0, #24
 80065ac:	ee34 7ae5 	vsub.f32	s14, s9, s11
 80065b0:	ee76 3a67 	vsub.f32	s7, s12, s15
 80065b4:	ed12 2a01 	vldr	s4, [r2, #-4]
 80065b8:	ee35 5a85 	vadd.f32	s10, s11, s10
 80065bc:	9001      	str	r0, [sp, #4]
 80065be:	ee72 7ae7 	vsub.f32	s15, s5, s15
 80065c2:	9805      	ldr	r0, [sp, #20]
 80065c4:	ee75 5aa4 	vadd.f32	s11, s11, s9
 80065c8:	f10e 0e08 	add.w	lr, lr, #8
 80065cc:	ee76 6ac2 	vsub.f32	s13, s13, s4
 80065d0:	3108      	adds	r1, #8
 80065d2:	ee33 3a04 	vadd.f32	s6, s6, s8
 80065d6:	f10c 0c08 	add.w	ip, ip, #8
 80065da:	ee37 7a44 	vsub.f32	s14, s14, s8
 80065de:	3208      	adds	r2, #8
 80065e0:	ee73 3ac2 	vsub.f32	s7, s7, s4
 80065e4:	ee77 7a82 	vadd.f32	s15, s15, s4
 80065e8:	ee35 5a44 	vsub.f32	s10, s10, s8
 80065ec:	ee75 5a84 	vadd.f32	s11, s11, s8
 80065f0:	2800      	cmp	r0, #0
 80065f2:	d174      	bne.n	80066de <arm_cfft_radix8by4_f32+0x2a2>
 80065f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80065f6:	2718      	movs	r7, #24
 80065f8:	9b06      	ldr	r3, [sp, #24]
 80065fa:	fb07 0708 	mla	r7, r7, r8, r0
 80065fe:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8006600:	eb03 02c8 	add.w	r2, r3, r8, lsl #3
 8006604:	9b07      	ldr	r3, [sp, #28]
 8006606:	eb00 0cc8 	add.w	ip, r0, r8, lsl #3
 800660a:	980c      	ldr	r0, [sp, #48]	; 0x30
 800660c:	eb03 01c8 	add.w	r1, r3, r8, lsl #3
 8006610:	9b08      	ldr	r3, [sp, #32]
 8006612:	eb00 0ec8 	add.w	lr, r0, r8, lsl #3
 8006616:	980d      	ldr	r0, [sp, #52]	; 0x34
    t3[1] = p1ap3_1 - p2[1] - p4[1];
    /* col 4 */
    t4[0] = p1sp3_0 - p2[1] + p4[1];
    t4[1] = p1sp3_1 + p2[0] - p4[0];
    /* col 1 - Top */
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 8006618:	edc2 5a00 	vstr	s11, [r2]
 800661c:	eb03 1308 	add.w	r3, r3, r8, lsl #4
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 8006620:	eddc 5a01 	vldr	s11, [ip, #4]
 8006624:	eb00 08c8 	add.w	r8, r0, r8, lsl #3

    *p4++ = m0 + m1;
    *p4++ = m2 - m3;

    /* first col */
    arm_radix8_butterfly_f32 (pCol1, L, (float32_t *) S->pTwiddle, 4U);
 8006628:	9800      	ldr	r0, [sp, #0]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 800662a:	ee36 6a25 	vadd.f32	s12, s12, s11
 800662e:	edd8 5a01 	vldr	s11, [r8, #4]
 8006632:	ee36 6a25 	vadd.f32	s12, s12, s11
 8006636:	ed82 6a01 	vstr	s12, [r2, #4]
    twI = tw2[1];
 800663a:	edd1 4a01 	vldr	s9, [r1, #4]
    twR = tw2[0];
 800663e:	edd1 5a00 	vldr	s11, [r1]
    m1 = t2[1] * twI;
 8006642:	ee24 6a83 	vmul.f32	s12, s9, s6
    arm_radix8_butterfly_f32 (pCol1, L, (float32_t *) S->pTwiddle, 4U);
 8006646:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 800664a:	9a02      	ldr	r2, [sp, #8]
 800664c:	9101      	str	r1, [sp, #4]
    *p2++ = m0 + m1;
 800664e:	eea5 6aa6 	vfma.f32	s12, s11, s13
    *p2++ = m2 - m3;
 8006652:	ee66 6ae4 	vnmul.f32	s13, s13, s9
 8006656:	eee5 6a83 	vfma.f32	s13, s11, s6
    *p2++ = m0 + m1;
 800665a:	ed8c 6a00 	vstr	s12, [ip]
    *p2++ = m2 - m3;
 800665e:	edcc 6a01 	vstr	s13, [ip, #4]
    twI = tw3[1];
 8006662:	edd3 5a01 	vldr	s11, [r3, #4]
    twR = tw3[0];
 8006666:	ed93 6a00 	vldr	s12, [r3]
    arm_radix8_butterfly_f32 (pCol1, L, (float32_t *) S->pTwiddle, 4U);
 800666a:	2304      	movs	r3, #4
    m1 = t3[1] * twI;
 800666c:	ee65 6aa3 	vmul.f32	s13, s11, s7
    *p3++ = m0 + m1;
 8006670:	eee6 6a07 	vfma.f32	s13, s12, s14
    *p3++ = m2 - m3;
 8006674:	ee27 7a65 	vnmul.f32	s14, s14, s11
 8006678:	eea6 7a23 	vfma.f32	s14, s12, s7
    *p3++ = m0 + m1;
 800667c:	edce 6a00 	vstr	s13, [lr]
    *p3++ = m2 - m3;
 8006680:	ed8e 7a01 	vstr	s14, [lr, #4]
    twI = tw4[1];
 8006684:	ed97 6a01 	vldr	s12, [r7, #4]
    twR = tw4[0];
 8006688:	edd7 6a00 	vldr	s13, [r7]
    m1 = t4[1] * twI;
 800668c:	ee26 7a05 	vmul.f32	s14, s12, s10
    *p4++ = m0 + m1;
 8006690:	eea6 7aa7 	vfma.f32	s14, s13, s15
    *p4++ = m2 - m3;
 8006694:	ee67 7ac6 	vnmul.f32	s15, s15, s12
 8006698:	eee6 7a85 	vfma.f32	s15, s13, s10
    *p4++ = m0 + m1;
 800669c:	ed88 7a00 	vstr	s14, [r8]
    *p4++ = m2 - m3;
 80066a0:	edc8 7a01 	vstr	s15, [r8, #4]
    arm_radix8_butterfly_f32 (pCol1, L, (float32_t *) S->pTwiddle, 4U);
 80066a4:	f7ff fb92 	bl	8005dcc <arm_radix8_butterfly_f32>

    /* second col */
    arm_radix8_butterfly_f32 (pCol2, L, (float32_t *) S->pTwiddle, 4U);
 80066a8:	9901      	ldr	r1, [sp, #4]
 80066aa:	f8db 2004 	ldr.w	r2, [fp, #4]
 80066ae:	4630      	mov	r0, r6
 80066b0:	2304      	movs	r3, #4
 80066b2:	9100      	str	r1, [sp, #0]
 80066b4:	f7ff fb8a 	bl	8005dcc <arm_radix8_butterfly_f32>

    /* third col */
    arm_radix8_butterfly_f32 (pCol3, L, (float32_t *) S->pTwiddle, 4U);
 80066b8:	f8db 2004 	ldr.w	r2, [fp, #4]
 80066bc:	9900      	ldr	r1, [sp, #0]
 80066be:	4628      	mov	r0, r5
 80066c0:	2304      	movs	r3, #4
 80066c2:	f7ff fb83 	bl	8005dcc <arm_radix8_butterfly_f32>

    /* fourth col */
    arm_radix8_butterfly_f32 (pCol4, L, (float32_t *) S->pTwiddle, 4U);
 80066c6:	2304      	movs	r3, #4
 80066c8:	f8db 2004 	ldr.w	r2, [fp, #4]
 80066cc:	4620      	mov	r0, r4
 80066ce:	9900      	ldr	r1, [sp, #0]
}
 80066d0:	b00f      	add	sp, #60	; 0x3c
 80066d2:	ecbd 8b04 	vpop	{d8-d9}
 80066d6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    arm_radix8_butterfly_f32 (pCol4, L, (float32_t *) S->pTwiddle, 4U);
 80066da:	f7ff bb77 	b.w	8005dcc <arm_radix8_butterfly_f32>
      *p1++ = p1ap3_0 + p2[0] + p4[0];
 80066de:	ed4e 5a04 	vstr	s11, [lr, #-16]
      *p1++ = p1ap3_1 + p2[1] + p4[1];
 80066e2:	ed51 5a03 	vldr	s11, [r1, #-12]
      twR = *tw2++;
 80066e6:	9804      	ldr	r0, [sp, #16]
      *p1++ = p1ap3_1 + p2[1] + p4[1];
 80066e8:	ee36 6a25 	vadd.f32	s12, s12, s11
 80066ec:	ed52 5a03 	vldr	s11, [r2, #-12]
 80066f0:	ee36 6a25 	vadd.f32	s12, s12, s11
 80066f4:	ed0e 6a03 	vstr	s12, [lr, #-12]
      p1ap3_1 = pEnd1[-1] + pEnd3[-1];
 80066f8:	ed9a 6a01 	vldr	s12, [sl, #4]
 80066fc:	edd9 2a01 	vldr	s5, [r9, #4]
      p1ap3_0 = pEnd1[ 0] + pEnd3[0];
 8006700:	edd9 4a02 	vldr	s9, [r9, #8]
      p1ap3_1 = pEnd1[-1] + pEnd3[-1];
 8006704:	ee72 5a86 	vadd.f32	s11, s5, s12
      t2[2] = pEnd2[0] - pEnd4[0] + p1sp3_1;
 8006708:	edd3 0a02 	vldr	s1, [r3, #8]
      p1sp3_1 = pEnd1[-1] - pEnd3[-1];
 800670c:	ee72 2ac6 	vsub.f32	s5, s5, s12
      p1ap3_0 = pEnd1[ 0] + pEnd3[0];
 8006710:	ed9a 6a02 	vldr	s12, [sl, #8]
      t2[3] = pEnd1[0] - pEnd3[0] - pEnd2[-1] + pEnd4[-1];
 8006714:	ed93 4a01 	vldr	s8, [r3, #4]
      p1ap3_0 = pEnd1[ 0] + pEnd3[0];
 8006718:	ee74 8a86 	vadd.f32	s17, s9, s12
      t2[3] = pEnd1[0] - pEnd3[0] - pEnd2[-1] + pEnd4[-1];
 800671c:	ed97 8a01 	vldr	s16, [r7, #4]
      p1sp3_0 = pEnd1[ 0] - pEnd3[0];
 8006720:	ee74 4ac6 	vsub.f32	s9, s9, s12
      t2[2] = pEnd2[0] - pEnd4[0] + p1sp3_1;
 8006724:	ed97 6a02 	vldr	s12, [r7, #8]
      t3[2] = p1ap3_1 - pEnd2[-1] - pEnd4[-1];
 8006728:	ee35 2ac8 	vsub.f32	s4, s11, s16
      t2[2] = pEnd2[0] - pEnd4[0] + p1sp3_1;
 800672c:	ee36 9a60 	vsub.f32	s18, s12, s1
      t3[3] = p1ap3_0 - pEnd2[ 0] - pEnd4[ 0];
 8006730:	ee78 1ac6 	vsub.f32	s3, s17, s12
      *pEnd1-- = p1ap3_0 + pEnd2[ 0] + pEnd4[ 0];
 8006734:	ee36 6a28 	vadd.f32	s12, s12, s17
      t2[3] = pEnd1[0] - pEnd3[0] - pEnd2[-1] + pEnd4[-1];
 8006738:	ee34 1ac8 	vsub.f32	s2, s9, s16
      t3[2] = p1ap3_1 - pEnd2[-1] - pEnd4[-1];
 800673c:	ee32 2a44 	vsub.f32	s4, s4, s8
      *pEnd1-- = p1ap3_0 + pEnd2[ 0] + pEnd4[ 0];
 8006740:	ee36 6a20 	vadd.f32	s12, s12, s1
      t2[3] = pEnd1[0] - pEnd3[0] - pEnd2[-1] + pEnd4[-1];
 8006744:	ee31 1a04 	vadd.f32	s2, s2, s8
      t4[3] = pEnd4[-1] - pEnd2[-1] - p1sp3_0;
 8006748:	ee34 4a48 	vsub.f32	s8, s8, s16
      *pEnd1-- = p1ap3_0 + pEnd2[ 0] + pEnd4[ 0];
 800674c:	ed89 6a02 	vstr	s12, [r9, #8]
      t2[2] = pEnd2[0] - pEnd4[0] + p1sp3_1;
 8006750:	ee39 0a22 	vadd.f32	s0, s18, s5
      *pEnd1-- = p1ap3_1 + pEnd2[-1] + pEnd4[-1];
 8006754:	ed97 6a01 	vldr	s12, [r7, #4]
      t3[3] = p1ap3_0 - pEnd2[ 0] - pEnd4[ 0];
 8006758:	ee71 1ae0 	vsub.f32	s3, s3, s1
      t4[3] = pEnd4[-1] - pEnd2[-1] - p1sp3_0;
 800675c:	ee74 4a64 	vsub.f32	s9, s8, s9
      *pEnd1-- = p1ap3_1 + pEnd2[-1] + pEnd4[-1];
 8006760:	ee75 5a86 	vadd.f32	s11, s11, s12
 8006764:	ed93 6a01 	vldr	s12, [r3, #4]
      t4[2] = pEnd2[ 0] - pEnd4[ 0] - p1sp3_1;
 8006768:	ee79 2a62 	vsub.f32	s5, s18, s5
      *pEnd1-- = p1ap3_1 + pEnd2[-1] + pEnd4[-1];
 800676c:	ee75 5a86 	vadd.f32	s11, s11, s12
 8006770:	edc9 5a01 	vstr	s11, [r9, #4]
      twI = *tw2++;
 8006774:	ed50 5a01 	vldr	s11, [r0, #-4]
      twR = *tw2++;
 8006778:	ed10 6a02 	vldr	s12, [r0, #-8]
      m1 = t2[1] * twI;
 800677c:	ee25 4a83 	vmul.f32	s8, s11, s6
      twR = tw3[0];
 8006780:	9803      	ldr	r0, [sp, #12]
      *p2++ = m0 + m1;
 8006782:	eea6 4a26 	vfma.f32	s8, s12, s13
      *p2++ = m2 - m3;
 8006786:	ee66 6ae5 	vnmul.f32	s13, s13, s11
 800678a:	eee6 6a03 	vfma.f32	s13, s12, s6
      *p2++ = m0 + m1;
 800678e:	ed01 4a04 	vstr	s8, [r1, #-16]
      *p2++ = m2 - m3;
 8006792:	ed41 6a03 	vstr	s13, [r1, #-12]
      m3 = t2[3] * twR;
 8006796:	ee61 6a06 	vmul.f32	s13, s2, s12
      *pEnd2-- = m0 - m1;
 800679a:	ee26 6a40 	vnmul.f32	s12, s12, s0
      *pEnd2-- = m2 + m3;
 800679e:	eee0 6a25 	vfma.f32	s13, s0, s11
      *pEnd2-- = m0 - m1;
 80067a2:	eea1 6a25 	vfma.f32	s12, s2, s11
      *pEnd2-- = m2 + m3;
 80067a6:	edc7 6a01 	vstr	s13, [r7, #4]
      *pEnd2-- = m0 - m1;
 80067aa:	ed87 6a02 	vstr	s12, [r7, #8]
      twI = tw3[1];
 80067ae:	ed50 6a03 	vldr	s13, [r0, #-12]
      twR = tw3[0];
 80067b2:	ed10 6a04 	vldr	s12, [r0, #-16]
      m1 = t3[1] * twI;
 80067b6:	ee66 5aa3 	vmul.f32	s11, s13, s7
      twR = tw4[0];
 80067ba:	9801      	ldr	r0, [sp, #4]
      *p3++ = m0 + m1;
 80067bc:	eee6 5a07 	vfma.f32	s11, s12, s14
      *p3++ = m2 - m3;
 80067c0:	ee27 7a66 	vnmul.f32	s14, s14, s13
 80067c4:	eea6 7a23 	vfma.f32	s14, s12, s7
      *p3++ = m0 + m1;
 80067c8:	ed4c 5a04 	vstr	s11, [ip, #-16]
      *p3++ = m2 - m3;
 80067cc:	ed0c 7a03 	vstr	s14, [ip, #-12]
      m3 =  t3[3] * twI;
 80067d0:	ee21 7aa6 	vmul.f32	s14, s3, s13
      *pEnd3-- = m0 - m1;
 80067d4:	ee66 6ac2 	vnmul.f32	s13, s13, s4
      *pEnd3-- = m3 - m2;
 80067d8:	eea2 7a46 	vfms.f32	s14, s4, s12
      *pEnd3-- = m0 - m1;
 80067dc:	eee1 6ac6 	vfms.f32	s13, s3, s12
      *pEnd3-- = m3 - m2;
 80067e0:	ed8a 7a01 	vstr	s14, [sl, #4]
      *pEnd3-- = m0 - m1;
 80067e4:	edca 6a02 	vstr	s13, [sl, #8]
      twR = tw4[0];
 80067e8:	ed10 7a06 	vldr	s14, [r0, #-24]	; 0xffffffe8
      twI = tw4[1];
 80067ec:	ed50 6a05 	vldr	s13, [r0, #-20]	; 0xffffffec
    for (l = (L - 2) >> 1; l > 0; l-- )
 80067f0:	9805      	ldr	r0, [sp, #20]
      m1 = t4[1] * twI;
 80067f2:	ee26 6a85 	vmul.f32	s12, s13, s10
    for (l = (L - 2) >> 1; l > 0; l-- )
 80067f6:	3801      	subs	r0, #1
      *p4++ = m0 + m1;
 80067f8:	eea7 6a27 	vfma.f32	s12, s14, s15
    for (l = (L - 2) >> 1; l > 0; l-- )
 80067fc:	9005      	str	r0, [sp, #20]
      *p4++ = m2 - m3;
 80067fe:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8006802:	eee7 7a05 	vfma.f32	s15, s14, s10
      *p4++ = m0 + m1;
 8006806:	ed02 6a04 	vstr	s12, [r2, #-16]
      *p4++ = m2 - m3;
 800680a:	ed42 7a03 	vstr	s15, [r2, #-12]
      m3 = t4[3] * twR;
 800680e:	ee64 7a87 	vmul.f32	s15, s9, s14
      *pEnd4-- = m0 - m1;
 8006812:	ee27 7a62 	vnmul.f32	s14, s14, s5
      *pEnd4-- = m2 + m3;
 8006816:	eee2 7aa6 	vfma.f32	s15, s5, s13
      *pEnd4-- = m0 - m1;
 800681a:	eea4 7aa6 	vfma.f32	s14, s9, s13
      *pEnd4-- = m2 + m3;
 800681e:	edc3 7a01 	vstr	s15, [r3, #4]
      *pEnd4-- = m0 - m1;
 8006822:	ed83 7a02 	vstr	s14, [r3, #8]
    for (l = (L - 2) >> 1; l > 0; l-- )
 8006826:	e699      	b.n	800655c <arm_cfft_radix8by4_f32+0x120>

08006828 <arm_cfft_f32>:
        uint8_t bitReverseFlag)
{
  uint32_t  L = S->fftLen, l;
  float32_t invL, * pSrc;

  if (ifftFlag == 1U)
 8006828:	2a01      	cmp	r2, #1
{
 800682a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800682e:	4606      	mov	r6, r0
 8006830:	460c      	mov	r4, r1
 8006832:	4617      	mov	r7, r2
 8006834:	4698      	mov	r8, r3
  uint32_t  L = S->fftLen, l;
 8006836:	8805      	ldrh	r5, [r0, #0]
  if (ifftFlag == 1U)
 8006838:	d03e      	beq.n	80068b8 <arm_cfft_f32+0x90>
      *pSrc = -*pSrc;
      pSrc += 2;
    }
  }

  switch (L)
 800683a:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800683e:	d049      	beq.n	80068d4 <arm_cfft_f32+0xac>
 8006840:	d826      	bhi.n	8006890 <arm_cfft_f32+0x68>
 8006842:	2d40      	cmp	r5, #64	; 0x40
 8006844:	d031      	beq.n	80068aa <arm_cfft_f32+0x82>
 8006846:	d81c      	bhi.n	8006882 <arm_cfft_f32+0x5a>
 8006848:	2d10      	cmp	r5, #16
 800684a:	d01c      	beq.n	8006886 <arm_cfft_f32+0x5e>
 800684c:	2d20      	cmp	r5, #32
 800684e:	d041      	beq.n	80068d4 <arm_cfft_f32+0xac>
  case 4096:
    arm_radix8_butterfly_f32 ( p1, L, (float32_t *) S->pTwiddle, 1);
    break;
  }

  if ( bitReverseFlag )
 8006850:	f1b8 0f00 	cmp.w	r8, #0
 8006854:	d004      	beq.n	8006860 <arm_cfft_f32+0x38>
    arm_bitreversal_32 ((uint32_t*) p1, S->bitRevLength, S->pBitRevTable);
 8006856:	68b2      	ldr	r2, [r6, #8]
 8006858:	4620      	mov	r0, r4
 800685a:	89b1      	ldrh	r1, [r6, #12]
 800685c:	f7ff fa23 	bl	8005ca6 <arm_bitreversal_32>

  if (ifftFlag == 1U)
 8006860:	2f01      	cmp	r7, #1
 8006862:	d10c      	bne.n	800687e <arm_cfft_f32+0x56>
  {
    invL = 1.0f / (float32_t)L;
 8006864:	ee07 5a90 	vmov	s15, r5
 8006868:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0

    /* Conjugate and scale output data */
    pSrc = p1;
    for (l= 0; l < L; l++)
 800686c:	2300      	movs	r3, #0
    invL = 1.0f / (float32_t)L;
 800686e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006872:	ee86 7aa7 	vdiv.f32	s14, s13, s15
    for (l= 0; l < L; l++)
 8006876:	42ab      	cmp	r3, r5
 8006878:	f104 0408 	add.w	r4, r4, #8
 800687c:	d32f      	bcc.n	80068de <arm_cfft_f32+0xb6>
      *pSrc++ *=   invL ;
      *pSrc    = -(*pSrc) * invL;
      pSrc++;
    }
  }
}
 800687e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  switch (L)
 8006882:	2d80      	cmp	r5, #128	; 0x80
 8006884:	d1e4      	bne.n	8006850 <arm_cfft_f32+0x28>
    arm_cfft_radix8by2_f32 ( (arm_cfft_instance_f32 *) S, p1);
 8006886:	4621      	mov	r1, r4
 8006888:	4630      	mov	r0, r6
 800688a:	f7ff fd19 	bl	80062c0 <arm_cfft_radix8by2_f32>
    break;
 800688e:	e7df      	b.n	8006850 <arm_cfft_f32+0x28>
  switch (L)
 8006890:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 8006894:	d01e      	beq.n	80068d4 <arm_cfft_f32+0xac>
 8006896:	d805      	bhi.n	80068a4 <arm_cfft_f32+0x7c>
 8006898:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 800689c:	d005      	beq.n	80068aa <arm_cfft_f32+0x82>
 800689e:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 80068a2:	e7ef      	b.n	8006884 <arm_cfft_f32+0x5c>
 80068a4:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 80068a8:	d1d2      	bne.n	8006850 <arm_cfft_f32+0x28>
    arm_radix8_butterfly_f32 ( p1, L, (float32_t *) S->pTwiddle, 1);
 80068aa:	2301      	movs	r3, #1
 80068ac:	6872      	ldr	r2, [r6, #4]
 80068ae:	4629      	mov	r1, r5
 80068b0:	4620      	mov	r0, r4
 80068b2:	f7ff fa8b 	bl	8005dcc <arm_radix8_butterfly_f32>
    break;
 80068b6:	e7cb      	b.n	8006850 <arm_cfft_f32+0x28>
    pSrc = p1 + 1;
 80068b8:	1d0a      	adds	r2, r1, #4
    for (l = 0; l < L; l++)
 80068ba:	2300      	movs	r3, #0
 80068bc:	42ab      	cmp	r3, r5
 80068be:	f102 0208 	add.w	r2, r2, #8
 80068c2:	d2ba      	bcs.n	800683a <arm_cfft_f32+0x12>
      *pSrc = -*pSrc;
 80068c4:	ed52 7a02 	vldr	s15, [r2, #-8]
    for (l = 0; l < L; l++)
 80068c8:	3301      	adds	r3, #1
      *pSrc = -*pSrc;
 80068ca:	eef1 7a67 	vneg.f32	s15, s15
 80068ce:	ed42 7a02 	vstr	s15, [r2, #-8]
    for (l = 0; l < L; l++)
 80068d2:	e7f3      	b.n	80068bc <arm_cfft_f32+0x94>
    arm_cfft_radix8by4_f32 ( (arm_cfft_instance_f32 *) S, p1);
 80068d4:	4621      	mov	r1, r4
 80068d6:	4630      	mov	r0, r6
 80068d8:	f7ff fdb0 	bl	800643c <arm_cfft_radix8by4_f32>
    break;
 80068dc:	e7b8      	b.n	8006850 <arm_cfft_f32+0x28>
      *pSrc++ *=   invL ;
 80068de:	ed54 7a02 	vldr	s15, [r4, #-8]
    for (l= 0; l < L; l++)
 80068e2:	3301      	adds	r3, #1
      *pSrc++ *=   invL ;
 80068e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80068e8:	ed44 7a02 	vstr	s15, [r4, #-8]
      *pSrc    = -(*pSrc) * invL;
 80068ec:	ed54 7a01 	vldr	s15, [r4, #-4]
 80068f0:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 80068f4:	ed44 7a01 	vstr	s15, [r4, #-4]
    for (l= 0; l < L; l++)
 80068f8:	e7bd      	b.n	8006876 <arm_cfft_f32+0x4e>

080068fa <stage_rfft_f32>:

   // U1 = XA(1) + XB(1); % It is real
   t1a = xBR + xAR  ;

   // U2 = XB(1) - XA(1); % It is imaginary
   t1b = xBI + xAI  ;
 80068fa:	edd1 7a01 	vldr	s15, [r1, #4]

   // real(tw * (xB - xA)) = twR * (xBR - xAR) - twI * (xBI - xAI);
   // imag(tw * (xB - xA)) = twI * (xBR - xAR) + twR * (xBI - xAI);
   *pOut++ = 0.5f * ( t1a + t1b );
 80068fe:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
   xBR = pB[0];
 8006902:	edd1 5a00 	vldr	s11, [r1]
   *pOut++ = 0.5f * ( t1a + t1b );
 8006906:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
   t1b = xBI + xAI  ;
 800690a:	ee77 7aa7 	vadd.f32	s15, s15, s15
   k = (S->Sint).fftLen - 1;
 800690e:	8803      	ldrh	r3, [r0, #0]
 8006910:	3210      	adds	r2, #16
 8006912:	3b01      	subs	r3, #1
   *pOut++ = 0.5f * ( t1a + t1b );
 8006914:	eef0 6a67 	vmov.f32	s13, s15
   *pOut++ = 0.5f * ( t1a - t1b );
 8006918:	eed5 7a86 	vfnms.f32	s15, s11, s12
   *pOut++ = 0.5f * ( t1a + t1b );
 800691c:	eee5 6a86 	vfma.f32	s13, s11, s12
{
 8006920:	b510      	push	{r4, lr}
  const float32_t * pCoeff = S->pTwiddleRFFT;       /* Points to RFFT Twiddle factors */
 8006922:	6944      	ldr	r4, [r0, #20]
   *pOut++ = 0.5f * ( t1a - t1b );
 8006924:	ee67 7a87 	vmul.f32	s15, s15, s14
   *pOut++ = 0.5f * ( t1a + t1b );
 8006928:	ee66 6a87 	vmul.f32	s13, s13, s14
 800692c:	f104 0010 	add.w	r0, r4, #16
 8006930:	f101 0410 	add.w	r4, r1, #16
 8006934:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   *pOut++ = 0.5f * ( t1a - t1b );
 8006938:	ed42 7a03 	vstr	s15, [r2, #-12]
   *pOut++ = 0.5f * ( t1a + t1b );
 800693c:	ed42 6a04 	vstr	s13, [r2, #-16]

   // XA(1) = 1/2*( U1 - imag(U2) +  i*( U1 +imag(U2) ));
   pB  = p + 2*k;
   pA += 2;
 8006940:	eef0 6a47 	vmov.f32	s13, s14
 8006944:	3908      	subs	r1, #8
         end
         XA(1) = 1/2* (XA(1) + XB(1) + TW(1) * (XB(1) - XA(1))) + i*( 1/2*( XA(1) + XB(1) + i*( XA(1) - XB(1))));
         X = XA;
      */

      xBI = pB[1];
 8006946:	ed91 4a03 	vldr	s8, [r1, #12]
      *pOut++ = 0.5f * (xAI - xBI + p1 - p2 ); //xAI


      pA += 2;
      pB -= 2;
      k--;
 800694a:	3b01      	subs	r3, #1
      xBR = pB[0];
 800694c:	ed91 7a02 	vldr	s14, [r1, #8]
      xAR = pA[0];
 8006950:	3008      	adds	r0, #8
 8006952:	ed54 3a02 	vldr	s7, [r4, #-8]
   } while (k > 0);
 8006956:	2b00      	cmp	r3, #0
      xAI = pA[1];
 8006958:	ed54 7a01 	vldr	s15, [r4, #-4]
      twR = *pCoeff++;
 800695c:	f102 0208 	add.w	r2, r2, #8
      t1a = xBR - xAR ;
 8006960:	ee37 5a63 	vsub.f32	s10, s14, s7
      twR = *pCoeff++;
 8006964:	ed50 5a04 	vldr	s11, [r0, #-16]
      t1b = xBI + xAI ;
 8006968:	ee34 6a27 	vadd.f32	s12, s8, s15
      twI = *pCoeff++;
 800696c:	ed50 4a03 	vldr	s9, [r0, #-12]
      *pOut++ = 0.5f * (xAR + xBR + p0 + p3 ); //xAR
 8006970:	ee37 7a23 	vadd.f32	s14, s14, s7
 8006974:	f104 0408 	add.w	r4, r4, #8
      *pOut++ = 0.5f * (xAI - xBI + p1 - p2 ); //xAI
 8006978:	ee77 7ac4 	vsub.f32	s15, s15, s8
 800697c:	f1a1 0108 	sub.w	r1, r1, #8
      *pOut++ = 0.5f * (xAR + xBR + p0 + p3 ); //xAR
 8006980:	eea5 7a85 	vfma.f32	s14, s11, s10
      *pOut++ = 0.5f * (xAI - xBI + p1 - p2 ); //xAI
 8006984:	eee4 7a85 	vfma.f32	s15, s9, s10
      *pOut++ = 0.5f * (xAR + xBR + p0 + p3 ); //xAR
 8006988:	eea4 7a86 	vfma.f32	s14, s9, s12
      *pOut++ = 0.5f * (xAI - xBI + p1 - p2 ); //xAI
 800698c:	eee5 7ac6 	vfms.f32	s15, s11, s12
      *pOut++ = 0.5f * (xAR + xBR + p0 + p3 ); //xAR
 8006990:	ee27 7a26 	vmul.f32	s14, s14, s13
      *pOut++ = 0.5f * (xAI - xBI + p1 - p2 ); //xAI
 8006994:	ee67 7aa6 	vmul.f32	s15, s15, s13
      *pOut++ = 0.5f * (xAR + xBR + p0 + p3 ); //xAR
 8006998:	ed02 7a04 	vstr	s14, [r2, #-16]
      *pOut++ = 0.5f * (xAI - xBI + p1 - p2 ); //xAI
 800699c:	ed42 7a03 	vstr	s15, [r2, #-12]
   } while (k > 0);
 80069a0:	dcd1      	bgt.n	8006946 <stage_rfft_f32+0x4c>
}
 80069a2:	bd10      	pop	{r4, pc}

080069a4 <merge_rfft_f32>:
        float32_t xAR, xAI, xBR, xBI;               /* temporary variables */
        float32_t t1a, t1b, r, s, t, u;             /* temporary variables */

   k = (S->Sint).fftLen - 1;

   xAR = pA[0];
 80069a4:	ed91 7a00 	vldr	s14, [r1]
   xAI = pA[1];

   pCoeff += 2 ;

   *pOut++ = 0.5f * ( xAR + xAI );
 80069a8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
   xAI = pA[1];
 80069ac:	ed91 6a01 	vldr	s12, [r1, #4]
 80069b0:	3208      	adds	r2, #8
   k = (S->Sint).fftLen - 1;
 80069b2:	8803      	ldrh	r3, [r0, #0]
   *pOut++ = 0.5f * ( xAR + xAI );
 80069b4:	ee77 6a06 	vadd.f32	s13, s14, s12
   *pOut++ = 0.5f * ( xAR - xAI );
 80069b8:	ee37 7a46 	vsub.f32	s14, s14, s12
   k = (S->Sint).fftLen - 1;
 80069bc:	3b01      	subs	r3, #1
   *pOut++ = 0.5f * ( xAR + xAI );
 80069be:	ee66 6aa7 	vmul.f32	s13, s13, s15
   *pOut++ = 0.5f * ( xAR - xAI );
 80069c2:	ee27 7a27 	vmul.f32	s14, s14, s15
{
 80069c6:	b510      	push	{r4, lr}
  const float32_t *pCoeff = S->pTwiddleRFFT;        /* Points to RFFT Twiddle factors */
 80069c8:	6944      	ldr	r4, [r0, #20]
   *pOut++ = 0.5f * ( xAR + xAI );
 80069ca:	ed42 6a02 	vstr	s13, [r2, #-8]
   *pOut++ = 0.5f * ( xAR - xAI );
 80069ce:	eef0 6a67 	vmov.f32	s13, s15
   pCoeff += 2 ;
 80069d2:	f104 0008 	add.w	r0, r4, #8

   pB  =  p + 2*k ;
   pA +=  2	   ;
 80069d6:	f101 0408 	add.w	r4, r1, #8
   pB  =  p + 2*k ;
 80069da:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   *pOut++ = 0.5f * ( xAR - xAI );
 80069de:	ed02 7a01 	vstr	s14, [r2, #-4]

   while (k > 0)
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	f102 0208 	add.w	r2, r2, #8
 80069e8:	f100 0008 	add.w	r0, r0, #8
 80069ec:	f104 0408 	add.w	r4, r4, #8
 80069f0:	f1a1 0108 	sub.w	r1, r1, #8
 80069f4:	dc00      	bgt.n	80069f8 <merge_rfft_f32+0x54>
      pA += 2;
      pB -= 2;
      k--;
   }

}
 80069f6:	bd10      	pop	{r4, pc}
      xBI =   pB[1]    ;
 80069f8:	ed91 4a03 	vldr	s8, [r1, #12]
      k--;
 80069fc:	3b01      	subs	r3, #1
      xBR =   pB[0]    ;
 80069fe:	ed91 7a02 	vldr	s14, [r1, #8]
      xAR =  pA[0];
 8006a02:	ed54 3a02 	vldr	s7, [r4, #-8]
      xAI =  pA[1];
 8006a06:	ed54 7a01 	vldr	s15, [r4, #-4]
      t1a = xAR - xBR ;
 8006a0a:	ee33 5ac7 	vsub.f32	s10, s7, s14
      twR = *pCoeff++;
 8006a0e:	ed50 5a02 	vldr	s11, [r0, #-8]
      t1b = xAI + xBI ;
 8006a12:	ee34 6a27 	vadd.f32	s12, s8, s15
      twI = *pCoeff++;
 8006a16:	ed50 4a01 	vldr	s9, [r0, #-4]
      *pOut++ = 0.5f * (xAR + xBR - r - s ); //xAR
 8006a1a:	ee37 7a23 	vadd.f32	s14, s14, s7
      *pOut++ = 0.5f * (xAI - xBI + t - u ); //xAI
 8006a1e:	ee77 7ac4 	vsub.f32	s15, s15, s8
      *pOut++ = 0.5f * (xAR + xBR - r - s ); //xAR
 8006a22:	eea5 7ac5 	vfms.f32	s14, s11, s10
      *pOut++ = 0.5f * (xAI - xBI + t - u ); //xAI
 8006a26:	eee4 7a85 	vfma.f32	s15, s9, s10
      *pOut++ = 0.5f * (xAR + xBR - r - s ); //xAR
 8006a2a:	eea4 7ac6 	vfms.f32	s14, s9, s12
      *pOut++ = 0.5f * (xAI - xBI + t - u ); //xAI
 8006a2e:	eee5 7ac6 	vfms.f32	s15, s11, s12
      *pOut++ = 0.5f * (xAR + xBR - r - s ); //xAR
 8006a32:	ee27 7a26 	vmul.f32	s14, s14, s13
      *pOut++ = 0.5f * (xAI - xBI + t - u ); //xAI
 8006a36:	ee67 7aa6 	vmul.f32	s15, s15, s13
      *pOut++ = 0.5f * (xAR + xBR - r - s ); //xAR
 8006a3a:	ed02 7a02 	vstr	s14, [r2, #-8]
      *pOut++ = 0.5f * (xAI - xBI + t - u ); //xAI
 8006a3e:	ed42 7a01 	vstr	s15, [r2, #-4]
      k--;
 8006a42:	e7ce      	b.n	80069e2 <merge_rfft_f32+0x3e>

08006a44 <arm_rfft_fast_f32>:
void arm_rfft_fast_f32(
  const arm_rfft_fast_instance_f32 * S,
  float32_t * p,
  float32_t * pOut,
  uint8_t ifftFlag)
{
 8006a44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a48:	4605      	mov	r5, r0
 8006a4a:	460f      	mov	r7, r1
 8006a4c:	4616      	mov	r6, r2
   const arm_cfft_instance_f32 * Sint = &(S->Sint);

   /* Calculation of Real FFT */
   if (ifftFlag)
 8006a4e:	461c      	mov	r4, r3
 8006a50:	b14b      	cbz	r3, 8006a66 <arm_rfft_fast_f32+0x22>
   {
      /*  Real FFT compression */
      merge_rfft_f32(S, p, pOut);
 8006a52:	f7ff ffa7 	bl	80069a4 <merge_rfft_f32>
      /* Complex radix-4 IFFT process */
      arm_cfft_f32( Sint, pOut, ifftFlag, 1);
 8006a56:	4622      	mov	r2, r4
 8006a58:	4631      	mov	r1, r6
 8006a5a:	4628      	mov	r0, r5
 8006a5c:	2301      	movs	r3, #1
      arm_cfft_f32( Sint, p, ifftFlag, 1);

      /*  Real FFT extraction */
      stage_rfft_f32(S, p, pOut);
   }
}
 8006a5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      arm_cfft_f32( Sint, pOut, ifftFlag, 1);
 8006a62:	f7ff bee1 	b.w	8006828 <arm_cfft_f32>
      arm_cfft_f32( Sint, p, ifftFlag, 1);
 8006a66:	4622      	mov	r2, r4
 8006a68:	2301      	movs	r3, #1
 8006a6a:	f7ff fedd 	bl	8006828 <arm_cfft_f32>
      stage_rfft_f32(S, p, pOut);
 8006a6e:	4632      	mov	r2, r6
 8006a70:	4639      	mov	r1, r7
 8006a72:	4628      	mov	r0, r5
}
 8006a74:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      stage_rfft_f32(S, p, pOut);
 8006a78:	f7ff bf3f 	b.w	80068fa <stage_rfft_f32>

08006a7c <arm_rfft_fast_init_32_f32>:

arm_status arm_rfft_fast_init_32_f32( arm_rfft_fast_instance_f32 * S ) {

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 8006a7c:	4601      	mov	r1, r0
arm_status arm_rfft_fast_init_32_f32( arm_rfft_fast_instance_f32 * S ) {
 8006a7e:	b508      	push	{r3, lr}
  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 8006a80:	b138      	cbz	r0, 8006a92 <arm_rfft_fast_init_32_f32+0x16>

  status=arm_cfft_init_16_f32(&(S->Sint));
 8006a82:	f7ff f995 	bl	8005db0 <arm_cfft_init_16_f32>
  if (status != ARM_MATH_SUCCESS)
 8006a86:	b918      	cbnz	r0, 8006a90 <arm_rfft_fast_init_32_f32+0x14>
  {
    return(status);
  }

  S->fftLenRFFT = 32U;
 8006a88:	2320      	movs	r3, #32
 8006a8a:	820b      	strh	r3, [r1, #16]
  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_32;
 8006a8c:	4b02      	ldr	r3, [pc, #8]	; (8006a98 <arm_rfft_fast_init_32_f32+0x1c>)
 8006a8e:	614b      	str	r3, [r1, #20]

  return ARM_MATH_SUCCESS;
}
 8006a90:	bd08      	pop	{r3, pc}
  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 8006a92:	f04f 30ff 	mov.w	r0, #4294967295
 8006a96:	e7fb      	b.n	8006a90 <arm_rfft_fast_init_32_f32+0x14>
 8006a98:	080157f0 	.word	0x080157f0

08006a9c <arm_rfft_fast_init_64_f32>:

arm_status arm_rfft_fast_init_64_f32( arm_rfft_fast_instance_f32 * S ) {

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 8006a9c:	4601      	mov	r1, r0
arm_status arm_rfft_fast_init_64_f32( arm_rfft_fast_instance_f32 * S ) {
 8006a9e:	b508      	push	{r3, lr}
  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 8006aa0:	b138      	cbz	r0, 8006ab2 <arm_rfft_fast_init_64_f32+0x16>

  status=arm_cfft_init_32_f32(&(S->Sint));
 8006aa2:	f7ff f977 	bl	8005d94 <arm_cfft_init_32_f32>
  if (status != ARM_MATH_SUCCESS)
 8006aa6:	b918      	cbnz	r0, 8006ab0 <arm_rfft_fast_init_64_f32+0x14>
  {
    return(status);
  }
  S->fftLenRFFT = 64U;
 8006aa8:	2340      	movs	r3, #64	; 0x40
 8006aaa:	820b      	strh	r3, [r1, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_64;
 8006aac:	4b02      	ldr	r3, [pc, #8]	; (8006ab8 <arm_rfft_fast_init_64_f32+0x1c>)
 8006aae:	614b      	str	r3, [r1, #20]

  return ARM_MATH_SUCCESS;
}
 8006ab0:	bd08      	pop	{r3, pc}
  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 8006ab2:	f04f 30ff 	mov.w	r0, #4294967295
 8006ab6:	e7fb      	b.n	8006ab0 <arm_rfft_fast_init_64_f32+0x14>
 8006ab8:	0801a070 	.word	0x0801a070

08006abc <arm_rfft_fast_init_128_f32>:

arm_status arm_rfft_fast_init_128_f32( arm_rfft_fast_instance_f32 * S ) {

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 8006abc:	4601      	mov	r1, r0
arm_status arm_rfft_fast_init_128_f32( arm_rfft_fast_instance_f32 * S ) {
 8006abe:	b508      	push	{r3, lr}
  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 8006ac0:	b138      	cbz	r0, 8006ad2 <arm_rfft_fast_init_128_f32+0x16>

  status=arm_cfft_init_64_f32(&(S->Sint));
 8006ac2:	f7ff f959 	bl	8005d78 <arm_cfft_init_64_f32>
  if (status != ARM_MATH_SUCCESS)
 8006ac6:	b918      	cbnz	r0, 8006ad0 <arm_rfft_fast_init_128_f32+0x14>
  {
    return(status);
  }
  S->fftLenRFFT = 128;
 8006ac8:	2380      	movs	r3, #128	; 0x80
 8006aca:	820b      	strh	r3, [r1, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_128;
 8006acc:	4b02      	ldr	r3, [pc, #8]	; (8006ad8 <arm_rfft_fast_init_128_f32+0x1c>)
 8006ace:	614b      	str	r3, [r1, #20]

  return ARM_MATH_SUCCESS;
}
 8006ad0:	bd08      	pop	{r3, pc}
  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 8006ad2:	f04f 30ff 	mov.w	r0, #4294967295
 8006ad6:	e7fb      	b.n	8006ad0 <arm_rfft_fast_init_128_f32+0x14>
 8006ad8:	080131f0 	.word	0x080131f0

08006adc <arm_rfft_fast_init_256_f32>:

arm_status arm_rfft_fast_init_256_f32( arm_rfft_fast_instance_f32 * S ) {

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 8006adc:	4601      	mov	r1, r0
arm_status arm_rfft_fast_init_256_f32( arm_rfft_fast_instance_f32 * S ) {
 8006ade:	b508      	push	{r3, lr}
  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 8006ae0:	b140      	cbz	r0, 8006af4 <arm_rfft_fast_init_256_f32+0x18>

  status=arm_cfft_init_128_f32(&(S->Sint));
 8006ae2:	f7ff f93b 	bl	8005d5c <arm_cfft_init_128_f32>
  if (status != ARM_MATH_SUCCESS)
 8006ae6:	b920      	cbnz	r0, 8006af2 <arm_rfft_fast_init_256_f32+0x16>
  {
    return(status);
  }
  S->fftLenRFFT = 256U;
 8006ae8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006aec:	820b      	strh	r3, [r1, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_256;
 8006aee:	4b03      	ldr	r3, [pc, #12]	; (8006afc <arm_rfft_fast_init_256_f32+0x20>)
 8006af0:	614b      	str	r3, [r1, #20]

  return ARM_MATH_SUCCESS;
}
 8006af2:	bd08      	pop	{r3, pc}
  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 8006af4:	f04f 30ff 	mov.w	r0, #4294967295
 8006af8:	e7fb      	b.n	8006af2 <arm_rfft_fast_init_256_f32+0x16>
 8006afa:	bf00      	nop
 8006afc:	080153f0 	.word	0x080153f0

08006b00 <arm_rfft_fast_init_512_f32>:

arm_status arm_rfft_fast_init_512_f32( arm_rfft_fast_instance_f32 * S ) {

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 8006b00:	4601      	mov	r1, r0
arm_status arm_rfft_fast_init_512_f32( arm_rfft_fast_instance_f32 * S ) {
 8006b02:	b508      	push	{r3, lr}
  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 8006b04:	b140      	cbz	r0, 8006b18 <arm_rfft_fast_init_512_f32+0x18>

  status=arm_cfft_init_256_f32(&(S->Sint));
 8006b06:	f7ff f91b 	bl	8005d40 <arm_cfft_init_256_f32>
  if (status != ARM_MATH_SUCCESS)
 8006b0a:	b920      	cbnz	r0, 8006b16 <arm_rfft_fast_init_512_f32+0x16>
  {
    return(status);
  }
  S->fftLenRFFT = 512U;
 8006b0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006b10:	820b      	strh	r3, [r1, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_512;
 8006b12:	4b03      	ldr	r3, [pc, #12]	; (8006b20 <arm_rfft_fast_init_512_f32+0x20>)
 8006b14:	614b      	str	r3, [r1, #20]

  return ARM_MATH_SUCCESS;
}
 8006b16:	bd08      	pop	{r3, pc}
  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 8006b18:	f04f 30ff 	mov.w	r0, #4294967295
 8006b1c:	e7fb      	b.n	8006b16 <arm_rfft_fast_init_512_f32+0x16>
 8006b1e:	bf00      	nop
 8006b20:	08019870 	.word	0x08019870

08006b24 <arm_rfft_fast_init_1024_f32>:

arm_status arm_rfft_fast_init_1024_f32( arm_rfft_fast_instance_f32 * S ) {

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 8006b24:	4601      	mov	r1, r0
arm_status arm_rfft_fast_init_1024_f32( arm_rfft_fast_instance_f32 * S ) {
 8006b26:	b508      	push	{r3, lr}
  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 8006b28:	b140      	cbz	r0, 8006b3c <arm_rfft_fast_init_1024_f32+0x18>

  status=arm_cfft_init_512_f32(&(S->Sint));
 8006b2a:	f7ff f8fb 	bl	8005d24 <arm_cfft_init_512_f32>
  if (status != ARM_MATH_SUCCESS)
 8006b2e:	b920      	cbnz	r0, 8006b3a <arm_rfft_fast_init_1024_f32+0x16>
  {
    return(status);
  }
  S->fftLenRFFT = 1024U;
 8006b30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006b34:	820b      	strh	r3, [r1, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_1024;
 8006b36:	4b03      	ldr	r3, [pc, #12]	; (8006b44 <arm_rfft_fast_init_1024_f32+0x20>)
 8006b38:	614b      	str	r3, [r1, #20]

  return ARM_MATH_SUCCESS;
}
 8006b3a:	bd08      	pop	{r3, pc}
  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 8006b3c:	f04f 30ff 	mov.w	r0, #4294967295
 8006b40:	e7fb      	b.n	8006b3a <arm_rfft_fast_init_1024_f32+0x16>
 8006b42:	bf00      	nop
 8006b44:	080121f0 	.word	0x080121f0

08006b48 <arm_rfft_fast_init_2048_f32>:
 */
arm_status arm_rfft_fast_init_2048_f32( arm_rfft_fast_instance_f32 * S ) {

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 8006b48:	4601      	mov	r1, r0
arm_status arm_rfft_fast_init_2048_f32( arm_rfft_fast_instance_f32 * S ) {
 8006b4a:	b508      	push	{r3, lr}
  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 8006b4c:	b140      	cbz	r0, 8006b60 <arm_rfft_fast_init_2048_f32+0x18>

  status=arm_cfft_init_1024_f32(&(S->Sint));
 8006b4e:	f7ff f8db 	bl	8005d08 <arm_cfft_init_1024_f32>
  if (status != ARM_MATH_SUCCESS)
 8006b52:	b920      	cbnz	r0, 8006b5e <arm_rfft_fast_init_2048_f32+0x16>
  {
    return(status);
  }
  S->fftLenRFFT = 2048U;
 8006b54:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006b58:	820b      	strh	r3, [r1, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_2048;
 8006b5a:	4b03      	ldr	r3, [pc, #12]	; (8006b68 <arm_rfft_fast_init_2048_f32+0x20>)
 8006b5c:	614b      	str	r3, [r1, #20]

  return ARM_MATH_SUCCESS;
}
 8006b5e:	bd08      	pop	{r3, pc}
  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 8006b60:	f04f 30ff 	mov.w	r0, #4294967295
 8006b64:	e7fb      	b.n	8006b5e <arm_rfft_fast_init_2048_f32+0x16>
 8006b66:	bf00      	nop
 8006b68:	080133f0 	.word	0x080133f0

08006b6c <arm_rfft_fast_init_4096_f32>:

arm_status arm_rfft_fast_init_4096_f32( arm_rfft_fast_instance_f32 * S ) {

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 8006b6c:	4601      	mov	r1, r0
arm_status arm_rfft_fast_init_4096_f32( arm_rfft_fast_instance_f32 * S ) {
 8006b6e:	b508      	push	{r3, lr}
  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 8006b70:	b140      	cbz	r0, 8006b84 <arm_rfft_fast_init_4096_f32+0x18>

  status=arm_cfft_init_2048_f32(&(S->Sint));
 8006b72:	f7ff f8bb 	bl	8005cec <arm_cfft_init_2048_f32>
  if (status != ARM_MATH_SUCCESS)
 8006b76:	b920      	cbnz	r0, 8006b82 <arm_rfft_fast_init_4096_f32+0x16>
  {
    return(status);
  }
  S->fftLenRFFT = 4096U;
 8006b78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006b7c:	820b      	strh	r3, [r1, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_4096;
 8006b7e:	4b03      	ldr	r3, [pc, #12]	; (8006b8c <arm_rfft_fast_init_4096_f32+0x20>)
 8006b80:	614b      	str	r3, [r1, #20]

  return ARM_MATH_SUCCESS;
}
 8006b82:	bd08      	pop	{r3, pc}
  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 8006b84:	f04f 30ff 	mov.w	r0, #4294967295
 8006b88:	e7fb      	b.n	8006b82 <arm_rfft_fast_init_4096_f32+0x16>
 8006b8a:	bf00      	nop
 8006b8c:	08015870 	.word	0x08015870

08006b90 <arm_rfft_fast_init_f32>:
  uint16_t fftLen)
{
  arm_status status;


  switch (fftLen)
 8006b90:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8006b94:	d01e      	beq.n	8006bd4 <arm_rfft_fast_init_f32+0x44>
 8006b96:	d80e      	bhi.n	8006bb6 <arm_rfft_fast_init_f32+0x26>
 8006b98:	2980      	cmp	r1, #128	; 0x80
 8006b9a:	d01d      	beq.n	8006bd8 <arm_rfft_fast_init_f32+0x48>
 8006b9c:	d806      	bhi.n	8006bac <arm_rfft_fast_init_f32+0x1c>
 8006b9e:	2920      	cmp	r1, #32
 8006ba0:	d01e      	beq.n	8006be0 <arm_rfft_fast_init_f32+0x50>
 8006ba2:	2940      	cmp	r1, #64	; 0x40
 8006ba4:	d01a      	beq.n	8006bdc <arm_rfft_fast_init_f32+0x4c>
    break;
  }

  return(status);

}
 8006ba6:	f04f 30ff 	mov.w	r0, #4294967295
 8006baa:	4770      	bx	lr
  switch (fftLen)
 8006bac:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8006bb0:	d1f9      	bne.n	8006ba6 <arm_rfft_fast_init_f32+0x16>
    status = arm_rfft_fast_init_256_f32(S);
 8006bb2:	f7ff bf93 	b.w	8006adc <arm_rfft_fast_init_256_f32>
  switch (fftLen)
 8006bb6:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 8006bba:	d009      	beq.n	8006bd0 <arm_rfft_fast_init_f32+0x40>
 8006bbc:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8006bc0:	d004      	beq.n	8006bcc <arm_rfft_fast_init_f32+0x3c>
 8006bc2:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8006bc6:	d1ee      	bne.n	8006ba6 <arm_rfft_fast_init_f32+0x16>
    status = arm_rfft_fast_init_1024_f32(S);
 8006bc8:	f7ff bfac 	b.w	8006b24 <arm_rfft_fast_init_1024_f32>
    status = arm_rfft_fast_init_4096_f32(S);
 8006bcc:	f7ff bfce 	b.w	8006b6c <arm_rfft_fast_init_4096_f32>
    status = arm_rfft_fast_init_2048_f32(S);
 8006bd0:	f7ff bfba 	b.w	8006b48 <arm_rfft_fast_init_2048_f32>
    status = arm_rfft_fast_init_512_f32(S);
 8006bd4:	f7ff bf94 	b.w	8006b00 <arm_rfft_fast_init_512_f32>
    status = arm_rfft_fast_init_128_f32(S);
 8006bd8:	f7ff bf70 	b.w	8006abc <arm_rfft_fast_init_128_f32>
    status = arm_rfft_fast_init_64_f32(S);
 8006bdc:	f7ff bf5e 	b.w	8006a9c <arm_rfft_fast_init_64_f32>
    status = arm_rfft_fast_init_32_f32(S);
 8006be0:	f7ff bf4c 	b.w	8006a7c <arm_rfft_fast_init_32_f32>

08006be4 <__libc_init_array>:
 8006be4:	b570      	push	{r4, r5, r6, lr}
 8006be6:	4d0d      	ldr	r5, [pc, #52]	; (8006c1c <__libc_init_array+0x38>)
 8006be8:	4c0d      	ldr	r4, [pc, #52]	; (8006c20 <__libc_init_array+0x3c>)
 8006bea:	1b64      	subs	r4, r4, r5
 8006bec:	10a4      	asrs	r4, r4, #2
 8006bee:	2600      	movs	r6, #0
 8006bf0:	42a6      	cmp	r6, r4
 8006bf2:	d109      	bne.n	8006c08 <__libc_init_array+0x24>
 8006bf4:	4d0b      	ldr	r5, [pc, #44]	; (8006c24 <__libc_init_array+0x40>)
 8006bf6:	4c0c      	ldr	r4, [pc, #48]	; (8006c28 <__libc_init_array+0x44>)
 8006bf8:	f000 f820 	bl	8006c3c <_init>
 8006bfc:	1b64      	subs	r4, r4, r5
 8006bfe:	10a4      	asrs	r4, r4, #2
 8006c00:	2600      	movs	r6, #0
 8006c02:	42a6      	cmp	r6, r4
 8006c04:	d105      	bne.n	8006c12 <__libc_init_array+0x2e>
 8006c06:	bd70      	pop	{r4, r5, r6, pc}
 8006c08:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c0c:	4798      	blx	r3
 8006c0e:	3601      	adds	r6, #1
 8006c10:	e7ee      	b.n	8006bf0 <__libc_init_array+0xc>
 8006c12:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c16:	4798      	blx	r3
 8006c18:	3601      	adds	r6, #1
 8006c1a:	e7f2      	b.n	8006c02 <__libc_init_array+0x1e>
 8006c1c:	0801a178 	.word	0x0801a178
 8006c20:	0801a178 	.word	0x0801a178
 8006c24:	0801a178 	.word	0x0801a178
 8006c28:	0801a17c 	.word	0x0801a17c

08006c2c <memset>:
 8006c2c:	4402      	add	r2, r0
 8006c2e:	4603      	mov	r3, r0
 8006c30:	4293      	cmp	r3, r2
 8006c32:	d100      	bne.n	8006c36 <memset+0xa>
 8006c34:	4770      	bx	lr
 8006c36:	f803 1b01 	strb.w	r1, [r3], #1
 8006c3a:	e7f9      	b.n	8006c30 <memset+0x4>

08006c3c <_init>:
 8006c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c3e:	bf00      	nop
 8006c40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c42:	bc08      	pop	{r3}
 8006c44:	469e      	mov	lr, r3
 8006c46:	4770      	bx	lr

08006c48 <_fini>:
 8006c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c4a:	bf00      	nop
 8006c4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c4e:	bc08      	pop	{r3}
 8006c50:	469e      	mov	lr, r3
 8006c52:	4770      	bx	lr
